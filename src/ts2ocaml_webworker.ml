[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_min
open Ts2ocaml_es
module DOMHighResTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> Ojs.float_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : float) -> Ojs.float_to_js x1
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4 : Ojs.t) -> t_of_js x4
    and t_0_to_js : t_0 -> Ojs.t = fun (x3 : t) -> t_to_js x3
  end
module PerformanceMeasureOptions =
  struct
    type t = [ `PerformanceMeasureOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6 : Ojs.t) -> t_of_js x6
    and t_0_to_js : t_0 -> Ojs.t = fun (x5 : t) -> t_to_js x5
    type tags = [ `PerformanceMeasureOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x9 : Ojs.t) -> intf_of_js __tags_of_js x9
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7 : __tags intf) -> intf_to_js __tags_to_js x7
    let (get_detail : 'tags this -> any) =
      fun (x11 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x13 : 'tags this) ->
        fun (x14 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13) "detail"
            (any_to_js x14)
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x16 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16) "duration")
    let (set_duration : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x18 : 'tags this) ->
        fun (x19 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x18) "duration"
            (DOMHighResTimeStamp.t_to_js x19)
    let (get_end :
      'tags this ->
        [ `String of string  | `Other of DOMHighResTimeStamp.t ] Primitive.t)
      =
      fun (x21 : 'tags this) ->
        Primitive.t_of_js
          (fun (x23 : Ojs.t) ->
             let x24 = x23 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x24 "dummy") with
             | "String" -> `String (Ojs.string_of_js x24)
             | "Other" -> `Other (DOMHighResTimeStamp.t_of_js x24)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x21) "end")
    let (set_end :
      'tags this -> [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ] -> unit)
      =
      fun (x25 : 'tags this) ->
        fun (x26 : [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x25) "end"
            (match x26 with
             | `U1 x27 -> Ojs.string_to_js x27
             | `U2 x28 -> DOMHighResTimeStamp.t_to_js x28)
    let (get_start :
      'tags this ->
        [ `String of string  | `Other of DOMHighResTimeStamp.t ] Primitive.t)
      =
      fun (x30 : 'tags this) ->
        Primitive.t_of_js
          (fun (x32 : Ojs.t) ->
             let x33 = x32 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x33 "dummy") with
             | "String" -> `String (Ojs.string_of_js x33)
             | "Other" -> `Other (DOMHighResTimeStamp.t_of_js x33)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x30) "start")
    let (set_start :
      'tags this -> [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ] -> unit)
      =
      fun (x34 : 'tags this) ->
        fun (x35 : [ `U1 of string  | `U2 of DOMHighResTimeStamp.t ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x34) "start"
            (match x35 with
             | `U1 x36 -> Ojs.string_to_js x36
             | `U2 x37 -> DOMHighResTimeStamp.t_to_js x37)
    let (create :
      detail:any ->
        duration:DOMHighResTimeStamp.t ->
          end_:[ `String of string  | `Other of DOMHighResTimeStamp.t ]
            Primitive.t ->
            start:[ `String of string  | `Other of DOMHighResTimeStamp.t ]
              Primitive.t -> unit -> t)
      =
      fun ~detail:(x39 : any) ->
        fun ~duration:(x40 : DOMHighResTimeStamp.t) ->
          fun
            ~end_:(x41 :
                    [ `String of string  | `Other of DOMHighResTimeStamp.t ]
                      Primitive.t)
            ->
            fun
              ~start:(x42 :
                       [ `String of string 
                       | `Other of DOMHighResTimeStamp.t ] Primitive.t)
              ->
              fun () ->
                let x43 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x43 "detail" (any_to_js x39);
                Ojs.set_prop_ascii x43 "duration"
                  (DOMHighResTimeStamp.t_to_js x40);
                Ojs.set_prop_ascii x43 "end"
                  (Primitive.t_to_js
                     (fun
                        (x47 :
                          [ `String of string 
                          | `Other of DOMHighResTimeStamp.t ])
                        ->
                        match x47 with
                        | `String x48 -> Ojs.string_to_js x48
                        | `Other x49 -> DOMHighResTimeStamp.t_to_js x49) x41);
                Ojs.set_prop_ascii x43 "start"
                  (Primitive.t_to_js
                     (fun
                        (x44 :
                          [ `String of string 
                          | `Other of DOMHighResTimeStamp.t ])
                        ->
                        match x44 with
                        | `String x45 -> Ojs.string_to_js x45
                        | `Other x46 -> DOMHighResTimeStamp.t_to_js x46) x42);
                t_of_js x43
    let cast_from = Obj.magic
  end
module PerformanceEntry =
  struct
    type t = [ `PerformanceEntry ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x51 : Ojs.t) -> t_of_js x51
    and t_0_to_js : t_0 -> Ojs.t = fun (x50 : t) -> t_to_js x50
    type tags = [ `PerformanceEntry ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x54 : Ojs.t) -> intf_of_js __tags_of_js x54
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x52 : __tags intf) -> intf_to_js __tags_to_js x52
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x56 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x56) "duration")
    let (get_entryType : 'tags this -> string) =
      fun (x58 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x58) "entryType")
    let (get_name : 'tags this -> string) =
      fun (x60 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x60) "name")
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x62 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x62) "startTime")
    let (toJSON : 'tags this -> any) =
      fun (x64 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x64) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceEntry") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
             [||])
  end
module PerformanceMeasure =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMeasure ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x67 : Ojs.t) -> t_of_js x67
    and t_0_to_js : t_0 -> Ojs.t = fun (x66 : t) -> t_to_js x66
    type tags = [ `PerformanceEntry  | `PerformanceMeasure ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x70 : Ojs.t) -> intf_of_js __tags_of_js x70
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x68 : __tags intf) -> intf_to_js __tags_to_js x68
    let (get_detail : 'tags this -> any) =
      fun (x72 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x72) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x74 : any) ->
        fun () ->
          let x75 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x75 "detail" (any_to_js x74); t_of_js x75
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
             [||])
  end
module PerformanceMarkOptions =
  struct
    type t = [ `PerformanceMarkOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x77 : Ojs.t) -> t_of_js x77
    and t_0_to_js : t_0 -> Ojs.t = fun (x76 : t) -> t_to_js x76
    type tags = [ `PerformanceMarkOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x80 : Ojs.t) -> intf_of_js __tags_of_js x80
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x78 : __tags intf) -> intf_to_js __tags_to_js x78
    let (get_detail : 'tags this -> any) =
      fun (x82 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x82) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x84 : 'tags this) ->
        fun (x85 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x84) "detail"
            (any_to_js x85)
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x87 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x87) "startTime")
    let (set_startTime : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x89 : 'tags this) ->
        fun (x90 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x89) "startTime"
            (DOMHighResTimeStamp.t_to_js x90)
    let (create : detail:any -> startTime:DOMHighResTimeStamp.t -> unit -> t)
      =
      fun ~detail:(x92 : any) ->
        fun ~startTime:(x93 : DOMHighResTimeStamp.t) ->
          fun () ->
            let x94 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x94 "detail" (any_to_js x92);
            Ojs.set_prop_ascii x94 "startTime"
              (DOMHighResTimeStamp.t_to_js x93);
            t_of_js x94
    let cast_from = Obj.magic
  end
module PerformanceMark =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x96 : Ojs.t) -> t_of_js x96
    and t_0_to_js : t_0 -> Ojs.t = fun (x95 : t) -> t_to_js x95
    type tags = [ `PerformanceEntry  | `PerformanceMark ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x99 : Ojs.t) -> intf_of_js __tags_of_js x99
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x97 : __tags intf) -> intf_to_js __tags_to_js x97
    let (get_detail : 'tags this -> any) =
      fun (x101 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x101) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x103 : any) ->
        fun () ->
          let x104 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x104 "detail" (any_to_js x103); t_of_js x104
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMark") "prototype")
    let (create' :
      markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t)
      =
      fun ~markName:(x105 : string) ->
        fun ?markOptions:(x106 : PerformanceMarkOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
                 (let x107 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x107 "push" [|(Ojs.string_to_js x105)|]);
                  (match x106 with
                   | Some x108 ->
                       ignore
                         (Ojs.call x107 "push"
                            [|(PerformanceMarkOptions.t_to_js x108)|])
                   | None -> ());
                  x107))
  end
module PerformanceEntryList =
  struct
    type t = PerformanceEntry.t list
    let rec t_of_js : Ojs.t -> t =
      fun (x111 : Ojs.t) -> Ojs.list_of_js PerformanceEntry.t_of_js x111
    and t_to_js : t -> Ojs.t =
      fun (x109 : PerformanceEntry.t list) ->
        Ojs.list_to_js PerformanceEntry.t_to_js x109
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x114 : Ojs.t) -> t_of_js x114
    and t_0_to_js : t_0 -> Ojs.t = fun (x113 : t) -> t_to_js x113
  end
module EventInit =
  struct
    type t = [ `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x116 : Ojs.t) -> t_of_js x116
    and t_0_to_js : t_0 -> Ojs.t = fun (x115 : t) -> t_to_js x115
    type tags = [ `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x119 : Ojs.t) -> intf_of_js __tags_of_js x119
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x117 : __tags intf) -> intf_to_js __tags_to_js x117
    let (get_bubbles : 'tags this -> bool) =
      fun (x121 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x121) "bubbles")
    let (set_bubbles : 'tags this -> bool -> unit) =
      fun (x123 : 'tags this) ->
        fun (x124 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x123) "bubbles"
            (Ojs.bool_to_js x124)
    let (get_cancelable : 'tags this -> bool) =
      fun (x126 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x126) "cancelable")
    let (set_cancelable : 'tags this -> bool -> unit) =
      fun (x128 : 'tags this) ->
        fun (x129 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x128) "cancelable"
            (Ojs.bool_to_js x129)
    let (get_composed : 'tags this -> bool) =
      fun (x131 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x131) "composed")
    let (set_composed : 'tags this -> bool -> unit) =
      fun (x133 : 'tags this) ->
        fun (x134 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x133) "composed"
            (Ojs.bool_to_js x134)
    let (create :
      bubbles:bool -> cancelable:bool -> composed:bool -> unit -> t) =
      fun ~bubbles:(x136 : bool) ->
        fun ~cancelable:(x137 : bool) ->
          fun ~composed:(x138 : bool) ->
            fun () ->
              let x139 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x139 "bubbles" (Ojs.bool_to_js x136);
              Ojs.set_prop_ascii x139 "cancelable" (Ojs.bool_to_js x137);
              Ojs.set_prop_ascii x139 "composed" (Ojs.bool_to_js x138);
              t_of_js x139
    let cast_from = Obj.magic
  end
module EventListenerOptions =
  struct
    type t = [ `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x141 : Ojs.t) -> t_of_js x141
    and t_0_to_js : t_0 -> Ojs.t = fun (x140 : t) -> t_to_js x140
    type tags = [ `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x144 : Ojs.t) -> intf_of_js __tags_of_js x144
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x142 : __tags intf) -> intf_to_js __tags_to_js x142
    let (get_capture : 'tags this -> bool) =
      fun (x146 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x146) "capture")
    let (set_capture : 'tags this -> bool -> unit) =
      fun (x148 : 'tags this) ->
        fun (x149 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x148) "capture"
            (Ojs.bool_to_js x149)
    let (create : capture:bool -> unit -> t) =
      fun ~capture:(x151 : bool) ->
        fun () ->
          let x152 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x152 "capture" (Ojs.bool_to_js x151);
          t_of_js x152
    let cast_from = Obj.magic
  end
module rec
  AbortSignal:sig
                type t = [ `AbortSignal  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `AbortSignal  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `AbortSignal  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `AbortSignal ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_aborted : 'tags this -> bool
                val get_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) option
                val set_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) option -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:[ `U1 of bool 
                                 | `U2 of AddEventListenerOptions.t ]
                          -> unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:[ `U1 of bool 
                                 | `U2 of AddEventListenerOptions.t ]
                          -> unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:[ `U1 of bool 
                                 | `U2 of EventListenerOptions.t ]
                          -> unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:[ `U1 of bool 
                                 | `U2 of EventListenerOptions.t ]
                          -> unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `AbortSignal  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x154 : Ojs.t) -> t_of_js x154
    and t_0_to_js : t_0 -> Ojs.t = fun (x153 : t) -> t_to_js x153
    type tags = [ `AbortSignal  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x157 : Ojs.t) -> intf_of_js __tags_of_js x157
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x155 : __tags intf) -> intf_to_js __tags_to_js x155
    let (get_aborted : 'tags this -> bool) =
      fun (x159 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x159) "aborted")
    let (get_onabort : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x161 : 'tags this) ->
        Ojs.option_of_js
          (fun (x163 : Ojs.t) ->
             fun ~this:(x164 : t) ->
               fun ~ev:(x165 : Event.t) ->
                 any_of_js
                   (Ojs.apply x163 [|(t_to_js x164);(Event.t_to_js x165)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x161) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x166 : 'tags this) ->
        fun (x167 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x166) "onabort"
            (Ojs.option_to_js
               (fun (x168 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x169 : Ojs.t) ->
                       fun (x170 : Ojs.t) ->
                         any_to_js
                           (x168 ~this:(t_of_js x169)
                              ~ev:(Event.t_of_js x170)))) x167)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x181 : 'tags this) ->
        fun ~type_:(x172 : 'K) ->
          fun ~listener:(x173 : this:t -> ev:any -> any) ->
            fun
              ?options:(x174 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x183 = this_to_js Obj.magic x181 in
                   Ojs.call (Ojs.get_prop_ascii x183 "addEventListener")
                     "apply"
                     [|x183;((let x175 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x175 "push" [|(Obj.magic x172)|]);
                              ignore
                                (Ojs.call x175 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x179 : Ojs.t) ->
                                           fun (x180 : Ojs.t) ->
                                             any_to_js
                                               (x173 ~this:(t_of_js x179)
                                                  ~ev:(any_of_js x180))))|]);
                              (match x174 with
                               | Some x176 ->
                                   ignore
                                     (Ojs.call x175 "push"
                                        [|((match x176 with
                                            | `U1 x177 -> Ojs.bool_to_js x177
                                            | `U2 x178 ->
                                                AddEventListenerOptions.t_to_js
                                                  x178))|])
                               | None -> ());
                              x175))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x191 : 'tags this) ->
        fun ~type_:(x184 : string) ->
          fun ~listener:(x185 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x186 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x193 = this_to_js Obj.magic x191 in
                   Ojs.call (Ojs.get_prop_ascii x193 "addEventListener")
                     "apply"
                     [|x193;((let x187 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x187 "push"
                                   [|(Ojs.string_to_js x184)|]);
                              ignore
                                (Ojs.call x187 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x185)|]);
                              (match x186 with
                               | Some x188 ->
                                   ignore
                                     (Ojs.call x187 "push"
                                        [|((match x188 with
                                            | `U1 x189 -> Ojs.bool_to_js x189
                                            | `U2 x190 ->
                                                AddEventListenerOptions.t_to_js
                                                  x190))|])
                               | None -> ());
                              x187))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x203 : 'tags this) ->
        fun ~type_:(x194 : 'K) ->
          fun ~listener:(x195 : this:t -> ev:any -> any) ->
            fun
              ?options:(x196 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x205 = this_to_js Obj.magic x203 in
                   Ojs.call (Ojs.get_prop_ascii x205 "removeEventListener")
                     "apply"
                     [|x205;((let x197 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x197 "push" [|(Obj.magic x194)|]);
                              ignore
                                (Ojs.call x197 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x201 : Ojs.t) ->
                                           fun (x202 : Ojs.t) ->
                                             any_to_js
                                               (x195 ~this:(t_of_js x201)
                                                  ~ev:(any_of_js x202))))|]);
                              (match x196 with
                               | Some x198 ->
                                   ignore
                                     (Ojs.call x197 "push"
                                        [|((match x198 with
                                            | `U1 x199 -> Ojs.bool_to_js x199
                                            | `U2 x200 ->
                                                EventListenerOptions.t_to_js
                                                  x200))|])
                               | None -> ());
                              x197))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x213 : 'tags this) ->
        fun ~type_:(x206 : string) ->
          fun ~listener:(x207 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x208 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x215 = this_to_js Obj.magic x213 in
                   Ojs.call (Ojs.get_prop_ascii x215 "removeEventListener")
                     "apply"
                     [|x215;((let x209 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x209 "push"
                                   [|(Ojs.string_to_js x206)|]);
                              ignore
                                (Ojs.call x209 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x207)|]);
                              (match x208 with
                               | Some x210 ->
                                   ignore
                                     (Ojs.call x209 "push"
                                        [|((match x210 with
                                            | `U1 x211 -> Ojs.bool_to_js x211
                                            | `U2 x212 ->
                                                EventListenerOptions.t_to_js
                                                  x212))|])
                               | None -> ());
                              x209))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "AbortSignal")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortSignal") [||])
  end
 and
  AddEventListenerOptions:sig
                            type t =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `AddEventListenerOptions 
                                | `EventListenerOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `AddEventListenerOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_once : 'tags this -> bool
                            val set_once : 'tags this -> bool -> unit
                            val get_passive : 'tags this -> bool
                            val set_passive : 'tags this -> bool -> unit
                            val get_signal : 'tags this -> AbortSignal.t
                            val set_signal :
                              'tags this -> AbortSignal.t -> unit
                            val create :
                              once:bool ->
                                passive:bool ->
                                  signal:AbortSignal.t -> unit -> t
                            val cast_from : 'tags this -> t
                          end =
  struct
    type t = [ `AddEventListenerOptions  | `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x217 : Ojs.t) -> t_of_js x217
    and t_0_to_js : t_0 -> Ojs.t = fun (x216 : t) -> t_to_js x216
    type tags = [ `AddEventListenerOptions  | `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AddEventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x220 : Ojs.t) -> intf_of_js __tags_of_js x220
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x218 : __tags intf) -> intf_to_js __tags_to_js x218
    let (get_once : 'tags this -> bool) =
      fun (x222 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x222) "once")
    let (set_once : 'tags this -> bool -> unit) =
      fun (x224 : 'tags this) ->
        fun (x225 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x224) "once"
            (Ojs.bool_to_js x225)
    let (get_passive : 'tags this -> bool) =
      fun (x227 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x227) "passive")
    let (set_passive : 'tags this -> bool -> unit) =
      fun (x229 : 'tags this) ->
        fun (x230 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x229) "passive"
            (Ojs.bool_to_js x230)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x232 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x232) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x234 : 'tags this) ->
        fun (x235 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x234) "signal"
            (AbortSignal.t_to_js x235)
    let (create :
      once:bool -> passive:bool -> signal:AbortSignal.t -> unit -> t) =
      fun ~once:(x237 : bool) ->
        fun ~passive:(x238 : bool) ->
          fun ~signal:(x239 : AbortSignal.t) ->
            fun () ->
              let x240 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x240 "once" (Ojs.bool_to_js x237);
              Ojs.set_prop_ascii x240 "passive" (Ojs.bool_to_js x238);
              Ojs.set_prop_ascii x240 "signal" (AbortSignal.t_to_js x239);
              t_of_js x240
    let cast_from = Obj.magic
  end and
       Event:sig
               type t = [ `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `Event ]
                 type tags_0 = tags]
               type 'tags this = 'tags intf constraint 'tags = [> `Event ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_bubbles : 'tags this -> bool
               val get_cancelBubble : 'tags this -> bool
               val set_cancelBubble : 'tags this -> bool -> unit
               val get_cancelable : 'tags this -> bool
               val get_composed : 'tags this -> bool
               val get_currentTarget : 'tags this -> EventTarget.t option
               val get_defaultPrevented : 'tags this -> bool
               val get_eventPhase : 'tags this -> float
               val get_isTrusted : 'tags this -> bool
               val get_returnValue : 'tags this -> bool
               val set_returnValue : 'tags this -> bool -> unit
               val get_srcElement : 'tags this -> EventTarget.t option
               val get_target : 'tags this -> EventTarget.t option
               val get_timeStamp : 'tags this -> DOMHighResTimeStamp.t
               val get_type : 'tags this -> string
               val composedPath : 'tags this -> EventTarget.t list
               val initEvent :
                 'tags this ->
                   type_:string ->
                     ?bubbles:bool -> ?cancelable:bool -> unit -> unit
               val preventDefault : 'tags this -> unit
               val stopImmediatePropagation : 'tags this -> unit
               val stopPropagation : 'tags this -> unit
               val get_AT_TARGET : 'tags this -> float
               val get_BUBBLING_PHASE : 'tags this -> float
               val get_CAPTURING_PHASE : 'tags this -> float
               val get_NONE : 'tags this -> float
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:EventInit.t -> unit -> t
               val at_target : unit -> float
               val bubbling_phase : unit -> float
               val capturing_phase : unit -> float
               val none : unit -> float
             end =
       struct
         type t = [ `Event ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x242 : Ojs.t) -> t_of_js x242
         and t_0_to_js : t_0 -> Ojs.t = fun (x241 : t) -> t_to_js x241
         type tags = [ `Event ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `Event ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           =
           fun (type __tags) ->
             fun (__tags_of_js : Ojs.t -> __tags) ->
               fun (x245 : Ojs.t) -> intf_of_js __tags_of_js x245
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
             fun (__tags_to_js : __tags -> Ojs.t) ->
               fun (x243 : __tags intf) -> intf_to_js __tags_to_js x243
         let (get_bubbles : 'tags this -> bool) =
           fun (x247 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x247) "bubbles")
         let (get_cancelBubble : 'tags this -> bool) =
           fun (x249 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x249) "cancelBubble")
         let (set_cancelBubble : 'tags this -> bool -> unit) =
           fun (x251 : 'tags this) ->
             fun (x252 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x251) "cancelBubble"
                 (Ojs.bool_to_js x252)
         let (get_cancelable : 'tags this -> bool) =
           fun (x254 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x254) "cancelable")
         let (get_composed : 'tags this -> bool) =
           fun (x256 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x256) "composed")
         let (get_currentTarget : 'tags this -> EventTarget.t option) =
           fun (x258 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x258)
                  "currentTarget")
         let (get_defaultPrevented : 'tags this -> bool) =
           fun (x261 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x261)
                  "defaultPrevented")
         let (get_eventPhase : 'tags this -> float) =
           fun (x263 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x263) "eventPhase")
         let (get_isTrusted : 'tags this -> bool) =
           fun (x265 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x265) "isTrusted")
         let (get_returnValue : 'tags this -> bool) =
           fun (x267 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x267) "returnValue")
         let (set_returnValue : 'tags this -> bool -> unit) =
           fun (x269 : 'tags this) ->
             fun (x270 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x269) "returnValue"
                 (Ojs.bool_to_js x270)
         let (get_srcElement : 'tags this -> EventTarget.t option) =
           fun (x272 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x272) "srcElement")
         let (get_target : 'tags this -> EventTarget.t option) =
           fun (x275 : 'tags this) ->
             Ojs.option_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x275) "target")
         let (get_timeStamp : 'tags this -> DOMHighResTimeStamp.t) =
           fun (x278 : 'tags this) ->
             DOMHighResTimeStamp.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x278) "timeStamp")
         let (get_type : 'tags this -> string) =
           fun (x280 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x280) "type")
         let (composedPath : 'tags this -> EventTarget.t list) =
           fun (x282 : 'tags this) ->
             Ojs.list_of_js EventTarget.t_of_js
               (Ojs.call (this_to_js Obj.magic x282) "composedPath" [||])
         let (initEvent :
           'tags this ->
             type_:string ->
               ?bubbles:bool -> ?cancelable:bool -> unit -> unit)
           =
           fun (x291 : 'tags this) ->
             fun ~type_:(x285 : string) ->
               fun ?bubbles:(x286 : bool option) ->
                 fun ?cancelable:(x287 : bool option) ->
                   fun () ->
                     ignore
                       (let x293 = this_to_js Obj.magic x291 in
                        Ojs.call (Ojs.get_prop_ascii x293 "initEvent")
                          "apply"
                          [|x293;((let x288 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x288 "push"
                                        [|(Ojs.string_to_js x285)|]);
                                   (match x286 with
                                    | Some x290 ->
                                        ignore
                                          (Ojs.call x288 "push"
                                             [|(Ojs.bool_to_js x290)|])
                                    | None -> ());
                                   (match x287 with
                                    | Some x289 ->
                                        ignore
                                          (Ojs.call x288 "push"
                                             [|(Ojs.bool_to_js x289)|])
                                    | None -> ());
                                   x288))|])
         let (preventDefault : 'tags this -> unit) =
           fun (x294 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x294) "preventDefault" [||])
         let (stopImmediatePropagation : 'tags this -> unit) =
           fun (x296 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x296)
                  "stopImmediatePropagation" [||])
         let (stopPropagation : 'tags this -> unit) =
           fun (x298 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x298) "stopPropagation" [||])
         let (get_AT_TARGET : 'tags this -> float) =
           fun (x300 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x300) "AT_TARGET")
         let (get_BUBBLING_PHASE : 'tags this -> float) =
           fun (x302 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x302)
                  "BUBBLING_PHASE")
         let (get_CAPTURING_PHASE : 'tags this -> float) =
           fun (x304 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x304)
                  "CAPTURING_PHASE")
         let (get_NONE : 'tags this -> float) =
           fun (x306 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x306) "NONE")
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "prototype")
         let (create :
           type_:string -> ?eventInitDict:EventInit.t -> unit -> t) =
           fun ~type_:(x308 : string) ->
             fun ?eventInitDict:(x309 : EventInit.t option) ->
               fun () ->
                 t_of_js
                   (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Event")
                      (let x310 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       ignore
                         (Ojs.call x310 "push" [|(Ojs.string_to_js x308)|]);
                       (match x309 with
                        | Some x311 ->
                            ignore
                              (Ojs.call x310 "push"
                                 [|(EventInit.t_to_js x311)|])
                        | None -> ());
                       x310))
         let (at_target : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "AT_TARGET")
         let (bubbling_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "BUBBLING_PHASE")
         let (capturing_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "CAPTURING_PHASE")
         let (none : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "NONE")
       end and
            EventListener:sig
                            type t = [ `EventListener ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `EventListener ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `EventListener ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `EventListener ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val apply : 'tags this -> evt:Event.t -> unit
                            val cast_from : 'tags this -> t
                          end =
            struct
              type t = [ `EventListener ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x313 : Ojs.t) -> t_of_js x313
              and t_0_to_js : t_0 -> Ojs.t = fun (x312 : t) -> t_to_js x312
              type tags = [ `EventListener ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `EventListener ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                fun (type __tags) ->
                  fun (__tags_of_js : Ojs.t -> __tags) ->
                    fun (x316 : Ojs.t) -> intf_of_js __tags_of_js x316
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                fun (type __tags) ->
                  fun (__tags_to_js : __tags -> Ojs.t) ->
                    fun (x314 : __tags intf) -> intf_to_js __tags_to_js x314
              let (apply : 'tags this -> evt:Event.t -> unit) =
                fun (x319 : 'tags this) ->
                  fun ~evt:(x318 : Event.t) ->
                    ignore
                      (Ojs.apply (this_to_js Obj.magic x319)
                         [|(Event.t_to_js x318)|])
              let cast_from = Obj.magic
            end and
                 EventListenerObject:sig
                                       type t = [ `EventListenerObject ] intf
                                       type t_0 = t
                                       [@@@js.stop ]
                                       type tags = [ `EventListenerObject ]
                                       type tags_0 = tags
                                       [@@@js.start ]
                                       [@@@js.implem
                                         type tags = [ `EventListenerObject ]
                                         type tags_0 = tags]
                                       type 'tags this =
                                         'tags intf constraint 'tags =
                                                     [>
                                                       `EventListenerObject ]
                                       val t_to_js : t -> Ojs.t
                                       val t_of_js : Ojs.t -> t
                                       val t_0_to_js : t_0 -> Ojs.t
                                       val t_0_of_js : Ojs.t -> t_0
                                       val handleEvent :
                                         'tags this ->
                                           object_:Event.t -> unit
                                       val cast_from : 'tags this -> t
                                     end =
                 struct
                   type t = [ `EventListenerObject ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x322 : Ojs.t) -> t_of_js x322
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x321 : t) -> t_to_js x321
                   type tags = [ `EventListenerObject ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `EventListenerObject ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                     fun (type __tags) ->
                       fun (__tags_of_js : Ojs.t -> __tags) ->
                         fun (x325 : Ojs.t) -> intf_of_js __tags_of_js x325
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                     fun (type __tags) ->
                       fun (__tags_to_js : __tags -> Ojs.t) ->
                         fun (x323 : __tags intf) ->
                           intf_to_js __tags_to_js x323
                   let (handleEvent : 'tags this -> object_:Event.t -> unit)
                     =
                     fun (x328 : 'tags this) ->
                       fun ~object_:(x327 : Event.t) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x328)
                              "handleEvent" [|(Event.t_to_js x327)|])
                   let cast_from = Obj.magic
                 end and
                      EventListenerOrEventListenerObject:sig
                                                           type t =
                                                             (EventListener.t,
                                                               EventListenerObject.t)
                                                               union2
                                                           type t_0 = t
                                                           val t_to_js :
                                                             t -> Ojs.t
                                                           val t_of_js :
                                                             Ojs.t -> t
                                                           val t_0_to_js :
                                                             t_0 -> Ojs.t
                                                           val t_0_of_js :
                                                             Ojs.t -> t_0
                                                         end =
                      struct
                        type t =
                          (EventListener.t, EventListenerObject.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x333 : Ojs.t) ->
                            union2_of_js EventListener.t_of_js
                              EventListenerObject.t_of_js x333
                        and t_to_js : t -> Ojs.t =
                          fun
                            (x330 :
                              (EventListener.t, EventListenerObject.t) union2)
                            ->
                            union2_to_js EventListener.t_to_js
                              EventListenerObject.t_to_js x330
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x337 : Ojs.t) -> t_of_js x337
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x336 : t) -> t_to_js x336
                      end and
                           EventTarget:sig
                                         type t = [ `EventTarget ] intf
                                         type t_0 = t
                                         [@@@js.stop ]
                                         type tags = [ `EventTarget ]
                                         type tags_0 = tags
                                         [@@@js.start ]
                                         [@@@js.implem
                                           type tags = [ `EventTarget ]
                                           type tags_0 = tags]
                                         type 'tags this =
                                           'tags intf constraint 'tags =
                                                       [> `EventTarget ]
                                         val t_to_js : t -> Ojs.t
                                         val t_of_js : Ojs.t -> t
                                         val t_0_to_js : t_0 -> Ojs.t
                                         val t_0_of_js : Ojs.t -> t_0
                                         val addEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 option ->
                                                 ?options:[
                                                            `U1 of
                                                              AddEventListenerOptions.t
                                                               | `U2 of bool ]
                                                   -> unit -> unit
                                         val dispatchEvent :
                                           'tags this ->
                                             event:Event.t -> bool
                                         val removeEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 option ->
                                                 ?options:[
                                                            `U1 of
                                                              EventListenerOptions.t
                                                               | `U2 of bool ]
                                                   -> unit -> unit
                                         val cast_from : 'tags this -> t
                                         val prototype : unit -> t
                                         val create : unit -> t
                                       end =
                           struct
                             type t = [ `EventTarget ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x339 : Ojs.t) -> t_of_js x339
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x338 : t) -> t_to_js x338
                             type tags = [ `EventTarget ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `EventTarget ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               =
                               fun (type __tags) ->
                                 fun (__tags_of_js : Ojs.t -> __tags) ->
                                   fun (x342 : Ojs.t) ->
                                     intf_of_js __tags_of_js x342
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               =
                               fun (type __tags) ->
                                 fun (__tags_to_js : __tags -> Ojs.t) ->
                                   fun (x340 : __tags intf) ->
                                     intf_to_js __tags_to_js x340
                             let (addEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     option ->
                                     ?options:[
                                                `U1 of
                                                  AddEventListenerOptions.t 
                                              | `U2 of bool ]
                                       -> unit -> unit)
                               =
                               fun (x352 : 'tags this) ->
                                 fun ~type_:(x344 : string) ->
                                   fun
                                     ~callback:(x345 :
                                                 EventListenerOrEventListenerObject.t
                                                   option)
                                     ->
                                     fun
                                       ?options:(x346 :
                                                  [
                                                    `U1 of
                                                      AddEventListenerOptions.t
                                                       | `U2 of bool ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x354 =
                                              this_to_js Obj.magic x352 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x354
                                                 "addEventListener") "apply"
                                              [|x354;((let x347 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x347
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x344)|]);
                                                       ignore
                                                         (Ojs.call x347
                                                            "push"
                                                            [|(Ojs.option_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x345)|]);
                                                       (match x346 with
                                                        | Some x348 ->
                                                            ignore
                                                              (Ojs.call x347
                                                                 "push"
                                                                 [|((
                                                                   match x348
                                                                   with
                                                                   | 
                                                                   `U1 x349
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x349
                                                                   | 
                                                                   `U2 x350
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x350))|])
                                                        | None -> ());
                                                       x347))|])
                             let (dispatchEvent :
                               'tags this -> event:Event.t -> bool) =
                               fun (x356 : 'tags this) ->
                                 fun ~event:(x355 : Event.t) ->
                                   Ojs.bool_of_js
                                     (Ojs.call (this_to_js Obj.magic x356)
                                        "dispatchEvent"
                                        [|(Event.t_to_js x355)|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     option ->
                                     ?options:[
                                                `U1 of EventListenerOptions.t 
                                              | `U2 of bool ]
                                       -> unit -> unit)
                               =
                               fun (x366 : 'tags this) ->
                                 fun ~type_:(x358 : string) ->
                                   fun
                                     ~callback:(x359 :
                                                 EventListenerOrEventListenerObject.t
                                                   option)
                                     ->
                                     fun
                                       ?options:(x360 :
                                                  [
                                                    `U1 of
                                                      EventListenerOptions.t 
                                                  | `U2 of bool ] option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x368 =
                                              this_to_js Obj.magic x366 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x368
                                                 "removeEventListener")
                                              "apply"
                                              [|x368;((let x361 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x361
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x358)|]);
                                                       ignore
                                                         (Ojs.call x361
                                                            "push"
                                                            [|(Ojs.option_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x359)|]);
                                                       (match x360 with
                                                        | Some x362 ->
                                                            ignore
                                                              (Ojs.call x361
                                                                 "push"
                                                                 [|((
                                                                   match x362
                                                                   with
                                                                   | 
                                                                   `U1 x363
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x363
                                                                   | 
                                                                   `U2 x364
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x364))|])
                                                        | None -> ());
                                                       x361))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") [||])
                           end
module Performance =
  struct
    type t = [ `EventTarget  | `Performance ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x370 : Ojs.t) -> t_of_js x370
    and t_0_to_js : t_0 -> Ojs.t = fun (x369 : t) -> t_to_js x369
    type tags = [ `EventTarget  | `Performance ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x373 : Ojs.t) -> intf_of_js __tags_of_js x373
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x371 : __tags intf) -> intf_to_js __tags_to_js x371
    let (get_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x375 : 'tags this) ->
        Ojs.option_of_js
          (fun (x377 : Ojs.t) ->
             fun ~this:(x378 : t) ->
               fun ~ev:(x379 : Event.t) ->
                 any_of_js
                   (Ojs.apply x377 [|(t_to_js x378);(Event.t_to_js x379)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x375)
             "onresourcetimingbufferfull")
    let (set_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x380 : 'tags this) ->
        fun (x381 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x380)
            "onresourcetimingbufferfull"
            (Ojs.option_to_js
               (fun (x382 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x383 : Ojs.t) ->
                       fun (x384 : Ojs.t) ->
                         any_to_js
                           (x382 ~this:(t_of_js x383)
                              ~ev:(Event.t_of_js x384)))) x381)
    let (get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x386 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x386) "timeOrigin")
    let (clearMarks : 'tags this -> ?markName:string -> unit -> unit) =
      fun (x391 : 'tags this) ->
        fun ?markName:(x388 : string option) ->
          fun () ->
            ignore
              (let x393 = this_to_js Obj.magic x391 in
               Ojs.call (Ojs.get_prop_ascii x393 "clearMarks") "apply"
                 [|x393;((let x389 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x388 with
                           | Some x390 ->
                               ignore
                                 (Ojs.call x389 "push"
                                    [|(Ojs.string_to_js x390)|])
                           | None -> ());
                          x389))|])
    let (clearMeasures : 'tags this -> ?measureName:string -> unit -> unit) =
      fun (x397 : 'tags this) ->
        fun ?measureName:(x394 : string option) ->
          fun () ->
            ignore
              (let x399 = this_to_js Obj.magic x397 in
               Ojs.call (Ojs.get_prop_ascii x399 "clearMeasures") "apply"
                 [|x399;((let x395 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x394 with
                           | Some x396 ->
                               ignore
                                 (Ojs.call x395 "push"
                                    [|(Ojs.string_to_js x396)|])
                           | None -> ());
                          x395))|])
    let (clearResourceTimings : 'tags this -> unit) =
      fun (x400 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x400) "clearResourceTimings" [||])
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x402 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x402) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x408 : 'tags this) ->
        fun ~name:(x404 : string) ->
          fun ?type_:(x405 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x410 = this_to_js Obj.magic x408 in
                 Ojs.call (Ojs.get_prop_ascii x410 "getEntriesByName")
                   "apply"
                   [|x410;((let x406 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x406 "push"
                                 [|(Ojs.string_to_js x404)|]);
                            (match x405 with
                             | Some x407 ->
                                 ignore
                                   (Ojs.call x406 "push"
                                      [|(Ojs.string_to_js x407)|])
                             | None -> ());
                            x406))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x412 : 'tags this) ->
        fun ~type_:(x411 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x412) "getEntriesByType"
               [|(Ojs.string_to_js x411)|])
    let (mark :
      'tags this ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x418 : 'tags this) ->
        fun ~markName:(x414 : string) ->
          fun ?markOptions:(x415 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (let x420 = this_to_js Obj.magic x418 in
                 Ojs.call (Ojs.get_prop_ascii x420 "mark") "apply"
                   [|x420;((let x416 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x416 "push"
                                 [|(Ojs.string_to_js x414)|]);
                            (match x415 with
                             | Some x417 ->
                                 ignore
                                   (Ojs.call x416 "push"
                                      [|(PerformanceMarkOptions.t_to_js x417)|])
                             | None -> ());
                            x416))|])
    let (measure :
      'tags this ->
        measureName:string ->
          ?startOrMeasureOptions:[ `U1 of string 
                                 | `U2 of PerformanceMeasureOptions.t ]
            -> ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun (x429 : 'tags this) ->
        fun ~measureName:(x421 : string) ->
          fun
            ?startOrMeasureOptions:(x422 :
                                     [ `U1 of string 
                                     | `U2 of PerformanceMeasureOptions.t ]
                                       option)
            ->
            fun ?endMark:(x423 : string option) ->
              fun () ->
                PerformanceMeasure.t_of_js
                  (let x431 = this_to_js Obj.magic x429 in
                   Ojs.call (Ojs.get_prop_ascii x431 "measure") "apply"
                     [|x431;((let x424 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x424 "push"
                                   [|(Ojs.string_to_js x421)|]);
                              (match x422 with
                               | Some x426 ->
                                   ignore
                                     (Ojs.call x424 "push"
                                        [|((match x426 with
                                            | `U1 x427 ->
                                                Ojs.string_to_js x427
                                            | `U2 x428 ->
                                                PerformanceMeasureOptions.t_to_js
                                                  x428))|])
                               | None -> ());
                              (match x423 with
                               | Some x425 ->
                                   ignore
                                     (Ojs.call x424 "push"
                                        [|(Ojs.string_to_js x425)|])
                               | None -> ());
                              x424))|])
    let (now : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x432 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (this_to_js Obj.magic x432) "now" [||])
    let (setResourceTimingBufferSize : 'tags this -> maxSize:float -> unit) =
      fun (x435 : 'tags this) ->
        fun ~maxSize:(x434 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x435)
               "setResourceTimingBufferSize" [|(Ojs.float_to_js x434)|])
    let (toJSON : 'tags this -> any) =
      fun (x437 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x437) "toJSON" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x448 : 'tags this) ->
        fun ~type_:(x439 : 'K) ->
          fun ~listener:(x440 : this:t -> ev:any -> any) ->
            fun
              ?options:(x441 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x450 = this_to_js Obj.magic x448 in
                   Ojs.call (Ojs.get_prop_ascii x450 "addEventListener")
                     "apply"
                     [|x450;((let x442 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x442 "push" [|(Obj.magic x439)|]);
                              ignore
                                (Ojs.call x442 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x446 : Ojs.t) ->
                                           fun (x447 : Ojs.t) ->
                                             any_to_js
                                               (x440 ~this:(t_of_js x446)
                                                  ~ev:(any_of_js x447))))|]);
                              (match x441 with
                               | Some x443 ->
                                   ignore
                                     (Ojs.call x442 "push"
                                        [|((match x443 with
                                            | `U1 x444 -> Ojs.bool_to_js x444
                                            | `U2 x445 ->
                                                AddEventListenerOptions.t_to_js
                                                  x445))|])
                               | None -> ());
                              x442))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x458 : 'tags this) ->
        fun ~type_:(x451 : string) ->
          fun ~listener:(x452 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x453 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x460 = this_to_js Obj.magic x458 in
                   Ojs.call (Ojs.get_prop_ascii x460 "addEventListener")
                     "apply"
                     [|x460;((let x454 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x454 "push"
                                   [|(Ojs.string_to_js x451)|]);
                              ignore
                                (Ojs.call x454 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x452)|]);
                              (match x453 with
                               | Some x455 ->
                                   ignore
                                     (Ojs.call x454 "push"
                                        [|((match x455 with
                                            | `U1 x456 -> Ojs.bool_to_js x456
                                            | `U2 x457 ->
                                                AddEventListenerOptions.t_to_js
                                                  x457))|])
                               | None -> ());
                              x454))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x470 : 'tags this) ->
        fun ~type_:(x461 : 'K) ->
          fun ~listener:(x462 : this:t -> ev:any -> any) ->
            fun
              ?options:(x463 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x472 = this_to_js Obj.magic x470 in
                   Ojs.call (Ojs.get_prop_ascii x472 "removeEventListener")
                     "apply"
                     [|x472;((let x464 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x464 "push" [|(Obj.magic x461)|]);
                              ignore
                                (Ojs.call x464 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x468 : Ojs.t) ->
                                           fun (x469 : Ojs.t) ->
                                             any_to_js
                                               (x462 ~this:(t_of_js x468)
                                                  ~ev:(any_of_js x469))))|]);
                              (match x463 with
                               | Some x465 ->
                                   ignore
                                     (Ojs.call x464 "push"
                                        [|((match x465 with
                                            | `U1 x466 -> Ojs.bool_to_js x466
                                            | `U2 x467 ->
                                                EventListenerOptions.t_to_js
                                                  x467))|])
                               | None -> ());
                              x464))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x480 : 'tags this) ->
        fun ~type_:(x473 : string) ->
          fun ~listener:(x474 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x475 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x482 = this_to_js Obj.magic x480 in
                   Ojs.call (Ojs.get_prop_ascii x482 "removeEventListener")
                     "apply"
                     [|x482;((let x476 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x476 "push"
                                   [|(Ojs.string_to_js x473)|]);
                              ignore
                                (Ojs.call x476 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x474)|]);
                              (match x475 with
                               | Some x477 ->
                                   ignore
                                     (Ojs.call x476 "push"
                                        [|((match x477 with
                                            | `U1 x478 -> Ojs.bool_to_js x478
                                            | `U2 x479 ->
                                                EventListenerOptions.t_to_js
                                                  x479))|])
                               | None -> ());
                              x476))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Performance")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Performance") [||])
  end
module PerformanceStatic =
  struct
    let (onresourcetimingbufferfull :
      unit -> (this:Performance.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x483 : Ojs.t) ->
             fun ~this:(x484 : Performance.t) ->
               fun ~ev:(x485 : Event.t) ->
                 any_of_js
                   (Ojs.apply x483
                      [|(Performance.t_to_js x484);(Event.t_to_js x485)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "onresourcetimingbufferfull")
    let (timeOrigin : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "timeOrigin")
    let (clearMarks : ?markName:string -> unit -> unit) =
      fun ?markName:(x486 : string option) ->
        fun () ->
          ignore
            (let x489 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x489 "clearMarks") "apply"
               [|x489;((let x487 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x486 with
                         | Some x488 ->
                             ignore
                               (Ojs.call x487 "push"
                                  [|(Ojs.string_to_js x488)|])
                         | None -> ());
                        x487))|])
    let (clearMeasures : ?measureName:string -> unit -> unit) =
      fun ?measureName:(x490 : string option) ->
        fun () ->
          ignore
            (let x493 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x493 "clearMeasures") "apply"
               [|x493;((let x491 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x490 with
                         | Some x492 ->
                             ignore
                               (Ojs.call x491 "push"
                                  [|(Ojs.string_to_js x492)|])
                         | None -> ());
                        x491))|])
    let (clearResourceTimings : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "clearResourceTimings" [||])
    let (getEntries : unit -> PerformanceEntryList.t) =
      fun () ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntries" [||])
    let (getEntriesByName :
      name:string -> ?type_:string -> unit -> PerformanceEntryList.t) =
      fun ~name:(x494 : string) ->
        fun ?type_:(x495 : string option) ->
          fun () ->
            PerformanceEntryList.t_of_js
              (let x498 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x498 "getEntriesByName") "apply"
                 [|x498;((let x496 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x496 "push" [|(Ojs.string_to_js x494)|]);
                          (match x495 with
                           | Some x497 ->
                               ignore
                                 (Ojs.call x496 "push"
                                    [|(Ojs.string_to_js x497)|])
                           | None -> ());
                          x496))|])
    let (getEntriesByType : string -> PerformanceEntryList.t) =
      fun (x499 : string) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntriesByType" [|(Ojs.string_to_js x499)|])
    let (mark :
      markName:string ->
        ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun ~markName:(x500 : string) ->
        fun ?markOptions:(x501 : PerformanceMarkOptions.t option) ->
          fun () ->
            PerformanceMark.t_of_js
              (let x504 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x504 "mark") "apply"
                 [|x504;((let x502 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x502 "push" [|(Ojs.string_to_js x500)|]);
                          (match x501 with
                           | Some x503 ->
                               ignore
                                 (Ojs.call x502 "push"
                                    [|(PerformanceMarkOptions.t_to_js x503)|])
                           | None -> ());
                          x502))|])
    let (measure :
      measureName:string ->
        ?startOrMeasureOptions:[ `U1 of string 
                               | `U2 of PerformanceMeasureOptions.t ]
          -> ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun ~measureName:(x505 : string) ->
        fun
          ?startOrMeasureOptions:(x506 :
                                   [ `U1 of string 
                                   | `U2 of PerformanceMeasureOptions.t ]
                                     option)
          ->
          fun ?endMark:(x507 : string option) ->
            fun () ->
              PerformanceMeasure.t_of_js
                (let x513 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x513 "measure") "apply"
                   [|x513;((let x508 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x508 "push"
                                 [|(Ojs.string_to_js x505)|]);
                            (match x506 with
                             | Some x510 ->
                                 ignore
                                   (Ojs.call x508 "push"
                                      [|((match x510 with
                                          | `U1 x511 -> Ojs.string_to_js x511
                                          | `U2 x512 ->
                                              PerformanceMeasureOptions.t_to_js
                                                x512))|])
                             | None -> ());
                            (match x507 with
                             | Some x509 ->
                                 ignore
                                   (Ojs.call x508 "push"
                                      [|(Ojs.string_to_js x509)|])
                             | None -> ());
                            x508))|])
    let (now : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "now" [||])
    let (setResourceTimingBufferSize : float -> unit) =
      fun (x514 : float) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "setResourceTimingBufferSize" [|(Ojs.float_to_js x514)|])
    let (toJSON : unit -> any) =
      fun () ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "toJSON"
             [||])
    let (addEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x515 : 'K) ->
        fun ~listener:(x516 : this:Performance.t -> ev:any -> any) ->
          fun
            ?options:(x517 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x524 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x524 "addEventListener")
                   "apply"
                   [|x524;((let x518 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x518 "push" [|(Obj.magic x515)|]);
                            ignore
                              (Ojs.call x518 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x522 : Ojs.t) ->
                                         fun (x523 : Ojs.t) ->
                                           any_to_js
                                             (x516
                                                ~this:(Performance.t_of_js
                                                         x522)
                                                ~ev:(any_of_js x523))))|]);
                            (match x517 with
                             | Some x519 ->
                                 ignore
                                   (Ojs.call x518 "push"
                                      [|((match x519 with
                                          | `U1 x520 -> Ojs.bool_to_js x520
                                          | `U2 x521 ->
                                              AddEventListenerOptions.t_to_js
                                                x521))|])
                             | None -> ());
                            x518))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x525 : string) ->
        fun ~listener:(x526 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x527 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x532 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x532 "addEventListener")
                   "apply"
                   [|x532;((let x528 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x528 "push"
                                 [|(Ojs.string_to_js x525)|]);
                            ignore
                              (Ojs.call x528 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x526)|]);
                            (match x527 with
                             | Some x529 ->
                                 ignore
                                   (Ojs.call x528 "push"
                                      [|((match x529 with
                                          | `U1 x530 -> Ojs.bool_to_js x530
                                          | `U2 x531 ->
                                              AddEventListenerOptions.t_to_js
                                                x531))|])
                             | None -> ());
                            x528))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x533 : 'K) ->
        fun ~listener:(x534 : this:Performance.t -> ev:any -> any) ->
          fun
            ?options:(x535 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x542 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x542 "removeEventListener")
                   "apply"
                   [|x542;((let x536 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x536 "push" [|(Obj.magic x533)|]);
                            ignore
                              (Ojs.call x536 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x540 : Ojs.t) ->
                                         fun (x541 : Ojs.t) ->
                                           any_to_js
                                             (x534
                                                ~this:(Performance.t_of_js
                                                         x540)
                                                ~ev:(any_of_js x541))))|]);
                            (match x535 with
                             | Some x537 ->
                                 ignore
                                   (Ojs.call x536 "push"
                                      [|((match x537 with
                                          | `U1 x538 -> Ojs.bool_to_js x538
                                          | `U2 x539 ->
                                              EventListenerOptions.t_to_js
                                                x539))|])
                             | None -> ());
                            x536))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x543 : string) ->
        fun ~listener:(x544 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x545 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x550 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x550 "removeEventListener")
                   "apply"
                   [|x550;((let x546 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x546 "push"
                                 [|(Ojs.string_to_js x543)|]);
                            ignore
                              (Ojs.call x546 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x544)|]);
                            (match x545 with
                             | Some x547 ->
                                 ignore
                                   (Ojs.call x546 "push"
                                      [|((match x547 with
                                          | `U1 x548 -> Ojs.bool_to_js x548
                                          | `U2 x549 ->
                                              EventListenerOptions.t_to_js
                                                x549))|])
                             | None -> ());
                            x546))|])
  end
module StorageEstimate =
  struct
    type t = [ `StorageEstimate ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x552 : Ojs.t) -> t_of_js x552
    and t_0_to_js : t_0 -> Ojs.t = fun (x551 : t) -> t_to_js x551
    type tags = [ `StorageEstimate ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x555 : Ojs.t) -> intf_of_js __tags_of_js x555
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x553 : __tags intf) -> intf_to_js __tags_to_js x553
    let (get_quota : 'tags this -> float) =
      fun (x557 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x557) "quota")
    let (set_quota : 'tags this -> float -> unit) =
      fun (x559 : 'tags this) ->
        fun (x560 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x559) "quota"
            (Ojs.float_to_js x560)
    let (get_usage : 'tags this -> float) =
      fun (x562 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x562) "usage")
    let (set_usage : 'tags this -> float -> unit) =
      fun (x564 : 'tags this) ->
        fun (x565 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x564) "usage"
            (Ojs.float_to_js x565)
    let (create : quota:float -> usage:float -> unit -> t) =
      fun ~quota:(x567 : float) ->
        fun ~usage:(x568 : float) ->
          fun () ->
            let x569 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x569 "quota" (Ojs.float_to_js x567);
            Ojs.set_prop_ascii x569 "usage" (Ojs.float_to_js x568);
            t_of_js x569
    let cast_from = Obj.magic
  end
module FileSystemRemoveOptions =
  struct
    type t = [ `FileSystemRemoveOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x571 : Ojs.t) -> t_of_js x571
    and t_0_to_js : t_0 -> Ojs.t = fun (x570 : t) -> t_to_js x570
    type tags = [ `FileSystemRemoveOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemRemoveOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x574 : Ojs.t) -> intf_of_js __tags_of_js x574
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x572 : __tags intf) -> intf_to_js __tags_to_js x572
    let (get_recursive : 'tags this -> bool) =
      fun (x576 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x576) "recursive")
    let (set_recursive : 'tags this -> bool -> unit) =
      fun (x578 : 'tags this) ->
        fun (x579 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x578) "recursive"
            (Ojs.bool_to_js x579)
    let (create : recursive:bool -> unit -> t) =
      fun ~recursive:(x581 : bool) ->
        fun () ->
          let x582 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x582 "recursive" (Ojs.bool_to_js x581);
          t_of_js x582
    let cast_from = Obj.magic
  end
module FileSystemGetFileOptions =
  struct
    type t = [ `FileSystemGetFileOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x584 : Ojs.t) -> t_of_js x584
    and t_0_to_js : t_0 -> Ojs.t = fun (x583 : t) -> t_to_js x583
    type tags = [ `FileSystemGetFileOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemGetFileOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x587 : Ojs.t) -> intf_of_js __tags_of_js x587
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x585 : __tags intf) -> intf_to_js __tags_to_js x585
    let (get_create : 'tags this -> bool) =
      fun (x589 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x589) "create")
    let (set_create : 'tags this -> bool -> unit) =
      fun (x591 : 'tags this) ->
        fun (x592 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x591) "create"
            (Ojs.bool_to_js x592)
    let (create : create_:bool -> unit -> t) =
      fun ~create_:(x594 : bool) ->
        fun () ->
          let x595 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x595 "create" (Ojs.bool_to_js x594);
          t_of_js x595
    let cast_from = Obj.magic
  end
module FileSystemGetDirectoryOptions =
  struct
    type t = [ `FileSystemGetDirectoryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x597 : Ojs.t) -> t_of_js x597
    and t_0_to_js : t_0 -> Ojs.t = fun (x596 : t) -> t_to_js x596
    type tags = [ `FileSystemGetDirectoryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemGetDirectoryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x600 : Ojs.t) -> intf_of_js __tags_of_js x600
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x598 : __tags intf) -> intf_to_js __tags_to_js x598
    let (get_create : 'tags this -> bool) =
      fun (x602 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x602) "create")
    let (set_create : 'tags this -> bool -> unit) =
      fun (x604 : 'tags this) ->
        fun (x605 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x604) "create"
            (Ojs.bool_to_js x605)
    let (create : create_:bool -> unit -> t) =
      fun ~create_:(x607 : bool) ->
        fun () ->
          let x608 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x608 "create" (Ojs.bool_to_js x607);
          t_of_js x608
    let cast_from = Obj.magic
  end
module FileSystemHandleKind =
  struct
    type t = [ `L_s61_directory  | `L_s75_file ]
    let rec t_of_js : Ojs.t -> t =
      fun (x610 : Ojs.t) ->
        let x611 = x610 in
        match Ojs.string_of_js x611 with
        | "directory" -> `L_s61_directory
        | "file" -> `L_s75_file
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x609 : [ `L_s61_directory  | `L_s75_file ]) ->
        match x609 with
        | `L_s61_directory -> Ojs.string_to_js "directory"
        | `L_s75_file -> Ojs.string_to_js "file"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x613 : Ojs.t) -> t_of_js x613
    and t_0_to_js : t_0 -> Ojs.t = fun (x612 : t) -> t_to_js x612
  end
module FileSystemHandle =
  struct
    type t = [ `FileSystemHandle ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x615 : Ojs.t) -> t_of_js x615
    and t_0_to_js : t_0 -> Ojs.t = fun (x614 : t) -> t_to_js x614
    type tags = [ `FileSystemHandle ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileSystemHandle ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x618 : Ojs.t) -> intf_of_js __tags_of_js x618
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x616 : __tags intf) -> intf_to_js __tags_to_js x616
    let (get_kind : 'tags this -> FileSystemHandleKind.t) =
      fun (x620 : 'tags this) ->
        FileSystemHandleKind.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x620) "kind")
    let (get_name : 'tags this -> string) =
      fun (x622 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x622) "name")
    let (isSameEntry : 'tags this -> other:t -> bool Promise.t_1) =
      fun (x625 : 'tags this) ->
        fun ~other:(x624 : t) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x625) "isSameEntry"
               [|(t_to_js x624)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileSystemHandle") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileSystemHandle")
             [||])
  end
module EndingType =
  struct
    type t = [ `L_s120_native  | `L_s199_transparent ]
    let rec t_of_js : Ojs.t -> t =
      fun (x629 : Ojs.t) ->
        let x630 = x629 in
        match Ojs.string_of_js x630 with
        | "native" -> `L_s120_native
        | "transparent" -> `L_s199_transparent
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x628 : [ `L_s120_native  | `L_s199_transparent ]) ->
        match x628 with
        | `L_s120_native -> Ojs.string_to_js "native"
        | `L_s199_transparent -> Ojs.string_to_js "transparent"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x632 : Ojs.t) -> t_of_js x632
    and t_0_to_js : t_0 -> Ojs.t = fun (x631 : t) -> t_to_js x631
  end
module BlobPropertyBag =
  struct
    type t = [ `BlobPropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x634 : Ojs.t) -> t_of_js x634
    and t_0_to_js : t_0 -> Ojs.t = fun (x633 : t) -> t_to_js x633
    type tags = [ `BlobPropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x637 : Ojs.t) -> intf_of_js __tags_of_js x637
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x635 : __tags intf) -> intf_to_js __tags_to_js x635
    let (get_endings : 'tags this -> EndingType.t) =
      fun (x639 : 'tags this) ->
        EndingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x639) "endings")
    let (set_endings : 'tags this -> EndingType.t -> unit) =
      fun (x641 : 'tags this) ->
        fun (x642 : EndingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x641) "endings"
            (EndingType.t_to_js x642)
    let (get_type : 'tags this -> string) =
      fun (x644 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x644) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x646 : 'tags this) ->
        fun (x647 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x646) "type"
            (Ojs.string_to_js x647)
    let (create : endings:EndingType.t -> type_:string -> unit -> t) =
      fun ~endings:(x649 : EndingType.t) ->
        fun ~type_:(x650 : string) ->
          fun () ->
            let x651 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x651 "endings" (EndingType.t_to_js x649);
            Ojs.set_prop_ascii x651 "type" (Ojs.string_to_js x650);
            t_of_js x651
    let cast_from = Obj.magic
  end
module FilePropertyBag =
  struct
    type t = [ `BlobPropertyBag  | `FilePropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x653 : Ojs.t) -> t_of_js x653
    and t_0_to_js : t_0 -> Ojs.t = fun (x652 : t) -> t_to_js x652
    type tags = [ `BlobPropertyBag  | `FilePropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x656 : Ojs.t) -> intf_of_js __tags_of_js x656
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x654 : __tags intf) -> intf_to_js __tags_to_js x654
    let (get_lastModified : 'tags this -> float) =
      fun (x658 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x658) "lastModified")
    let (set_lastModified : 'tags this -> float -> unit) =
      fun (x660 : 'tags this) ->
        fun (x661 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x660) "lastModified"
            (Ojs.float_to_js x661)
    let (create : lastModified:float -> unit -> t) =
      fun ~lastModified:(x663 : float) ->
        fun () ->
          let x664 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x664 "lastModified" (Ojs.float_to_js x663);
          t_of_js x664
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultController =
  struct
    type 'R t = [ `ReadableStreamDefaultController of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x667 : Ojs.t) -> t_of_js __R_of_js x667
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x665 : __R t) -> t_to_js __R_to_js x665
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x671 : Ojs.t) -> t_of_js any_of_js x671
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x669 : any t) -> t_to_js any_to_js x669
    type 'R tags = [ `ReadableStreamDefaultController of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultController of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x675 : Ojs.t) -> intf_of_js __tags_of_js x675
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x673 : __tags intf) -> intf_to_js __tags_to_js x673
    let (get_desiredSize : ('tags, 'R) this -> float option) =
      fun (x677 : ('tags, 'R) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x677)
             "desiredSize")
    let (close : ('tags, 'R) this -> unit) =
      fun (x681 : ('tags, 'R) this) ->
        ignore (Ojs.call (this_to_js Obj.magic Obj.magic x681) "close" [||])
    let (enqueue : ('tags, 'R) this -> ?chunk:'R -> unit -> unit) =
      fun (x687 : ('tags, 'R) this) ->
        fun ?chunk:(x684 : 'R option) ->
          fun () ->
            ignore
              (let x690 = this_to_js Obj.magic Obj.magic x687 in
               Ojs.call (Ojs.get_prop_ascii x690 "enqueue") "apply"
                 [|x690;((let x685 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x684 with
                           | Some x686 ->
                               ignore
                                 (Ojs.call x685 "push" [|(Obj.magic x686)|])
                           | None -> ());
                          x685))|])
    let (error : ('tags, 'R) this -> ?e:any -> unit -> unit) =
      fun (x694 : ('tags, 'R) this) ->
        fun ?e:(x691 : any option) ->
          fun () ->
            ignore
              (let x697 = this_to_js Obj.magic Obj.magic x694 in
               Ojs.call (Ojs.get_prop_ascii x697 "error") "apply"
                 [|x697;((let x692 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x691 with
                           | Some x693 ->
                               ignore
                                 (Ojs.call x692 "push" [|(any_to_js x693)|])
                           | None -> ());
                          x692))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             [||])
  end
module ReadableStreamController =
  struct
    type 'T t = 'T ReadableStreamDefaultController.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x700 : Ojs.t) ->
            ReadableStreamDefaultController.t_of_js __T_of_js x700
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x698 : __T ReadableStreamDefaultController.t) ->
            ReadableStreamDefaultController.t_to_js __T_to_js x698
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x704 : Ojs.t) -> t_of_js __T_of_js x704
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x702 : __T t) -> t_to_js __T_to_js x702
  end
module UnderlyingSourceStartCallback =
  struct
    type 'R t = [ `UnderlyingSourceStartCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x708 : Ojs.t) -> t_of_js __R_of_js x708
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x706 : __R t) -> t_to_js __R_to_js x706
    type 'R tags = [ `UnderlyingSourceStartCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x712 : Ojs.t) -> intf_of_js __tags_of_js x712
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x710 : __tags intf) -> intf_to_js __tags_to_js x710
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any) =
      fun (x716 : ('tags, 'R) this) ->
        fun ~controller:(x714 : 'R ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x716)
               [|(ReadableStreamController.t_to_js Obj.magic x714)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourcePullCallback =
  struct
    type 'R t = [ `UnderlyingSourcePullCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x721 : Ojs.t) -> t_of_js __R_of_js x721
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x719 : __R t) -> t_to_js __R_to_js x719
    type 'R tags = [ `UnderlyingSourcePullCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x725 : Ojs.t) -> intf_of_js __tags_of_js x725
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x723 : __tags intf) -> intf_to_js __tags_to_js x723
    let (apply :
      ('tags, 'R) this ->
        controller:'R ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x729 : ('tags, 'R) this) ->
        fun ~controller:(x727 : 'R ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x733 : Ojs.t) -> PromiseLike.t_1_of_js Ojs.unit_of_js x733)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x729)
               [|(ReadableStreamController.t_to_js Obj.magic x727)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourceCancelCallback =
  struct
    type t = [ `UnderlyingSourceCancelCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x736 : Ojs.t) -> t_of_js x736
    and t_0_to_js : t_0 -> Ojs.t = fun (x735 : t) -> t_to_js x735
    type tags = [ `UnderlyingSourceCancelCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x739 : Ojs.t) -> intf_of_js __tags_of_js x739
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x737 : __tags intf) -> intf_to_js __tags_to_js x737
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x744 : 'tags this) ->
        fun ?reason:(x741 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x747 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x747)
              (Ojs.call (this_to_js Obj.magic x744) "apply"
                 [|Ojs.null;((let x742 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x741 with
                               | Some x743 ->
                                   ignore
                                     (Ojs.call x742 "push"
                                        [|(any_to_js x743)|])
                               | None -> ());
                              x742))|])
    let cast_from = Obj.magic
  end
module UnderlyingSource =
  struct
    type 'R t = [ `UnderlyingSource of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x751 : Ojs.t) -> t_of_js __R_of_js x751
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x749 : __R t) -> t_to_js __R_to_js x749
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x755 : Ojs.t) -> t_of_js any_of_js x755
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x753 : any t) -> t_to_js any_to_js x753
    type 'R tags = [ `UnderlyingSource of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x759 : Ojs.t) -> intf_of_js __tags_of_js x759
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x757 : __tags intf) -> intf_to_js __tags_to_js x757
    let (get_cancel : ('tags, 'R) this -> UnderlyingSourceCancelCallback.t) =
      fun (x761 : ('tags, 'R) this) ->
        UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x761) "cancel")
    let (set_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x764 : ('tags, 'R) this) ->
        fun (x765 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x764) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x765)
    let (get_pull : ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t) =
      fun (x768 : ('tags, 'R) this) ->
        UnderlyingSourcePullCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x768) "pull")
    let (set_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit) =
      fun (x772 : ('tags, 'R) this) ->
        fun (x773 : 'R UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x772) "pull"
            (UnderlyingSourcePullCallback.t_to_js Obj.magic x773)
    let (get_start : ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t)
      =
      fun (x777 : ('tags, 'R) this) ->
        UnderlyingSourceStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x777) "start")
    let (set_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit) =
      fun (x781 : ('tags, 'R) this) ->
        fun (x782 : 'R UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x781) "start"
            (UnderlyingSourceStartCallback.t_to_js Obj.magic x782)
    let (get_type : ('tags, 'R) this -> undefined) =
      fun (x786 : ('tags, 'R) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x786) "type")
    let (set_type : ('tags, 'R) this -> undefined -> unit) =
      fun (x789 : ('tags, 'R) this) ->
        fun (x790 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x789) "type"
            (undefined_to_js x790)
    let (create :
      cancel:UnderlyingSourceCancelCallback.t ->
        pull:'R UnderlyingSourcePullCallback.t ->
          start:'R UnderlyingSourceStartCallback.t ->
            ?type_:never -> unit -> 'R t)
      =
      fun ~cancel:(x793 : UnderlyingSourceCancelCallback.t) ->
        fun ~pull:(x794 : 'R UnderlyingSourcePullCallback.t) ->
          fun ~start:(x795 : 'R UnderlyingSourceStartCallback.t) ->
            fun ?type_:(x796 : never option) ->
              fun () ->
                let x797 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x797 "cancel"
                  (UnderlyingSourceCancelCallback.t_to_js x793);
                Ojs.set_prop_ascii x797 "pull"
                  (UnderlyingSourcePullCallback.t_to_js Obj.magic x794);
                Ojs.set_prop_ascii x797 "start"
                  (UnderlyingSourceStartCallback.t_to_js Obj.magic x795);
                (match x796 with
                 | Some x799 ->
                     Ojs.set_prop_ascii x797 "type" (never_to_js x799)
                 | None -> ());
                t_of_js Obj.magic x797
    let cast_from = Obj.magic
  end
module StreamPipeOptions =
  struct
    type t = [ `StreamPipeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x803 : Ojs.t) -> t_of_js x803
    and t_0_to_js : t_0 -> Ojs.t = fun (x802 : t) -> t_to_js x802
    type tags = [ `StreamPipeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x806 : Ojs.t) -> intf_of_js __tags_of_js x806
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x804 : __tags intf) -> intf_to_js __tags_to_js x804
    let (get_preventAbort : 'tags this -> bool) =
      fun (x808 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x808) "preventAbort")
    let (set_preventAbort : 'tags this -> bool -> unit) =
      fun (x810 : 'tags this) ->
        fun (x811 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x810) "preventAbort"
            (Ojs.bool_to_js x811)
    let (get_preventCancel : 'tags this -> bool) =
      fun (x813 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x813) "preventCancel")
    let (set_preventCancel : 'tags this -> bool -> unit) =
      fun (x815 : 'tags this) ->
        fun (x816 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x815) "preventCancel"
            (Ojs.bool_to_js x816)
    let (get_preventClose : 'tags this -> bool) =
      fun (x818 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x818) "preventClose")
    let (set_preventClose : 'tags this -> bool -> unit) =
      fun (x820 : 'tags this) ->
        fun (x821 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x820) "preventClose"
            (Ojs.bool_to_js x821)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x823 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x823) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x825 : 'tags this) ->
        fun (x826 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x825) "signal"
            (AbortSignal.t_to_js x826)
    let (create :
      preventAbort:bool ->
        preventCancel:bool ->
          preventClose:bool -> signal:AbortSignal.t -> unit -> t)
      =
      fun ~preventAbort:(x828 : bool) ->
        fun ~preventCancel:(x829 : bool) ->
          fun ~preventClose:(x830 : bool) ->
            fun ~signal:(x831 : AbortSignal.t) ->
              fun () ->
                let x832 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x832 "preventAbort" (Ojs.bool_to_js x828);
                Ojs.set_prop_ascii x832 "preventCancel" (Ojs.bool_to_js x829);
                Ojs.set_prop_ascii x832 "preventClose" (Ojs.bool_to_js x830);
                Ojs.set_prop_ascii x832 "signal" (AbortSignal.t_to_js x831);
                t_of_js x832
    let cast_from = Obj.magic
  end
module WritableStreamDefaultController =
  struct
    type t = [ `WritableStreamDefaultController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x834 : Ojs.t) -> t_of_js x834
    and t_0_to_js : t_0 -> Ojs.t = fun (x833 : t) -> t_to_js x833
    type tags = [ `WritableStreamDefaultController ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x837 : Ojs.t) -> intf_of_js __tags_of_js x837
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x835 : __tags intf) -> intf_to_js __tags_to_js x835
    let (error : 'tags this -> ?e:any -> unit -> unit) =
      fun (x842 : 'tags this) ->
        fun ?e:(x839 : any option) ->
          fun () ->
            ignore
              (let x844 = this_to_js Obj.magic x842 in
               Ojs.call (Ojs.get_prop_ascii x844 "error") "apply"
                 [|x844;((let x840 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x839 with
                           | Some x841 ->
                               ignore
                                 (Ojs.call x840 "push" [|(any_to_js x841)|])
                           | None -> ());
                          x840))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             [||])
  end
module UnderlyingSinkWriteCallback =
  struct
    type 'W t = [ `UnderlyingSinkWriteCallback of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x847 : Ojs.t) -> t_of_js __W_of_js x847
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x845 : __W t) -> t_to_js __W_to_js x845
    type 'W tags = [ `UnderlyingSinkWriteCallback of 'W ]
    type 'W tags_1 = 'W tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x851 : Ojs.t) -> intf_of_js __tags_of_js x851
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x849 : __tags intf) -> intf_to_js __tags_to_js x849
    let (apply :
      ('tags, 'W) this ->
        chunk:'W ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x855 : ('tags, 'W) this) ->
        fun ~chunk:(x853 : 'W) ->
          fun ~controller:(x854 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x859 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x859)
              (Ojs.apply (this_to_js Obj.magic Obj.magic x855)
                 [|(Obj.magic x853);(WritableStreamDefaultController.t_to_js
                                       x854)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkStartCallback =
  struct
    type t = [ `UnderlyingSinkStartCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x862 : Ojs.t) -> t_of_js x862
    and t_0_to_js : t_0 -> Ojs.t = fun (x861 : t) -> t_to_js x861
    type tags = [ `UnderlyingSinkStartCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x865 : Ojs.t) -> intf_of_js __tags_of_js x865
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x863 : __tags intf) -> intf_to_js __tags_to_js x863
    let (apply :
      'tags this -> controller:WritableStreamDefaultController.t -> any) =
      fun (x868 : 'tags this) ->
        fun ~controller:(x867 : WritableStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x868)
               [|(WritableStreamDefaultController.t_to_js x867)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkCloseCallback =
  struct
    type t = [ `UnderlyingSinkCloseCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x871 : Ojs.t) -> t_of_js x871
    and t_0_to_js : t_0 -> Ojs.t = fun (x870 : t) -> t_to_js x870
    type tags = [ `UnderlyingSinkCloseCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x874 : Ojs.t) -> intf_of_js __tags_of_js x874
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x872 : __tags intf) -> intf_to_js __tags_to_js x872
    let (apply : 'tags this -> (unit, unit PromiseLike.t_1) union2) =
      fun (x876 : 'tags this) ->
        union2_of_js Ojs.unit_of_js
          (fun (x879 : Ojs.t) -> PromiseLike.t_1_of_js Ojs.unit_of_js x879)
          (Ojs.apply (this_to_js Obj.magic x876) [||])
    let cast_from = Obj.magic
  end
module UnderlyingSinkAbortCallback =
  struct
    type t = [ `UnderlyingSinkAbortCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x882 : Ojs.t) -> t_of_js x882
    and t_0_to_js : t_0 -> Ojs.t = fun (x881 : t) -> t_to_js x881
    type tags = [ `UnderlyingSinkAbortCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x885 : Ojs.t) -> intf_of_js __tags_of_js x885
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x883 : __tags intf) -> intf_to_js __tags_to_js x883
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x890 : 'tags this) ->
        fun ?reason:(x887 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x893 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x893)
              (Ojs.call (this_to_js Obj.magic x890) "apply"
                 [|Ojs.null;((let x888 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x887 with
                               | Some x889 ->
                                   ignore
                                     (Ojs.call x888 "push"
                                        [|(any_to_js x889)|])
                               | None -> ());
                              x888))|])
    let cast_from = Obj.magic
  end
module UnderlyingSink =
  struct
    type 'W t = [ `UnderlyingSink of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x897 : Ojs.t) -> t_of_js __W_of_js x897
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x895 : __W t) -> t_to_js __W_to_js x895
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x901 : Ojs.t) -> t_of_js any_of_js x901
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x899 : any t) -> t_to_js any_to_js x899
    type 'W tags = [ `UnderlyingSink of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x905 : Ojs.t) -> intf_of_js __tags_of_js x905
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x903 : __tags intf) -> intf_to_js __tags_to_js x903
    let (get_abort : ('tags, 'W) this -> UnderlyingSinkAbortCallback.t) =
      fun (x907 : ('tags, 'W) this) ->
        UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x907) "abort")
    let (set_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x910 : ('tags, 'W) this) ->
        fun (x911 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x910) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x911)
    let (get_close : ('tags, 'W) this -> UnderlyingSinkCloseCallback.t) =
      fun (x914 : ('tags, 'W) this) ->
        UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x914) "close")
    let (set_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x917 : ('tags, 'W) this) ->
        fun (x918 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x917) "close"
            (UnderlyingSinkCloseCallback.t_to_js x918)
    let (get_start : ('tags, 'W) this -> UnderlyingSinkStartCallback.t) =
      fun (x921 : ('tags, 'W) this) ->
        UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x921) "start")
    let (set_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x924 : ('tags, 'W) this) ->
        fun (x925 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x924) "start"
            (UnderlyingSinkStartCallback.t_to_js x925)
    let (get_type : ('tags, 'W) this -> undefined) =
      fun (x928 : ('tags, 'W) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x928) "type")
    let (set_type : ('tags, 'W) this -> undefined -> unit) =
      fun (x931 : ('tags, 'W) this) ->
        fun (x932 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x931) "type"
            (undefined_to_js x932)
    let (get_write : ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t) =
      fun (x935 : ('tags, 'W) this) ->
        UnderlyingSinkWriteCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x935) "write")
    let (set_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit) =
      fun (x939 : ('tags, 'W) this) ->
        fun (x940 : 'W UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x939) "write"
            (UnderlyingSinkWriteCallback.t_to_js Obj.magic x940)
    let (create :
      abort:UnderlyingSinkAbortCallback.t ->
        close:UnderlyingSinkCloseCallback.t ->
          start:UnderlyingSinkStartCallback.t ->
            ?type_:never ->
              write:'W UnderlyingSinkWriteCallback.t -> unit -> 'W t)
      =
      fun ~abort:(x944 : UnderlyingSinkAbortCallback.t) ->
        fun ~close:(x945 : UnderlyingSinkCloseCallback.t) ->
          fun ~start:(x946 : UnderlyingSinkStartCallback.t) ->
            fun ?type_:(x947 : never option) ->
              fun ~write:(x948 : 'W UnderlyingSinkWriteCallback.t) ->
                fun () ->
                  let x949 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x949 "abort"
                    (UnderlyingSinkAbortCallback.t_to_js x944);
                  Ojs.set_prop_ascii x949 "close"
                    (UnderlyingSinkCloseCallback.t_to_js x945);
                  Ojs.set_prop_ascii x949 "start"
                    (UnderlyingSinkStartCallback.t_to_js x946);
                  (match x947 with
                   | Some x952 ->
                       Ojs.set_prop_ascii x949 "type" (never_to_js x952)
                   | None -> ());
                  Ojs.set_prop_ascii x949 "write"
                    (UnderlyingSinkWriteCallback.t_to_js Obj.magic x948);
                  t_of_js Obj.magic x949
    let cast_from = Obj.magic
  end
module QueuingStrategySize =
  struct
    type 'T t = [ `QueuingStrategySize of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x955 : Ojs.t) -> t_of_js __T_of_js x955
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x953 : __T t) -> t_to_js __T_to_js x953
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x959 : Ojs.t) -> t_of_js any_of_js x959
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x957 : any t) -> t_to_js any_to_js x957
    type 'T tags = [ `QueuingStrategySize of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x963 : Ojs.t) -> intf_of_js __tags_of_js x963
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x961 : __tags intf) -> intf_to_js __tags_to_js x961
    let (apply : ('tags, 'T) this -> chunk:'T -> float) =
      fun (x966 : ('tags, 'T) this) ->
        fun ~chunk:(x965 : 'T) ->
          Ojs.float_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x966)
               [|(Obj.magic x965)|])
    let cast_from = Obj.magic
  end
module QueuingStrategy =
  struct
    type 'T t = [ `QueuingStrategy of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x971 : Ojs.t) -> t_of_js __T_of_js x971
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x969 : __T t) -> t_to_js __T_to_js x969
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x975 : Ojs.t) -> t_of_js any_of_js x975
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x973 : any t) -> t_to_js any_to_js x973
    type 'T tags = [ `QueuingStrategy of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x979 : Ojs.t) -> intf_of_js __tags_of_js x979
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x977 : __tags intf) -> intf_to_js __tags_to_js x977
    let (get_highWaterMark : ('tags, 'T) this -> float) =
      fun (x981 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x981)
             "highWaterMark")
    let (set_highWaterMark : ('tags, 'T) this -> float -> unit) =
      fun (x984 : ('tags, 'T) this) ->
        fun (x985 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x984)
            "highWaterMark" (Ojs.float_to_js x985)
    let (get_size : ('tags, 'T) this -> 'T QueuingStrategySize.t) =
      fun (x988 : ('tags, 'T) this) ->
        QueuingStrategySize.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x988) "size")
    let (set_size : ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit) =
      fun (x992 : ('tags, 'T) this) ->
        fun (x993 : 'T QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x992) "size"
            (QueuingStrategySize.t_to_js Obj.magic x993)
    let (create :
      highWaterMark:float -> size:'T QueuingStrategySize.t -> unit -> 'T t) =
      fun ~highWaterMark:(x997 : float) ->
        fun ~size:(x998 : 'T QueuingStrategySize.t) ->
          fun () ->
            let x999 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x999 "highWaterMark" (Ojs.float_to_js x997);
            Ojs.set_prop_ascii x999 "size"
              (QueuingStrategySize.t_to_js Obj.magic x998);
            t_of_js Obj.magic x999
    let cast_from = Obj.magic
  end
module rec
  WritableStream:sig
                   type 'W t = [ `WritableStream of 'W ] intf
                   type 'W t_1 = 'W t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'W tags = [ `WritableStream of 'W ]
                   type 'W tags_1 = 'W tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'W tags = [ `WritableStream of 'W ]
                     type 'W tags_1 = 'W tags
                     type tags_0 = any tags]
                   type ('tags, 'W) this =
                     'tags intf constraint 'tags = [> `WritableStream of 'W ]
                   val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                   val t_1_to_js : ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'W) this -> bool
                   val abort :
                     ('tags, 'W) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val close : ('tags, 'W) this -> unit Promise.t_1
                   val getWriter :
                     ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t
                   val cast_from : ('tags, 'W) this -> 'W t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSink:'W UnderlyingSink.t ->
                       ?strategy:'W QueuingStrategy.t -> unit -> 'W t
                 end =
  struct
    type 'W t = [ `WritableStream of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x1004 : Ojs.t) -> t_of_js __W_of_js x1004
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x1002 : __W t) -> t_to_js __W_to_js x1002
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1008 : Ojs.t) -> t_of_js any_of_js x1008
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1006 : any t) -> t_to_js any_to_js x1006
    type 'W tags = [ `WritableStream of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStream of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x1012 : Ojs.t) -> intf_of_js __tags_of_js x1012
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x1010 : __tags intf) -> intf_to_js __tags_to_js x1010
    let (get_locked : ('tags, 'W) this -> bool) =
      fun (x1014 : ('tags, 'W) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1014) "locked")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x1020 : ('tags, 'W) this) ->
        fun ?reason:(x1017 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1023 = this_to_js Obj.magic Obj.magic x1020 in
               Ojs.call (Ojs.get_prop_ascii x1023 "abort") "apply"
                 [|x1023;((let x1018 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1017 with
                            | Some x1019 ->
                                ignore
                                  (Ojs.call x1018 "push"
                                     [|(any_to_js x1019)|])
                            | None -> ());
                           x1018))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x1025 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x1025) "close" [||])
    let (getWriter : ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t) =
      fun (x1029 : ('tags, 'W) this) ->
        WritableStreamDefaultWriter.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1029) "getWriter" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStream") "prototype")
    let (create :
      ?underlyingSink:'W UnderlyingSink.t ->
        ?strategy:'W QueuingStrategy.t -> unit -> 'W t)
      =
      fun ?underlyingSink:(x1033 : 'W UnderlyingSink.t option) ->
        fun ?strategy:(x1034 : 'W QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WritableStream")
                 (let x1035 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1033 with
                   | Some x1038 ->
                       ignore
                         (Ojs.call x1035 "push"
                            [|(UnderlyingSink.t_to_js Obj.magic x1038)|])
                   | None -> ());
                  (match x1034 with
                   | Some x1036 ->
                       ignore
                         (Ojs.call x1035 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x1036)|])
                   | None -> ());
                  x1035))
  end
 and
  WritableStreamDefaultWriter:sig
                                type 'W t =
                                  [ `WritableStreamDefaultWriter of 'W ] intf
                                type 'W t_1 = 'W t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'W tags =
                                  [ `WritableStreamDefaultWriter of 'W ]
                                type 'W tags_1 = 'W tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'W tags =
                                    [ `WritableStreamDefaultWriter of 'W ]
                                  type 'W tags_1 = 'W tags
                                  type tags_0 = any tags]
                                type ('tags, 'W) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `WritableStreamDefaultWriter
                                                  of 'W ]
                                val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                                val t_1_to_js :
                                  ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val get_closed :
                                  ('tags, 'W) this -> undefined Promise.t_1
                                val get_desiredSize :
                                  ('tags, 'W) this -> float option
                                val get_ready :
                                  ('tags, 'W) this -> undefined Promise.t_1
                                val abort :
                                  ('tags, 'W) this ->
                                    ?reason:any -> unit -> unit Promise.t_1
                                val close :
                                  ('tags, 'W) this -> unit Promise.t_1
                                val releaseLock : ('tags, 'W) this -> unit
                                val write :
                                  ('tags, 'W) this ->
                                    ?chunk:'W -> unit -> unit Promise.t_1
                                val cast_from : ('tags, 'W) this -> 'W t
                                val prototype : unit -> t_0
                                val create : 'W WritableStream.t -> 'W t
                              end =
  struct
    type 'W t = [ `WritableStreamDefaultWriter of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x1043 : Ojs.t) -> t_of_js __W_of_js x1043
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x1041 : __W t) -> t_to_js __W_to_js x1041
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1047 : Ojs.t) -> t_of_js any_of_js x1047
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1045 : any t) -> t_to_js any_to_js x1045
    type 'W tags = [ `WritableStreamDefaultWriter of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultWriter of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x1051 : Ojs.t) -> intf_of_js __tags_of_js x1051
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __W) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x1049 : __tags intf) -> intf_to_js __tags_to_js x1049
    let (get_closed : ('tags, 'W) this -> undefined Promise.t_1) =
      fun (x1053 : ('tags, 'W) this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1053) "closed")
    let (get_desiredSize : ('tags, 'W) this -> float option) =
      fun (x1057 : ('tags, 'W) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1057)
             "desiredSize")
    let (get_ready : ('tags, 'W) this -> undefined Promise.t_1) =
      fun (x1061 : ('tags, 'W) this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1061) "ready")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x1068 : ('tags, 'W) this) ->
        fun ?reason:(x1065 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1071 = this_to_js Obj.magic Obj.magic x1068 in
               Ojs.call (Ojs.get_prop_ascii x1071 "abort") "apply"
                 [|x1071;((let x1066 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1065 with
                            | Some x1067 ->
                                ignore
                                  (Ojs.call x1066 "push"
                                     [|(any_to_js x1067)|])
                            | None -> ());
                           x1066))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x1073 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x1073) "close" [||])
    let (releaseLock : ('tags, 'W) this -> unit) =
      fun (x1077 : ('tags, 'W) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x1077) "releaseLock" [||])
    let (write : ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t_1) =
      fun (x1083 : ('tags, 'W) this) ->
        fun ?chunk:(x1080 : 'W option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1086 = this_to_js Obj.magic Obj.magic x1083 in
               Ojs.call (Ojs.get_prop_ascii x1086 "write") "apply"
                 [|x1086;((let x1081 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1080 with
                            | Some x1082 ->
                                ignore
                                  (Ojs.call x1081 "push"
                                     [|(Obj.magic x1082)|])
                            | None -> ());
                           x1081))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             "prototype")
    let (create : 'W WritableStream.t -> 'W t) =
      fun (x1088 : 'W WritableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             [|(WritableStream.t_to_js Obj.magic x1088)|])
  end
module ReadableStreamGenericReader =
  struct
    type t = [ `ReadableStreamGenericReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1092 : Ojs.t) -> t_of_js x1092
    and t_0_to_js : t_0 -> Ojs.t = fun (x1091 : t) -> t_to_js x1091
    type tags = [ `ReadableStreamGenericReader ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1095 : Ojs.t) -> intf_of_js __tags_of_js x1095
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1093 : __tags intf) -> intf_to_js __tags_to_js x1093
    let (get_closed : 'tags this -> undefined Promise.t_1) =
      fun (x1097 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1097) "closed")
    let (cancel : 'tags this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x1103 : 'tags this) ->
        fun ?reason:(x1100 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1105 = this_to_js Obj.magic x1103 in
               Ojs.call (Ojs.get_prop_ascii x1105 "cancel") "apply"
                 [|x1105;((let x1101 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1100 with
                            | Some x1102 ->
                                ignore
                                  (Ojs.call x1101 "push"
                                     [|(any_to_js x1102)|])
                            | None -> ());
                           x1101))|])
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadValueResult =
  struct
    type 'T t = [ `ReadableStreamDefaultReadValueResult of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1109 : Ojs.t) -> t_of_js __T_of_js x1109
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1107 : __T t) -> t_to_js __T_to_js x1107
    type 'T tags = [ `ReadableStreamDefaultReadValueResult of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultReadValueResult of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x1113 : Ojs.t) -> intf_of_js __tags_of_js x1113
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x1111 : __tags intf) -> intf_to_js __tags_to_js x1111
    let (get_done : ('tags, 'T) this -> [ `L_b_false ]) =
      fun (x1115 : ('tags, 'T) this) ->
        let x1118 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1115) "done" in
        match Ojs.bool_of_js x1118 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : ('tags, 'T) this -> [ `L_b_false ] -> unit) =
      fun (x1119 : ('tags, 'T) this) ->
        fun (x1120 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1119) "done"
            (match x1120 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x1123 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1123) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x1126 : ('tags, 'T) this) ->
        fun (x1127 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x1126) "value"
            (Obj.magic x1127)
    let (create : done_:[ `L_b_false ] -> value:'T -> unit -> 'T t) =
      fun ~done_:(x1130 : [ `L_b_false ]) ->
        fun ~value:(x1131 : 'T) ->
          fun () ->
            let x1132 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1132 "done"
              (match x1130 with | `L_b_false -> Ojs.bool_to_js false);
            Ojs.set_prop_ascii x1132 "value" (Obj.magic x1131);
            t_of_js Obj.magic x1132
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadDoneResult =
  struct
    type t = [ `ReadableStreamDefaultReadDoneResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1135 : Ojs.t) -> t_of_js x1135
    and t_0_to_js : t_0 -> Ojs.t = fun (x1134 : t) -> t_to_js x1134
    type tags = [ `ReadableStreamDefaultReadDoneResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReadDoneResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1138 : Ojs.t) -> intf_of_js __tags_of_js x1138
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1136 : __tags intf) -> intf_to_js __tags_to_js x1136
    let (get_done : 'tags this -> [ `L_b_true ]) =
      fun (x1140 : 'tags this) ->
        let x1142 = Ojs.get_prop_ascii (this_to_js Obj.magic x1140) "done" in
        match Ojs.bool_of_js x1142 with
        | true -> `L_b_true
        | _ -> assert false
    let (set_done : 'tags this -> [ `L_b_true ] -> unit) =
      fun (x1143 : 'tags this) ->
        fun (x1144 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1143) "done"
            (match x1144 with | `L_b_true -> Ojs.bool_to_js true)
    let (get_value : 'tags this -> undefined) =
      fun (x1146 : 'tags this) ->
        undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1146) "value")
    let (set_value : 'tags this -> undefined -> unit) =
      fun (x1148 : 'tags this) ->
        fun (x1149 : undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1148) "value"
            (undefined_to_js x1149)
    let (create : done_:[ `L_b_true ] -> ?value:never -> unit -> t) =
      fun ~done_:(x1151 : [ `L_b_true ]) ->
        fun ?value:(x1152 : never option) ->
          fun () ->
            let x1153 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1153 "done"
              (match x1151 with | `L_b_true -> Ojs.bool_to_js true);
            (match x1152 with
             | Some x1154 ->
                 Ojs.set_prop_ascii x1153 "value" (never_to_js x1154)
             | None -> ());
            t_of_js x1153
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadResult =
  struct
    type 'T t =
      [ `U_b_false of 'T ReadableStreamDefaultReadValueResult.t 
      | `U_b_true of ReadableStreamDefaultReadDoneResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1159 : Ojs.t) ->
            let x1160 = x1159 in
            match Ojs.bool_of_js (Ojs.get_prop_ascii x1160 "done") with
            | false ->
                `U_b_false
                  (ReadableStreamDefaultReadValueResult.t_of_js __T_of_js
                     x1160)
            | true ->
                `U_b_true (ReadableStreamDefaultReadDoneResult.t_of_js x1160)
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun
            (x1155 :
              [ `U_b_false of __T ReadableStreamDefaultReadValueResult.t 
              | `U_b_true of ReadableStreamDefaultReadDoneResult.t ])
            ->
            match x1155 with
            | `U_b_false x1156 ->
                ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x1156
            | `U_b_true x1158 ->
                ReadableStreamDefaultReadDoneResult.t_to_js x1158
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x1164 : Ojs.t) -> t_of_js __T_of_js x1164
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x1162 : __T t) -> t_to_js __T_to_js x1162
  end
module rec
  ReadableStream:sig
                   type 'R t = [ `ReadableStream of 'R ] intf
                   type 'R t_1 = 'R t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'R tags = [ `ReadableStream of 'R ]
                   type 'R tags_1 = 'R tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'R tags = [ `ReadableStream of 'R ]
                     type 'R tags_1 = 'R tags
                     type tags_0 = any tags]
                   type ('tags, 'R) this =
                     'tags intf constraint 'tags = [> `ReadableStream of 'R ]
                   val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                   val t_1_to_js : ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'R) this -> bool
                   val cancel :
                     ('tags, 'R) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val getReader :
                     ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t
                   val pipeThrough :
                     ('tags, 'R) this ->
                       transform:('T, 'R) ReadableWritablePair.t ->
                         ?options:StreamPipeOptions.t -> unit -> 'T t
                   val pipeTo :
                     ('tags, 'R) this ->
                       destination:'R WritableStream.t ->
                         ?options:StreamPipeOptions.t ->
                           unit -> unit Promise.t_1
                   val tee : ('tags, 'R) this -> ('R t * 'R t)
                   val cast_from : ('tags, 'R) this -> 'R t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSource:'R UnderlyingSource.t ->
                       ?strategy:'R QueuingStrategy.t -> unit -> 'R t
                 end =
  struct
    type 'R t = [ `ReadableStream of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x1168 : Ojs.t) -> t_of_js __R_of_js x1168
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x1166 : __R t) -> t_to_js __R_to_js x1166
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1172 : Ojs.t) -> t_of_js any_of_js x1172
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1170 : any t) -> t_to_js any_to_js x1170
    type 'R tags = [ `ReadableStream of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStream of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x1176 : Ojs.t) -> intf_of_js __tags_of_js x1176
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x1174 : __tags intf) -> intf_to_js __tags_to_js x1174
    let (get_locked : ('tags, 'R) this -> bool) =
      fun (x1178 : ('tags, 'R) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x1178) "locked")
    let (cancel :
      ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x1184 : ('tags, 'R) this) ->
        fun ?reason:(x1181 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x1187 = this_to_js Obj.magic Obj.magic x1184 in
               Ojs.call (Ojs.get_prop_ascii x1187 "cancel") "apply"
                 [|x1187;((let x1182 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1181 with
                            | Some x1183 ->
                                ignore
                                  (Ojs.call x1182 "push"
                                     [|(any_to_js x1183)|])
                            | None -> ());
                           x1182))|])
    let (getReader : ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t) =
      fun (x1189 : ('tags, 'R) this) ->
        ReadableStreamDefaultReader.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x1189) "getReader" [||])
    let (pipeThrough :
      ('tags, 'R) this ->
        transform:('T, 'R) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T t)
      =
      fun (x1199 : ('tags, 'R) this) ->
        fun ~transform:(x1193 : ('T, 'R) ReadableWritablePair.t) ->
          fun ?options:(x1194 : StreamPipeOptions.t option) ->
            fun () ->
              t_of_js Obj.magic
                (let x1202 = this_to_js Obj.magic Obj.magic x1199 in
                 Ojs.call (Ojs.get_prop_ascii x1202 "pipeThrough") "apply"
                   [|x1202;((let x1195 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1195 "push"
                                  [|(ReadableWritablePair.t_to_js Obj.magic
                                       Obj.magic x1193)|]);
                             (match x1194 with
                              | Some x1196 ->
                                  ignore
                                    (Ojs.call x1195 "push"
                                       [|(StreamPipeOptions.t_to_js x1196)|])
                              | None -> ());
                             x1195))|])
    let (pipeTo :
      ('tags, 'R) this ->
        destination:'R WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x1209 : ('tags, 'R) this) ->
        fun ~destination:(x1204 : 'R WritableStream.t) ->
          fun ?options:(x1205 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x1212 = this_to_js Obj.magic Obj.magic x1209 in
                 Ojs.call (Ojs.get_prop_ascii x1212 "pipeTo") "apply"
                   [|x1212;((let x1206 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1206 "push"
                                  [|(WritableStream.t_to_js Obj.magic x1204)|]);
                             (match x1205 with
                              | Some x1207 ->
                                  ignore
                                    (Ojs.call x1206 "push"
                                       [|(StreamPipeOptions.t_to_js x1207)|])
                              | None -> ());
                             x1206))|])
    let (tee : ('tags, 'R) this -> ('R t * 'R t)) =
      fun (x1214 : ('tags, 'R) this) ->
        let x1217 =
          Ojs.call (this_to_js Obj.magic Obj.magic x1214) "tee" [||] in
        ((t_of_js Obj.magic (Ojs.array_get x1217 0)),
          (t_of_js Obj.magic (Ojs.array_get x1217 1)))
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStream") "prototype")
    let (create :
      ?underlyingSource:'R UnderlyingSource.t ->
        ?strategy:'R QueuingStrategy.t -> unit -> 'R t)
      =
      fun ?underlyingSource:(x1220 : 'R UnderlyingSource.t option) ->
        fun ?strategy:(x1221 : 'R QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                 (let x1222 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1220 with
                   | Some x1225 ->
                       ignore
                         (Ojs.call x1222 "push"
                            [|(UnderlyingSource.t_to_js Obj.magic x1225)|])
                   | None -> ());
                  (match x1221 with
                   | Some x1223 ->
                       ignore
                         (Ojs.call x1222 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x1223)|])
                   | None -> ());
                  x1222))
  end
 and
  ReadableStreamDefaultReader:sig
                                type 'R t =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ] intf
                                type 'R t_1 = 'R t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'R tags =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ]
                                type 'R tags_1 = 'R tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'R tags =
                                    [ `ReadableStreamDefaultReader of 'R 
                                    | `ReadableStreamGenericReader ]
                                  type 'R tags_1 = 'R tags
                                  type tags_0 = any tags]
                                type ('tags, 'R) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `ReadableStreamDefaultReader
                                                  of 'R ]
                                val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                val t_1_to_js :
                                  ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val read :
                                  ('tags, 'R) this ->
                                    'R ReadableStreamDefaultReadResult.t
                                      Promise.t_1
                                val releaseLock : ('tags, 'R) this -> unit
                                val cast_from : ('tags, 'R) this -> 'R t
                                val prototype : unit -> t_0
                                val create : 'R ReadableStream.t -> 'R t
                              end =
  struct
    type 'R t =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
        intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x1230 : Ojs.t) -> t_of_js __R_of_js x1230
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x1228 : __R t) -> t_to_js __R_to_js x1228
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x1234 : Ojs.t) -> t_of_js any_of_js x1234
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x1232 : any t) -> t_to_js any_to_js x1232
    type 'R tags =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReader of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (x1238 : Ojs.t) -> intf_of_js __tags_of_js x1238
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __R) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (x1236 : __tags intf) -> intf_to_js __tags_to_js x1236
    let (read :
      ('tags, 'R) this -> 'R ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x1240 : ('tags, 'R) this) ->
        Promise.t_1_of_js
          (fun (x1243 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js Obj.magic x1243)
          (Ojs.call (this_to_js Obj.magic Obj.magic x1240) "read" [||])
    let (releaseLock : ('tags, 'R) this -> unit) =
      fun (x1245 : ('tags, 'R) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x1245) "releaseLock" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             "prototype")
    let (create : 'R ReadableStream.t -> 'R t) =
      fun (x1248 : 'R ReadableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             [|(ReadableStream.t_to_js Obj.magic x1248)|])
  end and
       ReadableWritablePair:sig
                              type ('R, 'W) t =
                                [ `ReadableWritablePair of ('R * 'W) ] intf
                              type ('R, 'W) t_2 = ('R, 'W) t
                              type 'R t_1 = ('R, any) t
                              type t_0 = (any, any) t
                              [@@@js.stop ]
                              type ('R, 'W) tags =
                                [ `ReadableWritablePair of ('R * 'W) ]
                              type ('R, 'W) tags_2 = ('R, 'W) tags
                              type 'R tags_1 = ('R, any) tags
                              type tags_0 = (any, any) tags
                              [@@@js.start ]
                              [@@@js.implem
                                type ('R, 'W) tags =
                                  [ `ReadableWritablePair of ('R * 'W) ]
                                type ('R, 'W) tags_2 = ('R, 'W) tags
                                type 'R tags_1 = ('R, any) tags
                                type tags_0 = (any, any) tags]
                              type ('tags, 'R, 'W) this =
                                'tags intf constraint 'tags =
                                            [>
                                              `ReadableWritablePair of
                                                ('R * 'W) ]
                              val t_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
                              val t_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
                              val t_2_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t
                              val t_2_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2
                              val t_1_to_js :
                                ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                              val t_1_of_js :
                                (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_readable :
                                ('tags, 'R, 'W) this -> 'R ReadableStream.t
                              val set_readable :
                                ('tags, 'R, 'W) this ->
                                  'R ReadableStream.t -> unit
                              val get_writable :
                                ('tags, 'R, 'W) this -> 'W WritableStream.t
                              val set_writable :
                                ('tags, 'R, 'W) this ->
                                  'W WritableStream.t -> unit
                              val create :
                                readable:'R ReadableStream.t ->
                                  writable:'W WritableStream.t ->
                                    unit -> ('R, 'W) t
                              val cast_from :
                                ('tags, 'R, 'W) this -> ('R, 'W) t
                            end =
       struct
         type ('R, 'W) t = [ `ReadableWritablePair of ('R * 'W) ] intf
         let rec t_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t =
           fun _R -> fun _W -> Obj.magic
         and t_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t =
           fun _R -> fun _W -> Obj.magic
         type ('R, 'W) t_2 = ('R, 'W) t
         let rec t_2_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2 =
           fun (type __R) ->
             fun (type __W) ->
               fun (__R_of_js : Ojs.t -> __R) ->
                 fun (__W_of_js : Ojs.t -> __W) ->
                   fun (x1254 : Ojs.t) -> t_of_js __R_of_js __W_of_js x1254
         and t_2_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t =
           fun (type __R) ->
             fun (type __W) ->
               fun (__R_to_js : __R -> Ojs.t) ->
                 fun (__W_to_js : __W -> Ojs.t) ->
                   fun (x1251 : (__R, __W) t) ->
                     t_to_js __R_to_js __W_to_js x1251
         type 'R t_1 = ('R, any) t
         let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 =
           fun (type __R) ->
             fun (__R_of_js : Ojs.t -> __R) ->
               fun (x1260 : Ojs.t) -> t_of_js __R_of_js any_of_js x1260
         and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
           fun (type __R) ->
             fun (__R_to_js : __R -> Ojs.t) ->
               fun (x1257 : (__R, any) t) ->
                 t_to_js __R_to_js any_to_js x1257
         type t_0 = (any, any) t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x1266 : Ojs.t) -> t_of_js any_of_js any_of_js x1266
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x1263 : (any, any) t) -> t_to_js any_to_js any_to_js x1263
         type ('R, 'W) tags = [ `ReadableWritablePair of ('R * 'W) ]
         type ('R, 'W) tags_2 = ('R, 'W) tags
         type 'R tags_1 = ('R, any) tags
         type tags_0 = (any, any) tags
         type ('tags, 'R, 'W) this =
           'tags intf constraint 'tags =
                       [> `ReadableWritablePair of ('R * 'W) ]
         let rec this_of_js :
           'tags 'R 'W .
             (Ojs.t -> 'tags) ->
               (Ojs.t -> 'R) ->
                 (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'R, 'W) this
           =
           fun (type __tags) ->
             fun (type __R) ->
               fun (type __W) ->
                 fun (__tags_of_js : Ojs.t -> __tags) ->
                   fun (__R_of_js : Ojs.t -> __R) ->
                     fun (__W_of_js : Ojs.t -> __W) ->
                       fun (x1271 : Ojs.t) -> intf_of_js __tags_of_js x1271
         and this_to_js :
           'tags 'R 'W .
             ('tags -> Ojs.t) ->
               ('R -> Ojs.t) ->
                 ('W -> Ojs.t) -> ('tags, 'R, 'W) this -> Ojs.t
           =
           fun (type __tags) ->
             fun (type __R) ->
               fun (type __W) ->
                 fun (__tags_to_js : __tags -> Ojs.t) ->
                   fun (__R_to_js : __R -> Ojs.t) ->
                     fun (__W_to_js : __W -> Ojs.t) ->
                       fun (x1269 : __tags intf) ->
                         intf_to_js __tags_to_js x1269
         let (get_readable : ('tags, 'R, 'W) this -> 'R ReadableStream.t) =
           fun (x1273 : ('tags, 'R, 'W) this) ->
             ReadableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x1273) "readable")
         let (set_readable :
           ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit) =
           fun (x1278 : ('tags, 'R, 'W) this) ->
             fun (x1279 : 'R ReadableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x1278) "readable"
                 (ReadableStream.t_to_js Obj.magic x1279)
         let (get_writable : ('tags, 'R, 'W) this -> 'W WritableStream.t) =
           fun (x1284 : ('tags, 'R, 'W) this) ->
             WritableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x1284) "writable")
         let (set_writable :
           ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit) =
           fun (x1289 : ('tags, 'R, 'W) this) ->
             fun (x1290 : 'W WritableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x1289) "writable"
                 (WritableStream.t_to_js Obj.magic x1290)
         let (create :
           readable:'R ReadableStream.t ->
             writable:'W WritableStream.t -> unit -> ('R, 'W) t)
           =
           fun ~readable:(x1295 : 'R ReadableStream.t) ->
             fun ~writable:(x1296 : 'W WritableStream.t) ->
               fun () ->
                 let x1297 = Ojs.empty_obj () in
                 Ojs.set_prop_ascii x1297 "readable"
                   (ReadableStream.t_to_js Obj.magic x1295);
                 Ojs.set_prop_ascii x1297 "writable"
                   (WritableStream.t_to_js Obj.magic x1296);
                 t_of_js Obj.magic Obj.magic x1297
         let cast_from = Obj.magic
       end
module BufferSource =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x1305 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x1305
    and t_to_js : t -> Ojs.t =
      fun (x1302 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x1302
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1309 : Ojs.t) -> t_of_js x1309
    and t_0_to_js : t_0 -> Ojs.t = fun (x1308 : t) -> t_to_js x1308
  end
module rec
  Blob:sig
         type t = [ `Blob ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_size : 'tags this -> float
         val get_type : 'tags this -> string
         val arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1
         val slice :
           'tags this ->
             ?start:float -> ?end_:float -> ?contentType:string -> unit -> t
         val stream : 'tags this -> ReadableStream.t_0
         val text : 'tags this -> string Promise.t_1
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           ?blobParts:BlobPart.t list ->
             ?options:BlobPropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1311 : Ojs.t) -> t_of_js x1311
    and t_0_to_js : t_0 -> Ojs.t = fun (x1310 : t) -> t_to_js x1310
    type tags = [ `Blob ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1314 : Ojs.t) -> intf_of_js __tags_of_js x1314
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1312 : __tags intf) -> intf_to_js __tags_to_js x1312
    let (get_size : 'tags this -> float) =
      fun (x1316 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1316) "size")
    let (get_type : 'tags this -> string) =
      fun (x1318 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1318) "type")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x1320 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x1320) "arrayBuffer" [||])
    let (slice :
      'tags this ->
        ?start:float -> ?end_:float -> ?contentType:string -> unit -> t)
      =
      fun (x1330 : 'tags this) ->
        fun ?start:(x1323 : float option) ->
          fun ?end_:(x1324 : float option) ->
            fun ?contentType:(x1325 : string option) ->
              fun () ->
                t_of_js
                  (let x1332 = this_to_js Obj.magic x1330 in
                   Ojs.call (Ojs.get_prop_ascii x1332 "slice") "apply"
                     [|x1332;((let x1326 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1323 with
                                | Some x1329 ->
                                    ignore
                                      (Ojs.call x1326 "push"
                                         [|(Ojs.float_to_js x1329)|])
                                | None -> ());
                               (match x1324 with
                                | Some x1328 ->
                                    ignore
                                      (Ojs.call x1326 "push"
                                         [|(Ojs.float_to_js x1328)|])
                                | None -> ());
                               (match x1325 with
                                | Some x1327 ->
                                    ignore
                                      (Ojs.call x1326 "push"
                                         [|(Ojs.string_to_js x1327)|])
                                | None -> ());
                               x1326))|])
    let (stream : 'tags this -> ReadableStream.t_0) =
      fun (x1333 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x1333) "stream" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x1335 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x1335) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Blob")
             "prototype")
    let (create :
      ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t)
      =
      fun ?blobParts:(x1338 : BlobPart.t list option) ->
        fun ?options:(x1339 : BlobPropertyBag.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Blob")
                 (let x1340 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1338 with
                   | Some x1342 ->
                       ignore
                         (Ojs.call x1340 "push"
                            [|(Ojs.list_to_js BlobPart.t_to_js x1342)|])
                   | None -> ());
                  (match x1339 with
                   | Some x1341 ->
                       ignore
                         (Ojs.call x1340 "push"
                            [|(BlobPropertyBag.t_to_js x1341)|])
                   | None -> ());
                  x1340))
  end
 and
  BlobPart:sig
             type t =
               [ `String of string 
               | `Other of (Blob.t, BufferSource.t) union2 ] Primitive.t
             type t_0 = t
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
           end =
  struct
    type t =
      [ `String of string  | `Other of (Blob.t, BufferSource.t) union2 ]
        Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1350 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x1351 : Ojs.t) ->
             let x1352 = x1351 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x1352 "dummy") with
             | "String" -> `String (Ojs.string_of_js x1352)
             | "Other" ->
                 `Other
                   (union2_of_js Blob.t_of_js BufferSource.t_of_js x1352)
             | _ -> assert false) x1350
    and t_to_js : t -> Ojs.t =
      fun
        (x1344 :
          [ `String of string  | `Other of (Blob.t, BufferSource.t) union2 ]
            Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x1345 :
               [ `String of string 
               | `Other of (Blob.t, BufferSource.t) union2 ])
             ->
             match x1345 with
             | `String x1346 -> Ojs.string_to_js x1346
             | `Other x1347 ->
                 union2_to_js Blob.t_to_js BufferSource.t_to_js x1347) x1344
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1356 : Ojs.t) -> t_of_js x1356
    and t_0_to_js : t_0 -> Ojs.t = fun (x1355 : t) -> t_to_js x1355
  end
module File =
  struct
    type t = [ `Blob  | `File ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1358 : Ojs.t) -> t_of_js x1358
    and t_0_to_js : t_0 -> Ojs.t = fun (x1357 : t) -> t_to_js x1357
    type tags = [ `Blob  | `File ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `File ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1361 : Ojs.t) -> intf_of_js __tags_of_js x1361
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1359 : __tags intf) -> intf_to_js __tags_to_js x1359
    let (get_lastModified : 'tags this -> float) =
      fun (x1363 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1363) "lastModified")
    let (get_name : 'tags this -> string) =
      fun (x1365 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1365) "name")
    let (get_webkitRelativePath : 'tags this -> string) =
      fun (x1367 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1367)
             "webkitRelativePath")
    let (create :
      lastModified:float ->
        name:string -> webkitRelativePath:string -> unit -> t)
      =
      fun ~lastModified:(x1369 : float) ->
        fun ~name:(x1370 : string) ->
          fun ~webkitRelativePath:(x1371 : string) ->
            fun () ->
              let x1372 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x1372 "lastModified" (Ojs.float_to_js x1369);
              Ojs.set_prop_ascii x1372 "name" (Ojs.string_to_js x1370);
              Ojs.set_prop_ascii x1372 "webkitRelativePath"
                (Ojs.string_to_js x1371);
              t_of_js x1372
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "File")
             "prototype")
    let (create' :
      fileBits:BlobPart.t list ->
        fileName:string -> ?options:FilePropertyBag.t -> unit -> t)
      =
      fun ~fileBits:(x1373 : BlobPart.t list) ->
        fun ~fileName:(x1374 : string) ->
          fun ?options:(x1375 : FilePropertyBag.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "File")
                   (let x1376 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x1376 "push"
                         [|(Ojs.list_to_js BlobPart.t_to_js x1373)|]);
                    ignore
                      (Ojs.call x1376 "push" [|(Ojs.string_to_js x1374)|]);
                    (match x1375 with
                     | Some x1377 ->
                         ignore
                           (Ojs.call x1376 "push"
                              [|(FilePropertyBag.t_to_js x1377)|])
                     | None -> ());
                    x1376))
  end
module FileSystemFileHandle =
  struct
    type t = [ `FileSystemFileHandle  | `FileSystemHandle ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1380 : Ojs.t) -> t_of_js x1380
    and t_0_to_js : t_0 -> Ojs.t = fun (x1379 : t) -> t_to_js x1379
    type tags = [ `FileSystemFileHandle  | `FileSystemHandle ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemFileHandle ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1383 : Ojs.t) -> intf_of_js __tags_of_js x1383
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1381 : __tags intf) -> intf_to_js __tags_to_js x1381
    let (get_kind : 'tags this -> [ `L_s75_file ]) =
      fun (x1385 : 'tags this) ->
        let x1387 = Ojs.get_prop_ascii (this_to_js Obj.magic x1385) "kind" in
        match Ojs.string_of_js x1387 with
        | "file" -> `L_s75_file
        | _ -> assert false
    let (getFile : 'tags this -> File.t Promise.t_1) =
      fun (x1388 : 'tags this) ->
        Promise.t_1_of_js File.t_of_js
          (Ojs.call (this_to_js Obj.magic x1388) "getFile" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileSystemFileHandle")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileSystemFileHandle")
             [||])
  end
module FileSystemDirectoryHandle =
  struct
    type t = [ `FileSystemDirectoryHandle  | `FileSystemHandle ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1392 : Ojs.t) -> t_of_js x1392
    and t_0_to_js : t_0 -> Ojs.t = fun (x1391 : t) -> t_to_js x1391
    type tags = [ `FileSystemDirectoryHandle  | `FileSystemHandle ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FileSystemDirectoryHandle ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1395 : Ojs.t) -> intf_of_js __tags_of_js x1395
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1393 : __tags intf) -> intf_to_js __tags_to_js x1393
    let (get_kind : 'tags this -> [ `L_s61_directory ]) =
      fun (x1397 : 'tags this) ->
        let x1399 = Ojs.get_prop_ascii (this_to_js Obj.magic x1397) "kind" in
        match Ojs.string_of_js x1399 with
        | "directory" -> `L_s61_directory
        | _ -> assert false
    let (getDirectoryHandle :
      'tags this ->
        name:string ->
          ?options:FileSystemGetDirectoryOptions.t -> unit -> t Promise.t_1)
      =
      fun (x1404 : 'tags this) ->
        fun ~name:(x1400 : string) ->
          fun ?options:(x1401 : FileSystemGetDirectoryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js t_of_js
                (let x1406 = this_to_js Obj.magic x1404 in
                 Ojs.call (Ojs.get_prop_ascii x1406 "getDirectoryHandle")
                   "apply"
                   [|x1406;((let x1402 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1402 "push"
                                  [|(Ojs.string_to_js x1400)|]);
                             (match x1401 with
                              | Some x1403 ->
                                  ignore
                                    (Ojs.call x1402 "push"
                                       [|(FileSystemGetDirectoryOptions.t_to_js
                                            x1403)|])
                              | None -> ());
                             x1402))|])
    let (getFileHandle :
      'tags this ->
        name:string ->
          ?options:FileSystemGetFileOptions.t ->
            unit -> FileSystemFileHandle.t Promise.t_1)
      =
      fun (x1412 : 'tags this) ->
        fun ~name:(x1408 : string) ->
          fun ?options:(x1409 : FileSystemGetFileOptions.t option) ->
            fun () ->
              Promise.t_1_of_js FileSystemFileHandle.t_of_js
                (let x1414 = this_to_js Obj.magic x1412 in
                 Ojs.call (Ojs.get_prop_ascii x1414 "getFileHandle") "apply"
                   [|x1414;((let x1410 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1410 "push"
                                  [|(Ojs.string_to_js x1408)|]);
                             (match x1409 with
                              | Some x1411 ->
                                  ignore
                                    (Ojs.call x1410 "push"
                                       [|(FileSystemGetFileOptions.t_to_js
                                            x1411)|])
                              | None -> ());
                             x1410))|])
    let (removeEntry :
      'tags this ->
        name:string ->
          ?options:FileSystemRemoveOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x1420 : 'tags this) ->
        fun ~name:(x1416 : string) ->
          fun ?options:(x1417 : FileSystemRemoveOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x1422 = this_to_js Obj.magic x1420 in
                 Ojs.call (Ojs.get_prop_ascii x1422 "removeEntry") "apply"
                   [|x1422;((let x1418 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1418 "push"
                                  [|(Ojs.string_to_js x1416)|]);
                             (match x1417 with
                              | Some x1419 ->
                                  ignore
                                    (Ojs.call x1418 "push"
                                       [|(FileSystemRemoveOptions.t_to_js
                                            x1419)|])
                              | None -> ());
                             x1418))|])
    let (resolve :
      'tags this ->
        possibleDescendant:FileSystemHandle.t ->
          string list option Promise.t_1)
      =
      fun (x1425 : 'tags this) ->
        fun ~possibleDescendant:(x1424 : FileSystemHandle.t) ->
          Promise.t_1_of_js
            (fun (x1427 : Ojs.t) ->
               Ojs.option_of_js
                 (fun (x1428 : Ojs.t) ->
                    Ojs.list_of_js Ojs.string_of_js x1428) x1427)
            (Ojs.call (this_to_js Obj.magic x1425) "resolve"
               [|(FileSystemHandle.t_to_js x1424)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileSystemDirectoryHandle")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "FileSystemDirectoryHandle") 
             [||])
  end
module StorageManager =
  struct
    type t = [ `StorageManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1431 : Ojs.t) -> t_of_js x1431
    and t_0_to_js : t_0 -> Ojs.t = fun (x1430 : t) -> t_to_js x1430
    type tags = [ `StorageManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1434 : Ojs.t) -> intf_of_js __tags_of_js x1434
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1432 : __tags intf) -> intf_to_js __tags_to_js x1432
    let (estimate : 'tags this -> StorageEstimate.t Promise.t_1) =
      fun (x1436 : 'tags this) ->
        Promise.t_1_of_js StorageEstimate.t_of_js
          (Ojs.call (this_to_js Obj.magic x1436) "estimate" [||])
    let (getDirectory :
      'tags this -> FileSystemDirectoryHandle.t Promise.t_1) =
      fun (x1439 : 'tags this) ->
        Promise.t_1_of_js FileSystemDirectoryHandle.t_of_js
          (Ojs.call (this_to_js Obj.magic x1439) "getDirectory" [||])
    let (persisted : 'tags this -> bool Promise.t_1) =
      fun (x1442 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x1442) "persisted" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "StorageManager") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "StorageManager") [||])
  end
module NavigatorStorage =
  struct
    type t = [ `NavigatorStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1446 : Ojs.t) -> t_of_js x1446
    and t_0_to_js : t_0 -> Ojs.t = fun (x1445 : t) -> t_to_js x1445
    type tags = [ `NavigatorStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1449 : Ojs.t) -> intf_of_js __tags_of_js x1449
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1447 : __tags intf) -> intf_to_js __tags_to_js x1447
    let (get_storage : 'tags this -> StorageManager.t) =
      fun (x1451 : 'tags this) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1451) "storage")
    let (create : storage:StorageManager.t -> unit -> t) =
      fun ~storage:(x1453 : StorageManager.t) ->
        fun () ->
          let x1454 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1454 "storage" (StorageManager.t_to_js x1453);
          t_of_js x1454
    let cast_from = Obj.magic
  end
module NavigatorOnLine =
  struct
    type t = [ `NavigatorOnLine ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1456 : Ojs.t) -> t_of_js x1456
    and t_0_to_js : t_0 -> Ojs.t = fun (x1455 : t) -> t_to_js x1455
    type tags = [ `NavigatorOnLine ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1459 : Ojs.t) -> intf_of_js __tags_of_js x1459
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1457 : __tags intf) -> intf_to_js __tags_to_js x1457
    let (get_onLine : 'tags this -> bool) =
      fun (x1461 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1461) "onLine")
    let (create : onLine:bool -> unit -> t) =
      fun ~onLine:(x1463 : bool) ->
        fun () ->
          let x1464 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1464 "onLine" (Ojs.bool_to_js x1463);
          t_of_js x1464
    let cast_from = Obj.magic
  end
module ConnectionType =
  struct
    type t =
      [ `L_s118_mixed  | `L_s130_none  | `L_s144_other  | `L_s201_unknown 
      | `L_s213_wifi  | `L_s46_bluetooth  | `L_s47_cellular 
      | `L_s69_ethernet ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1466 : Ojs.t) ->
        let x1467 = x1466 in
        match Ojs.string_of_js x1467 with
        | "mixed" -> `L_s118_mixed
        | "none" -> `L_s130_none
        | "other" -> `L_s144_other
        | "unknown" -> `L_s201_unknown
        | "wifi" -> `L_s213_wifi
        | "bluetooth" -> `L_s46_bluetooth
        | "cellular" -> `L_s47_cellular
        | "ethernet" -> `L_s69_ethernet
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1465 :
          [ `L_s118_mixed  | `L_s130_none  | `L_s144_other 
          | `L_s201_unknown  | `L_s213_wifi  | `L_s46_bluetooth 
          | `L_s47_cellular  | `L_s69_ethernet ])
        ->
        match x1465 with
        | `L_s118_mixed -> Ojs.string_to_js "mixed"
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s144_other -> Ojs.string_to_js "other"
        | `L_s201_unknown -> Ojs.string_to_js "unknown"
        | `L_s213_wifi -> Ojs.string_to_js "wifi"
        | `L_s46_bluetooth -> Ojs.string_to_js "bluetooth"
        | `L_s47_cellular -> Ojs.string_to_js "cellular"
        | `L_s69_ethernet -> Ojs.string_to_js "ethernet"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1469 : Ojs.t) -> t_of_js x1469
    and t_0_to_js : t_0 -> Ojs.t = fun (x1468 : t) -> t_to_js x1468
  end
module NetworkInformation =
  struct
    type t = [ `EventTarget  | `NetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1471 : Ojs.t) -> t_of_js x1471
    and t_0_to_js : t_0 -> Ojs.t = fun (x1470 : t) -> t_to_js x1470
    type tags = [ `EventTarget  | `NetworkInformation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1474 : Ojs.t) -> intf_of_js __tags_of_js x1474
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1472 : __tags intf) -> intf_to_js __tags_to_js x1472
    let (get_type : 'tags this -> ConnectionType.t) =
      fun (x1476 : 'tags this) ->
        ConnectionType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1476) "type")
    let (create : type_:ConnectionType.t -> unit -> t) =
      fun ~type_:(x1478 : ConnectionType.t) ->
        fun () ->
          let x1479 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1479 "type" (ConnectionType.t_to_js x1478);
          t_of_js x1479
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NetworkInformation") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
             [||])
  end
module NavigatorNetworkInformation =
  struct
    type t = [ `NavigatorNetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1481 : Ojs.t) -> t_of_js x1481
    and t_0_to_js : t_0 -> Ojs.t = fun (x1480 : t) -> t_to_js x1480
    type tags = [ `NavigatorNetworkInformation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorNetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1484 : Ojs.t) -> intf_of_js __tags_of_js x1484
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1482 : __tags intf) -> intf_to_js __tags_to_js x1482
    let (get_connection : 'tags this -> NetworkInformation.t) =
      fun (x1486 : 'tags this) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1486) "connection")
    let (create : connection:NetworkInformation.t -> unit -> t) =
      fun ~connection:(x1488 : NetworkInformation.t) ->
        fun () ->
          let x1489 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1489 "connection"
            (NetworkInformation.t_to_js x1488);
          t_of_js x1489
    let cast_from = Obj.magic
  end
module NavigatorLanguage =
  struct
    type t = [ `NavigatorLanguage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1491 : Ojs.t) -> t_of_js x1491
    and t_0_to_js : t_0 -> Ojs.t = fun (x1490 : t) -> t_to_js x1490
    type tags = [ `NavigatorLanguage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1494 : Ojs.t) -> intf_of_js __tags_of_js x1494
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1492 : __tags intf) -> intf_to_js __tags_to_js x1492
    let (get_language : 'tags this -> string) =
      fun (x1496 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1496) "language")
    let (get_languages : 'tags this -> string list) =
      fun (x1498 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1498) "languages")
    let (create : language:string -> languages:string list -> unit -> t) =
      fun ~language:(x1501 : string) ->
        fun ~languages:(x1502 : string list) ->
          fun () ->
            let x1503 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1503 "language" (Ojs.string_to_js x1501);
            Ojs.set_prop_ascii x1503 "languages"
              (Ojs.list_to_js Ojs.string_to_js x1502);
            t_of_js x1503
    let cast_from = Obj.magic
  end
module NavigatorID =
  struct
    type t = [ `NavigatorID ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1506 : Ojs.t) -> t_of_js x1506
    and t_0_to_js : t_0 -> Ojs.t = fun (x1505 : t) -> t_to_js x1505
    type tags = [ `NavigatorID ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1509 : Ojs.t) -> intf_of_js __tags_of_js x1509
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1507 : __tags intf) -> intf_to_js __tags_to_js x1507
    let (get_appCodeName : 'tags this -> string) =
      fun (x1511 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1511) "appCodeName")
    let (get_appName : 'tags this -> string) =
      fun (x1513 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1513) "appName")
    let (get_appVersion : 'tags this -> string) =
      fun (x1515 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1515) "appVersion")
    let (get_platform : 'tags this -> string) =
      fun (x1517 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1517) "platform")
    let (get_product : 'tags this -> string) =
      fun (x1519 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1519) "product")
    let (get_userAgent : 'tags this -> string) =
      fun (x1521 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1521) "userAgent")
    let (create :
      appCodeName:string ->
        appName:string ->
          appVersion:string ->
            platform:string ->
              product:string -> userAgent:string -> unit -> t)
      =
      fun ~appCodeName:(x1523 : string) ->
        fun ~appName:(x1524 : string) ->
          fun ~appVersion:(x1525 : string) ->
            fun ~platform:(x1526 : string) ->
              fun ~product:(x1527 : string) ->
                fun ~userAgent:(x1528 : string) ->
                  fun () ->
                    let x1529 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x1529 "appCodeName"
                      (Ojs.string_to_js x1523);
                    Ojs.set_prop_ascii x1529 "appName"
                      (Ojs.string_to_js x1524);
                    Ojs.set_prop_ascii x1529 "appVersion"
                      (Ojs.string_to_js x1525);
                    Ojs.set_prop_ascii x1529 "platform"
                      (Ojs.string_to_js x1526);
                    Ojs.set_prop_ascii x1529 "product"
                      (Ojs.string_to_js x1527);
                    Ojs.set_prop_ascii x1529 "userAgent"
                      (Ojs.string_to_js x1528);
                    t_of_js x1529
    let cast_from = Obj.magic
  end
module NavigatorConcurrentHardware =
  struct
    type t = [ `NavigatorConcurrentHardware ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1531 : Ojs.t) -> t_of_js x1531
    and t_0_to_js : t_0 -> Ojs.t = fun (x1530 : t) -> t_to_js x1530
    type tags = [ `NavigatorConcurrentHardware ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1534 : Ojs.t) -> intf_of_js __tags_of_js x1534
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1532 : __tags intf) -> intf_to_js __tags_to_js x1532
    let (get_hardwareConcurrency : 'tags this -> float) =
      fun (x1536 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1536)
             "hardwareConcurrency")
    let (create : hardwareConcurrency:float -> unit -> t) =
      fun ~hardwareConcurrency:(x1538 : float) ->
        fun () ->
          let x1539 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1539 "hardwareConcurrency"
            (Ojs.float_to_js x1538);
          t_of_js x1539
    let cast_from = Obj.magic
  end
module MediaEncodingType =
  struct
    type t = [ `L_s167_record  | `L_s212_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1541 : Ojs.t) ->
        let x1542 = x1541 in
        match Ojs.string_of_js x1542 with
        | "record" -> `L_s167_record
        | "webrtc" -> `L_s212_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1540 : [ `L_s167_record  | `L_s212_webrtc ]) ->
        match x1540 with
        | `L_s167_record -> Ojs.string_to_js "record"
        | `L_s212_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1544 : Ojs.t) -> t_of_js x1544
    and t_0_to_js : t_0 -> Ojs.t = fun (x1543 : t) -> t_to_js x1543
  end
module TransferFunction =
  struct
    type t = [ `L_s153_pq  | `L_s187_srgb  | `L_s88_hlg ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1546 : Ojs.t) ->
        let x1547 = x1546 in
        match Ojs.string_of_js x1547 with
        | "pq" -> `L_s153_pq
        | "srgb" -> `L_s187_srgb
        | "hlg" -> `L_s88_hlg
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1545 : [ `L_s153_pq  | `L_s187_srgb  | `L_s88_hlg ]) ->
        match x1545 with
        | `L_s153_pq -> Ojs.string_to_js "pq"
        | `L_s187_srgb -> Ojs.string_to_js "srgb"
        | `L_s88_hlg -> Ojs.string_to_js "hlg"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1549 : Ojs.t) -> t_of_js x1549
    and t_0_to_js : t_0 -> Ojs.t = fun (x1548 : t) -> t_to_js x1548
  end
module HdrMetadataType =
  struct
    type t =
      [ `L_s183_smpteSt2086  | `L_s184_smpteSt2094_10 
      | `L_s185_smpteSt2094_40 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1551 : Ojs.t) ->
        let x1552 = x1551 in
        match Ojs.string_of_js x1552 with
        | "smpteSt2086" -> `L_s183_smpteSt2086
        | "smpteSt2094-10" -> `L_s184_smpteSt2094_10
        | "smpteSt2094-40" -> `L_s185_smpteSt2094_40
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1550 :
          [ `L_s183_smpteSt2086  | `L_s184_smpteSt2094_10 
          | `L_s185_smpteSt2094_40 ])
        ->
        match x1550 with
        | `L_s183_smpteSt2086 -> Ojs.string_to_js "smpteSt2086"
        | `L_s184_smpteSt2094_10 -> Ojs.string_to_js "smpteSt2094-10"
        | `L_s185_smpteSt2094_40 -> Ojs.string_to_js "smpteSt2094-40"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1554 : Ojs.t) -> t_of_js x1554
    and t_0_to_js : t_0 -> Ojs.t = fun (x1553 : t) -> t_to_js x1553
  end
module ColorGamut =
  struct
    type t = [ `L_s146_p3  | `L_s166_rec2020  | `L_s187_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1556 : Ojs.t) ->
        let x1557 = x1556 in
        match Ojs.string_of_js x1557 with
        | "p3" -> `L_s146_p3
        | "rec2020" -> `L_s166_rec2020
        | "srgb" -> `L_s187_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1555 : [ `L_s146_p3  | `L_s166_rec2020  | `L_s187_srgb ]) ->
        match x1555 with
        | `L_s146_p3 -> Ojs.string_to_js "p3"
        | `L_s166_rec2020 -> Ojs.string_to_js "rec2020"
        | `L_s187_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1559 : Ojs.t) -> t_of_js x1559
    and t_0_to_js : t_0 -> Ojs.t = fun (x1558 : t) -> t_to_js x1558
  end
module VideoConfiguration =
  struct
    type t = [ `VideoConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1561 : Ojs.t) -> t_of_js x1561
    and t_0_to_js : t_0 -> Ojs.t = fun (x1560 : t) -> t_to_js x1560
    type tags = [ `VideoConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1564 : Ojs.t) -> intf_of_js __tags_of_js x1564
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1562 : __tags intf) -> intf_to_js __tags_to_js x1562
    let (get_bitrate : 'tags this -> float) =
      fun (x1566 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1566) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x1568 : 'tags this) ->
        fun (x1569 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1568) "bitrate"
            (Ojs.float_to_js x1569)
    let (get_colorGamut : 'tags this -> ColorGamut.t) =
      fun (x1571 : 'tags this) ->
        ColorGamut.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1571) "colorGamut")
    let (set_colorGamut : 'tags this -> ColorGamut.t -> unit) =
      fun (x1573 : 'tags this) ->
        fun (x1574 : ColorGamut.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1573) "colorGamut"
            (ColorGamut.t_to_js x1574)
    let (get_contentType : 'tags this -> string) =
      fun (x1576 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1576) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x1578 : 'tags this) ->
        fun (x1579 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1578) "contentType"
            (Ojs.string_to_js x1579)
    let (get_framerate : 'tags this -> float) =
      fun (x1581 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1581) "framerate")
    let (set_framerate : 'tags this -> float -> unit) =
      fun (x1583 : 'tags this) ->
        fun (x1584 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1583) "framerate"
            (Ojs.float_to_js x1584)
    let (get_hdrMetadataType : 'tags this -> HdrMetadataType.t) =
      fun (x1586 : 'tags this) ->
        HdrMetadataType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1586) "hdrMetadataType")
    let (set_hdrMetadataType : 'tags this -> HdrMetadataType.t -> unit) =
      fun (x1588 : 'tags this) ->
        fun (x1589 : HdrMetadataType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1588) "hdrMetadataType"
            (HdrMetadataType.t_to_js x1589)
    let (get_height : 'tags this -> float) =
      fun (x1591 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1591) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x1593 : 'tags this) ->
        fun (x1594 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1593) "height"
            (Ojs.float_to_js x1594)
    let (get_scalabilityMode : 'tags this -> string) =
      fun (x1596 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1596) "scalabilityMode")
    let (set_scalabilityMode : 'tags this -> string -> unit) =
      fun (x1598 : 'tags this) ->
        fun (x1599 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1598) "scalabilityMode"
            (Ojs.string_to_js x1599)
    let (get_transferFunction : 'tags this -> TransferFunction.t) =
      fun (x1601 : 'tags this) ->
        TransferFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1601) "transferFunction")
    let (set_transferFunction : 'tags this -> TransferFunction.t -> unit) =
      fun (x1603 : 'tags this) ->
        fun (x1604 : TransferFunction.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1603) "transferFunction"
            (TransferFunction.t_to_js x1604)
    let (get_width : 'tags this -> float) =
      fun (x1606 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1606) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x1608 : 'tags this) ->
        fun (x1609 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1608) "width"
            (Ojs.float_to_js x1609)
    let (create :
      bitrate:float ->
        colorGamut:ColorGamut.t ->
          contentType:string ->
            framerate:float ->
              hdrMetadataType:HdrMetadataType.t ->
                height:float ->
                  scalabilityMode:string ->
                    transferFunction:TransferFunction.t ->
                      width:float -> unit -> t)
      =
      fun ~bitrate:(x1611 : float) ->
        fun ~colorGamut:(x1612 : ColorGamut.t) ->
          fun ~contentType:(x1613 : string) ->
            fun ~framerate:(x1614 : float) ->
              fun ~hdrMetadataType:(x1615 : HdrMetadataType.t) ->
                fun ~height:(x1616 : float) ->
                  fun ~scalabilityMode:(x1617 : string) ->
                    fun ~transferFunction:(x1618 : TransferFunction.t) ->
                      fun ~width:(x1619 : float) ->
                        fun () ->
                          let x1620 = Ojs.empty_obj () in
                          Ojs.set_prop_ascii x1620 "bitrate"
                            (Ojs.float_to_js x1611);
                          Ojs.set_prop_ascii x1620 "colorGamut"
                            (ColorGamut.t_to_js x1612);
                          Ojs.set_prop_ascii x1620 "contentType"
                            (Ojs.string_to_js x1613);
                          Ojs.set_prop_ascii x1620 "framerate"
                            (Ojs.float_to_js x1614);
                          Ojs.set_prop_ascii x1620 "hdrMetadataType"
                            (HdrMetadataType.t_to_js x1615);
                          Ojs.set_prop_ascii x1620 "height"
                            (Ojs.float_to_js x1616);
                          Ojs.set_prop_ascii x1620 "scalabilityMode"
                            (Ojs.string_to_js x1617);
                          Ojs.set_prop_ascii x1620 "transferFunction"
                            (TransferFunction.t_to_js x1618);
                          Ojs.set_prop_ascii x1620 "width"
                            (Ojs.float_to_js x1619);
                          t_of_js x1620
    let cast_from = Obj.magic
  end
module AudioConfiguration =
  struct
    type t = [ `AudioConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1622 : Ojs.t) -> t_of_js x1622
    and t_0_to_js : t_0 -> Ojs.t = fun (x1621 : t) -> t_to_js x1621
    type tags = [ `AudioConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1625 : Ojs.t) -> intf_of_js __tags_of_js x1625
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1623 : __tags intf) -> intf_to_js __tags_to_js x1623
    let (get_bitrate : 'tags this -> float) =
      fun (x1627 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1627) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x1629 : 'tags this) ->
        fun (x1630 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1629) "bitrate"
            (Ojs.float_to_js x1630)
    let (get_channels : 'tags this -> string) =
      fun (x1632 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1632) "channels")
    let (set_channels : 'tags this -> string -> unit) =
      fun (x1634 : 'tags this) ->
        fun (x1635 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1634) "channels"
            (Ojs.string_to_js x1635)
    let (get_contentType : 'tags this -> string) =
      fun (x1637 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1637) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x1639 : 'tags this) ->
        fun (x1640 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1639) "contentType"
            (Ojs.string_to_js x1640)
    let (get_samplerate : 'tags this -> float) =
      fun (x1642 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1642) "samplerate")
    let (set_samplerate : 'tags this -> float -> unit) =
      fun (x1644 : 'tags this) ->
        fun (x1645 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1644) "samplerate"
            (Ojs.float_to_js x1645)
    let (get_spatialRendering : 'tags this -> bool) =
      fun (x1647 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1647) "spatialRendering")
    let (set_spatialRendering : 'tags this -> bool -> unit) =
      fun (x1649 : 'tags this) ->
        fun (x1650 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1649) "spatialRendering"
            (Ojs.bool_to_js x1650)
    let (create :
      bitrate:float ->
        channels:string ->
          contentType:string ->
            samplerate:float -> spatialRendering:bool -> unit -> t)
      =
      fun ~bitrate:(x1652 : float) ->
        fun ~channels:(x1653 : string) ->
          fun ~contentType:(x1654 : string) ->
            fun ~samplerate:(x1655 : float) ->
              fun ~spatialRendering:(x1656 : bool) ->
                fun () ->
                  let x1657 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x1657 "bitrate" (Ojs.float_to_js x1652);
                  Ojs.set_prop_ascii x1657 "channels"
                    (Ojs.string_to_js x1653);
                  Ojs.set_prop_ascii x1657 "contentType"
                    (Ojs.string_to_js x1654);
                  Ojs.set_prop_ascii x1657 "samplerate"
                    (Ojs.float_to_js x1655);
                  Ojs.set_prop_ascii x1657 "spatialRendering"
                    (Ojs.bool_to_js x1656);
                  t_of_js x1657
    let cast_from = Obj.magic
  end
module MediaConfiguration =
  struct
    type t = [ `MediaConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1659 : Ojs.t) -> t_of_js x1659
    and t_0_to_js : t_0 -> Ojs.t = fun (x1658 : t) -> t_to_js x1658
    type tags = [ `MediaConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1662 : Ojs.t) -> intf_of_js __tags_of_js x1662
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1660 : __tags intf) -> intf_to_js __tags_to_js x1660
    let (get_audio : 'tags this -> AudioConfiguration.t) =
      fun (x1664 : 'tags this) ->
        AudioConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1664) "audio")
    let (set_audio : 'tags this -> AudioConfiguration.t -> unit) =
      fun (x1666 : 'tags this) ->
        fun (x1667 : AudioConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1666) "audio"
            (AudioConfiguration.t_to_js x1667)
    let (get_video : 'tags this -> VideoConfiguration.t) =
      fun (x1669 : 'tags this) ->
        VideoConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1669) "video")
    let (set_video : 'tags this -> VideoConfiguration.t -> unit) =
      fun (x1671 : 'tags this) ->
        fun (x1672 : VideoConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1671) "video"
            (VideoConfiguration.t_to_js x1672)
    let (create :
      audio:AudioConfiguration.t -> video:VideoConfiguration.t -> unit -> t)
      =
      fun ~audio:(x1674 : AudioConfiguration.t) ->
        fun ~video:(x1675 : VideoConfiguration.t) ->
          fun () ->
            let x1676 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1676 "audio"
              (AudioConfiguration.t_to_js x1674);
            Ojs.set_prop_ascii x1676 "video"
              (VideoConfiguration.t_to_js x1675);
            t_of_js x1676
    let cast_from = Obj.magic
  end
module MediaEncodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaEncodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1678 : Ojs.t) -> t_of_js x1678
    and t_0_to_js : t_0 -> Ojs.t = fun (x1677 : t) -> t_to_js x1677
    type tags = [ `MediaConfiguration  | `MediaEncodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1681 : Ojs.t) -> intf_of_js __tags_of_js x1681
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1679 : __tags intf) -> intf_to_js __tags_to_js x1679
    let (get_type : 'tags this -> MediaEncodingType.t) =
      fun (x1683 : 'tags this) ->
        MediaEncodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1683) "type")
    let (set_type : 'tags this -> MediaEncodingType.t -> unit) =
      fun (x1685 : 'tags this) ->
        fun (x1686 : MediaEncodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1685) "type"
            (MediaEncodingType.t_to_js x1686)
    let (create : type_:MediaEncodingType.t -> unit -> t) =
      fun ~type_:(x1688 : MediaEncodingType.t) ->
        fun () ->
          let x1689 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1689 "type" (MediaEncodingType.t_to_js x1688);
          t_of_js x1689
    let cast_from = Obj.magic
  end
module MediaCapabilitiesInfo =
  struct
    type t = [ `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1691 : Ojs.t) -> t_of_js x1691
    and t_0_to_js : t_0 -> Ojs.t = fun (x1690 : t) -> t_to_js x1690
    type tags = [ `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1694 : Ojs.t) -> intf_of_js __tags_of_js x1694
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1692 : __tags intf) -> intf_to_js __tags_to_js x1692
    let (get_powerEfficient : 'tags this -> bool) =
      fun (x1696 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1696) "powerEfficient")
    let (set_powerEfficient : 'tags this -> bool -> unit) =
      fun (x1698 : 'tags this) ->
        fun (x1699 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1698) "powerEfficient"
            (Ojs.bool_to_js x1699)
    let (get_smooth : 'tags this -> bool) =
      fun (x1701 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1701) "smooth")
    let (set_smooth : 'tags this -> bool -> unit) =
      fun (x1703 : 'tags this) ->
        fun (x1704 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1703) "smooth"
            (Ojs.bool_to_js x1704)
    let (get_supported : 'tags this -> bool) =
      fun (x1706 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1706) "supported")
    let (set_supported : 'tags this -> bool -> unit) =
      fun (x1708 : 'tags this) ->
        fun (x1709 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1708) "supported"
            (Ojs.bool_to_js x1709)
    let (create :
      powerEfficient:bool -> smooth:bool -> supported:bool -> unit -> t) =
      fun ~powerEfficient:(x1711 : bool) ->
        fun ~smooth:(x1712 : bool) ->
          fun ~supported:(x1713 : bool) ->
            fun () ->
              let x1714 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x1714 "powerEfficient"
                (Ojs.bool_to_js x1711);
              Ojs.set_prop_ascii x1714 "smooth" (Ojs.bool_to_js x1712);
              Ojs.set_prop_ascii x1714 "supported" (Ojs.bool_to_js x1713);
              t_of_js x1714
    let cast_from = Obj.magic
  end
module MediaCapabilitiesEncodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1716 : Ojs.t) -> t_of_js x1716
    and t_0_to_js : t_0 -> Ojs.t = fun (x1715 : t) -> t_to_js x1715
    type tags = [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1719 : Ojs.t) -> intf_of_js __tags_of_js x1719
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1717 : __tags intf) -> intf_to_js __tags_to_js x1717
    let (get_configuration : 'tags this -> MediaEncodingConfiguration.t) =
      fun (x1721 : 'tags this) ->
        MediaEncodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1721) "configuration")
    let (set_configuration :
      'tags this -> MediaEncodingConfiguration.t -> unit) =
      fun (x1723 : 'tags this) ->
        fun (x1724 : MediaEncodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1723) "configuration"
            (MediaEncodingConfiguration.t_to_js x1724)
    let (create : configuration:MediaEncodingConfiguration.t -> unit -> t) =
      fun ~configuration:(x1726 : MediaEncodingConfiguration.t) ->
        fun () ->
          let x1727 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1727 "configuration"
            (MediaEncodingConfiguration.t_to_js x1726);
          t_of_js x1727
    let cast_from = Obj.magic
  end
module MediaDecodingType =
  struct
    type t = [ `L_s113_media_source  | `L_s212_webrtc  | `L_s75_file ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1729 : Ojs.t) ->
        let x1730 = x1729 in
        match Ojs.string_of_js x1730 with
        | "media-source" -> `L_s113_media_source
        | "webrtc" -> `L_s212_webrtc
        | "file" -> `L_s75_file
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1728 : [ `L_s113_media_source  | `L_s212_webrtc  | `L_s75_file ])
        ->
        match x1728 with
        | `L_s113_media_source -> Ojs.string_to_js "media-source"
        | `L_s212_webrtc -> Ojs.string_to_js "webrtc"
        | `L_s75_file -> Ojs.string_to_js "file"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1732 : Ojs.t) -> t_of_js x1732
    and t_0_to_js : t_0 -> Ojs.t = fun (x1731 : t) -> t_to_js x1731
  end
module MediaDecodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaDecodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1734 : Ojs.t) -> t_of_js x1734
    and t_0_to_js : t_0 -> Ojs.t = fun (x1733 : t) -> t_to_js x1733
    type tags = [ `MediaConfiguration  | `MediaDecodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1737 : Ojs.t) -> intf_of_js __tags_of_js x1737
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1735 : __tags intf) -> intf_to_js __tags_to_js x1735
    let (get_type : 'tags this -> MediaDecodingType.t) =
      fun (x1739 : 'tags this) ->
        MediaDecodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1739) "type")
    let (set_type : 'tags this -> MediaDecodingType.t -> unit) =
      fun (x1741 : 'tags this) ->
        fun (x1742 : MediaDecodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1741) "type"
            (MediaDecodingType.t_to_js x1742)
    let (create : type_:MediaDecodingType.t -> unit -> t) =
      fun ~type_:(x1744 : MediaDecodingType.t) ->
        fun () ->
          let x1745 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1745 "type" (MediaDecodingType.t_to_js x1744);
          t_of_js x1745
    let cast_from = Obj.magic
  end
module MediaCapabilitiesDecodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1747 : Ojs.t) -> t_of_js x1747
    and t_0_to_js : t_0 -> Ojs.t = fun (x1746 : t) -> t_to_js x1746
    type tags = [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1750 : Ojs.t) -> intf_of_js __tags_of_js x1750
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1748 : __tags intf) -> intf_to_js __tags_to_js x1748
    let (get_configuration : 'tags this -> MediaDecodingConfiguration.t) =
      fun (x1752 : 'tags this) ->
        MediaDecodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1752) "configuration")
    let (set_configuration :
      'tags this -> MediaDecodingConfiguration.t -> unit) =
      fun (x1754 : 'tags this) ->
        fun (x1755 : MediaDecodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1754) "configuration"
            (MediaDecodingConfiguration.t_to_js x1755)
    let (create : configuration:MediaDecodingConfiguration.t -> unit -> t) =
      fun ~configuration:(x1757 : MediaDecodingConfiguration.t) ->
        fun () ->
          let x1758 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1758 "configuration"
            (MediaDecodingConfiguration.t_to_js x1757);
          t_of_js x1758
    let cast_from = Obj.magic
  end
module MediaCapabilities =
  struct
    type t = [ `MediaCapabilities ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1760 : Ojs.t) -> t_of_js x1760
    and t_0_to_js : t_0 -> Ojs.t = fun (x1759 : t) -> t_to_js x1759
    type tags = [ `MediaCapabilities ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1763 : Ojs.t) -> intf_of_js __tags_of_js x1763
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1761 : __tags intf) -> intf_to_js __tags_to_js x1761
    let (decodingInfo :
      'tags this ->
        configuration:MediaDecodingConfiguration.t ->
          MediaCapabilitiesDecodingInfo.t Promise.t_1)
      =
      fun (x1766 : 'tags this) ->
        fun ~configuration:(x1765 : MediaDecodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesDecodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x1766) "decodingInfo"
               [|(MediaDecodingConfiguration.t_to_js x1765)|])
    let (encodingInfo :
      'tags this ->
        configuration:MediaEncodingConfiguration.t ->
          MediaCapabilitiesEncodingInfo.t Promise.t_1)
      =
      fun (x1770 : 'tags this) ->
        fun ~configuration:(x1769 : MediaEncodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesEncodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x1770) "encodingInfo"
               [|(MediaEncodingConfiguration.t_to_js x1769)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MediaCapabilities") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
             [||])
  end
module NavigatorStatic =
  struct
    let (mediaCapabilities : unit -> MediaCapabilities.t) =
      fun () ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "navigator")
             "mediaCapabilities")
  end
module LocationStatic =
  struct
    let (hash : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hash")
    let (host : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "host")
    let (hostname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hostname")
    let (href : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "href")
    let (toString : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "location") "toString"
             [||])
    let (origin : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "origin")
    let (pathname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "pathname")
    let (port : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "port")
    let (protocol : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "protocol")
    let (search : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "search")
  end
module IDBVersionChangeEventInit =
  struct
    type t = [ `EventInit  | `IDBVersionChangeEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1774 : Ojs.t) -> t_of_js x1774
    and t_0_to_js : t_0 -> Ojs.t = fun (x1773 : t) -> t_to_js x1773
    type tags = [ `EventInit  | `IDBVersionChangeEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1777 : Ojs.t) -> intf_of_js __tags_of_js x1777
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1775 : __tags intf) -> intf_to_js __tags_to_js x1775
    let (get_newVersion : 'tags this -> float option) =
      fun (x1779 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1779) "newVersion")
    let (set_newVersion : 'tags this -> float option -> unit) =
      fun (x1782 : 'tags this) ->
        fun (x1783 : float option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1782) "newVersion"
            (Ojs.option_to_js Ojs.float_to_js x1783)
    let (get_oldVersion : 'tags this -> float) =
      fun (x1786 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1786) "oldVersion")
    let (set_oldVersion : 'tags this -> float -> unit) =
      fun (x1788 : 'tags this) ->
        fun (x1789 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1788) "oldVersion"
            (Ojs.float_to_js x1789)
    let (create : ?newVersion:float -> oldVersion:float -> unit -> t) =
      fun ?newVersion:(x1791 : float option) ->
        fun ~oldVersion:(x1792 : float) ->
          fun () ->
            let x1793 = Ojs.empty_obj () in
            (match x1791 with
             | Some x1794 ->
                 Ojs.set_prop_ascii x1793 "newVersion"
                   (Ojs.float_to_js x1794)
             | None -> ());
            Ojs.set_prop_ascii x1793 "oldVersion" (Ojs.float_to_js x1792);
            t_of_js x1793
    let cast_from = Obj.magic
  end
module IDBVersionChangeEvent =
  struct
    type t = [ `Event  | `IDBVersionChangeEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1796 : Ojs.t) -> t_of_js x1796
    and t_0_to_js : t_0 -> Ojs.t = fun (x1795 : t) -> t_to_js x1795
    type tags = [ `Event  | `IDBVersionChangeEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1799 : Ojs.t) -> intf_of_js __tags_of_js x1799
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1797 : __tags intf) -> intf_to_js __tags_to_js x1797
    let (get_newVersion : 'tags this -> float option) =
      fun (x1801 : 'tags this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1801) "newVersion")
    let (get_oldVersion : 'tags this -> float) =
      fun (x1804 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1804) "oldVersion")
    let (create : ?newVersion:float -> oldVersion:float -> unit -> t) =
      fun ?newVersion:(x1806 : float option) ->
        fun ~oldVersion:(x1807 : float) ->
          fun () ->
            let x1808 = Ojs.empty_obj () in
            (match x1806 with
             | Some x1809 ->
                 Ojs.set_prop_ascii x1808 "newVersion"
                   (Ojs.float_to_js x1809)
             | None -> ());
            Ojs.set_prop_ascii x1808 "oldVersion" (Ojs.float_to_js x1807);
            t_of_js x1808
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t)
      =
      fun ~type_:(x1810 : string) ->
        fun ?eventInitDict:(x1811 : IDBVersionChangeEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
                 (let x1812 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x1812 "push" [|(Ojs.string_to_js x1810)|]);
                  (match x1811 with
                   | Some x1813 ->
                       ignore
                         (Ojs.call x1812 "push"
                            [|(IDBVersionChangeEventInit.t_to_js x1813)|])
                   | None -> ());
                  x1812))
  end
module IDBObjectStoreParameters =
  struct
    type t = [ `IDBObjectStoreParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1815 : Ojs.t) -> t_of_js x1815
    and t_0_to_js : t_0 -> Ojs.t = fun (x1814 : t) -> t_to_js x1814
    type tags = [ `IDBObjectStoreParameters ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1818 : Ojs.t) -> intf_of_js __tags_of_js x1818
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1816 : __tags intf) -> intf_to_js __tags_to_js x1816
    let (get_autoIncrement : 'tags this -> bool) =
      fun (x1820 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1820) "autoIncrement")
    let (set_autoIncrement : 'tags this -> bool -> unit) =
      fun (x1822 : 'tags this) ->
        fun (x1823 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1822) "autoIncrement"
            (Ojs.bool_to_js x1823)
    let (get_keyPath :
      'tags this ->
        [ `String of string  | `Null  | `Other of string list ] Primitive.t)
      =
      fun (x1825 : 'tags this) ->
        Primitive.t_of_js
          (fun (x1827 : Ojs.t) ->
             let x1828 = x1827 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x1828 "dummy") with
             | "String" -> `String (Ojs.string_of_js x1828)
             | "Null" -> `Null
             | "Other" -> `Other (Ojs.list_of_js Ojs.string_of_js x1828)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1825) "keyPath")
    let (set_keyPath :
      'tags this -> [ `Null  | `U1 of string  | `U2 of string list ] -> unit)
      =
      fun (x1830 : 'tags this) ->
        fun (x1831 : [ `Null  | `U1 of string  | `U2 of string list ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1830) "keyPath"
            (match x1831 with
             | `Null -> Ojs.null
             | `U1 x1832 -> Ojs.string_to_js x1832
             | `U2 x1833 -> Ojs.list_to_js Ojs.string_to_js x1833)
    let (create :
      autoIncrement:bool ->
        ?keyPath:[ `String of string  | `Other of string list ] Primitive.t
          -> unit -> t)
      =
      fun ~autoIncrement:(x1836 : bool) ->
        fun
          ?keyPath:(x1837 :
                     [ `String of string  | `Other of string list ]
                       Primitive.t option)
          ->
          fun () ->
            let x1838 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1838 "autoIncrement" (Ojs.bool_to_js x1836);
            (match x1837 with
             | Some x1839 ->
                 Ojs.set_prop_ascii x1838 "keyPath"
                   (Primitive.t_to_js
                      (fun
                         (x1840 :
                           [ `String of string  | `Other of string list ])
                         ->
                         match x1840 with
                         | `String x1841 -> Ojs.string_to_js x1841
                         | `Other x1842 ->
                             Ojs.list_to_js Ojs.string_to_js x1842) x1839)
             | None -> ());
            t_of_js x1838
    let cast_from = Obj.magic
  end
module IDBIndexParameters =
  struct
    type t = [ `IDBIndexParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1845 : Ojs.t) -> t_of_js x1845
    and t_0_to_js : t_0 -> Ojs.t = fun (x1844 : t) -> t_to_js x1844
    type tags = [ `IDBIndexParameters ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1848 : Ojs.t) -> intf_of_js __tags_of_js x1848
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1846 : __tags intf) -> intf_to_js __tags_to_js x1846
    let (get_multiEntry : 'tags this -> bool) =
      fun (x1850 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1850) "multiEntry")
    let (set_multiEntry : 'tags this -> bool -> unit) =
      fun (x1852 : 'tags this) ->
        fun (x1853 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1852) "multiEntry"
            (Ojs.bool_to_js x1853)
    let (get_unique : 'tags this -> bool) =
      fun (x1855 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1855) "unique")
    let (set_unique : 'tags this -> bool -> unit) =
      fun (x1857 : 'tags this) ->
        fun (x1858 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1857) "unique"
            (Ojs.bool_to_js x1858)
    let (create : multiEntry:bool -> unique:bool -> unit -> t) =
      fun ~multiEntry:(x1860 : bool) ->
        fun ~unique:(x1861 : bool) ->
          fun () ->
            let x1862 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1862 "multiEntry" (Ojs.bool_to_js x1860);
            Ojs.set_prop_ascii x1862 "unique" (Ojs.bool_to_js x1861);
            t_of_js x1862
    let cast_from = Obj.magic
  end
module IDBValidKey =
  struct
    type t =
      [ `Number of float  | `String of string 
      | `Other of (t list, BufferSource.t, Date.t_0) union3 ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1872 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x1873 : Ojs.t) ->
             let x1874 = x1873 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x1874 "dummy") with
             | "Number" -> `Number (Ojs.float_of_js x1874)
             | "String" -> `String (Ojs.string_of_js x1874)
             | "Other" ->
                 `Other
                   (union3_of_js
                      (fun (x1875 : Ojs.t) -> Ojs.list_of_js t_of_js x1875)
                      BufferSource.t_of_js Date.t_0_of_js x1874)
             | _ -> assert false) x1872
    and t_to_js : t -> Ojs.t =
      fun
        (x1863 :
          [ `Number of float  | `String of string 
          | `Other of (t list, BufferSource.t, Date.t_0) union3 ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x1864 :
               [ `Number of float  | `String of string 
               | `Other of (t list, BufferSource.t, Date.t_0) union3 ])
             ->
             match x1864 with
             | `Number x1865 -> Ojs.float_to_js x1865
             | `String x1866 -> Ojs.string_to_js x1866
             | `Other x1867 ->
                 union3_to_js
                   (fun (x1868 : t list) -> Ojs.list_to_js t_to_js x1868)
                   BufferSource.t_to_js Date.t_0_to_js x1867) x1863
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1880 : Ojs.t) -> t_of_js x1880
    and t_0_to_js : t_0 -> Ojs.t = fun (x1879 : t) -> t_to_js x1879
  end
module IDBTransactionMode =
  struct
    type t =
      [ `L_s163_readonly  | `L_s164_readwrite  | `L_s209_versionchange ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1882 : Ojs.t) ->
        let x1883 = x1882 in
        match Ojs.string_of_js x1883 with
        | "readonly" -> `L_s163_readonly
        | "readwrite" -> `L_s164_readwrite
        | "versionchange" -> `L_s209_versionchange
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1881 :
          [ `L_s163_readonly  | `L_s164_readwrite  | `L_s209_versionchange ])
        ->
        match x1881 with
        | `L_s163_readonly -> Ojs.string_to_js "readonly"
        | `L_s164_readwrite -> Ojs.string_to_js "readwrite"
        | `L_s209_versionchange -> Ojs.string_to_js "versionchange"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1885 : Ojs.t) -> t_of_js x1885
    and t_0_to_js : t_0 -> Ojs.t = fun (x1884 : t) -> t_to_js x1884
  end
module IDBTransactionDurability =
  struct
    type t = [ `L_s170_relaxed  | `L_s189_strict  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1887 : Ojs.t) ->
        let x1888 = x1887 in
        match Ojs.string_of_js x1888 with
        | "relaxed" -> `L_s170_relaxed
        | "strict" -> `L_s189_strict
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1886 : [ `L_s170_relaxed  | `L_s189_strict  | `L_s57_default ])
        ->
        match x1886 with
        | `L_s170_relaxed -> Ojs.string_to_js "relaxed"
        | `L_s189_strict -> Ojs.string_to_js "strict"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1890 : Ojs.t) -> t_of_js x1890
    and t_0_to_js : t_0 -> Ojs.t = fun (x1889 : t) -> t_to_js x1889
  end
module IDBRequestReadyState =
  struct
    type t = [ `L_s149_pending  | `L_s64_done ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1892 : Ojs.t) ->
        let x1893 = x1892 in
        match Ojs.string_of_js x1893 with
        | "pending" -> `L_s149_pending
        | "done" -> `L_s64_done
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1891 : [ `L_s149_pending  | `L_s64_done ]) ->
        match x1891 with
        | `L_s149_pending -> Ojs.string_to_js "pending"
        | `L_s64_done -> Ojs.string_to_js "done"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1895 : Ojs.t) -> t_of_js x1895
    and t_0_to_js : t_0 -> Ojs.t = fun (x1894 : t) -> t_to_js x1894
  end
module IDBKeyRange =
  struct
    type t = [ `IDBKeyRange ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1897 : Ojs.t) -> t_of_js x1897
    and t_0_to_js : t_0 -> Ojs.t = fun (x1896 : t) -> t_to_js x1896
    type tags = [ `IDBKeyRange ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1900 : Ojs.t) -> intf_of_js __tags_of_js x1900
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1898 : __tags intf) -> intf_to_js __tags_to_js x1898
    let (get_lower : 'tags this -> any) =
      fun (x1902 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1902) "lower")
    let (get_lowerOpen : 'tags this -> bool) =
      fun (x1904 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1904) "lowerOpen")
    let (get_upper : 'tags this -> any) =
      fun (x1906 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1906) "upper")
    let (get_upperOpen : 'tags this -> bool) =
      fun (x1908 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1908) "upperOpen")
    let (includes : 'tags this -> key:any -> bool) =
      fun (x1911 : 'tags this) ->
        fun ~key:(x1910 : any) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1911) "includes"
               [|(any_to_js x1910)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") [||])
    let (bound :
      lower:any ->
        upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t)
      =
      fun ~lower:(x1913 : any) ->
        fun ~upper:(x1914 : any) ->
          fun ?lowerOpen:(x1915 : bool option) ->
            fun ?upperOpen:(x1916 : bool option) ->
              fun () ->
                t_of_js
                  (let x1920 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
                   Ojs.call (Ojs.get_prop_ascii x1920 "bound") "apply"
                     [|x1920;((let x1917 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1917 "push" [|(any_to_js x1913)|]);
                               ignore
                                 (Ojs.call x1917 "push" [|(any_to_js x1914)|]);
                               (match x1915 with
                                | Some x1919 ->
                                    ignore
                                      (Ojs.call x1917 "push"
                                         [|(Ojs.bool_to_js x1919)|])
                                | None -> ());
                               (match x1916 with
                                | Some x1918 ->
                                    ignore
                                      (Ojs.call x1917 "push"
                                         [|(Ojs.bool_to_js x1918)|])
                                | None -> ());
                               x1917))|])
    let (lowerBound : lower:any -> ?open_:bool -> unit -> t) =
      fun ~lower:(x1921 : any) ->
        fun ?open_:(x1922 : bool option) ->
          fun () ->
            t_of_js
              (let x1925 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1925 "lowerBound") "apply"
                 [|x1925;((let x1923 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1923 "push" [|(any_to_js x1921)|]);
                           (match x1922 with
                            | Some x1924 ->
                                ignore
                                  (Ojs.call x1923 "push"
                                     [|(Ojs.bool_to_js x1924)|])
                            | None -> ());
                           x1923))|])
    let (only : any -> t) =
      fun (x1926 : any) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") "only"
             [|(any_to_js x1926)|])
    let (upperBound : upper:any -> ?open_:bool -> unit -> t) =
      fun ~upper:(x1927 : any) ->
        fun ?open_:(x1928 : bool option) ->
          fun () ->
            t_of_js
              (let x1931 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1931 "upperBound") "apply"
                 [|x1931;((let x1929 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1929 "push" [|(any_to_js x1927)|]);
                           (match x1928 with
                            | Some x1930 ->
                                ignore
                                  (Ojs.call x1929 "push"
                                     [|(Ojs.bool_to_js x1930)|])
                            | None -> ());
                           x1929))|])
  end
module IDBCursorDirection =
  struct
    type t =
      [ `L_s123_next  | `L_s124_nextunique  | `L_s155_prev 
      | `L_s156_prevunique ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1933 : Ojs.t) ->
        let x1934 = x1933 in
        match Ojs.string_of_js x1934 with
        | "next" -> `L_s123_next
        | "nextunique" -> `L_s124_nextunique
        | "prev" -> `L_s155_prev
        | "prevunique" -> `L_s156_prevunique
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1932 :
          [ `L_s123_next  | `L_s124_nextunique  | `L_s155_prev 
          | `L_s156_prevunique ])
        ->
        match x1932 with
        | `L_s123_next -> Ojs.string_to_js "next"
        | `L_s124_nextunique -> Ojs.string_to_js "nextunique"
        | `L_s155_prev -> Ojs.string_to_js "prev"
        | `L_s156_prevunique -> Ojs.string_to_js "prevunique"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1936 : Ojs.t) -> t_of_js x1936
    and t_0_to_js : t_0 -> Ojs.t = fun (x1935 : t) -> t_to_js x1935
  end
module DOMStringList =
  struct
    type t =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1938 : Ojs.t) -> t_of_js x1938
    and t_0_to_js : t_0 -> Ojs.t = fun (x1937 : t) -> t_to_js x1937
    type tags =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1941 : Ojs.t) -> intf_of_js __tags_of_js x1941
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1939 : __tags intf) -> intf_to_js __tags_to_js x1939
    let (get_length : 'tags this -> float) =
      fun (x1943 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1943) "length")
    let (contains : 'tags this -> string:string -> bool) =
      fun (x1946 : 'tags this) ->
        fun ~string:(x1945 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1946) "contains"
               [|(Ojs.string_to_js x1945)|])
    let (item : 'tags this -> index:float -> string option) =
      fun (x1949 : 'tags this) ->
        fun ~index:(x1948 : float) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x1949) "item"
               [|(Ojs.float_to_js x1948)|])
    let (get : 'tags this -> float -> string) =
      fun (x1952 : 'tags this) ->
        fun (x1954 : float) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x1952)
               (Ojs.float_to_js x1954))
    let (set : 'tags this -> float -> string -> unit) =
      fun (x1955 : 'tags this) ->
        fun (x1957 : float) ->
          fun (x1958 : string) ->
            Ojs.set_prop (this_to_js Obj.magic x1955) (Ojs.float_to_js x1957)
              (Ojs.string_to_js x1958)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMStringList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "DOMStringList") [||])
  end
module DOMException =
  struct
    type t = [ `DOMException ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1960 : Ojs.t) -> t_of_js x1960
    and t_0_to_js : t_0 -> Ojs.t = fun (x1959 : t) -> t_to_js x1959
    type tags = [ `DOMException ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x1963 : Ojs.t) -> intf_of_js __tags_of_js x1963
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x1961 : __tags intf) -> intf_to_js __tags_to_js x1961
    let (get_code : 'tags this -> float) =
      fun (x1965 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1965) "code")
    let (get_message : 'tags this -> string) =
      fun (x1967 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1967) "message")
    let (get_name : 'tags this -> string) =
      fun (x1969 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1969) "name")
    let (get_ABORT_ERR : 'tags this -> float) =
      fun (x1971 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1971) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : 'tags this -> float) =
      fun (x1973 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1973) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : 'tags this -> float) =
      fun (x1975 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1975)
             "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : 'tags this -> float) =
      fun (x1977 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1977)
             "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : 'tags this -> float) =
      fun (x1979 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1979) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : 'tags this -> float) =
      fun (x1981 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1981)
             "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : 'tags this -> float) =
      fun (x1983 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1983)
             "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : 'tags this -> float) =
      fun (x1985 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1985)
             "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : 'tags this -> float) =
      fun (x1987 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1987)
             "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : 'tags this -> float) =
      fun (x1989 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1989)
             "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : 'tags this -> float) =
      fun (x1991 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1991)
             "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : 'tags this -> float) =
      fun (x1993 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1993) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : 'tags this -> float) =
      fun (x1995 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1995) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : 'tags this -> float) =
      fun (x1997 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1997) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : 'tags this -> float) =
      fun (x1999 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1999)
             "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : 'tags this -> float) =
      fun (x2001 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2001)
             "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float) =
      fun (x2003 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2003)
             "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : 'tags this -> float) =
      fun (x2005 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2005)
             "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : 'tags this -> float) =
      fun (x2007 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2007) "SECURITY_ERR")
    let (get_SYNTAX_ERR : 'tags this -> float) =
      fun (x2009 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2009) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : 'tags this -> float) =
      fun (x2011 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2011) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : 'tags this -> float) =
      fun (x2013 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2013)
             "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : 'tags this -> float) =
      fun (x2015 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2015) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : 'tags this -> float) =
      fun (x2017 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2017) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : 'tags this -> float) =
      fun (x2019 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2019)
             "WRONG_DOCUMENT_ERR")
    let (create :
      code:float ->
        message:string ->
          name:string ->
            abort_err:float ->
              data_clone_err:float ->
                domstring_size_err:float ->
                  hierarchy_request_err:float ->
                    index_size_err:float ->
                      inuse_attribute_err:float ->
                        invalid_access_err:float ->
                          invalid_character_err:float ->
                            invalid_modification_err:float ->
                              invalid_node_type_err:float ->
                                invalid_state_err:float ->
                                  namespace_err:float ->
                                    network_err:float ->
                                      not_found_err:float ->
                                        not_supported_err:float ->
                                          no_data_allowed_err:float ->
                                            no_modification_allowed_err:float
                                              ->
                                              quota_exceeded_err:float ->
                                                security_err:float ->
                                                  syntax_err:float ->
                                                    timeout_err:float ->
                                                      type_mismatch_err:float
                                                        ->
                                                        url_mismatch_err:float
                                                          ->
                                                          validation_err:float
                                                            ->
                                                            wrong_document_err:float
                                                              -> unit -> t)
      =
      fun ~code:(x2021 : float) ->
        fun ~message:(x2022 : string) ->
          fun ~name:(x2023 : string) ->
            fun ~abort_err:(x2024 : float) ->
              fun ~data_clone_err:(x2025 : float) ->
                fun ~domstring_size_err:(x2026 : float) ->
                  fun ~hierarchy_request_err:(x2027 : float) ->
                    fun ~index_size_err:(x2028 : float) ->
                      fun ~inuse_attribute_err:(x2029 : float) ->
                        fun ~invalid_access_err:(x2030 : float) ->
                          fun ~invalid_character_err:(x2031 : float) ->
                            fun ~invalid_modification_err:(x2032 : float) ->
                              fun ~invalid_node_type_err:(x2033 : float) ->
                                fun ~invalid_state_err:(x2034 : float) ->
                                  fun ~namespace_err:(x2035 : float) ->
                                    fun ~network_err:(x2036 : float) ->
                                      fun ~not_found_err:(x2037 : float) ->
                                        fun
                                          ~not_supported_err:(x2038 : float)
                                          ->
                                          fun
                                            ~no_data_allowed_err:(x2039 :
                                                                   float)
                                            ->
                                            fun
                                              ~no_modification_allowed_err:
                                              (x2040 : float) ->
                                              fun
                                                ~quota_exceeded_err:(x2041 :
                                                                    float)
                                                ->
                                                fun
                                                  ~security_err:(x2042 :
                                                                  float)
                                                  ->
                                                  fun
                                                    ~syntax_err:(x2043 :
                                                                  float)
                                                    ->
                                                    fun
                                                      ~timeout_err:(x2044 :
                                                                    float)
                                                      ->
                                                      fun
                                                        ~type_mismatch_err:
                                                        (x2045 : float) ->
                                                        fun
                                                          ~url_mismatch_err:
                                                          (x2046 : float) ->
                                                          fun
                                                            ~validation_err:
                                                            (x2047 : 
                                                              float)
                                                            ->
                                                            fun
                                                              ~wrong_document_err:
                                                              (x2048 : 
                                                                float)
                                                              ->
                                                              fun () ->
                                                                let x2049 =
                                                                  Ojs.empty_obj
                                                                    () in
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "code"
                                                                  (Ojs.float_to_js
                                                                    x2021);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "message"
                                                                  (Ojs.string_to_js
                                                                    x2022);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "name"
                                                                  (Ojs.string_to_js
                                                                    x2023);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "ABORT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2024);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "DATA_CLONE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2025);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "DOMSTRING_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2026);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "HIERARCHY_REQUEST_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2027);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "INDEX_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2028);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "INUSE_ATTRIBUTE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2029);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "INVALID_ACCESS_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2030);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "INVALID_CHARACTER_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2031);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "INVALID_MODIFICATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2032);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "INVALID_NODE_TYPE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2033);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "INVALID_STATE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2034);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "NAMESPACE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2035);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "NETWORK_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2036);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "NOT_FOUND_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2037);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "NOT_SUPPORTED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2038);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "NO_DATA_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2039);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "NO_MODIFICATION_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2040);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "QUOTA_EXCEEDED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2041);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "SECURITY_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2042);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "SYNTAX_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2043);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "TIMEOUT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2044);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "TYPE_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2045);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "URL_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2046);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "VALIDATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2047);
                                                                Ojs.set_prop_ascii
                                                                  x2049
                                                                  "WRONG_DOCUMENT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x2048);
                                                                t_of_js x2049
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "prototype")
    let (create' : ?message:string -> ?name:string -> unit -> t) =
      fun ?message:(x2050 : string option) ->
        fun ?name:(x2051 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMException")
                 (let x2052 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x2050 with
                   | Some x2054 ->
                       ignore
                         (Ojs.call x2052 "push" [|(Ojs.string_to_js x2054)|])
                   | None -> ());
                  (match x2051 with
                   | Some x2053 ->
                       ignore
                         (Ojs.call x2052 "push" [|(Ojs.string_to_js x2053)|])
                   | None -> ());
                  x2052))
    let (abort_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "ABORT_ERR")
    let (data_clone_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DATA_CLONE_ERR")
    let (domstring_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DOMSTRING_SIZE_ERR")
    let (hierarchy_request_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "HIERARCHY_REQUEST_ERR")
    let (index_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INDEX_SIZE_ERR")
    let (inuse_attribute_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INUSE_ATTRIBUTE_ERR")
    let (invalid_access_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_ACCESS_ERR")
    let (invalid_character_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_CHARACTER_ERR")
    let (invalid_modification_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_MODIFICATION_ERR")
    let (invalid_node_type_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_NODE_TYPE_ERR")
    let (invalid_state_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_STATE_ERR")
    let (namespace_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NAMESPACE_ERR")
    let (network_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NETWORK_ERR")
    let (not_found_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_FOUND_ERR")
    let (not_supported_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_SUPPORTED_ERR")
    let (no_data_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_DATA_ALLOWED_ERR")
    let (no_modification_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_MODIFICATION_ALLOWED_ERR")
    let (quota_exceeded_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "QUOTA_EXCEEDED_ERR")
    let (security_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SECURITY_ERR")
    let (syntax_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SYNTAX_ERR")
    let (timeout_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TIMEOUT_ERR")
    let (type_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TYPE_MISMATCH_ERR")
    let (url_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "URL_MISMATCH_ERR")
    let (validation_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "VALIDATION_ERR")
    let (wrong_document_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "WRONG_DOCUMENT_ERR")
  end
module rec
  IDBCursor:sig
              type t = [ `IDBCursor ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `IDBCursor ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `IDBCursor ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_direction : 'tags this -> IDBCursorDirection.t
              val get_key : 'tags this -> IDBValidKey.t
              val get_primaryKey : 'tags this -> IDBValidKey.t
              val get_request : 'tags this -> IDBRequest.t_0
              val get_source :
                'tags this -> (IDBIndex.t, IDBObjectStore.t) union2
              val advance : 'tags this -> count:float -> unit
              val continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit
              val continuePrimaryKey :
                'tags this ->
                  key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit
              val delete : 'tags this -> undefined IDBRequest.t
              val update :
                'tags this -> value:any -> IDBValidKey.t IDBRequest.t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `IDBCursor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2056 : Ojs.t) -> t_of_js x2056
    and t_0_to_js : t_0 -> Ojs.t = fun (x2055 : t) -> t_to_js x2055
    type tags = [ `IDBCursor ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2059 : Ojs.t) -> intf_of_js __tags_of_js x2059
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2057 : __tags intf) -> intf_to_js __tags_to_js x2057
    let (get_direction : 'tags this -> IDBCursorDirection.t) =
      fun (x2061 : 'tags this) ->
        IDBCursorDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2061) "direction")
    let (get_key : 'tags this -> IDBValidKey.t) =
      fun (x2063 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2063) "key")
    let (get_primaryKey : 'tags this -> IDBValidKey.t) =
      fun (x2065 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2065) "primaryKey")
    let (get_request : 'tags this -> IDBRequest.t_0) =
      fun (x2067 : 'tags this) ->
        IDBRequest.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2067) "request")
    let (get_source : 'tags this -> (IDBIndex.t, IDBObjectStore.t) union2) =
      fun (x2069 : 'tags this) ->
        union2_of_js IDBIndex.t_of_js IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2069) "source")
    let (advance : 'tags this -> count:float -> unit) =
      fun (x2074 : 'tags this) ->
        fun ~count:(x2073 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x2074) "advance"
               [|(Ojs.float_to_js x2073)|])
    let (continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit) =
      fun (x2079 : 'tags this) ->
        fun ?key:(x2076 : IDBValidKey.t option) ->
          fun () ->
            ignore
              (let x2081 = this_to_js Obj.magic x2079 in
               Ojs.call (Ojs.get_prop_ascii x2081 "continue") "apply"
                 [|x2081;((let x2077 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2076 with
                            | Some x2078 ->
                                ignore
                                  (Ojs.call x2077 "push"
                                     [|(IDBValidKey.t_to_js x2078)|])
                            | None -> ());
                           x2077))|])
    let (continuePrimaryKey :
      'tags this -> key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit) =
      fun (x2084 : 'tags this) ->
        fun ~key:(x2082 : IDBValidKey.t) ->
          fun ~primaryKey:(x2083 : IDBValidKey.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x2084) "continuePrimaryKey"
                 [|(IDBValidKey.t_to_js x2082);(IDBValidKey.t_to_js x2083)|])
    let (delete : 'tags this -> undefined IDBRequest.t) =
      fun (x2086 : 'tags this) ->
        IDBRequest.t_of_js undefined_of_js
          (Ojs.call (this_to_js Obj.magic x2086) "delete" [||])
    let (update : 'tags this -> value:any -> IDBValidKey.t IDBRequest.t) =
      fun (x2090 : 'tags this) ->
        fun ~value:(x2089 : any) ->
          IDBRequest.t_of_js IDBValidKey.t_of_js
            (Ojs.call (this_to_js Obj.magic x2090) "update"
               [|(any_to_js x2089)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBCursor")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursor") [||])
  end
 and
  IDBCursorWithValue:sig
                       type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `IDBCursorWithValue ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_value : 'tags this -> any
                       val create : value:any -> unit -> t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create' : unit -> t
                     end =
  struct
    type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2094 : Ojs.t) -> t_of_js x2094
    and t_0_to_js : t_0 -> Ojs.t = fun (x2093 : t) -> t_to_js x2093
    type tags = [ `IDBCursor  | `IDBCursorWithValue ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursorWithValue ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2097 : Ojs.t) -> intf_of_js __tags_of_js x2097
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2095 : __tags intf) -> intf_to_js __tags_to_js x2095
    let (get_value : 'tags this -> any) =
      fun (x2099 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x2099) "value")
    let (create : value:any -> unit -> t) =
      fun ~value:(x2101 : any) ->
        fun () ->
          let x2102 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2102 "value" (any_to_js x2101); t_of_js x2102
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue")
             [||])
  end and
       IDBDatabase:sig
                     type t = [ `EventTarget  | `IDBDatabase ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `EventTarget  | `IDBDatabase ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `EventTarget  | `IDBDatabase ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `IDBDatabase ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val transaction :
                       'tags this ->
                         storeNames:[ `U1 of string 
                                    | `U2 of string Iterable.t_1 ]
                           ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val get_name : 'tags this -> string
                     val get_objectStoreNames : 'tags this -> DOMStringList.t
                     val get_onabort :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onabort :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onclose :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onclose :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onerror :
                       'tags this -> (this:t -> ev:Event.t -> any) option
                     val set_onerror :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) option -> unit
                     val get_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any) option
                     val set_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any) option
                           -> unit
                     val get_version : 'tags this -> float
                     val close : 'tags this -> unit
                     val createObjectStore :
                       'tags this ->
                         name:string ->
                           ?options:IDBObjectStoreParameters.t ->
                             unit -> IDBObjectStore.t
                     val deleteObjectStore :
                       'tags this -> name:string -> unit
                     val transaction' :
                       'tags this ->
                         storeNames:[ `U1 of string  | `U2 of string list ]
                           ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:[ `U1 of bool 
                                      | `U2 of AddEventListenerOptions.t ]
                               -> unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:[ `U1 of bool 
                                      | `U2 of AddEventListenerOptions.t ]
                               -> unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:[ `U1 of bool 
                                      | `U2 of EventListenerOptions.t ]
                               -> unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:[ `U1 of bool 
                                      | `U2 of EventListenerOptions.t ]
                               -> unit -> unit
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
       struct
         type t = [ `EventTarget  | `IDBDatabase ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x2104 : Ojs.t) -> t_of_js x2104
         and t_0_to_js : t_0 -> Ojs.t = fun (x2103 : t) -> t_to_js x2103
         type tags = [ `EventTarget  | `IDBDatabase ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabase ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           =
           fun (type __tags) ->
             fun (__tags_of_js : Ojs.t -> __tags) ->
               fun (x2107 : Ojs.t) -> intf_of_js __tags_of_js x2107
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
             fun (__tags_to_js : __tags -> Ojs.t) ->
               fun (x2105 : __tags intf) -> intf_to_js __tags_to_js x2105
         let (transaction :
           'tags this ->
             storeNames:[ `U1 of string  | `U2 of string Iterable.t_1 ] ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x2116 : 'tags this) ->
             fun
               ~storeNames:(x2109 :
                             [ `U1 of string  | `U2 of string Iterable.t_1 ])
               ->
               fun ?mode:(x2110 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x2118 = this_to_js Obj.magic x2116 in
                      Ojs.call (Ojs.get_prop_ascii x2118 "transaction")
                        "apply"
                        [|x2118;((let x2111 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x2111 "push"
                                       [|((match x2109 with
                                           | `U1 x2113 ->
                                               Ojs.string_to_js x2113
                                           | `U2 x2114 ->
                                               Iterable.t_1_to_js
                                                 Ojs.string_to_js x2114))|]);
                                  (match x2110 with
                                   | Some x2112 ->
                                       ignore
                                         (Ojs.call x2111 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x2112)|])
                                   | None -> ());
                                  x2111))|])
         let (get_name : 'tags this -> string) =
           fun (x2119 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2119) "name")
         let (get_objectStoreNames : 'tags this -> DOMStringList.t) =
           fun (x2121 : 'tags this) ->
             DOMStringList.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2121)
                  "objectStoreNames")
         let (get_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x2123 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2125 : Ojs.t) ->
                  fun ~this:(x2126 : t) ->
                    fun ~ev:(x2127 : Event.t) ->
                      any_of_js
                        (Ojs.apply x2125
                           [|(t_to_js x2126);(Event.t_to_js x2127)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2123) "onabort")
         let (set_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x2128 : 'tags this) ->
             fun (x2129 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2128) "onabort"
                 (Ojs.option_to_js
                    (fun (x2130 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x2131 : Ojs.t) ->
                            fun (x2132 : Ojs.t) ->
                              any_to_js
                                (x2130 ~this:(t_of_js x2131)
                                   ~ev:(Event.t_of_js x2132)))) x2129)
         let (get_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x2134 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2136 : Ojs.t) ->
                  fun ~this:(x2137 : t) ->
                    fun ~ev:(x2138 : Event.t) ->
                      any_of_js
                        (Ojs.apply x2136
                           [|(t_to_js x2137);(Event.t_to_js x2138)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2134) "onclose")
         let (set_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x2139 : 'tags this) ->
             fun (x2140 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2139) "onclose"
                 (Ojs.option_to_js
                    (fun (x2141 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x2142 : Ojs.t) ->
                            fun (x2143 : Ojs.t) ->
                              any_to_js
                                (x2141 ~this:(t_of_js x2142)
                                   ~ev:(Event.t_of_js x2143)))) x2140)
         let (get_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) option) =
           fun (x2145 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2147 : Ojs.t) ->
                  fun ~this:(x2148 : t) ->
                    fun ~ev:(x2149 : Event.t) ->
                      any_of_js
                        (Ojs.apply x2147
                           [|(t_to_js x2148);(Event.t_to_js x2149)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2145) "onerror")
         let (set_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
           fun (x2150 : 'tags this) ->
             fun (x2151 : (this:t -> ev:Event.t -> any) option) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2150) "onerror"
                 (Ojs.option_to_js
                    (fun (x2152 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x2153 : Ojs.t) ->
                            fun (x2154 : Ojs.t) ->
                              any_to_js
                                (x2152 ~this:(t_of_js x2153)
                                   ~ev:(Event.t_of_js x2154)))) x2151)
         let (get_onversionchange :
           'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option)
           =
           fun (x2156 : 'tags this) ->
             Ojs.option_of_js
               (fun (x2158 : Ojs.t) ->
                  fun ~this:(x2159 : t) ->
                    fun ~ev:(x2160 : IDBVersionChangeEvent.t) ->
                      any_of_js
                        (Ojs.apply x2158
                           [|(t_to_js x2159);(IDBVersionChangeEvent.t_to_js
                                                x2160)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2156)
                  "onversionchange")
         let (set_onversionchange :
           'tags this ->
             (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit)
           =
           fun (x2161 : 'tags this) ->
             fun
               (x2162 : (this:t -> ev:IDBVersionChangeEvent.t -> any) option)
               ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x2161)
                 "onversionchange"
                 (Ojs.option_to_js
                    (fun
                       (x2163 : this:t -> ev:IDBVersionChangeEvent.t -> any)
                       ->
                       Ojs.fun_to_js 2
                         (fun (x2164 : Ojs.t) ->
                            fun (x2165 : Ojs.t) ->
                              any_to_js
                                (x2163 ~this:(t_of_js x2164)
                                   ~ev:(IDBVersionChangeEvent.t_of_js x2165))))
                    x2162)
         let (get_version : 'tags this -> float) =
           fun (x2167 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x2167) "version")
         let (close : 'tags this -> unit) =
           fun (x2169 : 'tags this) ->
             ignore (Ojs.call (this_to_js Obj.magic x2169) "close" [||])
         let (createObjectStore :
           'tags this ->
             name:string ->
               ?options:IDBObjectStoreParameters.t ->
                 unit -> IDBObjectStore.t)
           =
           fun (x2175 : 'tags this) ->
             fun ~name:(x2171 : string) ->
               fun ?options:(x2172 : IDBObjectStoreParameters.t option) ->
                 fun () ->
                   IDBObjectStore.t_of_js
                     (let x2177 = this_to_js Obj.magic x2175 in
                      Ojs.call (Ojs.get_prop_ascii x2177 "createObjectStore")
                        "apply"
                        [|x2177;((let x2173 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x2173 "push"
                                       [|(Ojs.string_to_js x2171)|]);
                                  (match x2172 with
                                   | Some x2174 ->
                                       ignore
                                         (Ojs.call x2173 "push"
                                            [|(IDBObjectStoreParameters.t_to_js
                                                 x2174)|])
                                   | None -> ());
                                  x2173))|])
         let (deleteObjectStore : 'tags this -> name:string -> unit) =
           fun (x2179 : 'tags this) ->
             fun ~name:(x2178 : string) ->
               ignore
                 (Ojs.call (this_to_js Obj.magic x2179) "deleteObjectStore"
                    [|(Ojs.string_to_js x2178)|])
         let (transaction' :
           'tags this ->
             storeNames:[ `U1 of string  | `U2 of string list ] ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x2188 : 'tags this) ->
             fun
               ~storeNames:(x2181 : [ `U1 of string  | `U2 of string list ])
               ->
               fun ?mode:(x2182 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x2190 = this_to_js Obj.magic x2188 in
                      Ojs.call (Ojs.get_prop_ascii x2190 "transaction")
                        "apply"
                        [|x2190;((let x2183 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x2183 "push"
                                       [|((match x2181 with
                                           | `U1 x2185 ->
                                               Ojs.string_to_js x2185
                                           | `U2 x2186 ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x2186))|]);
                                  (match x2182 with
                                   | Some x2184 ->
                                       ignore
                                         (Ojs.call x2183 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x2184)|])
                                   | None -> ());
                                  x2183))|])
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x2200 : 'tags this) ->
             fun ~type_:(x2191 : 'K) ->
               fun ~listener:(x2192 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x2193 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2202 = this_to_js Obj.magic x2200 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2202 "addEventListener")
                          "apply"
                          [|x2202;((let x2194 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2194 "push"
                                         [|(Obj.magic x2191)|]);
                                    ignore
                                      (Ojs.call x2194 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x2198 : Ojs.t) ->
                                                 fun (x2199 : Ojs.t) ->
                                                   any_to_js
                                                     (x2192
                                                        ~this:(t_of_js x2198)
                                                        ~ev:(any_of_js x2199))))|]);
                                    (match x2193 with
                                     | Some x2195 ->
                                         ignore
                                           (Ojs.call x2194 "push"
                                              [|((match x2195 with
                                                  | `U1 x2196 ->
                                                      Ojs.bool_to_js x2196
                                                  | `U2 x2197 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x2197))|])
                                     | None -> ());
                                    x2194))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x2210 : 'tags this) ->
             fun ~type_:(x2203 : string) ->
               fun ~listener:(x2204 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x2205 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2212 = this_to_js Obj.magic x2210 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2212 "addEventListener")
                          "apply"
                          [|x2212;((let x2206 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2206 "push"
                                         [|(Ojs.string_to_js x2203)|]);
                                    ignore
                                      (Ojs.call x2206 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x2204)|]);
                                    (match x2205 with
                                     | Some x2207 ->
                                         ignore
                                           (Ojs.call x2206 "push"
                                              [|((match x2207 with
                                                  | `U1 x2208 ->
                                                      Ojs.bool_to_js x2208
                                                  | `U2 x2209 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x2209))|])
                                     | None -> ());
                                    x2206))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x2222 : 'tags this) ->
             fun ~type_:(x2213 : 'K) ->
               fun ~listener:(x2214 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x2215 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2224 = this_to_js Obj.magic x2222 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2224 "removeEventListener")
                          "apply"
                          [|x2224;((let x2216 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2216 "push"
                                         [|(Obj.magic x2213)|]);
                                    ignore
                                      (Ojs.call x2216 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x2220 : Ojs.t) ->
                                                 fun (x2221 : Ojs.t) ->
                                                   any_to_js
                                                     (x2214
                                                        ~this:(t_of_js x2220)
                                                        ~ev:(any_of_js x2221))))|]);
                                    (match x2215 with
                                     | Some x2217 ->
                                         ignore
                                           (Ojs.call x2216 "push"
                                              [|((match x2217 with
                                                  | `U1 x2218 ->
                                                      Ojs.bool_to_js x2218
                                                  | `U2 x2219 ->
                                                      EventListenerOptions.t_to_js
                                                        x2219))|])
                                     | None -> ());
                                    x2216))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x2232 : 'tags this) ->
             fun ~type_:(x2225 : string) ->
               fun ~listener:(x2226 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x2227 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x2234 = this_to_js Obj.magic x2232 in
                        Ojs.call
                          (Ojs.get_prop_ascii x2234 "removeEventListener")
                          "apply"
                          [|x2234;((let x2228 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x2228 "push"
                                         [|(Ojs.string_to_js x2225)|]);
                                    ignore
                                      (Ojs.call x2228 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x2226)|]);
                                    (match x2227 with
                                     | Some x2229 ->
                                         ignore
                                           (Ojs.call x2228 "push"
                                              [|((match x2229 with
                                                  | `U1 x2230 ->
                                                      Ojs.bool_to_js x2230
                                                  | `U2 x2231 ->
                                                      EventListenerOptions.t_to_js
                                                        x2231))|])
                                     | None -> ());
                                    x2228))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "IDBDatabase") "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBDatabase")
                  [||])
       end and
            IDBIndex:sig
                       type t = [ `IDBIndex ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBIndex ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBIndex ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags = [> `IDBIndex ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_keyPath :
                         'tags this ->
                           [ `String of string  | `Other of string list ]
                             Primitive.t
                       val get_multiEntry : 'tags this -> bool
                       val get_name : 'tags this -> string
                       val set_name : 'tags this -> string -> unit
                       val get_objectStore : 'tags this -> IDBObjectStore.t
                       val get_unique : 'tags this -> bool
                       val count :
                         'tags this ->
                           ?query:[ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             -> unit -> float IDBRequest.t
                       val get_ :
                         'tags this ->
                           query:[ `U1 of IDBValidKey.t 
                                 | `U2 of IDBKeyRange.t ]
                             -> any IDBRequest.t
                       val getAll :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             -> ?count:float -> unit -> any list IDBRequest.t
                       val getAllKeys :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?count:float ->
                               unit -> IDBValidKey.t list IDBRequest.t
                       val getKey :
                         'tags this ->
                           query:[ `U1 of IDBValidKey.t 
                                 | `U2 of IDBKeyRange.t ]
                             -> IDBValidKey.t option IDBRequest.t
                       val openCursor :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?direction:IDBCursorDirection.t ->
                               unit ->
                                 IDBCursorWithValue.t option IDBRequest.t
                       val openKeyCursor :
                         'tags this ->
                           ?query:[ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ]
                             ->
                             ?direction:IDBCursorDirection.t ->
                               unit -> IDBCursor.t option IDBRequest.t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
            struct
              type t = [ `IDBIndex ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x2236 : Ojs.t) -> t_of_js x2236
              and t_0_to_js : t_0 -> Ojs.t = fun (x2235 : t) -> t_to_js x2235
              type tags = [ `IDBIndex ]
              type tags_0 = tags
              type 'tags this = 'tags intf constraint 'tags = [> `IDBIndex ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                fun (type __tags) ->
                  fun (__tags_of_js : Ojs.t -> __tags) ->
                    fun (x2239 : Ojs.t) -> intf_of_js __tags_of_js x2239
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                fun (type __tags) ->
                  fun (__tags_to_js : __tags -> Ojs.t) ->
                    fun (x2237 : __tags intf) ->
                      intf_to_js __tags_to_js x2237
              let (get_keyPath :
                'tags this ->
                  [ `String of string  | `Other of string list ] Primitive.t)
                =
                fun (x2241 : 'tags this) ->
                  Primitive.t_of_js
                    (fun (x2243 : Ojs.t) ->
                       let x2244 = x2243 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x2244 "dummy")
                       with
                       | "String" -> `String (Ojs.string_of_js x2244)
                       | "Other" ->
                           `Other (Ojs.list_of_js Ojs.string_of_js x2244)
                       | _ -> assert false)
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2241)
                       "keyPath")
              let (get_multiEntry : 'tags this -> bool) =
                fun (x2246 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2246)
                       "multiEntry")
              let (get_name : 'tags this -> string) =
                fun (x2248 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2248) "name")
              let (set_name : 'tags this -> string -> unit) =
                fun (x2250 : 'tags this) ->
                  fun (x2251 : string) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x2250) "name"
                      (Ojs.string_to_js x2251)
              let (get_objectStore : 'tags this -> IDBObjectStore.t) =
                fun (x2253 : 'tags this) ->
                  IDBObjectStore.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2253)
                       "objectStore")
              let (get_unique : 'tags this -> bool) =
                fun (x2255 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x2255) "unique")
              let (count :
                'tags this ->
                  ?query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    unit -> float IDBRequest.t)
                =
                fun (x2262 : 'tags this) ->
                  fun
                    ?query:(x2257 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                               option)
                    ->
                    fun () ->
                      IDBRequest.t_of_js Ojs.float_of_js
                        (let x2264 = this_to_js Obj.magic x2262 in
                         Ojs.call (Ojs.get_prop_ascii x2264 "count") "apply"
                           [|x2264;((let x2258 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x2257 with
                                      | Some x2259 ->
                                          ignore
                                            (Ojs.call x2258 "push"
                                               [|((match x2259 with
                                                   | `U1 x2260 ->
                                                       IDBValidKey.t_to_js
                                                         x2260
                                                   | `U2 x2261 ->
                                                       IDBKeyRange.t_to_js
                                                         x2261))|])
                                      | None -> ());
                                     x2258))|])
              let (get_ :
                'tags this ->
                  query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    any IDBRequest.t)
                =
                fun (x2269 : 'tags this) ->
                  fun
                    ~query:(x2266 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ])
                    ->
                    IDBRequest.t_of_js any_of_js
                      (Ojs.call (this_to_js Obj.magic x2269) "get"
                         [|((match x2266 with
                             | `U1 x2267 -> IDBValidKey.t_to_js x2267
                             | `U2 x2268 -> IDBKeyRange.t_to_js x2268))|])
              let (getAll :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    -> ?count:float -> unit -> any list IDBRequest.t)
                =
                fun (x2279 : 'tags this) ->
                  fun
                    ?query:(x2272 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?count:(x2273 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2282 : Ojs.t) ->
                             Ojs.list_of_js any_of_js x2282)
                          (let x2281 = this_to_js Obj.magic x2279 in
                           Ojs.call (Ojs.get_prop_ascii x2281 "getAll")
                             "apply"
                             [|x2281;((let x2274 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2272 with
                                        | Some x2276 ->
                                            ignore
                                              (Ojs.call x2274 "push"
                                                 [|((match x2276 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2277 ->
                                                         IDBValidKey.t_to_js
                                                           x2277
                                                     | `U2 x2278 ->
                                                         IDBKeyRange.t_to_js
                                                           x2278))|])
                                        | None -> ());
                                       (match x2273 with
                                        | Some x2275 ->
                                            ignore
                                              (Ojs.call x2274 "push"
                                                 [|(Ojs.float_to_js x2275)|])
                                        | None -> ());
                                       x2274))|])
              let (getAllKeys :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?count:float -> unit -> IDBValidKey.t list IDBRequest.t)
                =
                fun (x2291 : 'tags this) ->
                  fun
                    ?query:(x2284 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?count:(x2285 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2294 : Ojs.t) ->
                             Ojs.list_of_js IDBValidKey.t_of_js x2294)
                          (let x2293 = this_to_js Obj.magic x2291 in
                           Ojs.call (Ojs.get_prop_ascii x2293 "getAllKeys")
                             "apply"
                             [|x2293;((let x2286 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2284 with
                                        | Some x2288 ->
                                            ignore
                                              (Ojs.call x2286 "push"
                                                 [|((match x2288 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2289 ->
                                                         IDBValidKey.t_to_js
                                                           x2289
                                                     | `U2 x2290 ->
                                                         IDBKeyRange.t_to_js
                                                           x2290))|])
                                        | None -> ());
                                       (match x2285 with
                                        | Some x2287 ->
                                            ignore
                                              (Ojs.call x2286 "push"
                                                 [|(Ojs.float_to_js x2287)|])
                                        | None -> ());
                                       x2286))|])
              let (getKey :
                'tags this ->
                  query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ] ->
                    IDBValidKey.t option IDBRequest.t)
                =
                fun (x2299 : 'tags this) ->
                  fun
                    ~query:(x2296 :
                             [ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ])
                    ->
                    IDBRequest.t_of_js
                      (fun (x2301 : Ojs.t) ->
                         Ojs.option_of_js IDBValidKey.t_of_js x2301)
                      (Ojs.call (this_to_js Obj.magic x2299) "getKey"
                         [|((match x2296 with
                             | `U1 x2297 -> IDBValidKey.t_to_js x2297
                             | `U2 x2298 -> IDBKeyRange.t_to_js x2298))|])
              let (openCursor :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursorWithValue.t option IDBRequest.t)
                =
                fun (x2310 : 'tags this) ->
                  fun
                    ?query:(x2303 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?direction:(x2304 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2313 : Ojs.t) ->
                             Ojs.option_of_js IDBCursorWithValue.t_of_js
                               x2313)
                          (let x2312 = this_to_js Obj.magic x2310 in
                           Ojs.call (Ojs.get_prop_ascii x2312 "openCursor")
                             "apply"
                             [|x2312;((let x2305 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2303 with
                                        | Some x2307 ->
                                            ignore
                                              (Ojs.call x2305 "push"
                                                 [|((match x2307 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2308 ->
                                                         IDBValidKey.t_to_js
                                                           x2308
                                                     | `U2 x2309 ->
                                                         IDBKeyRange.t_to_js
                                                           x2309))|])
                                        | None -> ());
                                       (match x2304 with
                                        | Some x2306 ->
                                            ignore
                                              (Ojs.call x2305 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x2306)|])
                                        | None -> ());
                                       x2305))|])
              let (openKeyCursor :
                'tags this ->
                  ?query:[ `Null  | `U1 of IDBValidKey.t 
                         | `U2 of IDBKeyRange.t ]
                    ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursor.t option IDBRequest.t)
                =
                fun (x2322 : 'tags this) ->
                  fun
                    ?query:(x2315 :
                             [ `Null  | `U1 of IDBValidKey.t 
                             | `U2 of IDBKeyRange.t ] option)
                    ->
                    fun ?direction:(x2316 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x2325 : Ojs.t) ->
                             Ojs.option_of_js IDBCursor.t_of_js x2325)
                          (let x2324 = this_to_js Obj.magic x2322 in
                           Ojs.call
                             (Ojs.get_prop_ascii x2324 "openKeyCursor")
                             "apply"
                             [|x2324;((let x2317 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x2315 with
                                        | Some x2319 ->
                                            ignore
                                              (Ojs.call x2317 "push"
                                                 [|((match x2319 with
                                                     | `Null -> Ojs.null
                                                     | `U1 x2320 ->
                                                         IDBValidKey.t_to_js
                                                           x2320
                                                     | `U2 x2321 ->
                                                         IDBKeyRange.t_to_js
                                                           x2321))|])
                                        | None -> ());
                                       (match x2316 with
                                        | Some x2318 ->
                                            ignore
                                              (Ojs.call x2317 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x2318)|])
                                        | None -> ());
                                       x2317))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "IDBIndex") "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBIndex")
                       [||])
            end and
                 IDBObjectStore:sig
                                  type t = [ `IDBObjectStore ] intf
                                  type t_0 = t
                                  [@@@js.stop ]
                                  type tags = [ `IDBObjectStore ]
                                  type tags_0 = tags
                                  [@@@js.start ]
                                  [@@@js.implem
                                    type tags = [ `IDBObjectStore ]
                                    type tags_0 = tags]
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `IDBObjectStore ]
                                  val t_to_js : t -> Ojs.t
                                  val t_of_js : Ojs.t -> t
                                  val t_0_to_js : t_0 -> Ojs.t
                                  val t_0_of_js : Ojs.t -> t_0
                                  val createIndex :
                                    'tags this ->
                                      name:string ->
                                        keyPath:[ `U1 of string 
                                                | `U2 of string Iterable.t_1 ]
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val get_autoIncrement : 'tags this -> bool
                                  val get_indexNames :
                                    'tags this -> DOMStringList.t
                                  val get_keyPath :
                                    'tags this ->
                                      [ `String of string 
                                      | `Other of string list ] Primitive.t
                                  val get_name : 'tags this -> string
                                  val set_name : 'tags this -> string -> unit
                                  val get_transaction :
                                    'tags this -> IDBTransaction.t
                                  val add :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val clear :
                                    'tags this -> undefined IDBRequest.t
                                  val count :
                                    'tags this ->
                                      ?query:[ `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        -> unit -> float IDBRequest.t
                                  val createIndex' :
                                    'tags this ->
                                      name:string ->
                                        keyPath:[ `U1 of string 
                                                | `U2 of string list ]
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val delete :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> undefined IDBRequest.t
                                  val deleteIndex :
                                    'tags this -> name:string -> unit
                                  val get_ :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> any IDBRequest.t
                                  val getAll :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?count:float ->
                                          unit -> any list IDBRequest.t
                                  val getAllKeys :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?count:float ->
                                          unit ->
                                            IDBValidKey.t list IDBRequest.t
                                  val getKey :
                                    'tags this ->
                                      query:[ `U1 of IDBValidKey.t 
                                            | `U2 of IDBKeyRange.t ]
                                        -> IDBValidKey.t option IDBRequest.t
                                  val index :
                                    'tags this -> name:string -> IDBIndex.t
                                  val openCursor :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursorWithValue.t option
                                              IDBRequest.t
                                  val openKeyCursor :
                                    'tags this ->
                                      ?query:[ `Null  | `U1 of IDBValidKey.t 
                                             | `U2 of IDBKeyRange.t ]
                                        ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursor.t option IDBRequest.t
                                  val put :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val cast_from : 'tags this -> t
                                  val prototype : unit -> t
                                  val create : unit -> t
                                end =
                 struct
                   type t = [ `IDBObjectStore ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x2328 : Ojs.t) -> t_of_js x2328
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x2327 : t) -> t_to_js x2327
                   type tags = [ `IDBObjectStore ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `IDBObjectStore ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                     fun (type __tags) ->
                       fun (__tags_of_js : Ojs.t -> __tags) ->
                         fun (x2331 : Ojs.t) -> intf_of_js __tags_of_js x2331
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                     fun (type __tags) ->
                       fun (__tags_to_js : __tags -> Ojs.t) ->
                         fun (x2329 : __tags intf) ->
                           intf_to_js __tags_to_js x2329
                   let (createIndex :
                     'tags this ->
                       name:string ->
                         keyPath:[ `U1 of string 
                                 | `U2 of string Iterable.t_1 ]
                           ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x2341 : 'tags this) ->
                       fun ~name:(x2333 : string) ->
                         fun
                           ~keyPath:(x2334 :
                                      [ `U1 of string 
                                      | `U2 of string Iterable.t_1 ])
                           ->
                           fun ?options:(x2335 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x2343 = this_to_js Obj.magic x2341 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x2343 "createIndex")
                                    "apply"
                                    [|x2343;((let x2336 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x2336 "push"
                                                   [|(Ojs.string_to_js x2333)|]);
                                              ignore
                                                (Ojs.call x2336 "push"
                                                   [|((match x2334 with
                                                       | `U1 x2338 ->
                                                           Ojs.string_to_js
                                                             x2338
                                                       | `U2 x2339 ->
                                                           Iterable.t_1_to_js
                                                             Ojs.string_to_js
                                                             x2339))|]);
                                              (match x2335 with
                                               | Some x2337 ->
                                                   ignore
                                                     (Ojs.call x2336 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x2337)|])
                                               | None -> ());
                                              x2336))|])
                   let (get_autoIncrement : 'tags this -> bool) =
                     fun (x2344 : 'tags this) ->
                       Ojs.bool_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2344)
                            "autoIncrement")
                   let (get_indexNames : 'tags this -> DOMStringList.t) =
                     fun (x2346 : 'tags this) ->
                       DOMStringList.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2346)
                            "indexNames")
                   let (get_keyPath :
                     'tags this ->
                       [ `String of string  | `Other of string list ]
                         Primitive.t)
                     =
                     fun (x2348 : 'tags this) ->
                       Primitive.t_of_js
                         (fun (x2350 : Ojs.t) ->
                            let x2351 = x2350 in
                            match Ojs.string_of_js
                                    (Ojs.get_prop_ascii x2351 "dummy")
                            with
                            | "String" -> `String (Ojs.string_of_js x2351)
                            | "Other" ->
                                `Other
                                  (Ojs.list_of_js Ojs.string_of_js x2351)
                            | _ -> assert false)
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2348)
                            "keyPath")
                   let (get_name : 'tags this -> string) =
                     fun (x2353 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2353)
                            "name")
                   let (set_name : 'tags this -> string -> unit) =
                     fun (x2355 : 'tags this) ->
                       fun (x2356 : string) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x2355)
                           "name" (Ojs.string_to_js x2356)
                   let (get_transaction : 'tags this -> IDBTransaction.t) =
                     fun (x2358 : 'tags this) ->
                       IDBTransaction.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x2358)
                            "transaction")
                   let (add :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x2364 : 'tags this) ->
                       fun ~value:(x2360 : any) ->
                         fun ?key:(x2361 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x2366 = this_to_js Obj.magic x2364 in
                                Ojs.call (Ojs.get_prop_ascii x2366 "add")
                                  "apply"
                                  [|x2366;((let x2362 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x2362 "push"
                                                 [|(any_to_js x2360)|]);
                                            (match x2361 with
                                             | Some x2363 ->
                                                 ignore
                                                   (Ojs.call x2362 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x2363)|])
                                             | None -> ());
                                            x2362))|])
                   let (clear : 'tags this -> undefined IDBRequest.t) =
                     fun (x2368 : 'tags this) ->
                       IDBRequest.t_of_js undefined_of_js
                         (Ojs.call (this_to_js Obj.magic x2368) "clear" [||])
                   let (count :
                     'tags this ->
                       ?query:[ `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         -> unit -> float IDBRequest.t)
                     =
                     fun (x2376 : 'tags this) ->
                       fun
                         ?query:(x2371 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun () ->
                           IDBRequest.t_of_js Ojs.float_of_js
                             (let x2378 = this_to_js Obj.magic x2376 in
                              Ojs.call (Ojs.get_prop_ascii x2378 "count")
                                "apply"
                                [|x2378;((let x2372 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x2371 with
                                           | Some x2373 ->
                                               ignore
                                                 (Ojs.call x2372 "push"
                                                    [|((match x2373 with
                                                        | `U1 x2374 ->
                                                            IDBValidKey.t_to_js
                                                              x2374
                                                        | `U2 x2375 ->
                                                            IDBKeyRange.t_to_js
                                                              x2375))|])
                                           | None -> ());
                                          x2372))|])
                   let (createIndex' :
                     'tags this ->
                       name:string ->
                         keyPath:[ `U1 of string  | `U2 of string list ] ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x2388 : 'tags this) ->
                       fun ~name:(x2380 : string) ->
                         fun
                           ~keyPath:(x2381 :
                                      [ `U1 of string  | `U2 of string list ])
                           ->
                           fun ?options:(x2382 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x2390 = this_to_js Obj.magic x2388 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x2390 "createIndex")
                                    "apply"
                                    [|x2390;((let x2383 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x2383 "push"
                                                   [|(Ojs.string_to_js x2380)|]);
                                              ignore
                                                (Ojs.call x2383 "push"
                                                   [|((match x2381 with
                                                       | `U1 x2385 ->
                                                           Ojs.string_to_js
                                                             x2385
                                                       | `U2 x2386 ->
                                                           Ojs.list_to_js
                                                             Ojs.string_to_js
                                                             x2386))|]);
                                              (match x2382 with
                                               | Some x2384 ->
                                                   ignore
                                                     (Ojs.call x2383 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x2384)|])
                                               | None -> ());
                                              x2383))|])
                   let (delete :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> undefined IDBRequest.t)
                     =
                     fun (x2394 : 'tags this) ->
                       fun
                         ~query:(x2391 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js undefined_of_js
                           (Ojs.call (this_to_js Obj.magic x2394) "delete"
                              [|((match x2391 with
                                  | `U1 x2392 -> IDBValidKey.t_to_js x2392
                                  | `U2 x2393 -> IDBKeyRange.t_to_js x2393))|])
                   let (deleteIndex : 'tags this -> name:string -> unit) =
                     fun (x2398 : 'tags this) ->
                       fun ~name:(x2397 : string) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x2398)
                              "deleteIndex" [|(Ojs.string_to_js x2397)|])
                   let (get_ :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> any IDBRequest.t)
                     =
                     fun (x2403 : 'tags this) ->
                       fun
                         ~query:(x2400 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js any_of_js
                           (Ojs.call (this_to_js Obj.magic x2403) "get"
                              [|((match x2400 with
                                  | `U1 x2401 -> IDBValidKey.t_to_js x2401
                                  | `U2 x2402 -> IDBKeyRange.t_to_js x2402))|])
                   let (getAll :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         -> ?count:float -> unit -> any list IDBRequest.t)
                     =
                     fun (x2413 : 'tags this) ->
                       fun
                         ?query:(x2406 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?count:(x2407 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2416 : Ojs.t) ->
                                  Ojs.list_of_js any_of_js x2416)
                               (let x2415 = this_to_js Obj.magic x2413 in
                                Ojs.call (Ojs.get_prop_ascii x2415 "getAll")
                                  "apply"
                                  [|x2415;((let x2408 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2406 with
                                             | Some x2410 ->
                                                 ignore
                                                   (Ojs.call x2408 "push"
                                                      [|((match x2410 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2411 ->
                                                              IDBValidKey.t_to_js
                                                                x2411
                                                          | `U2 x2412 ->
                                                              IDBKeyRange.t_to_js
                                                                x2412))|])
                                             | None -> ());
                                            (match x2407 with
                                             | Some x2409 ->
                                                 ignore
                                                   (Ojs.call x2408 "push"
                                                      [|(Ojs.float_to_js
                                                           x2409)|])
                                             | None -> ());
                                            x2408))|])
                   let (getAllKeys :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?count:float ->
                           unit -> IDBValidKey.t list IDBRequest.t)
                     =
                     fun (x2425 : 'tags this) ->
                       fun
                         ?query:(x2418 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?count:(x2419 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2428 : Ojs.t) ->
                                  Ojs.list_of_js IDBValidKey.t_of_js x2428)
                               (let x2427 = this_to_js Obj.magic x2425 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x2427 "getAllKeys")
                                  "apply"
                                  [|x2427;((let x2420 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2418 with
                                             | Some x2422 ->
                                                 ignore
                                                   (Ojs.call x2420 "push"
                                                      [|((match x2422 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2423 ->
                                                              IDBValidKey.t_to_js
                                                                x2423
                                                          | `U2 x2424 ->
                                                              IDBKeyRange.t_to_js
                                                                x2424))|])
                                             | None -> ());
                                            (match x2419 with
                                             | Some x2421 ->
                                                 ignore
                                                   (Ojs.call x2420 "push"
                                                      [|(Ojs.float_to_js
                                                           x2421)|])
                                             | None -> ());
                                            x2420))|])
                   let (getKey :
                     'tags this ->
                       query:[ `U1 of IDBValidKey.t  | `U2 of IDBKeyRange.t ]
                         -> IDBValidKey.t option IDBRequest.t)
                     =
                     fun (x2433 : 'tags this) ->
                       fun
                         ~query:(x2430 :
                                  [ `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ])
                         ->
                         IDBRequest.t_of_js
                           (fun (x2435 : Ojs.t) ->
                              Ojs.option_of_js IDBValidKey.t_of_js x2435)
                           (Ojs.call (this_to_js Obj.magic x2433) "getKey"
                              [|((match x2430 with
                                  | `U1 x2431 -> IDBValidKey.t_to_js x2431
                                  | `U2 x2432 -> IDBKeyRange.t_to_js x2432))|])
                   let (index : 'tags this -> name:string -> IDBIndex.t) =
                     fun (x2438 : 'tags this) ->
                       fun ~name:(x2437 : string) ->
                         IDBIndex.t_of_js
                           (Ojs.call (this_to_js Obj.magic x2438) "index"
                              [|(Ojs.string_to_js x2437)|])
                   let (openCursor :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursorWithValue.t option IDBRequest.t)
                     =
                     fun (x2447 : 'tags this) ->
                       fun
                         ?query:(x2440 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?direction:(x2441 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2450 : Ojs.t) ->
                                  Ojs.option_of_js IDBCursorWithValue.t_of_js
                                    x2450)
                               (let x2449 = this_to_js Obj.magic x2447 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x2449 "openCursor")
                                  "apply"
                                  [|x2449;((let x2442 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2440 with
                                             | Some x2444 ->
                                                 ignore
                                                   (Ojs.call x2442 "push"
                                                      [|((match x2444 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2445 ->
                                                              IDBValidKey.t_to_js
                                                                x2445
                                                          | `U2 x2446 ->
                                                              IDBKeyRange.t_to_js
                                                                x2446))|])
                                             | None -> ());
                                            (match x2441 with
                                             | Some x2443 ->
                                                 ignore
                                                   (Ojs.call x2442 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x2443)|])
                                             | None -> ());
                                            x2442))|])
                   let (openKeyCursor :
                     'tags this ->
                       ?query:[ `Null  | `U1 of IDBValidKey.t 
                              | `U2 of IDBKeyRange.t ]
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursor.t option IDBRequest.t)
                     =
                     fun (x2459 : 'tags this) ->
                       fun
                         ?query:(x2452 :
                                  [ `Null  | `U1 of IDBValidKey.t 
                                  | `U2 of IDBKeyRange.t ] option)
                         ->
                         fun ?direction:(x2453 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x2462 : Ojs.t) ->
                                  Ojs.option_of_js IDBCursor.t_of_js x2462)
                               (let x2461 = this_to_js Obj.magic x2459 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x2461 "openKeyCursor")
                                  "apply"
                                  [|x2461;((let x2454 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x2452 with
                                             | Some x2456 ->
                                                 ignore
                                                   (Ojs.call x2454 "push"
                                                      [|((match x2456 with
                                                          | `Null -> Ojs.null
                                                          | `U1 x2457 ->
                                                              IDBValidKey.t_to_js
                                                                x2457
                                                          | `U2 x2458 ->
                                                              IDBKeyRange.t_to_js
                                                                x2458))|])
                                             | None -> ());
                                            (match x2453 with
                                             | Some x2455 ->
                                                 ignore
                                                   (Ojs.call x2454 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x2455)|])
                                             | None -> ());
                                            x2454))|])
                   let (put :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x2468 : 'tags this) ->
                       fun ~value:(x2464 : any) ->
                         fun ?key:(x2465 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x2470 = this_to_js Obj.magic x2468 in
                                Ojs.call (Ojs.get_prop_ascii x2470 "put")
                                  "apply"
                                  [|x2470;((let x2466 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x2466 "push"
                                                 [|(any_to_js x2464)|]);
                                            (match x2465 with
                                             | Some x2467 ->
                                                 ignore
                                                   (Ojs.call x2466 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x2467)|])
                                             | None -> ());
                                            x2466))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            [||])
                 end and
                      IDBRequest:sig
                                   type 'T t =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                       intf
                                   type 'T t_1 = 'T t
                                   type t_0 = any t
                                   [@@@js.stop ]
                                   type 'T tags =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                   type 'T tags_1 = 'T tags
                                   type tags_0 = any tags
                                   [@@@js.start ]
                                   [@@@js.implem
                                     type 'T tags =
                                       [ `EventTarget  | `IDBRequest of 'T ]
                                     type 'T tags_1 = 'T tags
                                     type tags_0 = any tags]
                                   type ('tags, 'T) this =
                                     'tags intf constraint 'tags =
                                                 [> `IDBRequest of 'T ]
                                   val t_to_js :
                                     ('T -> Ojs.t) -> 'T t -> Ojs.t
                                   val t_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t
                                   val t_1_to_js :
                                     ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                                   val t_1_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                                   val t_0_to_js : t_0 -> Ojs.t
                                   val t_0_of_js : Ojs.t -> t_0
                                   val get_error :
                                     ('tags, 'T) this ->
                                       DOMException.t option
                                   val get_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option
                                   val set_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option -> unit
                                   val get_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option
                                   val set_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         option -> unit
                                   val get_readyState :
                                     ('tags, 'T) this ->
                                       IDBRequestReadyState.t
                                   val get_result : ('tags, 'T) this -> 'T
                                   val get_source :
                                     ('tags, 'T) this ->
                                       (IDBCursor.t, IDBIndex.t,
                                         IDBObjectStore.t) union3
                                   val get_transaction :
                                     ('tags, 'T) this ->
                                       IDBTransaction.t option
                                   val addEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        AddEventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val addEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        AddEventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val removeEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        EventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val removeEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:[ `U1 of bool 
                                                    | `U2 of
                                                        EventListenerOptions.t
                                                        ]
                                             -> unit -> unit
                                   val cast_from : ('tags, 'T) this -> 'T t
                                   val prototype : unit -> t_0
                                   val create : unit -> t_0
                                 end =
                      struct
                        type 'T t =
                          [ `EventTarget  | `IDBRequest of 'T ] intf
                        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t
                          = fun _T -> Obj.magic
                        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                          fun _T -> Obj.magic
                        type 'T t_1 = 'T t
                        let rec t_1_of_js :
                          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
                          fun (type __T) ->
                            fun (__T_of_js : Ojs.t -> __T) ->
                              fun (x2474 : Ojs.t) -> t_of_js __T_of_js x2474
                        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                          =
                          fun (type __T) ->
                            fun (__T_to_js : __T -> Ojs.t) ->
                              fun (x2472 : __T t) -> t_to_js __T_to_js x2472
                        type t_0 = any t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x2478 : Ojs.t) -> t_of_js any_of_js x2478
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x2476 : any t) -> t_to_js any_to_js x2476
                        type 'T tags = [ `EventTarget  | `IDBRequest of 'T ]
                        type 'T tags_1 = 'T tags
                        type tags_0 = any tags
                        type ('tags, 'T) this =
                          'tags intf constraint 'tags =
                                      [> `IDBRequest of 'T ]
                        let rec this_of_js :
                          'tags 'T .
                            (Ojs.t -> 'tags) ->
                              (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                          =
                          fun (type __tags) ->
                            fun (type __T) ->
                              fun (__tags_of_js : Ojs.t -> __tags) ->
                                fun (__T_of_js : Ojs.t -> __T) ->
                                  fun (x2482 : Ojs.t) ->
                                    intf_of_js __tags_of_js x2482
                        and this_to_js :
                          'tags 'T .
                            ('tags -> Ojs.t) ->
                              ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                          =
                          fun (type __tags) ->
                            fun (type __T) ->
                              fun (__tags_to_js : __tags -> Ojs.t) ->
                                fun (__T_to_js : __T -> Ojs.t) ->
                                  fun (x2480 : __tags intf) ->
                                    intf_to_js __tags_to_js x2480
                        let (get_error :
                          ('tags, 'T) this -> DOMException.t option) =
                          fun (x2484 : ('tags, 'T) this) ->
                            Ojs.option_of_js DOMException.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2484)
                                 "error")
                        let (get_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option)
                          =
                          fun (x2488 : ('tags, 'T) this) ->
                            Ojs.option_of_js
                              (fun (x2491 : Ojs.t) ->
                                 fun ~this:(x2492 : 'T t) ->
                                   fun ~ev:(x2494 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x2491
                                          [|(t_to_js Obj.magic x2492);(
                                            Event.t_to_js x2494)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2488)
                                 "onerror")
                        let (set_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option -> unit)
                          =
                          fun (x2495 : ('tags, 'T) this) ->
                            fun
                              (x2496 :
                                (this:'T t -> ev:Event.t -> any) option)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x2495)
                                "onerror"
                                (Ojs.option_to_js
                                   (fun
                                      (x2497 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x2498 : Ojs.t) ->
                                           fun (x2500 : Ojs.t) ->
                                             any_to_js
                                               (x2497
                                                  ~this:(t_of_js Obj.magic
                                                           x2498)
                                                  ~ev:(Event.t_of_js x2500))))
                                   x2496)
                        let (get_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option)
                          =
                          fun (x2503 : ('tags, 'T) this) ->
                            Ojs.option_of_js
                              (fun (x2506 : Ojs.t) ->
                                 fun ~this:(x2507 : 'T t) ->
                                   fun ~ev:(x2509 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x2506
                                          [|(t_to_js Obj.magic x2507);(
                                            Event.t_to_js x2509)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2503)
                                 "onsuccess")
                        let (set_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) option -> unit)
                          =
                          fun (x2510 : ('tags, 'T) this) ->
                            fun
                              (x2511 :
                                (this:'T t -> ev:Event.t -> any) option)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x2510)
                                "onsuccess"
                                (Ojs.option_to_js
                                   (fun
                                      (x2512 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x2513 : Ojs.t) ->
                                           fun (x2515 : Ojs.t) ->
                                             any_to_js
                                               (x2512
                                                  ~this:(t_of_js Obj.magic
                                                           x2513)
                                                  ~ev:(Event.t_of_js x2515))))
                                   x2511)
                        let (get_readyState :
                          ('tags, 'T) this -> IDBRequestReadyState.t) =
                          fun (x2518 : ('tags, 'T) this) ->
                            IDBRequestReadyState.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2518)
                                 "readyState")
                        let (get_result : ('tags, 'T) this -> 'T) =
                          fun (x2521 : ('tags, 'T) this) ->
                            Obj.magic
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2521)
                                 "result")
                        let (get_source :
                          ('tags, 'T) this ->
                            (IDBCursor.t, IDBIndex.t, IDBObjectStore.t)
                              union3)
                          =
                          fun (x2524 : ('tags, 'T) this) ->
                            union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
                              IDBObjectStore.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2524)
                                 "source")
                        let (get_transaction :
                          ('tags, 'T) this -> IDBTransaction.t option) =
                          fun (x2530 : ('tags, 'T) this) ->
                            Ojs.option_of_js IDBTransaction.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x2530)
                                 "transaction")
                        let (addEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:[ `U1 of bool 
                                         | `U2 of AddEventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2544 : ('tags, 'T) this) ->
                            fun ~type_:(x2534 : 'K) ->
                              fun
                                ~listener:(x2535 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x2536 :
                                             [ `U1 of bool 
                                             | `U2 of
                                                 AddEventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2547 =
                                         this_to_js Obj.magic Obj.magic x2544 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2547
                                            "addEventListener") "apply"
                                         [|x2547;((let x2537 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2537 "push"
                                                        [|(Obj.magic x2534)|]);
                                                   ignore
                                                     (Ojs.call x2537 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x2541 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x2543 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x2535
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x2541)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2543))))|]);
                                                   (match x2536 with
                                                    | Some x2538 ->
                                                        ignore
                                                          (Ojs.call x2537
                                                             "push"
                                                             [|((match x2538
                                                                 with
                                                                 | `U1 x2539
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2539
                                                                 | `U2 x2540
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2540))|])
                                                    | None -> ());
                                                   x2537))|])
                        let (addEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:[ `U1 of bool 
                                         | `U2 of AddEventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2555 : ('tags, 'T) this) ->
                            fun ~type_:(x2548 : string) ->
                              fun
                                ~listener:(x2549 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x2550 :
                                             [ `U1 of bool 
                                             | `U2 of
                                                 AddEventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2558 =
                                         this_to_js Obj.magic Obj.magic x2555 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2558
                                            "addEventListener") "apply"
                                         [|x2558;((let x2551 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2551 "push"
                                                        [|(Ojs.string_to_js
                                                             x2548)|]);
                                                   ignore
                                                     (Ojs.call x2551 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x2549)|]);
                                                   (match x2550 with
                                                    | Some x2552 ->
                                                        ignore
                                                          (Ojs.call x2551
                                                             "push"
                                                             [|((match x2552
                                                                 with
                                                                 | `U1 x2553
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2553
                                                                 | `U2 x2554
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2554))|])
                                                    | None -> ());
                                                   x2551))|])
                        let (removeEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:[ `U1 of bool 
                                         | `U2 of EventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2569 : ('tags, 'T) this) ->
                            fun ~type_:(x2559 : 'K) ->
                              fun
                                ~listener:(x2560 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x2561 :
                                             [ `U1 of bool 
                                             | `U2 of EventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2572 =
                                         this_to_js Obj.magic Obj.magic x2569 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2572
                                            "removeEventListener") "apply"
                                         [|x2572;((let x2562 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2562 "push"
                                                        [|(Obj.magic x2559)|]);
                                                   ignore
                                                     (Ojs.call x2562 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x2566 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x2568 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x2560
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x2566)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2568))))|]);
                                                   (match x2561 with
                                                    | Some x2563 ->
                                                        ignore
                                                          (Ojs.call x2562
                                                             "push"
                                                             [|((match x2563
                                                                 with
                                                                 | `U1 x2564
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2564
                                                                 | `U2 x2565
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2565))|])
                                                    | None -> ());
                                                   x2562))|])
                        let (removeEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:[ `U1 of bool 
                                         | `U2 of EventListenerOptions.t ]
                                  -> unit -> unit)
                          =
                          fun (x2580 : ('tags, 'T) this) ->
                            fun ~type_:(x2573 : string) ->
                              fun
                                ~listener:(x2574 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x2575 :
                                             [ `U1 of bool 
                                             | `U2 of EventListenerOptions.t ]
                                               option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x2583 =
                                         this_to_js Obj.magic Obj.magic x2580 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x2583
                                            "removeEventListener") "apply"
                                         [|x2583;((let x2576 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x2576 "push"
                                                        [|(Ojs.string_to_js
                                                             x2573)|]);
                                                   ignore
                                                     (Ojs.call x2576 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x2574)|]);
                                                   (match x2575 with
                                                    | Some x2577 ->
                                                        ignore
                                                          (Ojs.call x2576
                                                             "push"
                                                             [|((match x2577
                                                                 with
                                                                 | `U1 x2578
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2578
                                                                 | `U2 x2579
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2579))|])
                                                    | None -> ());
                                                   x2576))|])
                        let cast_from = Obj.magic
                        let (prototype : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 "prototype")
                        let (create : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 [||])
                      end and
                           IDBTransaction:sig
                                            type t =
                                              [ `EventTarget 
                                              | `IDBTransaction ] intf
                                            type t_0 = t
                                            [@@@js.stop ]
                                            type tags =
                                              [ `EventTarget 
                                              | `IDBTransaction ]
                                            type tags_0 = tags
                                            [@@@js.start ]
                                            [@@@js.implem
                                              type tags =
                                                [ `EventTarget 
                                                | `IDBTransaction ]
                                              type tags_0 = tags]
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [>
                                                            `IDBTransaction ]
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val t_0_to_js : t_0 -> Ojs.t
                                            val t_0_of_js : Ojs.t -> t_0
                                            val get_db :
                                              'tags this -> IDBDatabase.t
                                            val get_durability :
                                              'tags this ->
                                                IDBTransactionDurability.t
                                            val get_error :
                                              'tags this ->
                                                DOMException.t option
                                            val get_mode :
                                              'tags this ->
                                                IDBTransactionMode.t
                                            val get_objectStoreNames :
                                              'tags this -> DOMStringList.t
                                            val get_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val get_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val get_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option
                                            val set_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  option -> unit
                                            val abort : 'tags this -> unit
                                            val commit : 'tags this -> unit
                                            val objectStore :
                                              'tags this ->
                                                name:string ->
                                                  IDBObjectStore.t
                                            val addEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 AddEventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val addEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 AddEventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val removeEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 EventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val removeEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:[ `U1 of bool 
                                                             | `U2 of
                                                                 EventListenerOptions.t
                                                                 ]
                                                      -> unit -> unit
                                            val cast_from : 'tags this -> t
                                            val prototype : unit -> t
                                            val create : unit -> t
                                          end =
                           struct
                             type t =
                               [ `EventTarget  | `IDBTransaction ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x2585 : Ojs.t) -> t_of_js x2585
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x2584 : t) -> t_to_js x2584
                             type tags = [ `EventTarget  | `IDBTransaction ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `IDBTransaction ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               =
                               fun (type __tags) ->
                                 fun (__tags_of_js : Ojs.t -> __tags) ->
                                   fun (x2588 : Ojs.t) ->
                                     intf_of_js __tags_of_js x2588
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               =
                               fun (type __tags) ->
                                 fun (__tags_to_js : __tags -> Ojs.t) ->
                                   fun (x2586 : __tags intf) ->
                                     intf_to_js __tags_to_js x2586
                             let (get_db : 'tags this -> IDBDatabase.t) =
                               fun (x2590 : 'tags this) ->
                                 IDBDatabase.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2590) "db")
                             let (get_durability :
                               'tags this -> IDBTransactionDurability.t) =
                               fun (x2592 : 'tags this) ->
                                 IDBTransactionDurability.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2592)
                                      "durability")
                             let (get_error :
                               'tags this -> DOMException.t option) =
                               fun (x2594 : 'tags this) ->
                                 Ojs.option_of_js DOMException.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2594) "error")
                             let (get_mode :
                               'tags this -> IDBTransactionMode.t) =
                               fun (x2597 : 'tags this) ->
                                 IDBTransactionMode.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2597) "mode")
                             let (get_objectStoreNames :
                               'tags this -> DOMStringList.t) =
                               fun (x2599 : 'tags this) ->
                                 DOMStringList.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2599)
                                      "objectStoreNames")
                             let (get_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x2601 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x2603 : Ojs.t) ->
                                      fun ~this:(x2604 : t) ->
                                        fun ~ev:(x2605 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x2603
                                               [|(t_to_js x2604);(Event.t_to_js
                                                                    x2605)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2601) "onabort")
                             let (set_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x2606 : 'tags this) ->
                                 fun
                                   (x2607 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x2606) "onabort"
                                     (Ojs.option_to_js
                                        (fun
                                           (x2608 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x2609 : Ojs.t) ->
                                                fun (x2610 : Ojs.t) ->
                                                  any_to_js
                                                    (x2608
                                                       ~this:(t_of_js x2609)
                                                       ~ev:(Event.t_of_js
                                                              x2610)))) x2607)
                             let (get_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x2612 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x2614 : Ojs.t) ->
                                      fun ~this:(x2615 : t) ->
                                        fun ~ev:(x2616 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x2614
                                               [|(t_to_js x2615);(Event.t_to_js
                                                                    x2616)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2612)
                                      "oncomplete")
                             let (set_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x2617 : 'tags this) ->
                                 fun
                                   (x2618 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x2617)
                                     "oncomplete"
                                     (Ojs.option_to_js
                                        (fun
                                           (x2619 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x2620 : Ojs.t) ->
                                                fun (x2621 : Ojs.t) ->
                                                  any_to_js
                                                    (x2619
                                                       ~this:(t_of_js x2620)
                                                       ~ev:(Event.t_of_js
                                                              x2621)))) x2618)
                             let (get_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option)
                               =
                               fun (x2623 : 'tags this) ->
                                 Ojs.option_of_js
                                   (fun (x2625 : Ojs.t) ->
                                      fun ~this:(x2626 : t) ->
                                        fun ~ev:(x2627 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x2625
                                               [|(t_to_js x2626);(Event.t_to_js
                                                                    x2627)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x2623) "onerror")
                             let (set_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) option -> unit)
                               =
                               fun (x2628 : 'tags this) ->
                                 fun
                                   (x2629 :
                                     (this:t -> ev:Event.t -> any) option)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x2628) "onerror"
                                     (Ojs.option_to_js
                                        (fun
                                           (x2630 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x2631 : Ojs.t) ->
                                                fun (x2632 : Ojs.t) ->
                                                  any_to_js
                                                    (x2630
                                                       ~this:(t_of_js x2631)
                                                       ~ev:(Event.t_of_js
                                                              x2632)))) x2629)
                             let (abort : 'tags this -> unit) =
                               fun (x2634 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x2634)
                                      "abort" [||])
                             let (commit : 'tags this -> unit) =
                               fun (x2636 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x2636)
                                      "commit" [||])
                             let (objectStore :
                               'tags this -> name:string -> IDBObjectStore.t)
                               =
                               fun (x2639 : 'tags this) ->
                                 fun ~name:(x2638 : string) ->
                                   IDBObjectStore.t_of_js
                                     (Ojs.call (this_to_js Obj.magic x2639)
                                        "objectStore"
                                        [|(Ojs.string_to_js x2638)|])
                             let (addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of
                                                  AddEventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2650 : 'tags this) ->
                                 fun ~type_:(x2641 : 'K) ->
                                   fun
                                     ~listener:(x2642 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x2643 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2652 =
                                              this_to_js Obj.magic x2650 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2652
                                                 "addEventListener") "apply"
                                              [|x2652;((let x2644 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2644
                                                             "push"
                                                             [|(Obj.magic
                                                                  x2641)|]);
                                                        ignore
                                                          (Ojs.call x2644
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x2648 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2649 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x2642
                                                                    ~this:(
                                                                    t_of_js
                                                                    x2648)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2649))))|]);
                                                        (match x2643 with
                                                         | Some x2645 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2644
                                                                  "push"
                                                                  [|((
                                                                    match x2645
                                                                    with
                                                                    | 
                                                                    `U1 x2646
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2646
                                                                    | 
                                                                    `U2 x2647
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2647))|])
                                                         | None -> ());
                                                        x2644))|])
                             let (addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of
                                                  AddEventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2660 : 'tags this) ->
                                 fun ~type_:(x2653 : string) ->
                                   fun
                                     ~listener:(x2654 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x2655 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2662 =
                                              this_to_js Obj.magic x2660 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2662
                                                 "addEventListener") "apply"
                                              [|x2662;((let x2656 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2656
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x2653)|]);
                                                        ignore
                                                          (Ojs.call x2656
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x2654)|]);
                                                        (match x2655 with
                                                         | Some x2657 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2656
                                                                  "push"
                                                                  [|((
                                                                    match x2657
                                                                    with
                                                                    | 
                                                                    `U1 x2658
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2658
                                                                    | 
                                                                    `U2 x2659
                                                                    ->
                                                                    AddEventListenerOptions.t_to_js
                                                                    x2659))|])
                                                         | None -> ());
                                                        x2656))|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of EventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2672 : 'tags this) ->
                                 fun ~type_:(x2663 : 'K) ->
                                   fun
                                     ~listener:(x2664 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x2665 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2674 =
                                              this_to_js Obj.magic x2672 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2674
                                                 "removeEventListener")
                                              "apply"
                                              [|x2674;((let x2666 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2666
                                                             "push"
                                                             [|(Obj.magic
                                                                  x2663)|]);
                                                        ignore
                                                          (Ojs.call x2666
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x2670 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2671 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x2664
                                                                    ~this:(
                                                                    t_of_js
                                                                    x2670)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x2671))))|]);
                                                        (match x2665 with
                                                         | Some x2667 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2666
                                                                  "push"
                                                                  [|((
                                                                    match x2667
                                                                    with
                                                                    | 
                                                                    `U1 x2668
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2668
                                                                    | 
                                                                    `U2 x2669
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2669))|])
                                                         | None -> ());
                                                        x2666))|])
                             let (removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:[ `U1 of bool 
                                              | `U2 of EventListenerOptions.t ]
                                       -> unit -> unit)
                               =
                               fun (x2682 : 'tags this) ->
                                 fun ~type_:(x2675 : string) ->
                                   fun
                                     ~listener:(x2676 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x2677 :
                                                  [ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                                    option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x2684 =
                                              this_to_js Obj.magic x2682 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x2684
                                                 "removeEventListener")
                                              "apply"
                                              [|x2684;((let x2678 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x2678
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x2675)|]);
                                                        ignore
                                                          (Ojs.call x2678
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x2676)|]);
                                                        (match x2677 with
                                                         | Some x2679 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x2678
                                                                  "push"
                                                                  [|((
                                                                    match x2679
                                                                    with
                                                                    | 
                                                                    `U1 x2680
                                                                    ->
                                                                    Ojs.bool_to_js
                                                                    x2680
                                                                    | 
                                                                    `U2 x2681
                                                                    ->
                                                                    EventListenerOptions.t_to_js
                                                                    x2681))|])
                                                         | None -> ());
                                                        x2678))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") [||])
                           end
module IDBOpenDBRequest =
  struct
    type t =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2686 : Ojs.t) -> t_of_js x2686
    and t_0_to_js : t_0 -> Ojs.t = fun (x2685 : t) -> t_to_js x2685
    type tags =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2689 : Ojs.t) -> intf_of_js __tags_of_js x2689
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2687 : __tags intf) -> intf_to_js __tags_to_js x2687
    let (get_onblocked : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x2691 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2693 : Ojs.t) ->
             fun ~this:(x2694 : t) ->
               fun ~ev:(x2695 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2693 [|(t_to_js x2694);(Event.t_to_js x2695)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2691) "onblocked")
    let (set_onblocked :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x2696 : 'tags this) ->
        fun (x2697 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2696) "onblocked"
            (Ojs.option_to_js
               (fun (x2698 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2699 : Ojs.t) ->
                       fun (x2700 : Ojs.t) ->
                         any_to_js
                           (x2698 ~this:(t_of_js x2699)
                              ~ev:(Event.t_of_js x2700)))) x2697)
    let (get_onupgradeneeded :
      'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) option) =
      fun (x2702 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2704 : Ojs.t) ->
             fun ~this:(x2705 : t) ->
               fun ~ev:(x2706 : IDBVersionChangeEvent.t) ->
                 any_of_js
                   (Ojs.apply x2704
                      [|(t_to_js x2705);(IDBVersionChangeEvent.t_to_js x2706)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2702) "onupgradeneeded")
    let (set_onupgradeneeded :
      'tags this ->
        (this:t -> ev:IDBVersionChangeEvent.t -> any) option -> unit)
      =
      fun (x2707 : 'tags this) ->
        fun (x2708 : (this:t -> ev:IDBVersionChangeEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2707) "onupgradeneeded"
            (Ojs.option_to_js
               (fun (x2709 : this:t -> ev:IDBVersionChangeEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2710 : Ojs.t) ->
                       fun (x2711 : Ojs.t) ->
                         any_to_js
                           (x2709 ~this:(t_of_js x2710)
                              ~ev:(IDBVersionChangeEvent.t_of_js x2711))))
               x2708)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2722 : 'tags this) ->
        fun ~type_:(x2713 : 'K) ->
          fun ~listener:(x2714 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2715 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2724 = this_to_js Obj.magic x2722 in
                   Ojs.call (Ojs.get_prop_ascii x2724 "addEventListener")
                     "apply"
                     [|x2724;((let x2716 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2716 "push" [|(Obj.magic x2713)|]);
                               ignore
                                 (Ojs.call x2716 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2720 : Ojs.t) ->
                                            fun (x2721 : Ojs.t) ->
                                              any_to_js
                                                (x2714 ~this:(t_of_js x2720)
                                                   ~ev:(any_of_js x2721))))|]);
                               (match x2715 with
                                | Some x2717 ->
                                    ignore
                                      (Ojs.call x2716 "push"
                                         [|((match x2717 with
                                             | `U1 x2718 ->
                                                 Ojs.bool_to_js x2718
                                             | `U2 x2719 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x2719))|])
                                | None -> ());
                               x2716))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2732 : 'tags this) ->
        fun ~type_:(x2725 : string) ->
          fun ~listener:(x2726 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2727 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2734 = this_to_js Obj.magic x2732 in
                   Ojs.call (Ojs.get_prop_ascii x2734 "addEventListener")
                     "apply"
                     [|x2734;((let x2728 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2728 "push"
                                    [|(Ojs.string_to_js x2725)|]);
                               ignore
                                 (Ojs.call x2728 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2726)|]);
                               (match x2727 with
                                | Some x2729 ->
                                    ignore
                                      (Ojs.call x2728 "push"
                                         [|((match x2729 with
                                             | `U1 x2730 ->
                                                 Ojs.bool_to_js x2730
                                             | `U2 x2731 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x2731))|])
                                | None -> ());
                               x2728))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2744 : 'tags this) ->
        fun ~type_:(x2735 : 'K) ->
          fun ~listener:(x2736 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2737 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2746 = this_to_js Obj.magic x2744 in
                   Ojs.call (Ojs.get_prop_ascii x2746 "removeEventListener")
                     "apply"
                     [|x2746;((let x2738 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2738 "push" [|(Obj.magic x2735)|]);
                               ignore
                                 (Ojs.call x2738 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2742 : Ojs.t) ->
                                            fun (x2743 : Ojs.t) ->
                                              any_to_js
                                                (x2736 ~this:(t_of_js x2742)
                                                   ~ev:(any_of_js x2743))))|]);
                               (match x2737 with
                                | Some x2739 ->
                                    ignore
                                      (Ojs.call x2738 "push"
                                         [|((match x2739 with
                                             | `U1 x2740 ->
                                                 Ojs.bool_to_js x2740
                                             | `U2 x2741 ->
                                                 EventListenerOptions.t_to_js
                                                   x2741))|])
                                | None -> ());
                               x2738))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x2754 : 'tags this) ->
        fun ~type_:(x2747 : string) ->
          fun ~listener:(x2748 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2749 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x2756 = this_to_js Obj.magic x2754 in
                   Ojs.call (Ojs.get_prop_ascii x2756 "removeEventListener")
                     "apply"
                     [|x2756;((let x2750 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2750 "push"
                                    [|(Ojs.string_to_js x2747)|]);
                               ignore
                                 (Ojs.call x2750 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2748)|]);
                               (match x2749 with
                                | Some x2751 ->
                                    ignore
                                      (Ojs.call x2750 "push"
                                         [|((match x2751 with
                                             | `U1 x2752 ->
                                                 Ojs.bool_to_js x2752
                                             | `U2 x2753 ->
                                                 EventListenerOptions.t_to_js
                                                   x2753))|])
                                | None -> ());
                               x2750))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
             [||])
  end
module IDBDatabaseInfo =
  struct
    type t = [ `IDBDatabaseInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2758 : Ojs.t) -> t_of_js x2758
    and t_0_to_js : t_0 -> Ojs.t = fun (x2757 : t) -> t_to_js x2757
    type tags = [ `IDBDatabaseInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2761 : Ojs.t) -> intf_of_js __tags_of_js x2761
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2759 : __tags intf) -> intf_to_js __tags_to_js x2759
    let (get_name : 'tags this -> string) =
      fun (x2763 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2763) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2765 : 'tags this) ->
        fun (x2766 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2765) "name"
            (Ojs.string_to_js x2766)
    let (get_version : 'tags this -> float) =
      fun (x2768 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2768) "version")
    let (set_version : 'tags this -> float -> unit) =
      fun (x2770 : 'tags this) ->
        fun (x2771 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2770) "version"
            (Ojs.float_to_js x2771)
    let (create : name:string -> version:float -> unit -> t) =
      fun ~name:(x2773 : string) ->
        fun ~version:(x2774 : float) ->
          fun () ->
            let x2775 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2775 "name" (Ojs.string_to_js x2773);
            Ojs.set_prop_ascii x2775 "version" (Ojs.float_to_js x2774);
            t_of_js x2775
    let cast_from = Obj.magic
  end
module IndexedDBStatic =
  struct
    let (cmp : first:any -> second:any -> float) =
      fun ~first:(x2776 : any) ->
        fun ~second:(x2777 : any) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "cmp"
               [|(any_to_js x2776);(any_to_js x2777)|])
    let (databases : unit -> IDBDatabaseInfo.t list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x2778 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x2778)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "databases"
             [||])
    let (deleteDatabase : string -> IDBOpenDBRequest.t) =
      fun (x2780 : string) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB")
             "deleteDatabase" [|(Ojs.string_to_js x2780)|])
    let (open_ : name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun ~name:(x2781 : string) ->
        fun ?version:(x2782 : float option) ->
          fun () ->
            IDBOpenDBRequest.t_of_js
              (let x2785 = Ojs.get_prop_ascii Ojs.global "indexedDB" in
               Ojs.call (Ojs.get_prop_ascii x2785 "open") "apply"
                 [|x2785;((let x2783 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2783 "push"
                                [|(Ojs.string_to_js x2781)|]);
                           (match x2782 with
                            | Some x2784 ->
                                ignore
                                  (Ojs.call x2783 "push"
                                     [|(Ojs.float_to_js x2784)|])
                            | None -> ());
                           x2783))|])
  end
module FontFaceSetLoadStatus =
  struct
    type t = [ `L_s102_loaded  | `L_s104_loading ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2787 : Ojs.t) ->
        let x2788 = x2787 in
        match Ojs.string_of_js x2788 with
        | "loaded" -> `L_s102_loaded
        | "loading" -> `L_s104_loading
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x2786 : [ `L_s102_loaded  | `L_s104_loading ]) ->
        match x2786 with
        | `L_s102_loaded -> Ojs.string_to_js "loaded"
        | `L_s104_loading -> Ojs.string_to_js "loading"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2790 : Ojs.t) -> t_of_js x2790
    and t_0_to_js : t_0 -> Ojs.t = fun (x2789 : t) -> t_to_js x2789
  end
module FontFaceLoadStatus =
  struct
    type t =
      [ `L_s102_loaded  | `L_s104_loading  | `L_s202_unloaded 
      | `L_s68_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2792 : Ojs.t) ->
        let x2793 = x2792 in
        match Ojs.string_of_js x2793 with
        | "loaded" -> `L_s102_loaded
        | "loading" -> `L_s104_loading
        | "unloaded" -> `L_s202_unloaded
        | "error" -> `L_s68_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2791 :
          [ `L_s102_loaded  | `L_s104_loading  | `L_s202_unloaded 
          | `L_s68_error ])
        ->
        match x2791 with
        | `L_s102_loaded -> Ojs.string_to_js "loaded"
        | `L_s104_loading -> Ojs.string_to_js "loading"
        | `L_s202_unloaded -> Ojs.string_to_js "unloaded"
        | `L_s68_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2795 : Ojs.t) -> t_of_js x2795
    and t_0_to_js : t_0 -> Ojs.t = fun (x2794 : t) -> t_to_js x2794
  end
module FontFaceDescriptors =
  struct
    type t = [ `FontFaceDescriptors ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2797 : Ojs.t) -> t_of_js x2797
    and t_0_to_js : t_0 -> Ojs.t = fun (x2796 : t) -> t_to_js x2796
    type tags = [ `FontFaceDescriptors ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2800 : Ojs.t) -> intf_of_js __tags_of_js x2800
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2798 : __tags intf) -> intf_to_js __tags_to_js x2798
    let (get_display : 'tags this -> string) =
      fun (x2802 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2802) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x2804 : 'tags this) ->
        fun (x2805 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2804) "display"
            (Ojs.string_to_js x2805)
    let (get_featureSettings : 'tags this -> string) =
      fun (x2807 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2807) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x2809 : 'tags this) ->
        fun (x2810 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2809) "featureSettings"
            (Ojs.string_to_js x2810)
    let (get_stretch : 'tags this -> string) =
      fun (x2812 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2812) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x2814 : 'tags this) ->
        fun (x2815 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2814) "stretch"
            (Ojs.string_to_js x2815)
    let (get_style : 'tags this -> string) =
      fun (x2817 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2817) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x2819 : 'tags this) ->
        fun (x2820 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2819) "style"
            (Ojs.string_to_js x2820)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x2822 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2822) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x2824 : 'tags this) ->
        fun (x2825 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2824) "unicodeRange"
            (Ojs.string_to_js x2825)
    let (get_variant : 'tags this -> string) =
      fun (x2827 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2827) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x2829 : 'tags this) ->
        fun (x2830 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2829) "variant"
            (Ojs.string_to_js x2830)
    let (get_weight : 'tags this -> string) =
      fun (x2832 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2832) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2834 : 'tags this) ->
        fun (x2835 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2834) "weight"
            (Ojs.string_to_js x2835)
    let (create :
      display:string ->
        featureSettings:string ->
          stretch:string ->
            style:string ->
              unicodeRange:string ->
                variant:string -> weight:string -> unit -> t)
      =
      fun ~display:(x2837 : string) ->
        fun ~featureSettings:(x2838 : string) ->
          fun ~stretch:(x2839 : string) ->
            fun ~style:(x2840 : string) ->
              fun ~unicodeRange:(x2841 : string) ->
                fun ~variant:(x2842 : string) ->
                  fun ~weight:(x2843 : string) ->
                    fun () ->
                      let x2844 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x2844 "display"
                        (Ojs.string_to_js x2837);
                      Ojs.set_prop_ascii x2844 "featureSettings"
                        (Ojs.string_to_js x2838);
                      Ojs.set_prop_ascii x2844 "stretch"
                        (Ojs.string_to_js x2839);
                      Ojs.set_prop_ascii x2844 "style"
                        (Ojs.string_to_js x2840);
                      Ojs.set_prop_ascii x2844 "unicodeRange"
                        (Ojs.string_to_js x2841);
                      Ojs.set_prop_ascii x2844 "variant"
                        (Ojs.string_to_js x2842);
                      Ojs.set_prop_ascii x2844 "weight"
                        (Ojs.string_to_js x2843);
                      t_of_js x2844
    let cast_from = Obj.magic
  end
module BinaryData =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x2848 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x2848
    and t_to_js : t -> Ojs.t =
      fun (x2845 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x2845
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2852 : Ojs.t) -> t_of_js x2852
    and t_0_to_js : t_0 -> Ojs.t = fun (x2851 : t) -> t_to_js x2851
  end
module FontFace =
  struct
    type t = [ `FontFace ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2854 : Ojs.t) -> t_of_js x2854
    and t_0_to_js : t_0 -> Ojs.t = fun (x2853 : t) -> t_to_js x2853
    type tags = [ `FontFace ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2857 : Ojs.t) -> intf_of_js __tags_of_js x2857
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2855 : __tags intf) -> intf_to_js __tags_to_js x2855
    let (get_ascentOverride : 'tags this -> string) =
      fun (x2859 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2859) "ascentOverride")
    let (set_ascentOverride : 'tags this -> string -> unit) =
      fun (x2861 : 'tags this) ->
        fun (x2862 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2861) "ascentOverride"
            (Ojs.string_to_js x2862)
    let (get_descentOverride : 'tags this -> string) =
      fun (x2864 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2864) "descentOverride")
    let (set_descentOverride : 'tags this -> string -> unit) =
      fun (x2866 : 'tags this) ->
        fun (x2867 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2866) "descentOverride"
            (Ojs.string_to_js x2867)
    let (get_display : 'tags this -> string) =
      fun (x2869 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2869) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x2871 : 'tags this) ->
        fun (x2872 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2871) "display"
            (Ojs.string_to_js x2872)
    let (get_family : 'tags this -> string) =
      fun (x2874 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2874) "family")
    let (set_family : 'tags this -> string -> unit) =
      fun (x2876 : 'tags this) ->
        fun (x2877 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2876) "family"
            (Ojs.string_to_js x2877)
    let (get_featureSettings : 'tags this -> string) =
      fun (x2879 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2879) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x2881 : 'tags this) ->
        fun (x2882 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2881) "featureSettings"
            (Ojs.string_to_js x2882)
    let (get_lineGapOverride : 'tags this -> string) =
      fun (x2884 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2884) "lineGapOverride")
    let (set_lineGapOverride : 'tags this -> string -> unit) =
      fun (x2886 : 'tags this) ->
        fun (x2887 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2886) "lineGapOverride"
            (Ojs.string_to_js x2887)
    let (get_loaded : 'tags this -> t Promise.t_1) =
      fun (x2889 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2889) "loaded")
    let (get_status : 'tags this -> FontFaceLoadStatus.t) =
      fun (x2892 : 'tags this) ->
        FontFaceLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2892) "status")
    let (get_stretch : 'tags this -> string) =
      fun (x2894 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2894) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x2896 : 'tags this) ->
        fun (x2897 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2896) "stretch"
            (Ojs.string_to_js x2897)
    let (get_style : 'tags this -> string) =
      fun (x2899 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2899) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x2901 : 'tags this) ->
        fun (x2902 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2901) "style"
            (Ojs.string_to_js x2902)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x2904 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2904) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x2906 : 'tags this) ->
        fun (x2907 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2906) "unicodeRange"
            (Ojs.string_to_js x2907)
    let (get_variant : 'tags this -> string) =
      fun (x2909 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2909) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x2911 : 'tags this) ->
        fun (x2912 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2911) "variant"
            (Ojs.string_to_js x2912)
    let (get_variationSettings : 'tags this -> string) =
      fun (x2914 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2914)
             "variationSettings")
    let (set_variationSettings : 'tags this -> string -> unit) =
      fun (x2916 : 'tags this) ->
        fun (x2917 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2916) "variationSettings"
            (Ojs.string_to_js x2917)
    let (get_weight : 'tags this -> string) =
      fun (x2919 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2919) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2921 : 'tags this) ->
        fun (x2922 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2921) "weight"
            (Ojs.string_to_js x2922)
    let (load : 'tags this -> t Promise.t_1) =
      fun (x2924 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x2924) "load" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFace")
             "prototype")
    let (create :
      family:string ->
        source:[ `U1 of string  | `U2 of BinaryData.t ] ->
          ?descriptors:FontFaceDescriptors.t -> unit -> t)
      =
      fun ~family:(x2927 : string) ->
        fun ~source:(x2928 : [ `U1 of string  | `U2 of BinaryData.t ]) ->
          fun ?descriptors:(x2929 : FontFaceDescriptors.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "FontFace")
                   (let x2930 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2930 "push" [|(Ojs.string_to_js x2927)|]);
                    ignore
                      (Ojs.call x2930 "push"
                         [|((match x2928 with
                             | `U1 x2932 -> Ojs.string_to_js x2932
                             | `U2 x2933 -> BinaryData.t_to_js x2933))|]);
                    (match x2929 with
                     | Some x2931 ->
                         ignore
                           (Ojs.call x2930 "push"
                              [|(FontFaceDescriptors.t_to_js x2931)|])
                     | None -> ());
                    x2930))
  end
module FontFaceSet =
  struct
    type t = [ `EventTarget  | `FontFaceSet ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2935 : Ojs.t) -> t_of_js x2935
    and t_0_to_js : t_0 -> Ojs.t = fun (x2934 : t) -> t_to_js x2934
    type tags = [ `EventTarget  | `FontFaceSet ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x2938 : Ojs.t) -> intf_of_js __tags_of_js x2938
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x2936 : __tags intf) -> intf_to_js __tags_to_js x2936
    let (get_onloading : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x2940 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2942 : Ojs.t) ->
             fun ~this:(x2943 : t) ->
               fun ~ev:(x2944 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2942 [|(t_to_js x2943);(Event.t_to_js x2944)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2940) "onloading")
    let (set_onloading :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x2945 : 'tags this) ->
        fun (x2946 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2945) "onloading"
            (Ojs.option_to_js
               (fun (x2947 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2948 : Ojs.t) ->
                       fun (x2949 : Ojs.t) ->
                         any_to_js
                           (x2947 ~this:(t_of_js x2948)
                              ~ev:(Event.t_of_js x2949)))) x2946)
    let (get_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x2951 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2953 : Ojs.t) ->
             fun ~this:(x2954 : t) ->
               fun ~ev:(x2955 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2953 [|(t_to_js x2954);(Event.t_to_js x2955)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2951) "onloadingdone")
    let (set_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x2956 : 'tags this) ->
        fun (x2957 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2956) "onloadingdone"
            (Ojs.option_to_js
               (fun (x2958 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2959 : Ojs.t) ->
                       fun (x2960 : Ojs.t) ->
                         any_to_js
                           (x2958 ~this:(t_of_js x2959)
                              ~ev:(Event.t_of_js x2960)))) x2957)
    let (get_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x2962 : 'tags this) ->
        Ojs.option_of_js
          (fun (x2964 : Ojs.t) ->
             fun ~this:(x2965 : t) ->
               fun ~ev:(x2966 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2964 [|(t_to_js x2965);(Event.t_to_js x2966)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2962) "onloadingerror")
    let (set_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x2967 : 'tags this) ->
        fun (x2968 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2967) "onloadingerror"
            (Ojs.option_to_js
               (fun (x2969 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2970 : Ojs.t) ->
                       fun (x2971 : Ojs.t) ->
                         any_to_js
                           (x2969 ~this:(t_of_js x2970)
                              ~ev:(Event.t_of_js x2971)))) x2968)
    let (get_ready : 'tags this -> t Promise.t_1) =
      fun (x2973 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2973) "ready")
    let (get_status : 'tags this -> FontFaceSetLoadStatus.t) =
      fun (x2976 : 'tags this) ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2976) "status")
    let (check : 'tags this -> font:string -> ?text:string -> unit -> bool) =
      fun (x2982 : 'tags this) ->
        fun ~font:(x2978 : string) ->
          fun ?text:(x2979 : string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2984 = this_to_js Obj.magic x2982 in
                 Ojs.call (Ojs.get_prop_ascii x2984 "check") "apply"
                   [|x2984;((let x2980 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2980 "push"
                                  [|(Ojs.string_to_js x2978)|]);
                             (match x2979 with
                              | Some x2981 ->
                                  ignore
                                    (Ojs.call x2980 "push"
                                       [|(Ojs.string_to_js x2981)|])
                              | None -> ());
                             x2980))|])
    let (load :
      'tags this ->
        font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1)
      =
      fun (x2989 : 'tags this) ->
        fun ~font:(x2985 : string) ->
          fun ?text:(x2986 : string option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x2992 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2992)
                (let x2991 = this_to_js Obj.magic x2989 in
                 Ojs.call (Ojs.get_prop_ascii x2991 "load") "apply"
                   [|x2991;((let x2987 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2987 "push"
                                  [|(Ojs.string_to_js x2985)|]);
                             (match x2986 with
                              | Some x2988 ->
                                  ignore
                                    (Ojs.call x2987 "push"
                                       [|(Ojs.string_to_js x2988)|])
                              | None -> ());
                             x2987))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x3001 : 'tags this) ->
        fun
          ~callbackfn:(x2994 :
                        value:FontFace.t ->
                          key:FontFace.t -> parent:t -> unit)
          ->
          fun ?thisArg:(x2995 : any option) ->
            fun () ->
              ignore
                (let x3003 = this_to_js Obj.magic x3001 in
                 Ojs.call (Ojs.get_prop_ascii x3003 "forEach") "apply"
                   [|x3003;((let x2996 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2996 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2998 : Ojs.t) ->
                                          fun (x2999 : Ojs.t) ->
                                            fun (x3000 : Ojs.t) ->
                                              x2994
                                                ~value:(FontFace.t_of_js
                                                          x2998)
                                                ~key:(FontFace.t_of_js x2999)
                                                ~parent:(t_of_js x3000)))|]);
                             (match x2995 with
                              | Some x2997 ->
                                  ignore
                                    (Ojs.call x2996 "push"
                                       [|(any_to_js x2997)|])
                              | None -> ());
                             x2996))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3013 : 'tags this) ->
        fun ~type_:(x3004 : 'K) ->
          fun ~listener:(x3005 : this:t -> ev:any -> any) ->
            fun
              ?options:(x3006 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3015 = this_to_js Obj.magic x3013 in
                   Ojs.call (Ojs.get_prop_ascii x3015 "addEventListener")
                     "apply"
                     [|x3015;((let x3007 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3007 "push" [|(Obj.magic x3004)|]);
                               ignore
                                 (Ojs.call x3007 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3011 : Ojs.t) ->
                                            fun (x3012 : Ojs.t) ->
                                              any_to_js
                                                (x3005 ~this:(t_of_js x3011)
                                                   ~ev:(any_of_js x3012))))|]);
                               (match x3006 with
                                | Some x3008 ->
                                    ignore
                                      (Ojs.call x3007 "push"
                                         [|((match x3008 with
                                             | `U1 x3009 ->
                                                 Ojs.bool_to_js x3009
                                             | `U2 x3010 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x3010))|])
                                | None -> ());
                               x3007))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3023 : 'tags this) ->
        fun ~type_:(x3016 : string) ->
          fun ~listener:(x3017 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x3018 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3025 = this_to_js Obj.magic x3023 in
                   Ojs.call (Ojs.get_prop_ascii x3025 "addEventListener")
                     "apply"
                     [|x3025;((let x3019 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3019 "push"
                                    [|(Ojs.string_to_js x3016)|]);
                               ignore
                                 (Ojs.call x3019 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x3017)|]);
                               (match x3018 with
                                | Some x3020 ->
                                    ignore
                                      (Ojs.call x3019 "push"
                                         [|((match x3020 with
                                             | `U1 x3021 ->
                                                 Ojs.bool_to_js x3021
                                             | `U2 x3022 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x3022))|])
                                | None -> ());
                               x3019))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3035 : 'tags this) ->
        fun ~type_:(x3026 : 'K) ->
          fun ~listener:(x3027 : this:t -> ev:any -> any) ->
            fun
              ?options:(x3028 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3037 = this_to_js Obj.magic x3035 in
                   Ojs.call (Ojs.get_prop_ascii x3037 "removeEventListener")
                     "apply"
                     [|x3037;((let x3029 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3029 "push" [|(Obj.magic x3026)|]);
                               ignore
                                 (Ojs.call x3029 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3033 : Ojs.t) ->
                                            fun (x3034 : Ojs.t) ->
                                              any_to_js
                                                (x3027 ~this:(t_of_js x3033)
                                                   ~ev:(any_of_js x3034))))|]);
                               (match x3028 with
                                | Some x3030 ->
                                    ignore
                                      (Ojs.call x3029 "push"
                                         [|((match x3030 with
                                             | `U1 x3031 ->
                                                 Ojs.bool_to_js x3031
                                             | `U2 x3032 ->
                                                 EventListenerOptions.t_to_js
                                                   x3032))|])
                                | None -> ());
                               x3029))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x3045 : 'tags this) ->
        fun ~type_:(x3038 : string) ->
          fun ~listener:(x3039 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x3040 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x3047 = this_to_js Obj.magic x3045 in
                   Ojs.call (Ojs.get_prop_ascii x3047 "removeEventListener")
                     "apply"
                     [|x3047;((let x3041 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3041 "push"
                                    [|(Ojs.string_to_js x3038)|]);
                               ignore
                                 (Ojs.call x3041 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x3039)|]);
                               (match x3040 with
                                | Some x3042 ->
                                    ignore
                                      (Ojs.call x3041 "push"
                                         [|((match x3042 with
                                             | `U1 x3043 ->
                                                 Ojs.bool_to_js x3043
                                             | `U2 x3044 ->
                                                 EventListenerOptions.t_to_js
                                                   x3044))|])
                                | None -> ());
                               x3041))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             "prototype")
    let (create : FontFace.t list -> t) =
      fun (x3048 : FontFace.t list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             [|(Ojs.list_to_js FontFace.t_to_js x3048)|])
  end
module FontsStatic =
  struct
    let (onloading :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x3050 : Ojs.t) ->
             fun ~this:(x3051 : FontFaceSet.t) ->
               fun ~ev:(x3052 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3050
                      [|(FontFaceSet.t_to_js x3051);(Event.t_to_js x3052)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloading")
    let (onloadingdone :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x3053 : Ojs.t) ->
             fun ~this:(x3054 : FontFaceSet.t) ->
               fun ~ev:(x3055 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3053
                      [|(FontFaceSet.t_to_js x3054);(Event.t_to_js x3055)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingdone")
    let (onloadingerror :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) option) =
      fun () ->
        Ojs.option_of_js
          (fun (x3056 : Ojs.t) ->
             fun ~this:(x3057 : FontFaceSet.t) ->
               fun ~ev:(x3058 : Event.t) ->
                 any_of_js
                   (Ojs.apply x3056
                      [|(FontFaceSet.t_to_js x3057);(Event.t_to_js x3058)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingerror")
    let (ready : unit -> FontFaceSet.t Promise.t_1) =
      fun () ->
        Promise.t_1_of_js FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts") "ready")
    let (status : unit -> FontFaceSetLoadStatus.t) =
      fun () ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "status")
    let (check : font:string -> ?text:string -> unit -> bool) =
      fun ~font:(x3060 : string) ->
        fun ?text:(x3061 : string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x3064 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x3064 "check") "apply"
                 [|x3064;((let x3062 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3062 "push"
                                [|(Ojs.string_to_js x3060)|]);
                           (match x3061 with
                            | Some x3063 ->
                                ignore
                                  (Ojs.call x3062 "push"
                                     [|(Ojs.string_to_js x3063)|])
                            | None -> ());
                           x3062))|])
    let (load :
      font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1) =
      fun ~font:(x3065 : string) ->
        fun ?text:(x3066 : string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x3070 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x3070)
              (let x3069 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x3069 "load") "apply"
                 [|x3069;((let x3067 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3067 "push"
                                [|(Ojs.string_to_js x3065)|]);
                           (match x3066 with
                            | Some x3068 ->
                                ignore
                                  (Ojs.call x3067 "push"
                                     [|(Ojs.string_to_js x3068)|])
                            | None -> ());
                           x3067))|])
    let (forEach :
      callbackfn:(value:FontFace.t ->
                    key:FontFace.t -> parent:FontFaceSet.t -> unit)
        -> ?thisArg:any -> unit -> unit)
      =
      fun
        ~callbackfn:(x3072 :
                      value:FontFace.t ->
                        key:FontFace.t -> parent:FontFaceSet.t -> unit)
        ->
        fun ?thisArg:(x3073 : any option) ->
          fun () ->
            ignore
              (let x3079 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x3079 "forEach") "apply"
                 [|x3079;((let x3074 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3074 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x3076 : Ojs.t) ->
                                        fun (x3077 : Ojs.t) ->
                                          fun (x3078 : Ojs.t) ->
                                            x3072
                                              ~value:(FontFace.t_of_js x3076)
                                              ~key:(FontFace.t_of_js x3077)
                                              ~parent:(FontFaceSet.t_of_js
                                                         x3078)))|]);
                           (match x3073 with
                            | Some x3075 ->
                                ignore
                                  (Ojs.call x3074 "push"
                                     [|(any_to_js x3075)|])
                            | None -> ());
                           x3074))|])
    let (addEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3080 : 'K) ->
        fun ~listener:(x3081 : this:FontFaceSet.t -> ev:any -> any) ->
          fun
            ?options:(x3082 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3089 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3089 "addEventListener")
                   "apply"
                   [|x3089;((let x3083 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3083 "push" [|(Obj.magic x3080)|]);
                             ignore
                               (Ojs.call x3083 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3087 : Ojs.t) ->
                                          fun (x3088 : Ojs.t) ->
                                            any_to_js
                                              (x3081
                                                 ~this:(FontFaceSet.t_of_js
                                                          x3087)
                                                 ~ev:(any_of_js x3088))))|]);
                             (match x3082 with
                              | Some x3084 ->
                                  ignore
                                    (Ojs.call x3083 "push"
                                       [|((match x3084 with
                                           | `U1 x3085 ->
                                               Ojs.bool_to_js x3085
                                           | `U2 x3086 ->
                                               AddEventListenerOptions.t_to_js
                                                 x3086))|])
                              | None -> ());
                             x3083))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3090 : string) ->
        fun ~listener:(x3091 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x3092 :
                       [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3097 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3097 "addEventListener")
                   "apply"
                   [|x3097;((let x3093 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3093 "push"
                                  [|(Ojs.string_to_js x3090)|]);
                             ignore
                               (Ojs.call x3093 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x3091)|]);
                             (match x3092 with
                              | Some x3094 ->
                                  ignore
                                    (Ojs.call x3093 "push"
                                       [|((match x3094 with
                                           | `U1 x3095 ->
                                               Ojs.bool_to_js x3095
                                           | `U2 x3096 ->
                                               AddEventListenerOptions.t_to_js
                                                 x3096))|])
                              | None -> ());
                             x3093))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3098 : 'K) ->
        fun ~listener:(x3099 : this:FontFaceSet.t -> ev:any -> any) ->
          fun
            ?options:(x3100 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3107 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3107 "removeEventListener")
                   "apply"
                   [|x3107;((let x3101 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3101 "push" [|(Obj.magic x3098)|]);
                             ignore
                               (Ojs.call x3101 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3105 : Ojs.t) ->
                                          fun (x3106 : Ojs.t) ->
                                            any_to_js
                                              (x3099
                                                 ~this:(FontFaceSet.t_of_js
                                                          x3105)
                                                 ~ev:(any_of_js x3106))))|]);
                             (match x3100 with
                              | Some x3102 ->
                                  ignore
                                    (Ojs.call x3101 "push"
                                       [|((match x3102 with
                                           | `U1 x3103 ->
                                               Ojs.bool_to_js x3103
                                           | `U2 x3104 ->
                                               EventListenerOptions.t_to_js
                                                 x3104))|])
                              | None -> ());
                             x3101))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
            unit -> unit)
      =
      fun ~type_:(x3108 : string) ->
        fun ~listener:(x3109 : EventListenerOrEventListenerObject.t) ->
          fun
            ?options:(x3110 :
                       [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                         option)
            ->
            fun () ->
              ignore
                (let x3115 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x3115 "removeEventListener")
                   "apply"
                   [|x3115;((let x3111 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3111 "push"
                                  [|(Ojs.string_to_js x3108)|]);
                             ignore
                               (Ojs.call x3111 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x3109)|]);
                             (match x3110 with
                              | Some x3112 ->
                                  ignore
                                    (Ojs.call x3111 "push"
                                       [|((match x3112 with
                                           | `U1 x3113 ->
                                               Ojs.bool_to_js x3113
                                           | `U2 x3114 ->
                                               EventListenerOptions.t_to_js
                                                 x3114))|])
                              | None -> ());
                             x3111))|])
  end
module Algorithm =
  struct
    type t = [ `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3117 : Ojs.t) -> t_of_js x3117
    and t_0_to_js : t_0 -> Ojs.t = fun (x3116 : t) -> t_to_js x3116
    type tags = [ `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3120 : Ojs.t) -> intf_of_js __tags_of_js x3120
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3118 : __tags intf) -> intf_to_js __tags_to_js x3118
    let (get_name : 'tags this -> string) =
      fun (x3122 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3122) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x3124 : 'tags this) ->
        fun (x3125 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3124) "name"
            (Ojs.string_to_js x3125)
    let (create : name:string -> unit -> t) =
      fun ~name:(x3127 : string) ->
        fun () ->
          let x3128 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3128 "name" (Ojs.string_to_js x3127);
          t_of_js x3128
    let cast_from = Obj.magic
  end
module RsaPssParams =
  struct
    type t = [ `Algorithm  | `RsaPssParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3130 : Ojs.t) -> t_of_js x3130
    and t_0_to_js : t_0 -> Ojs.t = fun (x3129 : t) -> t_to_js x3129
    type tags = [ `Algorithm  | `RsaPssParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3133 : Ojs.t) -> intf_of_js __tags_of_js x3133
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3131 : __tags intf) -> intf_to_js __tags_to_js x3131
    let (get_saltLength : 'tags this -> float) =
      fun (x3135 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3135) "saltLength")
    let (set_saltLength : 'tags this -> float -> unit) =
      fun (x3137 : 'tags this) ->
        fun (x3138 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3137) "saltLength"
            (Ojs.float_to_js x3138)
    let (create : saltLength:float -> unit -> t) =
      fun ~saltLength:(x3140 : float) ->
        fun () ->
          let x3141 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3141 "saltLength" (Ojs.float_to_js x3140);
          t_of_js x3141
    let cast_from = Obj.magic
  end
module RsaOaepParams =
  struct
    type t = [ `Algorithm  | `RsaOaepParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3143 : Ojs.t) -> t_of_js x3143
    and t_0_to_js : t_0 -> Ojs.t = fun (x3142 : t) -> t_to_js x3142
    type tags = [ `Algorithm  | `RsaOaepParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3146 : Ojs.t) -> intf_of_js __tags_of_js x3146
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3144 : __tags intf) -> intf_to_js __tags_to_js x3144
    let (get_label : 'tags this -> BufferSource.t) =
      fun (x3148 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3148) "label")
    let (set_label : 'tags this -> BufferSource.t -> unit) =
      fun (x3150 : 'tags this) ->
        fun (x3151 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3150) "label"
            (BufferSource.t_to_js x3151)
    let (create : label:BufferSource.t -> unit -> t) =
      fun ~label:(x3153 : BufferSource.t) ->
        fun () ->
          let x3154 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3154 "label" (BufferSource.t_to_js x3153);
          t_of_js x3154
    let cast_from = Obj.magic
  end
module BigInteger =
  struct
    type t = Uint8Array.t_0
    let rec t_of_js : Ojs.t -> t =
      fun (x3156 : Ojs.t) -> Uint8Array.t_0_of_js x3156
    and t_to_js : t -> Ojs.t =
      fun (x3155 : Uint8Array.t_0) -> Uint8Array.t_0_to_js x3155
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3158 : Ojs.t) -> t_of_js x3158
    and t_0_to_js : t_0 -> Ojs.t = fun (x3157 : t) -> t_to_js x3157
  end
module RsaKeyGenParams =
  struct
    type t = [ `Algorithm  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3160 : Ojs.t) -> t_of_js x3160
    and t_0_to_js : t_0 -> Ojs.t = fun (x3159 : t) -> t_to_js x3159
    type tags = [ `Algorithm  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3163 : Ojs.t) -> intf_of_js __tags_of_js x3163
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3161 : __tags intf) -> intf_to_js __tags_to_js x3161
    let (get_modulusLength : 'tags this -> float) =
      fun (x3165 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3165) "modulusLength")
    let (set_modulusLength : 'tags this -> float -> unit) =
      fun (x3167 : 'tags this) ->
        fun (x3168 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3167) "modulusLength"
            (Ojs.float_to_js x3168)
    let (get_publicExponent : 'tags this -> BigInteger.t) =
      fun (x3170 : 'tags this) ->
        BigInteger.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3170) "publicExponent")
    let (set_publicExponent : 'tags this -> BigInteger.t -> unit) =
      fun (x3172 : 'tags this) ->
        fun (x3173 : BigInteger.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3172) "publicExponent"
            (BigInteger.t_to_js x3173)
    let (create :
      modulusLength:float -> publicExponent:BigInteger.t -> unit -> t) =
      fun ~modulusLength:(x3175 : float) ->
        fun ~publicExponent:(x3176 : BigInteger.t) ->
          fun () ->
            let x3177 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3177 "modulusLength" (Ojs.float_to_js x3175);
            Ojs.set_prop_ascii x3177 "publicExponent"
              (BigInteger.t_to_js x3176);
            t_of_js x3177
    let cast_from = Obj.magic
  end
module AlgorithmIdentifier =
  struct
    type t = [ `String of string  | `Other of Algorithm.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x3182 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x3183 : Ojs.t) ->
             let x3184 = x3183 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x3184 "dummy") with
             | "String" -> `String (Ojs.string_of_js x3184)
             | "Other" -> `Other (Algorithm.t_of_js x3184)
             | _ -> assert false) x3182
    and t_to_js : t -> Ojs.t =
      fun
        (x3178 : [ `String of string  | `Other of Algorithm.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x3179 : [ `String of string  | `Other of Algorithm.t ]) ->
             match x3179 with
             | `String x3180 -> Ojs.string_to_js x3180
             | `Other x3181 -> Algorithm.t_to_js x3181) x3178
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3186 : Ojs.t) -> t_of_js x3186
    and t_0_to_js : t_0 -> Ojs.t = fun (x3185 : t) -> t_to_js x3185
  end
module HashAlgorithmIdentifier =
  struct
    type t = AlgorithmIdentifier.t
    let rec t_of_js : Ojs.t -> t =
      fun (x3188 : Ojs.t) -> AlgorithmIdentifier.t_of_js x3188
    and t_to_js : t -> Ojs.t =
      fun (x3187 : AlgorithmIdentifier.t) ->
        AlgorithmIdentifier.t_to_js x3187
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3190 : Ojs.t) -> t_of_js x3190
    and t_0_to_js : t_0 -> Ojs.t = fun (x3189 : t) -> t_to_js x3189
  end
module RsaHashedKeyGenParams =
  struct
    type t =
      [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3192 : Ojs.t) -> t_of_js x3192
    and t_0_to_js : t_0 -> Ojs.t = fun (x3191 : t) -> t_to_js x3191
    type tags = [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3195 : Ojs.t) -> intf_of_js __tags_of_js x3195
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3193 : __tags intf) -> intf_to_js __tags_to_js x3193
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3197 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3197) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3199 : 'tags this) ->
        fun (x3200 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3199) "hash"
            (HashAlgorithmIdentifier.t_to_js x3200)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x3202 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x3203 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3203 "hash"
            (HashAlgorithmIdentifier.t_to_js x3202);
          t_of_js x3203
    let cast_from = Obj.magic
  end
module RsaHashedImportParams =
  struct
    type t = [ `Algorithm  | `RsaHashedImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3205 : Ojs.t) -> t_of_js x3205
    and t_0_to_js : t_0 -> Ojs.t = fun (x3204 : t) -> t_to_js x3204
    type tags = [ `Algorithm  | `RsaHashedImportParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3208 : Ojs.t) -> intf_of_js __tags_of_js x3208
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3206 : __tags intf) -> intf_to_js __tags_to_js x3206
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3210 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3210) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3212 : 'tags this) ->
        fun (x3213 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3212) "hash"
            (HashAlgorithmIdentifier.t_to_js x3213)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x3215 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x3216 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3216 "hash"
            (HashAlgorithmIdentifier.t_to_js x3215);
          t_of_js x3216
    let cast_from = Obj.magic
  end
module Pbkdf2Params =
  struct
    type t = [ `Algorithm  | `Pbkdf2Params ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3218 : Ojs.t) -> t_of_js x3218
    and t_0_to_js : t_0 -> Ojs.t = fun (x3217 : t) -> t_to_js x3217
    type tags = [ `Algorithm  | `Pbkdf2Params ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3221 : Ojs.t) -> intf_of_js __tags_of_js x3221
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3219 : __tags intf) -> intf_to_js __tags_to_js x3219
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3223 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3223) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3225 : 'tags this) ->
        fun (x3226 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3225) "hash"
            (HashAlgorithmIdentifier.t_to_js x3226)
    let (get_iterations : 'tags this -> float) =
      fun (x3228 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3228) "iterations")
    let (set_iterations : 'tags this -> float -> unit) =
      fun (x3230 : 'tags this) ->
        fun (x3231 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3230) "iterations"
            (Ojs.float_to_js x3231)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x3233 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3233) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x3235 : 'tags this) ->
        fun (x3236 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3235) "salt"
            (BufferSource.t_to_js x3236)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        iterations:float -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x3238 : HashAlgorithmIdentifier.t) ->
        fun ~iterations:(x3239 : float) ->
          fun ~salt:(x3240 : BufferSource.t) ->
            fun () ->
              let x3241 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3241 "hash"
                (HashAlgorithmIdentifier.t_to_js x3238);
              Ojs.set_prop_ascii x3241 "iterations" (Ojs.float_to_js x3239);
              Ojs.set_prop_ascii x3241 "salt" (BufferSource.t_to_js x3240);
              t_of_js x3241
    let cast_from = Obj.magic
  end
module KeyFormat =
  struct
    type t = [ `L_s152_pkcs8  | `L_s162_raw  | `L_s186_spki  | `L_s99_jwk ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3243 : Ojs.t) ->
        let x3244 = x3243 in
        match Ojs.string_of_js x3244 with
        | "pkcs8" -> `L_s152_pkcs8
        | "raw" -> `L_s162_raw
        | "spki" -> `L_s186_spki
        | "jwk" -> `L_s99_jwk
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3242 :
          [ `L_s152_pkcs8  | `L_s162_raw  | `L_s186_spki  | `L_s99_jwk ])
        ->
        match x3242 with
        | `L_s152_pkcs8 -> Ojs.string_to_js "pkcs8"
        | `L_s162_raw -> Ojs.string_to_js "raw"
        | `L_s186_spki -> Ojs.string_to_js "spki"
        | `L_s99_jwk -> Ojs.string_to_js "jwk"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3246 : Ojs.t) -> t_of_js x3246
    and t_0_to_js : t_0 -> Ojs.t = fun (x3245 : t) -> t_to_js x3245
  end
module RsaOtherPrimesInfo =
  struct
    type t = [ `RsaOtherPrimesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3248 : Ojs.t) -> t_of_js x3248
    and t_0_to_js : t_0 -> Ojs.t = fun (x3247 : t) -> t_to_js x3247
    type tags = [ `RsaOtherPrimesInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3251 : Ojs.t) -> intf_of_js __tags_of_js x3251
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3249 : __tags intf) -> intf_to_js __tags_to_js x3249
    let (get_d : 'tags this -> string) =
      fun (x3253 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3253) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x3255 : 'tags this) ->
        fun (x3256 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3255) "d"
            (Ojs.string_to_js x3256)
    let (get_r : 'tags this -> string) =
      fun (x3258 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3258) "r")
    let (set_r : 'tags this -> string -> unit) =
      fun (x3260 : 'tags this) ->
        fun (x3261 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3260) "r"
            (Ojs.string_to_js x3261)
    let (get_t : 'tags this -> string) =
      fun (x3263 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3263) "t")
    let (set_t : 'tags this -> string -> unit) =
      fun (x3265 : 'tags this) ->
        fun (x3266 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3265) "t"
            (Ojs.string_to_js x3266)
    let (create : d:string -> r:string -> t:string -> unit -> t) =
      fun ~d:(x3268 : string) ->
        fun ~r:(x3269 : string) ->
          fun ~t:(x3270 : string) ->
            fun () ->
              let x3271 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3271 "d" (Ojs.string_to_js x3268);
              Ojs.set_prop_ascii x3271 "r" (Ojs.string_to_js x3269);
              Ojs.set_prop_ascii x3271 "t" (Ojs.string_to_js x3270);
              t_of_js x3271
    let cast_from = Obj.magic
  end
module JsonWebKey =
  struct
    type t = [ `JsonWebKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3273 : Ojs.t) -> t_of_js x3273
    and t_0_to_js : t_0 -> Ojs.t = fun (x3272 : t) -> t_to_js x3272
    type tags = [ `JsonWebKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3276 : Ojs.t) -> intf_of_js __tags_of_js x3276
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3274 : __tags intf) -> intf_to_js __tags_to_js x3274
    let (get_alg : 'tags this -> string) =
      fun (x3278 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3278) "alg")
    let (set_alg : 'tags this -> string -> unit) =
      fun (x3280 : 'tags this) ->
        fun (x3281 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3280) "alg"
            (Ojs.string_to_js x3281)
    let (get_crv : 'tags this -> string) =
      fun (x3283 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3283) "crv")
    let (set_crv : 'tags this -> string -> unit) =
      fun (x3285 : 'tags this) ->
        fun (x3286 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3285) "crv"
            (Ojs.string_to_js x3286)
    let (get_d : 'tags this -> string) =
      fun (x3288 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3288) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x3290 : 'tags this) ->
        fun (x3291 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3290) "d"
            (Ojs.string_to_js x3291)
    let (get_dp : 'tags this -> string) =
      fun (x3293 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3293) "dp")
    let (set_dp : 'tags this -> string -> unit) =
      fun (x3295 : 'tags this) ->
        fun (x3296 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3295) "dp"
            (Ojs.string_to_js x3296)
    let (get_dq : 'tags this -> string) =
      fun (x3298 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3298) "dq")
    let (set_dq : 'tags this -> string -> unit) =
      fun (x3300 : 'tags this) ->
        fun (x3301 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3300) "dq"
            (Ojs.string_to_js x3301)
    let (get_e : 'tags this -> string) =
      fun (x3303 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3303) "e")
    let (set_e : 'tags this -> string -> unit) =
      fun (x3305 : 'tags this) ->
        fun (x3306 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3305) "e"
            (Ojs.string_to_js x3306)
    let (get_ext : 'tags this -> bool) =
      fun (x3308 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3308) "ext")
    let (set_ext : 'tags this -> bool -> unit) =
      fun (x3310 : 'tags this) ->
        fun (x3311 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3310) "ext"
            (Ojs.bool_to_js x3311)
    let (get_k : 'tags this -> string) =
      fun (x3313 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3313) "k")
    let (set_k : 'tags this -> string -> unit) =
      fun (x3315 : 'tags this) ->
        fun (x3316 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3315) "k"
            (Ojs.string_to_js x3316)
    let (get_key_ops : 'tags this -> string list) =
      fun (x3318 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3318) "key_ops")
    let (set_key_ops : 'tags this -> string list -> unit) =
      fun (x3321 : 'tags this) ->
        fun (x3322 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3321) "key_ops"
            (Ojs.list_to_js Ojs.string_to_js x3322)
    let (get_kty : 'tags this -> string) =
      fun (x3325 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3325) "kty")
    let (set_kty : 'tags this -> string -> unit) =
      fun (x3327 : 'tags this) ->
        fun (x3328 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3327) "kty"
            (Ojs.string_to_js x3328)
    let (get_n : 'tags this -> string) =
      fun (x3330 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3330) "n")
    let (set_n : 'tags this -> string -> unit) =
      fun (x3332 : 'tags this) ->
        fun (x3333 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3332) "n"
            (Ojs.string_to_js x3333)
    let (get_oth : 'tags this -> RsaOtherPrimesInfo.t list) =
      fun (x3335 : 'tags this) ->
        Ojs.list_of_js RsaOtherPrimesInfo.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3335) "oth")
    let (set_oth : 'tags this -> RsaOtherPrimesInfo.t list -> unit) =
      fun (x3338 : 'tags this) ->
        fun (x3339 : RsaOtherPrimesInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3338) "oth"
            (Ojs.list_to_js RsaOtherPrimesInfo.t_to_js x3339)
    let (get_p : 'tags this -> string) =
      fun (x3342 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3342) "p")
    let (set_p : 'tags this -> string -> unit) =
      fun (x3344 : 'tags this) ->
        fun (x3345 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3344) "p"
            (Ojs.string_to_js x3345)
    let (get_q : 'tags this -> string) =
      fun (x3347 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3347) "q")
    let (set_q : 'tags this -> string -> unit) =
      fun (x3349 : 'tags this) ->
        fun (x3350 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3349) "q"
            (Ojs.string_to_js x3350)
    let (get_qi : 'tags this -> string) =
      fun (x3352 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3352) "qi")
    let (set_qi : 'tags this -> string -> unit) =
      fun (x3354 : 'tags this) ->
        fun (x3355 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3354) "qi"
            (Ojs.string_to_js x3355)
    let (get_use : 'tags this -> string) =
      fun (x3357 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3357) "use")
    let (set_use : 'tags this -> string -> unit) =
      fun (x3359 : 'tags this) ->
        fun (x3360 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3359) "use"
            (Ojs.string_to_js x3360)
    let (get_x : 'tags this -> string) =
      fun (x3362 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3362) "x")
    let (set_x : 'tags this -> string -> unit) =
      fun (x3364 : 'tags this) ->
        fun (x3365 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3364) "x"
            (Ojs.string_to_js x3365)
    let (get_y : 'tags this -> string) =
      fun (x3367 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3367) "y")
    let (set_y : 'tags this -> string -> unit) =
      fun (x3369 : 'tags this) ->
        fun (x3370 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3369) "y"
            (Ojs.string_to_js x3370)
    let (create :
      alg:string ->
        crv:string ->
          d:string ->
            dp:string ->
              dq:string ->
                e:string ->
                  ext:bool ->
                    k:string ->
                      key_ops:string list ->
                        kty:string ->
                          n:string ->
                            oth:RsaOtherPrimesInfo.t list ->
                              p:string ->
                                q:string ->
                                  qi:string ->
                                    use:string ->
                                      x:string -> y:string -> unit -> t)
      =
      fun ~alg:(x3372 : string) ->
        fun ~crv:(x3373 : string) ->
          fun ~d:(x3374 : string) ->
            fun ~dp:(x3375 : string) ->
              fun ~dq:(x3376 : string) ->
                fun ~e:(x3377 : string) ->
                  fun ~ext:(x3378 : bool) ->
                    fun ~k:(x3379 : string) ->
                      fun ~key_ops:(x3380 : string list) ->
                        fun ~kty:(x3381 : string) ->
                          fun ~n:(x3382 : string) ->
                            fun ~oth:(x3383 : RsaOtherPrimesInfo.t list) ->
                              fun ~p:(x3384 : string) ->
                                fun ~q:(x3385 : string) ->
                                  fun ~qi:(x3386 : string) ->
                                    fun ~use:(x3387 : string) ->
                                      fun ~x:(x3388 : string) ->
                                        fun ~y:(x3389 : string) ->
                                          fun () ->
                                            let x3390 = Ojs.empty_obj () in
                                            Ojs.set_prop_ascii x3390 "alg"
                                              (Ojs.string_to_js x3372);
                                            Ojs.set_prop_ascii x3390 "crv"
                                              (Ojs.string_to_js x3373);
                                            Ojs.set_prop_ascii x3390 "d"
                                              (Ojs.string_to_js x3374);
                                            Ojs.set_prop_ascii x3390 "dp"
                                              (Ojs.string_to_js x3375);
                                            Ojs.set_prop_ascii x3390 "dq"
                                              (Ojs.string_to_js x3376);
                                            Ojs.set_prop_ascii x3390 "e"
                                              (Ojs.string_to_js x3377);
                                            Ojs.set_prop_ascii x3390 "ext"
                                              (Ojs.bool_to_js x3378);
                                            Ojs.set_prop_ascii x3390 "k"
                                              (Ojs.string_to_js x3379);
                                            Ojs.set_prop_ascii x3390 "keyOps"
                                              (Ojs.list_to_js
                                                 Ojs.string_to_js x3380);
                                            Ojs.set_prop_ascii x3390 "kty"
                                              (Ojs.string_to_js x3381);
                                            Ojs.set_prop_ascii x3390 "n"
                                              (Ojs.string_to_js x3382);
                                            Ojs.set_prop_ascii x3390 "oth"
                                              (Ojs.list_to_js
                                                 RsaOtherPrimesInfo.t_to_js
                                                 x3383);
                                            Ojs.set_prop_ascii x3390 "p"
                                              (Ojs.string_to_js x3384);
                                            Ojs.set_prop_ascii x3390 "q"
                                              (Ojs.string_to_js x3385);
                                            Ojs.set_prop_ascii x3390 "qi"
                                              (Ojs.string_to_js x3386);
                                            Ojs.set_prop_ascii x3390 "use"
                                              (Ojs.string_to_js x3387);
                                            Ojs.set_prop_ascii x3390 "x"
                                              (Ojs.string_to_js x3388);
                                            Ojs.set_prop_ascii x3390 "y"
                                              (Ojs.string_to_js x3389);
                                            t_of_js x3390
    let cast_from = Obj.magic
  end
module HmacKeyGenParams =
  struct
    type t = [ `Algorithm  | `HmacKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3394 : Ojs.t) -> t_of_js x3394
    and t_0_to_js : t_0 -> Ojs.t = fun (x3393 : t) -> t_to_js x3393
    type tags = [ `Algorithm  | `HmacKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3397 : Ojs.t) -> intf_of_js __tags_of_js x3397
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3395 : __tags intf) -> intf_to_js __tags_to_js x3395
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3399 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3399) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3401 : 'tags this) ->
        fun (x3402 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3401) "hash"
            (HashAlgorithmIdentifier.t_to_js x3402)
    let (get_length : 'tags this -> float) =
      fun (x3404 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3404) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3406 : 'tags this) ->
        fun (x3407 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3406) "length"
            (Ojs.float_to_js x3407)
    let (create :
      hash:HashAlgorithmIdentifier.t -> length:float -> unit -> t) =
      fun ~hash:(x3409 : HashAlgorithmIdentifier.t) ->
        fun ~length:(x3410 : float) ->
          fun () ->
            let x3411 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3411 "hash"
              (HashAlgorithmIdentifier.t_to_js x3409);
            Ojs.set_prop_ascii x3411 "length" (Ojs.float_to_js x3410);
            t_of_js x3411
    let cast_from = Obj.magic
  end
module HmacImportParams =
  struct
    type t = [ `Algorithm  | `HmacImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3413 : Ojs.t) -> t_of_js x3413
    and t_0_to_js : t_0 -> Ojs.t = fun (x3412 : t) -> t_to_js x3412
    type tags = [ `Algorithm  | `HmacImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3416 : Ojs.t) -> intf_of_js __tags_of_js x3416
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3414 : __tags intf) -> intf_to_js __tags_to_js x3414
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3418 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3418) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3420 : 'tags this) ->
        fun (x3421 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3420) "hash"
            (HashAlgorithmIdentifier.t_to_js x3421)
    let (get_length : 'tags this -> float) =
      fun (x3423 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3423) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3425 : 'tags this) ->
        fun (x3426 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3425) "length"
            (Ojs.float_to_js x3426)
    let (create :
      hash:HashAlgorithmIdentifier.t -> length:float -> unit -> t) =
      fun ~hash:(x3428 : HashAlgorithmIdentifier.t) ->
        fun ~length:(x3429 : float) ->
          fun () ->
            let x3430 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3430 "hash"
              (HashAlgorithmIdentifier.t_to_js x3428);
            Ojs.set_prop_ascii x3430 "length" (Ojs.float_to_js x3429);
            t_of_js x3430
    let cast_from = Obj.magic
  end
module HkdfParams =
  struct
    type t = [ `Algorithm  | `HkdfParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3432 : Ojs.t) -> t_of_js x3432
    and t_0_to_js : t_0 -> Ojs.t = fun (x3431 : t) -> t_to_js x3431
    type tags = [ `Algorithm  | `HkdfParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3435 : Ojs.t) -> intf_of_js __tags_of_js x3435
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3433 : __tags intf) -> intf_to_js __tags_to_js x3433
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3437 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3437) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3439 : 'tags this) ->
        fun (x3440 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3439) "hash"
            (HashAlgorithmIdentifier.t_to_js x3440)
    let (get_info : 'tags this -> BufferSource.t) =
      fun (x3442 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3442) "info")
    let (set_info : 'tags this -> BufferSource.t -> unit) =
      fun (x3444 : 'tags this) ->
        fun (x3445 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3444) "info"
            (BufferSource.t_to_js x3445)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x3447 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3447) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x3449 : 'tags this) ->
        fun (x3450 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3449) "salt"
            (BufferSource.t_to_js x3450)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        info:BufferSource.t -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x3452 : HashAlgorithmIdentifier.t) ->
        fun ~info:(x3453 : BufferSource.t) ->
          fun ~salt:(x3454 : BufferSource.t) ->
            fun () ->
              let x3455 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3455 "hash"
                (HashAlgorithmIdentifier.t_to_js x3452);
              Ojs.set_prop_ascii x3455 "info" (BufferSource.t_to_js x3453);
              Ojs.set_prop_ascii x3455 "salt" (BufferSource.t_to_js x3454);
              t_of_js x3455
    let cast_from = Obj.magic
  end
module EcdsaParams =
  struct
    type t = [ `Algorithm  | `EcdsaParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3457 : Ojs.t) -> t_of_js x3457
    and t_0_to_js : t_0 -> Ojs.t = fun (x3456 : t) -> t_to_js x3456
    type tags = [ `Algorithm  | `EcdsaParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3460 : Ojs.t) -> intf_of_js __tags_of_js x3460
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3458 : __tags intf) -> intf_to_js __tags_to_js x3458
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x3462 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3462) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x3464 : 'tags this) ->
        fun (x3465 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3464) "hash"
            (HashAlgorithmIdentifier.t_to_js x3465)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x3467 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x3468 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3468 "hash"
            (HashAlgorithmIdentifier.t_to_js x3467);
          t_of_js x3468
    let cast_from = Obj.magic
  end
module KeyUsage =
  struct
    type t =
      [ `L_s182_sign  | `L_s204_unwrapKey  | `L_s208_verify 
      | `L_s216_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
      | `L_s60_deriveKey  | `L_s66_encrypt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3470 : Ojs.t) ->
        let x3471 = x3470 in
        match Ojs.string_of_js x3471 with
        | "sign" -> `L_s182_sign
        | "unwrapKey" -> `L_s204_unwrapKey
        | "verify" -> `L_s208_verify
        | "wrapKey" -> `L_s216_wrapKey
        | "decrypt" -> `L_s56_decrypt
        | "deriveBits" -> `L_s59_deriveBits
        | "deriveKey" -> `L_s60_deriveKey
        | "encrypt" -> `L_s66_encrypt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3469 :
          [ `L_s182_sign  | `L_s204_unwrapKey  | `L_s208_verify 
          | `L_s216_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
          | `L_s60_deriveKey  | `L_s66_encrypt ])
        ->
        match x3469 with
        | `L_s182_sign -> Ojs.string_to_js "sign"
        | `L_s204_unwrapKey -> Ojs.string_to_js "unwrapKey"
        | `L_s208_verify -> Ojs.string_to_js "verify"
        | `L_s216_wrapKey -> Ojs.string_to_js "wrapKey"
        | `L_s56_decrypt -> Ojs.string_to_js "decrypt"
        | `L_s59_deriveBits -> Ojs.string_to_js "deriveBits"
        | `L_s60_deriveKey -> Ojs.string_to_js "deriveKey"
        | `L_s66_encrypt -> Ojs.string_to_js "encrypt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3473 : Ojs.t) -> t_of_js x3473
    and t_0_to_js : t_0 -> Ojs.t = fun (x3472 : t) -> t_to_js x3472
  end
module KeyType =
  struct
    type t = [ `L_s157_private  | `L_s160_public  | `L_s178_secret ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3475 : Ojs.t) ->
        let x3476 = x3475 in
        match Ojs.string_of_js x3476 with
        | "private" -> `L_s157_private
        | "public" -> `L_s160_public
        | "secret" -> `L_s178_secret
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3474 : [ `L_s157_private  | `L_s160_public  | `L_s178_secret ])
        ->
        match x3474 with
        | `L_s157_private -> Ojs.string_to_js "private"
        | `L_s160_public -> Ojs.string_to_js "public"
        | `L_s178_secret -> Ojs.string_to_js "secret"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3478 : Ojs.t) -> t_of_js x3478
    and t_0_to_js : t_0 -> Ojs.t = fun (x3477 : t) -> t_to_js x3477
  end
module KeyAlgorithm =
  struct
    type t = [ `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3480 : Ojs.t) -> t_of_js x3480
    and t_0_to_js : t_0 -> Ojs.t = fun (x3479 : t) -> t_to_js x3479
    type tags = [ `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3483 : Ojs.t) -> intf_of_js __tags_of_js x3483
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3481 : __tags intf) -> intf_to_js __tags_to_js x3481
    let (get_name : 'tags this -> string) =
      fun (x3485 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3485) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x3487 : 'tags this) ->
        fun (x3488 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3487) "name"
            (Ojs.string_to_js x3488)
    let (create : name:string -> unit -> t) =
      fun ~name:(x3490 : string) ->
        fun () ->
          let x3491 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3491 "name" (Ojs.string_to_js x3490);
          t_of_js x3491
    let cast_from = Obj.magic
  end
module CryptoKey =
  struct
    type t = [ `CryptoKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3493 : Ojs.t) -> t_of_js x3493
    and t_0_to_js : t_0 -> Ojs.t = fun (x3492 : t) -> t_to_js x3492
    type tags = [ `CryptoKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3496 : Ojs.t) -> intf_of_js __tags_of_js x3496
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3494 : __tags intf) -> intf_to_js __tags_to_js x3494
    let (get_algorithm : 'tags this -> KeyAlgorithm.t) =
      fun (x3498 : 'tags this) ->
        KeyAlgorithm.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3498) "algorithm")
    let (get_extractable : 'tags this -> bool) =
      fun (x3500 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3500) "extractable")
    let (get_type : 'tags this -> KeyType.t) =
      fun (x3502 : 'tags this) ->
        KeyType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3502) "type")
    let (get_usages : 'tags this -> KeyUsage.t list) =
      fun (x3504 : 'tags this) ->
        Ojs.list_of_js KeyUsage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3504) "usages")
    let (create :
      algorithm:KeyAlgorithm.t ->
        extractable:bool ->
          type_:KeyType.t -> usages:KeyUsage.t list -> unit -> t)
      =
      fun ~algorithm:(x3507 : KeyAlgorithm.t) ->
        fun ~extractable:(x3508 : bool) ->
          fun ~type_:(x3509 : KeyType.t) ->
            fun ~usages:(x3510 : KeyUsage.t list) ->
              fun () ->
                let x3511 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x3511 "algorithm"
                  (KeyAlgorithm.t_to_js x3507);
                Ojs.set_prop_ascii x3511 "extractable" (Ojs.bool_to_js x3508);
                Ojs.set_prop_ascii x3511 "type" (KeyType.t_to_js x3509);
                Ojs.set_prop_ascii x3511 "usages"
                  (Ojs.list_to_js KeyUsage.t_to_js x3510);
                t_of_js x3511
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CryptoKey")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CryptoKey") [||])
  end
module EcdhKeyDeriveParams =
  struct
    type t = [ `Algorithm  | `EcdhKeyDeriveParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3514 : Ojs.t) -> t_of_js x3514
    and t_0_to_js : t_0 -> Ojs.t = fun (x3513 : t) -> t_to_js x3513
    type tags = [ `Algorithm  | `EcdhKeyDeriveParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3517 : Ojs.t) -> intf_of_js __tags_of_js x3517
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3515 : __tags intf) -> intf_to_js __tags_to_js x3515
    let (get_public : 'tags this -> CryptoKey.t) =
      fun (x3519 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3519) "public")
    let (set_public : 'tags this -> CryptoKey.t -> unit) =
      fun (x3521 : 'tags this) ->
        fun (x3522 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3521) "public"
            (CryptoKey.t_to_js x3522)
    let (create : public:CryptoKey.t -> unit -> t) =
      fun ~public:(x3524 : CryptoKey.t) ->
        fun () ->
          let x3525 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3525 "public" (CryptoKey.t_to_js x3524);
          t_of_js x3525
    let cast_from = Obj.magic
  end
module NamedCurve =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x3527 : Ojs.t) -> Ojs.string_of_js x3527
    and t_to_js : t -> Ojs.t = fun (x3526 : string) -> Ojs.string_to_js x3526
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3529 : Ojs.t) -> t_of_js x3529
    and t_0_to_js : t_0 -> Ojs.t = fun (x3528 : t) -> t_to_js x3528
  end
module EcKeyImportParams =
  struct
    type t = [ `Algorithm  | `EcKeyImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3531 : Ojs.t) -> t_of_js x3531
    and t_0_to_js : t_0 -> Ojs.t = fun (x3530 : t) -> t_to_js x3530
    type tags = [ `Algorithm  | `EcKeyImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3534 : Ojs.t) -> intf_of_js __tags_of_js x3534
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3532 : __tags intf) -> intf_to_js __tags_to_js x3532
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x3536 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3536) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x3538 : 'tags this) ->
        fun (x3539 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3538) "namedCurve"
            (NamedCurve.t_to_js x3539)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x3541 : NamedCurve.t) ->
        fun () ->
          let x3542 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3542 "namedCurve" (NamedCurve.t_to_js x3541);
          t_of_js x3542
    let cast_from = Obj.magic
  end
module EcKeyGenParams =
  struct
    type t = [ `Algorithm  | `EcKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3544 : Ojs.t) -> t_of_js x3544
    and t_0_to_js : t_0 -> Ojs.t = fun (x3543 : t) -> t_to_js x3543
    type tags = [ `Algorithm  | `EcKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3547 : Ojs.t) -> intf_of_js __tags_of_js x3547
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3545 : __tags intf) -> intf_to_js __tags_to_js x3545
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x3549 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3549) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x3551 : 'tags this) ->
        fun (x3552 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3551) "namedCurve"
            (NamedCurve.t_to_js x3552)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x3554 : NamedCurve.t) ->
        fun () ->
          let x3555 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3555 "namedCurve" (NamedCurve.t_to_js x3554);
          t_of_js x3555
    let cast_from = Obj.magic
  end
module CryptoKeyPair =
  struct
    type t = [ `CryptoKeyPair ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3557 : Ojs.t) -> t_of_js x3557
    and t_0_to_js : t_0 -> Ojs.t = fun (x3556 : t) -> t_to_js x3556
    type tags = [ `CryptoKeyPair ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3560 : Ojs.t) -> intf_of_js __tags_of_js x3560
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3558 : __tags intf) -> intf_to_js __tags_to_js x3558
    let (get_privateKey : 'tags this -> CryptoKey.t) =
      fun (x3562 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3562) "privateKey")
    let (set_privateKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x3564 : 'tags this) ->
        fun (x3565 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3564) "privateKey"
            (CryptoKey.t_to_js x3565)
    let (get_publicKey : 'tags this -> CryptoKey.t) =
      fun (x3567 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3567) "publicKey")
    let (set_publicKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x3569 : 'tags this) ->
        fun (x3570 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3569) "publicKey"
            (CryptoKey.t_to_js x3570)
    let (create :
      privateKey:CryptoKey.t -> publicKey:CryptoKey.t -> unit -> t) =
      fun ~privateKey:(x3572 : CryptoKey.t) ->
        fun ~publicKey:(x3573 : CryptoKey.t) ->
          fun () ->
            let x3574 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3574 "privateKey" (CryptoKey.t_to_js x3572);
            Ojs.set_prop_ascii x3574 "publicKey" (CryptoKey.t_to_js x3573);
            t_of_js x3574
    let cast_from = Obj.magic
  end
module AesKeyGenParams =
  struct
    type t = [ `AesKeyGenParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3576 : Ojs.t) -> t_of_js x3576
    and t_0_to_js : t_0 -> Ojs.t = fun (x3575 : t) -> t_to_js x3575
    type tags = [ `AesKeyGenParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3579 : Ojs.t) -> intf_of_js __tags_of_js x3579
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3577 : __tags intf) -> intf_to_js __tags_to_js x3577
    let (get_length : 'tags this -> float) =
      fun (x3581 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3581) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3583 : 'tags this) ->
        fun (x3584 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3583) "length"
            (Ojs.float_to_js x3584)
    let (create : length:float -> unit -> t) =
      fun ~length:(x3586 : float) ->
        fun () ->
          let x3587 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3587 "length" (Ojs.float_to_js x3586);
          t_of_js x3587
    let cast_from = Obj.magic
  end
module AesKeyAlgorithm =
  struct
    type t = [ `AesKeyAlgorithm  | `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3589 : Ojs.t) -> t_of_js x3589
    and t_0_to_js : t_0 -> Ojs.t = fun (x3588 : t) -> t_to_js x3588
    type tags = [ `AesKeyAlgorithm  | `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3592 : Ojs.t) -> intf_of_js __tags_of_js x3592
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3590 : __tags intf) -> intf_to_js __tags_to_js x3590
    let (get_length : 'tags this -> float) =
      fun (x3594 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3594) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3596 : 'tags this) ->
        fun (x3597 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3596) "length"
            (Ojs.float_to_js x3597)
    let (create : length:float -> unit -> t) =
      fun ~length:(x3599 : float) ->
        fun () ->
          let x3600 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3600 "length" (Ojs.float_to_js x3599);
          t_of_js x3600
    let cast_from = Obj.magic
  end
module AesGcmParams =
  struct
    type t = [ `AesGcmParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3602 : Ojs.t) -> t_of_js x3602
    and t_0_to_js : t_0 -> Ojs.t = fun (x3601 : t) -> t_to_js x3601
    type tags = [ `AesGcmParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3605 : Ojs.t) -> intf_of_js __tags_of_js x3605
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3603 : __tags intf) -> intf_to_js __tags_to_js x3603
    let (get_additionalData : 'tags this -> BufferSource.t) =
      fun (x3607 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3607) "additionalData")
    let (set_additionalData : 'tags this -> BufferSource.t -> unit) =
      fun (x3609 : 'tags this) ->
        fun (x3610 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3609) "additionalData"
            (BufferSource.t_to_js x3610)
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x3612 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3612) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x3614 : 'tags this) ->
        fun (x3615 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3614) "iv"
            (BufferSource.t_to_js x3615)
    let (get_tagLength : 'tags this -> float) =
      fun (x3617 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3617) "tagLength")
    let (set_tagLength : 'tags this -> float -> unit) =
      fun (x3619 : 'tags this) ->
        fun (x3620 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3619) "tagLength"
            (Ojs.float_to_js x3620)
    let (create :
      additionalData:BufferSource.t ->
        iv:BufferSource.t -> tagLength:float -> unit -> t)
      =
      fun ~additionalData:(x3622 : BufferSource.t) ->
        fun ~iv:(x3623 : BufferSource.t) ->
          fun ~tagLength:(x3624 : float) ->
            fun () ->
              let x3625 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3625 "additionalData"
                (BufferSource.t_to_js x3622);
              Ojs.set_prop_ascii x3625 "iv" (BufferSource.t_to_js x3623);
              Ojs.set_prop_ascii x3625 "tagLength" (Ojs.float_to_js x3624);
              t_of_js x3625
    let cast_from = Obj.magic
  end
module AesDerivedKeyParams =
  struct
    type t = [ `AesDerivedKeyParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3627 : Ojs.t) -> t_of_js x3627
    and t_0_to_js : t_0 -> Ojs.t = fun (x3626 : t) -> t_to_js x3626
    type tags = [ `AesDerivedKeyParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3630 : Ojs.t) -> intf_of_js __tags_of_js x3630
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3628 : __tags intf) -> intf_to_js __tags_to_js x3628
    let (get_length : 'tags this -> float) =
      fun (x3632 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3632) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3634 : 'tags this) ->
        fun (x3635 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3634) "length"
            (Ojs.float_to_js x3635)
    let (create : length:float -> unit -> t) =
      fun ~length:(x3637 : float) ->
        fun () ->
          let x3638 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3638 "length" (Ojs.float_to_js x3637);
          t_of_js x3638
    let cast_from = Obj.magic
  end
module AesCtrParams =
  struct
    type t = [ `AesCtrParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3640 : Ojs.t) -> t_of_js x3640
    and t_0_to_js : t_0 -> Ojs.t = fun (x3639 : t) -> t_to_js x3639
    type tags = [ `AesCtrParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3643 : Ojs.t) -> intf_of_js __tags_of_js x3643
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3641 : __tags intf) -> intf_to_js __tags_to_js x3641
    let (get_counter : 'tags this -> BufferSource.t) =
      fun (x3645 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3645) "counter")
    let (set_counter : 'tags this -> BufferSource.t -> unit) =
      fun (x3647 : 'tags this) ->
        fun (x3648 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3647) "counter"
            (BufferSource.t_to_js x3648)
    let (get_length : 'tags this -> float) =
      fun (x3650 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3650) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x3652 : 'tags this) ->
        fun (x3653 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3652) "length"
            (Ojs.float_to_js x3653)
    let (create : counter:BufferSource.t -> length:float -> unit -> t) =
      fun ~counter:(x3655 : BufferSource.t) ->
        fun ~length:(x3656 : float) ->
          fun () ->
            let x3657 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3657 "counter" (BufferSource.t_to_js x3655);
            Ojs.set_prop_ascii x3657 "length" (Ojs.float_to_js x3656);
            t_of_js x3657
    let cast_from = Obj.magic
  end
module AesCbcParams =
  struct
    type t = [ `AesCbcParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3659 : Ojs.t) -> t_of_js x3659
    and t_0_to_js : t_0 -> Ojs.t = fun (x3658 : t) -> t_to_js x3658
    type tags = [ `AesCbcParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3662 : Ojs.t) -> intf_of_js __tags_of_js x3662
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3660 : __tags intf) -> intf_to_js __tags_to_js x3660
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x3664 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3664) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x3666 : 'tags this) ->
        fun (x3667 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3666) "iv"
            (BufferSource.t_to_js x3667)
    let (create : iv:BufferSource.t -> unit -> t) =
      fun ~iv:(x3669 : BufferSource.t) ->
        fun () ->
          let x3670 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3670 "iv" (BufferSource.t_to_js x3669);
          t_of_js x3670
    let cast_from = Obj.magic
  end
module SubtleCrypto =
  struct
    type t = [ `SubtleCrypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3672 : Ojs.t) -> t_of_js x3672
    and t_0_to_js : t_0 -> Ojs.t = fun (x3671 : t) -> t_to_js x3671
    type tags = [ `SubtleCrypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x3675 : Ojs.t) -> intf_of_js __tags_of_js x3675
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x3673 : __tags intf) -> intf_to_js __tags_to_js x3673
    let (deriveKey :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t ->
            derivedKeyType:[ `U1 of AlgorithmIdentifier.t 
                           | `U2 of AesDerivedKeyParams.t 
                           | `U3 of HmacImportParams.t 
                           | `U4 of HkdfParams.t  | `U5 of Pbkdf2Params.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x3692 : 'tags this) ->
        fun
          ~algorithm:(x3677 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x3682 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x3683 :
                                [ `U1 of AlgorithmIdentifier.t 
                                | `U2 of AesDerivedKeyParams.t 
                                | `U3 of HmacImportParams.t 
                                | `U4 of HkdfParams.t 
                                | `U5 of Pbkdf2Params.t ])
              ->
              fun ~extractable:(x3689 : bool) ->
                fun ~keyUsages:(x3690 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3692) "deriveKey"
                       [|((match x3677 with
                           | `U1 x3678 -> AlgorithmIdentifier.t_to_js x3678
                           | `U2 x3679 -> EcdhKeyDeriveParams.t_to_js x3679
                           | `U3 x3680 -> HkdfParams.t_to_js x3680
                           | `U4 x3681 -> Pbkdf2Params.t_to_js x3681));(
                         CryptoKey.t_to_js x3682);((match x3683 with
                                                    | `U1 x3684 ->
                                                        AlgorithmIdentifier.t_to_js
                                                          x3684
                                                    | `U2 x3685 ->
                                                        AesDerivedKeyParams.t_to_js
                                                          x3685
                                                    | `U3 x3686 ->
                                                        HmacImportParams.t_to_js
                                                          x3686
                                                    | `U4 x3687 ->
                                                        HkdfParams.t_to_js
                                                          x3687
                                                    | `U5 x3688 ->
                                                        Pbkdf2Params.t_to_js
                                                          x3688));(Ojs.bool_to_js
                                                                    x3689);(
                         Iterable.t_1_to_js KeyUsage.t_to_js x3690)|])
    let (generateKey :
      'tags this ->
        algorithm:[ `U1 of RsaHashedKeyGenParams.t 
                  | `U2 of EcKeyGenParams.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x3701 : 'tags this) ->
        fun
          ~algorithm:(x3695 :
                       [ `U1 of RsaHashedKeyGenParams.t 
                       | `U2 of EcKeyGenParams.t ])
          ->
          fun ~extractable:(x3698 : bool) ->
            fun ~keyUsages:(x3699 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x3701) "generateKey"
                   [|((match x3695 with
                       | `U1 x3696 -> RsaHashedKeyGenParams.t_to_js x3696
                       | `U2 x3697 -> EcKeyGenParams.t_to_js x3697));(
                     Ojs.bool_to_js x3698);(Ojs.list_to_js KeyUsage.t_to_js
                                              x3699)|])
    let (generateKey' :
      'tags this ->
        algorithm:[ `U1 of AesKeyGenParams.t  | `U2 of HmacKeyGenParams.t 
                  | `U3 of Pbkdf2Params.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3711 : 'tags this) ->
        fun
          ~algorithm:(x3704 :
                       [ `U1 of AesKeyGenParams.t 
                       | `U2 of HmacKeyGenParams.t  | `U3 of Pbkdf2Params.t ])
          ->
          fun ~extractable:(x3708 : bool) ->
            fun ~keyUsages:(x3709 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x3711) "generateKey"
                   [|((match x3704 with
                       | `U1 x3705 -> AesKeyGenParams.t_to_js x3705
                       | `U2 x3706 -> HmacKeyGenParams.t_to_js x3706
                       | `U3 x3707 -> Pbkdf2Params.t_to_js x3707));(Ojs.bool_to_js
                                                                    x3708);(
                     Ojs.list_to_js KeyUsage.t_to_js x3709)|])
    let (generateKey'' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t Iterable.t_1 ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x3718 : 'tags this) ->
        fun ~algorithm:(x3714 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x3715 : bool) ->
            fun ~keyUsages:(x3716 : KeyUsage.t Iterable.t_1) ->
              Promise.t_1_of_js
                (fun (x3720 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x3720)
                (Ojs.call (this_to_js Obj.magic x3718) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x3714);(Ojs.bool_to_js
                                                            x3715);(Iterable.t_1_to_js
                                                                    KeyUsage.t_to_js
                                                                    x3716)|])
    let (importKey :
      'tags this ->
        format:[ `L_s99_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3734 : 'tags this) ->
        fun ~format:(x3723 : [ `L_s99_jwk ]) ->
          fun ~keyData:(x3724 : JsonWebKey.t) ->
            fun
              ~algorithm:(x3725 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3731 : bool) ->
                fun ~keyUsages:(x3732 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3734) "importKey"
                       [|((match x3723 with
                           | `L_s99_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x3724);((match x3725 with
                                                     | `U1 x3726 ->
                                                         AlgorithmIdentifier.t_to_js
                                                           x3726
                                                     | `U2 x3727 ->
                                                         RsaHashedImportParams.t_to_js
                                                           x3727
                                                     | `U3 x3728 ->
                                                         EcKeyImportParams.t_to_js
                                                           x3728
                                                     | `U4 x3729 ->
                                                         HmacImportParams.t_to_js
                                                           x3729
                                                     | `U5 x3730 ->
                                                         AesKeyAlgorithm.t_to_js
                                                           x3730));(Ojs.bool_to_js
                                                                    x3731);(
                         Ojs.list_to_js KeyUsage.t_to_js x3732)|])
    let (importKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x3750 : 'tags this) ->
        fun ~format:(x3737 : (KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x3740 : BufferSource.t) ->
            fun
              ~algorithm:(x3741 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3747 : bool) ->
                fun ~keyUsages:(x3748 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3750) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x3739 : [ `L_s99_jwk ]) ->
                               match x3739 with
                               | `L_s99_jwk -> Ojs.string_to_js "jwk") x3737);(
                         BufferSource.t_to_js x3740);((match x3741 with
                                                       | `U1 x3742 ->
                                                           AlgorithmIdentifier.t_to_js
                                                             x3742
                                                       | `U2 x3743 ->
                                                           RsaHashedImportParams.t_to_js
                                                             x3743
                                                       | `U3 x3744 ->
                                                           EcKeyImportParams.t_to_js
                                                             x3744
                                                       | `U4 x3745 ->
                                                           HmacImportParams.t_to_js
                                                             x3745
                                                       | `U5 x3746 ->
                                                           AesKeyAlgorithm.t_to_js
                                                             x3746));(
                         Ojs.bool_to_js x3747);(Iterable.t_1_to_js
                                                  KeyUsage.t_to_js x3748)|])
    let (unwrapKey :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                              | `U2 of RsaOaepParams.t 
                              | `U3 of AesCtrParams.t 
                              | `U4 of AesCbcParams.t 
                              | `U5 of AesGcmParams.t ]
                ->
                unwrappedKeyAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                                      | `U2 of RsaHashedImportParams.t 
                                      | `U3 of EcKeyImportParams.t 
                                      | `U4 of HmacImportParams.t 
                                      | `U5 of AesKeyAlgorithm.t ]
                  ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t Iterable.t_1 ->
                      CryptoKey.t Promise.t_1)
      =
      fun (x3771 : 'tags this) ->
        fun ~format:(x3753 : KeyFormat.t) ->
          fun ~wrappedKey:(x3754 : BufferSource.t) ->
            fun ~unwrappingKey:(x3755 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x3756 :
                                   [ `U1 of AlgorithmIdentifier.t 
                                   | `U2 of RsaOaepParams.t 
                                   | `U3 of AesCtrParams.t 
                                   | `U4 of AesCbcParams.t 
                                   | `U5 of AesGcmParams.t ])
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x3762 :
                                           [ `U1 of AlgorithmIdentifier.t 
                                           | `U2 of RsaHashedImportParams.t 
                                           | `U3 of EcKeyImportParams.t 
                                           | `U4 of HmacImportParams.t 
                                           | `U5 of AesKeyAlgorithm.t ])
                  ->
                  fun ~extractable:(x3768 : bool) ->
                    fun ~keyUsages:(x3769 : KeyUsage.t Iterable.t_1) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x3771) "unwrapKey"
                           [|(KeyFormat.t_to_js x3753);(BufferSource.t_to_js
                                                          x3754);(CryptoKey.t_to_js
                                                                    x3755);((
                             match x3756 with
                             | `U1 x3757 -> AlgorithmIdentifier.t_to_js x3757
                             | `U2 x3758 -> RsaOaepParams.t_to_js x3758
                             | `U3 x3759 -> AesCtrParams.t_to_js x3759
                             | `U4 x3760 -> AesCbcParams.t_to_js x3760
                             | `U5 x3761 -> AesGcmParams.t_to_js x3761));((
                             match x3762 with
                             | `U1 x3763 -> AlgorithmIdentifier.t_to_js x3763
                             | `U2 x3764 ->
                                 RsaHashedImportParams.t_to_js x3764
                             | `U3 x3765 -> EcKeyImportParams.t_to_js x3765
                             | `U4 x3766 -> HmacImportParams.t_to_js x3766
                             | `U5 x3767 -> AesKeyAlgorithm.t_to_js x3767));(
                             Ojs.bool_to_js x3768);(Iterable.t_1_to_js
                                                      KeyUsage.t_to_js x3769)|])
    let (decrypt :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaOaepParams.t 
                  | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                  | `U5 of AesGcmParams.t ]
          -> key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x3782 : 'tags this) ->
        fun
          ~algorithm:(x3774 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaOaepParams.t  | `U3 of AesCtrParams.t 
                       | `U4 of AesCbcParams.t  | `U5 of AesGcmParams.t ])
          ->
          fun ~key:(x3780 : CryptoKey.t) ->
            fun ~data:(x3781 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x3782) "decrypt"
                   [|((match x3774 with
                       | `U1 x3775 -> AlgorithmIdentifier.t_to_js x3775
                       | `U2 x3776 -> RsaOaepParams.t_to_js x3776
                       | `U3 x3777 -> AesCtrParams.t_to_js x3777
                       | `U4 x3778 -> AesCbcParams.t_to_js x3778
                       | `U5 x3779 -> AesGcmParams.t_to_js x3779));(CryptoKey.t_to_js
                                                                    x3780);(
                     BufferSource.t_to_js x3781)|])
    let (deriveBits :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3792 : 'tags this) ->
        fun
          ~algorithm:(x3785 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x3790 : CryptoKey.t) ->
            fun ~length:(x3791 : float) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x3792) "deriveBits"
                   [|((match x3785 with
                       | `U1 x3786 -> AlgorithmIdentifier.t_to_js x3786
                       | `U2 x3787 -> EcdhKeyDeriveParams.t_to_js x3787
                       | `U3 x3788 -> HkdfParams.t_to_js x3788
                       | `U4 x3789 -> Pbkdf2Params.t_to_js x3789));(CryptoKey.t_to_js
                                                                    x3790);(
                     Ojs.float_to_js x3791)|])
    let (deriveKey' :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t 
                  | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                  | `U4 of Pbkdf2Params.t ]
          ->
          baseKey:CryptoKey.t ->
            derivedKeyType:[ `U1 of AlgorithmIdentifier.t 
                           | `U2 of AesDerivedKeyParams.t 
                           | `U3 of HmacImportParams.t 
                           | `U4 of HkdfParams.t  | `U5 of Pbkdf2Params.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3810 : 'tags this) ->
        fun
          ~algorithm:(x3795 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of EcdhKeyDeriveParams.t  | `U3 of HkdfParams.t 
                       | `U4 of Pbkdf2Params.t ])
          ->
          fun ~baseKey:(x3800 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x3801 :
                                [ `U1 of AlgorithmIdentifier.t 
                                | `U2 of AesDerivedKeyParams.t 
                                | `U3 of HmacImportParams.t 
                                | `U4 of HkdfParams.t 
                                | `U5 of Pbkdf2Params.t ])
              ->
              fun ~extractable:(x3807 : bool) ->
                fun ~keyUsages:(x3808 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3810) "deriveKey"
                       [|((match x3795 with
                           | `U1 x3796 -> AlgorithmIdentifier.t_to_js x3796
                           | `U2 x3797 -> EcdhKeyDeriveParams.t_to_js x3797
                           | `U3 x3798 -> HkdfParams.t_to_js x3798
                           | `U4 x3799 -> Pbkdf2Params.t_to_js x3799));(
                         CryptoKey.t_to_js x3800);((match x3801 with
                                                    | `U1 x3802 ->
                                                        AlgorithmIdentifier.t_to_js
                                                          x3802
                                                    | `U2 x3803 ->
                                                        AesDerivedKeyParams.t_to_js
                                                          x3803
                                                    | `U3 x3804 ->
                                                        HmacImportParams.t_to_js
                                                          x3804
                                                    | `U4 x3805 ->
                                                        HkdfParams.t_to_js
                                                          x3805
                                                    | `U5 x3806 ->
                                                        Pbkdf2Params.t_to_js
                                                          x3806));(Ojs.bool_to_js
                                                                    x3807);(
                         Ojs.list_to_js KeyUsage.t_to_js x3808)|])
    let (digest :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3815 : 'tags this) ->
        fun ~algorithm:(x3813 : AlgorithmIdentifier.t) ->
          fun ~data:(x3814 : BufferSource.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x3815) "digest"
                 [|(AlgorithmIdentifier.t_to_js x3813);(BufferSource.t_to_js
                                                          x3814)|])
    let (encrypt :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaOaepParams.t 
                  | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                  | `U5 of AesGcmParams.t ]
          -> key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x3826 : 'tags this) ->
        fun
          ~algorithm:(x3818 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaOaepParams.t  | `U3 of AesCtrParams.t 
                       | `U4 of AesCbcParams.t  | `U5 of AesGcmParams.t ])
          ->
          fun ~key:(x3824 : CryptoKey.t) ->
            fun ~data:(x3825 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x3826) "encrypt"
                   [|((match x3818 with
                       | `U1 x3819 -> AlgorithmIdentifier.t_to_js x3819
                       | `U2 x3820 -> RsaOaepParams.t_to_js x3820
                       | `U3 x3821 -> AesCtrParams.t_to_js x3821
                       | `U4 x3822 -> AesCbcParams.t_to_js x3822
                       | `U5 x3823 -> AesGcmParams.t_to_js x3823));(CryptoKey.t_to_js
                                                                    x3824);(
                     BufferSource.t_to_js x3825)|])
    let (exportKey :
      'tags this ->
        format:[ `L_s99_jwk ] -> key:CryptoKey.t -> JsonWebKey.t Promise.t_1)
      =
      fun (x3831 : 'tags this) ->
        fun ~format:(x3829 : [ `L_s99_jwk ]) ->
          fun ~key:(x3830 : CryptoKey.t) ->
            Promise.t_1_of_js JsonWebKey.t_of_js
              (Ojs.call (this_to_js Obj.magic x3831) "exportKey"
                 [|((match x3829 with | `L_s99_jwk -> Ojs.string_to_js "jwk"));(
                   CryptoKey.t_to_js x3830)|])
    let (exportKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2 ->
          key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3838 : 'tags this) ->
        fun ~format:(x3834 : (KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2) ->
          fun ~key:(x3837 : CryptoKey.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x3838) "exportKey"
                 [|(Exclude.t_2_to_js KeyFormat.t_to_js
                      (fun (x3836 : [ `L_s99_jwk ]) ->
                         match x3836 with
                         | `L_s99_jwk -> Ojs.string_to_js "jwk") x3834);(
                   CryptoKey.t_to_js x3837)|])
    let (generateKey''' :
      'tags this ->
        algorithm:[ `U1 of RsaHashedKeyGenParams.t 
                  | `U2 of EcKeyGenParams.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x3847 : 'tags this) ->
        fun
          ~algorithm:(x3841 :
                       [ `U1 of RsaHashedKeyGenParams.t 
                       | `U2 of EcKeyGenParams.t ])
          ->
          fun ~extractable:(x3844 : bool) ->
            fun ~keyUsages:(x3845 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x3847) "generateKey"
                   [|((match x3841 with
                       | `U1 x3842 -> RsaHashedKeyGenParams.t_to_js x3842
                       | `U2 x3843 -> EcKeyGenParams.t_to_js x3843));(
                     Ojs.bool_to_js x3844);(Ojs.list_to_js KeyUsage.t_to_js
                                              x3845)|])
    let (generateKey'''' :
      'tags this ->
        algorithm:[ `U1 of AesKeyGenParams.t  | `U2 of HmacKeyGenParams.t 
                  | `U3 of Pbkdf2Params.t ]
          ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3857 : 'tags this) ->
        fun
          ~algorithm:(x3850 :
                       [ `U1 of AesKeyGenParams.t 
                       | `U2 of HmacKeyGenParams.t  | `U3 of Pbkdf2Params.t ])
          ->
          fun ~extractable:(x3854 : bool) ->
            fun ~keyUsages:(x3855 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x3857) "generateKey"
                   [|((match x3850 with
                       | `U1 x3851 -> AesKeyGenParams.t_to_js x3851
                       | `U2 x3852 -> HmacKeyGenParams.t_to_js x3852
                       | `U3 x3853 -> Pbkdf2Params.t_to_js x3853));(Ojs.bool_to_js
                                                                    x3854);(
                     Ojs.list_to_js KeyUsage.t_to_js x3855)|])
    let (generateKey''''' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t list ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x3864 : 'tags this) ->
        fun ~algorithm:(x3860 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x3861 : bool) ->
            fun ~keyUsages:(x3862 : KeyUsage.t list) ->
              Promise.t_1_of_js
                (fun (x3866 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x3866)
                (Ojs.call (this_to_js Obj.magic x3864) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x3860);(Ojs.bool_to_js
                                                            x3861);(Ojs.list_to_js
                                                                    KeyUsage.t_to_js
                                                                    x3862)|])
    let (importKey'' :
      'tags this ->
        format:[ `L_s99_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3880 : 'tags this) ->
        fun ~format:(x3869 : [ `L_s99_jwk ]) ->
          fun ~keyData:(x3870 : JsonWebKey.t) ->
            fun
              ~algorithm:(x3871 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3877 : bool) ->
                fun ~keyUsages:(x3878 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3880) "importKey"
                       [|((match x3869 with
                           | `L_s99_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x3870);((match x3871 with
                                                     | `U1 x3872 ->
                                                         AlgorithmIdentifier.t_to_js
                                                           x3872
                                                     | `U2 x3873 ->
                                                         RsaHashedImportParams.t_to_js
                                                           x3873
                                                     | `U3 x3874 ->
                                                         EcKeyImportParams.t_to_js
                                                           x3874
                                                     | `U4 x3875 ->
                                                         HmacImportParams.t_to_js
                                                           x3875
                                                     | `U5 x3876 ->
                                                         AesKeyAlgorithm.t_to_js
                                                           x3876));(Ojs.bool_to_js
                                                                    x3877);(
                         Ojs.list_to_js KeyUsage.t_to_js x3878)|])
    let (importKey''' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:[ `U1 of AlgorithmIdentifier.t 
                      | `U2 of RsaHashedImportParams.t 
                      | `U3 of EcKeyImportParams.t 
                      | `U4 of HmacImportParams.t 
                      | `U5 of AesKeyAlgorithm.t ]
              ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3896 : 'tags this) ->
        fun ~format:(x3883 : (KeyFormat.t, [ `L_s99_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x3886 : BufferSource.t) ->
            fun
              ~algorithm:(x3887 :
                           [ `U1 of AlgorithmIdentifier.t 
                           | `U2 of RsaHashedImportParams.t 
                           | `U3 of EcKeyImportParams.t 
                           | `U4 of HmacImportParams.t 
                           | `U5 of AesKeyAlgorithm.t ])
              ->
              fun ~extractable:(x3893 : bool) ->
                fun ~keyUsages:(x3894 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3896) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x3885 : [ `L_s99_jwk ]) ->
                               match x3885 with
                               | `L_s99_jwk -> Ojs.string_to_js "jwk") x3883);(
                         BufferSource.t_to_js x3886);((match x3887 with
                                                       | `U1 x3888 ->
                                                           AlgorithmIdentifier.t_to_js
                                                             x3888
                                                       | `U2 x3889 ->
                                                           RsaHashedImportParams.t_to_js
                                                             x3889
                                                       | `U3 x3890 ->
                                                           EcKeyImportParams.t_to_js
                                                             x3890
                                                       | `U4 x3891 ->
                                                           HmacImportParams.t_to_js
                                                             x3891
                                                       | `U5 x3892 ->
                                                           AesKeyAlgorithm.t_to_js
                                                             x3892));(
                         Ojs.bool_to_js x3893);(Ojs.list_to_js
                                                  KeyUsage.t_to_js x3894)|])
    let (sign :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaPssParams.t 
                  | `U3 of EcdsaParams.t ]
          ->
          key:CryptoKey.t ->
            data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3905 : 'tags this) ->
        fun
          ~algorithm:(x3899 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaPssParams.t  | `U3 of EcdsaParams.t ])
          ->
          fun ~key:(x3903 : CryptoKey.t) ->
            fun ~data:(x3904 : BufferSource.t) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x3905) "sign"
                   [|((match x3899 with
                       | `U1 x3900 -> AlgorithmIdentifier.t_to_js x3900
                       | `U2 x3901 -> RsaPssParams.t_to_js x3901
                       | `U3 x3902 -> EcdsaParams.t_to_js x3902));(CryptoKey.t_to_js
                                                                    x3903);(
                     BufferSource.t_to_js x3904)|])
    let (unwrapKey' :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                              | `U2 of RsaOaepParams.t 
                              | `U3 of AesCtrParams.t 
                              | `U4 of AesCbcParams.t 
                              | `U5 of AesGcmParams.t ]
                ->
                unwrappedKeyAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                                      | `U2 of RsaHashedImportParams.t 
                                      | `U3 of EcKeyImportParams.t 
                                      | `U4 of HmacImportParams.t 
                                      | `U5 of AesKeyAlgorithm.t ]
                  ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3926 : 'tags this) ->
        fun ~format:(x3908 : KeyFormat.t) ->
          fun ~wrappedKey:(x3909 : BufferSource.t) ->
            fun ~unwrappingKey:(x3910 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x3911 :
                                   [ `U1 of AlgorithmIdentifier.t 
                                   | `U2 of RsaOaepParams.t 
                                   | `U3 of AesCtrParams.t 
                                   | `U4 of AesCbcParams.t 
                                   | `U5 of AesGcmParams.t ])
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x3917 :
                                           [ `U1 of AlgorithmIdentifier.t 
                                           | `U2 of RsaHashedImportParams.t 
                                           | `U3 of EcKeyImportParams.t 
                                           | `U4 of HmacImportParams.t 
                                           | `U5 of AesKeyAlgorithm.t ])
                  ->
                  fun ~extractable:(x3923 : bool) ->
                    fun ~keyUsages:(x3924 : KeyUsage.t list) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x3926) "unwrapKey"
                           [|(KeyFormat.t_to_js x3908);(BufferSource.t_to_js
                                                          x3909);(CryptoKey.t_to_js
                                                                    x3910);((
                             match x3911 with
                             | `U1 x3912 -> AlgorithmIdentifier.t_to_js x3912
                             | `U2 x3913 -> RsaOaepParams.t_to_js x3913
                             | `U3 x3914 -> AesCtrParams.t_to_js x3914
                             | `U4 x3915 -> AesCbcParams.t_to_js x3915
                             | `U5 x3916 -> AesGcmParams.t_to_js x3916));((
                             match x3917 with
                             | `U1 x3918 -> AlgorithmIdentifier.t_to_js x3918
                             | `U2 x3919 ->
                                 RsaHashedImportParams.t_to_js x3919
                             | `U3 x3920 -> EcKeyImportParams.t_to_js x3920
                             | `U4 x3921 -> HmacImportParams.t_to_js x3921
                             | `U5 x3922 -> AesKeyAlgorithm.t_to_js x3922));(
                             Ojs.bool_to_js x3923);(Ojs.list_to_js
                                                      KeyUsage.t_to_js x3924)|])
    let (verify :
      'tags this ->
        algorithm:[ `U1 of AlgorithmIdentifier.t  | `U2 of RsaPssParams.t 
                  | `U3 of EcdsaParams.t ]
          ->
          key:CryptoKey.t ->
            signature:BufferSource.t ->
              data:BufferSource.t -> bool Promise.t_1)
      =
      fun (x3936 : 'tags this) ->
        fun
          ~algorithm:(x3929 :
                       [ `U1 of AlgorithmIdentifier.t 
                       | `U2 of RsaPssParams.t  | `U3 of EcdsaParams.t ])
          ->
          fun ~key:(x3933 : CryptoKey.t) ->
            fun ~signature:(x3934 : BufferSource.t) ->
              fun ~data:(x3935 : BufferSource.t) ->
                Promise.t_1_of_js Ojs.bool_of_js
                  (Ojs.call (this_to_js Obj.magic x3936) "verify"
                     [|((match x3929 with
                         | `U1 x3930 -> AlgorithmIdentifier.t_to_js x3930
                         | `U2 x3931 -> RsaPssParams.t_to_js x3931
                         | `U3 x3932 -> EcdsaParams.t_to_js x3932));(
                       CryptoKey.t_to_js x3933);(BufferSource.t_to_js x3934);(
                       BufferSource.t_to_js x3935)|])
    let (wrapKey :
      'tags this ->
        format:KeyFormat.t ->
          key:CryptoKey.t ->
            wrappingKey:CryptoKey.t ->
              wrapAlgorithm:[ `U1 of AlgorithmIdentifier.t 
                            | `U2 of RsaOaepParams.t 
                            | `U3 of AesCtrParams.t  | `U4 of AesCbcParams.t 
                            | `U5 of AesGcmParams.t ]
                -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x3948 : 'tags this) ->
        fun ~format:(x3939 : KeyFormat.t) ->
          fun ~key:(x3940 : CryptoKey.t) ->
            fun ~wrappingKey:(x3941 : CryptoKey.t) ->
              fun
                ~wrapAlgorithm:(x3942 :
                                 [ `U1 of AlgorithmIdentifier.t 
                                 | `U2 of RsaOaepParams.t 
                                 | `U3 of AesCtrParams.t 
                                 | `U4 of AesCbcParams.t 
                                 | `U5 of AesGcmParams.t ])
                ->
                Promise.t_1_of_js ArrayBuffer.t_0_of_js
                  (Ojs.call (this_to_js Obj.magic x3948) "wrapKey"
                     [|(KeyFormat.t_to_js x3939);(CryptoKey.t_to_js x3940);(
                       CryptoKey.t_to_js x3941);((match x3942 with
                                                  | `U1 x3943 ->
                                                      AlgorithmIdentifier.t_to_js
                                                        x3943
                                                  | `U2 x3944 ->
                                                      RsaOaepParams.t_to_js
                                                        x3944
                                                  | `U3 x3945 ->
                                                      AesCtrParams.t_to_js
                                                        x3945
                                                  | `U4 x3946 ->
                                                      AesCbcParams.t_to_js
                                                        x3946
                                                  | `U5 x3947 ->
                                                      AesGcmParams.t_to_js
                                                        x3947))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SubtleCrypto") [||])
  end
module CryptoStatic =
  struct
    let (subtle : unit -> SubtleCrypto.t) =
      fun () ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "crypto")
             "subtle")
    let (getRandomValues : 'T -> 'T) =
      fun (x3951 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto")
             "getRandomValues" [|(Obj.magic x3951)|])
    let (randomUUID : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto") "randomUUID"
             [||])
  end
module ConsoleStatic =
  struct
    let (assert_ : ?condition:bool -> data:any list -> unit -> unit) =
      fun ?condition:(x3952 : bool option) ->
        fun ~data:(x3953 : any list) ->
          fun () ->
            ignore
              (let x3957 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3957 "assert") "apply"
                 [|x3957;((let x3954 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3952 with
                            | Some x3956 ->
                                ignore
                                  (Ojs.call x3954 "push"
                                     [|(Ojs.bool_to_js x3956)|])
                            | None -> ());
                           List.iter
                             (fun (x3955 : any) ->
                                ignore
                                  (Ojs.call x3954 "push"
                                     [|(any_to_js x3955)|])) x3953;
                           x3954))|])
    let (clear : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "clear" [||])
    let (count : ?label:string -> unit -> unit) =
      fun ?label:(x3958 : string option) ->
        fun () ->
          ignore
            (let x3961 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3961 "count") "apply"
               [|x3961;((let x3959 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3958 with
                          | Some x3960 ->
                              ignore
                                (Ojs.call x3959 "push"
                                   [|(Ojs.string_to_js x3960)|])
                          | None -> ());
                         x3959))|])
    let (countReset : ?label:string -> unit -> unit) =
      fun ?label:(x3962 : string option) ->
        fun () ->
          ignore
            (let x3965 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3965 "countReset") "apply"
               [|x3965;((let x3963 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3962 with
                          | Some x3964 ->
                              ignore
                                (Ojs.call x3963 "push"
                                   [|(Ojs.string_to_js x3964)|])
                          | None -> ());
                         x3963))|])
    let (debug : any list -> unit) =
      fun (x3966 : any list) ->
        ignore
          (let x3969 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3969 "debug") "apply"
             [|x3969;((let x3967 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3968 : any) ->
                            ignore
                              (Ojs.call x3967 "push" [|(any_to_js x3968)|]))
                         x3966;
                       x3967))|])
    let (dir : ?item:any -> ?options:any -> unit -> unit) =
      fun ?item:(x3970 : any option) ->
        fun ?options:(x3971 : any option) ->
          fun () ->
            ignore
              (let x3975 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3975 "dir") "apply"
                 [|x3975;((let x3972 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3970 with
                            | Some x3974 ->
                                ignore
                                  (Ojs.call x3972 "push"
                                     [|(any_to_js x3974)|])
                            | None -> ());
                           (match x3971 with
                            | Some x3973 ->
                                ignore
                                  (Ojs.call x3972 "push"
                                     [|(any_to_js x3973)|])
                            | None -> ());
                           x3972))|])
    let (dirxml : any list -> unit) =
      fun (x3976 : any list) ->
        ignore
          (let x3979 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3979 "dirxml") "apply"
             [|x3979;((let x3977 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3978 : any) ->
                            ignore
                              (Ojs.call x3977 "push" [|(any_to_js x3978)|]))
                         x3976;
                       x3977))|])
    let (error : any list -> unit) =
      fun (x3980 : any list) ->
        ignore
          (let x3983 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3983 "error") "apply"
             [|x3983;((let x3981 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3982 : any) ->
                            ignore
                              (Ojs.call x3981 "push" [|(any_to_js x3982)|]))
                         x3980;
                       x3981))|])
    let (group : any list -> unit) =
      fun (x3984 : any list) ->
        ignore
          (let x3987 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3987 "group") "apply"
             [|x3987;((let x3985 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3986 : any) ->
                            ignore
                              (Ojs.call x3985 "push" [|(any_to_js x3986)|]))
                         x3984;
                       x3985))|])
    let (groupCollapsed : any list -> unit) =
      fun (x3988 : any list) ->
        ignore
          (let x3991 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3991 "groupCollapsed") "apply"
             [|x3991;((let x3989 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3990 : any) ->
                            ignore
                              (Ojs.call x3989 "push" [|(any_to_js x3990)|]))
                         x3988;
                       x3989))|])
    let (groupEnd : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "groupEnd" [||])
    let (info : any list -> unit) =
      fun (x3992 : any list) ->
        ignore
          (let x3995 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3995 "info") "apply"
             [|x3995;((let x3993 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3994 : any) ->
                            ignore
                              (Ojs.call x3993 "push" [|(any_to_js x3994)|]))
                         x3992;
                       x3993))|])
    let (log : any list -> unit) =
      fun (x3996 : any list) ->
        ignore
          (let x3999 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3999 "log") "apply"
             [|x3999;((let x3997 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3998 : any) ->
                            ignore
                              (Ojs.call x3997 "push" [|(any_to_js x3998)|]))
                         x3996;
                       x3997))|])
    let (table : ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun ?tabularData:(x4000 : any option) ->
        fun ?properties:(x4001 : string list option) ->
          fun () ->
            ignore
              (let x4006 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4006 "table") "apply"
                 [|x4006;((let x4002 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4000 with
                            | Some x4005 ->
                                ignore
                                  (Ojs.call x4002 "push"
                                     [|(any_to_js x4005)|])
                            | None -> ());
                           (match x4001 with
                            | Some x4003 ->
                                ignore
                                  (Ojs.call x4002 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x4003)|])
                            | None -> ());
                           x4002))|])
    let (time : ?label:string -> unit -> unit) =
      fun ?label:(x4007 : string option) ->
        fun () ->
          ignore
            (let x4010 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4010 "time") "apply"
               [|x4010;((let x4008 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4007 with
                          | Some x4009 ->
                              ignore
                                (Ojs.call x4008 "push"
                                   [|(Ojs.string_to_js x4009)|])
                          | None -> ());
                         x4008))|])
    let (timeEnd : ?label:string -> unit -> unit) =
      fun ?label:(x4011 : string option) ->
        fun () ->
          ignore
            (let x4014 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4014 "timeEnd") "apply"
               [|x4014;((let x4012 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4011 with
                          | Some x4013 ->
                              ignore
                                (Ojs.call x4012 "push"
                                   [|(Ojs.string_to_js x4013)|])
                          | None -> ());
                         x4012))|])
    let (timeLog : ?label:string -> data:any list -> unit -> unit) =
      fun ?label:(x4015 : string option) ->
        fun ~data:(x4016 : any list) ->
          fun () ->
            ignore
              (let x4020 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x4020 "timeLog") "apply"
                 [|x4020;((let x4017 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4015 with
                            | Some x4019 ->
                                ignore
                                  (Ojs.call x4017 "push"
                                     [|(Ojs.string_to_js x4019)|])
                            | None -> ());
                           List.iter
                             (fun (x4018 : any) ->
                                ignore
                                  (Ojs.call x4017 "push"
                                     [|(any_to_js x4018)|])) x4016;
                           x4017))|])
    let (timeStamp : ?label:string -> unit -> unit) =
      fun ?label:(x4021 : string option) ->
        fun () ->
          ignore
            (let x4024 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x4024 "timeStamp") "apply"
               [|x4024;((let x4022 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x4021 with
                          | Some x4023 ->
                              ignore
                                (Ojs.call x4022 "push"
                                   [|(Ojs.string_to_js x4023)|])
                          | None -> ());
                         x4022))|])
    let (trace : any list -> unit) =
      fun (x4025 : any list) ->
        ignore
          (let x4028 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4028 "trace") "apply"
             [|x4028;((let x4026 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4027 : any) ->
                            ignore
                              (Ojs.call x4026 "push" [|(any_to_js x4027)|]))
                         x4025;
                       x4026))|])
    let (warn : any list -> unit) =
      fun (x4029 : any list) ->
        ignore
          (let x4032 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x4032 "warn") "apply"
             [|x4032;((let x4030 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4031 : any) ->
                            ignore
                              (Ojs.call x4030 "push" [|(any_to_js x4031)|]))
                         x4029;
                       x4030))|])
  end
module CacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4034 : Ojs.t) -> t_of_js x4034
    and t_0_to_js : t_0 -> Ojs.t = fun (x4033 : t) -> t_to_js x4033
    type tags = [ `CacheQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4037 : Ojs.t) -> intf_of_js __tags_of_js x4037
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4035 : __tags intf) -> intf_to_js __tags_to_js x4035
    let (get_ignoreMethod : 'tags this -> bool) =
      fun (x4039 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4039) "ignoreMethod")
    let (set_ignoreMethod : 'tags this -> bool -> unit) =
      fun (x4041 : 'tags this) ->
        fun (x4042 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4041) "ignoreMethod"
            (Ojs.bool_to_js x4042)
    let (get_ignoreSearch : 'tags this -> bool) =
      fun (x4044 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4044) "ignoreSearch")
    let (set_ignoreSearch : 'tags this -> bool -> unit) =
      fun (x4046 : 'tags this) ->
        fun (x4047 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4046) "ignoreSearch"
            (Ojs.bool_to_js x4047)
    let (get_ignoreVary : 'tags this -> bool) =
      fun (x4049 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4049) "ignoreVary")
    let (set_ignoreVary : 'tags this -> bool -> unit) =
      fun (x4051 : 'tags this) ->
        fun (x4052 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4051) "ignoreVary"
            (Ojs.bool_to_js x4052)
    let (create :
      ignoreMethod:bool -> ignoreSearch:bool -> ignoreVary:bool -> unit -> t)
      =
      fun ~ignoreMethod:(x4054 : bool) ->
        fun ~ignoreSearch:(x4055 : bool) ->
          fun ~ignoreVary:(x4056 : bool) ->
            fun () ->
              let x4057 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x4057 "ignoreMethod" (Ojs.bool_to_js x4054);
              Ojs.set_prop_ascii x4057 "ignoreSearch" (Ojs.bool_to_js x4055);
              Ojs.set_prop_ascii x4057 "ignoreVary" (Ojs.bool_to_js x4056);
              t_of_js x4057
    let cast_from = Obj.magic
  end
module MultiCacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions  | `MultiCacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4059 : Ojs.t) -> t_of_js x4059
    and t_0_to_js : t_0 -> Ojs.t = fun (x4058 : t) -> t_to_js x4058
    type tags = [ `CacheQueryOptions  | `MultiCacheQueryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4062 : Ojs.t) -> intf_of_js __tags_of_js x4062
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4060 : __tags intf) -> intf_to_js __tags_to_js x4060
    let (get_cacheName : 'tags this -> string) =
      fun (x4064 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4064) "cacheName")
    let (set_cacheName : 'tags this -> string -> unit) =
      fun (x4066 : 'tags this) ->
        fun (x4067 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4066) "cacheName"
            (Ojs.string_to_js x4067)
    let (create : cacheName:string -> unit -> t) =
      fun ~cacheName:(x4069 : string) ->
        fun () ->
          let x4070 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x4070 "cacheName" (Ojs.string_to_js x4069);
          t_of_js x4070
    let cast_from = Obj.magic
  end
module URLSearchParams =
  struct
    type t =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4072 : Ojs.t) -> t_of_js x4072
    and t_0_to_js : t_0 -> Ojs.t = fun (x4071 : t) -> t_to_js x4071
    type tags =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4075 : Ojs.t) -> intf_of_js __tags_of_js x4075
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4073 : __tags intf) -> intf_to_js __tags_to_js x4073
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4077 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4079 : Ojs.t) ->
             let x4080 = x4079 in
             ((Ojs.string_of_js (Ojs.array_get x4080 0)),
               (Ojs.string_of_js (Ojs.array_get x4080 1))))
          (Ojs.call (this_to_js Obj.magic x4077) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4081 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4081) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4084 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4084) "values" [||])
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x4089 : 'tags this) ->
        fun ~name:(x4087 : string) ->
          fun ~value:(x4088 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4089) "append"
                 [|(Ojs.string_to_js x4087);(Ojs.string_to_js x4088)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4092 : 'tags this) ->
        fun ~name:(x4091 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4092) "delete"
               [|(Ojs.string_to_js x4091)|])
    let (get_ : 'tags this -> name:string -> string option) =
      fun (x4095 : 'tags this) ->
        fun ~name:(x4094 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4095) "get"
               [|(Ojs.string_to_js x4094)|])
    let (getAll : 'tags this -> name:string -> string list) =
      fun (x4099 : 'tags this) ->
        fun ~name:(x4098 : string) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4099) "getAll"
               [|(Ojs.string_to_js x4098)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4103 : 'tags this) ->
        fun ~name:(x4102 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4103) "has"
               [|(Ojs.string_to_js x4102)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x4107 : 'tags this) ->
        fun ~name:(x4105 : string) ->
          fun ~value:(x4106 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4107) "set"
                 [|(Ojs.string_to_js x4105);(Ojs.string_to_js x4106)|])
    let (sort : 'tags this -> unit) =
      fun (x4109 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4109) "sort" [||])
    let (toString : 'tags this -> string) =
      fun (x4111 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4111) "toString" [||])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4120 : 'tags this) ->
        fun
          ~callbackfn:(x4113 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4114 : any option) ->
            fun () ->
              ignore
                (let x4122 = this_to_js Obj.magic x4120 in
                 Ojs.call (Ojs.get_prop_ascii x4122 "forEach") "apply"
                   [|x4122;((let x4115 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4115 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4117 : Ojs.t) ->
                                          fun (x4118 : Ojs.t) ->
                                            fun (x4119 : Ojs.t) ->
                                              x4113
                                                ~value:(Ojs.string_of_js
                                                          x4117)
                                                ~key:(Ojs.string_of_js x4118)
                                                ~parent:(t_of_js x4119)))|]);
                             (match x4114 with
                              | Some x4116 ->
                                  ignore
                                    (Ojs.call x4115 "push"
                                       [|(any_to_js x4116)|])
                              | None -> ());
                             x4115))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "URLSearchParams") "prototype")
    let (create :
      ?init:[ `U1 of string list list  | `U2 of (string, string) Record.t_2 
            | `U3 of string  | `U4 of t ]
        -> unit -> t)
      =
      fun
        ?init:(x4123 :
                [ `U1 of string list list 
                | `U2 of (string, string) Record.t_2  | `U3 of string 
                | `U4 of t ] option)
        ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
               (let x4124 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4123 with
                 | Some x4125 ->
                     ignore
                       (Ojs.call x4124 "push"
                          [|((match x4125 with
                              | `U1 x4126 ->
                                  Ojs.list_to_js
                                    (fun (x4127 : string list) ->
                                       Ojs.list_to_js Ojs.string_to_js x4127)
                                    x4126
                              | `U2 x4129 ->
                                  Record.t_2_to_js Ojs.string_to_js
                                    Ojs.string_to_js x4129
                              | `U3 x4132 -> Ojs.string_to_js x4132
                              | `U4 x4133 -> t_to_js x4133))|])
                 | None -> ());
                x4124))
    let (toString' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
             "toString" [||])
  end
module URL =
  struct
    type t = [ `URL ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4135 : Ojs.t) -> t_of_js x4135
    and t_0_to_js : t_0 -> Ojs.t = fun (x4134 : t) -> t_to_js x4134
    type tags = [ `URL ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URL ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4138 : Ojs.t) -> intf_of_js __tags_of_js x4138
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4136 : __tags intf) -> intf_to_js __tags_to_js x4136
    let (get_hash : 'tags this -> string) =
      fun (x4140 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4140) "hash")
    let (set_hash : 'tags this -> string -> unit) =
      fun (x4142 : 'tags this) ->
        fun (x4143 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4142) "hash"
            (Ojs.string_to_js x4143)
    let (get_host : 'tags this -> string) =
      fun (x4145 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4145) "host")
    let (set_host : 'tags this -> string -> unit) =
      fun (x4147 : 'tags this) ->
        fun (x4148 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4147) "host"
            (Ojs.string_to_js x4148)
    let (get_hostname : 'tags this -> string) =
      fun (x4150 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4150) "hostname")
    let (set_hostname : 'tags this -> string -> unit) =
      fun (x4152 : 'tags this) ->
        fun (x4153 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4152) "hostname"
            (Ojs.string_to_js x4153)
    let (get_href : 'tags this -> string) =
      fun (x4155 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4155) "href")
    let (set_href : 'tags this -> string -> unit) =
      fun (x4157 : 'tags this) ->
        fun (x4158 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4157) "href"
            (Ojs.string_to_js x4158)
    let (toString : 'tags this -> string) =
      fun (x4160 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4160) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x4162 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4162) "origin")
    let (get_password : 'tags this -> string) =
      fun (x4164 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4164) "password")
    let (set_password : 'tags this -> string -> unit) =
      fun (x4166 : 'tags this) ->
        fun (x4167 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4166) "password"
            (Ojs.string_to_js x4167)
    let (get_pathname : 'tags this -> string) =
      fun (x4169 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4169) "pathname")
    let (set_pathname : 'tags this -> string -> unit) =
      fun (x4171 : 'tags this) ->
        fun (x4172 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4171) "pathname"
            (Ojs.string_to_js x4172)
    let (get_port : 'tags this -> string) =
      fun (x4174 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4174) "port")
    let (set_port : 'tags this -> string -> unit) =
      fun (x4176 : 'tags this) ->
        fun (x4177 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4176) "port"
            (Ojs.string_to_js x4177)
    let (get_protocol : 'tags this -> string) =
      fun (x4179 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4179) "protocol")
    let (set_protocol : 'tags this -> string -> unit) =
      fun (x4181 : 'tags this) ->
        fun (x4182 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4181) "protocol"
            (Ojs.string_to_js x4182)
    let (get_search : 'tags this -> string) =
      fun (x4184 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4184) "search")
    let (set_search : 'tags this -> string -> unit) =
      fun (x4186 : 'tags this) ->
        fun (x4187 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4186) "search"
            (Ojs.string_to_js x4187)
    let (get_searchParams : 'tags this -> URLSearchParams.t) =
      fun (x4189 : 'tags this) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4189) "searchParams")
    let (get_username : 'tags this -> string) =
      fun (x4191 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4191) "username")
    let (set_username : 'tags this -> string -> unit) =
      fun (x4193 : 'tags this) ->
        fun (x4194 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4193) "username"
            (Ojs.string_to_js x4194)
    let (toJSON : 'tags this -> string) =
      fun (x4196 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4196) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "URL")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of t ] ->
        ?base:[ `U1 of string  | `U2 of t ] -> unit -> t)
      =
      fun ~url:(x4198 : [ `U1 of string  | `U2 of t ]) ->
        fun ?base:(x4199 : [ `U1 of string  | `U2 of t ] option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URL")
                 (let x4200 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4200 "push"
                       [|((match x4198 with
                           | `U1 x4204 -> Ojs.string_to_js x4204
                           | `U2 x4205 -> t_to_js x4205))|]);
                  (match x4199 with
                   | Some x4201 ->
                       ignore
                         (Ojs.call x4200 "push"
                            [|((match x4201 with
                                | `U1 x4202 -> Ojs.string_to_js x4202
                                | `U2 x4203 -> t_to_js x4203))|])
                   | None -> ());
                  x4200))
    let (createObjectURL : Blob.t -> string) =
      fun (x4206 : Blob.t) ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "createObjectURL"
             [|(Blob.t_to_js x4206)|])
    let (revokeObjectURL : string -> unit) =
      fun (x4207 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "revokeObjectURL"
             [|(Ojs.string_to_js x4207)|])
  end
module ResponseType =
  struct
    type t =
      [ `L_s139_opaque  | `L_s140_opaqueredirect  | `L_s43_basic 
      | `L_s55_cors  | `L_s57_default  | `L_s68_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4209 : Ojs.t) ->
        let x4210 = x4209 in
        match Ojs.string_of_js x4210 with
        | "opaque" -> `L_s139_opaque
        | "opaqueredirect" -> `L_s140_opaqueredirect
        | "basic" -> `L_s43_basic
        | "cors" -> `L_s55_cors
        | "default" -> `L_s57_default
        | "error" -> `L_s68_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4208 :
          [ `L_s139_opaque  | `L_s140_opaqueredirect  | `L_s43_basic 
          | `L_s55_cors  | `L_s57_default  | `L_s68_error ])
        ->
        match x4208 with
        | `L_s139_opaque -> Ojs.string_to_js "opaque"
        | `L_s140_opaqueredirect -> Ojs.string_to_js "opaqueredirect"
        | `L_s43_basic -> Ojs.string_to_js "basic"
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s68_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4212 : Ojs.t) -> t_of_js x4212
    and t_0_to_js : t_0 -> Ojs.t = fun (x4211 : t) -> t_to_js x4211
  end
module rec
  Headers:sig
            type t =
              [ `Headers  | (string * string) IterableIterator.tags_1] intf
            type t_0 = t
            [@@@js.stop ]
            type tags =
              [ `Headers  | (string * string) IterableIterator.tags_1]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags =
                [ `Headers  | (string * string) IterableIterator.tags_1]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val entries :
              'tags this -> (string * string) IterableIterator.t_1
            val keys : 'tags this -> string IterableIterator.t_1
            val values : 'tags this -> string IterableIterator.t_1
            val append : 'tags this -> name:string -> value:string -> unit
            val delete : 'tags this -> name:string -> unit
            val get_ : 'tags this -> name:string -> string option
            val has : 'tags this -> name:string -> bool
            val set_ : 'tags this -> name:string -> value:string -> unit
            val forEach :
              'tags this ->
                callbackfn:(value:string -> key:string -> parent:t -> unit)
                  -> ?thisArg:any -> unit -> unit
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : ?init:HeadersInit.t -> unit -> t
          end =
  struct
    type t = [ `Headers  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4214 : Ojs.t) -> t_of_js x4214
    and t_0_to_js : t_0 -> Ojs.t = fun (x4213 : t) -> t_to_js x4213
    type tags = [ `Headers  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4217 : Ojs.t) -> intf_of_js __tags_of_js x4217
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4215 : __tags intf) -> intf_to_js __tags_to_js x4215
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4219 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4221 : Ojs.t) ->
             let x4222 = x4221 in
             ((Ojs.string_of_js (Ojs.array_get x4222 0)),
               (Ojs.string_of_js (Ojs.array_get x4222 1))))
          (Ojs.call (this_to_js Obj.magic x4219) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4223 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4223) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4226 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4226) "values" [||])
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x4231 : 'tags this) ->
        fun ~name:(x4229 : string) ->
          fun ~value:(x4230 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4231) "append"
                 [|(Ojs.string_to_js x4229);(Ojs.string_to_js x4230)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4234 : 'tags this) ->
        fun ~name:(x4233 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4234) "delete"
               [|(Ojs.string_to_js x4233)|])
    let (get_ : 'tags this -> name:string -> string option) =
      fun (x4237 : 'tags this) ->
        fun ~name:(x4236 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4237) "get"
               [|(Ojs.string_to_js x4236)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4241 : 'tags this) ->
        fun ~name:(x4240 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4241) "has"
               [|(Ojs.string_to_js x4240)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x4245 : 'tags this) ->
        fun ~name:(x4243 : string) ->
          fun ~value:(x4244 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4245) "set"
                 [|(Ojs.string_to_js x4243);(Ojs.string_to_js x4244)|])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4254 : 'tags this) ->
        fun
          ~callbackfn:(x4247 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4248 : any option) ->
            fun () ->
              ignore
                (let x4256 = this_to_js Obj.magic x4254 in
                 Ojs.call (Ojs.get_prop_ascii x4256 "forEach") "apply"
                   [|x4256;((let x4249 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4249 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4251 : Ojs.t) ->
                                          fun (x4252 : Ojs.t) ->
                                            fun (x4253 : Ojs.t) ->
                                              x4247
                                                ~value:(Ojs.string_of_js
                                                          x4251)
                                                ~key:(Ojs.string_of_js x4252)
                                                ~parent:(t_of_js x4253)))|]);
                             (match x4248 with
                              | Some x4250 ->
                                  ignore
                                    (Ojs.call x4249 "push"
                                       [|(any_to_js x4250)|])
                              | None -> ());
                             x4249))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Headers")
             "prototype")
    let (create : ?init:HeadersInit.t -> unit -> t) =
      fun ?init:(x4257 : HeadersInit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Headers")
               (let x4258 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4257 with
                 | Some x4259 ->
                     ignore
                       (Ojs.call x4258 "push" [|(HeadersInit.t_to_js x4259)|])
                 | None -> ());
                x4258))
  end
 and
  HeadersInit:sig
                type t =
                  (string list list, Headers.t, (string, string) Record.t_2)
                    union3
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t =
      (string list list, Headers.t, (string, string) Record.t_2) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x4268 : Ojs.t) ->
        union3_of_js
          (fun (x4269 : Ojs.t) ->
             Ojs.list_of_js
               (fun (x4270 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4270)
               x4269) Headers.t_of_js
          (fun (x4273 : Ojs.t) ->
             Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js x4273) x4268
    and t_to_js : t -> Ojs.t =
      fun
        (x4260 :
          (string list list, Headers.t, (string, string) Record.t_2) union3)
        ->
        union3_to_js
          (fun (x4261 : string list list) ->
             Ojs.list_to_js
               (fun (x4262 : string list) ->
                  Ojs.list_to_js Ojs.string_to_js x4262) x4261)
          Headers.t_to_js
          (fun (x4265 : (string, string) Record.t_2) ->
             Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x4265) x4260
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4277 : Ojs.t) -> t_of_js x4277
    and t_0_to_js : t_0 -> Ojs.t = fun (x4276 : t) -> t_to_js x4276
  end
module ResponseInit =
  struct
    type t = [ `ResponseInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4279 : Ojs.t) -> t_of_js x4279
    and t_0_to_js : t_0 -> Ojs.t = fun (x4278 : t) -> t_to_js x4278
    type tags = [ `ResponseInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4282 : Ojs.t) -> intf_of_js __tags_of_js x4282
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4280 : __tags intf) -> intf_to_js __tags_to_js x4280
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4284 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4284) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4286 : 'tags this) ->
        fun (x4287 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4286) "headers"
            (HeadersInit.t_to_js x4287)
    let (get_status : 'tags this -> float) =
      fun (x4289 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4289) "status")
    let (set_status : 'tags this -> float -> unit) =
      fun (x4291 : 'tags this) ->
        fun (x4292 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4291) "status"
            (Ojs.float_to_js x4292)
    let (get_statusText : 'tags this -> string) =
      fun (x4294 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4294) "statusText")
    let (set_statusText : 'tags this -> string -> unit) =
      fun (x4296 : 'tags this) ->
        fun (x4297 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4296) "statusText"
            (Ojs.string_to_js x4297)
    let (create :
      headers:HeadersInit.t -> status:float -> statusText:string -> unit -> t)
      =
      fun ~headers:(x4299 : HeadersInit.t) ->
        fun ~status:(x4300 : float) ->
          fun ~statusText:(x4301 : string) ->
            fun () ->
              let x4302 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x4302 "headers" (HeadersInit.t_to_js x4299);
              Ojs.set_prop_ascii x4302 "status" (Ojs.float_to_js x4300);
              Ojs.set_prop_ascii x4302 "statusText" (Ojs.string_to_js x4301);
              t_of_js x4302
    let cast_from = Obj.magic
  end
module FormDataEntryValue =
  struct
    type t = [ `String of string  | `Other of File.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4307 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4308 : Ojs.t) ->
             let x4309 = x4308 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4309 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4309)
             | "Other" -> `Other (File.t_of_js x4309)
             | _ -> assert false) x4307
    and t_to_js : t -> Ojs.t =
      fun (x4303 : [ `String of string  | `Other of File.t ] Primitive.t) ->
        Primitive.t_to_js
          (fun (x4304 : [ `String of string  | `Other of File.t ]) ->
             match x4304 with
             | `String x4305 -> Ojs.string_to_js x4305
             | `Other x4306 -> File.t_to_js x4306) x4303
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4311 : Ojs.t) -> t_of_js x4311
    and t_0_to_js : t_0 -> Ojs.t = fun (x4310 : t) -> t_to_js x4310
  end
module FormData =
  struct
    type t =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4313 : Ojs.t) -> t_of_js x4313
    and t_0_to_js : t_0 -> Ojs.t = fun (x4312 : t) -> t_to_js x4312
    type tags =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4316 : Ojs.t) -> intf_of_js __tags_of_js x4316
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4314 : __tags intf) -> intf_to_js __tags_to_js x4314
    let (entries :
      'tags this -> (string * FormDataEntryValue.t) IterableIterator.t_1) =
      fun (x4318 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4320 : Ojs.t) ->
             let x4321 = x4320 in
             ((Ojs.string_of_js (Ojs.array_get x4321 0)),
               (FormDataEntryValue.t_of_js (Ojs.array_get x4321 1))))
          (Ojs.call (this_to_js Obj.magic x4318) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4322 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4322) "keys" [||])
    let (values : 'tags this -> FormDataEntryValue.t IterableIterator.t_1) =
      fun (x4325 : 'tags this) ->
        IterableIterator.t_1_of_js FormDataEntryValue.t_of_js
          (Ojs.call (this_to_js Obj.magic x4325) "values" [||])
    let (append :
      'tags this ->
        name:string ->
          value:[ `U1 of string  | `U2 of Blob.t ] ->
            ?fileName:string -> unit -> unit)
      =
      fun (x4335 : 'tags this) ->
        fun ~name:(x4328 : string) ->
          fun ~value:(x4329 : [ `U1 of string  | `U2 of Blob.t ]) ->
            fun ?fileName:(x4330 : string option) ->
              fun () ->
                ignore
                  (let x4337 = this_to_js Obj.magic x4335 in
                   Ojs.call (Ojs.get_prop_ascii x4337 "append") "apply"
                     [|x4337;((let x4331 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4331 "push"
                                    [|(Ojs.string_to_js x4328)|]);
                               ignore
                                 (Ojs.call x4331 "push"
                                    [|((match x4329 with
                                        | `U1 x4333 -> Ojs.string_to_js x4333
                                        | `U2 x4334 -> Blob.t_to_js x4334))|]);
                               (match x4330 with
                                | Some x4332 ->
                                    ignore
                                      (Ojs.call x4331 "push"
                                         [|(Ojs.string_to_js x4332)|])
                                | None -> ());
                               x4331))|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4339 : 'tags this) ->
        fun ~name:(x4338 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4339) "delete"
               [|(Ojs.string_to_js x4338)|])
    let (get_ : 'tags this -> name:string -> FormDataEntryValue.t option) =
      fun (x4342 : 'tags this) ->
        fun ~name:(x4341 : string) ->
          Ojs.option_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4342) "get"
               [|(Ojs.string_to_js x4341)|])
    let (getAll : 'tags this -> name:string -> FormDataEntryValue.t list) =
      fun (x4346 : 'tags this) ->
        fun ~name:(x4345 : string) ->
          Ojs.list_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4346) "getAll"
               [|(Ojs.string_to_js x4345)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4350 : 'tags this) ->
        fun ~name:(x4349 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4350) "has"
               [|(Ojs.string_to_js x4349)|])
    let (set_ :
      'tags this ->
        name:string ->
          value:[ `U1 of string  | `U2 of Blob.t ] ->
            ?fileName:string -> unit -> unit)
      =
      fun (x4359 : 'tags this) ->
        fun ~name:(x4352 : string) ->
          fun ~value:(x4353 : [ `U1 of string  | `U2 of Blob.t ]) ->
            fun ?fileName:(x4354 : string option) ->
              fun () ->
                ignore
                  (let x4361 = this_to_js Obj.magic x4359 in
                   Ojs.call (Ojs.get_prop_ascii x4361 "set") "apply"
                     [|x4361;((let x4355 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4355 "push"
                                    [|(Ojs.string_to_js x4352)|]);
                               ignore
                                 (Ojs.call x4355 "push"
                                    [|((match x4353 with
                                        | `U1 x4357 -> Ojs.string_to_js x4357
                                        | `U2 x4358 -> Blob.t_to_js x4358))|]);
                               (match x4354 with
                                | Some x4356 ->
                                    ignore
                                      (Ojs.call x4355 "push"
                                         [|(Ojs.string_to_js x4356)|])
                                | None -> ());
                               x4355))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FormDataEntryValue.t ->
                      key:string -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x4369 : 'tags this) ->
        fun
          ~callbackfn:(x4362 :
                        value:FormDataEntryValue.t ->
                          key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4363 : any option) ->
            fun () ->
              ignore
                (let x4371 = this_to_js Obj.magic x4369 in
                 Ojs.call (Ojs.get_prop_ascii x4371 "forEach") "apply"
                   [|x4371;((let x4364 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4364 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4366 : Ojs.t) ->
                                          fun (x4367 : Ojs.t) ->
                                            fun (x4368 : Ojs.t) ->
                                              x4362
                                                ~value:(FormDataEntryValue.t_of_js
                                                          x4366)
                                                ~key:(Ojs.string_of_js x4367)
                                                ~parent:(t_of_js x4368)))|]);
                             (match x4363 with
                              | Some x4365 ->
                                  ignore
                                    (Ojs.call x4364 "push"
                                       [|(any_to_js x4365)|])
                              | None -> ());
                             x4364))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FormData")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FormData") [||])
  end
module XMLHttpRequestBodyInit =
  struct
    type t =
      [ `String of string 
      | `Other of
          (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4 ]
        Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4380 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4381 : Ojs.t) ->
             let x4382 = x4381 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4382 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4382)
             | "Other" ->
                 `Other
                   (union4_of_js Blob.t_of_js BufferSource.t_of_js
                      FormData.t_of_js URLSearchParams.t_of_js x4382)
             | _ -> assert false) x4380
    and t_to_js : t -> Ojs.t =
      fun
        (x4372 :
          [ `String of string 
          | `Other of
              (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4 ]
            Primitive.t)
        ->
        Primitive.t_to_js
          (fun
             (x4373 :
               [ `String of string 
               | `Other of
                   (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t)
                     union4
                   ])
             ->
             match x4373 with
             | `String x4374 -> Ojs.string_to_js x4374
             | `Other x4375 ->
                 union4_to_js Blob.t_to_js BufferSource.t_to_js
                   FormData.t_to_js URLSearchParams.t_to_js x4375) x4372
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4388 : Ojs.t) -> t_of_js x4388
    and t_0_to_js : t_0 -> Ojs.t = fun (x4387 : t) -> t_to_js x4387
  end
module BodyInit =
  struct
    type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x4392 : Ojs.t) ->
        union2_of_js ReadableStream.t_0_of_js XMLHttpRequestBodyInit.t_of_js
          x4392
    and t_to_js : t -> Ojs.t =
      fun (x4389 : (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2) ->
        union2_to_js ReadableStream.t_0_to_js XMLHttpRequestBodyInit.t_to_js
          x4389
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4396 : Ojs.t) -> t_of_js x4396
    and t_0_to_js : t_0 -> Ojs.t = fun (x4395 : t) -> t_to_js x4395
  end
module Body =
  struct
    type t = [ `Body ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4398 : Ojs.t) -> t_of_js x4398
    and t_0_to_js : t_0 -> Ojs.t = fun (x4397 : t) -> t_to_js x4397
    type tags = [ `Body ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Body ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4401 : Ojs.t) -> intf_of_js __tags_of_js x4401
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4399 : __tags intf) -> intf_to_js __tags_to_js x4399
    let (get_body : 'tags this -> Uint8Array.t_0 ReadableStream.t option) =
      fun (x4403 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4405 : Ojs.t) ->
             ReadableStream.t_of_js Uint8Array.t_0_of_js x4405)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4403) "body")
    let (get_bodyUsed : 'tags this -> bool) =
      fun (x4407 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4407) "bodyUsed")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x4409 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x4409) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t Promise.t_1) =
      fun (x4412 : 'tags this) ->
        Promise.t_1_of_js Blob.t_of_js
          (Ojs.call (this_to_js Obj.magic x4412) "blob" [||])
    let (formData : 'tags this -> FormData.t Promise.t_1) =
      fun (x4415 : 'tags this) ->
        Promise.t_1_of_js FormData.t_of_js
          (Ojs.call (this_to_js Obj.magic x4415) "formData" [||])
    let (json : 'tags this -> any Promise.t_1) =
      fun (x4418 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.call (this_to_js Obj.magic x4418) "json" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x4421 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4421) "text" [||])
    let cast_from = Obj.magic
  end
module Response =
  struct
    type t = [ `Body  | `Response ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4425 : Ojs.t) -> t_of_js x4425
    and t_0_to_js : t_0 -> Ojs.t = fun (x4424 : t) -> t_to_js x4424
    type tags = [ `Body  | `Response ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Response ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4428 : Ojs.t) -> intf_of_js __tags_of_js x4428
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4426 : __tags intf) -> intf_to_js __tags_to_js x4426
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4430 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4430) "headers")
    let (get_ok : 'tags this -> bool) =
      fun (x4432 : 'tags this) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4432) "ok")
    let (get_redirected : 'tags this -> bool) =
      fun (x4434 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4434) "redirected")
    let (get_status : 'tags this -> float) =
      fun (x4436 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4436) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4438 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4438) "statusText")
    let (get_type : 'tags this -> ResponseType.t) =
      fun (x4440 : 'tags this) ->
        ResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4440) "type")
    let (get_url : 'tags this -> string) =
      fun (x4442 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4442) "url")
    let (clone : 'tags this -> t) =
      fun (x4444 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4444) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Response")
             "prototype")
    let (create :
      ?body:BodyInit.t option -> ?init:ResponseInit.t -> unit -> t) =
      fun ?body:(x4446 : BodyInit.t option option) ->
        fun ?init:(x4447 : ResponseInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Response")
                 (let x4448 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4446 with
                   | Some x4450 ->
                       ignore
                         (Ojs.call x4448 "push"
                            [|(Ojs.option_to_js BodyInit.t_to_js x4450)|])
                   | None -> ());
                  (match x4447 with
                   | Some x4449 ->
                       ignore
                         (Ojs.call x4448 "push"
                            [|(ResponseInit.t_to_js x4449)|])
                   | None -> ());
                  x4448))
    let (error : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Response") "error" [||])
    let (redirect :
      url:[ `U1 of string  | `U2 of URL.t ] -> ?status:float -> unit -> t) =
      fun ~url:(x4452 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?status:(x4453 : float option) ->
          fun () ->
            t_of_js
              (let x4458 = Ojs.get_prop_ascii Ojs.global "Response" in
               Ojs.call (Ojs.get_prop_ascii x4458 "redirect") "apply"
                 [|x4458;((let x4454 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4454 "push"
                                [|((match x4452 with
                                    | `U1 x4456 -> Ojs.string_to_js x4456
                                    | `U2 x4457 -> URL.t_to_js x4457))|]);
                           (match x4453 with
                            | Some x4455 ->
                                ignore
                                  (Ojs.call x4454 "push"
                                     [|(Ojs.float_to_js x4455)|])
                            | None -> ());
                           x4454))|])
  end
module RequestRedirect =
  struct
    type t = [ `L_s112_manual  | `L_s68_error  | `L_s77_follow ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4460 : Ojs.t) ->
        let x4461 = x4460 in
        match Ojs.string_of_js x4461 with
        | "manual" -> `L_s112_manual
        | "error" -> `L_s68_error
        | "follow" -> `L_s77_follow
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4459 : [ `L_s112_manual  | `L_s68_error  | `L_s77_follow ]) ->
        match x4459 with
        | `L_s112_manual -> Ojs.string_to_js "manual"
        | `L_s68_error -> Ojs.string_to_js "error"
        | `L_s77_follow -> Ojs.string_to_js "follow"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4463 : Ojs.t) -> t_of_js x4463
    and t_0_to_js : t_0 -> Ojs.t = fun (x4462 : t) -> t_to_js x4462
  end
module RequestMode =
  struct
    type t =
      [ `L_s121_navigate  | `L_s126_no_cors  | `L_s175_same_origin 
      | `L_s55_cors ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4465 : Ojs.t) ->
        let x4466 = x4465 in
        match Ojs.string_of_js x4466 with
        | "navigate" -> `L_s121_navigate
        | "no-cors" -> `L_s126_no_cors
        | "same-origin" -> `L_s175_same_origin
        | "cors" -> `L_s55_cors
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4464 :
          [ `L_s121_navigate  | `L_s126_no_cors  | `L_s175_same_origin 
          | `L_s55_cors ])
        ->
        match x4464 with
        | `L_s121_navigate -> Ojs.string_to_js "navigate"
        | `L_s126_no_cors -> Ojs.string_to_js "no-cors"
        | `L_s175_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s55_cors -> Ojs.string_to_js "cors"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4468 : Ojs.t) -> t_of_js x4468
    and t_0_to_js : t_0 -> Ojs.t = fun (x4467 : t) -> t_to_js x4467
  end
module RequestCredentials =
  struct
    type t = [ `L_s136_omit  | `L_s175_same_origin  | `L_s94_include ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4470 : Ojs.t) ->
        let x4471 = x4470 in
        match Ojs.string_of_js x4471 with
        | "omit" -> `L_s136_omit
        | "same-origin" -> `L_s175_same_origin
        | "include" -> `L_s94_include
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4469 : [ `L_s136_omit  | `L_s175_same_origin  | `L_s94_include ])
        ->
        match x4469 with
        | `L_s136_omit -> Ojs.string_to_js "omit"
        | `L_s175_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s94_include -> Ojs.string_to_js "include"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4473 : Ojs.t) -> t_of_js x4473
    and t_0_to_js : t_0 -> Ojs.t = fun (x4472 : t) -> t_to_js x4472
  end
module RequestCache =
  struct
    type t =
      [ `L_s125_no_cache  | `L_s129_no_store  | `L_s138_only_if_cached 
      | `L_s171_reload  | `L_s57_default  | `L_s79_force_cache ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4475 : Ojs.t) ->
        let x4476 = x4475 in
        match Ojs.string_of_js x4476 with
        | "no-cache" -> `L_s125_no_cache
        | "no-store" -> `L_s129_no_store
        | "only-if-cached" -> `L_s138_only_if_cached
        | "reload" -> `L_s171_reload
        | "default" -> `L_s57_default
        | "force-cache" -> `L_s79_force_cache
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4474 :
          [ `L_s125_no_cache  | `L_s129_no_store  | `L_s138_only_if_cached 
          | `L_s171_reload  | `L_s57_default  | `L_s79_force_cache ])
        ->
        match x4474 with
        | `L_s125_no_cache -> Ojs.string_to_js "no-cache"
        | `L_s129_no_store -> Ojs.string_to_js "no-store"
        | `L_s138_only_if_cached -> Ojs.string_to_js "only-if-cached"
        | `L_s171_reload -> Ojs.string_to_js "reload"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s79_force_cache -> Ojs.string_to_js "force-cache"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4478 : Ojs.t) -> t_of_js x4478
    and t_0_to_js : t_0 -> Ojs.t = fun (x4477 : t) -> t_to_js x4477
  end
module ReferrerPolicy =
  struct
    type t =
      [ `L_s0  | `L_s127_no_referrer  | `L_s128_no_referrer_when_downgrade 
      | `L_s142_origin  | `L_s143_origin_when_cross_origin 
      | `L_s175_same_origin  | `L_s190_strict_origin 
      | `L_s191_strict_origin_when_cross_origin  | `L_s203_unsafe_url ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4480 : Ojs.t) ->
        let x4481 = x4480 in
        match Ojs.string_of_js x4481 with
        | "" -> `L_s0
        | "no-referrer" -> `L_s127_no_referrer
        | "no-referrer-when-downgrade" -> `L_s128_no_referrer_when_downgrade
        | "origin" -> `L_s142_origin
        | "origin-when-cross-origin" -> `L_s143_origin_when_cross_origin
        | "same-origin" -> `L_s175_same_origin
        | "strict-origin" -> `L_s190_strict_origin
        | "strict-origin-when-cross-origin" ->
            `L_s191_strict_origin_when_cross_origin
        | "unsafe-url" -> `L_s203_unsafe_url
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4479 :
          [ `L_s0  | `L_s127_no_referrer 
          | `L_s128_no_referrer_when_downgrade  | `L_s142_origin 
          | `L_s143_origin_when_cross_origin  | `L_s175_same_origin 
          | `L_s190_strict_origin  | `L_s191_strict_origin_when_cross_origin 
          | `L_s203_unsafe_url ])
        ->
        match x4479 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s127_no_referrer -> Ojs.string_to_js "no-referrer"
        | `L_s128_no_referrer_when_downgrade ->
            Ojs.string_to_js "no-referrer-when-downgrade"
        | `L_s142_origin -> Ojs.string_to_js "origin"
        | `L_s143_origin_when_cross_origin ->
            Ojs.string_to_js "origin-when-cross-origin"
        | `L_s175_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s190_strict_origin -> Ojs.string_to_js "strict-origin"
        | `L_s191_strict_origin_when_cross_origin ->
            Ojs.string_to_js "strict-origin-when-cross-origin"
        | `L_s203_unsafe_url -> Ojs.string_to_js "unsafe-url"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4483 : Ojs.t) -> t_of_js x4483
    and t_0_to_js : t_0 -> Ojs.t = fun (x4482 : t) -> t_to_js x4482
  end
module RequestInit =
  struct
    type t = [ `RequestInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4485 : Ojs.t) -> t_of_js x4485
    and t_0_to_js : t_0 -> Ojs.t = fun (x4484 : t) -> t_to_js x4484
    type tags = [ `RequestInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4488 : Ojs.t) -> intf_of_js __tags_of_js x4488
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4486 : __tags intf) -> intf_to_js __tags_to_js x4486
    let (get_body : 'tags this -> BodyInit.t option) =
      fun (x4490 : 'tags this) ->
        Ojs.option_of_js BodyInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4490) "body")
    let (set_body : 'tags this -> BodyInit.t option -> unit) =
      fun (x4493 : 'tags this) ->
        fun (x4494 : BodyInit.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4493) "body"
            (Ojs.option_to_js BodyInit.t_to_js x4494)
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4497 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4497) "cache")
    let (set_cache : 'tags this -> RequestCache.t -> unit) =
      fun (x4499 : 'tags this) ->
        fun (x4500 : RequestCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4499) "cache"
            (RequestCache.t_to_js x4500)
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4502 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4502) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x4504 : 'tags this) ->
        fun (x4505 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4504) "credentials"
            (RequestCredentials.t_to_js x4505)
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4507 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4507) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4509 : 'tags this) ->
        fun (x4510 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4509) "headers"
            (HeadersInit.t_to_js x4510)
    let (get_integrity : 'tags this -> string) =
      fun (x4512 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4512) "integrity")
    let (set_integrity : 'tags this -> string -> unit) =
      fun (x4514 : 'tags this) ->
        fun (x4515 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4514) "integrity"
            (Ojs.string_to_js x4515)
    let (get_keepalive : 'tags this -> bool) =
      fun (x4517 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4517) "keepalive")
    let (set_keepalive : 'tags this -> bool -> unit) =
      fun (x4519 : 'tags this) ->
        fun (x4520 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4519) "keepalive"
            (Ojs.bool_to_js x4520)
    let (get_method : 'tags this -> string) =
      fun (x4522 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4522) "method")
    let (set_method : 'tags this -> string -> unit) =
      fun (x4524 : 'tags this) ->
        fun (x4525 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4524) "method"
            (Ojs.string_to_js x4525)
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4527 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4527) "mode")
    let (set_mode : 'tags this -> RequestMode.t -> unit) =
      fun (x4529 : 'tags this) ->
        fun (x4530 : RequestMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4529) "mode"
            (RequestMode.t_to_js x4530)
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4532 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4532) "redirect")
    let (set_redirect : 'tags this -> RequestRedirect.t -> unit) =
      fun (x4534 : 'tags this) ->
        fun (x4535 : RequestRedirect.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4534) "redirect"
            (RequestRedirect.t_to_js x4535)
    let (get_referrer : 'tags this -> string) =
      fun (x4537 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4537) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x4539 : 'tags this) ->
        fun (x4540 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4539) "referrer"
            (Ojs.string_to_js x4540)
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4542 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4542) "referrerPolicy")
    let (set_referrerPolicy : 'tags this -> ReferrerPolicy.t -> unit) =
      fun (x4544 : 'tags this) ->
        fun (x4545 : ReferrerPolicy.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4544) "referrerPolicy"
            (ReferrerPolicy.t_to_js x4545)
    let (get_signal : 'tags this -> AbortSignal.t option) =
      fun (x4547 : 'tags this) ->
        Ojs.option_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4547) "signal")
    let (set_signal : 'tags this -> AbortSignal.t option -> unit) =
      fun (x4550 : 'tags this) ->
        fun (x4551 : AbortSignal.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4550) "signal"
            (Ojs.option_to_js AbortSignal.t_to_js x4551)
    let (get_window : 'tags this -> null) =
      fun (x4554 : 'tags this) ->
        null_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4554) "window")
    let (set_window : 'tags this -> null -> unit) =
      fun (x4556 : 'tags this) ->
        fun (x4557 : null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4556) "window"
            (null_to_js x4557)
    let (create :
      ?body:BodyInit.t ->
        cache:RequestCache.t ->
          credentials:RequestCredentials.t ->
            headers:HeadersInit.t ->
              integrity:string ->
                keepalive:bool ->
                  method_:string ->
                    mode:RequestMode.t ->
                      redirect:RequestRedirect.t ->
                        referrer:string ->
                          referrerPolicy:ReferrerPolicy.t ->
                            ?signal:AbortSignal.t ->
                              ?window:never -> unit -> t)
      =
      fun ?body:(x4559 : BodyInit.t option) ->
        fun ~cache:(x4560 : RequestCache.t) ->
          fun ~credentials:(x4561 : RequestCredentials.t) ->
            fun ~headers:(x4562 : HeadersInit.t) ->
              fun ~integrity:(x4563 : string) ->
                fun ~keepalive:(x4564 : bool) ->
                  fun ~method_:(x4565 : string) ->
                    fun ~mode:(x4566 : RequestMode.t) ->
                      fun ~redirect:(x4567 : RequestRedirect.t) ->
                        fun ~referrer:(x4568 : string) ->
                          fun ~referrerPolicy:(x4569 : ReferrerPolicy.t) ->
                            fun ?signal:(x4570 : AbortSignal.t option) ->
                              fun ?window:(x4571 : never option) ->
                                fun () ->
                                  let x4572 = Ojs.empty_obj () in
                                  (match x4559 with
                                   | Some x4575 ->
                                       Ojs.set_prop_ascii x4572 "body"
                                         (BodyInit.t_to_js x4575)
                                   | None -> ());
                                  Ojs.set_prop_ascii x4572 "cache"
                                    (RequestCache.t_to_js x4560);
                                  Ojs.set_prop_ascii x4572 "credentials"
                                    (RequestCredentials.t_to_js x4561);
                                  Ojs.set_prop_ascii x4572 "headers"
                                    (HeadersInit.t_to_js x4562);
                                  Ojs.set_prop_ascii x4572 "integrity"
                                    (Ojs.string_to_js x4563);
                                  Ojs.set_prop_ascii x4572 "keepalive"
                                    (Ojs.bool_to_js x4564);
                                  Ojs.set_prop_ascii x4572 "method"
                                    (Ojs.string_to_js x4565);
                                  Ojs.set_prop_ascii x4572 "mode"
                                    (RequestMode.t_to_js x4566);
                                  Ojs.set_prop_ascii x4572 "redirect"
                                    (RequestRedirect.t_to_js x4567);
                                  Ojs.set_prop_ascii x4572 "referrer"
                                    (Ojs.string_to_js x4568);
                                  Ojs.set_prop_ascii x4572 "referrerPolicy"
                                    (ReferrerPolicy.t_to_js x4569);
                                  (match x4570 with
                                   | Some x4574 ->
                                       Ojs.set_prop_ascii x4572 "signal"
                                         (AbortSignal.t_to_js x4574)
                                   | None -> ());
                                  (match x4571 with
                                   | Some x4573 ->
                                       Ojs.set_prop_ascii x4572 "window"
                                         (never_to_js x4573)
                                   | None -> ());
                                  t_of_js x4572
    let cast_from = Obj.magic
  end
module RequestDestination =
  struct
    type t =
      [ `L_s0  | `L_s111_manifest  | `L_s134_object  | `L_s147_paintworklet 
      | `L_s172_report  | `L_s177_script  | `L_s180_sharedworker 
      | `L_s192_style  | `L_s198_track  | `L_s210_video  | `L_s215_worker 
      | `L_s218_xslt  | `L_s38_audio  | `L_s39_audioworklet 
      | `L_s63_document  | `L_s65_embed  | `L_s78_font  | `L_s80_frame 
      | `L_s91_iframe  | `L_s92_image ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4577 : Ojs.t) ->
        let x4578 = x4577 in
        match Ojs.string_of_js x4578 with
        | "" -> `L_s0
        | "manifest" -> `L_s111_manifest
        | "object" -> `L_s134_object
        | "paintworklet" -> `L_s147_paintworklet
        | "report" -> `L_s172_report
        | "script" -> `L_s177_script
        | "sharedworker" -> `L_s180_sharedworker
        | "style" -> `L_s192_style
        | "track" -> `L_s198_track
        | "video" -> `L_s210_video
        | "worker" -> `L_s215_worker
        | "xslt" -> `L_s218_xslt
        | "audio" -> `L_s38_audio
        | "audioworklet" -> `L_s39_audioworklet
        | "document" -> `L_s63_document
        | "embed" -> `L_s65_embed
        | "font" -> `L_s78_font
        | "frame" -> `L_s80_frame
        | "iframe" -> `L_s91_iframe
        | "image" -> `L_s92_image
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4576 :
          [ `L_s0  | `L_s111_manifest  | `L_s134_object 
          | `L_s147_paintworklet  | `L_s172_report  | `L_s177_script 
          | `L_s180_sharedworker  | `L_s192_style  | `L_s198_track 
          | `L_s210_video  | `L_s215_worker  | `L_s218_xslt  | `L_s38_audio 
          | `L_s39_audioworklet  | `L_s63_document  | `L_s65_embed 
          | `L_s78_font  | `L_s80_frame  | `L_s91_iframe  | `L_s92_image ])
        ->
        match x4576 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s111_manifest -> Ojs.string_to_js "manifest"
        | `L_s134_object -> Ojs.string_to_js "object"
        | `L_s147_paintworklet -> Ojs.string_to_js "paintworklet"
        | `L_s172_report -> Ojs.string_to_js "report"
        | `L_s177_script -> Ojs.string_to_js "script"
        | `L_s180_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s192_style -> Ojs.string_to_js "style"
        | `L_s198_track -> Ojs.string_to_js "track"
        | `L_s210_video -> Ojs.string_to_js "video"
        | `L_s215_worker -> Ojs.string_to_js "worker"
        | `L_s218_xslt -> Ojs.string_to_js "xslt"
        | `L_s38_audio -> Ojs.string_to_js "audio"
        | `L_s39_audioworklet -> Ojs.string_to_js "audioworklet"
        | `L_s63_document -> Ojs.string_to_js "document"
        | `L_s65_embed -> Ojs.string_to_js "embed"
        | `L_s78_font -> Ojs.string_to_js "font"
        | `L_s80_frame -> Ojs.string_to_js "frame"
        | `L_s91_iframe -> Ojs.string_to_js "iframe"
        | `L_s92_image -> Ojs.string_to_js "image"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4580 : Ojs.t) -> t_of_js x4580
    and t_0_to_js : t_0 -> Ojs.t = fun (x4579 : t) -> t_to_js x4579
  end
module rec
  Request:sig
            type t = [ `Body  | `Request ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Body  | `Request ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `Body  | `Request ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Request ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_cache : 'tags this -> RequestCache.t
            val get_credentials : 'tags this -> RequestCredentials.t
            val get_destination : 'tags this -> RequestDestination.t
            val get_headers : 'tags this -> Headers.t
            val get_integrity : 'tags this -> string
            val get_keepalive : 'tags this -> bool
            val get_method : 'tags this -> string
            val get_mode : 'tags this -> RequestMode.t
            val get_redirect : 'tags this -> RequestRedirect.t
            val get_referrer : 'tags this -> string
            val get_referrerPolicy : 'tags this -> ReferrerPolicy.t
            val get_signal : 'tags this -> AbortSignal.t
            val get_url : 'tags this -> string
            val clone : 'tags this -> t
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t
          end =
  struct
    type t = [ `Body  | `Request ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4582 : Ojs.t) -> t_of_js x4582
    and t_0_to_js : t_0 -> Ojs.t = fun (x4581 : t) -> t_to_js x4581
    type tags = [ `Body  | `Request ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Request ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4585 : Ojs.t) -> intf_of_js __tags_of_js x4585
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4583 : __tags intf) -> intf_to_js __tags_to_js x4583
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4587 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4587) "cache")
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4589 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4589) "credentials")
    let (get_destination : 'tags this -> RequestDestination.t) =
      fun (x4591 : 'tags this) ->
        RequestDestination.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4591) "destination")
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4593 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4593) "headers")
    let (get_integrity : 'tags this -> string) =
      fun (x4595 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4595) "integrity")
    let (get_keepalive : 'tags this -> bool) =
      fun (x4597 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4597) "keepalive")
    let (get_method : 'tags this -> string) =
      fun (x4599 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4599) "method")
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4601 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4601) "mode")
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4603 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4603) "redirect")
    let (get_referrer : 'tags this -> string) =
      fun (x4605 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4605) "referrer")
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4607 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4607) "referrerPolicy")
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x4609 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4609) "signal")
    let (get_url : 'tags this -> string) =
      fun (x4611 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4611) "url")
    let (clone : 'tags this -> t) =
      fun (x4613 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4613) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Request")
             "prototype")
    let (create : input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t) =
      fun ~input:(x4615 : RequestInfo.t) ->
        fun ?init:(x4616 : RequestInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Request")
                 (let x4617 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4617 "push" [|(RequestInfo.t_to_js x4615)|]);
                  (match x4616 with
                   | Some x4618 ->
                       ignore
                         (Ojs.call x4617 "push"
                            [|(RequestInit.t_to_js x4618)|])
                   | None -> ());
                  x4617))
  end
 and
  RequestInfo:sig
                type t =
                  [ `String of string  | `Other of Request.t ] Primitive.t
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t = [ `String of string  | `Other of Request.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x4623 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x4624 : Ojs.t) ->
             let x4625 = x4624 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x4625 "dummy") with
             | "String" -> `String (Ojs.string_of_js x4625)
             | "Other" -> `Other (Request.t_of_js x4625)
             | _ -> assert false) x4623
    and t_to_js : t -> Ojs.t =
      fun (x4619 : [ `String of string  | `Other of Request.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x4620 : [ `String of string  | `Other of Request.t ]) ->
             match x4620 with
             | `String x4621 -> Ojs.string_to_js x4621
             | `Other x4622 -> Request.t_to_js x4622) x4619
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4627 : Ojs.t) -> t_of_js x4627
    and t_0_to_js : t_0 -> Ojs.t = fun (x4626 : t) -> t_to_js x4626
  end
module Cache =
  struct
    type t = [ `Cache ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4629 : Ojs.t) -> t_of_js x4629
    and t_0_to_js : t_0 -> Ojs.t = fun (x4628 : t) -> t_to_js x4628
    type tags = [ `Cache ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4632 : Ojs.t) -> intf_of_js __tags_of_js x4632
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4630 : __tags intf) -> intf_to_js __tags_to_js x4630
    let (addAll :
      'tags this -> requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1)
      =
      fun (x4636 : 'tags this) ->
        fun ~requests:(x4634 : RequestInfo.t Iterable.t_1) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4636) "addAll"
               [|(Iterable.t_1_to_js RequestInfo.t_to_js x4634)|])
    let (add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1) =
      fun (x4640 : 'tags this) ->
        fun ~request:(x4639 : RequestInfo.t) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4640) "add"
               [|(RequestInfo.t_to_js x4639)|])
    let (addAll' :
      'tags this -> requests:RequestInfo.t list -> unit Promise.t_1) =
      fun (x4645 : 'tags this) ->
        fun ~requests:(x4643 : RequestInfo.t list) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4645) "addAll"
               [|(Ojs.list_to_js RequestInfo.t_to_js x4643)|])
    let (delete :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1)
      =
      fun (x4652 : 'tags this) ->
        fun ~request:(x4648 : RequestInfo.t) ->
          fun ?options:(x4649 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.bool_of_js
                (let x4654 = this_to_js Obj.magic x4652 in
                 Ojs.call (Ojs.get_prop_ascii x4654 "delete") "apply"
                   [|x4654;((let x4650 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4650 "push"
                                  [|(RequestInfo.t_to_js x4648)|]);
                             (match x4649 with
                              | Some x4651 ->
                                  ignore
                                    (Ojs.call x4650 "push"
                                       [|(CacheQueryOptions.t_to_js x4651)|])
                              | None -> ());
                             x4650))|])
    let (keys :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t_1)
      =
      fun (x4661 : 'tags this) ->
        fun ?request:(x4656 : RequestInfo.t option) ->
          fun ?options:(x4657 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4664 : Ojs.t) -> Ojs.list_of_js Request.t_of_js x4664)
                (let x4663 = this_to_js Obj.magic x4661 in
                 Ojs.call (Ojs.get_prop_ascii x4663 "keys") "apply"
                   [|x4663;((let x4658 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4656 with
                              | Some x4660 ->
                                  ignore
                                    (Ojs.call x4658 "push"
                                       [|(RequestInfo.t_to_js x4660)|])
                              | None -> ());
                             (match x4657 with
                              | Some x4659 ->
                                  ignore
                                    (Ojs.call x4658 "push"
                                       [|(CacheQueryOptions.t_to_js x4659)|])
                              | None -> ());
                             x4658))|])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t ->
            unit -> Response.t option Promise.t_1)
      =
      fun (x4670 : 'tags this) ->
        fun ~request:(x4666 : RequestInfo.t) ->
          fun ?options:(x4667 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4673 : Ojs.t) ->
                   Ojs.option_of_js Response.t_of_js x4673)
                (let x4672 = this_to_js Obj.magic x4670 in
                 Ojs.call (Ojs.get_prop_ascii x4672 "match") "apply"
                   [|x4672;((let x4668 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4668 "push"
                                  [|(RequestInfo.t_to_js x4666)|]);
                             (match x4667 with
                              | Some x4669 ->
                                  ignore
                                    (Ojs.call x4668 "push"
                                       [|(CacheQueryOptions.t_to_js x4669)|])
                              | None -> ());
                             x4668))|])
    let (matchAll :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t_1)
      =
      fun (x4680 : 'tags this) ->
        fun ?request:(x4675 : RequestInfo.t option) ->
          fun ?options:(x4676 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4683 : Ojs.t) -> Ojs.list_of_js Response.t_of_js x4683)
                (let x4682 = this_to_js Obj.magic x4680 in
                 Ojs.call (Ojs.get_prop_ascii x4682 "matchAll") "apply"
                   [|x4682;((let x4677 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4675 with
                              | Some x4679 ->
                                  ignore
                                    (Ojs.call x4677 "push"
                                       [|(RequestInfo.t_to_js x4679)|])
                              | None -> ());
                             (match x4676 with
                              | Some x4678 ->
                                  ignore
                                    (Ojs.call x4677 "push"
                                       [|(CacheQueryOptions.t_to_js x4678)|])
                              | None -> ());
                             x4677))|])
    let (put :
      'tags this ->
        request:RequestInfo.t -> response:Response.t -> unit Promise.t_1)
      =
      fun (x4687 : 'tags this) ->
        fun ~request:(x4685 : RequestInfo.t) ->
          fun ~response:(x4686 : Response.t) ->
            Promise.t_1_of_js Ojs.unit_of_js
              (Ojs.call (this_to_js Obj.magic x4687) "put"
                 [|(RequestInfo.t_to_js x4685);(Response.t_to_js x4686)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Cache")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Cache") [||])
  end
module CachesStatic =
  struct
    let (delete : string -> bool Promise.t_1) =
      fun (x4690 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "delete"
             [|(Ojs.string_to_js x4690)|])
    let (has : string -> bool Promise.t_1) =
      fun (x4692 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "has"
             [|(Ojs.string_to_js x4692)|])
    let (keys : unit -> string list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x4694 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4694)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "keys" [||])
    let (match_ :
      request:RequestInfo.t ->
        ?options:MultiCacheQueryOptions.t ->
          unit -> Response.t option Promise.t_1)
      =
      fun ~request:(x4696 : RequestInfo.t) ->
        fun ?options:(x4697 : MultiCacheQueryOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x4701 : Ojs.t) -> Ojs.option_of_js Response.t_of_js x4701)
              (let x4700 = Ojs.get_prop_ascii Ojs.global "caches" in
               Ojs.call (Ojs.get_prop_ascii x4700 "match") "apply"
                 [|x4700;((let x4698 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4698 "push"
                                [|(RequestInfo.t_to_js x4696)|]);
                           (match x4697 with
                            | Some x4699 ->
                                ignore
                                  (Ojs.call x4698 "push"
                                     [|(MultiCacheQueryOptions.t_to_js x4699)|])
                            | None -> ());
                           x4698))|])
    let (open_ : string -> Cache.t Promise.t_1) =
      fun (x4703 : string) ->
        Promise.t_1_of_js Cache.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "open"
             [|(Ojs.string_to_js x4703)|])
  end
module XMLHttpRequestResponseType =
  struct
    type t =
      [ `L_s0  | `L_s195_text  | `L_s37_arraybuffer  | `L_s44_blob 
      | `L_s63_document  | `L_s98_json ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4706 : Ojs.t) ->
        let x4707 = x4706 in
        match Ojs.string_of_js x4707 with
        | "" -> `L_s0
        | "text" -> `L_s195_text
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | "document" -> `L_s63_document
        | "json" -> `L_s98_json
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4705 :
          [ `L_s0  | `L_s195_text  | `L_s37_arraybuffer  | `L_s44_blob 
          | `L_s63_document  | `L_s98_json ])
        ->
        match x4705 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s195_text -> Ojs.string_to_js "text"
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
        | `L_s63_document -> Ojs.string_to_js "document"
        | `L_s98_json -> Ojs.string_to_js "json"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4709 : Ojs.t) -> t_of_js x4709
    and t_0_to_js : t_0 -> Ojs.t = fun (x4708 : t) -> t_to_js x4708
  end
module ProgressEventInit =
  struct
    type t = [ `EventInit  | `ProgressEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4711 : Ojs.t) -> t_of_js x4711
    and t_0_to_js : t_0 -> Ojs.t = fun (x4710 : t) -> t_to_js x4710
    type tags = [ `EventInit  | `ProgressEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4714 : Ojs.t) -> intf_of_js __tags_of_js x4714
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4712 : __tags intf) -> intf_to_js __tags_to_js x4712
    let (get_lengthComputable : 'tags this -> bool) =
      fun (x4716 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4716) "lengthComputable")
    let (set_lengthComputable : 'tags this -> bool -> unit) =
      fun (x4718 : 'tags this) ->
        fun (x4719 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4718) "lengthComputable"
            (Ojs.bool_to_js x4719)
    let (get_loaded : 'tags this -> float) =
      fun (x4721 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4721) "loaded")
    let (set_loaded : 'tags this -> float -> unit) =
      fun (x4723 : 'tags this) ->
        fun (x4724 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4723) "loaded"
            (Ojs.float_to_js x4724)
    let (get_total : 'tags this -> float) =
      fun (x4726 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4726) "total")
    let (set_total : 'tags this -> float -> unit) =
      fun (x4728 : 'tags this) ->
        fun (x4729 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4728) "total"
            (Ojs.float_to_js x4729)
    let (create :
      lengthComputable:bool -> loaded:float -> total:float -> unit -> t) =
      fun ~lengthComputable:(x4731 : bool) ->
        fun ~loaded:(x4732 : float) ->
          fun ~total:(x4733 : float) ->
            fun () ->
              let x4734 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x4734 "lengthComputable"
                (Ojs.bool_to_js x4731);
              Ojs.set_prop_ascii x4734 "loaded" (Ojs.float_to_js x4732);
              Ojs.set_prop_ascii x4734 "total" (Ojs.float_to_js x4733);
              t_of_js x4734
    let cast_from = Obj.magic
  end
module ProgressEvent =
  struct
    type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4737 : Ojs.t) -> t_of_js __T_of_js x4737
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4735 : __T t) -> t_to_js __T_to_js x4735
    type t_0 = EventTarget.t t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4741 : Ojs.t) -> t_of_js EventTarget.t_of_js x4741
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4739 : EventTarget.t t) -> t_to_js EventTarget.t_to_js x4739
    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = EventTarget.t tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x4745 : Ojs.t) -> intf_of_js __tags_of_js x4745
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x4743 : __tags intf) -> intf_to_js __tags_to_js x4743
    let (get_lengthComputable : ('tags, 'T) this -> bool) =
      fun (x4747 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4747)
             "lengthComputable")
    let (get_loaded : ('tags, 'T) this -> float) =
      fun (x4750 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4750) "loaded")
    let (get_target : ('tags, 'T) this -> 'T option) =
      fun (x4753 : ('tags, 'T) this) ->
        Ojs.option_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4753) "target")
    let (get_total : ('tags, 'T) this -> float) =
      fun (x4757 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4757) "total")
    let (create :
      lengthComputable:bool ->
        loaded:float -> ?target:'T -> total:float -> unit -> 'T t)
      =
      fun ~lengthComputable:(x4760 : bool) ->
        fun ~loaded:(x4761 : float) ->
          fun ?target:(x4762 : 'T option) ->
            fun ~total:(x4763 : float) ->
              fun () ->
                let x4764 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x4764 "lengthComputable"
                  (Ojs.bool_to_js x4760);
                Ojs.set_prop_ascii x4764 "loaded" (Ojs.float_to_js x4761);
                (match x4762 with
                 | Some x4766 ->
                     Ojs.set_prop_ascii x4764 "target" (Obj.magic x4766)
                 | None -> ());
                Ojs.set_prop_ascii x4764 "total" (Ojs.float_to_js x4763);
                t_of_js Obj.magic x4764
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0) =
      fun ~type_:(x4767 : string) ->
        fun ?eventInitDict:(x4768 : ProgressEventInit.t option) ->
          fun () ->
            t_0_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
                 (let x4769 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4769 "push" [|(Ojs.string_to_js x4767)|]);
                  (match x4768 with
                   | Some x4770 ->
                       ignore
                         (Ojs.call x4769 "push"
                            [|(ProgressEventInit.t_to_js x4770)|])
                   | None -> ());
                  x4769))
  end
module rec
  XMLHttpRequest:sig
                   type t =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags =
                       [ `EventTarget  | `XMLHttpRequest 
                       | `XMLHttpRequestEventTarget ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `XMLHttpRequest ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_onreadystatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) option
                   val set_onreadystatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) option -> unit
                   val get_readyState : 'tags this -> float
                   val get_response : 'tags this -> any
                   val get_responseText : 'tags this -> string
                   val get_responseType :
                     'tags this -> XMLHttpRequestResponseType.t
                   val set_responseType :
                     'tags this -> XMLHttpRequestResponseType.t -> unit
                   val get_responseURL : 'tags this -> string
                   val get_status : 'tags this -> float
                   val get_statusText : 'tags this -> string
                   val get_timeout : 'tags this -> float
                   val set_timeout : 'tags this -> float -> unit
                   val get_upload : 'tags this -> XMLHttpRequestUpload.t
                   val get_withCredentials : 'tags this -> bool
                   val set_withCredentials : 'tags this -> bool -> unit
                   val abort : 'tags this -> unit
                   val getAllResponseHeaders : 'tags this -> string
                   val getResponseHeader :
                     'tags this -> name:string -> string option
                   val open_ :
                     'tags this ->
                       method_:string ->
                         url:[ `U1 of string  | `U2 of URL.t ] -> unit
                   val open_' :
                     'tags this ->
                       method_:string ->
                         url:[ `U1 of string  | `U2 of URL.t ] ->
                           async:bool ->
                             ?username:string option ->
                               ?password:string option -> unit -> unit
                   val overrideMimeType : 'tags this -> mime:string -> unit
                   val send :
                     'tags this ->
                       ?body:XMLHttpRequestBodyInit.t option -> unit -> unit
                   val setRequestHeader :
                     'tags this -> name:string -> value:string -> unit
                   val get_DONE : 'tags this -> float
                   val get_HEADERS_RECEIVED : 'tags this -> float
                   val get_LOADING : 'tags this -> float
                   val get_OPENED : 'tags this -> float
                   val get_UNSENT : 'tags this -> float
                   val addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit
                   val addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit
                   val removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit
                   val removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                   val done_ : unit -> float
                   val headers_received : unit -> float
                   val loading : unit -> float
                   val opened : unit -> float
                   val unsent : unit -> float
                 end =
  struct
    type t =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4772 : Ojs.t) -> t_of_js x4772
    and t_0_to_js : t_0 -> Ojs.t = fun (x4771 : t) -> t_to_js x4771
    type tags =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4775 : Ojs.t) -> intf_of_js __tags_of_js x4775
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4773 : __tags intf) -> intf_to_js __tags_to_js x4773
    let (get_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x4777 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4779 : Ojs.t) ->
             fun ~this:(x4780 : t) ->
               fun ~ev:(x4781 : Event.t) ->
                 any_of_js
                   (Ojs.apply x4779 [|(t_to_js x4780);(Event.t_to_js x4781)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4777)
             "onreadystatechange")
    let (set_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x4782 : 'tags this) ->
        fun (x4783 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4782)
            "onreadystatechange"
            (Ojs.option_to_js
               (fun (x4784 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x4785 : Ojs.t) ->
                       fun (x4786 : Ojs.t) ->
                         any_to_js
                           (x4784 ~this:(t_of_js x4785)
                              ~ev:(Event.t_of_js x4786)))) x4783)
    let (get_readyState : 'tags this -> float) =
      fun (x4788 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4788) "readyState")
    let (get_response : 'tags this -> any) =
      fun (x4790 : 'tags this) ->
        any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4790) "response")
    let (get_responseText : 'tags this -> string) =
      fun (x4792 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4792) "responseText")
    let (get_responseType : 'tags this -> XMLHttpRequestResponseType.t) =
      fun (x4794 : 'tags this) ->
        XMLHttpRequestResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4794) "responseType")
    let (set_responseType :
      'tags this -> XMLHttpRequestResponseType.t -> unit) =
      fun (x4796 : 'tags this) ->
        fun (x4797 : XMLHttpRequestResponseType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4796) "responseType"
            (XMLHttpRequestResponseType.t_to_js x4797)
    let (get_responseURL : 'tags this -> string) =
      fun (x4799 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4799) "responseURL")
    let (get_status : 'tags this -> float) =
      fun (x4801 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4801) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4803 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4803) "statusText")
    let (get_timeout : 'tags this -> float) =
      fun (x4805 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4805) "timeout")
    let (set_timeout : 'tags this -> float -> unit) =
      fun (x4807 : 'tags this) ->
        fun (x4808 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4807) "timeout"
            (Ojs.float_to_js x4808)
    let (get_upload : 'tags this -> XMLHttpRequestUpload.t) =
      fun (x4810 : 'tags this) ->
        XMLHttpRequestUpload.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4810) "upload")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x4812 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4812) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x4814 : 'tags this) ->
        fun (x4815 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4814) "withCredentials"
            (Ojs.bool_to_js x4815)
    let (abort : 'tags this -> unit) =
      fun (x4817 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4817) "abort" [||])
    let (getAllResponseHeaders : 'tags this -> string) =
      fun (x4819 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4819) "getAllResponseHeaders" [||])
    let (getResponseHeader : 'tags this -> name:string -> string option) =
      fun (x4822 : 'tags this) ->
        fun ~name:(x4821 : string) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4822) "getResponseHeader"
               [|(Ojs.string_to_js x4821)|])
    let (open_ :
      'tags this ->
        method_:string -> url:[ `U1 of string  | `U2 of URL.t ] -> unit)
      =
      fun (x4829 : 'tags this) ->
        fun ~method_:(x4825 : string) ->
          fun ~url:(x4826 : [ `U1 of string  | `U2 of URL.t ]) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4829) "open"
                 [|(Ojs.string_to_js x4825);((match x4826 with
                                              | `U1 x4827 ->
                                                  Ojs.string_to_js x4827
                                              | `U2 x4828 ->
                                                  URL.t_to_js x4828))|])
    let (open_' :
      'tags this ->
        method_:string ->
          url:[ `U1 of string  | `U2 of URL.t ] ->
            async:bool ->
              ?username:string option ->
                ?password:string option -> unit -> unit)
      =
      fun (x4843 : 'tags this) ->
        fun ~method_:(x4831 : string) ->
          fun ~url:(x4832 : [ `U1 of string  | `U2 of URL.t ]) ->
            fun ~async:(x4833 : bool) ->
              fun ?username:(x4834 : string option option) ->
                fun ?password:(x4835 : string option option) ->
                  fun () ->
                    ignore
                      (let x4845 = this_to_js Obj.magic x4843 in
                       Ojs.call (Ojs.get_prop_ascii x4845 "open") "apply"
                         [|x4845;((let x4836 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4836 "push"
                                        [|(Ojs.string_to_js x4831)|]);
                                   ignore
                                     (Ojs.call x4836 "push"
                                        [|((match x4832 with
                                            | `U1 x4841 ->
                                                Ojs.string_to_js x4841
                                            | `U2 x4842 -> URL.t_to_js x4842))|]);
                                   ignore
                                     (Ojs.call x4836 "push"
                                        [|(Ojs.bool_to_js x4833)|]);
                                   (match x4834 with
                                    | Some x4839 ->
                                        ignore
                                          (Ojs.call x4836 "push"
                                             [|(Ojs.option_to_js
                                                  Ojs.string_to_js x4839)|])
                                    | None -> ());
                                   (match x4835 with
                                    | Some x4837 ->
                                        ignore
                                          (Ojs.call x4836 "push"
                                             [|(Ojs.option_to_js
                                                  Ojs.string_to_js x4837)|])
                                    | None -> ());
                                   x4836))|])
    let (overrideMimeType : 'tags this -> mime:string -> unit) =
      fun (x4847 : 'tags this) ->
        fun ~mime:(x4846 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4847) "overrideMimeType"
               [|(Ojs.string_to_js x4846)|])
    let (send :
      'tags this -> ?body:XMLHttpRequestBodyInit.t option -> unit -> unit) =
      fun (x4853 : 'tags this) ->
        fun ?body:(x4849 : XMLHttpRequestBodyInit.t option option) ->
          fun () ->
            ignore
              (let x4855 = this_to_js Obj.magic x4853 in
               Ojs.call (Ojs.get_prop_ascii x4855 "send") "apply"
                 [|x4855;((let x4850 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4849 with
                            | Some x4851 ->
                                ignore
                                  (Ojs.call x4850 "push"
                                     [|(Ojs.option_to_js
                                          XMLHttpRequestBodyInit.t_to_js
                                          x4851)|])
                            | None -> ());
                           x4850))|])
    let (setRequestHeader :
      'tags this -> name:string -> value:string -> unit) =
      fun (x4858 : 'tags this) ->
        fun ~name:(x4856 : string) ->
          fun ~value:(x4857 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4858) "setRequestHeader"
                 [|(Ojs.string_to_js x4856);(Ojs.string_to_js x4857)|])
    let (get_DONE : 'tags this -> float) =
      fun (x4860 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4860) "DONE")
    let (get_HEADERS_RECEIVED : 'tags this -> float) =
      fun (x4862 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4862) "HEADERS_RECEIVED")
    let (get_LOADING : 'tags this -> float) =
      fun (x4864 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4864) "LOADING")
    let (get_OPENED : 'tags this -> float) =
      fun (x4866 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4866) "OPENED")
    let (get_UNSENT : 'tags this -> float) =
      fun (x4868 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4868) "UNSENT")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4879 : 'tags this) ->
        fun ~type_:(x4870 : 'K) ->
          fun ~listener:(x4871 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4872 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4881 = this_to_js Obj.magic x4879 in
                   Ojs.call (Ojs.get_prop_ascii x4881 "addEventListener")
                     "apply"
                     [|x4881;((let x4873 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4873 "push" [|(Obj.magic x4870)|]);
                               ignore
                                 (Ojs.call x4873 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4877 : Ojs.t) ->
                                            fun (x4878 : Ojs.t) ->
                                              any_to_js
                                                (x4871 ~this:(t_of_js x4877)
                                                   ~ev:(any_of_js x4878))))|]);
                               (match x4872 with
                                | Some x4874 ->
                                    ignore
                                      (Ojs.call x4873 "push"
                                         [|((match x4874 with
                                             | `U1 x4875 ->
                                                 Ojs.bool_to_js x4875
                                             | `U2 x4876 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x4876))|])
                                | None -> ());
                               x4873))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4889 : 'tags this) ->
        fun ~type_:(x4882 : string) ->
          fun ~listener:(x4883 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4884 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4891 = this_to_js Obj.magic x4889 in
                   Ojs.call (Ojs.get_prop_ascii x4891 "addEventListener")
                     "apply"
                     [|x4891;((let x4885 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4885 "push"
                                    [|(Ojs.string_to_js x4882)|]);
                               ignore
                                 (Ojs.call x4885 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4883)|]);
                               (match x4884 with
                                | Some x4886 ->
                                    ignore
                                      (Ojs.call x4885 "push"
                                         [|((match x4886 with
                                             | `U1 x4887 ->
                                                 Ojs.bool_to_js x4887
                                             | `U2 x4888 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x4888))|])
                                | None -> ());
                               x4885))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4901 : 'tags this) ->
        fun ~type_:(x4892 : 'K) ->
          fun ~listener:(x4893 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4894 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4903 = this_to_js Obj.magic x4901 in
                   Ojs.call (Ojs.get_prop_ascii x4903 "removeEventListener")
                     "apply"
                     [|x4903;((let x4895 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4895 "push" [|(Obj.magic x4892)|]);
                               ignore
                                 (Ojs.call x4895 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4899 : Ojs.t) ->
                                            fun (x4900 : Ojs.t) ->
                                              any_to_js
                                                (x4893 ~this:(t_of_js x4899)
                                                   ~ev:(any_of_js x4900))))|]);
                               (match x4894 with
                                | Some x4896 ->
                                    ignore
                                      (Ojs.call x4895 "push"
                                         [|((match x4896 with
                                             | `U1 x4897 ->
                                                 Ojs.bool_to_js x4897
                                             | `U2 x4898 ->
                                                 EventListenerOptions.t_to_js
                                                   x4898))|])
                                | None -> ());
                               x4895))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x4911 : 'tags this) ->
        fun ~type_:(x4904 : string) ->
          fun ~listener:(x4905 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4906 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x4913 = this_to_js Obj.magic x4911 in
                   Ojs.call (Ojs.get_prop_ascii x4913 "removeEventListener")
                     "apply"
                     [|x4913;((let x4907 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4907 "push"
                                    [|(Ojs.string_to_js x4904)|]);
                               ignore
                                 (Ojs.call x4907 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4905)|]);
                               (match x4906 with
                                | Some x4908 ->
                                    ignore
                                      (Ojs.call x4907 "push"
                                         [|((match x4908 with
                                             | `U1 x4909 ->
                                                 Ojs.bool_to_js x4909
                                             | `U2 x4910 ->
                                                 EventListenerOptions.t_to_js
                                                   x4910))|])
                                | None -> ());
                               x4907))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "DONE")
    let (headers_received : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
             "HEADERS_RECEIVED")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "LOADING")
    let (opened : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "OPENED")
    let (unsent : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "UNSENT")
  end
 and
  XMLHttpRequestEventTarget:sig
                              type t =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestEventTarget ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val get_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option
                              val set_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    option -> unit
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `EventTarget  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4915 : Ojs.t) -> t_of_js x4915
    and t_0_to_js : t_0 -> Ojs.t = fun (x4914 : t) -> t_to_js x4914
    type tags = [ `EventTarget  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTarget ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x4918 : Ojs.t) -> intf_of_js __tags_of_js x4918
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x4916 : __tags intf) -> intf_to_js __tags_to_js x4916
    let (get_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4920 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4922 : Ojs.t) ->
             fun ~this:(x4923 : XMLHttpRequest.t) ->
               fun ~ev:(x4924 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4922
                      [|(XMLHttpRequest.t_to_js x4923);(ProgressEvent.t_0_to_js
                                                          x4924)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4920) "onabort")
    let (set_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4925 : 'tags this) ->
        fun
          (x4926 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4925) "onabort"
            (Ojs.option_to_js
               (fun
                  (x4927 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4928 : Ojs.t) ->
                       fun (x4929 : Ojs.t) ->
                         any_to_js
                           (x4927 ~this:(XMLHttpRequest.t_of_js x4928)
                              ~ev:(ProgressEvent.t_0_of_js x4929)))) x4926)
    let (get_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4931 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4933 : Ojs.t) ->
             fun ~this:(x4934 : XMLHttpRequest.t) ->
               fun ~ev:(x4935 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4933
                      [|(XMLHttpRequest.t_to_js x4934);(ProgressEvent.t_0_to_js
                                                          x4935)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4931) "onerror")
    let (set_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4936 : 'tags this) ->
        fun
          (x4937 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4936) "onerror"
            (Ojs.option_to_js
               (fun
                  (x4938 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4939 : Ojs.t) ->
                       fun (x4940 : Ojs.t) ->
                         any_to_js
                           (x4938 ~this:(XMLHttpRequest.t_of_js x4939)
                              ~ev:(ProgressEvent.t_0_of_js x4940)))) x4937)
    let (get_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4942 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4944 : Ojs.t) ->
             fun ~this:(x4945 : XMLHttpRequest.t) ->
               fun ~ev:(x4946 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4944
                      [|(XMLHttpRequest.t_to_js x4945);(ProgressEvent.t_0_to_js
                                                          x4946)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4942) "onload")
    let (set_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4947 : 'tags this) ->
        fun
          (x4948 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4947) "onload"
            (Ojs.option_to_js
               (fun
                  (x4949 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4950 : Ojs.t) ->
                       fun (x4951 : Ojs.t) ->
                         any_to_js
                           (x4949 ~this:(XMLHttpRequest.t_of_js x4950)
                              ~ev:(ProgressEvent.t_0_of_js x4951)))) x4948)
    let (get_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4953 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4955 : Ojs.t) ->
             fun ~this:(x4956 : XMLHttpRequest.t) ->
               fun ~ev:(x4957 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4955
                      [|(XMLHttpRequest.t_to_js x4956);(ProgressEvent.t_0_to_js
                                                          x4957)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4953) "onloadend")
    let (set_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4958 : 'tags this) ->
        fun
          (x4959 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4958) "onloadend"
            (Ojs.option_to_js
               (fun
                  (x4960 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4961 : Ojs.t) ->
                       fun (x4962 : Ojs.t) ->
                         any_to_js
                           (x4960 ~this:(XMLHttpRequest.t_of_js x4961)
                              ~ev:(ProgressEvent.t_0_of_js x4962)))) x4959)
    let (get_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4964 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4966 : Ojs.t) ->
             fun ~this:(x4967 : XMLHttpRequest.t) ->
               fun ~ev:(x4968 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4966
                      [|(XMLHttpRequest.t_to_js x4967);(ProgressEvent.t_0_to_js
                                                          x4968)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4964) "onloadstart")
    let (set_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4969 : 'tags this) ->
        fun
          (x4970 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4969) "onloadstart"
            (Ojs.option_to_js
               (fun
                  (x4971 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4972 : Ojs.t) ->
                       fun (x4973 : Ojs.t) ->
                         any_to_js
                           (x4971 ~this:(XMLHttpRequest.t_of_js x4972)
                              ~ev:(ProgressEvent.t_0_of_js x4973)))) x4970)
    let (get_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4975 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4977 : Ojs.t) ->
             fun ~this:(x4978 : XMLHttpRequest.t) ->
               fun ~ev:(x4979 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4977
                      [|(XMLHttpRequest.t_to_js x4978);(ProgressEvent.t_0_to_js
                                                          x4979)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4975) "onprogress")
    let (set_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4980 : 'tags this) ->
        fun
          (x4981 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4980) "onprogress"
            (Ojs.option_to_js
               (fun
                  (x4982 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4983 : Ojs.t) ->
                       fun (x4984 : Ojs.t) ->
                         any_to_js
                           (x4982 ~this:(XMLHttpRequest.t_of_js x4983)
                              ~ev:(ProgressEvent.t_0_of_js x4984)))) x4981)
    let (get_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
      =
      fun (x4986 : 'tags this) ->
        Ojs.option_of_js
          (fun (x4988 : Ojs.t) ->
             fun ~this:(x4989 : XMLHttpRequest.t) ->
               fun ~ev:(x4990 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4988
                      [|(XMLHttpRequest.t_to_js x4989);(ProgressEvent.t_0_to_js
                                                          x4990)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4986) "ontimeout")
    let (set_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option -> unit)
      =
      fun (x4991 : 'tags this) ->
        fun
          (x4992 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4991) "ontimeout"
            (Ojs.option_to_js
               (fun
                  (x4993 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4994 : Ojs.t) ->
                       fun (x4995 : Ojs.t) ->
                         any_to_js
                           (x4993 ~this:(XMLHttpRequest.t_of_js x4994)
                              ~ev:(ProgressEvent.t_0_of_js x4995)))) x4992)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5006 : 'tags this) ->
        fun ~type_:(x4997 : 'K) ->
          fun ~listener:(x4998 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4999 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5008 = this_to_js Obj.magic x5006 in
                   Ojs.call (Ojs.get_prop_ascii x5008 "addEventListener")
                     "apply"
                     [|x5008;((let x5000 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5000 "push" [|(Obj.magic x4997)|]);
                               ignore
                                 (Ojs.call x5000 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5004 : Ojs.t) ->
                                            fun (x5005 : Ojs.t) ->
                                              any_to_js
                                                (x4998 ~this:(t_of_js x5004)
                                                   ~ev:(any_of_js x5005))))|]);
                               (match x4999 with
                                | Some x5001 ->
                                    ignore
                                      (Ojs.call x5000 "push"
                                         [|((match x5001 with
                                             | `U1 x5002 ->
                                                 Ojs.bool_to_js x5002
                                             | `U2 x5003 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5003))|])
                                | None -> ());
                               x5000))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5016 : 'tags this) ->
        fun ~type_:(x5009 : string) ->
          fun ~listener:(x5010 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5011 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5018 = this_to_js Obj.magic x5016 in
                   Ojs.call (Ojs.get_prop_ascii x5018 "addEventListener")
                     "apply"
                     [|x5018;((let x5012 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5012 "push"
                                    [|(Ojs.string_to_js x5009)|]);
                               ignore
                                 (Ojs.call x5012 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5010)|]);
                               (match x5011 with
                                | Some x5013 ->
                                    ignore
                                      (Ojs.call x5012 "push"
                                         [|((match x5013 with
                                             | `U1 x5014 ->
                                                 Ojs.bool_to_js x5014
                                             | `U2 x5015 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5015))|])
                                | None -> ());
                               x5012))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5028 : 'tags this) ->
        fun ~type_:(x5019 : 'K) ->
          fun ~listener:(x5020 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5021 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5030 = this_to_js Obj.magic x5028 in
                   Ojs.call (Ojs.get_prop_ascii x5030 "removeEventListener")
                     "apply"
                     [|x5030;((let x5022 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5022 "push" [|(Obj.magic x5019)|]);
                               ignore
                                 (Ojs.call x5022 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5026 : Ojs.t) ->
                                            fun (x5027 : Ojs.t) ->
                                              any_to_js
                                                (x5020 ~this:(t_of_js x5026)
                                                   ~ev:(any_of_js x5027))))|]);
                               (match x5021 with
                                | Some x5023 ->
                                    ignore
                                      (Ojs.call x5022 "push"
                                         [|((match x5023 with
                                             | `U1 x5024 ->
                                                 Ojs.bool_to_js x5024
                                             | `U2 x5025 ->
                                                 EventListenerOptions.t_to_js
                                                   x5025))|])
                                | None -> ());
                               x5022))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5038 : 'tags this) ->
        fun ~type_:(x5031 : string) ->
          fun ~listener:(x5032 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5033 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5040 = this_to_js Obj.magic x5038 in
                   Ojs.call (Ojs.get_prop_ascii x5040 "removeEventListener")
                     "apply"
                     [|x5040;((let x5034 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5034 "push"
                                    [|(Ojs.string_to_js x5031)|]);
                               ignore
                                 (Ojs.call x5034 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5032)|]);
                               (match x5033 with
                                | Some x5035 ->
                                    ignore
                                      (Ojs.call x5034 "push"
                                         [|((match x5035 with
                                             | `U1 x5036 ->
                                                 Ojs.bool_to_js x5036
                                             | `U2 x5037 ->
                                                 EventListenerOptions.t_to_js
                                                   x5037))|])
                                | None -> ());
                               x5034))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget") 
             [||])
  end and
       XMLHttpRequestUpload:sig
                              type t =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget 
                                  | `XMLHttpRequestUpload ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestUpload ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   AddEventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:[ `U1 of bool 
                                               | `U2 of
                                                   EventListenerOptions.t ]
                                        -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
       struct
         type t =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x5042 : Ojs.t) -> t_of_js x5042
         and t_0_to_js : t_0 -> Ojs.t = fun (x5041 : t) -> t_to_js x5041
         type tags =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ]
         type tags_0 = tags
         type 'tags this =
           'tags intf constraint 'tags = [> `XMLHttpRequestUpload ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           =
           fun (type __tags) ->
             fun (__tags_of_js : Ojs.t -> __tags) ->
               fun (x5045 : Ojs.t) -> intf_of_js __tags_of_js x5045
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
             fun (__tags_to_js : __tags -> Ojs.t) ->
               fun (x5043 : __tags intf) -> intf_to_js __tags_to_js x5043
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x5056 : 'tags this) ->
             fun ~type_:(x5047 : 'K) ->
               fun ~listener:(x5048 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x5049 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5058 = this_to_js Obj.magic x5056 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5058 "addEventListener")
                          "apply"
                          [|x5058;((let x5050 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5050 "push"
                                         [|(Obj.magic x5047)|]);
                                    ignore
                                      (Ojs.call x5050 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x5054 : Ojs.t) ->
                                                 fun (x5055 : Ojs.t) ->
                                                   any_to_js
                                                     (x5048
                                                        ~this:(t_of_js x5054)
                                                        ~ev:(any_of_js x5055))))|]);
                                    (match x5049 with
                                     | Some x5051 ->
                                         ignore
                                           (Ojs.call x5050 "push"
                                              [|((match x5051 with
                                                  | `U1 x5052 ->
                                                      Ojs.bool_to_js x5052
                                                  | `U2 x5053 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x5053))|])
                                     | None -> ());
                                    x5050))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                   -> unit -> unit)
           =
           fun (x5066 : 'tags this) ->
             fun ~type_:(x5059 : string) ->
               fun ~listener:(x5060 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x5061 :
                              [ `U1 of bool 
                              | `U2 of AddEventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5068 = this_to_js Obj.magic x5066 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5068 "addEventListener")
                          "apply"
                          [|x5068;((let x5062 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5062 "push"
                                         [|(Ojs.string_to_js x5059)|]);
                                    ignore
                                      (Ojs.call x5062 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x5060)|]);
                                    (match x5061 with
                                     | Some x5063 ->
                                         ignore
                                           (Ojs.call x5062 "push"
                                              [|((match x5063 with
                                                  | `U1 x5064 ->
                                                      Ojs.bool_to_js x5064
                                                  | `U2 x5065 ->
                                                      AddEventListenerOptions.t_to_js
                                                        x5065))|])
                                     | None -> ());
                                    x5062))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x5078 : 'tags this) ->
             fun ~type_:(x5069 : 'K) ->
               fun ~listener:(x5070 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x5071 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5080 = this_to_js Obj.magic x5078 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5080 "removeEventListener")
                          "apply"
                          [|x5080;((let x5072 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5072 "push"
                                         [|(Obj.magic x5069)|]);
                                    ignore
                                      (Ojs.call x5072 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x5076 : Ojs.t) ->
                                                 fun (x5077 : Ojs.t) ->
                                                   any_to_js
                                                     (x5070
                                                        ~this:(t_of_js x5076)
                                                        ~ev:(any_of_js x5077))))|]);
                                    (match x5071 with
                                     | Some x5073 ->
                                         ignore
                                           (Ojs.call x5072 "push"
                                              [|((match x5073 with
                                                  | `U1 x5074 ->
                                                      Ojs.bool_to_js x5074
                                                  | `U2 x5075 ->
                                                      EventListenerOptions.t_to_js
                                                        x5075))|])
                                     | None -> ());
                                    x5072))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
                   unit -> unit)
           =
           fun (x5088 : 'tags this) ->
             fun ~type_:(x5081 : string) ->
               fun ~listener:(x5082 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x5083 :
                              [ `U1 of bool 
                              | `U2 of EventListenerOptions.t ] option)
                   ->
                   fun () ->
                     ignore
                       (let x5090 = this_to_js Obj.magic x5088 in
                        Ojs.call
                          (Ojs.get_prop_ascii x5090 "removeEventListener")
                          "apply"
                          [|x5090;((let x5084 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x5084 "push"
                                         [|(Ojs.string_to_js x5081)|]);
                                    ignore
                                      (Ojs.call x5084 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x5082)|]);
                                    (match x5083 with
                                     | Some x5085 ->
                                         ignore
                                           (Ojs.call x5084 "push"
                                              [|((match x5085 with
                                                  | `U1 x5086 ->
                                                      Ojs.bool_to_js x5086
                                                  | `U2 x5087 ->
                                                      EventListenerOptions.t_to_js
                                                        x5087))|])
                                     | None -> ());
                                    x5084))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload")
                  "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload") 
                  [||])
       end
module XMLHttpRequestEventTargetEventMap =
  struct
    type t = [ `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5092 : Ojs.t) -> t_of_js x5092
    and t_0_to_js : t_0 -> Ojs.t = fun (x5091 : t) -> t_to_js x5091
    type tags = [ `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5095 : Ojs.t) -> intf_of_js __tags_of_js x5095
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5093 : __tags intf) -> intf_to_js __tags_to_js x5093
    let (get_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5097 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5097) "abort")
    let (set_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5100 : 'tags this) ->
        fun (x5101 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5100) "abort"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5101)
    let (get_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5104 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5104) "error")
    let (set_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5107 : 'tags this) ->
        fun (x5108 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5107) "error"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5108)
    let (get_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5111 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5111) "load")
    let (set_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5114 : 'tags this) ->
        fun (x5115 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5114) "load"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5115)
    let (get_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5118 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5118) "loadend")
    let (set_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5121 : 'tags this) ->
        fun (x5122 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5121) "loadend"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5122)
    let (get_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5125 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5125) "loadstart")
    let (set_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5128 : 'tags this) ->
        fun (x5129 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5128) "loadstart"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5129)
    let (get_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5132 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5132) "progress")
    let (set_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5135 : 'tags this) ->
        fun (x5136 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5135) "progress"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5136)
    let (get_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5139 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5139) "timeout")
    let (set_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5142 : 'tags this) ->
        fun (x5143 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5142) "timeout"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5143)
    let (create :
      abort:XMLHttpRequestEventTarget.t ProgressEvent.t ->
        error:XMLHttpRequestEventTarget.t ProgressEvent.t ->
          load:XMLHttpRequestEventTarget.t ProgressEvent.t ->
            loadend:XMLHttpRequestEventTarget.t ProgressEvent.t ->
              loadstart:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                progress:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                  timeout:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                    unit -> t)
      =
      fun ~abort:(x5146 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
        fun ~error:(x5147 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          fun ~load:(x5148 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
            fun
              ~loadend:(x5149 : XMLHttpRequestEventTarget.t ProgressEvent.t)
              ->
              fun
                ~loadstart:(x5150 :
                             XMLHttpRequestEventTarget.t ProgressEvent.t)
                ->
                fun
                  ~progress:(x5151 :
                              XMLHttpRequestEventTarget.t ProgressEvent.t)
                  ->
                  fun
                    ~timeout:(x5152 :
                               XMLHttpRequestEventTarget.t ProgressEvent.t)
                    ->
                    fun () ->
                      let x5153 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x5153 "abort"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5146);
                      Ojs.set_prop_ascii x5153 "error"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5147);
                      Ojs.set_prop_ascii x5153 "load"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5148);
                      Ojs.set_prop_ascii x5153 "loadend"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5149);
                      Ojs.set_prop_ascii x5153 "loadstart"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5150);
                      Ojs.set_prop_ascii x5153 "progress"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5151);
                      Ojs.set_prop_ascii x5153 "timeout"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x5152);
                      t_of_js x5153
    let cast_from = Obj.magic
  end
module XMLHttpRequestEventMap =
  struct
    type t =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5162 : Ojs.t) -> t_of_js x5162
    and t_0_to_js : t_0 -> Ojs.t = fun (x5161 : t) -> t_to_js x5161
    type tags =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5165 : Ojs.t) -> intf_of_js __tags_of_js x5165
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5163 : __tags intf) -> intf_to_js __tags_to_js x5163
    let (get_readystatechange : 'tags this -> Event.t) =
      fun (x5167 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5167) "readystatechange")
    let (set_readystatechange : 'tags this -> Event.t -> unit) =
      fun (x5169 : 'tags this) ->
        fun (x5170 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5169) "readystatechange"
            (Event.t_to_js x5170)
    let (create : readystatechange:Event.t -> unit -> t) =
      fun ~readystatechange:(x5172 : Event.t) ->
        fun () ->
          let x5173 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5173 "readystatechange" (Event.t_to_js x5172);
          t_of_js x5173
    let cast_from = Obj.magic
  end
module ServiceWorkerState =
  struct
    type t =
      [ `L_s148_parsed  | `L_s168_redundant  | `L_s33_activated 
      | `L_s34_activating  | `L_s96_installed  | `L_s97_installing ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5175 : Ojs.t) ->
        let x5176 = x5175 in
        match Ojs.string_of_js x5176 with
        | "parsed" -> `L_s148_parsed
        | "redundant" -> `L_s168_redundant
        | "activated" -> `L_s33_activated
        | "activating" -> `L_s34_activating
        | "installed" -> `L_s96_installed
        | "installing" -> `L_s97_installing
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x5174 :
          [ `L_s148_parsed  | `L_s168_redundant  | `L_s33_activated 
          | `L_s34_activating  | `L_s96_installed  | `L_s97_installing ])
        ->
        match x5174 with
        | `L_s148_parsed -> Ojs.string_to_js "parsed"
        | `L_s168_redundant -> Ojs.string_to_js "redundant"
        | `L_s33_activated -> Ojs.string_to_js "activated"
        | `L_s34_activating -> Ojs.string_to_js "activating"
        | `L_s96_installed -> Ojs.string_to_js "installed"
        | `L_s97_installing -> Ojs.string_to_js "installing"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5178 : Ojs.t) -> t_of_js x5178
    and t_0_to_js : t_0 -> Ojs.t = fun (x5177 : t) -> t_to_js x5177
  end
module ImageBitmap =
  struct
    type t = [ `ImageBitmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5180 : Ojs.t) -> t_of_js x5180
    and t_0_to_js : t_0 -> Ojs.t = fun (x5179 : t) -> t_to_js x5179
    type tags = [ `ImageBitmap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5183 : Ojs.t) -> intf_of_js __tags_of_js x5183
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5181 : __tags intf) -> intf_to_js __tags_to_js x5181
    let (get_height : 'tags this -> float) =
      fun (x5185 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5185) "height")
    let (get_width : 'tags this -> float) =
      fun (x5187 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5187) "width")
    let (close : 'tags this -> unit) =
      fun (x5189 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5189) "close" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ImageBitmap") [||])
  end
module ErrorEventInit =
  struct
    type t = [ `ErrorEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5192 : Ojs.t) -> t_of_js x5192
    and t_0_to_js : t_0 -> Ojs.t = fun (x5191 : t) -> t_to_js x5191
    type tags = [ `ErrorEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5195 : Ojs.t) -> intf_of_js __tags_of_js x5195
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5193 : __tags intf) -> intf_to_js __tags_to_js x5193
    let (get_colno : 'tags this -> float) =
      fun (x5197 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5197) "colno")
    let (set_colno : 'tags this -> float -> unit) =
      fun (x5199 : 'tags this) ->
        fun (x5200 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5199) "colno"
            (Ojs.float_to_js x5200)
    let (get_error : 'tags this -> any) =
      fun (x5202 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5202) "error")
    let (set_error : 'tags this -> any -> unit) =
      fun (x5204 : 'tags this) ->
        fun (x5205 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5204) "error"
            (any_to_js x5205)
    let (get_filename : 'tags this -> string) =
      fun (x5207 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5207) "filename")
    let (set_filename : 'tags this -> string -> unit) =
      fun (x5209 : 'tags this) ->
        fun (x5210 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5209) "filename"
            (Ojs.string_to_js x5210)
    let (get_lineno : 'tags this -> float) =
      fun (x5212 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5212) "lineno")
    let (set_lineno : 'tags this -> float -> unit) =
      fun (x5214 : 'tags this) ->
        fun (x5215 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5214) "lineno"
            (Ojs.float_to_js x5215)
    let (get_message : 'tags this -> string) =
      fun (x5217 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5217) "message")
    let (set_message : 'tags this -> string -> unit) =
      fun (x5219 : 'tags this) ->
        fun (x5220 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5219) "message"
            (Ojs.string_to_js x5220)
    let (create :
      colno:float ->
        error:any ->
          filename:string -> lineno:float -> message:string -> unit -> t)
      =
      fun ~colno:(x5222 : float) ->
        fun ~error:(x5223 : any) ->
          fun ~filename:(x5224 : string) ->
            fun ~lineno:(x5225 : float) ->
              fun ~message:(x5226 : string) ->
                fun () ->
                  let x5227 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5227 "colno" (Ojs.float_to_js x5222);
                  Ojs.set_prop_ascii x5227 "error" (any_to_js x5223);
                  Ojs.set_prop_ascii x5227 "filename"
                    (Ojs.string_to_js x5224);
                  Ojs.set_prop_ascii x5227 "lineno" (Ojs.float_to_js x5225);
                  Ojs.set_prop_ascii x5227 "message" (Ojs.string_to_js x5226);
                  t_of_js x5227
    let cast_from = Obj.magic
  end
module ErrorEvent =
  struct
    type t = [ `ErrorEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5229 : Ojs.t) -> t_of_js x5229
    and t_0_to_js : t_0 -> Ojs.t = fun (x5228 : t) -> t_to_js x5228
    type tags = [ `ErrorEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5232 : Ojs.t) -> intf_of_js __tags_of_js x5232
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5230 : __tags intf) -> intf_to_js __tags_to_js x5230
    let (get_colno : 'tags this -> float) =
      fun (x5234 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5234) "colno")
    let (get_error : 'tags this -> any) =
      fun (x5236 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5236) "error")
    let (get_filename : 'tags this -> string) =
      fun (x5238 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5238) "filename")
    let (get_lineno : 'tags this -> float) =
      fun (x5240 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5240) "lineno")
    let (get_message : 'tags this -> string) =
      fun (x5242 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5242) "message")
    let (create :
      colno:float ->
        error:any ->
          filename:string -> lineno:float -> message:string -> unit -> t)
      =
      fun ~colno:(x5244 : float) ->
        fun ~error:(x5245 : any) ->
          fun ~filename:(x5246 : string) ->
            fun ~lineno:(x5247 : float) ->
              fun ~message:(x5248 : string) ->
                fun () ->
                  let x5249 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5249 "colno" (Ojs.float_to_js x5244);
                  Ojs.set_prop_ascii x5249 "error" (any_to_js x5245);
                  Ojs.set_prop_ascii x5249 "filename"
                    (Ojs.string_to_js x5246);
                  Ojs.set_prop_ascii x5249 "lineno" (Ojs.float_to_js x5247);
                  Ojs.set_prop_ascii x5249 "message" (Ojs.string_to_js x5248);
                  t_of_js x5249
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t) =
      fun ~type_:(x5250 : string) ->
        fun ?eventInitDict:(x5251 : ErrorEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
                 (let x5252 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5252 "push" [|(Ojs.string_to_js x5250)|]);
                  (match x5251 with
                   | Some x5253 ->
                       ignore
                         (Ojs.call x5252 "push"
                            [|(ErrorEventInit.t_to_js x5253)|])
                   | None -> ());
                  x5252))
  end
module AbstractWorker =
  struct
    type t = [ `AbstractWorker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5255 : Ojs.t) -> t_of_js x5255
    and t_0_to_js : t_0 -> Ojs.t = fun (x5254 : t) -> t_to_js x5254
    type tags = [ `AbstractWorker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5258 : Ojs.t) -> intf_of_js __tags_of_js x5258
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5256 : __tags intf) -> intf_to_js __tags_to_js x5256
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option) =
      fun (x5260 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5262 : Ojs.t) ->
             fun ~this:(x5263 : t) ->
               fun ~ev:(x5264 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x5262
                      [|(t_to_js x5263);(ErrorEvent.t_to_js x5264)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5260) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit) =
      fun (x5265 : 'tags this) ->
        fun (x5266 : (this:t -> ev:ErrorEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5265) "onerror"
            (Ojs.option_to_js
               (fun (x5267 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5268 : Ojs.t) ->
                       fun (x5269 : Ojs.t) ->
                         any_to_js
                           (x5267 ~this:(t_of_js x5268)
                              ~ev:(ErrorEvent.t_of_js x5269)))) x5266)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5280 : 'tags this) ->
        fun ~type_:(x5271 : 'K) ->
          fun ~listener:(x5272 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5273 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5282 = this_to_js Obj.magic x5280 in
                   Ojs.call (Ojs.get_prop_ascii x5282 "addEventListener")
                     "apply"
                     [|x5282;((let x5274 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5274 "push" [|(Obj.magic x5271)|]);
                               ignore
                                 (Ojs.call x5274 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5278 : Ojs.t) ->
                                            fun (x5279 : Ojs.t) ->
                                              any_to_js
                                                (x5272 ~this:(t_of_js x5278)
                                                   ~ev:(any_of_js x5279))))|]);
                               (match x5273 with
                                | Some x5275 ->
                                    ignore
                                      (Ojs.call x5274 "push"
                                         [|((match x5275 with
                                             | `U1 x5276 ->
                                                 Ojs.bool_to_js x5276
                                             | `U2 x5277 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5277))|])
                                | None -> ());
                               x5274))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5290 : 'tags this) ->
        fun ~type_:(x5283 : string) ->
          fun ~listener:(x5284 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5285 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5292 = this_to_js Obj.magic x5290 in
                   Ojs.call (Ojs.get_prop_ascii x5292 "addEventListener")
                     "apply"
                     [|x5292;((let x5286 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5286 "push"
                                    [|(Ojs.string_to_js x5283)|]);
                               ignore
                                 (Ojs.call x5286 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5284)|]);
                               (match x5285 with
                                | Some x5287 ->
                                    ignore
                                      (Ojs.call x5286 "push"
                                         [|((match x5287 with
                                             | `U1 x5288 ->
                                                 Ojs.bool_to_js x5288
                                             | `U2 x5289 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5289))|])
                                | None -> ());
                               x5286))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5302 : 'tags this) ->
        fun ~type_:(x5293 : 'K) ->
          fun ~listener:(x5294 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5295 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5304 = this_to_js Obj.magic x5302 in
                   Ojs.call (Ojs.get_prop_ascii x5304 "removeEventListener")
                     "apply"
                     [|x5304;((let x5296 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5296 "push" [|(Obj.magic x5293)|]);
                               ignore
                                 (Ojs.call x5296 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5300 : Ojs.t) ->
                                            fun (x5301 : Ojs.t) ->
                                              any_to_js
                                                (x5294 ~this:(t_of_js x5300)
                                                   ~ev:(any_of_js x5301))))|]);
                               (match x5295 with
                                | Some x5297 ->
                                    ignore
                                      (Ojs.call x5296 "push"
                                         [|((match x5297 with
                                             | `U1 x5298 ->
                                                 Ojs.bool_to_js x5298
                                             | `U2 x5299 ->
                                                 EventListenerOptions.t_to_js
                                                   x5299))|])
                                | None -> ());
                               x5296))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5312 : 'tags this) ->
        fun ~type_:(x5305 : string) ->
          fun ~listener:(x5306 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5307 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5314 = this_to_js Obj.magic x5312 in
                   Ojs.call (Ojs.get_prop_ascii x5314 "removeEventListener")
                     "apply"
                     [|x5314;((let x5308 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5308 "push"
                                    [|(Ojs.string_to_js x5305)|]);
                               ignore
                                 (Ojs.call x5308 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5306)|]);
                               (match x5307 with
                                | Some x5309 ->
                                    ignore
                                      (Ojs.call x5308 "push"
                                         [|((match x5309 with
                                             | `U1 x5310 ->
                                                 Ojs.bool_to_js x5310
                                             | `U2 x5311 ->
                                                 EventListenerOptions.t_to_js
                                                   x5311))|])
                                | None -> ());
                               x5308))|])
    let cast_from = Obj.magic
  end
module rec
  MessageEvent:sig
                 type 'T t = [ `Event  | `MessageEvent of 'T ] intf
                 type 'T t_1 = 'T t
                 type t_0 = any t
                 [@@@js.stop ]
                 type 'T tags = [ `Event  | `MessageEvent of 'T ]
                 type 'T tags_1 = 'T tags
                 type tags_0 = any tags
                 [@@@js.start ]
                 [@@@js.implem
                   type 'T tags = [ `Event  | `MessageEvent of 'T ]
                   type 'T tags_1 = 'T tags
                   type tags_0 = any tags]
                 type ('tags, 'T) this =
                   'tags intf constraint 'tags = [> `MessageEvent of 'T ]
                 val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                 val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                 val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                 val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val initMessageEvent :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t option ->
                                   ?ports:MessagePort.t Iterable.t_1 ->
                                     unit -> unit
                 val get_data : ('tags, 'T) this -> 'T
                 val get_lastEventId : ('tags, 'T) this -> string
                 val get_origin : ('tags, 'T) this -> string
                 val get_ports : ('tags, 'T) this -> MessagePort.t list
                 val get_source :
                   ('tags, 'T) this -> MessageEventSource.t option
                 val initMessageEvent' :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t option ->
                                   ?ports:MessagePort.t list -> unit -> unit
                 val cast_from : ('tags, 'T) this -> 'T t
                 val prototype : unit -> t_0
                 val create :
                   type_:string ->
                     ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t
               end =
  struct
    type 'T t = [ `Event  | `MessageEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5317 : Ojs.t) -> t_of_js __T_of_js x5317
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5315 : __T t) -> t_to_js __T_to_js x5315
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5321 : Ojs.t) -> t_of_js any_of_js x5321
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5319 : any t) -> t_to_js any_to_js x5319
    type 'T tags = [ `Event  | `MessageEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x5325 : Ojs.t) -> intf_of_js __tags_of_js x5325
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x5323 : __tags intf) -> intf_to_js __tags_to_js x5323
    let (initMessageEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x5345 : ('tags, 'T) this) ->
        fun ~type_:(x5327 : string) ->
          fun ?bubbles:(x5328 : bool option) ->
            fun ?cancelable:(x5329 : bool option) ->
              fun ?data:(x5330 : any option) ->
                fun ?origin:(x5331 : string option) ->
                  fun ?lastEventId:(x5332 : string option) ->
                    fun ?source:(x5333 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x5334 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x5348 = this_to_js Obj.magic Obj.magic x5345 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5348 "initMessageEvent")
                               "apply"
                               [|x5348;((let x5335 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5335 "push"
                                              [|(Ojs.string_to_js x5327)|]);
                                         (match x5328 with
                                          | Some x5344 ->
                                              ignore
                                                (Ojs.call x5335 "push"
                                                   [|(Ojs.bool_to_js x5344)|])
                                          | None -> ());
                                         (match x5329 with
                                          | Some x5343 ->
                                              ignore
                                                (Ojs.call x5335 "push"
                                                   [|(Ojs.bool_to_js x5343)|])
                                          | None -> ());
                                         (match x5330 with
                                          | Some x5342 ->
                                              ignore
                                                (Ojs.call x5335 "push"
                                                   [|(any_to_js x5342)|])
                                          | None -> ());
                                         (match x5331 with
                                          | Some x5341 ->
                                              ignore
                                                (Ojs.call x5335 "push"
                                                   [|(Ojs.string_to_js x5341)|])
                                          | None -> ());
                                         (match x5332 with
                                          | Some x5340 ->
                                              ignore
                                                (Ojs.call x5335 "push"
                                                   [|(Ojs.string_to_js x5340)|])
                                          | None -> ());
                                         (match x5333 with
                                          | Some x5338 ->
                                              ignore
                                                (Ojs.call x5335 "push"
                                                   [|(Ojs.option_to_js
                                                        MessageEventSource.t_to_js
                                                        x5338)|])
                                          | None -> ());
                                         (match x5334 with
                                          | Some x5336 ->
                                              ignore
                                                (Ojs.call x5335 "push"
                                                   [|(Iterable.t_1_to_js
                                                        MessagePort.t_to_js
                                                        x5336)|])
                                          | None -> ());
                                         x5335))|])
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x5349 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5349) "data")
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x5352 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5352)
             "lastEventId")
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x5355 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5355) "origin")
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x5358 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5358) "ports")
    let (get_source : ('tags, 'T) this -> MessageEventSource.t option) =
      fun (x5362 : ('tags, 'T) this) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5362) "source")
    let (initMessageEvent' :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x5384 : ('tags, 'T) this) ->
        fun ~type_:(x5366 : string) ->
          fun ?bubbles:(x5367 : bool option) ->
            fun ?cancelable:(x5368 : bool option) ->
              fun ?data:(x5369 : any option) ->
                fun ?origin:(x5370 : string option) ->
                  fun ?lastEventId:(x5371 : string option) ->
                    fun ?source:(x5372 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x5373 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x5387 = this_to_js Obj.magic Obj.magic x5384 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5387 "initMessageEvent")
                               "apply"
                               [|x5387;((let x5374 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5374 "push"
                                              [|(Ojs.string_to_js x5366)|]);
                                         (match x5367 with
                                          | Some x5383 ->
                                              ignore
                                                (Ojs.call x5374 "push"
                                                   [|(Ojs.bool_to_js x5383)|])
                                          | None -> ());
                                         (match x5368 with
                                          | Some x5382 ->
                                              ignore
                                                (Ojs.call x5374 "push"
                                                   [|(Ojs.bool_to_js x5382)|])
                                          | None -> ());
                                         (match x5369 with
                                          | Some x5381 ->
                                              ignore
                                                (Ojs.call x5374 "push"
                                                   [|(any_to_js x5381)|])
                                          | None -> ());
                                         (match x5370 with
                                          | Some x5380 ->
                                              ignore
                                                (Ojs.call x5374 "push"
                                                   [|(Ojs.string_to_js x5380)|])
                                          | None -> ());
                                         (match x5371 with
                                          | Some x5379 ->
                                              ignore
                                                (Ojs.call x5374 "push"
                                                   [|(Ojs.string_to_js x5379)|])
                                          | None -> ());
                                         (match x5372 with
                                          | Some x5377 ->
                                              ignore
                                                (Ojs.call x5374 "push"
                                                   [|(Ojs.option_to_js
                                                        MessageEventSource.t_to_js
                                                        x5377)|])
                                          | None -> ());
                                         (match x5373 with
                                          | Some x5375 ->
                                              ignore
                                                (Ojs.call x5374 "push"
                                                   [|(Ojs.list_to_js
                                                        MessagePort.t_to_js
                                                        x5375)|])
                                          | None -> ());
                                         x5374))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MessageEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t) =
      fun ~type_:(x5388 : string) ->
        fun ?eventInitDict:(x5389 : 'T MessageEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                 (let x5390 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5390 "push" [|(Ojs.string_to_js x5388)|]);
                  (match x5389 with
                   | Some x5391 ->
                       ignore
                         (Ojs.call x5390 "push"
                            [|(MessageEventInit.t_to_js Obj.magic x5391)|])
                   | None -> ());
                  x5390))
  end
 and
  MessageEventInit:sig
                     type 'T t =
                       [ `EventInit  | `MessageEventInit of 'T ] intf
                     type 'T t_1 = 'T t
                     type t_0 = any t
                     [@@@js.stop ]
                     type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
                     type 'T tags_1 = 'T tags
                     type tags_0 = any tags
                     [@@@js.start ]
                     [@@@js.implem
                       type 'T tags =
                         [ `EventInit  | `MessageEventInit of 'T ]
                       type 'T tags_1 = 'T tags
                       type tags_0 = any tags]
                     type ('tags, 'T) this =
                       'tags intf constraint 'tags =
                                   [> `MessageEventInit of 'T ]
                     val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                     val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                     val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                     val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_data : ('tags, 'T) this -> 'T
                     val set_data : ('tags, 'T) this -> 'T -> unit
                     val get_lastEventId : ('tags, 'T) this -> string
                     val set_lastEventId : ('tags, 'T) this -> string -> unit
                     val get_origin : ('tags, 'T) this -> string
                     val set_origin : ('tags, 'T) this -> string -> unit
                     val get_ports : ('tags, 'T) this -> MessagePort.t list
                     val set_ports :
                       ('tags, 'T) this -> MessagePort.t list -> unit
                     val get_source :
                       ('tags, 'T) this -> MessageEventSource.t option
                     val set_source :
                       ('tags, 'T) this ->
                         MessageEventSource.t option -> unit
                     val create :
                       data:'T ->
                         lastEventId:string ->
                           origin:string ->
                             ports:MessagePort.t list ->
                               ?source:MessageEventSource.t -> unit -> 'T t
                     val cast_from : ('tags, 'T) this -> 'T t
                   end =
  struct
    type 'T t = [ `EventInit  | `MessageEventInit of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5396 : Ojs.t) -> t_of_js __T_of_js x5396
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5394 : __T t) -> t_to_js __T_to_js x5394
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5400 : Ojs.t) -> t_of_js any_of_js x5400
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5398 : any t) -> t_to_js any_to_js x5398
    type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x5404 : Ojs.t) -> intf_of_js __tags_of_js x5404
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x5402 : __tags intf) -> intf_to_js __tags_to_js x5402
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x5406 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5406) "data")
    let (set_data : ('tags, 'T) this -> 'T -> unit) =
      fun (x5409 : ('tags, 'T) this) ->
        fun (x5410 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5409) "data"
            (Obj.magic x5410)
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x5413 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5413)
             "lastEventId")
    let (set_lastEventId : ('tags, 'T) this -> string -> unit) =
      fun (x5416 : ('tags, 'T) this) ->
        fun (x5417 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5416)
            "lastEventId" (Ojs.string_to_js x5417)
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x5420 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5420) "origin")
    let (set_origin : ('tags, 'T) this -> string -> unit) =
      fun (x5423 : ('tags, 'T) this) ->
        fun (x5424 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5423) "origin"
            (Ojs.string_to_js x5424)
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x5427 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5427) "ports")
    let (set_ports : ('tags, 'T) this -> MessagePort.t list -> unit) =
      fun (x5431 : ('tags, 'T) this) ->
        fun (x5432 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5431) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x5432)
    let (get_source : ('tags, 'T) this -> MessageEventSource.t option) =
      fun (x5436 : ('tags, 'T) this) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5436) "source")
    let (set_source :
      ('tags, 'T) this -> MessageEventSource.t option -> unit) =
      fun (x5440 : ('tags, 'T) this) ->
        fun (x5441 : MessageEventSource.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5440) "source"
            (Ojs.option_to_js MessageEventSource.t_to_js x5441)
    let (create :
      data:'T ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:MessageEventSource.t -> unit -> 'T t)
      =
      fun ~data:(x5445 : 'T) ->
        fun ~lastEventId:(x5446 : string) ->
          fun ~origin:(x5447 : string) ->
            fun ~ports:(x5448 : MessagePort.t list) ->
              fun ?source:(x5449 : MessageEventSource.t option) ->
                fun () ->
                  let x5450 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5450 "data" (Obj.magic x5445);
                  Ojs.set_prop_ascii x5450 "lastEventId"
                    (Ojs.string_to_js x5446);
                  Ojs.set_prop_ascii x5450 "origin" (Ojs.string_to_js x5447);
                  Ojs.set_prop_ascii x5450 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x5448);
                  (match x5449 with
                   | Some x5452 ->
                       Ojs.set_prop_ascii x5450 "source"
                         (MessageEventSource.t_to_js x5452)
                   | None -> ());
                  t_of_js Obj.magic x5450
    let cast_from = Obj.magic
  end and
       MessageEventSource:sig
                            type t = (MessagePort.t, ServiceWorker.t) union2
                            type t_0 = t
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                          end =
       struct
         type t = (MessagePort.t, ServiceWorker.t) union2
         let rec t_of_js : Ojs.t -> t =
           fun (x5457 : Ojs.t) ->
             union2_of_js MessagePort.t_of_js ServiceWorker.t_of_js x5457
         and t_to_js : t -> Ojs.t =
           fun (x5454 : (MessagePort.t, ServiceWorker.t) union2) ->
             union2_to_js MessagePort.t_to_js ServiceWorker.t_to_js x5454
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x5461 : Ojs.t) -> t_of_js x5461
         and t_0_to_js : t_0 -> Ojs.t = fun (x5460 : t) -> t_to_js x5460
       end and
            MessagePort:sig
                          type t = [ `EventTarget  | `MessagePort ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `EventTarget  | `MessagePort ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `EventTarget  | `MessagePort ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags = [> `MessagePort ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                          val set_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                                -> unit
                          val get_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                          val set_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) option
                                -> unit
                          val close : 'tags this -> unit
                          val postMessage :
                            'tags this ->
                              message:any ->
                                transfer:Transferable.t list -> unit
                          val postMessage' :
                            'tags this ->
                              message:any ->
                                ?options:StructuredSerializeOptions.t ->
                                  unit -> unit
                          val start : 'tags this -> unit
                          val addEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of AddEventListenerOptions.t ]
                                    -> unit -> unit
                          val addEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of AddEventListenerOptions.t ]
                                    -> unit -> unit
                          val removeEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of EventListenerOptions.t ]
                                    -> unit -> unit
                          val removeEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:[ `U1 of bool 
                                           | `U2 of EventListenerOptions.t ]
                                    -> unit -> unit
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create : unit -> t
                        end =
            struct
              type t = [ `EventTarget  | `MessagePort ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x5463 : Ojs.t) -> t_of_js x5463
              and t_0_to_js : t_0 -> Ojs.t = fun (x5462 : t) -> t_to_js x5462
              type tags = [ `EventTarget  | `MessagePort ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `MessagePort ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                fun (type __tags) ->
                  fun (__tags_of_js : Ojs.t -> __tags) ->
                    fun (x5466 : Ojs.t) -> intf_of_js __tags_of_js x5466
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                fun (type __tags) ->
                  fun (__tags_to_js : __tags -> Ojs.t) ->
                    fun (x5464 : __tags intf) ->
                      intf_to_js __tags_to_js x5464
              let (get_onmessage :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option)
                =
                fun (x5468 : 'tags this) ->
                  Ojs.option_of_js
                    (fun (x5470 : Ojs.t) ->
                       fun ~this:(x5471 : t) ->
                         fun ~ev:(x5472 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5470
                                [|(t_to_js x5471);(MessageEvent.t_0_to_js
                                                     x5472)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5468)
                       "onmessage")
              let (set_onmessage :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) option -> unit)
                =
                fun (x5473 : 'tags this) ->
                  fun (x5474 : (this:t -> ev:MessageEvent.t_0 -> any) option)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5473)
                      "onmessage"
                      (Ojs.option_to_js
                         (fun (x5475 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5476 : Ojs.t) ->
                                 fun (x5477 : Ojs.t) ->
                                   any_to_js
                                     (x5475 ~this:(t_of_js x5476)
                                        ~ev:(MessageEvent.t_0_of_js x5477))))
                         x5474)
              let (get_onmessageerror :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option)
                =
                fun (x5479 : 'tags this) ->
                  Ojs.option_of_js
                    (fun (x5481 : Ojs.t) ->
                       fun ~this:(x5482 : t) ->
                         fun ~ev:(x5483 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5481
                                [|(t_to_js x5482);(MessageEvent.t_0_to_js
                                                     x5483)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5479)
                       "onmessageerror")
              let (set_onmessageerror :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) option -> unit)
                =
                fun (x5484 : 'tags this) ->
                  fun (x5485 : (this:t -> ev:MessageEvent.t_0 -> any) option)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5484)
                      "onmessageerror"
                      (Ojs.option_to_js
                         (fun (x5486 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5487 : Ojs.t) ->
                                 fun (x5488 : Ojs.t) ->
                                   any_to_js
                                     (x5486 ~this:(t_of_js x5487)
                                        ~ev:(MessageEvent.t_0_of_js x5488))))
                         x5485)
              let (close : 'tags this -> unit) =
                fun (x5490 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5490) "close" [||])
              let (postMessage :
                'tags this ->
                  message:any -> transfer:Transferable.t list -> unit)
                =
                fun (x5495 : 'tags this) ->
                  fun ~message:(x5492 : any) ->
                    fun ~transfer:(x5493 : Transferable.t list) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5495) "postMessage"
                           [|(any_to_js x5492);(Ojs.list_to_js
                                                  Transferable.t_to_js x5493)|])
              let (postMessage' :
                'tags this ->
                  message:any ->
                    ?options:StructuredSerializeOptions.t -> unit -> unit)
                =
                fun (x5501 : 'tags this) ->
                  fun ~message:(x5497 : any) ->
                    fun
                      ?options:(x5498 : StructuredSerializeOptions.t option)
                      ->
                      fun () ->
                        ignore
                          (let x5503 = this_to_js Obj.magic x5501 in
                           Ojs.call (Ojs.get_prop_ascii x5503 "postMessage")
                             "apply"
                             [|x5503;((let x5499 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x5499 "push"
                                            [|(any_to_js x5497)|]);
                                       (match x5498 with
                                        | Some x5500 ->
                                            ignore
                                              (Ojs.call x5499 "push"
                                                 [|(StructuredSerializeOptions.t_to_js
                                                      x5500)|])
                                        | None -> ());
                                       x5499))|])
              let (start : 'tags this -> unit) =
                fun (x5504 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5504) "start" [||])
              let (addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:[ `U1 of bool 
                               | `U2 of AddEventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5515 : 'tags this) ->
                  fun ~type_:(x5506 : 'K) ->
                    fun ~listener:(x5507 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5508 :
                                   [ `U1 of bool 
                                   | `U2 of AddEventListenerOptions.t ]
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5517 = this_to_js Obj.magic x5515 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5517 "addEventListener")
                               "apply"
                               [|x5517;((let x5509 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5509 "push"
                                              [|(Obj.magic x5506)|]);
                                         ignore
                                           (Ojs.call x5509 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5513 : Ojs.t) ->
                                                      fun (x5514 : Ojs.t) ->
                                                        any_to_js
                                                          (x5507
                                                             ~this:(t_of_js
                                                                    x5513)
                                                             ~ev:(any_of_js
                                                                    x5514))))|]);
                                         (match x5508 with
                                          | Some x5510 ->
                                              ignore
                                                (Ojs.call x5509 "push"
                                                   [|((match x5510 with
                                                       | `U1 x5511 ->
                                                           Ojs.bool_to_js
                                                             x5511
                                                       | `U2 x5512 ->
                                                           AddEventListenerOptions.t_to_js
                                                             x5512))|])
                                          | None -> ());
                                         x5509))|])
              let (addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:[ `U1 of bool 
                               | `U2 of AddEventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5525 : 'tags this) ->
                  fun ~type_:(x5518 : string) ->
                    fun
                      ~listener:(x5519 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5520 :
                                   [ `U1 of bool 
                                   | `U2 of AddEventListenerOptions.t ]
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5527 = this_to_js Obj.magic x5525 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5527 "addEventListener")
                               "apply"
                               [|x5527;((let x5521 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5521 "push"
                                              [|(Ojs.string_to_js x5518)|]);
                                         ignore
                                           (Ojs.call x5521 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5519)|]);
                                         (match x5520 with
                                          | Some x5522 ->
                                              ignore
                                                (Ojs.call x5521 "push"
                                                   [|((match x5522 with
                                                       | `U1 x5523 ->
                                                           Ojs.bool_to_js
                                                             x5523
                                                       | `U2 x5524 ->
                                                           AddEventListenerOptions.t_to_js
                                                             x5524))|])
                                          | None -> ());
                                         x5521))|])
              let (removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:[ `U1 of bool 
                               | `U2 of EventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5537 : 'tags this) ->
                  fun ~type_:(x5528 : 'K) ->
                    fun ~listener:(x5529 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5530 :
                                   [ `U1 of bool 
                                   | `U2 of EventListenerOptions.t ] option)
                        ->
                        fun () ->
                          ignore
                            (let x5539 = this_to_js Obj.magic x5537 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5539
                                  "removeEventListener") "apply"
                               [|x5539;((let x5531 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5531 "push"
                                              [|(Obj.magic x5528)|]);
                                         ignore
                                           (Ojs.call x5531 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5535 : Ojs.t) ->
                                                      fun (x5536 : Ojs.t) ->
                                                        any_to_js
                                                          (x5529
                                                             ~this:(t_of_js
                                                                    x5535)
                                                             ~ev:(any_of_js
                                                                    x5536))))|]);
                                         (match x5530 with
                                          | Some x5532 ->
                                              ignore
                                                (Ojs.call x5531 "push"
                                                   [|((match x5532 with
                                                       | `U1 x5533 ->
                                                           Ojs.bool_to_js
                                                             x5533
                                                       | `U2 x5534 ->
                                                           EventListenerOptions.t_to_js
                                                             x5534))|])
                                          | None -> ());
                                         x5531))|])
              let (removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:[ `U1 of bool 
                               | `U2 of EventListenerOptions.t ]
                        -> unit -> unit)
                =
                fun (x5547 : 'tags this) ->
                  fun ~type_:(x5540 : string) ->
                    fun
                      ~listener:(x5541 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5542 :
                                   [ `U1 of bool 
                                   | `U2 of EventListenerOptions.t ] option)
                        ->
                        fun () ->
                          ignore
                            (let x5549 = this_to_js Obj.magic x5547 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5549
                                  "removeEventListener") "apply"
                               [|x5549;((let x5543 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5543 "push"
                                              [|(Ojs.string_to_js x5540)|]);
                                         ignore
                                           (Ojs.call x5543 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5541)|]);
                                         (match x5542 with
                                          | Some x5544 ->
                                              ignore
                                                (Ojs.call x5543 "push"
                                                   [|((match x5544 with
                                                       | `U1 x5545 ->
                                                           Ojs.bool_to_js
                                                             x5545
                                                       | `U2 x5546 ->
                                                           EventListenerOptions.t_to_js
                                                             x5546))|])
                                          | None -> ());
                                         x5543))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "MessagePort")
                       "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global "MessagePort") 
                       [||])
            end and
                 ServiceWorker:sig
                                 type t =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `AbstractWorker  | `EventTarget 
                                     | `ServiceWorker ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [> `ServiceWorker ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val get_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) option
                                 val set_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) option ->
                                       unit
                                 val get_scriptURL : 'tags this -> string
                                 val get_state :
                                   'tags this -> ServiceWorkerState.t
                                 val postMessage :
                                   'tags this ->
                                     message:any ->
                                       transfer:Transferable.t list -> unit
                                 val postMessage' :
                                   'tags this ->
                                     message:any ->
                                       ?options:StructuredSerializeOptions.t
                                         -> unit -> unit
                                 val addEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                           -> unit -> unit
                                 val addEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      AddEventListenerOptions.t
                                                      ]
                                           -> unit -> unit
                                 val removeEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                           -> unit -> unit
                                 val removeEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:[ `U1 of bool 
                                                  | `U2 of
                                                      EventListenerOptions.t ]
                                           -> unit -> unit
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create : unit -> t
                               end =
                 struct
                   type t =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                       intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x5551 : Ojs.t) -> t_of_js x5551
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x5550 : t) -> t_to_js x5550
                   type tags =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `ServiceWorker ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                     fun (type __tags) ->
                       fun (__tags_of_js : Ojs.t -> __tags) ->
                         fun (x5554 : Ojs.t) -> intf_of_js __tags_of_js x5554
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                     fun (type __tags) ->
                       fun (__tags_to_js : __tags -> Ojs.t) ->
                         fun (x5552 : __tags intf) ->
                           intf_to_js __tags_to_js x5552
                   let (get_onstatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) option) =
                     fun (x5556 : 'tags this) ->
                       Ojs.option_of_js
                         (fun (x5558 : Ojs.t) ->
                            fun ~this:(x5559 : t) ->
                              fun ~ev:(x5560 : Event.t) ->
                                any_of_js
                                  (Ojs.apply x5558
                                     [|(t_to_js x5559);(Event.t_to_js x5560)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5556)
                            "onstatechange")
                   let (set_onstatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) option -> unit)
                     =
                     fun (x5561 : 'tags this) ->
                       fun (x5562 : (this:t -> ev:Event.t -> any) option) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x5561)
                           "onstatechange"
                           (Ojs.option_to_js
                              (fun (x5563 : this:t -> ev:Event.t -> any) ->
                                 Ojs.fun_to_js 2
                                   (fun (x5564 : Ojs.t) ->
                                      fun (x5565 : Ojs.t) ->
                                        any_to_js
                                          (x5563 ~this:(t_of_js x5564)
                                             ~ev:(Event.t_of_js x5565))))
                              x5562)
                   let (get_scriptURL : 'tags this -> string) =
                     fun (x5567 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5567)
                            "scriptURL")
                   let (get_state : 'tags this -> ServiceWorkerState.t) =
                     fun (x5569 : 'tags this) ->
                       ServiceWorkerState.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5569)
                            "state")
                   let (postMessage :
                     'tags this ->
                       message:any -> transfer:Transferable.t list -> unit)
                     =
                     fun (x5574 : 'tags this) ->
                       fun ~message:(x5571 : any) ->
                         fun ~transfer:(x5572 : Transferable.t list) ->
                           ignore
                             (Ojs.call (this_to_js Obj.magic x5574)
                                "postMessage"
                                [|(any_to_js x5571);(Ojs.list_to_js
                                                       Transferable.t_to_js
                                                       x5572)|])
                   let (postMessage' :
                     'tags this ->
                       message:any ->
                         ?options:StructuredSerializeOptions.t ->
                           unit -> unit)
                     =
                     fun (x5580 : 'tags this) ->
                       fun ~message:(x5576 : any) ->
                         fun
                           ?options:(x5577 :
                                      StructuredSerializeOptions.t option)
                           ->
                           fun () ->
                             ignore
                               (let x5582 = this_to_js Obj.magic x5580 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x5582 "postMessage")
                                  "apply"
                                  [|x5582;((let x5578 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x5578 "push"
                                                 [|(any_to_js x5576)|]);
                                            (match x5577 with
                                             | Some x5579 ->
                                                 ignore
                                                   (Ojs.call x5578 "push"
                                                      [|(StructuredSerializeOptions.t_to_js
                                                           x5579)|])
                                             | None -> ());
                                            x5578))|])
                   let (addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5592 : 'tags this) ->
                       fun ~type_:(x5583 : 'K) ->
                         fun ~listener:(x5584 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5585 :
                                        [ `U1 of bool 
                                        | `U2 of AddEventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5594 = this_to_js Obj.magic x5592 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5594
                                       "addEventListener") "apply"
                                    [|x5594;((let x5586 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5586 "push"
                                                   [|(Obj.magic x5583)|]);
                                              ignore
                                                (Ojs.call x5586 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5590 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5591 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5584
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5590)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5591))))|]);
                                              (match x5585 with
                                               | Some x5587 ->
                                                   ignore
                                                     (Ojs.call x5586 "push"
                                                        [|((match x5587 with
                                                            | `U1 x5588 ->
                                                                Ojs.bool_to_js
                                                                  x5588
                                                            | `U2 x5589 ->
                                                                AddEventListenerOptions.t_to_js
                                                                  x5589))|])
                                               | None -> ());
                                              x5586))|])
                   let (addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of AddEventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5602 : 'tags this) ->
                       fun ~type_:(x5595 : string) ->
                         fun
                           ~listener:(x5596 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5597 :
                                        [ `U1 of bool 
                                        | `U2 of AddEventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5604 = this_to_js Obj.magic x5602 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5604
                                       "addEventListener") "apply"
                                    [|x5604;((let x5598 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5598 "push"
                                                   [|(Ojs.string_to_js x5595)|]);
                                              ignore
                                                (Ojs.call x5598 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5596)|]);
                                              (match x5597 with
                                               | Some x5599 ->
                                                   ignore
                                                     (Ojs.call x5598 "push"
                                                        [|((match x5599 with
                                                            | `U1 x5600 ->
                                                                Ojs.bool_to_js
                                                                  x5600
                                                            | `U2 x5601 ->
                                                                AddEventListenerOptions.t_to_js
                                                                  x5601))|])
                                               | None -> ());
                                              x5598))|])
                   let (removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5614 : 'tags this) ->
                       fun ~type_:(x5605 : 'K) ->
                         fun ~listener:(x5606 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5607 :
                                        [ `U1 of bool 
                                        | `U2 of EventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5616 = this_to_js Obj.magic x5614 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5616
                                       "removeEventListener") "apply"
                                    [|x5616;((let x5608 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5608 "push"
                                                   [|(Obj.magic x5605)|]);
                                              ignore
                                                (Ojs.call x5608 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5612 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5613 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5606
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5612)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5613))))|]);
                                              (match x5607 with
                                               | Some x5609 ->
                                                   ignore
                                                     (Ojs.call x5608 "push"
                                                        [|((match x5609 with
                                                            | `U1 x5610 ->
                                                                Ojs.bool_to_js
                                                                  x5610
                                                            | `U2 x5611 ->
                                                                EventListenerOptions.t_to_js
                                                                  x5611))|])
                                               | None -> ());
                                              x5608))|])
                   let (removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:[ `U1 of bool 
                                    | `U2 of EventListenerOptions.t ]
                             -> unit -> unit)
                     =
                     fun (x5624 : 'tags this) ->
                       fun ~type_:(x5617 : string) ->
                         fun
                           ~listener:(x5618 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5619 :
                                        [ `U1 of bool 
                                        | `U2 of EventListenerOptions.t ]
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5626 = this_to_js Obj.magic x5624 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5626
                                       "removeEventListener") "apply"
                                    [|x5626;((let x5620 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5620 "push"
                                                   [|(Ojs.string_to_js x5617)|]);
                                              ignore
                                                (Ojs.call x5620 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5618)|]);
                                              (match x5619 with
                                               | Some x5621 ->
                                                   ignore
                                                     (Ojs.call x5620 "push"
                                                        [|((match x5621 with
                                                            | `U1 x5622 ->
                                                                Ojs.bool_to_js
                                                                  x5622
                                                            | `U2 x5623 ->
                                                                EventListenerOptions.t_to_js
                                                                  x5623))|])
                                               | None -> ());
                                              x5620))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            [||])
                 end and
                      StructuredSerializeOptions:sig
                                                   type t =
                                                     [
                                                       `StructuredSerializeOptions
                                                         ]
                                                       intf
                                                   type t_0 = t
                                                   [@@@js.stop ]
                                                   type tags =
                                                     [
                                                       `StructuredSerializeOptions
                                                         ]
                                                   type tags_0 = tags
                                                   [@@@js.start ]
                                                   [@@@js.implem
                                                     type tags =
                                                       [
                                                         `StructuredSerializeOptions
                                                           ]
                                                     type tags_0 = tags]
                                                   type 'tags this =
                                                     'tags intf constraint
                                                                 'tags =
                                                                 [>
                                                                   `StructuredSerializeOptions
                                                                    ]
                                                   val t_to_js : t -> Ojs.t
                                                   val t_of_js : Ojs.t -> t
                                                   val t_0_to_js :
                                                     t_0 -> Ojs.t
                                                   val t_0_of_js :
                                                     Ojs.t -> t_0
                                                   val get_transfer :
                                                     'tags this ->
                                                       Transferable.t list
                                                   val set_transfer :
                                                     'tags this ->
                                                       Transferable.t list ->
                                                         unit
                                                   val create :
                                                     transfer:Transferable.t
                                                       list -> unit -> t
                                                   val cast_from :
                                                     'tags this -> t
                                                 end =
                      struct
                        type t = [ `StructuredSerializeOptions ] intf
                        let rec t_of_js : Ojs.t -> t = Obj.magic
                        and t_to_js : t -> Ojs.t = Obj.magic
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x5628 : Ojs.t) -> t_of_js x5628
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x5627 : t) -> t_to_js x5627
                        type tags = [ `StructuredSerializeOptions ]
                        type tags_0 = tags
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `StructuredSerializeOptions ]
                        let rec this_of_js :
                          'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                          fun (type __tags) ->
                            fun (__tags_of_js : Ojs.t -> __tags) ->
                              fun (x5631 : Ojs.t) ->
                                intf_of_js __tags_of_js x5631
                        and this_to_js :
                          'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                          fun (type __tags) ->
                            fun (__tags_to_js : __tags -> Ojs.t) ->
                              fun (x5629 : __tags intf) ->
                                intf_to_js __tags_to_js x5629
                        let (get_transfer :
                          'tags this -> Transferable.t list) =
                          fun (x5633 : 'tags this) ->
                            Ojs.list_of_js Transferable.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic x5633) "transfer")
                        let (set_transfer :
                          'tags this -> Transferable.t list -> unit) =
                          fun (x5636 : 'tags this) ->
                            fun (x5637 : Transferable.t list) ->
                              Ojs.set_prop_ascii (this_to_js Obj.magic x5636)
                                "transfer"
                                (Ojs.list_to_js Transferable.t_to_js x5637)
                        let (create :
                          transfer:Transferable.t list -> unit -> t) =
                          fun ~transfer:(x5640 : Transferable.t list) ->
                            fun () ->
                              let x5641 = Ojs.empty_obj () in
                              Ojs.set_prop_ascii x5641 "transfer"
                                (Ojs.list_to_js Transferable.t_to_js x5640);
                              t_of_js x5641
                        let cast_from = Obj.magic
                      end and
                           Transferable:sig
                                          type t =
                                            (ArrayBuffer.t_0, ImageBitmap.t,
                                              MessagePort.t) union3
                                          type t_0 = t
                                          val t_to_js : t -> Ojs.t
                                          val t_of_js : Ojs.t -> t
                                          val t_0_to_js : t_0 -> Ojs.t
                                          val t_0_of_js : Ojs.t -> t_0
                                        end =
                           struct
                             type t =
                               (ArrayBuffer.t_0, ImageBitmap.t,
                                 MessagePort.t) union3
                             let rec t_of_js : Ojs.t -> t =
                               fun (x5647 : Ojs.t) ->
                                 union3_of_js ArrayBuffer.t_0_of_js
                                   ImageBitmap.t_of_js MessagePort.t_of_js
                                   x5647
                             and t_to_js : t -> Ojs.t =
                               fun
                                 (x5643 :
                                   (ArrayBuffer.t_0, ImageBitmap.t,
                                     MessagePort.t) union3)
                                 ->
                                 union3_to_js ArrayBuffer.t_0_to_js
                                   ImageBitmap.t_to_js MessagePort.t_to_js
                                   x5643
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x5652 : Ojs.t) -> t_of_js x5652
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x5651 : t) -> t_to_js x5651
                           end
module AbstractWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5654 : Ojs.t) -> t_of_js x5654
    and t_0_to_js : t_0 -> Ojs.t = fun (x5653 : t) -> t_to_js x5653
    type tags = [ `AbstractWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5657 : Ojs.t) -> intf_of_js __tags_of_js x5657
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5655 : __tags intf) -> intf_to_js __tags_to_js x5655
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5659 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5659) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5661 : 'tags this) ->
        fun (x5662 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5661) "error"
            (ErrorEvent.t_to_js x5662)
    let (create : error:ErrorEvent.t -> unit -> t) =
      fun ~error:(x5664 : ErrorEvent.t) ->
        fun () ->
          let x5665 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5665 "error" (ErrorEvent.t_to_js x5664);
          t_of_js x5665
    let cast_from = Obj.magic
  end
module WorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `WorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5667 : Ojs.t) -> t_of_js x5667
    and t_0_to_js : t_0 -> Ojs.t = fun (x5666 : t) -> t_to_js x5666
    type tags = [ `AbstractWorkerEventMap  | `WorkerEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5670 : Ojs.t) -> intf_of_js __tags_of_js x5670
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5668 : __tags intf) -> intf_to_js __tags_to_js x5668
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5672 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5672) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5674 : 'tags this) ->
        fun (x5675 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5674) "message"
            (MessageEvent.t_0_to_js x5675)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x5677 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5677) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5679 : 'tags this) ->
        fun (x5680 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5679) "messageerror"
            (MessageEvent.t_0_to_js x5680)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x5682 : MessageEvent.t_0) ->
        fun ~messageerror:(x5683 : MessageEvent.t_0) ->
          fun () ->
            let x5684 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x5684 "message" (MessageEvent.t_0_to_js x5682);
            Ojs.set_prop_ascii x5684 "messageerror"
              (MessageEvent.t_0_to_js x5683);
            t_of_js x5684
    let cast_from = Obj.magic
  end
module WorkerType =
  struct
    type t = [ `L_s119_module  | `L_s49_classic ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5686 : Ojs.t) ->
        let x5687 = x5686 in
        match Ojs.string_of_js x5687 with
        | "module" -> `L_s119_module
        | "classic" -> `L_s49_classic
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5685 : [ `L_s119_module  | `L_s49_classic ]) ->
        match x5685 with
        | `L_s119_module -> Ojs.string_to_js "module"
        | `L_s49_classic -> Ojs.string_to_js "classic"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5689 : Ojs.t) -> t_of_js x5689
    and t_0_to_js : t_0 -> Ojs.t = fun (x5688 : t) -> t_to_js x5688
  end
module WorkerOptions =
  struct
    type t = [ `WorkerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5691 : Ojs.t) -> t_of_js x5691
    and t_0_to_js : t_0 -> Ojs.t = fun (x5690 : t) -> t_to_js x5690
    type tags = [ `WorkerOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5694 : Ojs.t) -> intf_of_js __tags_of_js x5694
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5692 : __tags intf) -> intf_to_js __tags_to_js x5692
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x5696 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5696) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x5698 : 'tags this) ->
        fun (x5699 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5698) "credentials"
            (RequestCredentials.t_to_js x5699)
    let (get_name : 'tags this -> string) =
      fun (x5701 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5701) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x5703 : 'tags this) ->
        fun (x5704 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5703) "name"
            (Ojs.string_to_js x5704)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x5706 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5706) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x5708 : 'tags this) ->
        fun (x5709 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5708) "type"
            (WorkerType.t_to_js x5709)
    let (create :
      credentials:RequestCredentials.t ->
        name:string -> type_:WorkerType.t -> unit -> t)
      =
      fun ~credentials:(x5711 : RequestCredentials.t) ->
        fun ~name:(x5712 : string) ->
          fun ~type_:(x5713 : WorkerType.t) ->
            fun () ->
              let x5714 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5714 "credentials"
                (RequestCredentials.t_to_js x5711);
              Ojs.set_prop_ascii x5714 "name" (Ojs.string_to_js x5712);
              Ojs.set_prop_ascii x5714 "type" (WorkerType.t_to_js x5713);
              t_of_js x5714
    let cast_from = Obj.magic
  end
module Worker =
  struct
    type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5716 : Ojs.t) -> t_of_js x5716
    and t_0_to_js : t_0 -> Ojs.t = fun (x5715 : t) -> t_to_js x5715
    type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5719 : Ojs.t) -> intf_of_js __tags_of_js x5719
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5717 : __tags intf) -> intf_to_js __tags_to_js x5717
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5721 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5723 : Ojs.t) ->
             fun ~this:(x5724 : t) ->
               fun ~ev:(x5725 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5723
                      [|(t_to_js x5724);(MessageEvent.t_0_to_js x5725)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5721) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5726 : 'tags this) ->
        fun (x5727 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5726) "onmessage"
            (Ojs.option_to_js
               (fun (x5728 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5729 : Ojs.t) ->
                       fun (x5730 : Ojs.t) ->
                         any_to_js
                           (x5728 ~this:(t_of_js x5729)
                              ~ev:(MessageEvent.t_0_of_js x5730)))) x5727)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5732 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5734 : Ojs.t) ->
             fun ~this:(x5735 : t) ->
               fun ~ev:(x5736 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5734
                      [|(t_to_js x5735);(MessageEvent.t_0_to_js x5736)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5732) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5737 : 'tags this) ->
        fun (x5738 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5737) "onmessageerror"
            (Ojs.option_to_js
               (fun (x5739 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5740 : Ojs.t) ->
                       fun (x5741 : Ojs.t) ->
                         any_to_js
                           (x5739 ~this:(t_of_js x5740)
                              ~ev:(MessageEvent.t_0_of_js x5741)))) x5738)
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x5746 : 'tags this) ->
        fun ~message:(x5743 : any) ->
          fun ~transfer:(x5744 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5746) "postMessage"
                 [|(any_to_js x5743);(Ojs.list_to_js Transferable.t_to_js
                                        x5744)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x5752 : 'tags this) ->
        fun ~message:(x5748 : any) ->
          fun ?options:(x5749 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x5754 = this_to_js Obj.magic x5752 in
                 Ojs.call (Ojs.get_prop_ascii x5754 "postMessage") "apply"
                   [|x5754;((let x5750 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5750 "push" [|(any_to_js x5748)|]);
                             (match x5749 with
                              | Some x5751 ->
                                  ignore
                                    (Ojs.call x5750 "push"
                                       [|(StructuredSerializeOptions.t_to_js
                                            x5751)|])
                              | None -> ());
                             x5750))|])
    let (terminate : 'tags this -> unit) =
      fun (x5755 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5755) "terminate" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5766 : 'tags this) ->
        fun ~type_:(x5757 : 'K) ->
          fun ~listener:(x5758 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5759 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5768 = this_to_js Obj.magic x5766 in
                   Ojs.call (Ojs.get_prop_ascii x5768 "addEventListener")
                     "apply"
                     [|x5768;((let x5760 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5760 "push" [|(Obj.magic x5757)|]);
                               ignore
                                 (Ojs.call x5760 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5764 : Ojs.t) ->
                                            fun (x5765 : Ojs.t) ->
                                              any_to_js
                                                (x5758 ~this:(t_of_js x5764)
                                                   ~ev:(any_of_js x5765))))|]);
                               (match x5759 with
                                | Some x5761 ->
                                    ignore
                                      (Ojs.call x5760 "push"
                                         [|((match x5761 with
                                             | `U1 x5762 ->
                                                 Ojs.bool_to_js x5762
                                             | `U2 x5763 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5763))|])
                                | None -> ());
                               x5760))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5776 : 'tags this) ->
        fun ~type_:(x5769 : string) ->
          fun ~listener:(x5770 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5771 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5778 = this_to_js Obj.magic x5776 in
                   Ojs.call (Ojs.get_prop_ascii x5778 "addEventListener")
                     "apply"
                     [|x5778;((let x5772 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5772 "push"
                                    [|(Ojs.string_to_js x5769)|]);
                               ignore
                                 (Ojs.call x5772 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5770)|]);
                               (match x5771 with
                                | Some x5773 ->
                                    ignore
                                      (Ojs.call x5772 "push"
                                         [|((match x5773 with
                                             | `U1 x5774 ->
                                                 Ojs.bool_to_js x5774
                                             | `U2 x5775 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5775))|])
                                | None -> ());
                               x5772))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5788 : 'tags this) ->
        fun ~type_:(x5779 : 'K) ->
          fun ~listener:(x5780 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5781 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5790 = this_to_js Obj.magic x5788 in
                   Ojs.call (Ojs.get_prop_ascii x5790 "removeEventListener")
                     "apply"
                     [|x5790;((let x5782 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5782 "push" [|(Obj.magic x5779)|]);
                               ignore
                                 (Ojs.call x5782 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5786 : Ojs.t) ->
                                            fun (x5787 : Ojs.t) ->
                                              any_to_js
                                                (x5780 ~this:(t_of_js x5786)
                                                   ~ev:(any_of_js x5787))))|]);
                               (match x5781 with
                                | Some x5783 ->
                                    ignore
                                      (Ojs.call x5782 "push"
                                         [|((match x5783 with
                                             | `U1 x5784 ->
                                                 Ojs.bool_to_js x5784
                                             | `U2 x5785 ->
                                                 EventListenerOptions.t_to_js
                                                   x5785))|])
                                | None -> ());
                               x5782))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5798 : 'tags this) ->
        fun ~type_:(x5791 : string) ->
          fun ~listener:(x5792 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5793 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5800 = this_to_js Obj.magic x5798 in
                   Ojs.call (Ojs.get_prop_ascii x5800 "removeEventListener")
                     "apply"
                     [|x5800;((let x5794 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5794 "push"
                                    [|(Ojs.string_to_js x5791)|]);
                               ignore
                                 (Ojs.call x5794 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5792)|]);
                               (match x5793 with
                                | Some x5795 ->
                                    ignore
                                      (Ojs.call x5794 "push"
                                         [|((match x5795 with
                                             | `U1 x5796 ->
                                                 Ojs.bool_to_js x5796
                                             | `U2 x5797 ->
                                                 EventListenerOptions.t_to_js
                                                   x5797))|])
                                | None -> ());
                               x5794))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Worker")
             "prototype")
    let (create :
      scriptURL:[ `U1 of string  | `U2 of URL.t ] ->
        ?options:WorkerOptions.t -> unit -> t)
      =
      fun ~scriptURL:(x5801 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?options:(x5802 : WorkerOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Worker")
                 (let x5803 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x5803 "push"
                       [|((match x5801 with
                           | `U1 x5805 -> Ojs.string_to_js x5805
                           | `U2 x5806 -> URL.t_to_js x5806))|]);
                  (match x5802 with
                   | Some x5804 ->
                       ignore
                         (Ojs.call x5803 "push"
                            [|(WorkerOptions.t_to_js x5804)|])
                   | None -> ());
                  x5803))
  end
module CloseEventInit =
  struct
    type t = [ `CloseEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5808 : Ojs.t) -> t_of_js x5808
    and t_0_to_js : t_0 -> Ojs.t = fun (x5807 : t) -> t_to_js x5807
    type tags = [ `CloseEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5811 : Ojs.t) -> intf_of_js __tags_of_js x5811
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5809 : __tags intf) -> intf_to_js __tags_to_js x5809
    let (get_code : 'tags this -> float) =
      fun (x5813 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5813) "code")
    let (set_code : 'tags this -> float -> unit) =
      fun (x5815 : 'tags this) ->
        fun (x5816 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5815) "code"
            (Ojs.float_to_js x5816)
    let (get_reason : 'tags this -> string) =
      fun (x5818 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5818) "reason")
    let (set_reason : 'tags this -> string -> unit) =
      fun (x5820 : 'tags this) ->
        fun (x5821 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5820) "reason"
            (Ojs.string_to_js x5821)
    let (get_wasClean : 'tags this -> bool) =
      fun (x5823 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5823) "wasClean")
    let (set_wasClean : 'tags this -> bool -> unit) =
      fun (x5825 : 'tags this) ->
        fun (x5826 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5825) "wasClean"
            (Ojs.bool_to_js x5826)
    let (create : code:float -> reason:string -> wasClean:bool -> unit -> t)
      =
      fun ~code:(x5828 : float) ->
        fun ~reason:(x5829 : string) ->
          fun ~wasClean:(x5830 : bool) ->
            fun () ->
              let x5831 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5831 "code" (Ojs.float_to_js x5828);
              Ojs.set_prop_ascii x5831 "reason" (Ojs.string_to_js x5829);
              Ojs.set_prop_ascii x5831 "wasClean" (Ojs.bool_to_js x5830);
              t_of_js x5831
    let cast_from = Obj.magic
  end
module CloseEvent =
  struct
    type t = [ `CloseEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5833 : Ojs.t) -> t_of_js x5833
    and t_0_to_js : t_0 -> Ojs.t = fun (x5832 : t) -> t_to_js x5832
    type tags = [ `CloseEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5836 : Ojs.t) -> intf_of_js __tags_of_js x5836
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5834 : __tags intf) -> intf_to_js __tags_to_js x5834
    let (get_code : 'tags this -> float) =
      fun (x5838 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5838) "code")
    let (get_reason : 'tags this -> string) =
      fun (x5840 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5840) "reason")
    let (get_wasClean : 'tags this -> bool) =
      fun (x5842 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5842) "wasClean")
    let (create : code:float -> reason:string -> wasClean:bool -> unit -> t)
      =
      fun ~code:(x5844 : float) ->
        fun ~reason:(x5845 : string) ->
          fun ~wasClean:(x5846 : bool) ->
            fun () ->
              let x5847 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5847 "code" (Ojs.float_to_js x5844);
              Ojs.set_prop_ascii x5847 "reason" (Ojs.string_to_js x5845);
              Ojs.set_prop_ascii x5847 "wasClean" (Ojs.bool_to_js x5846);
              t_of_js x5847
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CloseEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t) =
      fun ~type_:(x5848 : string) ->
        fun ?eventInitDict:(x5849 : CloseEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CloseEvent")
                 (let x5850 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5850 "push" [|(Ojs.string_to_js x5848)|]);
                  (match x5849 with
                   | Some x5851 ->
                       ignore
                         (Ojs.call x5850 "push"
                            [|(CloseEventInit.t_to_js x5851)|])
                   | None -> ());
                  x5850))
  end
module WebSocketEventMap =
  struct
    type t = [ `WebSocketEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5853 : Ojs.t) -> t_of_js x5853
    and t_0_to_js : t_0 -> Ojs.t = fun (x5852 : t) -> t_to_js x5852
    type tags = [ `WebSocketEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5856 : Ojs.t) -> intf_of_js __tags_of_js x5856
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5854 : __tags intf) -> intf_to_js __tags_to_js x5854
    let (get_close : 'tags this -> CloseEvent.t) =
      fun (x5858 : 'tags this) ->
        CloseEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5858) "close")
    let (set_close : 'tags this -> CloseEvent.t -> unit) =
      fun (x5860 : 'tags this) ->
        fun (x5861 : CloseEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5860) "close"
            (CloseEvent.t_to_js x5861)
    let (get_error : 'tags this -> Event.t) =
      fun (x5863 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5863) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x5865 : 'tags this) ->
        fun (x5866 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5865) "error"
            (Event.t_to_js x5866)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5868 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5868) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5870 : 'tags this) ->
        fun (x5871 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5870) "message"
            (MessageEvent.t_0_to_js x5871)
    let (get_open : 'tags this -> Event.t) =
      fun (x5873 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5873) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x5875 : 'tags this) ->
        fun (x5876 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5875) "open"
            (Event.t_to_js x5876)
    let (create :
      close:CloseEvent.t ->
        error:Event.t ->
          message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~close:(x5878 : CloseEvent.t) ->
        fun ~error:(x5879 : Event.t) ->
          fun ~message:(x5880 : MessageEvent.t_0) ->
            fun ~open_:(x5881 : Event.t) ->
              fun () ->
                let x5882 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x5882 "close" (CloseEvent.t_to_js x5878);
                Ojs.set_prop_ascii x5882 "error" (Event.t_to_js x5879);
                Ojs.set_prop_ascii x5882 "message"
                  (MessageEvent.t_0_to_js x5880);
                Ojs.set_prop_ascii x5882 "open" (Event.t_to_js x5881);
                t_of_js x5882
    let cast_from = Obj.magic
  end
module BinaryType =
  struct
    type t = [ `L_s37_arraybuffer  | `L_s44_blob ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5884 : Ojs.t) ->
        let x5885 = x5884 in
        match Ojs.string_of_js x5885 with
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5883 : [ `L_s37_arraybuffer  | `L_s44_blob ]) ->
        match x5883 with
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5887 : Ojs.t) -> t_of_js x5887
    and t_0_to_js : t_0 -> Ojs.t = fun (x5886 : t) -> t_to_js x5886
  end
module WebSocket =
  struct
    type t = [ `EventTarget  | `WebSocket ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5889 : Ojs.t) -> t_of_js x5889
    and t_0_to_js : t_0 -> Ojs.t = fun (x5888 : t) -> t_to_js x5888
    type tags = [ `EventTarget  | `WebSocket ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x5892 : Ojs.t) -> intf_of_js __tags_of_js x5892
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x5890 : __tags intf) -> intf_to_js __tags_to_js x5890
    let (get_binaryType : 'tags this -> BinaryType.t) =
      fun (x5894 : 'tags this) ->
        BinaryType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5894) "binaryType")
    let (set_binaryType : 'tags this -> BinaryType.t -> unit) =
      fun (x5896 : 'tags this) ->
        fun (x5897 : BinaryType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5896) "binaryType"
            (BinaryType.t_to_js x5897)
    let (get_bufferedAmount : 'tags this -> float) =
      fun (x5899 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5899) "bufferedAmount")
    let (get_extensions : 'tags this -> string) =
      fun (x5901 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5901) "extensions")
    let (get_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) option) =
      fun (x5903 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5905 : Ojs.t) ->
             fun ~this:(x5906 : t) ->
               fun ~ev:(x5907 : CloseEvent.t) ->
                 any_of_js
                   (Ojs.apply x5905
                      [|(t_to_js x5906);(CloseEvent.t_to_js x5907)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5903) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) option -> unit) =
      fun (x5908 : 'tags this) ->
        fun (x5909 : (this:t -> ev:CloseEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5908) "onclose"
            (Ojs.option_to_js
               (fun (x5910 : this:t -> ev:CloseEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5911 : Ojs.t) ->
                       fun (x5912 : Ojs.t) ->
                         any_to_js
                           (x5910 ~this:(t_of_js x5911)
                              ~ev:(CloseEvent.t_of_js x5912)))) x5909)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x5914 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5916 : Ojs.t) ->
             fun ~this:(x5917 : t) ->
               fun ~ev:(x5918 : Event.t) ->
                 any_of_js
                   (Ojs.apply x5916 [|(t_to_js x5917);(Event.t_to_js x5918)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5914) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x5919 : 'tags this) ->
        fun (x5920 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5919) "onerror"
            (Ojs.option_to_js
               (fun (x5921 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5922 : Ojs.t) ->
                       fun (x5923 : Ojs.t) ->
                         any_to_js
                           (x5921 ~this:(t_of_js x5922)
                              ~ev:(Event.t_of_js x5923)))) x5920)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x5925 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5927 : Ojs.t) ->
             fun ~this:(x5928 : t) ->
               fun ~ev:(x5929 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5927
                      [|(t_to_js x5928);(MessageEvent.t_0_to_js x5929)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5925) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x5930 : 'tags this) ->
        fun (x5931 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5930) "onmessage"
            (Ojs.option_to_js
               (fun (x5932 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5933 : Ojs.t) ->
                       fun (x5934 : Ojs.t) ->
                         any_to_js
                           (x5932 ~this:(t_of_js x5933)
                              ~ev:(MessageEvent.t_0_of_js x5934)))) x5931)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x5936 : 'tags this) ->
        Ojs.option_of_js
          (fun (x5938 : Ojs.t) ->
             fun ~this:(x5939 : t) ->
               fun ~ev:(x5940 : Event.t) ->
                 any_of_js
                   (Ojs.apply x5938 [|(t_to_js x5939);(Event.t_to_js x5940)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5936) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x5941 : 'tags this) ->
        fun (x5942 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5941) "onopen"
            (Ojs.option_to_js
               (fun (x5943 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5944 : Ojs.t) ->
                       fun (x5945 : Ojs.t) ->
                         any_to_js
                           (x5943 ~this:(t_of_js x5944)
                              ~ev:(Event.t_of_js x5945)))) x5942)
    let (get_protocol : 'tags this -> string) =
      fun (x5947 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5947) "protocol")
    let (get_readyState : 'tags this -> float) =
      fun (x5949 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5949) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x5951 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5951) "url")
    let (close : 'tags this -> ?code:float -> ?reason:string -> unit -> unit)
      =
      fun (x5958 : 'tags this) ->
        fun ?code:(x5953 : float option) ->
          fun ?reason:(x5954 : string option) ->
            fun () ->
              ignore
                (let x5960 = this_to_js Obj.magic x5958 in
                 Ojs.call (Ojs.get_prop_ascii x5960 "close") "apply"
                   [|x5960;((let x5955 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x5953 with
                              | Some x5957 ->
                                  ignore
                                    (Ojs.call x5955 "push"
                                       [|(Ojs.float_to_js x5957)|])
                              | None -> ());
                             (match x5954 with
                              | Some x5956 ->
                                  ignore
                                    (Ojs.call x5955 "push"
                                       [|(Ojs.string_to_js x5956)|])
                              | None -> ());
                             x5955))|])
    let (send :
      'tags this ->
        data:[ `U1 of string  | `U2 of ArrayBufferLike.t_0  | `U3 of Blob.t 
             | `U4 of ArrayBufferView.t_0 ]
          -> unit)
      =
      fun (x5966 : 'tags this) ->
        fun
          ~data:(x5961 :
                  [ `U1 of string  | `U2 of ArrayBufferLike.t_0 
                  | `U3 of Blob.t  | `U4 of ArrayBufferView.t_0 ])
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5966) "send"
               [|((match x5961 with
                   | `U1 x5962 -> Ojs.string_to_js x5962
                   | `U2 x5963 -> ArrayBufferLike.t_0_to_js x5963
                   | `U3 x5964 -> Blob.t_to_js x5964
                   | `U4 x5965 -> ArrayBufferView.t_0_to_js x5965))|])
    let (get_CLOSED : 'tags this -> float) =
      fun (x5968 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5968) "CLOSED")
    let (get_CLOSING : 'tags this -> float) =
      fun (x5970 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5970) "CLOSING")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x5972 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5972) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x5974 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5974) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5985 : 'tags this) ->
        fun ~type_:(x5976 : 'K) ->
          fun ~listener:(x5977 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5978 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5987 = this_to_js Obj.magic x5985 in
                   Ojs.call (Ojs.get_prop_ascii x5987 "addEventListener")
                     "apply"
                     [|x5987;((let x5979 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5979 "push" [|(Obj.magic x5976)|]);
                               ignore
                                 (Ojs.call x5979 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5983 : Ojs.t) ->
                                            fun (x5984 : Ojs.t) ->
                                              any_to_js
                                                (x5977 ~this:(t_of_js x5983)
                                                   ~ev:(any_of_js x5984))))|]);
                               (match x5978 with
                                | Some x5980 ->
                                    ignore
                                      (Ojs.call x5979 "push"
                                         [|((match x5980 with
                                             | `U1 x5981 ->
                                                 Ojs.bool_to_js x5981
                                             | `U2 x5982 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5982))|])
                                | None -> ());
                               x5979))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x5995 : 'tags this) ->
        fun ~type_:(x5988 : string) ->
          fun ~listener:(x5989 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5990 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x5997 = this_to_js Obj.magic x5995 in
                   Ojs.call (Ojs.get_prop_ascii x5997 "addEventListener")
                     "apply"
                     [|x5997;((let x5991 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5991 "push"
                                    [|(Ojs.string_to_js x5988)|]);
                               ignore
                                 (Ojs.call x5991 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5989)|]);
                               (match x5990 with
                                | Some x5992 ->
                                    ignore
                                      (Ojs.call x5991 "push"
                                         [|((match x5992 with
                                             | `U1 x5993 ->
                                                 Ojs.bool_to_js x5993
                                             | `U2 x5994 ->
                                                 AddEventListenerOptions.t_to_js
                                                   x5994))|])
                                | None -> ());
                               x5991))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6007 : 'tags this) ->
        fun ~type_:(x5998 : 'K) ->
          fun ~listener:(x5999 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6000 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6009 = this_to_js Obj.magic x6007 in
                   Ojs.call (Ojs.get_prop_ascii x6009 "removeEventListener")
                     "apply"
                     [|x6009;((let x6001 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6001 "push" [|(Obj.magic x5998)|]);
                               ignore
                                 (Ojs.call x6001 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6005 : Ojs.t) ->
                                            fun (x6006 : Ojs.t) ->
                                              any_to_js
                                                (x5999 ~this:(t_of_js x6005)
                                                   ~ev:(any_of_js x6006))))|]);
                               (match x6000 with
                                | Some x6002 ->
                                    ignore
                                      (Ojs.call x6001 "push"
                                         [|((match x6002 with
                                             | `U1 x6003 ->
                                                 Ojs.bool_to_js x6003
                                             | `U2 x6004 ->
                                                 EventListenerOptions.t_to_js
                                                   x6004))|])
                                | None -> ());
                               x6001))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x6017 : 'tags this) ->
        fun ~type_:(x6010 : string) ->
          fun ~listener:(x6011 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6012 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x6019 = this_to_js Obj.magic x6017 in
                   Ojs.call (Ojs.get_prop_ascii x6019 "removeEventListener")
                     "apply"
                     [|x6019;((let x6013 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6013 "push"
                                    [|(Ojs.string_to_js x6010)|]);
                               ignore
                                 (Ojs.call x6013 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6011)|]);
                               (match x6012 with
                                | Some x6014 ->
                                    ignore
                                      (Ojs.call x6013 "push"
                                         [|((match x6014 with
                                             | `U1 x6015 ->
                                                 Ojs.bool_to_js x6015
                                             | `U2 x6016 ->
                                                 EventListenerOptions.t_to_js
                                                   x6016))|])
                                | None -> ());
                               x6013))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of URL.t ] ->
        ?protocols:[ `U1 of string  | `U2 of string list ] -> unit -> t)
      =
      fun ~url:(x6020 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun
          ?protocols:(x6021 : [ `U1 of string  | `U2 of string list ] option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WebSocket")
                 (let x6022 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x6022 "push"
                       [|((match x6020 with
                           | `U1 x6027 -> Ojs.string_to_js x6027
                           | `U2 x6028 -> URL.t_to_js x6028))|]);
                  (match x6021 with
                   | Some x6023 ->
                       ignore
                         (Ojs.call x6022 "push"
                            [|((match x6023 with
                                | `U1 x6024 -> Ojs.string_to_js x6024
                                | `U2 x6025 ->
                                    Ojs.list_to_js Ojs.string_to_js x6025))|])
                   | None -> ());
                  x6022))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSED")
    let (closing : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSING")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "OPEN")
  end
module WebGLUniformLocation =
  struct
    type t = [ `WebGLUniformLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6030 : Ojs.t) -> t_of_js x6030
    and t_0_to_js : t_0 -> Ojs.t = fun (x6029 : t) -> t_to_js x6029
    type tags = [ `WebGLUniformLocation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLUniformLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6033 : Ojs.t) -> intf_of_js __tags_of_js x6033
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6031 : __tags intf) -> intf_to_js __tags_to_js x6031
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             [||])
  end
module PredefinedColorSpace =
  struct
    type t = [ `L_s187_srgb  | `L_s62_display_p3 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6036 : Ojs.t) ->
        let x6037 = x6036 in
        match Ojs.string_of_js x6037 with
        | "srgb" -> `L_s187_srgb
        | "display-p3" -> `L_s62_display_p3
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x6035 : [ `L_s187_srgb  | `L_s62_display_p3 ]) ->
        match x6035 with
        | `L_s187_srgb -> Ojs.string_to_js "srgb"
        | `L_s62_display_p3 -> Ojs.string_to_js "display-p3"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6039 : Ojs.t) -> t_of_js x6039
    and t_0_to_js : t_0 -> Ojs.t = fun (x6038 : t) -> t_to_js x6038
  end
module ImageDataSettings =
  struct
    type t = [ `ImageDataSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6041 : Ojs.t) -> t_of_js x6041
    and t_0_to_js : t_0 -> Ojs.t = fun (x6040 : t) -> t_to_js x6040
    type tags = [ `ImageDataSettings ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6044 : Ojs.t) -> intf_of_js __tags_of_js x6044
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6042 : __tags intf) -> intf_to_js __tags_to_js x6042
    let (get_colorSpace : 'tags this -> PredefinedColorSpace.t) =
      fun (x6046 : 'tags this) ->
        PredefinedColorSpace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6046) "colorSpace")
    let (set_colorSpace : 'tags this -> PredefinedColorSpace.t -> unit) =
      fun (x6048 : 'tags this) ->
        fun (x6049 : PredefinedColorSpace.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6048) "colorSpace"
            (PredefinedColorSpace.t_to_js x6049)
    let (create : colorSpace:PredefinedColorSpace.t -> unit -> t) =
      fun ~colorSpace:(x6051 : PredefinedColorSpace.t) ->
        fun () ->
          let x6052 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6052 "colorSpace"
            (PredefinedColorSpace.t_to_js x6051);
          t_of_js x6052
    let cast_from = Obj.magic
  end
module ImageData =
  struct
    type t = [ `ImageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6054 : Ojs.t) -> t_of_js x6054
    and t_0_to_js : t_0 -> Ojs.t = fun (x6053 : t) -> t_to_js x6053
    type tags = [ `ImageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6057 : Ojs.t) -> intf_of_js __tags_of_js x6057
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6055 : __tags intf) -> intf_to_js __tags_to_js x6055
    let (get_data : 'tags this -> Uint8ClampedArray.t_0) =
      fun (x6059 : 'tags this) ->
        Uint8ClampedArray.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6059) "data")
    let (get_height : 'tags this -> float) =
      fun (x6061 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6061) "height")
    let (get_width : 'tags this -> float) =
      fun (x6063 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6063) "width")
    let (create :
      data:Uint8ClampedArray.t_0 -> height:float -> width:float -> unit -> t)
      =
      fun ~data:(x6065 : Uint8ClampedArray.t_0) ->
        fun ~height:(x6066 : float) ->
          fun ~width:(x6067 : float) ->
            fun () ->
              let x6068 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6068 "data"
                (Uint8ClampedArray.t_0_to_js x6065);
              Ojs.set_prop_ascii x6068 "height" (Ojs.float_to_js x6066);
              Ojs.set_prop_ascii x6068 "width" (Ojs.float_to_js x6067);
              t_of_js x6068
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageData")
             "prototype")
    let (create' :
      sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t) =
      fun ~sw:(x6069 : float) ->
        fun ~sh:(x6070 : float) ->
          fun ?settings:(x6071 : ImageDataSettings.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ImageData")
                   (let x6072 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x6072 "push" [|(Ojs.float_to_js x6069)|]);
                    ignore
                      (Ojs.call x6072 "push" [|(Ojs.float_to_js x6070)|]);
                    (match x6071 with
                     | Some x6073 ->
                         ignore
                           (Ojs.call x6072 "push"
                              [|(ImageDataSettings.t_to_js x6073)|])
                     | None -> ());
                    x6072))
    let (create'' :
      data:Uint8ClampedArray.t_0 ->
        sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t)
      =
      fun ~data:(x6074 : Uint8ClampedArray.t_0) ->
        fun ~sw:(x6075 : float) ->
          fun ?sh:(x6076 : float option) ->
            fun ?settings:(x6077 : ImageDataSettings.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "ImageData")
                     (let x6078 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x6078 "push"
                           [|(Uint8ClampedArray.t_0_to_js x6074)|]);
                      ignore
                        (Ojs.call x6078 "push" [|(Ojs.float_to_js x6075)|]);
                      (match x6076 with
                       | Some x6080 ->
                           ignore
                             (Ojs.call x6078 "push"
                                [|(Ojs.float_to_js x6080)|])
                       | None -> ());
                      (match x6077 with
                       | Some x6079 ->
                           ignore
                             (Ojs.call x6078 "push"
                                [|(ImageDataSettings.t_to_js x6079)|])
                       | None -> ());
                      x6078))
  end
module OffscreenCanvas =
  struct
    type t = [ `EventTarget  | `OffscreenCanvas ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6082 : Ojs.t) -> t_of_js x6082
    and t_0_to_js : t_0 -> Ojs.t = fun (x6081 : t) -> t_to_js x6081
    type tags = [ `EventTarget  | `OffscreenCanvas ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6085 : Ojs.t) -> intf_of_js __tags_of_js x6085
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6083 : __tags intf) -> intf_to_js __tags_to_js x6083
    let cast_from = Obj.magic
  end
module TexImageSource =
  struct
    type t = (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x6091 : Ojs.t) ->
        union3_of_js ImageBitmap.t_of_js ImageData.t_of_js
          OffscreenCanvas.t_of_js x6091
    and t_to_js : t -> Ojs.t =
      fun (x6087 : (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3) ->
        union3_to_js ImageBitmap.t_to_js ImageData.t_to_js
          OffscreenCanvas.t_to_js x6087
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6096 : Ojs.t) -> t_of_js x6096
    and t_0_to_js : t_0 -> Ojs.t = fun (x6095 : t) -> t_to_js x6095
  end
module GLint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6098 : Ojs.t) -> Ojs.float_of_js x6098
    and t_to_js : t -> Ojs.t = fun (x6097 : float) -> Ojs.float_to_js x6097
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6100 : Ojs.t) -> t_of_js x6100
    and t_0_to_js : t_0 -> Ojs.t = fun (x6099 : t) -> t_to_js x6099
  end
module Int32List =
  struct
    type t = (GLint.t list, Int32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x6105 : Ojs.t) ->
        union2_of_js
          (fun (x6106 : Ojs.t) -> Ojs.list_of_js GLint.t_of_js x6106)
          Int32Array.t_0_of_js x6105
    and t_to_js : t -> Ojs.t =
      fun (x6101 : (GLint.t list, Int32Array.t_0) union2) ->
        union2_to_js
          (fun (x6102 : GLint.t list) -> Ojs.list_to_js GLint.t_to_js x6102)
          Int32Array.t_0_to_js x6101
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6110 : Ojs.t) -> t_of_js x6110
    and t_0_to_js : t_0 -> Ojs.t = fun (x6109 : t) -> t_to_js x6109
  end
module GLsizeiptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6112 : Ojs.t) -> Ojs.float_of_js x6112
    and t_to_js : t -> Ojs.t = fun (x6111 : float) -> Ojs.float_to_js x6111
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6114 : Ojs.t) -> t_of_js x6114
    and t_0_to_js : t_0 -> Ojs.t = fun (x6113 : t) -> t_to_js x6113
  end
module GLboolean =
  struct
    type t = bool
    let rec t_of_js : Ojs.t -> t =
      fun (x6116 : Ojs.t) -> Ojs.bool_of_js x6116
    and t_to_js : t -> Ojs.t = fun (x6115 : bool) -> Ojs.bool_to_js x6115
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6118 : Ojs.t) -> t_of_js x6118
    and t_0_to_js : t_0 -> Ojs.t = fun (x6117 : t) -> t_to_js x6117
  end
module GLfloat =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6120 : Ojs.t) -> Ojs.float_of_js x6120
    and t_to_js : t -> Ojs.t = fun (x6119 : float) -> Ojs.float_to_js x6119
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6122 : Ojs.t) -> t_of_js x6122
    and t_0_to_js : t_0 -> Ojs.t = fun (x6121 : t) -> t_to_js x6121
  end
module Float32List =
  struct
    type t = (GLfloat.t list, Float32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x6127 : Ojs.t) ->
        union2_of_js
          (fun (x6128 : Ojs.t) -> Ojs.list_of_js GLfloat.t_of_js x6128)
          Float32Array.t_0_of_js x6127
    and t_to_js : t -> Ojs.t =
      fun (x6123 : (GLfloat.t list, Float32Array.t_0) union2) ->
        union2_to_js
          (fun (x6124 : GLfloat.t list) ->
             Ojs.list_to_js GLfloat.t_to_js x6124) Float32Array.t_0_to_js
          x6123
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6132 : Ojs.t) -> t_of_js x6132
    and t_0_to_js : t_0 -> Ojs.t = fun (x6131 : t) -> t_to_js x6131
  end
module GLsizei =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6134 : Ojs.t) -> Ojs.float_of_js x6134
    and t_to_js : t -> Ojs.t = fun (x6133 : float) -> Ojs.float_to_js x6133
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6136 : Ojs.t) -> t_of_js x6136
    and t_0_to_js : t_0 -> Ojs.t = fun (x6135 : t) -> t_to_js x6135
  end
module GLintptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6138 : Ojs.t) -> Ojs.float_of_js x6138
    and t_to_js : t -> Ojs.t = fun (x6137 : float) -> Ojs.float_to_js x6137
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6140 : Ojs.t) -> t_of_js x6140
    and t_0_to_js : t_0 -> Ojs.t = fun (x6139 : t) -> t_to_js x6139
  end
module GLenum =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6142 : Ojs.t) -> Ojs.float_of_js x6142
    and t_to_js : t -> Ojs.t = fun (x6141 : float) -> Ojs.float_to_js x6141
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6144 : Ojs.t) -> t_of_js x6144
    and t_0_to_js : t_0 -> Ojs.t = fun (x6143 : t) -> t_to_js x6143
  end
module WebGLRenderingContextOverloads =
  struct
    type t = [ `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6146 : Ojs.t) -> t_of_js x6146
    and t_0_to_js : t_0 -> Ojs.t = fun (x6145 : t) -> t_to_js x6145
    type tags = [ `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6149 : Ojs.t) -> intf_of_js __tags_of_js x6149
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6147 : __tags intf) -> intf_to_js __tags_to_js x6147
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6155 : 'tags this) ->
        fun ~location:(x6151 : WebGLUniformLocation.t option) ->
          fun ~v:(x6153 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6155) "uniform1fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6151);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6153)|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6161 : 'tags this) ->
        fun ~location:(x6157 : WebGLUniformLocation.t option) ->
          fun ~v:(x6159 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6161) "uniform1iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6157);(
                   Iterable.t_1_to_js GLint.t_to_js x6159)|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6167 : 'tags this) ->
        fun ~location:(x6163 : WebGLUniformLocation.t option) ->
          fun ~v:(x6165 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6167) "uniform2fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6163);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6165)|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6173 : 'tags this) ->
        fun ~location:(x6169 : WebGLUniformLocation.t option) ->
          fun ~v:(x6171 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6173) "uniform2iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6169);(
                   Iterable.t_1_to_js GLint.t_to_js x6171)|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6179 : 'tags this) ->
        fun ~location:(x6175 : WebGLUniformLocation.t option) ->
          fun ~v:(x6177 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6179) "uniform3fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6175);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6177)|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6185 : 'tags this) ->
        fun ~location:(x6181 : WebGLUniformLocation.t option) ->
          fun ~v:(x6183 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6185) "uniform3iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6181);(
                   Iterable.t_1_to_js GLint.t_to_js x6183)|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6191 : 'tags this) ->
        fun ~location:(x6187 : WebGLUniformLocation.t option) ->
          fun ~v:(x6189 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6191) "uniform4fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6187);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6189)|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6197 : 'tags this) ->
        fun ~location:(x6193 : WebGLUniformLocation.t option) ->
          fun ~v:(x6195 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6197) "uniform4iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6193);(
                   Iterable.t_1_to_js GLint.t_to_js x6195)|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6204 : 'tags this) ->
        fun ~location:(x6199 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6201 : GLboolean.t) ->
            fun ~value:(x6202 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6204) "uniformMatrix2fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6199);(
                     GLboolean.t_to_js x6201);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6202)|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6211 : 'tags this) ->
        fun ~location:(x6206 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6208 : GLboolean.t) ->
            fun ~value:(x6209 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6211) "uniformMatrix3fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6206);(
                     GLboolean.t_to_js x6208);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6209)|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6218 : 'tags this) ->
        fun ~location:(x6213 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6215 : GLboolean.t) ->
            fun ~value:(x6216 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6218) "uniformMatrix4fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6213);(
                     GLboolean.t_to_js x6215);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6216)|])
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x6223 : 'tags this) ->
        fun ~target:(x6220 : GLenum.t) ->
          fun ~size:(x6221 : GLsizeiptr.t) ->
            fun ~usage:(x6222 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6223) "bufferData"
                   [|(GLenum.t_to_js x6220);(GLsizeiptr.t_to_js x6221);(
                     GLenum.t_to_js x6222)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          data:BufferSource.t option -> usage:GLenum.t -> unit)
      =
      fun (x6229 : 'tags this) ->
        fun ~target:(x6225 : GLenum.t) ->
          fun ~data:(x6226 : BufferSource.t option) ->
            fun ~usage:(x6228 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6229) "bufferData"
                   [|(GLenum.t_to_js x6225);(Ojs.option_to_js
                                               BufferSource.t_to_js x6226);(
                     GLenum.t_to_js x6228)|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t -> offset:GLintptr.t -> data:BufferSource.t -> unit)
      =
      fun (x6234 : 'tags this) ->
        fun ~target:(x6231 : GLenum.t) ->
          fun ~offset:(x6232 : GLintptr.t) ->
            fun ~data:(x6233 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6234) "bufferSubData"
                   [|(GLenum.t_to_js x6231);(GLintptr.t_to_js x6232);(
                     BufferSource.t_to_js x6233)|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x6243 : 'tags this) ->
        fun ~target:(x6236 : GLenum.t) ->
          fun ~level:(x6237 : GLint.t) ->
            fun ~internalformat:(x6238 : GLenum.t) ->
              fun ~width:(x6239 : GLsizei.t) ->
                fun ~height:(x6240 : GLsizei.t) ->
                  fun ~border:(x6241 : GLint.t) ->
                    fun ~data:(x6242 : ArrayBufferView.t_0) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6243)
                           "compressedTexImage2D"
                           [|(GLenum.t_to_js x6236);(GLint.t_to_js x6237);(
                             GLenum.t_to_js x6238);(GLsizei.t_to_js x6239);(
                             GLsizei.t_to_js x6240);(GLint.t_to_js x6241);(
                             ArrayBufferView.t_0_to_js x6242)|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x6253 : 'tags this) ->
        fun ~target:(x6245 : GLenum.t) ->
          fun ~level:(x6246 : GLint.t) ->
            fun ~xoffset:(x6247 : GLint.t) ->
              fun ~yoffset:(x6248 : GLint.t) ->
                fun ~width:(x6249 : GLsizei.t) ->
                  fun ~height:(x6250 : GLsizei.t) ->
                    fun ~format:(x6251 : GLenum.t) ->
                      fun ~data:(x6252 : ArrayBufferView.t_0) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x6253)
                             "compressedTexSubImage2D"
                             [|(GLenum.t_to_js x6245);(GLint.t_to_js x6246);(
                               GLint.t_to_js x6247);(GLint.t_to_js x6248);(
                               GLsizei.t_to_js x6249);(GLsizei.t_to_js x6250);(
                               GLenum.t_to_js x6251);(ArrayBufferView.t_0_to_js
                                                        x6252)|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6263 : 'tags this) ->
        fun ~x:(x6255 : GLint.t) ->
          fun ~y:(x6256 : GLint.t) ->
            fun ~width:(x6257 : GLsizei.t) ->
              fun ~height:(x6258 : GLsizei.t) ->
                fun ~format:(x6259 : GLenum.t) ->
                  fun ~type_:(x6260 : GLenum.t) ->
                    fun ~pixels:(x6261 : ArrayBufferView.t_0 option) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6263) "readPixels"
                           [|(GLint.t_to_js x6255);(GLint.t_to_js x6256);(
                             GLsizei.t_to_js x6257);(GLsizei.t_to_js x6258);(
                             GLenum.t_to_js x6259);(GLenum.t_to_js x6260);(
                             Ojs.option_to_js ArrayBufferView.t_0_to_js x6261)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6275 : 'tags this) ->
        fun ~target:(x6265 : GLenum.t) ->
          fun ~level:(x6266 : GLint.t) ->
            fun ~internalformat:(x6267 : GLint.t) ->
              fun ~width:(x6268 : GLsizei.t) ->
                fun ~height:(x6269 : GLsizei.t) ->
                  fun ~border:(x6270 : GLint.t) ->
                    fun ~format:(x6271 : GLenum.t) ->
                      fun ~type_:(x6272 : GLenum.t) ->
                        fun ~pixels:(x6273 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x6275)
                               "texImage2D"
                               [|(GLenum.t_to_js x6265);(GLint.t_to_js x6266);(
                                 GLint.t_to_js x6267);(GLsizei.t_to_js x6268);(
                                 GLsizei.t_to_js x6269);(GLint.t_to_js x6270);(
                                 GLenum.t_to_js x6271);(GLenum.t_to_js x6272);(
                                 Ojs.option_to_js ArrayBufferView.t_0_to_js
                                   x6273)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x6283 : 'tags this) ->
        fun ~target:(x6277 : GLenum.t) ->
          fun ~level:(x6278 : GLint.t) ->
            fun ~internalformat:(x6279 : GLint.t) ->
              fun ~format:(x6280 : GLenum.t) ->
                fun ~type_:(x6281 : GLenum.t) ->
                  fun ~source:(x6282 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x6283) "texImage2D"
                         [|(GLenum.t_to_js x6277);(GLint.t_to_js x6278);(
                           GLint.t_to_js x6279);(GLenum.t_to_js x6280);(
                           GLenum.t_to_js x6281);(TexImageSource.t_to_js
                                                    x6282)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x6295 : 'tags this) ->
        fun ~target:(x6285 : GLenum.t) ->
          fun ~level:(x6286 : GLint.t) ->
            fun ~xoffset:(x6287 : GLint.t) ->
              fun ~yoffset:(x6288 : GLint.t) ->
                fun ~width:(x6289 : GLsizei.t) ->
                  fun ~height:(x6290 : GLsizei.t) ->
                    fun ~format:(x6291 : GLenum.t) ->
                      fun ~type_:(x6292 : GLenum.t) ->
                        fun ~pixels:(x6293 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x6295)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x6285);(GLint.t_to_js x6286);(
                                 GLint.t_to_js x6287);(GLint.t_to_js x6288);(
                                 GLsizei.t_to_js x6289);(GLsizei.t_to_js
                                                           x6290);(GLenum.t_to_js
                                                                    x6291);(
                                 GLenum.t_to_js x6292);(Ojs.option_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x6293)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x6304 : 'tags this) ->
        fun ~target:(x6297 : GLenum.t) ->
          fun ~level:(x6298 : GLint.t) ->
            fun ~xoffset:(x6299 : GLint.t) ->
              fun ~yoffset:(x6300 : GLint.t) ->
                fun ~format:(x6301 : GLenum.t) ->
                  fun ~type_:(x6302 : GLenum.t) ->
                    fun ~source:(x6303 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x6304)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x6297);(GLint.t_to_js x6298);(
                             GLint.t_to_js x6299);(GLint.t_to_js x6300);(
                             GLenum.t_to_js x6301);(GLenum.t_to_js x6302);(
                             TexImageSource.t_to_js x6303)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6309 : 'tags this) ->
        fun ~location:(x6306 : WebGLUniformLocation.t option) ->
          fun ~v:(x6308 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6309) "uniform1fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6306);(
                   Float32List.t_to_js x6308)|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6314 : 'tags this) ->
        fun ~location:(x6311 : WebGLUniformLocation.t option) ->
          fun ~v:(x6313 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6314) "uniform1iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6311);(
                   Int32List.t_to_js x6313)|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6319 : 'tags this) ->
        fun ~location:(x6316 : WebGLUniformLocation.t option) ->
          fun ~v:(x6318 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6319) "uniform2fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6316);(
                   Float32List.t_to_js x6318)|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6324 : 'tags this) ->
        fun ~location:(x6321 : WebGLUniformLocation.t option) ->
          fun ~v:(x6323 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6324) "uniform2iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6321);(
                   Int32List.t_to_js x6323)|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6329 : 'tags this) ->
        fun ~location:(x6326 : WebGLUniformLocation.t option) ->
          fun ~v:(x6328 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6329) "uniform3fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6326);(
                   Float32List.t_to_js x6328)|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6334 : 'tags this) ->
        fun ~location:(x6331 : WebGLUniformLocation.t option) ->
          fun ~v:(x6333 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6334) "uniform3iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6331);(
                   Int32List.t_to_js x6333)|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Float32List.t -> unit)
      =
      fun (x6339 : 'tags this) ->
        fun ~location:(x6336 : WebGLUniformLocation.t option) ->
          fun ~v:(x6338 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6339) "uniform4fv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6336);(
                   Float32List.t_to_js x6338)|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t option -> v:Int32List.t -> unit)
      =
      fun (x6344 : 'tags this) ->
        fun ~location:(x6341 : WebGLUniformLocation.t option) ->
          fun ~v:(x6343 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6344) "uniform4iv"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6341);(
                   Int32List.t_to_js x6343)|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6350 : 'tags this) ->
        fun ~location:(x6346 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6348 : GLboolean.t) ->
            fun ~value:(x6349 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6350) "uniformMatrix2fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6346);(
                     GLboolean.t_to_js x6348);(Float32List.t_to_js x6349)|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6356 : 'tags this) ->
        fun ~location:(x6352 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6354 : GLboolean.t) ->
            fun ~value:(x6355 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6356) "uniformMatrix3fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6352);(
                     GLboolean.t_to_js x6354);(Float32List.t_to_js x6355)|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6362 : 'tags this) ->
        fun ~location:(x6358 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x6360 : GLboolean.t) ->
            fun ~value:(x6361 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6362) "uniformMatrix4fv"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x6358);(
                     GLboolean.t_to_js x6360);(Float32List.t_to_js x6361)|])
    let cast_from = Obj.magic
  end
module WebGLShaderPrecisionFormat =
  struct
    type t = [ `WebGLShaderPrecisionFormat ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6365 : Ojs.t) -> t_of_js x6365
    and t_0_to_js : t_0 -> Ojs.t = fun (x6364 : t) -> t_to_js x6364
    type tags = [ `WebGLShaderPrecisionFormat ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6368 : Ojs.t) -> intf_of_js __tags_of_js x6368
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6366 : __tags intf) -> intf_to_js __tags_to_js x6366
    let (get_precision : 'tags this -> GLint.t) =
      fun (x6370 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6370) "precision")
    let (get_rangeMax : 'tags this -> GLint.t) =
      fun (x6372 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6372) "rangeMax")
    let (get_rangeMin : 'tags this -> GLint.t) =
      fun (x6374 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6374) "rangeMin")
    let (create :
      precision:GLint.t -> rangeMax:GLint.t -> rangeMin:GLint.t -> unit -> t)
      =
      fun ~precision:(x6376 : GLint.t) ->
        fun ~rangeMax:(x6377 : GLint.t) ->
          fun ~rangeMin:(x6378 : GLint.t) ->
            fun () ->
              let x6379 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6379 "precision" (GLint.t_to_js x6376);
              Ojs.set_prop_ascii x6379 "rangeMax" (GLint.t_to_js x6377);
              Ojs.set_prop_ascii x6379 "rangeMin" (GLint.t_to_js x6378);
              t_of_js x6379
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             [||])
  end
module WebGLRenderbuffer =
  struct
    type t = [ `WebGLRenderbuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6381 : Ojs.t) -> t_of_js x6381
    and t_0_to_js : t_0 -> Ojs.t = fun (x6380 : t) -> t_to_js x6380
    type tags = [ `WebGLRenderbuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6384 : Ojs.t) -> intf_of_js __tags_of_js x6384
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6382 : __tags intf) -> intf_to_js __tags_to_js x6382
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
             [||])
  end
module WebGLFramebuffer =
  struct
    type t = [ `WebGLFramebuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6387 : Ojs.t) -> t_of_js x6387
    and t_0_to_js : t_0 -> Ojs.t = fun (x6386 : t) -> t_to_js x6386
    type tags = [ `WebGLFramebuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6390 : Ojs.t) -> intf_of_js __tags_of_js x6390
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6388 : __tags intf) -> intf_to_js __tags_to_js x6388
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
             [||])
  end
module WebGLPowerPreference =
  struct
    type t =
      [ `L_s109_low_power  | `L_s57_default  | `L_s87_high_performance ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6393 : Ojs.t) ->
        let x6394 = x6393 in
        match Ojs.string_of_js x6394 with
        | "low-power" -> `L_s109_low_power
        | "default" -> `L_s57_default
        | "high-performance" -> `L_s87_high_performance
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x6392 :
          [ `L_s109_low_power  | `L_s57_default  | `L_s87_high_performance ])
        ->
        match x6392 with
        | `L_s109_low_power -> Ojs.string_to_js "low-power"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s87_high_performance -> Ojs.string_to_js "high-performance"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6396 : Ojs.t) -> t_of_js x6396
    and t_0_to_js : t_0 -> Ojs.t = fun (x6395 : t) -> t_to_js x6395
  end
module WebGLContextAttributes =
  struct
    type t = [ `WebGLContextAttributes ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6398 : Ojs.t) -> t_of_js x6398
    and t_0_to_js : t_0 -> Ojs.t = fun (x6397 : t) -> t_to_js x6397
    type tags = [ `WebGLContextAttributes ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextAttributes ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6401 : Ojs.t) -> intf_of_js __tags_of_js x6401
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6399 : __tags intf) -> intf_to_js __tags_to_js x6399
    let (get_alpha : 'tags this -> bool) =
      fun (x6403 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6403) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x6405 : 'tags this) ->
        fun (x6406 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6405) "alpha"
            (Ojs.bool_to_js x6406)
    let (get_antialias : 'tags this -> bool) =
      fun (x6408 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6408) "antialias")
    let (set_antialias : 'tags this -> bool -> unit) =
      fun (x6410 : 'tags this) ->
        fun (x6411 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6410) "antialias"
            (Ojs.bool_to_js x6411)
    let (get_depth : 'tags this -> bool) =
      fun (x6413 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6413) "depth")
    let (set_depth : 'tags this -> bool -> unit) =
      fun (x6415 : 'tags this) ->
        fun (x6416 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6415) "depth"
            (Ojs.bool_to_js x6416)
    let (get_desynchronized : 'tags this -> bool) =
      fun (x6418 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6418) "desynchronized")
    let (set_desynchronized : 'tags this -> bool -> unit) =
      fun (x6420 : 'tags this) ->
        fun (x6421 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6420) "desynchronized"
            (Ojs.bool_to_js x6421)
    let (get_failIfMajorPerformanceCaveat : 'tags this -> bool) =
      fun (x6423 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6423)
             "failIfMajorPerformanceCaveat")
    let (set_failIfMajorPerformanceCaveat : 'tags this -> bool -> unit) =
      fun (x6425 : 'tags this) ->
        fun (x6426 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6425)
            "failIfMajorPerformanceCaveat" (Ojs.bool_to_js x6426)
    let (get_powerPreference : 'tags this -> WebGLPowerPreference.t) =
      fun (x6428 : 'tags this) ->
        WebGLPowerPreference.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6428) "powerPreference")
    let (set_powerPreference : 'tags this -> WebGLPowerPreference.t -> unit)
      =
      fun (x6430 : 'tags this) ->
        fun (x6431 : WebGLPowerPreference.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6430) "powerPreference"
            (WebGLPowerPreference.t_to_js x6431)
    let (get_premultipliedAlpha : 'tags this -> bool) =
      fun (x6433 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6433)
             "premultipliedAlpha")
    let (set_premultipliedAlpha : 'tags this -> bool -> unit) =
      fun (x6435 : 'tags this) ->
        fun (x6436 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6435)
            "premultipliedAlpha" (Ojs.bool_to_js x6436)
    let (get_preserveDrawingBuffer : 'tags this -> bool) =
      fun (x6438 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6438)
             "preserveDrawingBuffer")
    let (set_preserveDrawingBuffer : 'tags this -> bool -> unit) =
      fun (x6440 : 'tags this) ->
        fun (x6441 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6440)
            "preserveDrawingBuffer" (Ojs.bool_to_js x6441)
    let (get_stencil : 'tags this -> bool) =
      fun (x6443 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6443) "stencil")
    let (set_stencil : 'tags this -> bool -> unit) =
      fun (x6445 : 'tags this) ->
        fun (x6446 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6445) "stencil"
            (Ojs.bool_to_js x6446)
    let (create :
      alpha:bool ->
        antialias:bool ->
          depth:bool ->
            desynchronized:bool ->
              failIfMajorPerformanceCaveat:bool ->
                powerPreference:WebGLPowerPreference.t ->
                  premultipliedAlpha:bool ->
                    preserveDrawingBuffer:bool -> stencil:bool -> unit -> t)
      =
      fun ~alpha:(x6448 : bool) ->
        fun ~antialias:(x6449 : bool) ->
          fun ~depth:(x6450 : bool) ->
            fun ~desynchronized:(x6451 : bool) ->
              fun ~failIfMajorPerformanceCaveat:(x6452 : bool) ->
                fun ~powerPreference:(x6453 : WebGLPowerPreference.t) ->
                  fun ~premultipliedAlpha:(x6454 : bool) ->
                    fun ~preserveDrawingBuffer:(x6455 : bool) ->
                      fun ~stencil:(x6456 : bool) ->
                        fun () ->
                          let x6457 = Ojs.empty_obj () in
                          Ojs.set_prop_ascii x6457 "alpha"
                            (Ojs.bool_to_js x6448);
                          Ojs.set_prop_ascii x6457 "antialias"
                            (Ojs.bool_to_js x6449);
                          Ojs.set_prop_ascii x6457 "depth"
                            (Ojs.bool_to_js x6450);
                          Ojs.set_prop_ascii x6457 "desynchronized"
                            (Ojs.bool_to_js x6451);
                          Ojs.set_prop_ascii x6457
                            "failIfMajorPerformanceCaveat"
                            (Ojs.bool_to_js x6452);
                          Ojs.set_prop_ascii x6457 "powerPreference"
                            (WebGLPowerPreference.t_to_js x6453);
                          Ojs.set_prop_ascii x6457 "premultipliedAlpha"
                            (Ojs.bool_to_js x6454);
                          Ojs.set_prop_ascii x6457 "preserveDrawingBuffer"
                            (Ojs.bool_to_js x6455);
                          Ojs.set_prop_ascii x6457 "stencil"
                            (Ojs.bool_to_js x6456);
                          t_of_js x6457
    let cast_from = Obj.magic
  end
module WebGLProgram =
  struct
    type t = [ `WebGLProgram ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6459 : Ojs.t) -> t_of_js x6459
    and t_0_to_js : t_0 -> Ojs.t = fun (x6458 : t) -> t_to_js x6458
    type tags = [ `WebGLProgram ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6462 : Ojs.t) -> intf_of_js __tags_of_js x6462
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6460 : __tags intf) -> intf_to_js __tags_to_js x6460
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLProgram") [||])
  end
module WebGLBuffer =
  struct
    type t = [ `WebGLBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6465 : Ojs.t) -> t_of_js x6465
    and t_0_to_js : t_0 -> Ojs.t = fun (x6464 : t) -> t_to_js x6464
    type tags = [ `WebGLBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6468 : Ojs.t) -> intf_of_js __tags_of_js x6468
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6466 : __tags intf) -> intf_to_js __tags_to_js x6466
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLBuffer") [||])
  end
module WebGLActiveInfo =
  struct
    type t = [ `WebGLActiveInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6471 : Ojs.t) -> t_of_js x6471
    and t_0_to_js : t_0 -> Ojs.t = fun (x6470 : t) -> t_to_js x6470
    type tags = [ `WebGLActiveInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6474 : Ojs.t) -> intf_of_js __tags_of_js x6474
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6472 : __tags intf) -> intf_to_js __tags_to_js x6472
    let (get_name : 'tags this -> string) =
      fun (x6476 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6476) "name")
    let (get_size : 'tags this -> GLint.t) =
      fun (x6478 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6478) "size")
    let (get_type : 'tags this -> GLenum.t) =
      fun (x6480 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6480) "type")
    let (create : name:string -> size:GLint.t -> type_:GLenum.t -> unit -> t)
      =
      fun ~name:(x6482 : string) ->
        fun ~size:(x6483 : GLint.t) ->
          fun ~type_:(x6484 : GLenum.t) ->
            fun () ->
              let x6485 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6485 "name" (Ojs.string_to_js x6482);
              Ojs.set_prop_ascii x6485 "size" (GLint.t_to_js x6483);
              Ojs.set_prop_ascii x6485 "type" (GLenum.t_to_js x6484);
              t_of_js x6485
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") [||])
  end
module WEBGL_lose_context =
  struct
    type t = [ `WEBGL_lose_context ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6487 : Ojs.t) -> t_of_js x6487
    and t_0_to_js : t_0 -> Ojs.t = fun (x6486 : t) -> t_to_js x6486
    type tags = [ `WEBGL_lose_context ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6490 : Ojs.t) -> intf_of_js __tags_of_js x6490
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6488 : __tags intf) -> intf_to_js __tags_to_js x6488
    let (loseContext : 'tags this -> unit) =
      fun (x6492 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6492) "loseContext" [||])
    let (restoreContext : 'tags this -> unit) =
      fun (x6494 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6494) "restoreContext" [||])
    let cast_from = Obj.magic
  end
module WEBGL_draw_buffers =
  struct
    type t = [ `WEBGL_draw_buffers ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6497 : Ojs.t) -> t_of_js x6497
    and t_0_to_js : t_0 -> Ojs.t = fun (x6496 : t) -> t_to_js x6496
    type tags = [ `WEBGL_draw_buffers ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6500 : Ojs.t) -> intf_of_js __tags_of_js x6500
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6498 : __tags intf) -> intf_to_js __tags_to_js x6498
    let (drawBuffersWEBGL :
      'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x6504 : 'tags this) ->
        fun ~buffers:(x6502 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6504) "drawBuffersWEBGL"
               [|(Iterable.t_1_to_js GLenum.t_to_js x6502)|])
    let (drawBuffersWEBGL' : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x6508 : 'tags this) ->
        fun ~buffers:(x6506 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6508) "drawBuffersWEBGL"
               [|(Ojs.list_to_js GLenum.t_to_js x6506)|])
    let (get_COLOR_ATTACHMENT0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6510 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6510)
             "COLOR_ATTACHMENT0_WEBGL")
    let (get_COLOR_ATTACHMENT10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6512 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6512)
             "COLOR_ATTACHMENT10_WEBGL")
    let (get_COLOR_ATTACHMENT11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6514 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6514)
             "COLOR_ATTACHMENT11_WEBGL")
    let (get_COLOR_ATTACHMENT12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6516 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6516)
             "COLOR_ATTACHMENT12_WEBGL")
    let (get_COLOR_ATTACHMENT13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6518 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6518)
             "COLOR_ATTACHMENT13_WEBGL")
    let (get_COLOR_ATTACHMENT14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6520 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6520)
             "COLOR_ATTACHMENT14_WEBGL")
    let (get_COLOR_ATTACHMENT15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6522 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6522)
             "COLOR_ATTACHMENT15_WEBGL")
    let (get_COLOR_ATTACHMENT1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6524 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6524)
             "COLOR_ATTACHMENT1_WEBGL")
    let (get_COLOR_ATTACHMENT2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6526 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6526)
             "COLOR_ATTACHMENT2_WEBGL")
    let (get_COLOR_ATTACHMENT3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6528 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6528)
             "COLOR_ATTACHMENT3_WEBGL")
    let (get_COLOR_ATTACHMENT4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6530 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6530)
             "COLOR_ATTACHMENT4_WEBGL")
    let (get_COLOR_ATTACHMENT5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6532 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6532)
             "COLOR_ATTACHMENT5_WEBGL")
    let (get_COLOR_ATTACHMENT6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6534 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6534)
             "COLOR_ATTACHMENT6_WEBGL")
    let (get_COLOR_ATTACHMENT7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6536 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6536)
             "COLOR_ATTACHMENT7_WEBGL")
    let (get_COLOR_ATTACHMENT8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6538 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6538)
             "COLOR_ATTACHMENT8_WEBGL")
    let (get_COLOR_ATTACHMENT9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6540 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6540)
             "COLOR_ATTACHMENT9_WEBGL")
    let (get_DRAW_BUFFER0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6542 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6542)
             "DRAW_BUFFER0_WEBGL")
    let (get_DRAW_BUFFER10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6544 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6544)
             "DRAW_BUFFER10_WEBGL")
    let (get_DRAW_BUFFER11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6546 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6546)
             "DRAW_BUFFER11_WEBGL")
    let (get_DRAW_BUFFER12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6548 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6548)
             "DRAW_BUFFER12_WEBGL")
    let (get_DRAW_BUFFER13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6550 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6550)
             "DRAW_BUFFER13_WEBGL")
    let (get_DRAW_BUFFER14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6552 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6552)
             "DRAW_BUFFER14_WEBGL")
    let (get_DRAW_BUFFER15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6554 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6554)
             "DRAW_BUFFER15_WEBGL")
    let (get_DRAW_BUFFER1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6556 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6556)
             "DRAW_BUFFER1_WEBGL")
    let (get_DRAW_BUFFER2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6558 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6558)
             "DRAW_BUFFER2_WEBGL")
    let (get_DRAW_BUFFER3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6560 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6560)
             "DRAW_BUFFER3_WEBGL")
    let (get_DRAW_BUFFER4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6562 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6562)
             "DRAW_BUFFER4_WEBGL")
    let (get_DRAW_BUFFER5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6564 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6564)
             "DRAW_BUFFER5_WEBGL")
    let (get_DRAW_BUFFER6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6566 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6566)
             "DRAW_BUFFER6_WEBGL")
    let (get_DRAW_BUFFER7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6568 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6568)
             "DRAW_BUFFER7_WEBGL")
    let (get_DRAW_BUFFER8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6570 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6570)
             "DRAW_BUFFER8_WEBGL")
    let (get_DRAW_BUFFER9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6572 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6572)
             "DRAW_BUFFER9_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6574 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6574)
             "MAX_COLOR_ATTACHMENTS_WEBGL")
    let (get_MAX_DRAW_BUFFERS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6576 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6576)
             "MAX_DRAW_BUFFERS_WEBGL")
    let cast_from = Obj.magic
  end
module WEBGL_depth_texture =
  struct
    type t = [ `WEBGL_depth_texture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6579 : Ojs.t) -> t_of_js x6579
    and t_0_to_js : t_0 -> Ojs.t = fun (x6578 : t) -> t_to_js x6578
    type tags = [ `WEBGL_depth_texture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6582 : Ojs.t) -> intf_of_js __tags_of_js x6582
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6580 : __tags intf) -> intf_to_js __tags_to_js x6580
    let (get_UNSIGNED_INT_24_8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6584 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6584)
             "UNSIGNED_INT_24_8_WEBGL")
    let (create : unsigned_int_24_8_webgl:GLenum.t -> unit -> t) =
      fun ~unsigned_int_24_8_webgl:(x6586 : GLenum.t) ->
        fun () ->
          let x6587 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6587 "UNSIGNED_INT_24_8_WEBGL"
            (GLenum.t_to_js x6586);
          t_of_js x6587
    let cast_from = Obj.magic
  end
module WebGLShader =
  struct
    type t = [ `WebGLShader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6589 : Ojs.t) -> t_of_js x6589
    and t_0_to_js : t_0 -> Ojs.t = fun (x6588 : t) -> t_to_js x6588
    type tags = [ `WebGLShader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6592 : Ojs.t) -> intf_of_js __tags_of_js x6592
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6590 : __tags intf) -> intf_to_js __tags_to_js x6590
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLShader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLShader") [||])
  end
module WEBGL_debug_shaders =
  struct
    type t = [ `WEBGL_debug_shaders ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6595 : Ojs.t) -> t_of_js x6595
    and t_0_to_js : t_0 -> Ojs.t = fun (x6594 : t) -> t_to_js x6594
    type tags = [ `WEBGL_debug_shaders ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6598 : Ojs.t) -> intf_of_js __tags_of_js x6598
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6596 : __tags intf) -> intf_to_js __tags_to_js x6596
    let (getTranslatedShaderSource :
      'tags this -> shader:WebGLShader.t -> string) =
      fun (x6601 : 'tags this) ->
        fun ~shader:(x6600 : WebGLShader.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x6601)
               "getTranslatedShaderSource" [|(WebGLShader.t_to_js x6600)|])
    let cast_from = Obj.magic
  end
module WEBGL_debug_renderer_info =
  struct
    type t = [ `WEBGL_debug_renderer_info ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6604 : Ojs.t) -> t_of_js x6604
    and t_0_to_js : t_0 -> Ojs.t = fun (x6603 : t) -> t_to_js x6603
    type tags = [ `WEBGL_debug_renderer_info ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6607 : Ojs.t) -> intf_of_js __tags_of_js x6607
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6605 : __tags intf) -> intf_to_js __tags_to_js x6605
    let (get_UNMASKED_RENDERER_WEBGL : 'tags this -> GLenum.t) =
      fun (x6609 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6609)
             "UNMASKED_RENDERER_WEBGL")
    let (get_UNMASKED_VENDOR_WEBGL : 'tags this -> GLenum.t) =
      fun (x6611 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6611)
             "UNMASKED_VENDOR_WEBGL")
    let (create :
      unmasked_renderer_webgl:GLenum.t ->
        unmasked_vendor_webgl:GLenum.t -> unit -> t)
      =
      fun ~unmasked_renderer_webgl:(x6613 : GLenum.t) ->
        fun ~unmasked_vendor_webgl:(x6614 : GLenum.t) ->
          fun () ->
            let x6615 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6615 "UNMASKED_RENDERER_WEBGL"
              (GLenum.t_to_js x6613);
            Ojs.set_prop_ascii x6615 "UNMASKED_VENDOR_WEBGL"
              (GLenum.t_to_js x6614);
            t_of_js x6615
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc_srgb =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc_srgb ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6617 : Ojs.t) -> t_of_js x6617
    and t_0_to_js : t_0 -> Ojs.t = fun (x6616 : t) -> t_to_js x6616
    type tags = [ `WEBGL_compressed_texture_s3tc_srgb ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6620 : Ojs.t) -> intf_of_js __tags_of_js x6620
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6618 : __tags intf) -> intf_to_js __tags_to_js x6618
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6622 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6622)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6624 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6624)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6626 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6626)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_SRGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6628 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6628)
             "COMPRESSED_SRGB_S3TC_DXT1_EXT")
    let (create :
      compressed_srgb_alpha_s3tc_dxt1_ext:GLenum.t ->
        compressed_srgb_alpha_s3tc_dxt3_ext:GLenum.t ->
          compressed_srgb_alpha_s3tc_dxt5_ext:GLenum.t ->
            compressed_srgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_srgb_alpha_s3tc_dxt1_ext:(x6630 : GLenum.t) ->
        fun ~compressed_srgb_alpha_s3tc_dxt3_ext:(x6631 : GLenum.t) ->
          fun ~compressed_srgb_alpha_s3tc_dxt5_ext:(x6632 : GLenum.t) ->
            fun ~compressed_srgb_s3tc_dxt1_ext:(x6633 : GLenum.t) ->
              fun () ->
                let x6634 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6634
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6630);
                Ojs.set_prop_ascii x6634
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6631);
                Ojs.set_prop_ascii x6634
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6632);
                Ojs.set_prop_ascii x6634 "COMPRESSED_SRGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6633);
                t_of_js x6634
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6636 : Ojs.t) -> t_of_js x6636
    and t_0_to_js : t_0 -> Ojs.t = fun (x6635 : t) -> t_to_js x6635
    type tags = [ `WEBGL_compressed_texture_s3tc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6639 : Ojs.t) -> intf_of_js __tags_of_js x6639
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6637 : __tags intf) -> intf_to_js __tags_to_js x6637
    let (get_COMPRESSED_RGBA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6641 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6641)
             "COMPRESSED_RGBA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6643 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6643)
             "COMPRESSED_RGBA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6645 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6645)
             "COMPRESSED_RGBA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_RGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6647 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6647)
             "COMPRESSED_RGB_S3TC_DXT1_EXT")
    let (create :
      compressed_rgba_s3tc_dxt1_ext:GLenum.t ->
        compressed_rgba_s3tc_dxt3_ext:GLenum.t ->
          compressed_rgba_s3tc_dxt5_ext:GLenum.t ->
            compressed_rgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_s3tc_dxt1_ext:(x6649 : GLenum.t) ->
        fun ~compressed_rgba_s3tc_dxt3_ext:(x6650 : GLenum.t) ->
          fun ~compressed_rgba_s3tc_dxt5_ext:(x6651 : GLenum.t) ->
            fun ~compressed_rgb_s3tc_dxt1_ext:(x6652 : GLenum.t) ->
              fun () ->
                let x6653 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6653 "COMPRESSED_RGBA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6649);
                Ojs.set_prop_ascii x6653 "COMPRESSED_RGBA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6650);
                Ojs.set_prop_ascii x6653 "COMPRESSED_RGBA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6651);
                Ojs.set_prop_ascii x6653 "COMPRESSED_RGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6652);
                t_of_js x6653
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_pvrtc =
  struct
    type t = [ `WEBGL_compressed_texture_pvrtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6655 : Ojs.t) -> t_of_js x6655
    and t_0_to_js : t_0 -> Ojs.t = fun (x6654 : t) -> t_to_js x6654
    type tags = [ `WEBGL_compressed_texture_pvrtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6658 : Ojs.t) -> intf_of_js __tags_of_js x6658
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6656 : __tags intf) -> intf_to_js __tags_to_js x6656
    let (get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6660 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6660)
             "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6662 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6662)
             "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6664 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6664)
             "COMPRESSED_RGB_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6666 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6666)
             "COMPRESSED_RGB_PVRTC_4BPPV1_IMG")
    let (create :
      compressed_rgba_pvrtc_2bppv1_img:GLenum.t ->
        compressed_rgba_pvrtc_4bppv1_img:GLenum.t ->
          compressed_rgb_pvrtc_2bppv1_img:GLenum.t ->
            compressed_rgb_pvrtc_4bppv1_img:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_pvrtc_2bppv1_img:(x6668 : GLenum.t) ->
        fun ~compressed_rgba_pvrtc_4bppv1_img:(x6669 : GLenum.t) ->
          fun ~compressed_rgb_pvrtc_2bppv1_img:(x6670 : GLenum.t) ->
            fun ~compressed_rgb_pvrtc_4bppv1_img:(x6671 : GLenum.t) ->
              fun () ->
                let x6672 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6672 "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6668);
                Ojs.set_prop_ascii x6672 "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6669);
                Ojs.set_prop_ascii x6672 "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6670);
                Ojs.set_prop_ascii x6672 "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6671);
                t_of_js x6672
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc1 =
  struct
    type t = [ `WEBGL_compressed_texture_etc1 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6674 : Ojs.t) -> t_of_js x6674
    and t_0_to_js : t_0 -> Ojs.t = fun (x6673 : t) -> t_to_js x6673
    type tags = [ `WEBGL_compressed_texture_etc1 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6677 : Ojs.t) -> intf_of_js __tags_of_js x6677
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6675 : __tags intf) -> intf_to_js __tags_to_js x6675
    let (get_COMPRESSED_RGB_ETC1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6679 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6679)
             "COMPRESSED_RGB_ETC1_WEBGL")
    let (create : compressed_rgb_etc1_webgl:GLenum.t -> unit -> t) =
      fun ~compressed_rgb_etc1_webgl:(x6681 : GLenum.t) ->
        fun () ->
          let x6682 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6682 "COMPRESSED_RGB_ETC1_WEBGL"
            (GLenum.t_to_js x6681);
          t_of_js x6682
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc =
  struct
    type t = [ `WEBGL_compressed_texture_etc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6684 : Ojs.t) -> t_of_js x6684
    and t_0_to_js : t_0 -> Ojs.t = fun (x6683 : t) -> t_to_js x6683
    type tags = [ `WEBGL_compressed_texture_etc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6687 : Ojs.t) -> intf_of_js __tags_of_js x6687
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6685 : __tags intf) -> intf_to_js __tags_to_js x6685
    let (get_COMPRESSED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6689 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6689)
             "COMPRESSED_R11_EAC")
    let (get_COMPRESSED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6691 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6691)
             "COMPRESSED_RG11_EAC")
    let (get_COMPRESSED_RGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6693 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6693)
             "COMPRESSED_RGB8_ETC2")
    let (get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6695 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6695)
             "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (get_COMPRESSED_RGBA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6697 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6697)
             "COMPRESSED_RGBA8_ETC2_EAC")
    let (get_COMPRESSED_SIGNED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6699 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6699)
             "COMPRESSED_SIGNED_R11_EAC")
    let (get_COMPRESSED_SIGNED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6701 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6701)
             "COMPRESSED_SIGNED_RG11_EAC")
    let (get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6703 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6703)
             "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")
    let (get_COMPRESSED_SRGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6705 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6705)
             "COMPRESSED_SRGB8_ETC2")
    let (get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6707 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6707)
             "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (create :
      compressed_r11_eac:GLenum.t ->
        compressed_rg11_eac:GLenum.t ->
          compressed_rgb8_etc2:GLenum.t ->
            compressed_rgb8_punchthrough_alpha1_etc2:GLenum.t ->
              compressed_rgba8_etc2_eac:GLenum.t ->
                compressed_signed_r11_eac:GLenum.t ->
                  compressed_signed_rg11_eac:GLenum.t ->
                    compressed_srgb8_alpha8_etc2_eac:GLenum.t ->
                      compressed_srgb8_etc2:GLenum.t ->
                        compressed_srgb8_punchthrough_alpha1_etc2:GLenum.t ->
                          unit -> t)
      =
      fun ~compressed_r11_eac:(x6709 : GLenum.t) ->
        fun ~compressed_rg11_eac:(x6710 : GLenum.t) ->
          fun ~compressed_rgb8_etc2:(x6711 : GLenum.t) ->
            fun ~compressed_rgb8_punchthrough_alpha1_etc2:(x6712 : GLenum.t)
              ->
              fun ~compressed_rgba8_etc2_eac:(x6713 : GLenum.t) ->
                fun ~compressed_signed_r11_eac:(x6714 : GLenum.t) ->
                  fun ~compressed_signed_rg11_eac:(x6715 : GLenum.t) ->
                    fun ~compressed_srgb8_alpha8_etc2_eac:(x6716 : GLenum.t)
                      ->
                      fun ~compressed_srgb8_etc2:(x6717 : GLenum.t) ->
                        fun
                          ~compressed_srgb8_punchthrough_alpha1_etc2:
                          (x6718 : GLenum.t) ->
                          fun () ->
                            let x6719 = Ojs.empty_obj () in
                            Ojs.set_prop_ascii x6719 "COMPRESSED_R11_EAC"
                              (GLenum.t_to_js x6709);
                            Ojs.set_prop_ascii x6719 "COMPRESSED_RG11_EAC"
                              (GLenum.t_to_js x6710);
                            Ojs.set_prop_ascii x6719 "COMPRESSED_RGB8_ETC2"
                              (GLenum.t_to_js x6711);
                            Ojs.set_prop_ascii x6719
                              "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6712);
                            Ojs.set_prop_ascii x6719
                              "COMPRESSED_RGBA8_ETC2_EAC"
                              (GLenum.t_to_js x6713);
                            Ojs.set_prop_ascii x6719
                              "COMPRESSED_SIGNED_R11_EAC"
                              (GLenum.t_to_js x6714);
                            Ojs.set_prop_ascii x6719
                              "COMPRESSED_SIGNED_RG11_EAC"
                              (GLenum.t_to_js x6715);
                            Ojs.set_prop_ascii x6719
                              "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"
                              (GLenum.t_to_js x6716);
                            Ojs.set_prop_ascii x6719 "COMPRESSED_SRGB8_ETC2"
                              (GLenum.t_to_js x6717);
                            Ojs.set_prop_ascii x6719
                              "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6718);
                            t_of_js x6719
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_astc =
  struct
    type t = [ `WEBGL_compressed_texture_astc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6721 : Ojs.t) -> t_of_js x6721
    and t_0_to_js : t_0 -> Ojs.t = fun (x6720 : t) -> t_to_js x6720
    type tags = [ `WEBGL_compressed_texture_astc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6724 : Ojs.t) -> intf_of_js __tags_of_js x6724
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6722 : __tags intf) -> intf_to_js __tags_to_js x6722
    let (getSupportedProfiles : 'tags this -> string list) =
      fun (x6726 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6726) "getSupportedProfiles" [||])
    let (get_COMPRESSED_RGBA_ASTC_10x10_KHR : 'tags this -> GLenum.t) =
      fun (x6729 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6729)
             "COMPRESSED_RGBA_ASTC_10x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x5_KHR : 'tags this -> GLenum.t) =
      fun (x6731 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6731)
             "COMPRESSED_RGBA_ASTC_10x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x6_KHR : 'tags this -> GLenum.t) =
      fun (x6733 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6733)
             "COMPRESSED_RGBA_ASTC_10x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x8_KHR : 'tags this -> GLenum.t) =
      fun (x6735 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6735)
             "COMPRESSED_RGBA_ASTC_10x8_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x10_KHR : 'tags this -> GLenum.t) =
      fun (x6737 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6737)
             "COMPRESSED_RGBA_ASTC_12x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x12_KHR : 'tags this -> GLenum.t) =
      fun (x6739 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6739)
             "COMPRESSED_RGBA_ASTC_12x12_KHR")
    let (get_COMPRESSED_RGBA_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x6741 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6741)
             "COMPRESSED_RGBA_ASTC_4x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x6743 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6743)
             "COMPRESSED_RGBA_ASTC_5x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x6745 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6745)
             "COMPRESSED_RGBA_ASTC_5x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x6747 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6747)
             "COMPRESSED_RGBA_ASTC_6x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x6749 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6749)
             "COMPRESSED_RGBA_ASTC_6x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x6751 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6751)
             "COMPRESSED_RGBA_ASTC_8x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x6753 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6753)
             "COMPRESSED_RGBA_ASTC_8x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x6755 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6755)
             "COMPRESSED_RGBA_ASTC_8x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x6757 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6757)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : 'tags this -> GLenum.t)
      =
      fun (x6759 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6759)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : 'tags this -> GLenum.t)
      =
      fun (x6761 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6761)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : 'tags this -> GLenum.t)
      =
      fun (x6763 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6763)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x6765 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6765)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : 'tags this -> GLenum.t)
      =
      fun (x6767 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6767)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x6769 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6769)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x6771 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6771)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x6773 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6773)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x6775 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6775)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x6777 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6777)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x6779 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6779)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x6781 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6781)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x6783 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6783)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")
    let cast_from = Obj.magic
  end
module WEBGL_color_buffer_float =
  struct
    type t = [ `WEBGL_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6786 : Ojs.t) -> t_of_js x6786
    and t_0_to_js : t_0 -> Ojs.t = fun (x6785 : t) -> t_to_js x6785
    type tags = [ `WEBGL_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6789 : Ojs.t) -> intf_of_js __tags_of_js x6789
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6787 : __tags intf) -> intf_to_js __tags_to_js x6787
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x6791 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6791)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGBA32F_EXT : 'tags this -> GLenum.t) =
      fun (x6793 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6793) "RGBA32F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x6795 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6795)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgba32f_ext:GLenum.t -> unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x6797 : GLenum.t) ->
        fun ~rgba32f_ext:(x6798 : GLenum.t) ->
          fun ~unsigned_normalized_ext:(x6799 : GLenum.t) ->
            fun () ->
              let x6800 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6800
                "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                (GLenum.t_to_js x6797);
              Ojs.set_prop_ascii x6800 "RGBA32F_EXT" (GLenum.t_to_js x6798);
              Ojs.set_prop_ascii x6800 "UNSIGNED_NORMALIZED_EXT"
                (GLenum.t_to_js x6799);
              t_of_js x6800
    let cast_from = Obj.magic
  end
module WebGLTexture =
  struct
    type t = [ `WebGLTexture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6802 : Ojs.t) -> t_of_js x6802
    and t_0_to_js : t_0 -> Ojs.t = fun (x6801 : t) -> t_to_js x6801
    type tags = [ `WebGLTexture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6805 : Ojs.t) -> intf_of_js __tags_of_js x6805
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6803 : __tags intf) -> intf_to_js __tags_to_js x6803
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLTexture") [||])
  end
module OVR_multiview2 =
  struct
    type t = [ `OVR_multiview2 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6808 : Ojs.t) -> t_of_js x6808
    and t_0_to_js : t_0 -> Ojs.t = fun (x6807 : t) -> t_to_js x6807
    type tags = [ `OVR_multiview2 ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6811 : Ojs.t) -> intf_of_js __tags_of_js x6811
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6809 : __tags intf) -> intf_to_js __tags_to_js x6809
    let (framebufferTextureMultiviewOVR :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t option ->
              level:GLint.t ->
                baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit)
      =
      fun (x6820 : 'tags this) ->
        fun ~target:(x6813 : GLenum.t) ->
          fun ~attachment:(x6814 : GLenum.t) ->
            fun ~texture:(x6815 : WebGLTexture.t option) ->
              fun ~level:(x6817 : GLint.t) ->
                fun ~baseViewIndex:(x6818 : GLint.t) ->
                  fun ~numViews:(x6819 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x6820)
                         "framebufferTextureMultiviewOVR"
                         [|(GLenum.t_to_js x6813);(GLenum.t_to_js x6814);(
                           Ojs.option_to_js WebGLTexture.t_to_js x6815);(
                           GLint.t_to_js x6817);(GLint.t_to_js x6818);(
                           GLsizei.t_to_js x6819)|])
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :
      'tags this -> GLenum.t) =
      fun (x6822 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6822)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :
      'tags this -> GLenum.t) =
      fun (x6824 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6824)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR")
    let (get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :
      'tags this -> GLenum.t) =
      fun (x6826 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6826)
             "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR")
    let (get_MAX_VIEWS_OVR : 'tags this -> GLenum.t) =
      fun (x6828 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6828) "MAX_VIEWS_OVR")
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObjectOES =
  struct
    type t = [ `WebGLVertexArrayObjectOES ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6831 : Ojs.t) -> t_of_js x6831
    and t_0_to_js : t_0 -> Ojs.t = fun (x6830 : t) -> t_to_js x6830
    type tags = [ `WebGLVertexArrayObjectOES ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6834 : Ojs.t) -> intf_of_js __tags_of_js x6834
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6832 : __tags intf) -> intf_to_js __tags_to_js x6832
    let cast_from = Obj.magic
  end
module OES_vertex_array_object =
  struct
    type t = [ `OES_vertex_array_object ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6837 : Ojs.t) -> t_of_js x6837
    and t_0_to_js : t_0 -> Ojs.t = fun (x6836 : t) -> t_to_js x6836
    type tags = [ `OES_vertex_array_object ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_vertex_array_object ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6840 : Ojs.t) -> intf_of_js __tags_of_js x6840
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6838 : __tags intf) -> intf_to_js __tags_to_js x6838
    let (bindVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit) =
      fun (x6844 : 'tags this) ->
        fun ~arrayObject:(x6842 : WebGLVertexArrayObjectOES.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6844) "bindVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x6842)|])
    let (createVertexArrayOES :
      'tags this -> WebGLVertexArrayObjectOES.t option) =
      fun (x6846 : 'tags this) ->
        Ojs.option_of_js WebGLVertexArrayObjectOES.t_of_js
          (Ojs.call (this_to_js Obj.magic x6846) "createVertexArrayOES" [||])
    let (deleteVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t option -> unit) =
      fun (x6851 : 'tags this) ->
        fun ~arrayObject:(x6849 : WebGLVertexArrayObjectOES.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6851) "deleteVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x6849)|])
    let (isVertexArrayOES :
      'tags this ->
        arrayObject:WebGLVertexArrayObjectOES.t option -> GLboolean.t)
      =
      fun (x6855 : 'tags this) ->
        fun ~arrayObject:(x6853 : WebGLVertexArrayObjectOES.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6855) "isVertexArrayOES"
               [|(Ojs.option_to_js WebGLVertexArrayObjectOES.t_to_js x6853)|])
    let (get_VERTEX_ARRAY_BINDING_OES : 'tags this -> GLenum.t) =
      fun (x6857 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6857)
             "VERTEX_ARRAY_BINDING_OES")
    let cast_from = Obj.magic
  end
module OES_texture_half_float_linear =
  struct
    type t = [ `OES_texture_half_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6860 : Ojs.t) -> t_of_js x6860
    and t_0_to_js : t_0 -> Ojs.t = fun (x6859 : t) -> t_to_js x6859
    type tags = [ `OES_texture_half_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6863 : Ojs.t) -> intf_of_js __tags_of_js x6863
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6861 : __tags intf) -> intf_to_js __tags_to_js x6861
    let cast_from = Obj.magic
  end
module OES_texture_half_float =
  struct
    type t = [ `OES_texture_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6866 : Ojs.t) -> t_of_js x6866
    and t_0_to_js : t_0 -> Ojs.t = fun (x6865 : t) -> t_to_js x6865
    type tags = [ `OES_texture_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6869 : Ojs.t) -> intf_of_js __tags_of_js x6869
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6867 : __tags intf) -> intf_to_js __tags_to_js x6867
    let (get_HALF_FLOAT_OES : 'tags this -> GLenum.t) =
      fun (x6871 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6871) "HALF_FLOAT_OES")
    let (create : half_float_oes:GLenum.t -> unit -> t) =
      fun ~half_float_oes:(x6873 : GLenum.t) ->
        fun () ->
          let x6874 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6874 "HALF_FLOAT_OES" (GLenum.t_to_js x6873);
          t_of_js x6874
    let cast_from = Obj.magic
  end
module OES_texture_float_linear =
  struct
    type t = [ `OES_texture_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6876 : Ojs.t) -> t_of_js x6876
    and t_0_to_js : t_0 -> Ojs.t = fun (x6875 : t) -> t_to_js x6875
    type tags = [ `OES_texture_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6879 : Ojs.t) -> intf_of_js __tags_of_js x6879
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6877 : __tags intf) -> intf_to_js __tags_to_js x6877
    let cast_from = Obj.magic
  end
module OES_texture_float =
  struct
    type t = [ `OES_texture_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6882 : Ojs.t) -> t_of_js x6882
    and t_0_to_js : t_0 -> Ojs.t = fun (x6881 : t) -> t_to_js x6881
    type tags = [ `OES_texture_float ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6885 : Ojs.t) -> intf_of_js __tags_of_js x6885
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6883 : __tags intf) -> intf_to_js __tags_to_js x6883
    let cast_from = Obj.magic
  end
module OES_standard_derivatives =
  struct
    type t = [ `OES_standard_derivatives ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6888 : Ojs.t) -> t_of_js x6888
    and t_0_to_js : t_0 -> Ojs.t = fun (x6887 : t) -> t_to_js x6887
    type tags = [ `OES_standard_derivatives ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_standard_derivatives ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6891 : Ojs.t) -> intf_of_js __tags_of_js x6891
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6889 : __tags intf) -> intf_to_js __tags_to_js x6889
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES : 'tags this -> GLenum.t) =
      fun (x6893 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6893)
             "FRAGMENT_SHADER_DERIVATIVE_HINT_OES")
    let (create : fragment_shader_derivative_hint_oes:GLenum.t -> unit -> t)
      =
      fun ~fragment_shader_derivative_hint_oes:(x6895 : GLenum.t) ->
        fun () ->
          let x6896 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6896 "FRAGMENT_SHADER_DERIVATIVE_HINT_OES"
            (GLenum.t_to_js x6895);
          t_of_js x6896
    let cast_from = Obj.magic
  end
module OES_element_index_uint =
  struct
    type t = [ `OES_element_index_uint ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6898 : Ojs.t) -> t_of_js x6898
    and t_0_to_js : t_0 -> Ojs.t = fun (x6897 : t) -> t_to_js x6897
    type tags = [ `OES_element_index_uint ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_element_index_uint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6901 : Ojs.t) -> intf_of_js __tags_of_js x6901
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6899 : __tags intf) -> intf_to_js __tags_to_js x6899
    let cast_from = Obj.magic
  end
module KHR_parallel_shader_compile =
  struct
    type t = [ `KHR_parallel_shader_compile ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6904 : Ojs.t) -> t_of_js x6904
    and t_0_to_js : t_0 -> Ojs.t = fun (x6903 : t) -> t_to_js x6903
    type tags = [ `KHR_parallel_shader_compile ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6907 : Ojs.t) -> intf_of_js __tags_of_js x6907
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6905 : __tags intf) -> intf_to_js __tags_to_js x6905
    let (get_COMPLETION_STATUS_KHR : 'tags this -> GLenum.t) =
      fun (x6909 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6909)
             "COMPLETION_STATUS_KHR")
    let (create : completion_status_khr:GLenum.t -> unit -> t) =
      fun ~completion_status_khr:(x6911 : GLenum.t) ->
        fun () ->
          let x6912 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6912 "COMPLETION_STATUS_KHR"
            (GLenum.t_to_js x6911);
          t_of_js x6912
    let cast_from = Obj.magic
  end
module GLclampf =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6914 : Ojs.t) -> Ojs.float_of_js x6914
    and t_to_js : t -> Ojs.t = fun (x6913 : float) -> Ojs.float_to_js x6913
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6916 : Ojs.t) -> t_of_js x6916
    and t_0_to_js : t_0 -> Ojs.t = fun (x6915 : t) -> t_to_js x6915
  end
module GLbitfield =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6918 : Ojs.t) -> Ojs.float_of_js x6918
    and t_to_js : t -> Ojs.t = fun (x6917 : float) -> Ojs.float_to_js x6917
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6920 : Ojs.t) -> t_of_js x6920
    and t_0_to_js : t_0 -> Ojs.t = fun (x6919 : t) -> t_to_js x6919
  end
module EXT_texture_filter_anisotropic =
  struct
    type t = [ `EXT_texture_filter_anisotropic ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6922 : Ojs.t) -> t_of_js x6922
    and t_0_to_js : t_0 -> Ojs.t = fun (x6921 : t) -> t_to_js x6921
    type tags = [ `EXT_texture_filter_anisotropic ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6925 : Ojs.t) -> intf_of_js __tags_of_js x6925
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6923 : __tags intf) -> intf_to_js __tags_to_js x6923
    let (get_MAX_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x6927 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6927)
             "MAX_TEXTURE_MAX_ANISOTROPY_EXT")
    let (get_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x6929 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6929)
             "TEXTURE_MAX_ANISOTROPY_EXT")
    let (create :
      max_texture_max_anisotropy_ext:GLenum.t ->
        texture_max_anisotropy_ext:GLenum.t -> unit -> t)
      =
      fun ~max_texture_max_anisotropy_ext:(x6931 : GLenum.t) ->
        fun ~texture_max_anisotropy_ext:(x6932 : GLenum.t) ->
          fun () ->
            let x6933 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6933 "MAX_TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x6931);
            Ojs.set_prop_ascii x6933 "TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x6932);
            t_of_js x6933
    let cast_from = Obj.magic
  end
module EXT_shader_texture_lod =
  struct
    type t = [ `EXT_shader_texture_lod ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6935 : Ojs.t) -> t_of_js x6935
    and t_0_to_js : t_0 -> Ojs.t = fun (x6934 : t) -> t_to_js x6934
    type tags = [ `EXT_shader_texture_lod ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6938 : Ojs.t) -> intf_of_js __tags_of_js x6938
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6936 : __tags intf) -> intf_to_js __tags_to_js x6936
    let cast_from = Obj.magic
  end
module EXT_sRGB =
  struct
    type t = [ `EXT_sRGB ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6941 : Ojs.t) -> t_of_js x6941
    and t_0_to_js : t_0 -> Ojs.t = fun (x6940 : t) -> t_to_js x6940
    type tags = [ `EXT_sRGB ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6944 : Ojs.t) -> intf_of_js __tags_of_js x6944
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6942 : __tags intf) -> intf_to_js __tags_to_js x6942
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT :
      'tags this -> GLenum.t) =
      fun (x6946 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6946)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT")
    let (get_SRGB8_ALPHA8_EXT : 'tags this -> GLenum.t) =
      fun (x6948 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6948) "SRGB8_ALPHA8_EXT")
    let (get_SRGB_ALPHA_EXT : 'tags this -> GLenum.t) =
      fun (x6950 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6950) "SRGB_ALPHA_EXT")
    let (get_SRGB_EXT : 'tags this -> GLenum.t) =
      fun (x6952 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6952) "SRGB_EXT")
    let (create :
      framebuffer_attachment_color_encoding_ext:GLenum.t ->
        srgb8_alpha8_ext:GLenum.t ->
          srgb_alpha_ext:GLenum.t -> srgb_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_color_encoding_ext:(x6954 : GLenum.t) ->
        fun ~srgb8_alpha8_ext:(x6955 : GLenum.t) ->
          fun ~srgb_alpha_ext:(x6956 : GLenum.t) ->
            fun ~srgb_ext:(x6957 : GLenum.t) ->
              fun () ->
                let x6958 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6958
                  "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"
                  (GLenum.t_to_js x6954);
                Ojs.set_prop_ascii x6958 "SRGB8_ALPHA8_EXT"
                  (GLenum.t_to_js x6955);
                Ojs.set_prop_ascii x6958 "SRGB_ALPHA_EXT"
                  (GLenum.t_to_js x6956);
                Ojs.set_prop_ascii x6958 "SRGB_EXT" (GLenum.t_to_js x6957);
                t_of_js x6958
    let cast_from = Obj.magic
  end
module EXT_frag_depth =
  struct
    type t = [ `EXT_frag_depth ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6960 : Ojs.t) -> t_of_js x6960
    and t_0_to_js : t_0 -> Ojs.t = fun (x6959 : t) -> t_to_js x6959
    type tags = [ `EXT_frag_depth ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6963 : Ojs.t) -> intf_of_js __tags_of_js x6963
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6961 : __tags intf) -> intf_to_js __tags_to_js x6961
    let cast_from = Obj.magic
  end
module EXT_float_blend =
  struct
    type t = [ `EXT_float_blend ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6966 : Ojs.t) -> t_of_js x6966
    and t_0_to_js : t_0 -> Ojs.t = fun (x6965 : t) -> t_to_js x6965
    type tags = [ `EXT_float_blend ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6969 : Ojs.t) -> intf_of_js __tags_of_js x6969
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6967 : __tags intf) -> intf_to_js __tags_to_js x6967
    let cast_from = Obj.magic
  end
module EXT_color_buffer_half_float =
  struct
    type t = [ `EXT_color_buffer_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6972 : Ojs.t) -> t_of_js x6972
    and t_0_to_js : t_0 -> Ojs.t = fun (x6971 : t) -> t_to_js x6971
    type tags = [ `EXT_color_buffer_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6975 : Ojs.t) -> intf_of_js __tags_of_js x6975
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6973 : __tags intf) -> intf_to_js __tags_to_js x6973
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x6977 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6977)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGB16F_EXT : 'tags this -> GLenum.t) =
      fun (x6979 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6979) "RGB16F_EXT")
    let (get_RGBA16F_EXT : 'tags this -> GLenum.t) =
      fun (x6981 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6981) "RGBA16F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x6983 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6983)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgb16f_ext:GLenum.t ->
          rgba16f_ext:GLenum.t ->
            unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x6985 : GLenum.t) ->
        fun ~rgb16f_ext:(x6986 : GLenum.t) ->
          fun ~rgba16f_ext:(x6987 : GLenum.t) ->
            fun ~unsigned_normalized_ext:(x6988 : GLenum.t) ->
              fun () ->
                let x6989 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6989
                  "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                  (GLenum.t_to_js x6985);
                Ojs.set_prop_ascii x6989 "RGB16F_EXT" (GLenum.t_to_js x6986);
                Ojs.set_prop_ascii x6989 "RGBA16F_EXT" (GLenum.t_to_js x6987);
                Ojs.set_prop_ascii x6989 "UNSIGNED_NORMALIZED_EXT"
                  (GLenum.t_to_js x6988);
                t_of_js x6989
    let cast_from = Obj.magic
  end
module EXT_color_buffer_float =
  struct
    type t = [ `EXT_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6991 : Ojs.t) -> t_of_js x6991
    and t_0_to_js : t_0 -> Ojs.t = fun (x6990 : t) -> t_to_js x6990
    type tags = [ `EXT_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x6994 : Ojs.t) -> intf_of_js __tags_of_js x6994
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6992 : __tags intf) -> intf_to_js __tags_to_js x6992
    let cast_from = Obj.magic
  end
module EXT_blend_minmax =
  struct
    type t = [ `EXT_blend_minmax ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6997 : Ojs.t) -> t_of_js x6997
    and t_0_to_js : t_0 -> Ojs.t = fun (x6996 : t) -> t_to_js x6996
    type tags = [ `EXT_blend_minmax ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7000 : Ojs.t) -> intf_of_js __tags_of_js x7000
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x6998 : __tags intf) -> intf_to_js __tags_to_js x6998
    let (get_MAX_EXT : 'tags this -> GLenum.t) =
      fun (x7002 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7002) "MAX_EXT")
    let (get_MIN_EXT : 'tags this -> GLenum.t) =
      fun (x7004 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7004) "MIN_EXT")
    let (create : max_ext:GLenum.t -> min_ext:GLenum.t -> unit -> t) =
      fun ~max_ext:(x7006 : GLenum.t) ->
        fun ~min_ext:(x7007 : GLenum.t) ->
          fun () ->
            let x7008 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x7008 "MAX_EXT" (GLenum.t_to_js x7006);
            Ojs.set_prop_ascii x7008 "MIN_EXT" (GLenum.t_to_js x7007);
            t_of_js x7008
    let cast_from = Obj.magic
  end
module GLuint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x7010 : Ojs.t) -> Ojs.float_of_js x7010
    and t_to_js : t -> Ojs.t = fun (x7009 : float) -> Ojs.float_to_js x7009
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7012 : Ojs.t) -> t_of_js x7012
    and t_0_to_js : t_0 -> Ojs.t = fun (x7011 : t) -> t_to_js x7011
  end
module ANGLE_instanced_arrays =
  struct
    type t = [ `ANGLE_instanced_arrays ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7014 : Ojs.t) -> t_of_js x7014
    and t_0_to_js : t_0 -> Ojs.t = fun (x7013 : t) -> t_to_js x7013
    type tags = [ `ANGLE_instanced_arrays ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7017 : Ojs.t) -> intf_of_js __tags_of_js x7017
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7015 : __tags intf) -> intf_to_js __tags_to_js x7015
    let (drawArraysInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit)
      =
      fun (x7023 : 'tags this) ->
        fun ~mode:(x7019 : GLenum.t) ->
          fun ~first:(x7020 : GLint.t) ->
            fun ~count:(x7021 : GLsizei.t) ->
              fun ~primcount:(x7022 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7023)
                     "drawArraysInstancedANGLE"
                     [|(GLenum.t_to_js x7019);(GLint.t_to_js x7020);(
                       GLsizei.t_to_js x7021);(GLsizei.t_to_js x7022)|])
    let (drawElementsInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> primcount:GLsizei.t -> unit)
      =
      fun (x7030 : 'tags this) ->
        fun ~mode:(x7025 : GLenum.t) ->
          fun ~count:(x7026 : GLsizei.t) ->
            fun ~type_:(x7027 : GLenum.t) ->
              fun ~offset:(x7028 : GLintptr.t) ->
                fun ~primcount:(x7029 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7030)
                       "drawElementsInstancedANGLE"
                       [|(GLenum.t_to_js x7025);(GLsizei.t_to_js x7026);(
                         GLenum.t_to_js x7027);(GLintptr.t_to_js x7028);(
                         GLsizei.t_to_js x7029)|])
    let (vertexAttribDivisorANGLE :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x7034 : 'tags this) ->
        fun ~index:(x7032 : GLuint.t) ->
          fun ~divisor:(x7033 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7034)
                 "vertexAttribDivisorANGLE"
                 [|(GLuint.t_to_js x7032);(GLuint.t_to_js x7033)|])
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE : 'tags this -> GLenum.t) =
      fun (x7036 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7036)
             "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")
    let cast_from = Obj.magic
  end
module WebGLRenderingContextBase =
  struct
    type t = [ `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7039 : Ojs.t) -> t_of_js x7039
    and t_0_to_js : t_0 -> Ojs.t = fun (x7038 : t) -> t_to_js x7038
    type tags = [ `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x7042 : Ojs.t) -> intf_of_js __tags_of_js x7042
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x7040 : __tags intf) -> intf_to_js __tags_to_js x7040
    let (vertexAttrib1fv :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x7047 : 'tags this) ->
        fun ~index:(x7044 : GLuint.t) ->
          fun ~values:(x7045 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7047) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x7044);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x7045)|])
    let (vertexAttrib2fv :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x7052 : 'tags this) ->
        fun ~index:(x7049 : GLuint.t) ->
          fun ~values:(x7050 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7052) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x7049);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x7050)|])
    let (vertexAttrib3fv :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x7057 : 'tags this) ->
        fun ~index:(x7054 : GLuint.t) ->
          fun ~values:(x7055 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7057) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x7054);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x7055)|])
    let (vertexAttrib4fv :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x7062 : 'tags this) ->
        fun ~index:(x7059 : GLuint.t) ->
          fun ~values:(x7060 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7062) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x7059);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x7060)|])
    let (get_drawingBufferHeight : 'tags this -> GLsizei.t) =
      fun (x7064 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7064)
             "drawingBufferHeight")
    let (get_drawingBufferWidth : 'tags this -> GLsizei.t) =
      fun (x7066 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7066)
             "drawingBufferWidth")
    let (activeTexture : 'tags this -> texture:GLenum.t -> unit) =
      fun (x7069 : 'tags this) ->
        fun ~texture:(x7068 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7069) "activeTexture"
               [|(GLenum.t_to_js x7068)|])
    let (attachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x7073 : 'tags this) ->
        fun ~program:(x7071 : WebGLProgram.t) ->
          fun ~shader:(x7072 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7073) "attachShader"
                 [|(WebGLProgram.t_to_js x7071);(WebGLShader.t_to_js x7072)|])
    let (bindAttribLocation :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit)
      =
      fun (x7078 : 'tags this) ->
        fun ~program:(x7075 : WebGLProgram.t) ->
          fun ~index:(x7076 : GLuint.t) ->
            fun ~name:(x7077 : string) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7078) "bindAttribLocation"
                   [|(WebGLProgram.t_to_js x7075);(GLuint.t_to_js x7076);(
                     Ojs.string_to_js x7077)|])
    let (bindBuffer :
      'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t option -> unit) =
      fun (x7083 : 'tags this) ->
        fun ~target:(x7080 : GLenum.t) ->
          fun ~buffer:(x7081 : WebGLBuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7083) "bindBuffer"
                 [|(GLenum.t_to_js x7080);(Ojs.option_to_js
                                             WebGLBuffer.t_to_js x7081)|])
    let (bindFramebuffer :
      'tags this ->
        target:GLenum.t -> framebuffer:WebGLFramebuffer.t option -> unit)
      =
      fun (x7088 : 'tags this) ->
        fun ~target:(x7085 : GLenum.t) ->
          fun ~framebuffer:(x7086 : WebGLFramebuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7088) "bindFramebuffer"
                 [|(GLenum.t_to_js x7085);(Ojs.option_to_js
                                             WebGLFramebuffer.t_to_js x7086)|])
    let (bindRenderbuffer :
      'tags this ->
        target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t option -> unit)
      =
      fun (x7093 : 'tags this) ->
        fun ~target:(x7090 : GLenum.t) ->
          fun ~renderbuffer:(x7091 : WebGLRenderbuffer.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7093) "bindRenderbuffer"
                 [|(GLenum.t_to_js x7090);(Ojs.option_to_js
                                             WebGLRenderbuffer.t_to_js x7091)|])
    let (bindTexture :
      'tags this -> target:GLenum.t -> texture:WebGLTexture.t option -> unit)
      =
      fun (x7098 : 'tags this) ->
        fun ~target:(x7095 : GLenum.t) ->
          fun ~texture:(x7096 : WebGLTexture.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7098) "bindTexture"
                 [|(GLenum.t_to_js x7095);(Ojs.option_to_js
                                             WebGLTexture.t_to_js x7096)|])
    let (blendColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x7104 : 'tags this) ->
        fun ~red:(x7100 : GLclampf.t) ->
          fun ~green:(x7101 : GLclampf.t) ->
            fun ~blue:(x7102 : GLclampf.t) ->
              fun ~alpha:(x7103 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7104) "blendColor"
                     [|(GLclampf.t_to_js x7100);(GLclampf.t_to_js x7101);(
                       GLclampf.t_to_js x7102);(GLclampf.t_to_js x7103)|])
    let (blendEquation : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7107 : 'tags this) ->
        fun ~mode:(x7106 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7107) "blendEquation"
               [|(GLenum.t_to_js x7106)|])
    let (blendEquationSeparate :
      'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit) =
      fun (x7111 : 'tags this) ->
        fun ~modeRGB:(x7109 : GLenum.t) ->
          fun ~modeAlpha:(x7110 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7111) "blendEquationSeparate"
                 [|(GLenum.t_to_js x7109);(GLenum.t_to_js x7110)|])
    let (blendFunc :
      'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit) =
      fun (x7115 : 'tags this) ->
        fun ~sfactor:(x7113 : GLenum.t) ->
          fun ~dfactor:(x7114 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7115) "blendFunc"
                 [|(GLenum.t_to_js x7113);(GLenum.t_to_js x7114)|])
    let (blendFuncSeparate :
      'tags this ->
        srcRGB:GLenum.t ->
          dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit)
      =
      fun (x7121 : 'tags this) ->
        fun ~srcRGB:(x7117 : GLenum.t) ->
          fun ~dstRGB:(x7118 : GLenum.t) ->
            fun ~srcAlpha:(x7119 : GLenum.t) ->
              fun ~dstAlpha:(x7120 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7121) "blendFuncSeparate"
                     [|(GLenum.t_to_js x7117);(GLenum.t_to_js x7118);(
                       GLenum.t_to_js x7119);(GLenum.t_to_js x7120)|])
    let (checkFramebufferStatus : 'tags this -> target:GLenum.t -> GLenum.t)
      =
      fun (x7124 : 'tags this) ->
        fun ~target:(x7123 : GLenum.t) ->
          GLenum.t_of_js
            (Ojs.call (this_to_js Obj.magic x7124) "checkFramebufferStatus"
               [|(GLenum.t_to_js x7123)|])
    let (clear : 'tags this -> mask:GLbitfield.t -> unit) =
      fun (x7127 : 'tags this) ->
        fun ~mask:(x7126 : GLbitfield.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7127) "clear"
               [|(GLbitfield.t_to_js x7126)|])
    let (clearColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x7133 : 'tags this) ->
        fun ~red:(x7129 : GLclampf.t) ->
          fun ~green:(x7130 : GLclampf.t) ->
            fun ~blue:(x7131 : GLclampf.t) ->
              fun ~alpha:(x7132 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7133) "clearColor"
                     [|(GLclampf.t_to_js x7129);(GLclampf.t_to_js x7130);(
                       GLclampf.t_to_js x7131);(GLclampf.t_to_js x7132)|])
    let (clearDepth : 'tags this -> depth:GLclampf.t -> unit) =
      fun (x7136 : 'tags this) ->
        fun ~depth:(x7135 : GLclampf.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7136) "clearDepth"
               [|(GLclampf.t_to_js x7135)|])
    let (clearStencil : 'tags this -> s:GLint.t -> unit) =
      fun (x7139 : 'tags this) ->
        fun ~s:(x7138 : GLint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7139) "clearStencil"
               [|(GLint.t_to_js x7138)|])
    let (colorMask :
      'tags this ->
        red:GLboolean.t ->
          green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit)
      =
      fun (x7145 : 'tags this) ->
        fun ~red:(x7141 : GLboolean.t) ->
          fun ~green:(x7142 : GLboolean.t) ->
            fun ~blue:(x7143 : GLboolean.t) ->
              fun ~alpha:(x7144 : GLboolean.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7145) "colorMask"
                     [|(GLboolean.t_to_js x7141);(GLboolean.t_to_js x7142);(
                       GLboolean.t_to_js x7143);(GLboolean.t_to_js x7144)|])
    let (compileShader : 'tags this -> shader:WebGLShader.t -> unit) =
      fun (x7148 : 'tags this) ->
        fun ~shader:(x7147 : WebGLShader.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7148) "compileShader"
               [|(WebGLShader.t_to_js x7147)|])
    let (copyTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              x:GLint.t ->
                y:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t -> border:GLint.t -> unit)
      =
      fun (x7158 : 'tags this) ->
        fun ~target:(x7150 : GLenum.t) ->
          fun ~level:(x7151 : GLint.t) ->
            fun ~internalformat:(x7152 : GLenum.t) ->
              fun ~x:(x7153 : GLint.t) ->
                fun ~y:(x7154 : GLint.t) ->
                  fun ~width:(x7155 : GLsizei.t) ->
                    fun ~height:(x7156 : GLsizei.t) ->
                      fun ~border:(x7157 : GLint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7158)
                             "copyTexImage2D"
                             [|(GLenum.t_to_js x7150);(GLint.t_to_js x7151);(
                               GLenum.t_to_js x7152);(GLint.t_to_js x7153);(
                               GLint.t_to_js x7154);(GLsizei.t_to_js x7155);(
                               GLsizei.t_to_js x7156);(GLint.t_to_js x7157)|])
    let (copyTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                x:GLint.t ->
                  y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7168 : 'tags this) ->
        fun ~target:(x7160 : GLenum.t) ->
          fun ~level:(x7161 : GLint.t) ->
            fun ~xoffset:(x7162 : GLint.t) ->
              fun ~yoffset:(x7163 : GLint.t) ->
                fun ~x:(x7164 : GLint.t) ->
                  fun ~y:(x7165 : GLint.t) ->
                    fun ~width:(x7166 : GLsizei.t) ->
                      fun ~height:(x7167 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7168)
                             "copyTexSubImage2D"
                             [|(GLenum.t_to_js x7160);(GLint.t_to_js x7161);(
                               GLint.t_to_js x7162);(GLint.t_to_js x7163);(
                               GLint.t_to_js x7164);(GLint.t_to_js x7165);(
                               GLsizei.t_to_js x7166);(GLsizei.t_to_js x7167)|])
    let (createBuffer : 'tags this -> WebGLBuffer.t option) =
      fun (x7170 : 'tags this) ->
        Ojs.option_of_js WebGLBuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7170) "createBuffer" [||])
    let (createFramebuffer : 'tags this -> WebGLFramebuffer.t option) =
      fun (x7173 : 'tags this) ->
        Ojs.option_of_js WebGLFramebuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7173) "createFramebuffer" [||])
    let (createProgram : 'tags this -> WebGLProgram.t option) =
      fun (x7176 : 'tags this) ->
        Ojs.option_of_js WebGLProgram.t_of_js
          (Ojs.call (this_to_js Obj.magic x7176) "createProgram" [||])
    let (createRenderbuffer : 'tags this -> WebGLRenderbuffer.t option) =
      fun (x7179 : 'tags this) ->
        Ojs.option_of_js WebGLRenderbuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x7179) "createRenderbuffer" [||])
    let (createShader : 'tags this -> type_:GLenum.t -> WebGLShader.t option)
      =
      fun (x7183 : 'tags this) ->
        fun ~type_:(x7182 : GLenum.t) ->
          Ojs.option_of_js WebGLShader.t_of_js
            (Ojs.call (this_to_js Obj.magic x7183) "createShader"
               [|(GLenum.t_to_js x7182)|])
    let (createTexture : 'tags this -> WebGLTexture.t option) =
      fun (x7186 : 'tags this) ->
        Ojs.option_of_js WebGLTexture.t_of_js
          (Ojs.call (this_to_js Obj.magic x7186) "createTexture" [||])
    let (cullFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7190 : 'tags this) ->
        fun ~mode:(x7189 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7190) "cullFace"
               [|(GLenum.t_to_js x7189)|])
    let (deleteBuffer : 'tags this -> buffer:WebGLBuffer.t option -> unit) =
      fun (x7194 : 'tags this) ->
        fun ~buffer:(x7192 : WebGLBuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7194) "deleteBuffer"
               [|(Ojs.option_to_js WebGLBuffer.t_to_js x7192)|])
    let (deleteFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t option -> unit) =
      fun (x7198 : 'tags this) ->
        fun ~framebuffer:(x7196 : WebGLFramebuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7198) "deleteFramebuffer"
               [|(Ojs.option_to_js WebGLFramebuffer.t_to_js x7196)|])
    let (deleteProgram : 'tags this -> program:WebGLProgram.t option -> unit)
      =
      fun (x7202 : 'tags this) ->
        fun ~program:(x7200 : WebGLProgram.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7202) "deleteProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7200)|])
    let (deleteRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t option -> unit) =
      fun (x7206 : 'tags this) ->
        fun ~renderbuffer:(x7204 : WebGLRenderbuffer.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7206) "deleteRenderbuffer"
               [|(Ojs.option_to_js WebGLRenderbuffer.t_to_js x7204)|])
    let (deleteShader : 'tags this -> shader:WebGLShader.t option -> unit) =
      fun (x7210 : 'tags this) ->
        fun ~shader:(x7208 : WebGLShader.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7210) "deleteShader"
               [|(Ojs.option_to_js WebGLShader.t_to_js x7208)|])
    let (deleteTexture : 'tags this -> texture:WebGLTexture.t option -> unit)
      =
      fun (x7214 : 'tags this) ->
        fun ~texture:(x7212 : WebGLTexture.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7214) "deleteTexture"
               [|(Ojs.option_to_js WebGLTexture.t_to_js x7212)|])
    let (depthFunc : 'tags this -> func:GLenum.t -> unit) =
      fun (x7217 : 'tags this) ->
        fun ~func:(x7216 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7217) "depthFunc"
               [|(GLenum.t_to_js x7216)|])
    let (depthMask : 'tags this -> flag:GLboolean.t -> unit) =
      fun (x7220 : 'tags this) ->
        fun ~flag:(x7219 : GLboolean.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7220) "depthMask"
               [|(GLboolean.t_to_js x7219)|])
    let (depthRange :
      'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit) =
      fun (x7224 : 'tags this) ->
        fun ~zNear:(x7222 : GLclampf.t) ->
          fun ~zFar:(x7223 : GLclampf.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7224) "depthRange"
                 [|(GLclampf.t_to_js x7222);(GLclampf.t_to_js x7223)|])
    let (detachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x7228 : 'tags this) ->
        fun ~program:(x7226 : WebGLProgram.t) ->
          fun ~shader:(x7227 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7228) "detachShader"
                 [|(WebGLProgram.t_to_js x7226);(WebGLShader.t_to_js x7227)|])
    let (disable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x7231 : 'tags this) ->
        fun ~cap:(x7230 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7231) "disable"
               [|(GLenum.t_to_js x7230)|])
    let (disableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x7234 : 'tags this) ->
        fun ~index:(x7233 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7234) "disableVertexAttribArray"
               [|(GLuint.t_to_js x7233)|])
    let (drawArrays :
      'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit)
      =
      fun (x7239 : 'tags this) ->
        fun ~mode:(x7236 : GLenum.t) ->
          fun ~first:(x7237 : GLint.t) ->
            fun ~count:(x7238 : GLsizei.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7239) "drawArrays"
                   [|(GLenum.t_to_js x7236);(GLint.t_to_js x7237);(GLsizei.t_to_js
                                                                    x7238)|])
    let (drawElements :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x7245 : 'tags this) ->
        fun ~mode:(x7241 : GLenum.t) ->
          fun ~count:(x7242 : GLsizei.t) ->
            fun ~type_:(x7243 : GLenum.t) ->
              fun ~offset:(x7244 : GLintptr.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7245) "drawElements"
                     [|(GLenum.t_to_js x7241);(GLsizei.t_to_js x7242);(
                       GLenum.t_to_js x7243);(GLintptr.t_to_js x7244)|])
    let (enable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x7248 : 'tags this) ->
        fun ~cap:(x7247 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7248) "enable"
               [|(GLenum.t_to_js x7247)|])
    let (enableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x7251 : 'tags this) ->
        fun ~index:(x7250 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7251) "enableVertexAttribArray"
               [|(GLuint.t_to_js x7250)|])
    let (finish : 'tags this -> unit) =
      fun (x7253 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7253) "finish" [||])
    let (flush : 'tags this -> unit) =
      fun (x7255 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7255) "flush" [||])
    let (framebufferRenderbuffer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            renderbuffertarget:GLenum.t ->
              renderbuffer:WebGLRenderbuffer.t option -> unit)
      =
      fun (x7262 : 'tags this) ->
        fun ~target:(x7257 : GLenum.t) ->
          fun ~attachment:(x7258 : GLenum.t) ->
            fun ~renderbuffertarget:(x7259 : GLenum.t) ->
              fun ~renderbuffer:(x7260 : WebGLRenderbuffer.t option) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7262)
                     "framebufferRenderbuffer"
                     [|(GLenum.t_to_js x7257);(GLenum.t_to_js x7258);(
                       GLenum.t_to_js x7259);(Ojs.option_to_js
                                                WebGLRenderbuffer.t_to_js
                                                x7260)|])
    let (framebufferTexture2D :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            textarget:GLenum.t ->
              texture:WebGLTexture.t option -> level:GLint.t -> unit)
      =
      fun (x7270 : 'tags this) ->
        fun ~target:(x7264 : GLenum.t) ->
          fun ~attachment:(x7265 : GLenum.t) ->
            fun ~textarget:(x7266 : GLenum.t) ->
              fun ~texture:(x7267 : WebGLTexture.t option) ->
                fun ~level:(x7269 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7270)
                       "framebufferTexture2D"
                       [|(GLenum.t_to_js x7264);(GLenum.t_to_js x7265);(
                         GLenum.t_to_js x7266);(Ojs.option_to_js
                                                  WebGLTexture.t_to_js x7267);(
                         GLint.t_to_js x7269)|])
    let (frontFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x7273 : 'tags this) ->
        fun ~mode:(x7272 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7273) "frontFace"
               [|(GLenum.t_to_js x7272)|])
    let (generateMipmap : 'tags this -> target:GLenum.t -> unit) =
      fun (x7276 : 'tags this) ->
        fun ~target:(x7275 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7276) "generateMipmap"
               [|(GLenum.t_to_js x7275)|])
    let (getActiveAttrib :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x7280 : 'tags this) ->
        fun ~program:(x7278 : WebGLProgram.t) ->
          fun ~index:(x7279 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x7280) "getActiveAttrib"
                 [|(WebGLProgram.t_to_js x7278);(GLuint.t_to_js x7279)|])
    let (getActiveUniform :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x7285 : 'tags this) ->
        fun ~program:(x7283 : WebGLProgram.t) ->
          fun ~index:(x7284 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x7285) "getActiveUniform"
                 [|(WebGLProgram.t_to_js x7283);(GLuint.t_to_js x7284)|])
    let (getAttachedShaders :
      'tags this -> program:WebGLProgram.t -> WebGLShader.t list option) =
      fun (x7289 : 'tags this) ->
        fun ~program:(x7288 : WebGLProgram.t) ->
          Ojs.option_of_js
            (fun (x7291 : Ojs.t) -> Ojs.list_of_js WebGLShader.t_of_js x7291)
            (Ojs.call (this_to_js Obj.magic x7289) "getAttachedShaders"
               [|(WebGLProgram.t_to_js x7288)|])
    let (getAttribLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x7295 : 'tags this) ->
        fun ~program:(x7293 : WebGLProgram.t) ->
          fun ~name:(x7294 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x7295) "getAttribLocation"
                 [|(WebGLProgram.t_to_js x7293);(Ojs.string_to_js x7294)|])
    let (getBufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7299 : 'tags this) ->
        fun ~target:(x7297 : GLenum.t) ->
          fun ~pname:(x7298 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7299) "getBufferParameter"
                 [|(GLenum.t_to_js x7297);(GLenum.t_to_js x7298)|])
    let (getContextAttributes :
      'tags this -> WebGLContextAttributes.t option) =
      fun (x7301 : 'tags this) ->
        Ojs.option_of_js WebGLContextAttributes.t_of_js
          (Ojs.call (this_to_js Obj.magic x7301) "getContextAttributes" [||])
    let (getError : 'tags this -> GLenum.t) =
      fun (x7304 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.call (this_to_js Obj.magic x7304) "getError" [||])
    let (getExtension :
      'tags this ->
        extensionName:[ `L_s2_EXT_blend_minmax ] -> EXT_blend_minmax.t option)
      =
      fun (x7307 : 'tags this) ->
        fun ~extensionName:(x7306 : [ `L_s2_EXT_blend_minmax ]) ->
          Ojs.option_of_js EXT_blend_minmax.t_of_js
            (Ojs.call (this_to_js Obj.magic x7307) "getExtension"
               [|((match x7306 with
                   | `L_s2_EXT_blend_minmax ->
                       Ojs.string_to_js "EXT_blend_minmax"))|])
    let (getExtension' :
      'tags this ->
        extensionName:[ `L_s3_EXT_color_buffer_float ] ->
          EXT_color_buffer_float.t option)
      =
      fun (x7311 : 'tags this) ->
        fun ~extensionName:(x7310 : [ `L_s3_EXT_color_buffer_float ]) ->
          Ojs.option_of_js EXT_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7311) "getExtension"
               [|((match x7310 with
                   | `L_s3_EXT_color_buffer_float ->
                       Ojs.string_to_js "EXT_color_buffer_float"))|])
    let (getExtension'' :
      'tags this ->
        extensionName:[ `L_s4_EXT_color_buffer_half_float ] ->
          EXT_color_buffer_half_float.t option)
      =
      fun (x7315 : 'tags this) ->
        fun ~extensionName:(x7314 : [ `L_s4_EXT_color_buffer_half_float ]) ->
          Ojs.option_of_js EXT_color_buffer_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7315) "getExtension"
               [|((match x7314 with
                   | `L_s4_EXT_color_buffer_half_float ->
                       Ojs.string_to_js "EXT_color_buffer_half_float"))|])
    let (getExtension''' :
      'tags this ->
        extensionName:[ `L_s5_EXT_float_blend ] -> EXT_float_blend.t option)
      =
      fun (x7319 : 'tags this) ->
        fun ~extensionName:(x7318 : [ `L_s5_EXT_float_blend ]) ->
          Ojs.option_of_js EXT_float_blend.t_of_js
            (Ojs.call (this_to_js Obj.magic x7319) "getExtension"
               [|((match x7318 with
                   | `L_s5_EXT_float_blend ->
                       Ojs.string_to_js "EXT_float_blend"))|])
    let (getExtension'''' :
      'tags this ->
        extensionName:[ `L_s9_EXT_texture_filter_anisotropic ] ->
          EXT_texture_filter_anisotropic.t option)
      =
      fun (x7323 : 'tags this) ->
        fun ~extensionName:(x7322 : [ `L_s9_EXT_texture_filter_anisotropic ])
          ->
          Ojs.option_of_js EXT_texture_filter_anisotropic.t_of_js
            (Ojs.call (this_to_js Obj.magic x7323) "getExtension"
               [|((match x7322 with
                   | `L_s9_EXT_texture_filter_anisotropic ->
                       Ojs.string_to_js "EXT_texture_filter_anisotropic"))|])
    let (getExtension''''' :
      'tags this ->
        extensionName:[ `L_s6_EXT_frag_depth ] -> EXT_frag_depth.t option)
      =
      fun (x7327 : 'tags this) ->
        fun ~extensionName:(x7326 : [ `L_s6_EXT_frag_depth ]) ->
          Ojs.option_of_js EXT_frag_depth.t_of_js
            (Ojs.call (this_to_js Obj.magic x7327) "getExtension"
               [|((match x7326 with
                   | `L_s6_EXT_frag_depth ->
                       Ojs.string_to_js "EXT_frag_depth"))|])
    let (getExtension'''''' :
      'tags this ->
        extensionName:[ `L_s8_EXT_shader_texture_lod ] ->
          EXT_shader_texture_lod.t option)
      =
      fun (x7331 : 'tags this) ->
        fun ~extensionName:(x7330 : [ `L_s8_EXT_shader_texture_lod ]) ->
          Ojs.option_of_js EXT_shader_texture_lod.t_of_js
            (Ojs.call (this_to_js Obj.magic x7331) "getExtension"
               [|((match x7330 with
                   | `L_s8_EXT_shader_texture_lod ->
                       Ojs.string_to_js "EXT_shader_texture_lod"))|])
    let (getExtension''''''' :
      'tags this -> extensionName:[ `L_s7_EXT_sRGB ] -> EXT_sRGB.t option) =
      fun (x7335 : 'tags this) ->
        fun ~extensionName:(x7334 : [ `L_s7_EXT_sRGB ]) ->
          Ojs.option_of_js EXT_sRGB.t_of_js
            (Ojs.call (this_to_js Obj.magic x7335) "getExtension"
               [|((match x7334 with
                   | `L_s7_EXT_sRGB -> Ojs.string_to_js "EXT_sRGB"))|])
    let (getExtension'''''''' :
      'tags this ->
        extensionName:[ `L_s10_KHR_parallel_shader_compile ] ->
          KHR_parallel_shader_compile.t option)
      =
      fun (x7339 : 'tags this) ->
        fun ~extensionName:(x7338 : [ `L_s10_KHR_parallel_shader_compile ])
          ->
          Ojs.option_of_js KHR_parallel_shader_compile.t_of_js
            (Ojs.call (this_to_js Obj.magic x7339) "getExtension"
               [|((match x7338 with
                   | `L_s10_KHR_parallel_shader_compile ->
                       Ojs.string_to_js "KHR_parallel_shader_compile"))|])
    let (getExtension''''''''' :
      'tags this ->
        extensionName:[ `L_s17_OES_vertex_array_object ] ->
          OES_vertex_array_object.t option)
      =
      fun (x7343 : 'tags this) ->
        fun ~extensionName:(x7342 : [ `L_s17_OES_vertex_array_object ]) ->
          Ojs.option_of_js OES_vertex_array_object.t_of_js
            (Ojs.call (this_to_js Obj.magic x7343) "getExtension"
               [|((match x7342 with
                   | `L_s17_OES_vertex_array_object ->
                       Ojs.string_to_js "OES_vertex_array_object"))|])
    let (getExtension'''''''''' :
      'tags this ->
        extensionName:[ `L_s18_OVR_multiview2 ] -> OVR_multiview2.t option)
      =
      fun (x7347 : 'tags this) ->
        fun ~extensionName:(x7346 : [ `L_s18_OVR_multiview2 ]) ->
          Ojs.option_of_js OVR_multiview2.t_of_js
            (Ojs.call (this_to_js Obj.magic x7347) "getExtension"
               [|((match x7346 with
                   | `L_s18_OVR_multiview2 ->
                       Ojs.string_to_js "OVR_multiview2"))|])
    let (getExtension''''''''''' :
      'tags this ->
        extensionName:[ `L_s19_WEBGL_color_buffer_float ] ->
          WEBGL_color_buffer_float.t option)
      =
      fun (x7351 : 'tags this) ->
        fun ~extensionName:(x7350 : [ `L_s19_WEBGL_color_buffer_float ]) ->
          Ojs.option_of_js WEBGL_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7351) "getExtension"
               [|((match x7350 with
                   | `L_s19_WEBGL_color_buffer_float ->
                       Ojs.string_to_js "WEBGL_color_buffer_float"))|])
    let (getExtension'''''''''''' :
      'tags this ->
        extensionName:[ `L_s20_WEBGL_compressed_texture_astc ] ->
          WEBGL_compressed_texture_astc.t option)
      =
      fun (x7355 : 'tags this) ->
        fun ~extensionName:(x7354 : [ `L_s20_WEBGL_compressed_texture_astc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_astc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7355) "getExtension"
               [|((match x7354 with
                   | `L_s20_WEBGL_compressed_texture_astc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_astc"))|])
    let (getExtension''''''''''''' :
      'tags this ->
        extensionName:[ `L_s21_WEBGL_compressed_texture_etc ] ->
          WEBGL_compressed_texture_etc.t option)
      =
      fun (x7359 : 'tags this) ->
        fun ~extensionName:(x7358 : [ `L_s21_WEBGL_compressed_texture_etc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_etc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7359) "getExtension"
               [|((match x7358 with
                   | `L_s21_WEBGL_compressed_texture_etc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc"))|])
    let (getExtension'''''''''''''' :
      'tags this ->
        extensionName:[ `L_s22_WEBGL_compressed_texture_etc1 ] ->
          WEBGL_compressed_texture_etc1.t option)
      =
      fun (x7363 : 'tags this) ->
        fun ~extensionName:(x7362 : [ `L_s22_WEBGL_compressed_texture_etc1 ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_etc1.t_of_js
            (Ojs.call (this_to_js Obj.magic x7363) "getExtension"
               [|((match x7362 with
                   | `L_s22_WEBGL_compressed_texture_etc1 ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc1"))|])
    let (getExtension''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s23_WEBGL_compressed_texture_pvrtc ] ->
          WEBGL_compressed_texture_pvrtc.t option)
      =
      fun (x7367 : 'tags this) ->
        fun
          ~extensionName:(x7366 : [ `L_s23_WEBGL_compressed_texture_pvrtc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_pvrtc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7367) "getExtension"
               [|((match x7366 with
                   | `L_s23_WEBGL_compressed_texture_pvrtc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_pvrtc"))|])
    let (getExtension'''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s25_WEBGL_compressed_texture_s3tc_srgb ] ->
          WEBGL_compressed_texture_s3tc_srgb.t option)
      =
      fun (x7371 : 'tags this) ->
        fun
          ~extensionName:(x7370 :
                           [ `L_s25_WEBGL_compressed_texture_s3tc_srgb ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_s3tc_srgb.t_of_js
            (Ojs.call (this_to_js Obj.magic x7371) "getExtension"
               [|((match x7370 with
                   | `L_s25_WEBGL_compressed_texture_s3tc_srgb ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc_srgb"))|])
    let (getExtension''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s27_WEBGL_debug_shaders ] ->
          WEBGL_debug_shaders.t option)
      =
      fun (x7375 : 'tags this) ->
        fun ~extensionName:(x7374 : [ `L_s27_WEBGL_debug_shaders ]) ->
          Ojs.option_of_js WEBGL_debug_shaders.t_of_js
            (Ojs.call (this_to_js Obj.magic x7375) "getExtension"
               [|((match x7374 with
                   | `L_s27_WEBGL_debug_shaders ->
                       Ojs.string_to_js "WEBGL_debug_shaders"))|])
    let (getExtension'''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s29_WEBGL_draw_buffers ] ->
          WEBGL_draw_buffers.t option)
      =
      fun (x7379 : 'tags this) ->
        fun ~extensionName:(x7378 : [ `L_s29_WEBGL_draw_buffers ]) ->
          Ojs.option_of_js WEBGL_draw_buffers.t_of_js
            (Ojs.call (this_to_js Obj.magic x7379) "getExtension"
               [|((match x7378 with
                   | `L_s29_WEBGL_draw_buffers ->
                       Ojs.string_to_js "WEBGL_draw_buffers"))|])
    let (getExtension''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s30_WEBGL_lose_context ] ->
          WEBGL_lose_context.t option)
      =
      fun (x7383 : 'tags this) ->
        fun ~extensionName:(x7382 : [ `L_s30_WEBGL_lose_context ]) ->
          Ojs.option_of_js WEBGL_lose_context.t_of_js
            (Ojs.call (this_to_js Obj.magic x7383) "getExtension"
               [|((match x7382 with
                   | `L_s30_WEBGL_lose_context ->
                       Ojs.string_to_js "WEBGL_lose_context"))|])
    let (getExtension'''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s28_WEBGL_depth_texture ] ->
          WEBGL_depth_texture.t option)
      =
      fun (x7387 : 'tags this) ->
        fun ~extensionName:(x7386 : [ `L_s28_WEBGL_depth_texture ]) ->
          Ojs.option_of_js WEBGL_depth_texture.t_of_js
            (Ojs.call (this_to_js Obj.magic x7387) "getExtension"
               [|((match x7386 with
                   | `L_s28_WEBGL_depth_texture ->
                       Ojs.string_to_js "WEBGL_depth_texture"))|])
    let (getExtension''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s26_WEBGL_debug_renderer_info ] ->
          WEBGL_debug_renderer_info.t option)
      =
      fun (x7391 : 'tags this) ->
        fun ~extensionName:(x7390 : [ `L_s26_WEBGL_debug_renderer_info ]) ->
          Ojs.option_of_js WEBGL_debug_renderer_info.t_of_js
            (Ojs.call (this_to_js Obj.magic x7391) "getExtension"
               [|((match x7390 with
                   | `L_s26_WEBGL_debug_renderer_info ->
                       Ojs.string_to_js "WEBGL_debug_renderer_info"))|])
    let (getExtension'''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s24_WEBGL_compressed_texture_s3tc ] ->
          WEBGL_compressed_texture_s3tc.t option)
      =
      fun (x7395 : 'tags this) ->
        fun ~extensionName:(x7394 : [ `L_s24_WEBGL_compressed_texture_s3tc ])
          ->
          Ojs.option_of_js WEBGL_compressed_texture_s3tc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7395) "getExtension"
               [|((match x7394 with
                   | `L_s24_WEBGL_compressed_texture_s3tc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc"))|])
    let (getExtension''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s16_OES_texture_half_float_linear ] ->
          OES_texture_half_float_linear.t option)
      =
      fun (x7399 : 'tags this) ->
        fun ~extensionName:(x7398 : [ `L_s16_OES_texture_half_float_linear ])
          ->
          Ojs.option_of_js OES_texture_half_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7399) "getExtension"
               [|((match x7398 with
                   | `L_s16_OES_texture_half_float_linear ->
                       Ojs.string_to_js "OES_texture_half_float_linear"))|])
    let (getExtension'''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s15_OES_texture_half_float ] ->
          OES_texture_half_float.t option)
      =
      fun (x7403 : 'tags this) ->
        fun ~extensionName:(x7402 : [ `L_s15_OES_texture_half_float ]) ->
          Ojs.option_of_js OES_texture_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7403) "getExtension"
               [|((match x7402 with
                   | `L_s15_OES_texture_half_float ->
                       Ojs.string_to_js "OES_texture_half_float"))|])
    let (getExtension''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s14_OES_texture_float_linear ] ->
          OES_texture_float_linear.t option)
      =
      fun (x7407 : 'tags this) ->
        fun ~extensionName:(x7406 : [ `L_s14_OES_texture_float_linear ]) ->
          Ojs.option_of_js OES_texture_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7407) "getExtension"
               [|((match x7406 with
                   | `L_s14_OES_texture_float_linear ->
                       Ojs.string_to_js "OES_texture_float_linear"))|])
    let (getExtension'''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s13_OES_texture_float ] ->
          OES_texture_float.t option)
      =
      fun (x7411 : 'tags this) ->
        fun ~extensionName:(x7410 : [ `L_s13_OES_texture_float ]) ->
          Ojs.option_of_js OES_texture_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7411) "getExtension"
               [|((match x7410 with
                   | `L_s13_OES_texture_float ->
                       Ojs.string_to_js "OES_texture_float"))|])
    let (getExtension''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s12_OES_standard_derivatives ] ->
          OES_standard_derivatives.t option)
      =
      fun (x7415 : 'tags this) ->
        fun ~extensionName:(x7414 : [ `L_s12_OES_standard_derivatives ]) ->
          Ojs.option_of_js OES_standard_derivatives.t_of_js
            (Ojs.call (this_to_js Obj.magic x7415) "getExtension"
               [|((match x7414 with
                   | `L_s12_OES_standard_derivatives ->
                       Ojs.string_to_js "OES_standard_derivatives"))|])
    let (getExtension'''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s11_OES_element_index_uint ] ->
          OES_element_index_uint.t option)
      =
      fun (x7419 : 'tags this) ->
        fun ~extensionName:(x7418 : [ `L_s11_OES_element_index_uint ]) ->
          Ojs.option_of_js OES_element_index_uint.t_of_js
            (Ojs.call (this_to_js Obj.magic x7419) "getExtension"
               [|((match x7418 with
                   | `L_s11_OES_element_index_uint ->
                       Ojs.string_to_js "OES_element_index_uint"))|])
    let (getExtension''''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s1_ANGLE_instanced_arrays ] ->
          ANGLE_instanced_arrays.t option)
      =
      fun (x7423 : 'tags this) ->
        fun ~extensionName:(x7422 : [ `L_s1_ANGLE_instanced_arrays ]) ->
          Ojs.option_of_js ANGLE_instanced_arrays.t_of_js
            (Ojs.call (this_to_js Obj.magic x7423) "getExtension"
               [|((match x7422 with
                   | `L_s1_ANGLE_instanced_arrays ->
                       Ojs.string_to_js "ANGLE_instanced_arrays"))|])
    let (getExtension'''''''''''''''''''''''''''''' :
      'tags this -> name:string -> any) =
      fun (x7427 : 'tags this) ->
        fun ~name:(x7426 : string) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7427) "getExtension"
               [|(Ojs.string_to_js x7426)|])
    let (getFramebufferAttachmentParameter :
      'tags this ->
        target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x7432 : 'tags this) ->
        fun ~target:(x7429 : GLenum.t) ->
          fun ~attachment:(x7430 : GLenum.t) ->
            fun ~pname:(x7431 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x7432)
                   "getFramebufferAttachmentParameter"
                   [|(GLenum.t_to_js x7429);(GLenum.t_to_js x7430);(GLenum.t_to_js
                                                                    x7431)|])
    let (getParameter : 'tags this -> pname:GLenum.t -> any) =
      fun (x7435 : 'tags this) ->
        fun ~pname:(x7434 : GLenum.t) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7435) "getParameter"
               [|(GLenum.t_to_js x7434)|])
    let (getProgramInfoLog :
      'tags this -> program:WebGLProgram.t -> string option) =
      fun (x7438 : 'tags this) ->
        fun ~program:(x7437 : WebGLProgram.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7438) "getProgramInfoLog"
               [|(WebGLProgram.t_to_js x7437)|])
    let (getProgramParameter :
      'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any) =
      fun (x7443 : 'tags this) ->
        fun ~program:(x7441 : WebGLProgram.t) ->
          fun ~pname:(x7442 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7443) "getProgramParameter"
                 [|(WebGLProgram.t_to_js x7441);(GLenum.t_to_js x7442)|])
    let (getRenderbufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7447 : 'tags this) ->
        fun ~target:(x7445 : GLenum.t) ->
          fun ~pname:(x7446 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7447)
                 "getRenderbufferParameter"
                 [|(GLenum.t_to_js x7445);(GLenum.t_to_js x7446)|])
    let (getShaderInfoLog :
      'tags this -> shader:WebGLShader.t -> string option) =
      fun (x7450 : 'tags this) ->
        fun ~shader:(x7449 : WebGLShader.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7450) "getShaderInfoLog"
               [|(WebGLShader.t_to_js x7449)|])
    let (getShaderParameter :
      'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any) =
      fun (x7455 : 'tags this) ->
        fun ~shader:(x7453 : WebGLShader.t) ->
          fun ~pname:(x7454 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7455) "getShaderParameter"
                 [|(WebGLShader.t_to_js x7453);(GLenum.t_to_js x7454)|])
    let (getShaderPrecisionFormat :
      'tags this ->
        shadertype:GLenum.t ->
          precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t option)
      =
      fun (x7459 : 'tags this) ->
        fun ~shadertype:(x7457 : GLenum.t) ->
          fun ~precisiontype:(x7458 : GLenum.t) ->
            Ojs.option_of_js WebGLShaderPrecisionFormat.t_of_js
              (Ojs.call (this_to_js Obj.magic x7459)
                 "getShaderPrecisionFormat"
                 [|(GLenum.t_to_js x7457);(GLenum.t_to_js x7458)|])
    let (getShaderSource :
      'tags this -> shader:WebGLShader.t -> string option) =
      fun (x7463 : 'tags this) ->
        fun ~shader:(x7462 : WebGLShader.t) ->
          Ojs.option_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7463) "getShaderSource"
               [|(WebGLShader.t_to_js x7462)|])
    let (getSupportedExtensions : 'tags this -> string list option) =
      fun (x7466 : 'tags this) ->
        Ojs.option_of_js
          (fun (x7468 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x7468)
          (Ojs.call (this_to_js Obj.magic x7466) "getSupportedExtensions"
             [||])
    let (getTexParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7472 : 'tags this) ->
        fun ~target:(x7470 : GLenum.t) ->
          fun ~pname:(x7471 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7472) "getTexParameter"
                 [|(GLenum.t_to_js x7470);(GLenum.t_to_js x7471)|])
    let (getUniform :
      'tags this ->
        program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any)
      =
      fun (x7476 : 'tags this) ->
        fun ~program:(x7474 : WebGLProgram.t) ->
          fun ~location:(x7475 : WebGLUniformLocation.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7476) "getUniform"
                 [|(WebGLProgram.t_to_js x7474);(WebGLUniformLocation.t_to_js
                                                   x7475)|])
    let (getUniformLocation :
      'tags this ->
        program:WebGLProgram.t ->
          name:string -> WebGLUniformLocation.t option)
      =
      fun (x7480 : 'tags this) ->
        fun ~program:(x7478 : WebGLProgram.t) ->
          fun ~name:(x7479 : string) ->
            Ojs.option_of_js WebGLUniformLocation.t_of_js
              (Ojs.call (this_to_js Obj.magic x7480) "getUniformLocation"
                 [|(WebGLProgram.t_to_js x7478);(Ojs.string_to_js x7479)|])
    let (getVertexAttrib :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> any) =
      fun (x7485 : 'tags this) ->
        fun ~index:(x7483 : GLuint.t) ->
          fun ~pname:(x7484 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7485) "getVertexAttrib"
                 [|(GLuint.t_to_js x7483);(GLenum.t_to_js x7484)|])
    let (getVertexAttribOffset :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t) =
      fun (x7489 : 'tags this) ->
        fun ~index:(x7487 : GLuint.t) ->
          fun ~pname:(x7488 : GLenum.t) ->
            GLintptr.t_of_js
              (Ojs.call (this_to_js Obj.magic x7489) "getVertexAttribOffset"
                 [|(GLuint.t_to_js x7487);(GLenum.t_to_js x7488)|])
    let (hint : 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit) =
      fun (x7493 : 'tags this) ->
        fun ~target:(x7491 : GLenum.t) ->
          fun ~mode:(x7492 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7493) "hint"
                 [|(GLenum.t_to_js x7491);(GLenum.t_to_js x7492)|])
    let (isBuffer : 'tags this -> buffer:WebGLBuffer.t option -> GLboolean.t)
      =
      fun (x7497 : 'tags this) ->
        fun ~buffer:(x7495 : WebGLBuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7497) "isBuffer"
               [|(Ojs.option_to_js WebGLBuffer.t_to_js x7495)|])
    let (isContextLost : 'tags this -> bool) =
      fun (x7499 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x7499) "isContextLost" [||])
    let (isEnabled : 'tags this -> cap:GLenum.t -> GLboolean.t) =
      fun (x7502 : 'tags this) ->
        fun ~cap:(x7501 : GLenum.t) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7502) "isEnabled"
               [|(GLenum.t_to_js x7501)|])
    let (isFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t option -> GLboolean.t) =
      fun (x7506 : 'tags this) ->
        fun ~framebuffer:(x7504 : WebGLFramebuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7506) "isFramebuffer"
               [|(Ojs.option_to_js WebGLFramebuffer.t_to_js x7504)|])
    let (isProgram :
      'tags this -> program:WebGLProgram.t option -> GLboolean.t) =
      fun (x7510 : 'tags this) ->
        fun ~program:(x7508 : WebGLProgram.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7510) "isProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7508)|])
    let (isRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t option -> GLboolean.t) =
      fun (x7514 : 'tags this) ->
        fun ~renderbuffer:(x7512 : WebGLRenderbuffer.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7514) "isRenderbuffer"
               [|(Ojs.option_to_js WebGLRenderbuffer.t_to_js x7512)|])
    let (isShader : 'tags this -> shader:WebGLShader.t option -> GLboolean.t)
      =
      fun (x7518 : 'tags this) ->
        fun ~shader:(x7516 : WebGLShader.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7518) "isShader"
               [|(Ojs.option_to_js WebGLShader.t_to_js x7516)|])
    let (isTexture :
      'tags this -> texture:WebGLTexture.t option -> GLboolean.t) =
      fun (x7522 : 'tags this) ->
        fun ~texture:(x7520 : WebGLTexture.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7522) "isTexture"
               [|(Ojs.option_to_js WebGLTexture.t_to_js x7520)|])
    let (lineWidth : 'tags this -> width:GLfloat.t -> unit) =
      fun (x7525 : 'tags this) ->
        fun ~width:(x7524 : GLfloat.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7525) "lineWidth"
               [|(GLfloat.t_to_js x7524)|])
    let (linkProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7528 : 'tags this) ->
        fun ~program:(x7527 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7528) "linkProgram"
               [|(WebGLProgram.t_to_js x7527)|])
    let (pixelStorei :
      'tags this ->
        pname:GLenum.t ->
          param:[ `U1 of GLint.t  | `U2 of GLboolean.t ] -> unit)
      =
      fun (x7534 : 'tags this) ->
        fun ~pname:(x7530 : GLenum.t) ->
          fun ~param:(x7531 : [ `U1 of GLint.t  | `U2 of GLboolean.t ]) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7534) "pixelStorei"
                 [|(GLenum.t_to_js x7530);((match x7531 with
                                            | `U1 x7532 ->
                                                GLint.t_to_js x7532
                                            | `U2 x7533 ->
                                                GLboolean.t_to_js x7533))|])
    let (polygonOffset :
      'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit) =
      fun (x7538 : 'tags this) ->
        fun ~factor:(x7536 : GLfloat.t) ->
          fun ~units:(x7537 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7538) "polygonOffset"
                 [|(GLfloat.t_to_js x7536);(GLfloat.t_to_js x7537)|])
    let (renderbufferStorage :
      'tags this ->
        target:GLenum.t ->
          internalformat:GLenum.t ->
            width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7544 : 'tags this) ->
        fun ~target:(x7540 : GLenum.t) ->
          fun ~internalformat:(x7541 : GLenum.t) ->
            fun ~width:(x7542 : GLsizei.t) ->
              fun ~height:(x7543 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7544)
                     "renderbufferStorage"
                     [|(GLenum.t_to_js x7540);(GLenum.t_to_js x7541);(
                       GLsizei.t_to_js x7542);(GLsizei.t_to_js x7543)|])
    let (sampleCoverage :
      'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit) =
      fun (x7548 : 'tags this) ->
        fun ~value:(x7546 : GLclampf.t) ->
          fun ~invert:(x7547 : GLboolean.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7548) "sampleCoverage"
                 [|(GLclampf.t_to_js x7546);(GLboolean.t_to_js x7547)|])
    let (scissor :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7554 : 'tags this) ->
        fun ~x:(x7550 : GLint.t) ->
          fun ~y:(x7551 : GLint.t) ->
            fun ~width:(x7552 : GLsizei.t) ->
              fun ~height:(x7553 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7554) "scissor"
                     [|(GLint.t_to_js x7550);(GLint.t_to_js x7551);(GLsizei.t_to_js
                                                                    x7552);(
                       GLsizei.t_to_js x7553)|])
    let (shaderSource :
      'tags this -> shader:WebGLShader.t -> source:string -> unit) =
      fun (x7558 : 'tags this) ->
        fun ~shader:(x7556 : WebGLShader.t) ->
          fun ~source:(x7557 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7558) "shaderSource"
                 [|(WebGLShader.t_to_js x7556);(Ojs.string_to_js x7557)|])
    let (stencilFunc :
      'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit) =
      fun (x7563 : 'tags this) ->
        fun ~func:(x7560 : GLenum.t) ->
          fun ~ref:(x7561 : GLint.t) ->
            fun ~mask:(x7562 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7563) "stencilFunc"
                   [|(GLenum.t_to_js x7560);(GLint.t_to_js x7561);(GLuint.t_to_js
                                                                    x7562)|])
    let (stencilFuncSeparate :
      'tags this ->
        face:GLenum.t ->
          func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit)
      =
      fun (x7569 : 'tags this) ->
        fun ~face:(x7565 : GLenum.t) ->
          fun ~func:(x7566 : GLenum.t) ->
            fun ~ref:(x7567 : GLint.t) ->
              fun ~mask:(x7568 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7569)
                     "stencilFuncSeparate"
                     [|(GLenum.t_to_js x7565);(GLenum.t_to_js x7566);(
                       GLint.t_to_js x7567);(GLuint.t_to_js x7568)|])
    let (stencilMask : 'tags this -> mask:GLuint.t -> unit) =
      fun (x7572 : 'tags this) ->
        fun ~mask:(x7571 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7572) "stencilMask"
               [|(GLuint.t_to_js x7571)|])
    let (stencilMaskSeparate :
      'tags this -> face:GLenum.t -> mask:GLuint.t -> unit) =
      fun (x7576 : 'tags this) ->
        fun ~face:(x7574 : GLenum.t) ->
          fun ~mask:(x7575 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7576) "stencilMaskSeparate"
                 [|(GLenum.t_to_js x7574);(GLuint.t_to_js x7575)|])
    let (stencilOp :
      'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7581 : 'tags this) ->
        fun ~fail:(x7578 : GLenum.t) ->
          fun ~zfail:(x7579 : GLenum.t) ->
            fun ~zpass:(x7580 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7581) "stencilOp"
                   [|(GLenum.t_to_js x7578);(GLenum.t_to_js x7579);(GLenum.t_to_js
                                                                    x7580)|])
    let (stencilOpSeparate :
      'tags this ->
        face:GLenum.t ->
          fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7587 : 'tags this) ->
        fun ~face:(x7583 : GLenum.t) ->
          fun ~fail:(x7584 : GLenum.t) ->
            fun ~zfail:(x7585 : GLenum.t) ->
              fun ~zpass:(x7586 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7587) "stencilOpSeparate"
                     [|(GLenum.t_to_js x7583);(GLenum.t_to_js x7584);(
                       GLenum.t_to_js x7585);(GLenum.t_to_js x7586)|])
    let (texParameterf :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x7592 : 'tags this) ->
        fun ~target:(x7589 : GLenum.t) ->
          fun ~pname:(x7590 : GLenum.t) ->
            fun ~param:(x7591 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7592) "texParameterf"
                   [|(GLenum.t_to_js x7589);(GLenum.t_to_js x7590);(GLfloat.t_to_js
                                                                    x7591)|])
    let (texParameteri :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x7597 : 'tags this) ->
        fun ~target:(x7594 : GLenum.t) ->
          fun ~pname:(x7595 : GLenum.t) ->
            fun ~param:(x7596 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7597) "texParameteri"
                   [|(GLenum.t_to_js x7594);(GLenum.t_to_js x7595);(GLint.t_to_js
                                                                    x7596)|])
    let (uniform1f :
      'tags this ->
        location:WebGLUniformLocation.t option -> x:GLfloat.t -> unit)
      =
      fun (x7602 : 'tags this) ->
        fun ~location:(x7599 : WebGLUniformLocation.t option) ->
          fun ~x:(x7601 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7602) "uniform1f"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7599);(
                   GLfloat.t_to_js x7601)|])
    let (uniform1i :
      'tags this ->
        location:WebGLUniformLocation.t option -> x:GLint.t -> unit)
      =
      fun (x7607 : 'tags this) ->
        fun ~location:(x7604 : WebGLUniformLocation.t option) ->
          fun ~x:(x7606 : GLint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7607) "uniform1i"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7604);(
                   GLint.t_to_js x7606)|])
    let (uniform2f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> unit)
      =
      fun (x7613 : 'tags this) ->
        fun ~location:(x7609 : WebGLUniformLocation.t option) ->
          fun ~x:(x7611 : GLfloat.t) ->
            fun ~y:(x7612 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7613) "uniform2f"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7609);(
                     GLfloat.t_to_js x7611);(GLfloat.t_to_js x7612)|])
    let (uniform2i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> unit)
      =
      fun (x7619 : 'tags this) ->
        fun ~location:(x7615 : WebGLUniformLocation.t option) ->
          fun ~x:(x7617 : GLint.t) ->
            fun ~y:(x7618 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7619) "uniform2i"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7615);(
                     GLint.t_to_js x7617);(GLint.t_to_js x7618)|])
    let (uniform3f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7626 : 'tags this) ->
        fun ~location:(x7621 : WebGLUniformLocation.t option) ->
          fun ~x:(x7623 : GLfloat.t) ->
            fun ~y:(x7624 : GLfloat.t) ->
              fun ~z:(x7625 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7626) "uniform3f"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7621);(
                       GLfloat.t_to_js x7623);(GLfloat.t_to_js x7624);(
                       GLfloat.t_to_js x7625)|])
    let (uniform3i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> unit)
      =
      fun (x7633 : 'tags this) ->
        fun ~location:(x7628 : WebGLUniformLocation.t option) ->
          fun ~x:(x7630 : GLint.t) ->
            fun ~y:(x7631 : GLint.t) ->
              fun ~z:(x7632 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7633) "uniform3i"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7628);(
                       GLint.t_to_js x7630);(GLint.t_to_js x7631);(GLint.t_to_js
                                                                    x7632)|])
    let (uniform4f :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7641 : 'tags this) ->
        fun ~location:(x7635 : WebGLUniformLocation.t option) ->
          fun ~x:(x7637 : GLfloat.t) ->
            fun ~y:(x7638 : GLfloat.t) ->
              fun ~z:(x7639 : GLfloat.t) ->
                fun ~w:(x7640 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7641) "uniform4f"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7635);(
                         GLfloat.t_to_js x7637);(GLfloat.t_to_js x7638);(
                         GLfloat.t_to_js x7639);(GLfloat.t_to_js x7640)|])
    let (uniform4i :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x7649 : 'tags this) ->
        fun ~location:(x7643 : WebGLUniformLocation.t option) ->
          fun ~x:(x7645 : GLint.t) ->
            fun ~y:(x7646 : GLint.t) ->
              fun ~z:(x7647 : GLint.t) ->
                fun ~w:(x7648 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7649) "uniform4i"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x7643);(
                         GLint.t_to_js x7645);(GLint.t_to_js x7646);(
                         GLint.t_to_js x7647);(GLint.t_to_js x7648)|])
    let (useProgram : 'tags this -> program:WebGLProgram.t option -> unit) =
      fun (x7653 : 'tags this) ->
        fun ~program:(x7651 : WebGLProgram.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7653) "useProgram"
               [|(Ojs.option_to_js WebGLProgram.t_to_js x7651)|])
    let (validateProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7656 : 'tags this) ->
        fun ~program:(x7655 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7656) "validateProgram"
               [|(WebGLProgram.t_to_js x7655)|])
    let (vertexAttrib1f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> unit) =
      fun (x7660 : 'tags this) ->
        fun ~index:(x7658 : GLuint.t) ->
          fun ~x:(x7659 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7660) "vertexAttrib1f"
                 [|(GLuint.t_to_js x7658);(GLfloat.t_to_js x7659)|])
    let (vertexAttrib1fv' :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7664 : 'tags this) ->
        fun ~index:(x7662 : GLuint.t) ->
          fun ~values:(x7663 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7664) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x7662);(Float32List.t_to_js x7663)|])
    let (vertexAttrib2f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit) =
      fun (x7669 : 'tags this) ->
        fun ~index:(x7666 : GLuint.t) ->
          fun ~x:(x7667 : GLfloat.t) ->
            fun ~y:(x7668 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7669) "vertexAttrib2f"
                   [|(GLuint.t_to_js x7666);(GLfloat.t_to_js x7667);(
                     GLfloat.t_to_js x7668)|])
    let (vertexAttrib2fv' :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7673 : 'tags this) ->
        fun ~index:(x7671 : GLuint.t) ->
          fun ~values:(x7672 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7673) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x7671);(Float32List.t_to_js x7672)|])
    let (vertexAttrib3f :
      'tags this ->
        index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7679 : 'tags this) ->
        fun ~index:(x7675 : GLuint.t) ->
          fun ~x:(x7676 : GLfloat.t) ->
            fun ~y:(x7677 : GLfloat.t) ->
              fun ~z:(x7678 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7679) "vertexAttrib3f"
                     [|(GLuint.t_to_js x7675);(GLfloat.t_to_js x7676);(
                       GLfloat.t_to_js x7677);(GLfloat.t_to_js x7678)|])
    let (vertexAttrib3fv' :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7683 : 'tags this) ->
        fun ~index:(x7681 : GLuint.t) ->
          fun ~values:(x7682 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7683) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x7681);(Float32List.t_to_js x7682)|])
    let (vertexAttrib4f :
      'tags this ->
        index:GLuint.t ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7690 : 'tags this) ->
        fun ~index:(x7685 : GLuint.t) ->
          fun ~x:(x7686 : GLfloat.t) ->
            fun ~y:(x7687 : GLfloat.t) ->
              fun ~z:(x7688 : GLfloat.t) ->
                fun ~w:(x7689 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7690) "vertexAttrib4f"
                       [|(GLuint.t_to_js x7685);(GLfloat.t_to_js x7686);(
                         GLfloat.t_to_js x7687);(GLfloat.t_to_js x7688);(
                         GLfloat.t_to_js x7689)|])
    let (vertexAttrib4fv' :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7694 : 'tags this) ->
        fun ~index:(x7692 : GLuint.t) ->
          fun ~values:(x7693 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7694) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x7692);(Float32List.t_to_js x7693)|])
    let (vertexAttribPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t ->
              normalized:GLboolean.t ->
                stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x7702 : 'tags this) ->
        fun ~index:(x7696 : GLuint.t) ->
          fun ~size:(x7697 : GLint.t) ->
            fun ~type_:(x7698 : GLenum.t) ->
              fun ~normalized:(x7699 : GLboolean.t) ->
                fun ~stride:(x7700 : GLsizei.t) ->
                  fun ~offset:(x7701 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x7702)
                         "vertexAttribPointer"
                         [|(GLuint.t_to_js x7696);(GLint.t_to_js x7697);(
                           GLenum.t_to_js x7698);(GLboolean.t_to_js x7699);(
                           GLsizei.t_to_js x7700);(GLintptr.t_to_js x7701)|])
    let (viewport :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7708 : 'tags this) ->
        fun ~x:(x7704 : GLint.t) ->
          fun ~y:(x7705 : GLint.t) ->
            fun ~width:(x7706 : GLsizei.t) ->
              fun ~height:(x7707 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7708) "viewport"
                     [|(GLint.t_to_js x7704);(GLint.t_to_js x7705);(GLsizei.t_to_js
                                                                    x7706);(
                       GLsizei.t_to_js x7707)|])
    let (get_ACTIVE_ATTRIBUTES : 'tags this -> GLenum.t) =
      fun (x7710 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7710)
             "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : 'tags this -> GLenum.t) =
      fun (x7712 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7712) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x7714 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7714) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : 'tags this -> GLenum.t) =
      fun (x7716 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7716)
             "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : 'tags this -> GLenum.t) =
      fun (x7718 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7718)
             "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : 'tags this -> GLenum.t) =
      fun (x7720 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7720) "ALPHA")
    let (get_ALPHA_BITS : 'tags this -> GLenum.t) =
      fun (x7722 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7722) "ALPHA_BITS")
    let (get_ALWAYS : 'tags this -> GLenum.t) =
      fun (x7724 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7724) "ALWAYS")
    let (get_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x7726 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7726) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7728 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7728)
             "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : 'tags this -> GLenum.t) =
      fun (x7730 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7730) "ATTACHED_SHADERS")
    let (get_BACK : 'tags this -> GLenum.t) =
      fun (x7732 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7732) "BACK")
    let (get_BLEND : 'tags this -> GLenum.t) =
      fun (x7734 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7734) "BLEND")
    let (get_BLEND_COLOR : 'tags this -> GLenum.t) =
      fun (x7736 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7736) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7738 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7738) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : 'tags this -> GLenum.t) =
      fun (x7740 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7740) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : 'tags this -> GLenum.t) =
      fun (x7742 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7742) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : 'tags this -> GLenum.t) =
      fun (x7744 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7744)
             "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : 'tags this -> GLenum.t) =
      fun (x7746 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7746)
             "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7748 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7748) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : 'tags this -> GLenum.t) =
      fun (x7750 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7750) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : 'tags this -> GLenum.t) =
      fun (x7752 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7752) "BLUE_BITS")
    let (get_BOOL : 'tags this -> GLenum.t) =
      fun (x7754 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7754) "BOOL")
    let (get_BOOL_VEC2 : 'tags this -> GLenum.t) =
      fun (x7756 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7756) "BOOL_VEC2")
    let (get_BOOL_VEC3 : 'tags this -> GLenum.t) =
      fun (x7758 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7758) "BOOL_VEC3")
    let (get_BOOL_VEC4 : 'tags this -> GLenum.t) =
      fun (x7760 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7760) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : 'tags this -> GLenum.t) =
      fun (x7762 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7762)
             "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x7764 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7764) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : 'tags this -> GLenum.t) =
      fun (x7766 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7766) "BUFFER_USAGE")
    let (get_BYTE : 'tags this -> GLenum.t) =
      fun (x7768 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7768) "BYTE")
    let (get_CCW : 'tags this -> GLenum.t) =
      fun (x7770 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7770) "CCW")
    let (get_CLAMP_TO_EDGE : 'tags this -> GLenum.t) =
      fun (x7772 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7772) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : 'tags this -> GLenum.t) =
      fun (x7774 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7774)
             "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7776 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7776) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7778 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7778)
             "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7780 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7780) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : 'tags this -> GLenum.t) =
      fun (x7782 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7782) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : 'tags this -> GLenum.t) =
      fun (x7784 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7784)
             "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x7786 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7786) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x7788 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7788) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : 'tags this -> GLenum.t) =
      fun (x7790 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7790)
             "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : 'tags this -> GLenum.t) =
      fun (x7792 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7792) "CULL_FACE")
    let (get_CULL_FACE_MODE : 'tags this -> GLenum.t) =
      fun (x7794 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7794) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : 'tags this -> GLenum.t) =
      fun (x7796 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7796) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : 'tags this -> GLenum.t) =
      fun (x7798 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7798)
             "CURRENT_VERTEX_ATTRIB")
    let (get_CW : 'tags this -> GLenum.t) =
      fun (x7800 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x7800) "CW")
    let (get_DECR : 'tags this -> GLenum.t) =
      fun (x7802 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7802) "DECR")
    let (get_DECR_WRAP : 'tags this -> GLenum.t) =
      fun (x7804 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7804) "DECR_WRAP")
    let (get_DELETE_STATUS : 'tags this -> GLenum.t) =
      fun (x7806 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7806) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7808 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7808) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : 'tags this -> GLenum.t) =
      fun (x7810 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7810) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7812 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7812) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7814 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7814)
             "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : 'tags this -> GLenum.t) =
      fun (x7816 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7816) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : 'tags this -> GLenum.t) =
      fun (x7818 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7818)
             "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : 'tags this -> GLenum.t) =
      fun (x7820 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7820) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : 'tags this -> GLenum.t) =
      fun (x7822 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7822) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : 'tags this -> GLenum.t) =
      fun (x7824 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7824) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7826 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7826)
             "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : 'tags this -> GLenum.t) =
      fun (x7828 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7828) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7830 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7830) "DEPTH_WRITEMASK")
    let (get_DITHER : 'tags this -> GLenum.t) =
      fun (x7832 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7832) "DITHER")
    let (get_DONT_CARE : 'tags this -> GLenum.t) =
      fun (x7834 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7834) "DONT_CARE")
    let (get_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7836 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7836) "DST_ALPHA")
    let (get_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x7838 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7838) "DST_COLOR")
    let (get_DYNAMIC_DRAW : 'tags this -> GLenum.t) =
      fun (x7840 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7840) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x7842 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7842)
             "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7844 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7844)
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : 'tags this -> GLenum.t) =
      fun (x7846 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7846) "EQUAL")
    let (get_FASTEST : 'tags this -> GLenum.t) =
      fun (x7848 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7848) "FASTEST")
    let (get_FLOAT : 'tags this -> GLenum.t) =
      fun (x7850 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7850) "FLOAT")
    let (get_FLOAT_MAT2 : 'tags this -> GLenum.t) =
      fun (x7852 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7852) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : 'tags this -> GLenum.t) =
      fun (x7854 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7854) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : 'tags this -> GLenum.t) =
      fun (x7856 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7856) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : 'tags this -> GLenum.t) =
      fun (x7858 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7858) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : 'tags this -> GLenum.t) =
      fun (x7860 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7860) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : 'tags this -> GLenum.t) =
      fun (x7862 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7862) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : 'tags this -> GLenum.t) =
      fun (x7864 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7864) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x7866 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7866) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : 'tags this -> GLenum.t) =
      fun (x7868 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7868)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x7870 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7870)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :
      'tags this -> GLenum.t) =
      fun (x7872 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7872)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : 'tags this -> GLenum.t) =
      fun (x7874 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7874)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7876 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7876)
             "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : 'tags this -> GLenum.t) =
      fun (x7878 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7878)
             "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7880 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7880)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : 'tags this -> GLenum.t) =
      fun (x7882 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7882)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
      'tags this -> GLenum.t) =
      fun (x7884 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7884)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : 'tags this -> GLenum.t) =
      fun (x7886 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7886)
             "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : 'tags this -> GLenum.t) =
      fun (x7888 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7888) "FRONT")
    let (get_FRONT_AND_BACK : 'tags this -> GLenum.t) =
      fun (x7890 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7890) "FRONT_AND_BACK")
    let (get_FRONT_FACE : 'tags this -> GLenum.t) =
      fun (x7892 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7892) "FRONT_FACE")
    let (get_FUNC_ADD : 'tags this -> GLenum.t) =
      fun (x7894 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7894) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x7896 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7896)
             "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x7898 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7898) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : 'tags this -> GLenum.t) =
      fun (x7900 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7900)
             "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : 'tags this -> GLenum.t) =
      fun (x7902 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7902) "GEQUAL")
    let (get_GREATER : 'tags this -> GLenum.t) =
      fun (x7904 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7904) "GREATER")
    let (get_GREEN_BITS : 'tags this -> GLenum.t) =
      fun (x7906 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7906) "GREEN_BITS")
    let (get_HIGH_FLOAT : 'tags this -> GLenum.t) =
      fun (x7908 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7908) "HIGH_FLOAT")
    let (get_HIGH_INT : 'tags this -> GLenum.t) =
      fun (x7910 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7910) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : 'tags this -> GLenum.t) =
      fun (x7912 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7912)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : 'tags this -> GLenum.t) =
      fun (x7914 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7914)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : 'tags this -> GLenum.t) =
      fun (x7916 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7916) "INCR")
    let (get_INCR_WRAP : 'tags this -> GLenum.t) =
      fun (x7918 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7918) "INCR_WRAP")
    let (get_INT : 'tags this -> GLenum.t) =
      fun (x7920 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7920) "INT")
    let (get_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x7922 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7922) "INT_VEC2")
    let (get_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x7924 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7924) "INT_VEC3")
    let (get_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x7926 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7926) "INT_VEC4")
    let (get_INVALID_ENUM : 'tags this -> GLenum.t) =
      fun (x7928 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7928) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : 'tags this -> GLenum.t) =
      fun (x7930 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7930)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : 'tags this -> GLenum.t) =
      fun (x7932 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7932)
             "INVALID_OPERATION")
    let (get_INVALID_VALUE : 'tags this -> GLenum.t) =
      fun (x7934 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7934) "INVALID_VALUE")
    let (get_INVERT : 'tags this -> GLenum.t) =
      fun (x7936 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7936) "INVERT")
    let (get_KEEP : 'tags this -> GLenum.t) =
      fun (x7938 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7938) "KEEP")
    let (get_LEQUAL : 'tags this -> GLenum.t) =
      fun (x7940 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7940) "LEQUAL")
    let (get_LESS : 'tags this -> GLenum.t) =
      fun (x7942 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7942) "LESS")
    let (get_LINEAR : 'tags this -> GLenum.t) =
      fun (x7944 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7944) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x7946 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7946)
             "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x7948 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7948)
             "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : 'tags this -> GLenum.t) =
      fun (x7950 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7950) "LINES")
    let (get_LINE_LOOP : 'tags this -> GLenum.t) =
      fun (x7952 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7952) "LINE_LOOP")
    let (get_LINE_STRIP : 'tags this -> GLenum.t) =
      fun (x7954 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7954) "LINE_STRIP")
    let (get_LINE_WIDTH : 'tags this -> GLenum.t) =
      fun (x7956 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7956) "LINE_WIDTH")
    let (get_LINK_STATUS : 'tags this -> GLenum.t) =
      fun (x7958 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7958) "LINK_STATUS")
    let (get_LOW_FLOAT : 'tags this -> GLenum.t) =
      fun (x7960 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7960) "LOW_FLOAT")
    let (get_LOW_INT : 'tags this -> GLenum.t) =
      fun (x7962 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7962) "LOW_INT")
    let (get_LUMINANCE : 'tags this -> GLenum.t) =
      fun (x7964 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7964) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : 'tags this -> GLenum.t) =
      fun (x7966 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7966) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7968 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7968)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x7970 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7970)
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x7972 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7972)
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x7974 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7974)
             "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7976 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7976)
             "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x7978 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7978) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : 'tags this -> GLenum.t) =
      fun (x7980 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7980)
             "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x7982 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7982)
             "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7984 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7984)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x7986 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7986)
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : 'tags this -> GLenum.t) =
      fun (x7988 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7988)
             "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : 'tags this -> GLenum.t) =
      fun (x7990 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7990) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : 'tags this -> GLenum.t) =
      fun (x7992 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7992) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : 'tags this -> GLenum.t) =
      fun (x7994 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7994) "MIRRORED_REPEAT")
    let (get_NEAREST : 'tags this -> GLenum.t) =
      fun (x7996 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7996) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x7998 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7998)
             "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x8000 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8000)
             "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : 'tags this -> GLenum.t) =
      fun (x8002 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8002) "NEVER")
    let (get_NICEST : 'tags this -> GLenum.t) =
      fun (x8004 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8004) "NICEST")
    let (get_NONE : 'tags this -> GLenum.t) =
      fun (x8006 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8006) "NONE")
    let (get_NOTEQUAL : 'tags this -> GLenum.t) =
      fun (x8008 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8008) "NOTEQUAL")
    let (get_NO_ERROR : 'tags this -> GLenum.t) =
      fun (x8010 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8010) "NO_ERROR")
    let (get_ONE : 'tags this -> GLenum.t) =
      fun (x8012 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8012) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x8014 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8014)
             "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x8016 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8016)
             "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x8018 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8018)
             "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x8020 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8020)
             "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x8022 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8022)
             "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x8024 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8024)
             "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : 'tags this -> GLenum.t) =
      fun (x8026 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8026) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x8028 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8028) "PACK_ALIGNMENT")
    let (get_POINTS : 'tags this -> GLenum.t) =
      fun (x8030 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8030) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : 'tags this -> GLenum.t) =
      fun (x8032 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8032)
             "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : 'tags this -> GLenum.t) =
      fun (x8034 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8034)
             "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : 'tags this -> GLenum.t) =
      fun (x8036 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8036)
             "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : 'tags this -> GLenum.t) =
      fun (x8038 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8038) "RED_BITS")
    let (get_RENDERBUFFER : 'tags this -> GLenum.t) =
      fun (x8040 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8040) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x8042 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8042)
             "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8044 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8044)
             "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x8046 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8046)
             "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x8048 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8048)
             "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x8050 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8050)
             "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : 'tags this -> GLenum.t) =
      fun (x8052 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8052)
             "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : 'tags this -> GLenum.t) =
      fun (x8054 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8054)
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x8056 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8056)
             "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x8058 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8058)
             "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : 'tags this -> GLenum.t) =
      fun (x8060 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8060)
             "RENDERBUFFER_WIDTH")
    let (get_RENDERER : 'tags this -> GLenum.t) =
      fun (x8062 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8062) "RENDERER")
    let (get_REPEAT : 'tags this -> GLenum.t) =
      fun (x8064 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8064) "REPEAT")
    let (get_REPLACE : 'tags this -> GLenum.t) =
      fun (x8066 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8066) "REPLACE")
    let (get_RGB : 'tags this -> GLenum.t) =
      fun (x8068 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8068) "RGB")
    let (get_RGB565 : 'tags this -> GLenum.t) =
      fun (x8070 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8070) "RGB565")
    let (get_RGB5_A1 : 'tags this -> GLenum.t) =
      fun (x8072 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8072) "RGB5_A1")
    let (get_RGBA : 'tags this -> GLenum.t) =
      fun (x8074 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8074) "RGBA")
    let (get_RGBA4 : 'tags this -> GLenum.t) =
      fun (x8076 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8076) "RGBA4")
    let (get_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x8078 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8078) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x8080 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8080) "SAMPLER_CUBE")
    let (get_SAMPLES : 'tags this -> GLenum.t) =
      fun (x8082 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8082) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : 'tags this -> GLenum.t) =
      fun (x8084 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8084)
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : 'tags this -> GLenum.t) =
      fun (x8086 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8086) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : 'tags this -> GLenum.t) =
      fun (x8088 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8088) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : 'tags this -> GLenum.t) =
      fun (x8090 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8090)
             "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : 'tags this -> GLenum.t) =
      fun (x8092 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8092)
             "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : 'tags this -> GLenum.t) =
      fun (x8094 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8094) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : 'tags this -> GLenum.t) =
      fun (x8096 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8096) "SCISSOR_TEST")
    let (get_SHADER_TYPE : 'tags this -> GLenum.t) =
      fun (x8098 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8098) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : 'tags this -> GLenum.t) =
      fun (x8100 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8100)
             "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : 'tags this -> GLenum.t) =
      fun (x8102 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8102) "SHORT")
    let (get_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x8104 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8104) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : 'tags this -> GLenum.t) =
      fun (x8106 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8106)
             "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x8108 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8108) "SRC_COLOR")
    let (get_STATIC_DRAW : 'tags this -> GLenum.t) =
      fun (x8110 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8110) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x8112 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8112)
             "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : 'tags this -> GLenum.t) =
      fun (x8114 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8114)
             "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : 'tags this -> GLenum.t) =
      fun (x8116 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8116)
             "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x8118 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8118)
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x8120 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8120)
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : 'tags this -> GLenum.t) =
      fun (x8122 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8122) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x8124 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8124)
             "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8126 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8126)
             "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : 'tags this -> GLenum.t) =
      fun (x8128 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8128) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x8130 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8130)
             "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x8132 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8132)
             "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : 'tags this -> GLenum.t) =
      fun (x8134 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8134) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : 'tags this -> GLenum.t) =
      fun (x8136 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8136) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : 'tags this -> GLenum.t) =
      fun (x8138 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8138) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x8140 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8140)
             "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x8142 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8142)
             "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : 'tags this -> GLenum.t) =
      fun (x8144 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8144) "STENCIL_REF")
    let (get_STENCIL_TEST : 'tags this -> GLenum.t) =
      fun (x8146 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8146) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x8148 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8148)
             "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x8150 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8150)
             "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : 'tags this -> GLenum.t) =
      fun (x8152 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8152) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : 'tags this -> GLenum.t) =
      fun (x8154 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8154) "SUBPIXEL_BITS")
    let (get_TEXTURE : 'tags this -> GLenum.t) =
      fun (x8156 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8156) "TEXTURE")
    let (get_TEXTURE0 : 'tags this -> GLenum.t) =
      fun (x8158 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8158) "TEXTURE0")
    let (get_TEXTURE1 : 'tags this -> GLenum.t) =
      fun (x8160 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8160) "TEXTURE1")
    let (get_TEXTURE10 : 'tags this -> GLenum.t) =
      fun (x8162 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8162) "TEXTURE10")
    let (get_TEXTURE11 : 'tags this -> GLenum.t) =
      fun (x8164 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8164) "TEXTURE11")
    let (get_TEXTURE12 : 'tags this -> GLenum.t) =
      fun (x8166 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8166) "TEXTURE12")
    let (get_TEXTURE13 : 'tags this -> GLenum.t) =
      fun (x8168 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8168) "TEXTURE13")
    let (get_TEXTURE14 : 'tags this -> GLenum.t) =
      fun (x8170 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8170) "TEXTURE14")
    let (get_TEXTURE15 : 'tags this -> GLenum.t) =
      fun (x8172 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8172) "TEXTURE15")
    let (get_TEXTURE16 : 'tags this -> GLenum.t) =
      fun (x8174 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8174) "TEXTURE16")
    let (get_TEXTURE17 : 'tags this -> GLenum.t) =
      fun (x8176 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8176) "TEXTURE17")
    let (get_TEXTURE18 : 'tags this -> GLenum.t) =
      fun (x8178 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8178) "TEXTURE18")
    let (get_TEXTURE19 : 'tags this -> GLenum.t) =
      fun (x8180 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8180) "TEXTURE19")
    let (get_TEXTURE2 : 'tags this -> GLenum.t) =
      fun (x8182 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8182) "TEXTURE2")
    let (get_TEXTURE20 : 'tags this -> GLenum.t) =
      fun (x8184 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8184) "TEXTURE20")
    let (get_TEXTURE21 : 'tags this -> GLenum.t) =
      fun (x8186 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8186) "TEXTURE21")
    let (get_TEXTURE22 : 'tags this -> GLenum.t) =
      fun (x8188 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8188) "TEXTURE22")
    let (get_TEXTURE23 : 'tags this -> GLenum.t) =
      fun (x8190 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8190) "TEXTURE23")
    let (get_TEXTURE24 : 'tags this -> GLenum.t) =
      fun (x8192 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8192) "TEXTURE24")
    let (get_TEXTURE25 : 'tags this -> GLenum.t) =
      fun (x8194 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8194) "TEXTURE25")
    let (get_TEXTURE26 : 'tags this -> GLenum.t) =
      fun (x8196 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8196) "TEXTURE26")
    let (get_TEXTURE27 : 'tags this -> GLenum.t) =
      fun (x8198 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8198) "TEXTURE27")
    let (get_TEXTURE28 : 'tags this -> GLenum.t) =
      fun (x8200 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8200) "TEXTURE28")
    let (get_TEXTURE29 : 'tags this -> GLenum.t) =
      fun (x8202 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8202) "TEXTURE29")
    let (get_TEXTURE3 : 'tags this -> GLenum.t) =
      fun (x8204 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8204) "TEXTURE3")
    let (get_TEXTURE30 : 'tags this -> GLenum.t) =
      fun (x8206 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8206) "TEXTURE30")
    let (get_TEXTURE31 : 'tags this -> GLenum.t) =
      fun (x8208 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8208) "TEXTURE31")
    let (get_TEXTURE4 : 'tags this -> GLenum.t) =
      fun (x8210 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8210) "TEXTURE4")
    let (get_TEXTURE5 : 'tags this -> GLenum.t) =
      fun (x8212 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8212) "TEXTURE5")
    let (get_TEXTURE6 : 'tags this -> GLenum.t) =
      fun (x8214 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8214) "TEXTURE6")
    let (get_TEXTURE7 : 'tags this -> GLenum.t) =
      fun (x8216 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8216) "TEXTURE7")
    let (get_TEXTURE8 : 'tags this -> GLenum.t) =
      fun (x8218 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8218) "TEXTURE8")
    let (get_TEXTURE9 : 'tags this -> GLenum.t) =
      fun (x8220 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8220) "TEXTURE9")
    let (get_TEXTURE_2D : 'tags this -> GLenum.t) =
      fun (x8222 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8222) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : 'tags this -> GLenum.t) =
      fun (x8224 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8224)
             "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x8226 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8226)
             "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x8228 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8228) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : 'tags this -> GLenum.t) =
      fun (x8230 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8230)
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : 'tags this -> GLenum.t) =
      fun (x8232 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8232)
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : 'tags this -> GLenum.t) =
      fun (x8234 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8234)
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : 'tags this -> GLenum.t) =
      fun (x8236 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8236)
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : 'tags this -> GLenum.t) =
      fun (x8238 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8238)
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : 'tags this -> GLenum.t) =
      fun (x8240 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8240)
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : 'tags this -> GLenum.t) =
      fun (x8242 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8242)
             "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : 'tags this -> GLenum.t) =
      fun (x8244 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8244)
             "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : 'tags this -> GLenum.t) =
      fun (x8246 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8246) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : 'tags this -> GLenum.t) =
      fun (x8248 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8248) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : 'tags this -> GLenum.t) =
      fun (x8250 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8250) "TRIANGLES")
    let (get_TRIANGLE_FAN : 'tags this -> GLenum.t) =
      fun (x8252 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8252) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : 'tags this -> GLenum.t) =
      fun (x8254 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8254) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x8256 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8256) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : 'tags this -> GLenum.t) =
      fun (x8258 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8258)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : 'tags this -> GLenum.t) =
      fun (x8260 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8260)
             "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : 'tags this -> GLenum.t) =
      fun (x8262 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8262)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : 'tags this -> GLenum.t) =
      fun (x8264 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8264) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : 'tags this -> GLenum.t) =
      fun (x8266 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8266) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : 'tags this -> GLenum.t) =
      fun (x8268 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8268) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : 'tags this -> GLenum.t) =
      fun (x8270 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8270)
             "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : 'tags this -> GLenum.t) =
      fun (x8272 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8272)
             "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : 'tags this -> GLenum.t) =
      fun (x8274 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8274)
             "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : 'tags this -> GLenum.t) =
      fun (x8276 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8276) "VALIDATE_STATUS")
    let (get_VENDOR : 'tags this -> GLenum.t) =
      fun (x8278 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8278) "VENDOR")
    let (get_VERSION : 'tags this -> GLenum.t) =
      fun (x8280 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8280) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8282 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8282)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : 'tags this -> GLenum.t) =
      fun (x8284 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8284)
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x8286 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8286)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : 'tags this -> GLenum.t) =
      fun (x8288 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8288)
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : 'tags this -> GLenum.t) =
      fun (x8290 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8290)
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x8292 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8292)
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : 'tags this -> GLenum.t) =
      fun (x8294 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8294)
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : 'tags this -> GLenum.t) =
      fun (x8296 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8296) "VERTEX_SHADER")
    let (get_VIEWPORT : 'tags this -> GLenum.t) =
      fun (x8298 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8298) "VIEWPORT")
    let (get_ZERO : 'tags this -> GLenum.t) =
      fun (x8300 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8300) "ZERO")
    let cast_from = Obj.magic
  end
module WebGLRenderingContext =
  struct
    type t =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8303 : Ojs.t) -> t_of_js x8303
    and t_0_to_js : t_0 -> Ojs.t = fun (x8302 : t) -> t_to_js x8302
    type tags =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8306 : Ojs.t) -> intf_of_js __tags_of_js x8306
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8304 : __tags intf) -> intf_to_js __tags_to_js x8304
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") 
             [||])
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ZERO")
  end
module WebGLContextEventInit =
  struct
    type t = [ `EventInit  | `WebGLContextEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8309 : Ojs.t) -> t_of_js x8309
    and t_0_to_js : t_0 -> Ojs.t = fun (x8308 : t) -> t_to_js x8308
    type tags = [ `EventInit  | `WebGLContextEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8312 : Ojs.t) -> intf_of_js __tags_of_js x8312
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8310 : __tags intf) -> intf_to_js __tags_to_js x8310
    let (get_statusMessage : 'tags this -> string) =
      fun (x8314 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8314) "statusMessage")
    let (set_statusMessage : 'tags this -> string -> unit) =
      fun (x8316 : 'tags this) ->
        fun (x8317 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8316) "statusMessage"
            (Ojs.string_to_js x8317)
    let (create : statusMessage:string -> unit -> t) =
      fun ~statusMessage:(x8319 : string) ->
        fun () ->
          let x8320 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x8320 "statusMessage" (Ojs.string_to_js x8319);
          t_of_js x8320
    let cast_from = Obj.magic
  end
module WebGLContextEvent =
  struct
    type t = [ `Event  | `WebGLContextEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8322 : Ojs.t) -> t_of_js x8322
    and t_0_to_js : t_0 -> Ojs.t = fun (x8321 : t) -> t_to_js x8321
    type tags = [ `Event  | `WebGLContextEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8325 : Ojs.t) -> intf_of_js __tags_of_js x8325
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8323 : __tags intf) -> intf_to_js __tags_to_js x8323
    let (get_statusMessage : 'tags this -> string) =
      fun (x8327 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8327) "statusMessage")
    let (create : statusMessage:string -> unit -> t) =
      fun ~statusMessage:(x8329 : string) ->
        fun () ->
          let x8330 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x8330 "statusMessage" (Ojs.string_to_js x8329);
          t_of_js x8330
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent") "prototype")
    let (create' :
      type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t) =
      fun ~type_:(x8331 : string) ->
        fun ?eventInit:(x8332 : WebGLContextEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
                 (let x8333 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x8333 "push" [|(Ojs.string_to_js x8331)|]);
                  (match x8332 with
                   | Some x8334 ->
                       ignore
                         (Ojs.call x8333 "push"
                            [|(WebGLContextEventInit.t_to_js x8334)|])
                   | None -> ());
                  x8333))
  end
module WebGL2RenderingContextOverloads =
  struct
    type t = [ `WebGL2RenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8336 : Ojs.t) -> t_of_js x8336
    and t_0_to_js : t_0 -> Ojs.t = fun (x8335 : t) -> t_to_js x8335
    type tags = [ `WebGL2RenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8339 : Ojs.t) -> intf_of_js __tags_of_js x8339
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8337 : __tags intf) -> intf_to_js __tags_to_js x8337
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8350 : 'tags this) ->
        fun ~location:(x8341 : WebGLUniformLocation.t option) ->
          fun ~data:(x8342 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8343 : GLuint.t option) ->
              fun ?srcLength:(x8344 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8352 = this_to_js Obj.magic x8350 in
                     Ojs.call (Ojs.get_prop_ascii x8352 "uniform1fv") "apply"
                       [|x8352;((let x8345 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8345 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8341)|]);
                                 ignore
                                   (Ojs.call x8345 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8342)|]);
                                 (match x8343 with
                                  | Some x8347 ->
                                      ignore
                                        (Ojs.call x8345 "push"
                                           [|(GLuint.t_to_js x8347)|])
                                  | None -> ());
                                 (match x8344 with
                                  | Some x8346 ->
                                      ignore
                                        (Ojs.call x8345 "push"
                                           [|(GLuint.t_to_js x8346)|])
                                  | None -> ());
                                 x8345))|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8362 : 'tags this) ->
        fun ~location:(x8353 : WebGLUniformLocation.t option) ->
          fun ~data:(x8354 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8355 : GLuint.t option) ->
              fun ?srcLength:(x8356 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8364 = this_to_js Obj.magic x8362 in
                     Ojs.call (Ojs.get_prop_ascii x8364 "uniform1iv") "apply"
                       [|x8364;((let x8357 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8357 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8353)|]);
                                 ignore
                                   (Ojs.call x8357 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8354)|]);
                                 (match x8355 with
                                  | Some x8359 ->
                                      ignore
                                        (Ojs.call x8357 "push"
                                           [|(GLuint.t_to_js x8359)|])
                                  | None -> ());
                                 (match x8356 with
                                  | Some x8358 ->
                                      ignore
                                        (Ojs.call x8357 "push"
                                           [|(GLuint.t_to_js x8358)|])
                                  | None -> ());
                                 x8357))|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8374 : 'tags this) ->
        fun ~location:(x8365 : WebGLUniformLocation.t option) ->
          fun ~data:(x8366 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8367 : GLuint.t option) ->
              fun ?srcLength:(x8368 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8376 = this_to_js Obj.magic x8374 in
                     Ojs.call (Ojs.get_prop_ascii x8376 "uniform2fv") "apply"
                       [|x8376;((let x8369 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8369 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8365)|]);
                                 ignore
                                   (Ojs.call x8369 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8366)|]);
                                 (match x8367 with
                                  | Some x8371 ->
                                      ignore
                                        (Ojs.call x8369 "push"
                                           [|(GLuint.t_to_js x8371)|])
                                  | None -> ());
                                 (match x8368 with
                                  | Some x8370 ->
                                      ignore
                                        (Ojs.call x8369 "push"
                                           [|(GLuint.t_to_js x8370)|])
                                  | None -> ());
                                 x8369))|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8386 : 'tags this) ->
        fun ~location:(x8377 : WebGLUniformLocation.t option) ->
          fun ~data:(x8378 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8379 : GLuint.t option) ->
              fun ?srcLength:(x8380 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8388 = this_to_js Obj.magic x8386 in
                     Ojs.call (Ojs.get_prop_ascii x8388 "uniform2iv") "apply"
                       [|x8388;((let x8381 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8381 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8377)|]);
                                 ignore
                                   (Ojs.call x8381 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8378)|]);
                                 (match x8379 with
                                  | Some x8383 ->
                                      ignore
                                        (Ojs.call x8381 "push"
                                           [|(GLuint.t_to_js x8383)|])
                                  | None -> ());
                                 (match x8380 with
                                  | Some x8382 ->
                                      ignore
                                        (Ojs.call x8381 "push"
                                           [|(GLuint.t_to_js x8382)|])
                                  | None -> ());
                                 x8381))|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8398 : 'tags this) ->
        fun ~location:(x8389 : WebGLUniformLocation.t option) ->
          fun ~data:(x8390 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8391 : GLuint.t option) ->
              fun ?srcLength:(x8392 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8400 = this_to_js Obj.magic x8398 in
                     Ojs.call (Ojs.get_prop_ascii x8400 "uniform3fv") "apply"
                       [|x8400;((let x8393 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8393 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8389)|]);
                                 ignore
                                   (Ojs.call x8393 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8390)|]);
                                 (match x8391 with
                                  | Some x8395 ->
                                      ignore
                                        (Ojs.call x8393 "push"
                                           [|(GLuint.t_to_js x8395)|])
                                  | None -> ());
                                 (match x8392 with
                                  | Some x8394 ->
                                      ignore
                                        (Ojs.call x8393 "push"
                                           [|(GLuint.t_to_js x8394)|])
                                  | None -> ());
                                 x8393))|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8410 : 'tags this) ->
        fun ~location:(x8401 : WebGLUniformLocation.t option) ->
          fun ~data:(x8402 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8403 : GLuint.t option) ->
              fun ?srcLength:(x8404 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8412 = this_to_js Obj.magic x8410 in
                     Ojs.call (Ojs.get_prop_ascii x8412 "uniform3iv") "apply"
                       [|x8412;((let x8405 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8405 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8401)|]);
                                 ignore
                                   (Ojs.call x8405 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8402)|]);
                                 (match x8403 with
                                  | Some x8407 ->
                                      ignore
                                        (Ojs.call x8405 "push"
                                           [|(GLuint.t_to_js x8407)|])
                                  | None -> ());
                                 (match x8404 with
                                  | Some x8406 ->
                                      ignore
                                        (Ojs.call x8405 "push"
                                           [|(GLuint.t_to_js x8406)|])
                                  | None -> ());
                                 x8405))|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8422 : 'tags this) ->
        fun ~location:(x8413 : WebGLUniformLocation.t option) ->
          fun ~data:(x8414 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8415 : GLuint.t option) ->
              fun ?srcLength:(x8416 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8424 = this_to_js Obj.magic x8422 in
                     Ojs.call (Ojs.get_prop_ascii x8424 "uniform4fv") "apply"
                       [|x8424;((let x8417 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8417 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8413)|]);
                                 ignore
                                   (Ojs.call x8417 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8414)|]);
                                 (match x8415 with
                                  | Some x8419 ->
                                      ignore
                                        (Ojs.call x8417 "push"
                                           [|(GLuint.t_to_js x8419)|])
                                  | None -> ());
                                 (match x8416 with
                                  | Some x8418 ->
                                      ignore
                                        (Ojs.call x8417 "push"
                                           [|(GLuint.t_to_js x8418)|])
                                  | None -> ());
                                 x8417))|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8434 : 'tags this) ->
        fun ~location:(x8425 : WebGLUniformLocation.t option) ->
          fun ~data:(x8426 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8427 : GLuint.t option) ->
              fun ?srcLength:(x8428 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8436 = this_to_js Obj.magic x8434 in
                     Ojs.call (Ojs.get_prop_ascii x8436 "uniform4iv") "apply"
                       [|x8436;((let x8429 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8429 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8425)|]);
                                 ignore
                                   (Ojs.call x8429 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8426)|]);
                                 (match x8427 with
                                  | Some x8431 ->
                                      ignore
                                        (Ojs.call x8429 "push"
                                           [|(GLuint.t_to_js x8431)|])
                                  | None -> ());
                                 (match x8428 with
                                  | Some x8430 ->
                                      ignore
                                        (Ojs.call x8429 "push"
                                           [|(GLuint.t_to_js x8430)|])
                                  | None -> ());
                                 x8429))|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8447 : 'tags this) ->
        fun ~location:(x8437 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8438 : GLboolean.t) ->
            fun ~data:(x8439 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8440 : GLuint.t option) ->
                fun ?srcLength:(x8441 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8449 = this_to_js Obj.magic x8447 in
                       Ojs.call (Ojs.get_prop_ascii x8449 "uniformMatrix2fv")
                         "apply"
                         [|x8449;((let x8442 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8442 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8437)|]);
                                   ignore
                                     (Ojs.call x8442 "push"
                                        [|(GLboolean.t_to_js x8438)|]);
                                   ignore
                                     (Ojs.call x8442 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8439)|]);
                                   (match x8440 with
                                    | Some x8444 ->
                                        ignore
                                          (Ojs.call x8442 "push"
                                             [|(GLuint.t_to_js x8444)|])
                                    | None -> ());
                                   (match x8441 with
                                    | Some x8443 ->
                                        ignore
                                          (Ojs.call x8442 "push"
                                             [|(GLuint.t_to_js x8443)|])
                                    | None -> ());
                                   x8442))|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8460 : 'tags this) ->
        fun ~location:(x8450 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8451 : GLboolean.t) ->
            fun ~data:(x8452 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8453 : GLuint.t option) ->
                fun ?srcLength:(x8454 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8462 = this_to_js Obj.magic x8460 in
                       Ojs.call (Ojs.get_prop_ascii x8462 "uniformMatrix3fv")
                         "apply"
                         [|x8462;((let x8455 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8455 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8450)|]);
                                   ignore
                                     (Ojs.call x8455 "push"
                                        [|(GLboolean.t_to_js x8451)|]);
                                   ignore
                                     (Ojs.call x8455 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8452)|]);
                                   (match x8453 with
                                    | Some x8457 ->
                                        ignore
                                          (Ojs.call x8455 "push"
                                             [|(GLuint.t_to_js x8457)|])
                                    | None -> ());
                                   (match x8454 with
                                    | Some x8456 ->
                                        ignore
                                          (Ojs.call x8455 "push"
                                             [|(GLuint.t_to_js x8456)|])
                                    | None -> ());
                                   x8455))|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8473 : 'tags this) ->
        fun ~location:(x8463 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8464 : GLboolean.t) ->
            fun ~data:(x8465 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8466 : GLuint.t option) ->
                fun ?srcLength:(x8467 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8475 = this_to_js Obj.magic x8473 in
                       Ojs.call (Ojs.get_prop_ascii x8475 "uniformMatrix4fv")
                         "apply"
                         [|x8475;((let x8468 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8468 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8463)|]);
                                   ignore
                                     (Ojs.call x8468 "push"
                                        [|(GLboolean.t_to_js x8464)|]);
                                   ignore
                                     (Ojs.call x8468 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8465)|]);
                                   (match x8466 with
                                    | Some x8470 ->
                                        ignore
                                          (Ojs.call x8468 "push"
                                             [|(GLuint.t_to_js x8470)|])
                                    | None -> ());
                                   (match x8467 with
                                    | Some x8469 ->
                                        ignore
                                          (Ojs.call x8468 "push"
                                             [|(GLuint.t_to_js x8469)|])
                                    | None -> ());
                                   x8468))|])
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x8479 : 'tags this) ->
        fun ~target:(x8476 : GLenum.t) ->
          fun ~size:(x8477 : GLsizeiptr.t) ->
            fun ~usage:(x8478 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8479) "bufferData"
                   [|(GLenum.t_to_js x8476);(GLsizeiptr.t_to_js x8477);(
                     GLenum.t_to_js x8478)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          srcData:BufferSource.t option -> usage:GLenum.t -> unit)
      =
      fun (x8485 : 'tags this) ->
        fun ~target:(x8481 : GLenum.t) ->
          fun ~srcData:(x8482 : BufferSource.t option) ->
            fun ~usage:(x8484 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8485) "bufferData"
                   [|(GLenum.t_to_js x8481);(Ojs.option_to_js
                                               BufferSource.t_to_js x8482);(
                     GLenum.t_to_js x8484)|])
    let (bufferData'' :
      'tags this ->
        target:GLenum.t ->
          srcData:ArrayBufferView.t_0 ->
            usage:GLenum.t ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8494 : 'tags this) ->
        fun ~target:(x8487 : GLenum.t) ->
          fun ~srcData:(x8488 : ArrayBufferView.t_0) ->
            fun ~usage:(x8489 : GLenum.t) ->
              fun ~srcOffset:(x8490 : GLuint.t) ->
                fun ?length:(x8491 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8496 = this_to_js Obj.magic x8494 in
                       Ojs.call (Ojs.get_prop_ascii x8496 "bufferData")
                         "apply"
                         [|x8496;((let x8492 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8492 "push"
                                        [|(GLenum.t_to_js x8487)|]);
                                   ignore
                                     (Ojs.call x8492 "push"
                                        [|(ArrayBufferView.t_0_to_js x8488)|]);
                                   ignore
                                     (Ojs.call x8492 "push"
                                        [|(GLenum.t_to_js x8489)|]);
                                   ignore
                                     (Ojs.call x8492 "push"
                                        [|(GLuint.t_to_js x8490)|]);
                                   (match x8491 with
                                    | Some x8493 ->
                                        ignore
                                          (Ojs.call x8492 "push"
                                             [|(GLuint.t_to_js x8493)|])
                                    | None -> ());
                                   x8492))|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t -> srcData:BufferSource.t -> unit)
      =
      fun (x8500 : 'tags this) ->
        fun ~target:(x8497 : GLenum.t) ->
          fun ~dstByteOffset:(x8498 : GLintptr.t) ->
            fun ~srcData:(x8499 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8500) "bufferSubData"
                   [|(GLenum.t_to_js x8497);(GLintptr.t_to_js x8498);(
                     BufferSource.t_to_js x8499)|])
    let (bufferSubData' :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t ->
            srcData:ArrayBufferView.t_0 ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8509 : 'tags this) ->
        fun ~target:(x8502 : GLenum.t) ->
          fun ~dstByteOffset:(x8503 : GLintptr.t) ->
            fun ~srcData:(x8504 : ArrayBufferView.t_0) ->
              fun ~srcOffset:(x8505 : GLuint.t) ->
                fun ?length:(x8506 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8511 = this_to_js Obj.magic x8509 in
                       Ojs.call (Ojs.get_prop_ascii x8511 "bufferSubData")
                         "apply"
                         [|x8511;((let x8507 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8507 "push"
                                        [|(GLenum.t_to_js x8502)|]);
                                   ignore
                                     (Ojs.call x8507 "push"
                                        [|(GLintptr.t_to_js x8503)|]);
                                   ignore
                                     (Ojs.call x8507 "push"
                                        [|(ArrayBufferView.t_0_to_js x8504)|]);
                                   ignore
                                     (Ojs.call x8507 "push"
                                        [|(GLuint.t_to_js x8505)|]);
                                   (match x8506 with
                                    | Some x8508 ->
                                        ignore
                                          (Ojs.call x8507 "push"
                                             [|(GLuint.t_to_js x8508)|])
                                    | None -> ());
                                   x8507))|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8520 : 'tags this) ->
        fun ~target:(x8512 : GLenum.t) ->
          fun ~level:(x8513 : GLint.t) ->
            fun ~internalformat:(x8514 : GLenum.t) ->
              fun ~width:(x8515 : GLsizei.t) ->
                fun ~height:(x8516 : GLsizei.t) ->
                  fun ~border:(x8517 : GLint.t) ->
                    fun ~imageSize:(x8518 : GLsizei.t) ->
                      fun ~offset:(x8519 : GLintptr.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8520)
                             "compressedTexImage2D"
                             [|(GLenum.t_to_js x8512);(GLint.t_to_js x8513);(
                               GLenum.t_to_js x8514);(GLsizei.t_to_js x8515);(
                               GLsizei.t_to_js x8516);(GLint.t_to_js x8517);(
                               GLsizei.t_to_js x8518);(GLintptr.t_to_js x8519)|])
    let (compressedTexImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    srcData:ArrayBufferView.t_0 ->
                      ?srcOffset:GLuint.t ->
                        ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8534 : 'tags this) ->
        fun ~target:(x8522 : GLenum.t) ->
          fun ~level:(x8523 : GLint.t) ->
            fun ~internalformat:(x8524 : GLenum.t) ->
              fun ~width:(x8525 : GLsizei.t) ->
                fun ~height:(x8526 : GLsizei.t) ->
                  fun ~border:(x8527 : GLint.t) ->
                    fun ~srcData:(x8528 : ArrayBufferView.t_0) ->
                      fun ?srcOffset:(x8529 : GLuint.t option) ->
                        fun ?srcLengthOverride:(x8530 : GLuint.t option) ->
                          fun () ->
                            ignore
                              (let x8536 = this_to_js Obj.magic x8534 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x8536
                                    "compressedTexImage2D") "apply"
                                 [|x8536;((let x8531 =
                                             Ojs.new_obj
                                               (Ojs.get_prop_ascii Ojs.global
                                                  "Array") [||] in
                                           ignore
                                             (Ojs.call x8531 "push"
                                                [|(GLenum.t_to_js x8522)|]);
                                           ignore
                                             (Ojs.call x8531 "push"
                                                [|(GLint.t_to_js x8523)|]);
                                           ignore
                                             (Ojs.call x8531 "push"
                                                [|(GLenum.t_to_js x8524)|]);
                                           ignore
                                             (Ojs.call x8531 "push"
                                                [|(GLsizei.t_to_js x8525)|]);
                                           ignore
                                             (Ojs.call x8531 "push"
                                                [|(GLsizei.t_to_js x8526)|]);
                                           ignore
                                             (Ojs.call x8531 "push"
                                                [|(GLint.t_to_js x8527)|]);
                                           ignore
                                             (Ojs.call x8531 "push"
                                                [|(ArrayBufferView.t_0_to_js
                                                     x8528)|]);
                                           (match x8529 with
                                            | Some x8533 ->
                                                ignore
                                                  (Ojs.call x8531 "push"
                                                     [|(GLuint.t_to_js x8533)|])
                                            | None -> ());
                                           (match x8530 with
                                            | Some x8532 ->
                                                ignore
                                                  (Ojs.call x8531 "push"
                                                     [|(GLuint.t_to_js x8532)|])
                                            | None -> ());
                                           x8531))|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8546 : 'tags this) ->
        fun ~target:(x8537 : GLenum.t) ->
          fun ~level:(x8538 : GLint.t) ->
            fun ~xoffset:(x8539 : GLint.t) ->
              fun ~yoffset:(x8540 : GLint.t) ->
                fun ~width:(x8541 : GLsizei.t) ->
                  fun ~height:(x8542 : GLsizei.t) ->
                    fun ~format:(x8543 : GLenum.t) ->
                      fun ~imageSize:(x8544 : GLsizei.t) ->
                        fun ~offset:(x8545 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8546)
                               "compressedTexSubImage2D"
                               [|(GLenum.t_to_js x8537);(GLint.t_to_js x8538);(
                                 GLint.t_to_js x8539);(GLint.t_to_js x8540);(
                                 GLsizei.t_to_js x8541);(GLsizei.t_to_js
                                                           x8542);(GLenum.t_to_js
                                                                    x8543);(
                                 GLsizei.t_to_js x8544);(GLintptr.t_to_js
                                                           x8545)|])
    let (compressedTexSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8561 : 'tags this) ->
        fun ~target:(x8548 : GLenum.t) ->
          fun ~level:(x8549 : GLint.t) ->
            fun ~xoffset:(x8550 : GLint.t) ->
              fun ~yoffset:(x8551 : GLint.t) ->
                fun ~width:(x8552 : GLsizei.t) ->
                  fun ~height:(x8553 : GLsizei.t) ->
                    fun ~format:(x8554 : GLenum.t) ->
                      fun ~srcData:(x8555 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x8556 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x8557 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x8563 = this_to_js Obj.magic x8561 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x8563
                                      "compressedTexSubImage2D") "apply"
                                   [|x8563;((let x8558 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x8558 "push"
                                                  [|(GLenum.t_to_js x8548)|]);
                                             ignore
                                               (Ojs.call x8558 "push"
                                                  [|(GLint.t_to_js x8549)|]);
                                             ignore
                                               (Ojs.call x8558 "push"
                                                  [|(GLint.t_to_js x8550)|]);
                                             ignore
                                               (Ojs.call x8558 "push"
                                                  [|(GLint.t_to_js x8551)|]);
                                             ignore
                                               (Ojs.call x8558 "push"
                                                  [|(GLsizei.t_to_js x8552)|]);
                                             ignore
                                               (Ojs.call x8558 "push"
                                                  [|(GLsizei.t_to_js x8553)|]);
                                             ignore
                                               (Ojs.call x8558 "push"
                                                  [|(GLenum.t_to_js x8554)|]);
                                             ignore
                                               (Ojs.call x8558 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x8555)|]);
                                             (match x8556 with
                                              | Some x8560 ->
                                                  ignore
                                                    (Ojs.call x8558 "push"
                                                       [|(GLuint.t_to_js
                                                            x8560)|])
                                              | None -> ());
                                             (match x8557 with
                                              | Some x8559 ->
                                                  ignore
                                                    (Ojs.call x8558 "push"
                                                       [|(GLuint.t_to_js
                                                            x8559)|])
                                              | None -> ());
                                             x8558))|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8572 : 'tags this) ->
        fun ~x:(x8564 : GLint.t) ->
          fun ~y:(x8565 : GLint.t) ->
            fun ~width:(x8566 : GLsizei.t) ->
              fun ~height:(x8567 : GLsizei.t) ->
                fun ~format:(x8568 : GLenum.t) ->
                  fun ~type_:(x8569 : GLenum.t) ->
                    fun ~dstData:(x8570 : ArrayBufferView.t_0 option) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8572) "readPixels"
                           [|(GLint.t_to_js x8564);(GLint.t_to_js x8565);(
                             GLsizei.t_to_js x8566);(GLsizei.t_to_js x8567);(
                             GLenum.t_to_js x8568);(GLenum.t_to_js x8569);(
                             Ojs.option_to_js ArrayBufferView.t_0_to_js x8570)|])
    let (readPixels' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x8581 : 'tags this) ->
        fun ~x:(x8574 : GLint.t) ->
          fun ~y:(x8575 : GLint.t) ->
            fun ~width:(x8576 : GLsizei.t) ->
              fun ~height:(x8577 : GLsizei.t) ->
                fun ~format:(x8578 : GLenum.t) ->
                  fun ~type_:(x8579 : GLenum.t) ->
                    fun ~offset:(x8580 : GLintptr.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8581) "readPixels"
                           [|(GLint.t_to_js x8574);(GLint.t_to_js x8575);(
                             GLsizei.t_to_js x8576);(GLsizei.t_to_js x8577);(
                             GLenum.t_to_js x8578);(GLenum.t_to_js x8579);(
                             GLintptr.t_to_js x8580)|])
    let (readPixels'' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 -> dstOffset:GLuint.t -> unit)
      =
      fun (x8591 : 'tags this) ->
        fun ~x:(x8583 : GLint.t) ->
          fun ~y:(x8584 : GLint.t) ->
            fun ~width:(x8585 : GLsizei.t) ->
              fun ~height:(x8586 : GLsizei.t) ->
                fun ~format:(x8587 : GLenum.t) ->
                  fun ~type_:(x8588 : GLenum.t) ->
                    fun ~dstData:(x8589 : ArrayBufferView.t_0) ->
                      fun ~dstOffset:(x8590 : GLuint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8591) "readPixels"
                             [|(GLint.t_to_js x8583);(GLint.t_to_js x8584);(
                               GLsizei.t_to_js x8585);(GLsizei.t_to_js x8586);(
                               GLenum.t_to_js x8587);(GLenum.t_to_js x8588);(
                               ArrayBufferView.t_0_to_js x8589);(GLuint.t_to_js
                                                                   x8590)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8603 : 'tags this) ->
        fun ~target:(x8593 : GLenum.t) ->
          fun ~level:(x8594 : GLint.t) ->
            fun ~internalformat:(x8595 : GLint.t) ->
              fun ~width:(x8596 : GLsizei.t) ->
                fun ~height:(x8597 : GLsizei.t) ->
                  fun ~border:(x8598 : GLint.t) ->
                    fun ~format:(x8599 : GLenum.t) ->
                      fun ~type_:(x8600 : GLenum.t) ->
                        fun ~pixels:(x8601 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8603)
                               "texImage2D"
                               [|(GLenum.t_to_js x8593);(GLint.t_to_js x8594);(
                                 GLint.t_to_js x8595);(GLsizei.t_to_js x8596);(
                                 GLsizei.t_to_js x8597);(GLint.t_to_js x8598);(
                                 GLenum.t_to_js x8599);(GLenum.t_to_js x8600);(
                                 Ojs.option_to_js ArrayBufferView.t_0_to_js
                                   x8601)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8611 : 'tags this) ->
        fun ~target:(x8605 : GLenum.t) ->
          fun ~level:(x8606 : GLint.t) ->
            fun ~internalformat:(x8607 : GLint.t) ->
              fun ~format:(x8608 : GLenum.t) ->
                fun ~type_:(x8609 : GLenum.t) ->
                  fun ~source:(x8610 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8611) "texImage2D"
                         [|(GLenum.t_to_js x8605);(GLint.t_to_js x8606);(
                           GLint.t_to_js x8607);(GLenum.t_to_js x8608);(
                           GLenum.t_to_js x8609);(TexImageSource.t_to_js
                                                    x8610)|])
    let (texImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8622 : 'tags this) ->
        fun ~target:(x8613 : GLenum.t) ->
          fun ~level:(x8614 : GLint.t) ->
            fun ~internalformat:(x8615 : GLint.t) ->
              fun ~width:(x8616 : GLsizei.t) ->
                fun ~height:(x8617 : GLsizei.t) ->
                  fun ~border:(x8618 : GLint.t) ->
                    fun ~format:(x8619 : GLenum.t) ->
                      fun ~type_:(x8620 : GLenum.t) ->
                        fun ~pboOffset:(x8621 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8622)
                               "texImage2D"
                               [|(GLenum.t_to_js x8613);(GLint.t_to_js x8614);(
                                 GLint.t_to_js x8615);(GLsizei.t_to_js x8616);(
                                 GLsizei.t_to_js x8617);(GLint.t_to_js x8618);(
                                 GLenum.t_to_js x8619);(GLenum.t_to_js x8620);(
                                 GLintptr.t_to_js x8621)|])
    let (texImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8633 : 'tags this) ->
        fun ~target:(x8624 : GLenum.t) ->
          fun ~level:(x8625 : GLint.t) ->
            fun ~internalformat:(x8626 : GLint.t) ->
              fun ~width:(x8627 : GLsizei.t) ->
                fun ~height:(x8628 : GLsizei.t) ->
                  fun ~border:(x8629 : GLint.t) ->
                    fun ~format:(x8630 : GLenum.t) ->
                      fun ~type_:(x8631 : GLenum.t) ->
                        fun ~source:(x8632 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8633)
                               "texImage2D"
                               [|(GLenum.t_to_js x8624);(GLint.t_to_js x8625);(
                                 GLint.t_to_js x8626);(GLsizei.t_to_js x8627);(
                                 GLsizei.t_to_js x8628);(GLint.t_to_js x8629);(
                                 GLenum.t_to_js x8630);(GLenum.t_to_js x8631);(
                                 TexImageSource.t_to_js x8632)|])
    let (texImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8645 : 'tags this) ->
        fun ~target:(x8635 : GLenum.t) ->
          fun ~level:(x8636 : GLint.t) ->
            fun ~internalformat:(x8637 : GLint.t) ->
              fun ~width:(x8638 : GLsizei.t) ->
                fun ~height:(x8639 : GLsizei.t) ->
                  fun ~border:(x8640 : GLint.t) ->
                    fun ~format:(x8641 : GLenum.t) ->
                      fun ~type_:(x8642 : GLenum.t) ->
                        fun ~srcData:(x8643 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8644 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8645)
                                 "texImage2D"
                                 [|(GLenum.t_to_js x8635);(GLint.t_to_js
                                                             x8636);(
                                   GLint.t_to_js x8637);(GLsizei.t_to_js
                                                           x8638);(GLsizei.t_to_js
                                                                    x8639);(
                                   GLint.t_to_js x8640);(GLenum.t_to_js x8641);(
                                   GLenum.t_to_js x8642);(ArrayBufferView.t_0_to_js
                                                            x8643);(GLuint.t_to_js
                                                                    x8644)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 option -> unit)
      =
      fun (x8657 : 'tags this) ->
        fun ~target:(x8647 : GLenum.t) ->
          fun ~level:(x8648 : GLint.t) ->
            fun ~xoffset:(x8649 : GLint.t) ->
              fun ~yoffset:(x8650 : GLint.t) ->
                fun ~width:(x8651 : GLsizei.t) ->
                  fun ~height:(x8652 : GLsizei.t) ->
                    fun ~format:(x8653 : GLenum.t) ->
                      fun ~type_:(x8654 : GLenum.t) ->
                        fun ~pixels:(x8655 : ArrayBufferView.t_0 option) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8657)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8647);(GLint.t_to_js x8648);(
                                 GLint.t_to_js x8649);(GLint.t_to_js x8650);(
                                 GLsizei.t_to_js x8651);(GLsizei.t_to_js
                                                           x8652);(GLenum.t_to_js
                                                                    x8653);(
                                 GLenum.t_to_js x8654);(Ojs.option_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x8655)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8666 : 'tags this) ->
        fun ~target:(x8659 : GLenum.t) ->
          fun ~level:(x8660 : GLint.t) ->
            fun ~xoffset:(x8661 : GLint.t) ->
              fun ~yoffset:(x8662 : GLint.t) ->
                fun ~format:(x8663 : GLenum.t) ->
                  fun ~type_:(x8664 : GLenum.t) ->
                    fun ~source:(x8665 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8666)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x8659);(GLint.t_to_js x8660);(
                             GLint.t_to_js x8661);(GLint.t_to_js x8662);(
                             GLenum.t_to_js x8663);(GLenum.t_to_js x8664);(
                             TexImageSource.t_to_js x8665)|])
    let (texSubImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8677 : 'tags this) ->
        fun ~target:(x8668 : GLenum.t) ->
          fun ~level:(x8669 : GLint.t) ->
            fun ~xoffset:(x8670 : GLint.t) ->
              fun ~yoffset:(x8671 : GLint.t) ->
                fun ~width:(x8672 : GLsizei.t) ->
                  fun ~height:(x8673 : GLsizei.t) ->
                    fun ~format:(x8674 : GLenum.t) ->
                      fun ~type_:(x8675 : GLenum.t) ->
                        fun ~pboOffset:(x8676 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8677)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8668);(GLint.t_to_js x8669);(
                                 GLint.t_to_js x8670);(GLint.t_to_js x8671);(
                                 GLsizei.t_to_js x8672);(GLsizei.t_to_js
                                                           x8673);(GLenum.t_to_js
                                                                    x8674);(
                                 GLenum.t_to_js x8675);(GLintptr.t_to_js
                                                          x8676)|])
    let (texSubImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8688 : 'tags this) ->
        fun ~target:(x8679 : GLenum.t) ->
          fun ~level:(x8680 : GLint.t) ->
            fun ~xoffset:(x8681 : GLint.t) ->
              fun ~yoffset:(x8682 : GLint.t) ->
                fun ~width:(x8683 : GLsizei.t) ->
                  fun ~height:(x8684 : GLsizei.t) ->
                    fun ~format:(x8685 : GLenum.t) ->
                      fun ~type_:(x8686 : GLenum.t) ->
                        fun ~source:(x8687 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8688)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8679);(GLint.t_to_js x8680);(
                                 GLint.t_to_js x8681);(GLint.t_to_js x8682);(
                                 GLsizei.t_to_js x8683);(GLsizei.t_to_js
                                                           x8684);(GLenum.t_to_js
                                                                    x8685);(
                                 GLenum.t_to_js x8686);(TexImageSource.t_to_js
                                                          x8687)|])
    let (texSubImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8700 : 'tags this) ->
        fun ~target:(x8690 : GLenum.t) ->
          fun ~level:(x8691 : GLint.t) ->
            fun ~xoffset:(x8692 : GLint.t) ->
              fun ~yoffset:(x8693 : GLint.t) ->
                fun ~width:(x8694 : GLsizei.t) ->
                  fun ~height:(x8695 : GLsizei.t) ->
                    fun ~format:(x8696 : GLenum.t) ->
                      fun ~type_:(x8697 : GLenum.t) ->
                        fun ~srcData:(x8698 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8699 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8700)
                                 "texSubImage2D"
                                 [|(GLenum.t_to_js x8690);(GLint.t_to_js
                                                             x8691);(
                                   GLint.t_to_js x8692);(GLint.t_to_js x8693);(
                                   GLsizei.t_to_js x8694);(GLsizei.t_to_js
                                                             x8695);(
                                   GLenum.t_to_js x8696);(GLenum.t_to_js
                                                            x8697);(ArrayBufferView.t_0_to_js
                                                                    x8698);(
                                   GLuint.t_to_js x8699)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8710 : 'tags this) ->
        fun ~location:(x8702 : WebGLUniformLocation.t option) ->
          fun ~data:(x8703 : Float32List.t) ->
            fun ?srcOffset:(x8704 : GLuint.t option) ->
              fun ?srcLength:(x8705 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8712 = this_to_js Obj.magic x8710 in
                     Ojs.call (Ojs.get_prop_ascii x8712 "uniform1fv") "apply"
                       [|x8712;((let x8706 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8706 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8702)|]);
                                 ignore
                                   (Ojs.call x8706 "push"
                                      [|(Float32List.t_to_js x8703)|]);
                                 (match x8704 with
                                  | Some x8708 ->
                                      ignore
                                        (Ojs.call x8706 "push"
                                           [|(GLuint.t_to_js x8708)|])
                                  | None -> ());
                                 (match x8705 with
                                  | Some x8707 ->
                                      ignore
                                        (Ojs.call x8706 "push"
                                           [|(GLuint.t_to_js x8707)|])
                                  | None -> ());
                                 x8706))|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8721 : 'tags this) ->
        fun ~location:(x8713 : WebGLUniformLocation.t option) ->
          fun ~data:(x8714 : Int32List.t) ->
            fun ?srcOffset:(x8715 : GLuint.t option) ->
              fun ?srcLength:(x8716 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8723 = this_to_js Obj.magic x8721 in
                     Ojs.call (Ojs.get_prop_ascii x8723 "uniform1iv") "apply"
                       [|x8723;((let x8717 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8717 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8713)|]);
                                 ignore
                                   (Ojs.call x8717 "push"
                                      [|(Int32List.t_to_js x8714)|]);
                                 (match x8715 with
                                  | Some x8719 ->
                                      ignore
                                        (Ojs.call x8717 "push"
                                           [|(GLuint.t_to_js x8719)|])
                                  | None -> ());
                                 (match x8716 with
                                  | Some x8718 ->
                                      ignore
                                        (Ojs.call x8717 "push"
                                           [|(GLuint.t_to_js x8718)|])
                                  | None -> ());
                                 x8717))|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8732 : 'tags this) ->
        fun ~location:(x8724 : WebGLUniformLocation.t option) ->
          fun ~data:(x8725 : Float32List.t) ->
            fun ?srcOffset:(x8726 : GLuint.t option) ->
              fun ?srcLength:(x8727 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8734 = this_to_js Obj.magic x8732 in
                     Ojs.call (Ojs.get_prop_ascii x8734 "uniform2fv") "apply"
                       [|x8734;((let x8728 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8728 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8724)|]);
                                 ignore
                                   (Ojs.call x8728 "push"
                                      [|(Float32List.t_to_js x8725)|]);
                                 (match x8726 with
                                  | Some x8730 ->
                                      ignore
                                        (Ojs.call x8728 "push"
                                           [|(GLuint.t_to_js x8730)|])
                                  | None -> ());
                                 (match x8727 with
                                  | Some x8729 ->
                                      ignore
                                        (Ojs.call x8728 "push"
                                           [|(GLuint.t_to_js x8729)|])
                                  | None -> ());
                                 x8728))|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8743 : 'tags this) ->
        fun ~location:(x8735 : WebGLUniformLocation.t option) ->
          fun ~data:(x8736 : Int32List.t) ->
            fun ?srcOffset:(x8737 : GLuint.t option) ->
              fun ?srcLength:(x8738 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8745 = this_to_js Obj.magic x8743 in
                     Ojs.call (Ojs.get_prop_ascii x8745 "uniform2iv") "apply"
                       [|x8745;((let x8739 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8739 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8735)|]);
                                 ignore
                                   (Ojs.call x8739 "push"
                                      [|(Int32List.t_to_js x8736)|]);
                                 (match x8737 with
                                  | Some x8741 ->
                                      ignore
                                        (Ojs.call x8739 "push"
                                           [|(GLuint.t_to_js x8741)|])
                                  | None -> ());
                                 (match x8738 with
                                  | Some x8740 ->
                                      ignore
                                        (Ojs.call x8739 "push"
                                           [|(GLuint.t_to_js x8740)|])
                                  | None -> ());
                                 x8739))|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8754 : 'tags this) ->
        fun ~location:(x8746 : WebGLUniformLocation.t option) ->
          fun ~data:(x8747 : Float32List.t) ->
            fun ?srcOffset:(x8748 : GLuint.t option) ->
              fun ?srcLength:(x8749 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8756 = this_to_js Obj.magic x8754 in
                     Ojs.call (Ojs.get_prop_ascii x8756 "uniform3fv") "apply"
                       [|x8756;((let x8750 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8750 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8746)|]);
                                 ignore
                                   (Ojs.call x8750 "push"
                                      [|(Float32List.t_to_js x8747)|]);
                                 (match x8748 with
                                  | Some x8752 ->
                                      ignore
                                        (Ojs.call x8750 "push"
                                           [|(GLuint.t_to_js x8752)|])
                                  | None -> ());
                                 (match x8749 with
                                  | Some x8751 ->
                                      ignore
                                        (Ojs.call x8750 "push"
                                           [|(GLuint.t_to_js x8751)|])
                                  | None -> ());
                                 x8750))|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8765 : 'tags this) ->
        fun ~location:(x8757 : WebGLUniformLocation.t option) ->
          fun ~data:(x8758 : Int32List.t) ->
            fun ?srcOffset:(x8759 : GLuint.t option) ->
              fun ?srcLength:(x8760 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8767 = this_to_js Obj.magic x8765 in
                     Ojs.call (Ojs.get_prop_ascii x8767 "uniform3iv") "apply"
                       [|x8767;((let x8761 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8761 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8757)|]);
                                 ignore
                                   (Ojs.call x8761 "push"
                                      [|(Int32List.t_to_js x8758)|]);
                                 (match x8759 with
                                  | Some x8763 ->
                                      ignore
                                        (Ojs.call x8761 "push"
                                           [|(GLuint.t_to_js x8763)|])
                                  | None -> ());
                                 (match x8760 with
                                  | Some x8762 ->
                                      ignore
                                        (Ojs.call x8761 "push"
                                           [|(GLuint.t_to_js x8762)|])
                                  | None -> ());
                                 x8761))|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8776 : 'tags this) ->
        fun ~location:(x8768 : WebGLUniformLocation.t option) ->
          fun ~data:(x8769 : Float32List.t) ->
            fun ?srcOffset:(x8770 : GLuint.t option) ->
              fun ?srcLength:(x8771 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8778 = this_to_js Obj.magic x8776 in
                     Ojs.call (Ojs.get_prop_ascii x8778 "uniform4fv") "apply"
                       [|x8778;((let x8772 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8772 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8768)|]);
                                 ignore
                                   (Ojs.call x8772 "push"
                                      [|(Float32List.t_to_js x8769)|]);
                                 (match x8770 with
                                  | Some x8774 ->
                                      ignore
                                        (Ojs.call x8772 "push"
                                           [|(GLuint.t_to_js x8774)|])
                                  | None -> ());
                                 (match x8771 with
                                  | Some x8773 ->
                                      ignore
                                        (Ojs.call x8772 "push"
                                           [|(GLuint.t_to_js x8773)|])
                                  | None -> ());
                                 x8772))|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8787 : 'tags this) ->
        fun ~location:(x8779 : WebGLUniformLocation.t option) ->
          fun ~data:(x8780 : Int32List.t) ->
            fun ?srcOffset:(x8781 : GLuint.t option) ->
              fun ?srcLength:(x8782 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8789 = this_to_js Obj.magic x8787 in
                     Ojs.call (Ojs.get_prop_ascii x8789 "uniform4iv") "apply"
                       [|x8789;((let x8783 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8783 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8779)|]);
                                 ignore
                                   (Ojs.call x8783 "push"
                                      [|(Int32List.t_to_js x8780)|]);
                                 (match x8781 with
                                  | Some x8785 ->
                                      ignore
                                        (Ojs.call x8783 "push"
                                           [|(GLuint.t_to_js x8785)|])
                                  | None -> ());
                                 (match x8782 with
                                  | Some x8784 ->
                                      ignore
                                        (Ojs.call x8783 "push"
                                           [|(GLuint.t_to_js x8784)|])
                                  | None -> ());
                                 x8783))|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8799 : 'tags this) ->
        fun ~location:(x8790 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8791 : GLboolean.t) ->
            fun ~data:(x8792 : Float32List.t) ->
              fun ?srcOffset:(x8793 : GLuint.t option) ->
                fun ?srcLength:(x8794 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8801 = this_to_js Obj.magic x8799 in
                       Ojs.call (Ojs.get_prop_ascii x8801 "uniformMatrix2fv")
                         "apply"
                         [|x8801;((let x8795 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8795 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8790)|]);
                                   ignore
                                     (Ojs.call x8795 "push"
                                        [|(GLboolean.t_to_js x8791)|]);
                                   ignore
                                     (Ojs.call x8795 "push"
                                        [|(Float32List.t_to_js x8792)|]);
                                   (match x8793 with
                                    | Some x8797 ->
                                        ignore
                                          (Ojs.call x8795 "push"
                                             [|(GLuint.t_to_js x8797)|])
                                    | None -> ());
                                   (match x8794 with
                                    | Some x8796 ->
                                        ignore
                                          (Ojs.call x8795 "push"
                                             [|(GLuint.t_to_js x8796)|])
                                    | None -> ());
                                   x8795))|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8811 : 'tags this) ->
        fun ~location:(x8802 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8803 : GLboolean.t) ->
            fun ~data:(x8804 : Float32List.t) ->
              fun ?srcOffset:(x8805 : GLuint.t option) ->
                fun ?srcLength:(x8806 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8813 = this_to_js Obj.magic x8811 in
                       Ojs.call (Ojs.get_prop_ascii x8813 "uniformMatrix3fv")
                         "apply"
                         [|x8813;((let x8807 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8807 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8802)|]);
                                   ignore
                                     (Ojs.call x8807 "push"
                                        [|(GLboolean.t_to_js x8803)|]);
                                   ignore
                                     (Ojs.call x8807 "push"
                                        [|(Float32List.t_to_js x8804)|]);
                                   (match x8805 with
                                    | Some x8809 ->
                                        ignore
                                          (Ojs.call x8807 "push"
                                             [|(GLuint.t_to_js x8809)|])
                                    | None -> ());
                                   (match x8806 with
                                    | Some x8808 ->
                                        ignore
                                          (Ojs.call x8807 "push"
                                             [|(GLuint.t_to_js x8808)|])
                                    | None -> ());
                                   x8807))|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8823 : 'tags this) ->
        fun ~location:(x8814 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8815 : GLboolean.t) ->
            fun ~data:(x8816 : Float32List.t) ->
              fun ?srcOffset:(x8817 : GLuint.t option) ->
                fun ?srcLength:(x8818 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8825 = this_to_js Obj.magic x8823 in
                       Ojs.call (Ojs.get_prop_ascii x8825 "uniformMatrix4fv")
                         "apply"
                         [|x8825;((let x8819 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8819 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8814)|]);
                                   ignore
                                     (Ojs.call x8819 "push"
                                        [|(GLboolean.t_to_js x8815)|]);
                                   ignore
                                     (Ojs.call x8819 "push"
                                        [|(Float32List.t_to_js x8816)|]);
                                   (match x8817 with
                                    | Some x8821 ->
                                        ignore
                                          (Ojs.call x8819 "push"
                                             [|(GLuint.t_to_js x8821)|])
                                    | None -> ());
                                   (match x8818 with
                                    | Some x8820 ->
                                        ignore
                                          (Ojs.call x8819 "push"
                                             [|(GLuint.t_to_js x8820)|])
                                    | None -> ());
                                   x8819))|])
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObject =
  struct
    type t = [ `WebGLVertexArrayObject ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8827 : Ojs.t) -> t_of_js x8827
    and t_0_to_js : t_0 -> Ojs.t = fun (x8826 : t) -> t_to_js x8826
    type tags = [ `WebGLVertexArrayObject ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8830 : Ojs.t) -> intf_of_js __tags_of_js x8830
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8828 : __tags intf) -> intf_to_js __tags_to_js x8828
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject") 
             [||])
  end
module WebGLTransformFeedback =
  struct
    type t = [ `WebGLTransformFeedback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8833 : Ojs.t) -> t_of_js x8833
    and t_0_to_js : t_0 -> Ojs.t = fun (x8832 : t) -> t_to_js x8832
    type tags = [ `WebGLTransformFeedback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8836 : Ojs.t) -> intf_of_js __tags_of_js x8836
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8834 : __tags intf) -> intf_to_js __tags_to_js x8834
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback") 
             [||])
  end
module WebGLSync =
  struct
    type t = [ `WebGLSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8839 : Ojs.t) -> t_of_js x8839
    and t_0_to_js : t_0 -> Ojs.t = fun (x8838 : t) -> t_to_js x8838
    type tags = [ `WebGLSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8842 : Ojs.t) -> intf_of_js __tags_of_js x8842
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8840 : __tags intf) -> intf_to_js __tags_to_js x8840
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSync")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSync") [||])
  end
module WebGLSampler =
  struct
    type t = [ `WebGLSampler ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8845 : Ojs.t) -> t_of_js x8845
    and t_0_to_js : t_0 -> Ojs.t = fun (x8844 : t) -> t_to_js x8844
    type tags = [ `WebGLSampler ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8848 : Ojs.t) -> intf_of_js __tags_of_js x8848
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8846 : __tags intf) -> intf_to_js __tags_to_js x8846
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSampler") [||])
  end
module WebGLQuery =
  struct
    type t = [ `WebGLQuery ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8851 : Ojs.t) -> t_of_js x8851
    and t_0_to_js : t_0 -> Ojs.t = fun (x8850 : t) -> t_to_js x8850
    type tags = [ `WebGLQuery ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8854 : Ojs.t) -> intf_of_js __tags_of_js x8854
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8852 : __tags intf) -> intf_to_js __tags_to_js x8852
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLQuery") [||])
  end
module Uint32List =
  struct
    type t = (GLuint.t list, Uint32Array.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x8860 : Ojs.t) ->
        union2_of_js
          (fun (x8861 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x8861)
          Uint32Array.t_0_of_js x8860
    and t_to_js : t -> Ojs.t =
      fun (x8856 : (GLuint.t list, Uint32Array.t_0) union2) ->
        union2_to_js
          (fun (x8857 : GLuint.t list) -> Ojs.list_to_js GLuint.t_to_js x8857)
          Uint32Array.t_0_to_js x8856
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8865 : Ojs.t) -> t_of_js x8865
    and t_0_to_js : t_0 -> Ojs.t = fun (x8864 : t) -> t_to_js x8864
  end
module GLuint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x8867 : Ojs.t) -> Ojs.float_of_js x8867
    and t_to_js : t -> Ojs.t = fun (x8866 : float) -> Ojs.float_to_js x8866
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8869 : Ojs.t) -> t_of_js x8869
    and t_0_to_js : t_0 -> Ojs.t = fun (x8868 : t) -> t_to_js x8868
  end
module GLint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x8871 : Ojs.t) -> Ojs.float_of_js x8871
    and t_to_js : t -> Ojs.t = fun (x8870 : float) -> Ojs.float_to_js x8870
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8873 : Ojs.t) -> t_of_js x8873
    and t_0_to_js : t_0 -> Ojs.t = fun (x8872 : t) -> t_to_js x8872
  end
module WebGL2RenderingContextBase =
  struct
    type t = [ `WebGL2RenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8875 : Ojs.t) -> t_of_js x8875
    and t_0_to_js : t_0 -> Ojs.t = fun (x8874 : t) -> t_to_js x8874
    type tags = [ `WebGL2RenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x8878 : Ojs.t) -> intf_of_js __tags_of_js x8878
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x8876 : __tags intf) -> intf_to_js __tags_to_js x8876
    let (clearBufferfv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8887 : 'tags this) ->
        fun ~buffer:(x8880 : GLenum.t) ->
          fun ~drawbuffer:(x8881 : GLint.t) ->
            fun ~values:(x8882 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8883 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8889 = this_to_js Obj.magic x8887 in
                     Ojs.call (Ojs.get_prop_ascii x8889 "clearBufferfv")
                       "apply"
                       [|x8889;((let x8884 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8884 "push"
                                      [|(GLenum.t_to_js x8880)|]);
                                 ignore
                                   (Ojs.call x8884 "push"
                                      [|(GLint.t_to_js x8881)|]);
                                 ignore
                                   (Ojs.call x8884 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8882)|]);
                                 (match x8883 with
                                  | Some x8885 ->
                                      ignore
                                        (Ojs.call x8884 "push"
                                           [|(GLuint.t_to_js x8885)|])
                                  | None -> ());
                                 x8884))|])
    let (clearBufferiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8897 : 'tags this) ->
        fun ~buffer:(x8890 : GLenum.t) ->
          fun ~drawbuffer:(x8891 : GLint.t) ->
            fun ~values:(x8892 : GLint.t Iterable.t_1) ->
              fun ?srcOffset:(x8893 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8899 = this_to_js Obj.magic x8897 in
                     Ojs.call (Ojs.get_prop_ascii x8899 "clearBufferiv")
                       "apply"
                       [|x8899;((let x8894 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8894 "push"
                                      [|(GLenum.t_to_js x8890)|]);
                                 ignore
                                   (Ojs.call x8894 "push"
                                      [|(GLint.t_to_js x8891)|]);
                                 ignore
                                   (Ojs.call x8894 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8892)|]);
                                 (match x8893 with
                                  | Some x8895 ->
                                      ignore
                                        (Ojs.call x8894 "push"
                                           [|(GLuint.t_to_js x8895)|])
                                  | None -> ());
                                 x8894))|])
    let (clearBufferuiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLuint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8907 : 'tags this) ->
        fun ~buffer:(x8900 : GLenum.t) ->
          fun ~drawbuffer:(x8901 : GLint.t) ->
            fun ~values:(x8902 : GLuint.t Iterable.t_1) ->
              fun ?srcOffset:(x8903 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8909 = this_to_js Obj.magic x8907 in
                     Ojs.call (Ojs.get_prop_ascii x8909 "clearBufferuiv")
                       "apply"
                       [|x8909;((let x8904 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8904 "push"
                                      [|(GLenum.t_to_js x8900)|]);
                                 ignore
                                   (Ojs.call x8904 "push"
                                      [|(GLint.t_to_js x8901)|]);
                                 ignore
                                   (Ojs.call x8904 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8902)|]);
                                 (match x8903 with
                                  | Some x8905 ->
                                      ignore
                                        (Ojs.call x8904 "push"
                                           [|(GLuint.t_to_js x8905)|])
                                  | None -> ());
                                 x8904))|])
    let (drawBuffers : 'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x8912 : 'tags this) ->
        fun ~buffers:(x8910 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8912) "drawBuffers"
               [|(Iterable.t_1_to_js GLenum.t_to_js x8910)|])
    let (getActiveUniforms :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t Iterable.t_1 -> pname:GLenum.t -> any)
      =
      fun (x8918 : 'tags this) ->
        fun ~program:(x8914 : WebGLProgram.t) ->
          fun ~uniformIndices:(x8915 : GLuint.t Iterable.t_1) ->
            fun ~pname:(x8917 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x8918) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x8914);(Iterable.t_1_to_js
                                                     GLuint.t_to_js x8915);(
                     GLenum.t_to_js x8917)|])
    let (getUniformIndices :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string Iterable.t_1 -> GLuint.t Iterable.t_1 option)
      =
      fun (x8923 : 'tags this) ->
        fun ~program:(x8920 : WebGLProgram.t) ->
          fun ~uniformNames:(x8921 : string Iterable.t_1) ->
            Ojs.option_of_js
              (fun (x8925 : Ojs.t) -> Iterable.t_1_of_js GLuint.t_of_js x8925)
              (Ojs.call (this_to_js Obj.magic x8923) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x8920);(Iterable.t_1_to_js
                                                   Ojs.string_to_js x8921)|])
    let (invalidateFramebuffer :
      'tags this ->
        target:GLenum.t -> attachments:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x8930 : 'tags this) ->
        fun ~target:(x8927 : GLenum.t) ->
          fun ~attachments:(x8928 : GLenum.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8930) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x8927);(Iterable.t_1_to_js GLenum.t_to_js
                                             x8928)|])
    let (invalidateSubFramebuffer :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t Iterable.t_1 ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x8939 : 'tags this) ->
        fun ~target:(x8932 : GLenum.t) ->
          fun ~attachments:(x8933 : GLenum.t Iterable.t_1) ->
            fun ~x:(x8935 : GLint.t) ->
              fun ~y:(x8936 : GLint.t) ->
                fun ~width:(x8937 : GLsizei.t) ->
                  fun ~height:(x8938 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8939)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x8932);(Iterable.t_1_to_js
                                                     GLenum.t_to_js x8933);(
                           GLint.t_to_js x8935);(GLint.t_to_js x8936);(
                           GLsizei.t_to_js x8937);(GLsizei.t_to_js x8938)|])
    let (transformFeedbackVaryings :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string Iterable.t_1 -> bufferMode:GLenum.t -> unit)
      =
      fun (x8945 : 'tags this) ->
        fun ~program:(x8941 : WebGLProgram.t) ->
          fun ~varyings:(x8942 : string Iterable.t_1) ->
            fun ~bufferMode:(x8944 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8945)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x8941);(Iterable.t_1_to_js
                                                     Ojs.string_to_js x8942);(
                     GLenum.t_to_js x8944)|])
    let (uniform1uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8956 : 'tags this) ->
        fun ~location:(x8947 : WebGLUniformLocation.t option) ->
          fun ~data:(x8948 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x8949 : GLuint.t option) ->
              fun ?srcLength:(x8950 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8958 = this_to_js Obj.magic x8956 in
                     Ojs.call (Ojs.get_prop_ascii x8958 "uniform1uiv")
                       "apply"
                       [|x8958;((let x8951 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8951 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8947)|]);
                                 ignore
                                   (Ojs.call x8951 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8948)|]);
                                 (match x8949 with
                                  | Some x8953 ->
                                      ignore
                                        (Ojs.call x8951 "push"
                                           [|(GLuint.t_to_js x8953)|])
                                  | None -> ());
                                 (match x8950 with
                                  | Some x8952 ->
                                      ignore
                                        (Ojs.call x8951 "push"
                                           [|(GLuint.t_to_js x8952)|])
                                  | None -> ());
                                 x8951))|])
    let (uniform2uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8968 : 'tags this) ->
        fun ~location:(x8959 : WebGLUniformLocation.t option) ->
          fun ~data:(x8960 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x8961 : GLuint.t option) ->
              fun ?srcLength:(x8962 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8970 = this_to_js Obj.magic x8968 in
                     Ojs.call (Ojs.get_prop_ascii x8970 "uniform2uiv")
                       "apply"
                       [|x8970;((let x8963 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8963 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8959)|]);
                                 ignore
                                   (Ojs.call x8963 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8960)|]);
                                 (match x8961 with
                                  | Some x8965 ->
                                      ignore
                                        (Ojs.call x8963 "push"
                                           [|(GLuint.t_to_js x8965)|])
                                  | None -> ());
                                 (match x8962 with
                                  | Some x8964 ->
                                      ignore
                                        (Ojs.call x8963 "push"
                                           [|(GLuint.t_to_js x8964)|])
                                  | None -> ());
                                 x8963))|])
    let (uniform3uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8980 : 'tags this) ->
        fun ~location:(x8971 : WebGLUniformLocation.t option) ->
          fun ~data:(x8972 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x8973 : GLuint.t option) ->
              fun ?srcLength:(x8974 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8982 = this_to_js Obj.magic x8980 in
                     Ojs.call (Ojs.get_prop_ascii x8982 "uniform3uiv")
                       "apply"
                       [|x8982;((let x8975 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8975 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8971)|]);
                                 ignore
                                   (Ojs.call x8975 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8972)|]);
                                 (match x8973 with
                                  | Some x8977 ->
                                      ignore
                                        (Ojs.call x8975 "push"
                                           [|(GLuint.t_to_js x8977)|])
                                  | None -> ());
                                 (match x8974 with
                                  | Some x8976 ->
                                      ignore
                                        (Ojs.call x8975 "push"
                                           [|(GLuint.t_to_js x8976)|])
                                  | None -> ());
                                 x8975))|])
    let (uniform4uiv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8992 : 'tags this) ->
        fun ~location:(x8983 : WebGLUniformLocation.t option) ->
          fun ~data:(x8984 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x8985 : GLuint.t option) ->
              fun ?srcLength:(x8986 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8994 = this_to_js Obj.magic x8992 in
                     Ojs.call (Ojs.get_prop_ascii x8994 "uniform4uiv")
                       "apply"
                       [|x8994;((let x8987 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8987 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x8983)|]);
                                 ignore
                                   (Ojs.call x8987 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x8984)|]);
                                 (match x8985 with
                                  | Some x8989 ->
                                      ignore
                                        (Ojs.call x8987 "push"
                                           [|(GLuint.t_to_js x8989)|])
                                  | None -> ());
                                 (match x8986 with
                                  | Some x8988 ->
                                      ignore
                                        (Ojs.call x8987 "push"
                                           [|(GLuint.t_to_js x8988)|])
                                  | None -> ());
                                 x8987))|])
    let (uniformMatrix2x3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9005 : 'tags this) ->
        fun ~location:(x8995 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x8996 : GLboolean.t) ->
            fun ~data:(x8997 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8998 : GLuint.t option) ->
                fun ?srcLength:(x8999 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9007 = this_to_js Obj.magic x9005 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9007 "uniformMatrix2x3fv")
                         "apply"
                         [|x9007;((let x9000 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9000 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8995)|]);
                                   ignore
                                     (Ojs.call x9000 "push"
                                        [|(GLboolean.t_to_js x8996)|]);
                                   ignore
                                     (Ojs.call x9000 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8997)|]);
                                   (match x8998 with
                                    | Some x9002 ->
                                        ignore
                                          (Ojs.call x9000 "push"
                                             [|(GLuint.t_to_js x9002)|])
                                    | None -> ());
                                   (match x8999 with
                                    | Some x9001 ->
                                        ignore
                                          (Ojs.call x9000 "push"
                                             [|(GLuint.t_to_js x9001)|])
                                    | None -> ());
                                   x9000))|])
    let (uniformMatrix2x4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9018 : 'tags this) ->
        fun ~location:(x9008 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9009 : GLboolean.t) ->
            fun ~data:(x9010 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9011 : GLuint.t option) ->
                fun ?srcLength:(x9012 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9020 = this_to_js Obj.magic x9018 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9020 "uniformMatrix2x4fv")
                         "apply"
                         [|x9020;((let x9013 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9013 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9008)|]);
                                   ignore
                                     (Ojs.call x9013 "push"
                                        [|(GLboolean.t_to_js x9009)|]);
                                   ignore
                                     (Ojs.call x9013 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9010)|]);
                                   (match x9011 with
                                    | Some x9015 ->
                                        ignore
                                          (Ojs.call x9013 "push"
                                             [|(GLuint.t_to_js x9015)|])
                                    | None -> ());
                                   (match x9012 with
                                    | Some x9014 ->
                                        ignore
                                          (Ojs.call x9013 "push"
                                             [|(GLuint.t_to_js x9014)|])
                                    | None -> ());
                                   x9013))|])
    let (uniformMatrix3x2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9031 : 'tags this) ->
        fun ~location:(x9021 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9022 : GLboolean.t) ->
            fun ~data:(x9023 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9024 : GLuint.t option) ->
                fun ?srcLength:(x9025 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9033 = this_to_js Obj.magic x9031 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9033 "uniformMatrix3x2fv")
                         "apply"
                         [|x9033;((let x9026 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9026 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9021)|]);
                                   ignore
                                     (Ojs.call x9026 "push"
                                        [|(GLboolean.t_to_js x9022)|]);
                                   ignore
                                     (Ojs.call x9026 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9023)|]);
                                   (match x9024 with
                                    | Some x9028 ->
                                        ignore
                                          (Ojs.call x9026 "push"
                                             [|(GLuint.t_to_js x9028)|])
                                    | None -> ());
                                   (match x9025 with
                                    | Some x9027 ->
                                        ignore
                                          (Ojs.call x9026 "push"
                                             [|(GLuint.t_to_js x9027)|])
                                    | None -> ());
                                   x9026))|])
    let (uniformMatrix3x4fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9044 : 'tags this) ->
        fun ~location:(x9034 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9035 : GLboolean.t) ->
            fun ~data:(x9036 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9037 : GLuint.t option) ->
                fun ?srcLength:(x9038 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9046 = this_to_js Obj.magic x9044 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9046 "uniformMatrix3x4fv")
                         "apply"
                         [|x9046;((let x9039 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9039 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9034)|]);
                                   ignore
                                     (Ojs.call x9039 "push"
                                        [|(GLboolean.t_to_js x9035)|]);
                                   ignore
                                     (Ojs.call x9039 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9036)|]);
                                   (match x9037 with
                                    | Some x9041 ->
                                        ignore
                                          (Ojs.call x9039 "push"
                                             [|(GLuint.t_to_js x9041)|])
                                    | None -> ());
                                   (match x9038 with
                                    | Some x9040 ->
                                        ignore
                                          (Ojs.call x9039 "push"
                                             [|(GLuint.t_to_js x9040)|])
                                    | None -> ());
                                   x9039))|])
    let (uniformMatrix4x2fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9057 : 'tags this) ->
        fun ~location:(x9047 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9048 : GLboolean.t) ->
            fun ~data:(x9049 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9050 : GLuint.t option) ->
                fun ?srcLength:(x9051 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9059 = this_to_js Obj.magic x9057 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9059 "uniformMatrix4x2fv")
                         "apply"
                         [|x9059;((let x9052 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9052 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9047)|]);
                                   ignore
                                     (Ojs.call x9052 "push"
                                        [|(GLboolean.t_to_js x9048)|]);
                                   ignore
                                     (Ojs.call x9052 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9049)|]);
                                   (match x9050 with
                                    | Some x9054 ->
                                        ignore
                                          (Ojs.call x9052 "push"
                                             [|(GLuint.t_to_js x9054)|])
                                    | None -> ());
                                   (match x9051 with
                                    | Some x9053 ->
                                        ignore
                                          (Ojs.call x9052 "push"
                                             [|(GLuint.t_to_js x9053)|])
                                    | None -> ());
                                   x9052))|])
    let (uniformMatrix4x3fv :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9070 : 'tags this) ->
        fun ~location:(x9060 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9061 : GLboolean.t) ->
            fun ~data:(x9062 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9063 : GLuint.t option) ->
                fun ?srcLength:(x9064 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9072 = this_to_js Obj.magic x9070 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9072 "uniformMatrix4x3fv")
                         "apply"
                         [|x9072;((let x9065 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9065 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9060)|]);
                                   ignore
                                     (Ojs.call x9065 "push"
                                        [|(GLboolean.t_to_js x9061)|]);
                                   ignore
                                     (Ojs.call x9065 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9062)|]);
                                   (match x9063 with
                                    | Some x9067 ->
                                        ignore
                                          (Ojs.call x9065 "push"
                                             [|(GLuint.t_to_js x9067)|])
                                    | None -> ());
                                   (match x9064 with
                                    | Some x9066 ->
                                        ignore
                                          (Ojs.call x9065 "push"
                                             [|(GLuint.t_to_js x9066)|])
                                    | None -> ());
                                   x9065))|])
    let (vertexAttribI4iv :
      'tags this -> index:GLuint.t -> values:GLint.t Iterable.t_1 -> unit) =
      fun (x9076 : 'tags this) ->
        fun ~index:(x9073 : GLuint.t) ->
          fun ~values:(x9074 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9076) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x9073);(Iterable.t_1_to_js GLint.t_to_js
                                             x9074)|])
    let (vertexAttribI4uiv :
      'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t_1 -> unit) =
      fun (x9081 : 'tags this) ->
        fun ~index:(x9078 : GLuint.t) ->
          fun ~values:(x9079 : GLuint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9081) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x9078);(Iterable.t_1_to_js GLuint.t_to_js
                                             x9079)|])
    let (beginQuery :
      'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit) =
      fun (x9085 : 'tags this) ->
        fun ~target:(x9083 : GLenum.t) ->
          fun ~query:(x9084 : WebGLQuery.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9085) "beginQuery"
                 [|(GLenum.t_to_js x9083);(WebGLQuery.t_to_js x9084)|])
    let (beginTransformFeedback :
      'tags this -> primitiveMode:GLenum.t -> unit) =
      fun (x9088 : 'tags this) ->
        fun ~primitiveMode:(x9087 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9088) "beginTransformFeedback"
               [|(GLenum.t_to_js x9087)|])
    let (bindBufferBase :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t -> buffer:WebGLBuffer.t option -> unit)
      =
      fun (x9094 : 'tags this) ->
        fun ~target:(x9090 : GLenum.t) ->
          fun ~index:(x9091 : GLuint.t) ->
            fun ~buffer:(x9092 : WebGLBuffer.t option) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9094) "bindBufferBase"
                   [|(GLenum.t_to_js x9090);(GLuint.t_to_js x9091);(Ojs.option_to_js
                                                                    WebGLBuffer.t_to_js
                                                                    x9092)|])
    let (bindBufferRange :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t ->
            buffer:WebGLBuffer.t option ->
              offset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x9102 : 'tags this) ->
        fun ~target:(x9096 : GLenum.t) ->
          fun ~index:(x9097 : GLuint.t) ->
            fun ~buffer:(x9098 : WebGLBuffer.t option) ->
              fun ~offset:(x9100 : GLintptr.t) ->
                fun ~size:(x9101 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9102) "bindBufferRange"
                       [|(GLenum.t_to_js x9096);(GLuint.t_to_js x9097);(
                         Ojs.option_to_js WebGLBuffer.t_to_js x9098);(
                         GLintptr.t_to_js x9100);(GLsizeiptr.t_to_js x9101)|])
    let (bindSampler :
      'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t option -> unit) =
      fun (x9107 : 'tags this) ->
        fun ~unit:(x9104 : GLuint.t) ->
          fun ~sampler:(x9105 : WebGLSampler.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9107) "bindSampler"
                 [|(GLuint.t_to_js x9104);(Ojs.option_to_js
                                             WebGLSampler.t_to_js x9105)|])
    let (bindTransformFeedback :
      'tags this ->
        target:GLenum.t -> tf:WebGLTransformFeedback.t option -> unit)
      =
      fun (x9112 : 'tags this) ->
        fun ~target:(x9109 : GLenum.t) ->
          fun ~tf:(x9110 : WebGLTransformFeedback.t option) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9112) "bindTransformFeedback"
                 [|(GLenum.t_to_js x9109);(Ojs.option_to_js
                                             WebGLTransformFeedback.t_to_js
                                             x9110)|])
    let (bindVertexArray :
      'tags this -> array:WebGLVertexArrayObject.t option -> unit) =
      fun (x9116 : 'tags this) ->
        fun ~array:(x9114 : WebGLVertexArrayObject.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9116) "bindVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9114)|])
    let (blitFramebuffer :
      'tags this ->
        srcX0:GLint.t ->
          srcY0:GLint.t ->
            srcX1:GLint.t ->
              srcY1:GLint.t ->
                dstX0:GLint.t ->
                  dstY0:GLint.t ->
                    dstX1:GLint.t ->
                      dstY1:GLint.t ->
                        mask:GLbitfield.t -> filter:GLenum.t -> unit)
      =
      fun (x9128 : 'tags this) ->
        fun ~srcX0:(x9118 : GLint.t) ->
          fun ~srcY0:(x9119 : GLint.t) ->
            fun ~srcX1:(x9120 : GLint.t) ->
              fun ~srcY1:(x9121 : GLint.t) ->
                fun ~dstX0:(x9122 : GLint.t) ->
                  fun ~dstY0:(x9123 : GLint.t) ->
                    fun ~dstX1:(x9124 : GLint.t) ->
                      fun ~dstY1:(x9125 : GLint.t) ->
                        fun ~mask:(x9126 : GLbitfield.t) ->
                          fun ~filter:(x9127 : GLenum.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9128)
                                 "blitFramebuffer"
                                 [|(GLint.t_to_js x9118);(GLint.t_to_js x9119);(
                                   GLint.t_to_js x9120);(GLint.t_to_js x9121);(
                                   GLint.t_to_js x9122);(GLint.t_to_js x9123);(
                                   GLint.t_to_js x9124);(GLint.t_to_js x9125);(
                                   GLbitfield.t_to_js x9126);(GLenum.t_to_js
                                                                x9127)|])
    let (clearBufferfi :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit)
      =
      fun (x9134 : 'tags this) ->
        fun ~buffer:(x9130 : GLenum.t) ->
          fun ~drawbuffer:(x9131 : GLint.t) ->
            fun ~depth:(x9132 : GLfloat.t) ->
              fun ~stencil:(x9133 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9134) "clearBufferfi"
                     [|(GLenum.t_to_js x9130);(GLint.t_to_js x9131);(
                       GLfloat.t_to_js x9132);(GLint.t_to_js x9133)|])
    let (clearBufferfv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Float32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9142 : 'tags this) ->
        fun ~buffer:(x9136 : GLenum.t) ->
          fun ~drawbuffer:(x9137 : GLint.t) ->
            fun ~values:(x9138 : Float32List.t) ->
              fun ?srcOffset:(x9139 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9144 = this_to_js Obj.magic x9142 in
                     Ojs.call (Ojs.get_prop_ascii x9144 "clearBufferfv")
                       "apply"
                       [|x9144;((let x9140 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9140 "push"
                                      [|(GLenum.t_to_js x9136)|]);
                                 ignore
                                   (Ojs.call x9140 "push"
                                      [|(GLint.t_to_js x9137)|]);
                                 ignore
                                   (Ojs.call x9140 "push"
                                      [|(Float32List.t_to_js x9138)|]);
                                 (match x9139 with
                                  | Some x9141 ->
                                      ignore
                                        (Ojs.call x9140 "push"
                                           [|(GLuint.t_to_js x9141)|])
                                  | None -> ());
                                 x9140))|])
    let (clearBufferiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Int32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9151 : 'tags this) ->
        fun ~buffer:(x9145 : GLenum.t) ->
          fun ~drawbuffer:(x9146 : GLint.t) ->
            fun ~values:(x9147 : Int32List.t) ->
              fun ?srcOffset:(x9148 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9153 = this_to_js Obj.magic x9151 in
                     Ojs.call (Ojs.get_prop_ascii x9153 "clearBufferiv")
                       "apply"
                       [|x9153;((let x9149 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9149 "push"
                                      [|(GLenum.t_to_js x9145)|]);
                                 ignore
                                   (Ojs.call x9149 "push"
                                      [|(GLint.t_to_js x9146)|]);
                                 ignore
                                   (Ojs.call x9149 "push"
                                      [|(Int32List.t_to_js x9147)|]);
                                 (match x9148 with
                                  | Some x9150 ->
                                      ignore
                                        (Ojs.call x9149 "push"
                                           [|(GLuint.t_to_js x9150)|])
                                  | None -> ());
                                 x9149))|])
    let (clearBufferuiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Uint32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9160 : 'tags this) ->
        fun ~buffer:(x9154 : GLenum.t) ->
          fun ~drawbuffer:(x9155 : GLint.t) ->
            fun ~values:(x9156 : Uint32List.t) ->
              fun ?srcOffset:(x9157 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9162 = this_to_js Obj.magic x9160 in
                     Ojs.call (Ojs.get_prop_ascii x9162 "clearBufferuiv")
                       "apply"
                       [|x9162;((let x9158 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9158 "push"
                                      [|(GLenum.t_to_js x9154)|]);
                                 ignore
                                   (Ojs.call x9158 "push"
                                      [|(GLint.t_to_js x9155)|]);
                                 ignore
                                   (Ojs.call x9158 "push"
                                      [|(Uint32List.t_to_js x9156)|]);
                                 (match x9157 with
                                  | Some x9159 ->
                                      ignore
                                        (Ojs.call x9158 "push"
                                           [|(GLuint.t_to_js x9159)|])
                                  | None -> ());
                                 x9158))|])
    let (clientWaitSync :
      'tags this ->
        sync:WebGLSync.t ->
          flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t)
      =
      fun (x9166 : 'tags this) ->
        fun ~sync:(x9163 : WebGLSync.t) ->
          fun ~flags:(x9164 : GLbitfield.t) ->
            fun ~timeout:(x9165 : GLuint64.t) ->
              GLenum.t_of_js
                (Ojs.call (this_to_js Obj.magic x9166) "clientWaitSync"
                   [|(WebGLSync.t_to_js x9163);(GLbitfield.t_to_js x9164);(
                     GLuint64.t_to_js x9165)|])
    let (compressedTexImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9177 : 'tags this) ->
        fun ~target:(x9168 : GLenum.t) ->
          fun ~level:(x9169 : GLint.t) ->
            fun ~internalformat:(x9170 : GLenum.t) ->
              fun ~width:(x9171 : GLsizei.t) ->
                fun ~height:(x9172 : GLsizei.t) ->
                  fun ~depth:(x9173 : GLsizei.t) ->
                    fun ~border:(x9174 : GLint.t) ->
                      fun ~imageSize:(x9175 : GLsizei.t) ->
                        fun ~offset:(x9176 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x9177)
                               "compressedTexImage3D"
                               [|(GLenum.t_to_js x9168);(GLint.t_to_js x9169);(
                                 GLenum.t_to_js x9170);(GLsizei.t_to_js x9171);(
                                 GLsizei.t_to_js x9172);(GLsizei.t_to_js
                                                           x9173);(GLint.t_to_js
                                                                    x9174);(
                                 GLsizei.t_to_js x9175);(GLintptr.t_to_js
                                                           x9176)|])
    let (compressedTexImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x9192 : 'tags this) ->
        fun ~target:(x9179 : GLenum.t) ->
          fun ~level:(x9180 : GLint.t) ->
            fun ~internalformat:(x9181 : GLenum.t) ->
              fun ~width:(x9182 : GLsizei.t) ->
                fun ~height:(x9183 : GLsizei.t) ->
                  fun ~depth:(x9184 : GLsizei.t) ->
                    fun ~border:(x9185 : GLint.t) ->
                      fun ~srcData:(x9186 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x9187 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x9188 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x9194 = this_to_js Obj.magic x9192 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x9194
                                      "compressedTexImage3D") "apply"
                                   [|x9194;((let x9189 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x9189 "push"
                                                  [|(GLenum.t_to_js x9179)|]);
                                             ignore
                                               (Ojs.call x9189 "push"
                                                  [|(GLint.t_to_js x9180)|]);
                                             ignore
                                               (Ojs.call x9189 "push"
                                                  [|(GLenum.t_to_js x9181)|]);
                                             ignore
                                               (Ojs.call x9189 "push"
                                                  [|(GLsizei.t_to_js x9182)|]);
                                             ignore
                                               (Ojs.call x9189 "push"
                                                  [|(GLsizei.t_to_js x9183)|]);
                                             ignore
                                               (Ojs.call x9189 "push"
                                                  [|(GLsizei.t_to_js x9184)|]);
                                             ignore
                                               (Ojs.call x9189 "push"
                                                  [|(GLint.t_to_js x9185)|]);
                                             ignore
                                               (Ojs.call x9189 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x9186)|]);
                                             (match x9187 with
                                              | Some x9191 ->
                                                  ignore
                                                    (Ojs.call x9189 "push"
                                                       [|(GLuint.t_to_js
                                                            x9191)|])
                                              | None -> ());
                                             (match x9188 with
                                              | Some x9190 ->
                                                  ignore
                                                    (Ojs.call x9189 "push"
                                                       [|(GLuint.t_to_js
                                                            x9190)|])
                                              | None -> ());
                                             x9189))|])
    let (compressedTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9206 : 'tags this) ->
        fun ~target:(x9195 : GLenum.t) ->
          fun ~level:(x9196 : GLint.t) ->
            fun ~xoffset:(x9197 : GLint.t) ->
              fun ~yoffset:(x9198 : GLint.t) ->
                fun ~zoffset:(x9199 : GLint.t) ->
                  fun ~width:(x9200 : GLsizei.t) ->
                    fun ~height:(x9201 : GLsizei.t) ->
                      fun ~depth:(x9202 : GLsizei.t) ->
                        fun ~format:(x9203 : GLenum.t) ->
                          fun ~imageSize:(x9204 : GLsizei.t) ->
                            fun ~offset:(x9205 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9206)
                                   "compressedTexSubImage3D"
                                   [|(GLenum.t_to_js x9195);(GLint.t_to_js
                                                               x9196);(
                                     GLint.t_to_js x9197);(GLint.t_to_js
                                                             x9198);(
                                     GLint.t_to_js x9199);(GLsizei.t_to_js
                                                             x9200);(
                                     GLsizei.t_to_js x9201);(GLsizei.t_to_js
                                                               x9202);(
                                     GLenum.t_to_js x9203);(GLsizei.t_to_js
                                                              x9204);(
                                     GLintptr.t_to_js x9205)|])
    let (compressedTexSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            ?srcOffset:GLuint.t ->
                              ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x9223 : 'tags this) ->
        fun ~target:(x9208 : GLenum.t) ->
          fun ~level:(x9209 : GLint.t) ->
            fun ~xoffset:(x9210 : GLint.t) ->
              fun ~yoffset:(x9211 : GLint.t) ->
                fun ~zoffset:(x9212 : GLint.t) ->
                  fun ~width:(x9213 : GLsizei.t) ->
                    fun ~height:(x9214 : GLsizei.t) ->
                      fun ~depth:(x9215 : GLsizei.t) ->
                        fun ~format:(x9216 : GLenum.t) ->
                          fun ~srcData:(x9217 : ArrayBufferView.t_0) ->
                            fun ?srcOffset:(x9218 : GLuint.t option) ->
                              fun
                                ?srcLengthOverride:(x9219 : GLuint.t option)
                                ->
                                fun () ->
                                  ignore
                                    (let x9225 = this_to_js Obj.magic x9223 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x9225
                                          "compressedTexSubImage3D") "apply"
                                       [|x9225;((let x9220 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(GLenum.t_to_js x9208)|]);
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(GLint.t_to_js x9209)|]);
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(GLint.t_to_js x9210)|]);
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(GLint.t_to_js x9211)|]);
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(GLint.t_to_js x9212)|]);
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9213)|]);
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9214)|]);
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9215)|]);
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(GLenum.t_to_js x9216)|]);
                                                 ignore
                                                   (Ojs.call x9220 "push"
                                                      [|(ArrayBufferView.t_0_to_js
                                                           x9217)|]);
                                                 (match x9218 with
                                                  | Some x9222 ->
                                                      ignore
                                                        (Ojs.call x9220
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9222)|])
                                                  | None -> ());
                                                 (match x9219 with
                                                  | Some x9221 ->
                                                      ignore
                                                        (Ojs.call x9220
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9221)|])
                                                  | None -> ());
                                                 x9220))|])
    let (copyBufferSubData :
      'tags this ->
        readTarget:GLenum.t ->
          writeTarget:GLenum.t ->
            readOffset:GLintptr.t ->
              writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x9231 : 'tags this) ->
        fun ~readTarget:(x9226 : GLenum.t) ->
          fun ~writeTarget:(x9227 : GLenum.t) ->
            fun ~readOffset:(x9228 : GLintptr.t) ->
              fun ~writeOffset:(x9229 : GLintptr.t) ->
                fun ~size:(x9230 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9231)
                       "copyBufferSubData"
                       [|(GLenum.t_to_js x9226);(GLenum.t_to_js x9227);(
                         GLintptr.t_to_js x9228);(GLintptr.t_to_js x9229);(
                         GLsizeiptr.t_to_js x9230)|])
    let (copyTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  x:GLint.t ->
                    y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9242 : 'tags this) ->
        fun ~target:(x9233 : GLenum.t) ->
          fun ~level:(x9234 : GLint.t) ->
            fun ~xoffset:(x9235 : GLint.t) ->
              fun ~yoffset:(x9236 : GLint.t) ->
                fun ~zoffset:(x9237 : GLint.t) ->
                  fun ~x:(x9238 : GLint.t) ->
                    fun ~y:(x9239 : GLint.t) ->
                      fun ~width:(x9240 : GLsizei.t) ->
                        fun ~height:(x9241 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x9242)
                               "copyTexSubImage3D"
                               [|(GLenum.t_to_js x9233);(GLint.t_to_js x9234);(
                                 GLint.t_to_js x9235);(GLint.t_to_js x9236);(
                                 GLint.t_to_js x9237);(GLint.t_to_js x9238);(
                                 GLint.t_to_js x9239);(GLsizei.t_to_js x9240);(
                                 GLsizei.t_to_js x9241)|])
    let (createQuery : 'tags this -> WebGLQuery.t option) =
      fun (x9244 : 'tags this) ->
        Ojs.option_of_js WebGLQuery.t_of_js
          (Ojs.call (this_to_js Obj.magic x9244) "createQuery" [||])
    let (createSampler : 'tags this -> WebGLSampler.t option) =
      fun (x9247 : 'tags this) ->
        Ojs.option_of_js WebGLSampler.t_of_js
          (Ojs.call (this_to_js Obj.magic x9247) "createSampler" [||])
    let (createTransformFeedback :
      'tags this -> WebGLTransformFeedback.t option) =
      fun (x9250 : 'tags this) ->
        Ojs.option_of_js WebGLTransformFeedback.t_of_js
          (Ojs.call (this_to_js Obj.magic x9250) "createTransformFeedback"
             [||])
    let (createVertexArray : 'tags this -> WebGLVertexArrayObject.t option) =
      fun (x9253 : 'tags this) ->
        Ojs.option_of_js WebGLVertexArrayObject.t_of_js
          (Ojs.call (this_to_js Obj.magic x9253) "createVertexArray" [||])
    let (deleteQuery : 'tags this -> query:WebGLQuery.t option -> unit) =
      fun (x9258 : 'tags this) ->
        fun ~query:(x9256 : WebGLQuery.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9258) "deleteQuery"
               [|(Ojs.option_to_js WebGLQuery.t_to_js x9256)|])
    let (deleteSampler : 'tags this -> sampler:WebGLSampler.t option -> unit)
      =
      fun (x9262 : 'tags this) ->
        fun ~sampler:(x9260 : WebGLSampler.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9262) "deleteSampler"
               [|(Ojs.option_to_js WebGLSampler.t_to_js x9260)|])
    let (deleteSync : 'tags this -> sync:WebGLSync.t option -> unit) =
      fun (x9266 : 'tags this) ->
        fun ~sync:(x9264 : WebGLSync.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9266) "deleteSync"
               [|(Ojs.option_to_js WebGLSync.t_to_js x9264)|])
    let (deleteTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t option -> unit) =
      fun (x9270 : 'tags this) ->
        fun ~tf:(x9268 : WebGLTransformFeedback.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9270) "deleteTransformFeedback"
               [|(Ojs.option_to_js WebGLTransformFeedback.t_to_js x9268)|])
    let (deleteVertexArray :
      'tags this -> vertexArray:WebGLVertexArrayObject.t option -> unit) =
      fun (x9274 : 'tags this) ->
        fun ~vertexArray:(x9272 : WebGLVertexArrayObject.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9274) "deleteVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9272)|])
    let (drawArraysInstanced :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x9280 : 'tags this) ->
        fun ~mode:(x9276 : GLenum.t) ->
          fun ~first:(x9277 : GLint.t) ->
            fun ~count:(x9278 : GLsizei.t) ->
              fun ~instanceCount:(x9279 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9280)
                     "drawArraysInstanced"
                     [|(GLenum.t_to_js x9276);(GLint.t_to_js x9277);(
                       GLsizei.t_to_js x9278);(GLsizei.t_to_js x9279)|])
    let (drawBuffers' : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x9284 : 'tags this) ->
        fun ~buffers:(x9282 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9284) "drawBuffers"
               [|(Ojs.list_to_js GLenum.t_to_js x9282)|])
    let (drawElementsInstanced :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x9291 : 'tags this) ->
        fun ~mode:(x9286 : GLenum.t) ->
          fun ~count:(x9287 : GLsizei.t) ->
            fun ~type_:(x9288 : GLenum.t) ->
              fun ~offset:(x9289 : GLintptr.t) ->
                fun ~instanceCount:(x9290 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9291)
                       "drawElementsInstanced"
                       [|(GLenum.t_to_js x9286);(GLsizei.t_to_js x9287);(
                         GLenum.t_to_js x9288);(GLintptr.t_to_js x9289);(
                         GLsizei.t_to_js x9290)|])
    let (drawRangeElements :
      'tags this ->
        mode:GLenum.t ->
          start:GLuint.t ->
            end_:GLuint.t ->
              count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x9299 : 'tags this) ->
        fun ~mode:(x9293 : GLenum.t) ->
          fun ~start:(x9294 : GLuint.t) ->
            fun ~end_:(x9295 : GLuint.t) ->
              fun ~count:(x9296 : GLsizei.t) ->
                fun ~type_:(x9297 : GLenum.t) ->
                  fun ~offset:(x9298 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9299)
                         "drawRangeElements"
                         [|(GLenum.t_to_js x9293);(GLuint.t_to_js x9294);(
                           GLuint.t_to_js x9295);(GLsizei.t_to_js x9296);(
                           GLenum.t_to_js x9297);(GLintptr.t_to_js x9298)|])
    let (endQuery : 'tags this -> target:GLenum.t -> unit) =
      fun (x9302 : 'tags this) ->
        fun ~target:(x9301 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9302) "endQuery"
               [|(GLenum.t_to_js x9301)|])
    let (endTransformFeedback : 'tags this -> unit) =
      fun (x9304 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9304) "endTransformFeedback" [||])
    let (fenceSync :
      'tags this ->
        condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t option)
      =
      fun (x9308 : 'tags this) ->
        fun ~condition:(x9306 : GLenum.t) ->
          fun ~flags:(x9307 : GLbitfield.t) ->
            Ojs.option_of_js WebGLSync.t_of_js
              (Ojs.call (this_to_js Obj.magic x9308) "fenceSync"
                 [|(GLenum.t_to_js x9306);(GLbitfield.t_to_js x9307)|])
    let (framebufferTextureLayer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t option ->
              level:GLint.t -> layer:GLint.t -> unit)
      =
      fun (x9317 : 'tags this) ->
        fun ~target:(x9311 : GLenum.t) ->
          fun ~attachment:(x9312 : GLenum.t) ->
            fun ~texture:(x9313 : WebGLTexture.t option) ->
              fun ~level:(x9315 : GLint.t) ->
                fun ~layer:(x9316 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9317)
                       "framebufferTextureLayer"
                       [|(GLenum.t_to_js x9311);(GLenum.t_to_js x9312);(
                         Ojs.option_to_js WebGLTexture.t_to_js x9313);(
                         GLint.t_to_js x9315);(GLint.t_to_js x9316)|])
    let (getActiveUniformBlockName :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockIndex:GLuint.t -> string option)
      =
      fun (x9321 : 'tags this) ->
        fun ~program:(x9319 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9320 : GLuint.t) ->
            Ojs.option_of_js Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x9321)
                 "getActiveUniformBlockName"
                 [|(WebGLProgram.t_to_js x9319);(GLuint.t_to_js x9320)|])
    let (getActiveUniformBlockParameter :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any)
      =
      fun (x9327 : 'tags this) ->
        fun ~program:(x9324 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9325 : GLuint.t) ->
            fun ~pname:(x9326 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9327)
                   "getActiveUniformBlockParameter"
                   [|(WebGLProgram.t_to_js x9324);(GLuint.t_to_js x9325);(
                     GLenum.t_to_js x9326)|])
    let (getActiveUniforms' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t list -> pname:GLenum.t -> any)
      =
      fun (x9333 : 'tags this) ->
        fun ~program:(x9329 : WebGLProgram.t) ->
          fun ~uniformIndices:(x9330 : GLuint.t list) ->
            fun ~pname:(x9332 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9333) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x9329);(Ojs.list_to_js
                                                     GLuint.t_to_js x9330);(
                     GLenum.t_to_js x9332)|])
    let (getBufferSubData :
      'tags this ->
        target:GLenum.t ->
          srcByteOffset:GLintptr.t ->
            dstBuffer:ArrayBufferView.t_0 ->
              ?dstOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x9343 : 'tags this) ->
        fun ~target:(x9335 : GLenum.t) ->
          fun ~srcByteOffset:(x9336 : GLintptr.t) ->
            fun ~dstBuffer:(x9337 : ArrayBufferView.t_0) ->
              fun ?dstOffset:(x9338 : GLuint.t option) ->
                fun ?length:(x9339 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9345 = this_to_js Obj.magic x9343 in
                       Ojs.call (Ojs.get_prop_ascii x9345 "getBufferSubData")
                         "apply"
                         [|x9345;((let x9340 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9340 "push"
                                        [|(GLenum.t_to_js x9335)|]);
                                   ignore
                                     (Ojs.call x9340 "push"
                                        [|(GLintptr.t_to_js x9336)|]);
                                   ignore
                                     (Ojs.call x9340 "push"
                                        [|(ArrayBufferView.t_0_to_js x9337)|]);
                                   (match x9338 with
                                    | Some x9342 ->
                                        ignore
                                          (Ojs.call x9340 "push"
                                             [|(GLuint.t_to_js x9342)|])
                                    | None -> ());
                                   (match x9339 with
                                    | Some x9341 ->
                                        ignore
                                          (Ojs.call x9340 "push"
                                             [|(GLuint.t_to_js x9341)|])
                                    | None -> ());
                                   x9340))|])
    let (getFragDataLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x9348 : 'tags this) ->
        fun ~program:(x9346 : WebGLProgram.t) ->
          fun ~name:(x9347 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x9348) "getFragDataLocation"
                 [|(WebGLProgram.t_to_js x9346);(Ojs.string_to_js x9347)|])
    let (getIndexedParameter :
      'tags this -> target:GLenum.t -> index:GLuint.t -> any) =
      fun (x9352 : 'tags this) ->
        fun ~target:(x9350 : GLenum.t) ->
          fun ~index:(x9351 : GLuint.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9352) "getIndexedParameter"
                 [|(GLenum.t_to_js x9350);(GLuint.t_to_js x9351)|])
    let (getInternalformatParameter :
      'tags this ->
        target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x9357 : 'tags this) ->
        fun ~target:(x9354 : GLenum.t) ->
          fun ~internalformat:(x9355 : GLenum.t) ->
            fun ~pname:(x9356 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9357)
                   "getInternalformatParameter"
                   [|(GLenum.t_to_js x9354);(GLenum.t_to_js x9355);(GLenum.t_to_js
                                                                    x9356)|])
    let (getQuery :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t option)
      =
      fun (x9361 : 'tags this) ->
        fun ~target:(x9359 : GLenum.t) ->
          fun ~pname:(x9360 : GLenum.t) ->
            Ojs.option_of_js WebGLQuery.t_of_js
              (Ojs.call (this_to_js Obj.magic x9361) "getQuery"
                 [|(GLenum.t_to_js x9359);(GLenum.t_to_js x9360)|])
    let (getQueryParameter :
      'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any) =
      fun (x9366 : 'tags this) ->
        fun ~query:(x9364 : WebGLQuery.t) ->
          fun ~pname:(x9365 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9366) "getQueryParameter"
                 [|(WebGLQuery.t_to_js x9364);(GLenum.t_to_js x9365)|])
    let (getSamplerParameter :
      'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any) =
      fun (x9370 : 'tags this) ->
        fun ~sampler:(x9368 : WebGLSampler.t) ->
          fun ~pname:(x9369 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9370) "getSamplerParameter"
                 [|(WebGLSampler.t_to_js x9368);(GLenum.t_to_js x9369)|])
    let (getSyncParameter :
      'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any) =
      fun (x9374 : 'tags this) ->
        fun ~sync:(x9372 : WebGLSync.t) ->
          fun ~pname:(x9373 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x9374) "getSyncParameter"
                 [|(WebGLSync.t_to_js x9372);(GLenum.t_to_js x9373)|])
    let (getTransformFeedbackVarying :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t option)
      =
      fun (x9378 : 'tags this) ->
        fun ~program:(x9376 : WebGLProgram.t) ->
          fun ~index:(x9377 : GLuint.t) ->
            Ojs.option_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x9378)
                 "getTransformFeedbackVarying"
                 [|(WebGLProgram.t_to_js x9376);(GLuint.t_to_js x9377)|])
    let (getUniformBlockIndex :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t)
      =
      fun (x9383 : 'tags this) ->
        fun ~program:(x9381 : WebGLProgram.t) ->
          fun ~uniformBlockName:(x9382 : string) ->
            GLuint.t_of_js
              (Ojs.call (this_to_js Obj.magic x9383) "getUniformBlockIndex"
                 [|(WebGLProgram.t_to_js x9381);(Ojs.string_to_js x9382)|])
    let (getUniformIndices' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string list -> GLuint.t list option)
      =
      fun (x9388 : 'tags this) ->
        fun ~program:(x9385 : WebGLProgram.t) ->
          fun ~uniformNames:(x9386 : string list) ->
            Ojs.option_of_js
              (fun (x9390 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x9390)
              (Ojs.call (this_to_js Obj.magic x9388) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x9385);(Ojs.list_to_js
                                                   Ojs.string_to_js x9386)|])
    let (invalidateFramebuffer' :
      'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit) =
      fun (x9395 : 'tags this) ->
        fun ~target:(x9392 : GLenum.t) ->
          fun ~attachments:(x9393 : GLenum.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9395) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x9392);(Ojs.list_to_js GLenum.t_to_js
                                             x9393)|])
    let (invalidateSubFramebuffer' :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t list ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9404 : 'tags this) ->
        fun ~target:(x9397 : GLenum.t) ->
          fun ~attachments:(x9398 : GLenum.t list) ->
            fun ~x:(x9400 : GLint.t) ->
              fun ~y:(x9401 : GLint.t) ->
                fun ~width:(x9402 : GLsizei.t) ->
                  fun ~height:(x9403 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9404)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x9397);(Ojs.list_to_js
                                                     GLenum.t_to_js x9398);(
                           GLint.t_to_js x9400);(GLint.t_to_js x9401);(
                           GLsizei.t_to_js x9402);(GLsizei.t_to_js x9403)|])
    let (isQuery : 'tags this -> query:WebGLQuery.t option -> GLboolean.t) =
      fun (x9408 : 'tags this) ->
        fun ~query:(x9406 : WebGLQuery.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9408) "isQuery"
               [|(Ojs.option_to_js WebGLQuery.t_to_js x9406)|])
    let (isSampler :
      'tags this -> sampler:WebGLSampler.t option -> GLboolean.t) =
      fun (x9412 : 'tags this) ->
        fun ~sampler:(x9410 : WebGLSampler.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9412) "isSampler"
               [|(Ojs.option_to_js WebGLSampler.t_to_js x9410)|])
    let (isSync : 'tags this -> sync:WebGLSync.t option -> GLboolean.t) =
      fun (x9416 : 'tags this) ->
        fun ~sync:(x9414 : WebGLSync.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9416) "isSync"
               [|(Ojs.option_to_js WebGLSync.t_to_js x9414)|])
    let (isTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t option -> GLboolean.t) =
      fun (x9420 : 'tags this) ->
        fun ~tf:(x9418 : WebGLTransformFeedback.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9420) "isTransformFeedback"
               [|(Ojs.option_to_js WebGLTransformFeedback.t_to_js x9418)|])
    let (isVertexArray :
      'tags this ->
        vertexArray:WebGLVertexArrayObject.t option -> GLboolean.t)
      =
      fun (x9424 : 'tags this) ->
        fun ~vertexArray:(x9422 : WebGLVertexArrayObject.t option) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x9424) "isVertexArray"
               [|(Ojs.option_to_js WebGLVertexArrayObject.t_to_js x9422)|])
    let (pauseTransformFeedback : 'tags this -> unit) =
      fun (x9426 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9426) "pauseTransformFeedback"
             [||])
    let (readBuffer : 'tags this -> src:GLenum.t -> unit) =
      fun (x9429 : 'tags this) ->
        fun ~src:(x9428 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9429) "readBuffer"
               [|(GLenum.t_to_js x9428)|])
    let (renderbufferStorageMultisample :
      'tags this ->
        target:GLenum.t ->
          samples:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9436 : 'tags this) ->
        fun ~target:(x9431 : GLenum.t) ->
          fun ~samples:(x9432 : GLsizei.t) ->
            fun ~internalformat:(x9433 : GLenum.t) ->
              fun ~width:(x9434 : GLsizei.t) ->
                fun ~height:(x9435 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9436)
                       "renderbufferStorageMultisample"
                       [|(GLenum.t_to_js x9431);(GLsizei.t_to_js x9432);(
                         GLenum.t_to_js x9433);(GLsizei.t_to_js x9434);(
                         GLsizei.t_to_js x9435)|])
    let (resumeTransformFeedback : 'tags this -> unit) =
      fun (x9438 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x9438) "resumeTransformFeedback"
             [||])
    let (samplerParameterf :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x9443 : 'tags this) ->
        fun ~sampler:(x9440 : WebGLSampler.t) ->
          fun ~pname:(x9441 : GLenum.t) ->
            fun ~param:(x9442 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9443) "samplerParameterf"
                   [|(WebGLSampler.t_to_js x9440);(GLenum.t_to_js x9441);(
                     GLfloat.t_to_js x9442)|])
    let (samplerParameteri :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x9448 : 'tags this) ->
        fun ~sampler:(x9445 : WebGLSampler.t) ->
          fun ~pname:(x9446 : GLenum.t) ->
            fun ~param:(x9447 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9448) "samplerParameteri"
                   [|(WebGLSampler.t_to_js x9445);(GLenum.t_to_js x9446);(
                     GLint.t_to_js x9447)|])
    let (texImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x9460 : 'tags this) ->
        fun ~target:(x9450 : GLenum.t) ->
          fun ~level:(x9451 : GLint.t) ->
            fun ~internalformat:(x9452 : GLint.t) ->
              fun ~width:(x9453 : GLsizei.t) ->
                fun ~height:(x9454 : GLsizei.t) ->
                  fun ~depth:(x9455 : GLsizei.t) ->
                    fun ~border:(x9456 : GLint.t) ->
                      fun ~format:(x9457 : GLenum.t) ->
                        fun ~type_:(x9458 : GLenum.t) ->
                          fun ~pboOffset:(x9459 : GLintptr.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9460)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9450);(GLint.t_to_js
                                                             x9451);(
                                   GLint.t_to_js x9452);(GLsizei.t_to_js
                                                           x9453);(GLsizei.t_to_js
                                                                    x9454);(
                                   GLsizei.t_to_js x9455);(GLint.t_to_js
                                                             x9456);(
                                   GLenum.t_to_js x9457);(GLenum.t_to_js
                                                            x9458);(GLintptr.t_to_js
                                                                    x9459)|])
    let (texImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x9472 : 'tags this) ->
        fun ~target:(x9462 : GLenum.t) ->
          fun ~level:(x9463 : GLint.t) ->
            fun ~internalformat:(x9464 : GLint.t) ->
              fun ~width:(x9465 : GLsizei.t) ->
                fun ~height:(x9466 : GLsizei.t) ->
                  fun ~depth:(x9467 : GLsizei.t) ->
                    fun ~border:(x9468 : GLint.t) ->
                      fun ~format:(x9469 : GLenum.t) ->
                        fun ~type_:(x9470 : GLenum.t) ->
                          fun ~source:(x9471 : TexImageSource.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9472)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9462);(GLint.t_to_js
                                                             x9463);(
                                   GLint.t_to_js x9464);(GLsizei.t_to_js
                                                           x9465);(GLsizei.t_to_js
                                                                    x9466);(
                                   GLsizei.t_to_js x9467);(GLint.t_to_js
                                                             x9468);(
                                   GLenum.t_to_js x9469);(GLenum.t_to_js
                                                            x9470);(TexImageSource.t_to_js
                                                                    x9471)|])
    let (texImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 option -> unit)
      =
      fun (x9485 : 'tags this) ->
        fun ~target:(x9474 : GLenum.t) ->
          fun ~level:(x9475 : GLint.t) ->
            fun ~internalformat:(x9476 : GLint.t) ->
              fun ~width:(x9477 : GLsizei.t) ->
                fun ~height:(x9478 : GLsizei.t) ->
                  fun ~depth:(x9479 : GLsizei.t) ->
                    fun ~border:(x9480 : GLint.t) ->
                      fun ~format:(x9481 : GLenum.t) ->
                        fun ~type_:(x9482 : GLenum.t) ->
                          fun ~srcData:(x9483 : ArrayBufferView.t_0 option)
                            ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9485)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9474);(GLint.t_to_js
                                                             x9475);(
                                   GLint.t_to_js x9476);(GLsizei.t_to_js
                                                           x9477);(GLsizei.t_to_js
                                                                    x9478);(
                                   GLsizei.t_to_js x9479);(GLint.t_to_js
                                                             x9480);(
                                   GLenum.t_to_js x9481);(GLenum.t_to_js
                                                            x9482);(Ojs.option_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x9483)|])
    let (texImage3D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            srcOffset:GLuint.t -> unit)
      =
      fun (x9498 : 'tags this) ->
        fun ~target:(x9487 : GLenum.t) ->
          fun ~level:(x9488 : GLint.t) ->
            fun ~internalformat:(x9489 : GLint.t) ->
              fun ~width:(x9490 : GLsizei.t) ->
                fun ~height:(x9491 : GLsizei.t) ->
                  fun ~depth:(x9492 : GLsizei.t) ->
                    fun ~border:(x9493 : GLint.t) ->
                      fun ~format:(x9494 : GLenum.t) ->
                        fun ~type_:(x9495 : GLenum.t) ->
                          fun ~srcData:(x9496 : ArrayBufferView.t_0) ->
                            fun ~srcOffset:(x9497 : GLuint.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9498)
                                   "texImage3D"
                                   [|(GLenum.t_to_js x9487);(GLint.t_to_js
                                                               x9488);(
                                     GLint.t_to_js x9489);(GLsizei.t_to_js
                                                             x9490);(
                                     GLsizei.t_to_js x9491);(GLsizei.t_to_js
                                                               x9492);(
                                     GLint.t_to_js x9493);(GLenum.t_to_js
                                                             x9494);(
                                     GLenum.t_to_js x9495);(ArrayBufferView.t_0_to_js
                                                              x9496);(
                                     GLuint.t_to_js x9497)|])
    let (texStorage2D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9505 : 'tags this) ->
        fun ~target:(x9500 : GLenum.t) ->
          fun ~levels:(x9501 : GLsizei.t) ->
            fun ~internalformat:(x9502 : GLenum.t) ->
              fun ~width:(x9503 : GLsizei.t) ->
                fun ~height:(x9504 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9505) "texStorage2D"
                       [|(GLenum.t_to_js x9500);(GLsizei.t_to_js x9501);(
                         GLenum.t_to_js x9502);(GLsizei.t_to_js x9503);(
                         GLsizei.t_to_js x9504)|])
    let (texStorage3D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit)
      =
      fun (x9513 : 'tags this) ->
        fun ~target:(x9507 : GLenum.t) ->
          fun ~levels:(x9508 : GLsizei.t) ->
            fun ~internalformat:(x9509 : GLenum.t) ->
              fun ~width:(x9510 : GLsizei.t) ->
                fun ~height:(x9511 : GLsizei.t) ->
                  fun ~depth:(x9512 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9513) "texStorage3D"
                         [|(GLenum.t_to_js x9507);(GLsizei.t_to_js x9508);(
                           GLenum.t_to_js x9509);(GLsizei.t_to_js x9510);(
                           GLsizei.t_to_js x9511);(GLsizei.t_to_js x9512)|])
    let (texSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x9526 : 'tags this) ->
        fun ~target:(x9515 : GLenum.t) ->
          fun ~level:(x9516 : GLint.t) ->
            fun ~xoffset:(x9517 : GLint.t) ->
              fun ~yoffset:(x9518 : GLint.t) ->
                fun ~zoffset:(x9519 : GLint.t) ->
                  fun ~width:(x9520 : GLsizei.t) ->
                    fun ~height:(x9521 : GLsizei.t) ->
                      fun ~depth:(x9522 : GLsizei.t) ->
                        fun ~format:(x9523 : GLenum.t) ->
                          fun ~type_:(x9524 : GLenum.t) ->
                            fun ~pboOffset:(x9525 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9526)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9515);(GLint.t_to_js
                                                               x9516);(
                                     GLint.t_to_js x9517);(GLint.t_to_js
                                                             x9518);(
                                     GLint.t_to_js x9519);(GLsizei.t_to_js
                                                             x9520);(
                                     GLsizei.t_to_js x9521);(GLsizei.t_to_js
                                                               x9522);(
                                     GLenum.t_to_js x9523);(GLenum.t_to_js
                                                              x9524);(
                                     GLintptr.t_to_js x9525)|])
    let (texSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x9539 : 'tags this) ->
        fun ~target:(x9528 : GLenum.t) ->
          fun ~level:(x9529 : GLint.t) ->
            fun ~xoffset:(x9530 : GLint.t) ->
              fun ~yoffset:(x9531 : GLint.t) ->
                fun ~zoffset:(x9532 : GLint.t) ->
                  fun ~width:(x9533 : GLsizei.t) ->
                    fun ~height:(x9534 : GLsizei.t) ->
                      fun ~depth:(x9535 : GLsizei.t) ->
                        fun ~format:(x9536 : GLenum.t) ->
                          fun ~type_:(x9537 : GLenum.t) ->
                            fun ~source:(x9538 : TexImageSource.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9539)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9528);(GLint.t_to_js
                                                               x9529);(
                                     GLint.t_to_js x9530);(GLint.t_to_js
                                                             x9531);(
                                     GLint.t_to_js x9532);(GLsizei.t_to_js
                                                             x9533);(
                                     GLsizei.t_to_js x9534);(GLsizei.t_to_js
                                                               x9535);(
                                     GLenum.t_to_js x9536);(GLenum.t_to_js
                                                              x9537);(
                                     TexImageSource.t_to_js x9538)|])
    let (texSubImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t ->
                            srcData:ArrayBufferView.t_0 option ->
                              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9556 : 'tags this) ->
        fun ~target:(x9541 : GLenum.t) ->
          fun ~level:(x9542 : GLint.t) ->
            fun ~xoffset:(x9543 : GLint.t) ->
              fun ~yoffset:(x9544 : GLint.t) ->
                fun ~zoffset:(x9545 : GLint.t) ->
                  fun ~width:(x9546 : GLsizei.t) ->
                    fun ~height:(x9547 : GLsizei.t) ->
                      fun ~depth:(x9548 : GLsizei.t) ->
                        fun ~format:(x9549 : GLenum.t) ->
                          fun ~type_:(x9550 : GLenum.t) ->
                            fun ~srcData:(x9551 : ArrayBufferView.t_0 option)
                              ->
                              fun ?srcOffset:(x9552 : GLuint.t option) ->
                                fun () ->
                                  ignore
                                    (let x9558 = this_to_js Obj.magic x9556 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x9558
                                          "texSubImage3D") "apply"
                                       [|x9558;((let x9553 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLenum.t_to_js x9541)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLint.t_to_js x9542)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLint.t_to_js x9543)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLint.t_to_js x9544)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLint.t_to_js x9545)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9546)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9547)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9548)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLenum.t_to_js x9549)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(GLenum.t_to_js x9550)|]);
                                                 ignore
                                                   (Ojs.call x9553 "push"
                                                      [|(Ojs.option_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x9551)|]);
                                                 (match x9552 with
                                                  | Some x9554 ->
                                                      ignore
                                                        (Ojs.call x9553
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9554)|])
                                                  | None -> ());
                                                 x9553))|])
    let (transformFeedbackVaryings' :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string list -> bufferMode:GLenum.t -> unit)
      =
      fun (x9563 : 'tags this) ->
        fun ~program:(x9559 : WebGLProgram.t) ->
          fun ~varyings:(x9560 : string list) ->
            fun ~bufferMode:(x9562 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9563)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x9559);(Ojs.list_to_js
                                                     Ojs.string_to_js x9560);(
                     GLenum.t_to_js x9562)|])
    let (uniform1ui :
      'tags this ->
        location:WebGLUniformLocation.t option -> v0:GLuint.t -> unit)
      =
      fun (x9568 : 'tags this) ->
        fun ~location:(x9565 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9567 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9568) "uniform1ui"
                 [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9565);(
                   GLuint.t_to_js x9567)|])
    let (uniform1uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9578 : 'tags this) ->
        fun ~location:(x9570 : WebGLUniformLocation.t option) ->
          fun ~data:(x9571 : Uint32List.t) ->
            fun ?srcOffset:(x9572 : GLuint.t option) ->
              fun ?srcLength:(x9573 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9580 = this_to_js Obj.magic x9578 in
                     Ojs.call (Ojs.get_prop_ascii x9580 "uniform1uiv")
                       "apply"
                       [|x9580;((let x9574 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9574 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9570)|]);
                                 ignore
                                   (Ojs.call x9574 "push"
                                      [|(Uint32List.t_to_js x9571)|]);
                                 (match x9572 with
                                  | Some x9576 ->
                                      ignore
                                        (Ojs.call x9574 "push"
                                           [|(GLuint.t_to_js x9576)|])
                                  | None -> ());
                                 (match x9573 with
                                  | Some x9575 ->
                                      ignore
                                        (Ojs.call x9574 "push"
                                           [|(GLuint.t_to_js x9575)|])
                                  | None -> ());
                                 x9574))|])
    let (uniform2ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> unit)
      =
      fun (x9585 : 'tags this) ->
        fun ~location:(x9581 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9583 : GLuint.t) ->
            fun ~v1:(x9584 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9585) "uniform2ui"
                   [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9581);(
                     GLuint.t_to_js x9583);(GLuint.t_to_js x9584)|])
    let (uniform2uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9595 : 'tags this) ->
        fun ~location:(x9587 : WebGLUniformLocation.t option) ->
          fun ~data:(x9588 : Uint32List.t) ->
            fun ?srcOffset:(x9589 : GLuint.t option) ->
              fun ?srcLength:(x9590 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9597 = this_to_js Obj.magic x9595 in
                     Ojs.call (Ojs.get_prop_ascii x9597 "uniform2uiv")
                       "apply"
                       [|x9597;((let x9591 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9591 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9587)|]);
                                 ignore
                                   (Ojs.call x9591 "push"
                                      [|(Uint32List.t_to_js x9588)|]);
                                 (match x9589 with
                                  | Some x9593 ->
                                      ignore
                                        (Ojs.call x9591 "push"
                                           [|(GLuint.t_to_js x9593)|])
                                  | None -> ());
                                 (match x9590 with
                                  | Some x9592 ->
                                      ignore
                                        (Ojs.call x9591 "push"
                                           [|(GLuint.t_to_js x9592)|])
                                  | None -> ());
                                 x9591))|])
    let (uniform3ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit)
      =
      fun (x9603 : 'tags this) ->
        fun ~location:(x9598 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9600 : GLuint.t) ->
            fun ~v1:(x9601 : GLuint.t) ->
              fun ~v2:(x9602 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9603) "uniform3ui"
                     [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9598);(
                       GLuint.t_to_js x9600);(GLuint.t_to_js x9601);(
                       GLuint.t_to_js x9602)|])
    let (uniform3uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9613 : 'tags this) ->
        fun ~location:(x9605 : WebGLUniformLocation.t option) ->
          fun ~data:(x9606 : Uint32List.t) ->
            fun ?srcOffset:(x9607 : GLuint.t option) ->
              fun ?srcLength:(x9608 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9615 = this_to_js Obj.magic x9613 in
                     Ojs.call (Ojs.get_prop_ascii x9615 "uniform3uiv")
                       "apply"
                       [|x9615;((let x9609 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9609 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9605)|]);
                                 ignore
                                   (Ojs.call x9609 "push"
                                      [|(Uint32List.t_to_js x9606)|]);
                                 (match x9607 with
                                  | Some x9611 ->
                                      ignore
                                        (Ojs.call x9609 "push"
                                           [|(GLuint.t_to_js x9611)|])
                                  | None -> ());
                                 (match x9608 with
                                  | Some x9610 ->
                                      ignore
                                        (Ojs.call x9609 "push"
                                           [|(GLuint.t_to_js x9610)|])
                                  | None -> ());
                                 x9609))|])
    let (uniform4ui :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit)
      =
      fun (x9622 : 'tags this) ->
        fun ~location:(x9616 : WebGLUniformLocation.t option) ->
          fun ~v0:(x9618 : GLuint.t) ->
            fun ~v1:(x9619 : GLuint.t) ->
              fun ~v2:(x9620 : GLuint.t) ->
                fun ~v3:(x9621 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9622) "uniform4ui"
                       [|(Ojs.option_to_js WebGLUniformLocation.t_to_js x9616);(
                         GLuint.t_to_js x9618);(GLuint.t_to_js x9619);(
                         GLuint.t_to_js x9620);(GLuint.t_to_js x9621)|])
    let (uniform4uiv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9632 : 'tags this) ->
        fun ~location:(x9624 : WebGLUniformLocation.t option) ->
          fun ~data:(x9625 : Uint32List.t) ->
            fun ?srcOffset:(x9626 : GLuint.t option) ->
              fun ?srcLength:(x9627 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9634 = this_to_js Obj.magic x9632 in
                     Ojs.call (Ojs.get_prop_ascii x9634 "uniform4uiv")
                       "apply"
                       [|x9634;((let x9628 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9628 "push"
                                      [|(Ojs.option_to_js
                                           WebGLUniformLocation.t_to_js x9624)|]);
                                 ignore
                                   (Ojs.call x9628 "push"
                                      [|(Uint32List.t_to_js x9625)|]);
                                 (match x9626 with
                                  | Some x9630 ->
                                      ignore
                                        (Ojs.call x9628 "push"
                                           [|(GLuint.t_to_js x9630)|])
                                  | None -> ());
                                 (match x9627 with
                                  | Some x9629 ->
                                      ignore
                                        (Ojs.call x9628 "push"
                                           [|(GLuint.t_to_js x9629)|])
                                  | None -> ());
                                 x9628))|])
    let (uniformBlockBinding :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit)
      =
      fun (x9638 : 'tags this) ->
        fun ~program:(x9635 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9636 : GLuint.t) ->
            fun ~uniformBlockBinding:(x9637 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9638) "uniformBlockBinding"
                   [|(WebGLProgram.t_to_js x9635);(GLuint.t_to_js x9636);(
                     GLuint.t_to_js x9637)|])
    let (uniformMatrix2x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9649 : 'tags this) ->
        fun ~location:(x9640 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9641 : GLboolean.t) ->
            fun ~data:(x9642 : Float32List.t) ->
              fun ?srcOffset:(x9643 : GLuint.t option) ->
                fun ?srcLength:(x9644 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9651 = this_to_js Obj.magic x9649 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9651 "uniformMatrix2x3fv")
                         "apply"
                         [|x9651;((let x9645 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9645 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9640)|]);
                                   ignore
                                     (Ojs.call x9645 "push"
                                        [|(GLboolean.t_to_js x9641)|]);
                                   ignore
                                     (Ojs.call x9645 "push"
                                        [|(Float32List.t_to_js x9642)|]);
                                   (match x9643 with
                                    | Some x9647 ->
                                        ignore
                                          (Ojs.call x9645 "push"
                                             [|(GLuint.t_to_js x9647)|])
                                    | None -> ());
                                   (match x9644 with
                                    | Some x9646 ->
                                        ignore
                                          (Ojs.call x9645 "push"
                                             [|(GLuint.t_to_js x9646)|])
                                    | None -> ());
                                   x9645))|])
    let (uniformMatrix2x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9661 : 'tags this) ->
        fun ~location:(x9652 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9653 : GLboolean.t) ->
            fun ~data:(x9654 : Float32List.t) ->
              fun ?srcOffset:(x9655 : GLuint.t option) ->
                fun ?srcLength:(x9656 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9663 = this_to_js Obj.magic x9661 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9663 "uniformMatrix2x4fv")
                         "apply"
                         [|x9663;((let x9657 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9657 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9652)|]);
                                   ignore
                                     (Ojs.call x9657 "push"
                                        [|(GLboolean.t_to_js x9653)|]);
                                   ignore
                                     (Ojs.call x9657 "push"
                                        [|(Float32List.t_to_js x9654)|]);
                                   (match x9655 with
                                    | Some x9659 ->
                                        ignore
                                          (Ojs.call x9657 "push"
                                             [|(GLuint.t_to_js x9659)|])
                                    | None -> ());
                                   (match x9656 with
                                    | Some x9658 ->
                                        ignore
                                          (Ojs.call x9657 "push"
                                             [|(GLuint.t_to_js x9658)|])
                                    | None -> ());
                                   x9657))|])
    let (uniformMatrix3x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9673 : 'tags this) ->
        fun ~location:(x9664 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9665 : GLboolean.t) ->
            fun ~data:(x9666 : Float32List.t) ->
              fun ?srcOffset:(x9667 : GLuint.t option) ->
                fun ?srcLength:(x9668 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9675 = this_to_js Obj.magic x9673 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9675 "uniformMatrix3x2fv")
                         "apply"
                         [|x9675;((let x9669 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9669 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9664)|]);
                                   ignore
                                     (Ojs.call x9669 "push"
                                        [|(GLboolean.t_to_js x9665)|]);
                                   ignore
                                     (Ojs.call x9669 "push"
                                        [|(Float32List.t_to_js x9666)|]);
                                   (match x9667 with
                                    | Some x9671 ->
                                        ignore
                                          (Ojs.call x9669 "push"
                                             [|(GLuint.t_to_js x9671)|])
                                    | None -> ());
                                   (match x9668 with
                                    | Some x9670 ->
                                        ignore
                                          (Ojs.call x9669 "push"
                                             [|(GLuint.t_to_js x9670)|])
                                    | None -> ());
                                   x9669))|])
    let (uniformMatrix3x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9685 : 'tags this) ->
        fun ~location:(x9676 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9677 : GLboolean.t) ->
            fun ~data:(x9678 : Float32List.t) ->
              fun ?srcOffset:(x9679 : GLuint.t option) ->
                fun ?srcLength:(x9680 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9687 = this_to_js Obj.magic x9685 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9687 "uniformMatrix3x4fv")
                         "apply"
                         [|x9687;((let x9681 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9681 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9676)|]);
                                   ignore
                                     (Ojs.call x9681 "push"
                                        [|(GLboolean.t_to_js x9677)|]);
                                   ignore
                                     (Ojs.call x9681 "push"
                                        [|(Float32List.t_to_js x9678)|]);
                                   (match x9679 with
                                    | Some x9683 ->
                                        ignore
                                          (Ojs.call x9681 "push"
                                             [|(GLuint.t_to_js x9683)|])
                                    | None -> ());
                                   (match x9680 with
                                    | Some x9682 ->
                                        ignore
                                          (Ojs.call x9681 "push"
                                             [|(GLuint.t_to_js x9682)|])
                                    | None -> ());
                                   x9681))|])
    let (uniformMatrix4x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9697 : 'tags this) ->
        fun ~location:(x9688 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9689 : GLboolean.t) ->
            fun ~data:(x9690 : Float32List.t) ->
              fun ?srcOffset:(x9691 : GLuint.t option) ->
                fun ?srcLength:(x9692 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9699 = this_to_js Obj.magic x9697 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9699 "uniformMatrix4x2fv")
                         "apply"
                         [|x9699;((let x9693 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9693 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9688)|]);
                                   ignore
                                     (Ojs.call x9693 "push"
                                        [|(GLboolean.t_to_js x9689)|]);
                                   ignore
                                     (Ojs.call x9693 "push"
                                        [|(Float32List.t_to_js x9690)|]);
                                   (match x9691 with
                                    | Some x9695 ->
                                        ignore
                                          (Ojs.call x9693 "push"
                                             [|(GLuint.t_to_js x9695)|])
                                    | None -> ());
                                   (match x9692 with
                                    | Some x9694 ->
                                        ignore
                                          (Ojs.call x9693 "push"
                                             [|(GLuint.t_to_js x9694)|])
                                    | None -> ());
                                   x9693))|])
    let (uniformMatrix4x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t option ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9709 : 'tags this) ->
        fun ~location:(x9700 : WebGLUniformLocation.t option) ->
          fun ~transpose:(x9701 : GLboolean.t) ->
            fun ~data:(x9702 : Float32List.t) ->
              fun ?srcOffset:(x9703 : GLuint.t option) ->
                fun ?srcLength:(x9704 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9711 = this_to_js Obj.magic x9709 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9711 "uniformMatrix4x3fv")
                         "apply"
                         [|x9711;((let x9705 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9705 "push"
                                        [|(Ojs.option_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9700)|]);
                                   ignore
                                     (Ojs.call x9705 "push"
                                        [|(GLboolean.t_to_js x9701)|]);
                                   ignore
                                     (Ojs.call x9705 "push"
                                        [|(Float32List.t_to_js x9702)|]);
                                   (match x9703 with
                                    | Some x9707 ->
                                        ignore
                                          (Ojs.call x9705 "push"
                                             [|(GLuint.t_to_js x9707)|])
                                    | None -> ());
                                   (match x9704 with
                                    | Some x9706 ->
                                        ignore
                                          (Ojs.call x9705 "push"
                                             [|(GLuint.t_to_js x9706)|])
                                    | None -> ());
                                   x9705))|])
    let (vertexAttribDivisor :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x9714 : 'tags this) ->
        fun ~index:(x9712 : GLuint.t) ->
          fun ~divisor:(x9713 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9714) "vertexAttribDivisor"
                 [|(GLuint.t_to_js x9712);(GLuint.t_to_js x9713)|])
    let (vertexAttribI4i :
      'tags this ->
        index:GLuint.t ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x9721 : 'tags this) ->
        fun ~index:(x9716 : GLuint.t) ->
          fun ~x:(x9717 : GLint.t) ->
            fun ~y:(x9718 : GLint.t) ->
              fun ~z:(x9719 : GLint.t) ->
                fun ~w:(x9720 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9721) "vertexAttribI4i"
                       [|(GLuint.t_to_js x9716);(GLint.t_to_js x9717);(
                         GLint.t_to_js x9718);(GLint.t_to_js x9719);(
                         GLint.t_to_js x9720)|])
    let (vertexAttribI4iv' :
      'tags this -> index:GLuint.t -> values:Int32List.t -> unit) =
      fun (x9725 : 'tags this) ->
        fun ~index:(x9723 : GLuint.t) ->
          fun ~values:(x9724 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9725) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x9723);(Int32List.t_to_js x9724)|])
    let (vertexAttribI4ui :
      'tags this ->
        index:GLuint.t ->
          x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit)
      =
      fun (x9732 : 'tags this) ->
        fun ~index:(x9727 : GLuint.t) ->
          fun ~x:(x9728 : GLuint.t) ->
            fun ~y:(x9729 : GLuint.t) ->
              fun ~z:(x9730 : GLuint.t) ->
                fun ~w:(x9731 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9732) "vertexAttribI4ui"
                       [|(GLuint.t_to_js x9727);(GLuint.t_to_js x9728);(
                         GLuint.t_to_js x9729);(GLuint.t_to_js x9730);(
                         GLuint.t_to_js x9731)|])
    let (vertexAttribI4uiv' :
      'tags this -> index:GLuint.t -> values:Uint32List.t -> unit) =
      fun (x9736 : 'tags this) ->
        fun ~index:(x9734 : GLuint.t) ->
          fun ~values:(x9735 : Uint32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9736) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x9734);(Uint32List.t_to_js x9735)|])
    let (vertexAttribIPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9743 : 'tags this) ->
        fun ~index:(x9738 : GLuint.t) ->
          fun ~size:(x9739 : GLint.t) ->
            fun ~type_:(x9740 : GLenum.t) ->
              fun ~stride:(x9741 : GLsizei.t) ->
                fun ~offset:(x9742 : GLintptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9743)
                       "vertexAttribIPointer"
                       [|(GLuint.t_to_js x9738);(GLint.t_to_js x9739);(
                         GLenum.t_to_js x9740);(GLsizei.t_to_js x9741);(
                         GLintptr.t_to_js x9742)|])
    let (waitSync :
      'tags this ->
        sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit)
      =
      fun (x9748 : 'tags this) ->
        fun ~sync:(x9745 : WebGLSync.t) ->
          fun ~flags:(x9746 : GLbitfield.t) ->
            fun ~timeout:(x9747 : GLint64.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9748) "waitSync"
                   [|(WebGLSync.t_to_js x9745);(GLbitfield.t_to_js x9746);(
                     GLint64.t_to_js x9747)|])
    let (get_ACTIVE_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9750 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9750)
             "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : 'tags this -> GLenum.t) =
      fun (x9752 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9752) "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : 'tags this -> GLenum.t) =
      fun (x9754 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9754)
             "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : 'tags this -> GLenum.t) =
      fun (x9756 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9756)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : 'tags this -> GLenum.t) =
      fun (x9758 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9758) "COLOR")
    let (get_COLOR_ATTACHMENT1 : 'tags this -> GLenum.t) =
      fun (x9760 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9760)
             "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : 'tags this -> GLenum.t) =
      fun (x9762 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9762)
             "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : 'tags this -> GLenum.t) =
      fun (x9764 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9764)
             "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : 'tags this -> GLenum.t) =
      fun (x9766 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9766)
             "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : 'tags this -> GLenum.t) =
      fun (x9768 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9768)
             "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : 'tags this -> GLenum.t) =
      fun (x9770 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9770)
             "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : 'tags this -> GLenum.t) =
      fun (x9772 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9772)
             "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : 'tags this -> GLenum.t) =
      fun (x9774 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9774)
             "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : 'tags this -> GLenum.t) =
      fun (x9776 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9776)
             "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : 'tags this -> GLenum.t) =
      fun (x9778 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9778)
             "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : 'tags this -> GLenum.t) =
      fun (x9780 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9780)
             "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : 'tags this -> GLenum.t) =
      fun (x9782 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9782)
             "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : 'tags this -> GLenum.t) =
      fun (x9784 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9784)
             "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : 'tags this -> GLenum.t) =
      fun (x9786 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9786)
             "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : 'tags this -> GLenum.t) =
      fun (x9788 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9788)
             "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : 'tags this -> GLenum.t) =
      fun (x9790 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9790)
             "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : 'tags this -> GLenum.t) =
      fun (x9792 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9792)
             "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x9794 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9794) "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9796 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9796)
             "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : 'tags this -> GLenum.t) =
      fun (x9798 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9798)
             "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9800 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9800)
             "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : 'tags this -> GLenum.t) =
      fun (x9802 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9802) "CURRENT_QUERY")
    let (get_DEPTH : 'tags this -> GLenum.t) =
      fun (x9804 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9804) "DEPTH")
    let (get_DEPTH24_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9806 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9806) "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9808 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9808)
             "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : 'tags this -> GLenum.t) =
      fun (x9810 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9810)
             "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : 'tags this -> GLenum.t) =
      fun (x9812 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9812)
             "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : 'tags this -> GLenum.t) =
      fun (x9814 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9814) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : 'tags this -> GLenum.t) =
      fun (x9816 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9816) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : 'tags this -> GLenum.t) =
      fun (x9818 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9818) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : 'tags this -> GLenum.t) =
      fun (x9820 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9820) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : 'tags this -> GLenum.t) =
      fun (x9822 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9822) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : 'tags this -> GLenum.t) =
      fun (x9824 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9824) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : 'tags this -> GLenum.t) =
      fun (x9826 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9826) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : 'tags this -> GLenum.t) =
      fun (x9828 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9828) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : 'tags this -> GLenum.t) =
      fun (x9830 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9830) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : 'tags this -> GLenum.t) =
      fun (x9832 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9832) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : 'tags this -> GLenum.t) =
      fun (x9834 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9834) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : 'tags this -> GLenum.t) =
      fun (x9836 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9836) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : 'tags this -> GLenum.t) =
      fun (x9838 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9838) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : 'tags this -> GLenum.t) =
      fun (x9840 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9840) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : 'tags this -> GLenum.t) =
      fun (x9842 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9842) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : 'tags this -> GLenum.t) =
      fun (x9844 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9844) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x9846 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9846) "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9848 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9848)
             "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : 'tags this -> GLenum.t) =
      fun (x9850 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9850) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : 'tags this -> GLenum.t) =
      fun (x9852 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9852) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : 'tags this -> GLenum.t) =
      fun (x9854 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9854)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : 'tags this -> GLenum.t) =
      fun (x9856 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9856) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : 'tags this -> GLenum.t) =
      fun (x9858 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9858) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : 'tags this -> GLenum.t) =
      fun (x9860 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9860) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : 'tags this -> GLenum.t) =
      fun (x9862 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9862) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : 'tags this -> GLenum.t) =
      fun (x9864 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9864) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : 'tags this -> GLenum.t) =
      fun (x9866 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9866) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : 'tags this -> GLenum.t) =
      fun (x9868 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9868)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x9870 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9870)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x9872 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9872)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : 'tags this -> GLenum.t)
      =
      fun (x9874 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9874)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : 'tags this -> GLenum.t)
      =
      fun (x9876 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9876)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x9878 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9878)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x9880 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9880)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x9882 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9882)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x9884 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9884)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : 'tags this -> GLenum.t) =
      fun (x9886 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9886)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : 'tags this -> GLenum.t) =
      fun (x9888 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9888)
             "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : 'tags this -> GLenum.t) =
      fun (x9890 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9890)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : 'tags this -> GLenum.t) =
      fun (x9892 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9892) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x9894 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9894)
             "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x9896 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9896)
             "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x9898 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9898) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9900 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9900)
             "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9902 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9902) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x9904 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9904) "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : 'tags this -> GLenum.t) =
      fun (x9906 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9906) "INVALID_INDEX")
    let (get_MAX : 'tags this -> GLenum.t) =
      fun (x9908 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9908) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x9910 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9910)
             "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : 'tags this -> GLenum.t) =
      fun (x9912 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9912)
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : 'tags this -> GLenum.t) =
      fun (x9914 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9914)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : 'tags this -> GLenum.t) =
      fun (x9916 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9916)
             "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9918 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9918)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9920 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9920)
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t)
      =
      fun (x9922 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9922)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : 'tags this -> GLenum.t) =
      fun (x9924 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9924) "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : 'tags this -> GLenum.t) =
      fun (x9926 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9926)
             "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : 'tags this -> GLenum.t) =
      fun (x9928 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9928)
             "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : 'tags this -> GLenum.t) =
      fun (x9930 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9930)
             "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9932 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9932)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9934 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9934)
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9936 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9936)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x9938 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9938)
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : 'tags this -> GLenum.t) =
      fun (x9940 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9940) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : 'tags this -> GLenum.t) =
      fun (x9942 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9942)
             "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : 'tags this -> GLenum.t) =
      fun (x9944 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9944)
             "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9946 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9946)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
      'tags this -> GLenum.t) =
      fun (x9948 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9948)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9950 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9950)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : 'tags this -> GLenum.t) =
      fun (x9952 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9952)
             "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : 'tags this -> GLenum.t) =
      fun (x9954 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9954)
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9956 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9956)
             "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9958 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9958)
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9960 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9960)
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9962 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9962)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : 'tags this -> GLenum.t) =
      fun (x9964 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9964) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x9966 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9966)
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x9968 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9968) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x9970 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9970) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x9972 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9972) "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x9974 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9974) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9976 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9976)
             "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9978 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9978)
             "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9980 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9980)
             "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9982 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9982)
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : 'tags this -> GLenum.t) =
      fun (x9984 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9984) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : 'tags this -> GLenum.t) =
      fun (x9986 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9986)
             "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : 'tags this -> GLenum.t) =
      fun (x9988 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9988) "R11F_G11F_B10F")
    let (get_R16F : 'tags this -> GLenum.t) =
      fun (x9990 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9990) "R16F")
    let (get_R16I : 'tags this -> GLenum.t) =
      fun (x9992 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9992) "R16I")
    let (get_R16UI : 'tags this -> GLenum.t) =
      fun (x9994 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9994) "R16UI")
    let (get_R32F : 'tags this -> GLenum.t) =
      fun (x9996 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9996) "R32F")
    let (get_R32I : 'tags this -> GLenum.t) =
      fun (x9998 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9998) "R32I")
    let (get_R32UI : 'tags this -> GLenum.t) =
      fun (x10000 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10000) "R32UI")
    let (get_R8 : 'tags this -> GLenum.t) =
      fun (x10002 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10002) "R8")
    let (get_R8I : 'tags this -> GLenum.t) =
      fun (x10004 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10004) "R8I")
    let (get_R8UI : 'tags this -> GLenum.t) =
      fun (x10006 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10006) "R8UI")
    let (get_R8_SNORM : 'tags this -> GLenum.t) =
      fun (x10008 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10008) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : 'tags this -> GLenum.t) =
      fun (x10010 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10010)
             "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x10012 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10012) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x10014 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10014)
             "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10016 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10016)
             "READ_FRAMEBUFFER_BINDING")
    let (get_RED : 'tags this -> GLenum.t) =
      fun (x10018 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10018) "RED")
    let (get_RED_INTEGER : 'tags this -> GLenum.t) =
      fun (x10020 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10020) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : 'tags this -> GLenum.t) =
      fun (x10022 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10022)
             "RENDERBUFFER_SAMPLES")
    let (get_RG : 'tags this -> GLenum.t) =
      fun (x10024 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10024) "RG")
    let (get_RG16F : 'tags this -> GLenum.t) =
      fun (x10026 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10026) "RG16F")
    let (get_RG16I : 'tags this -> GLenum.t) =
      fun (x10028 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10028) "RG16I")
    let (get_RG16UI : 'tags this -> GLenum.t) =
      fun (x10030 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10030) "RG16UI")
    let (get_RG32F : 'tags this -> GLenum.t) =
      fun (x10032 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10032) "RG32F")
    let (get_RG32I : 'tags this -> GLenum.t) =
      fun (x10034 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10034) "RG32I")
    let (get_RG32UI : 'tags this -> GLenum.t) =
      fun (x10036 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10036) "RG32UI")
    let (get_RG8 : 'tags this -> GLenum.t) =
      fun (x10038 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10038) "RG8")
    let (get_RG8I : 'tags this -> GLenum.t) =
      fun (x10040 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10040) "RG8I")
    let (get_RG8UI : 'tags this -> GLenum.t) =
      fun (x10042 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10042) "RG8UI")
    let (get_RG8_SNORM : 'tags this -> GLenum.t) =
      fun (x10044 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10044) "RG8_SNORM")
    let (get_RGB10_A2 : 'tags this -> GLenum.t) =
      fun (x10046 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10046) "RGB10_A2")
    let (get_RGB10_A2UI : 'tags this -> GLenum.t) =
      fun (x10048 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10048) "RGB10_A2UI")
    let (get_RGB16F : 'tags this -> GLenum.t) =
      fun (x10050 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10050) "RGB16F")
    let (get_RGB16I : 'tags this -> GLenum.t) =
      fun (x10052 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10052) "RGB16I")
    let (get_RGB16UI : 'tags this -> GLenum.t) =
      fun (x10054 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10054) "RGB16UI")
    let (get_RGB32F : 'tags this -> GLenum.t) =
      fun (x10056 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10056) "RGB32F")
    let (get_RGB32I : 'tags this -> GLenum.t) =
      fun (x10058 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10058) "RGB32I")
    let (get_RGB32UI : 'tags this -> GLenum.t) =
      fun (x10060 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10060) "RGB32UI")
    let (get_RGB8 : 'tags this -> GLenum.t) =
      fun (x10062 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10062) "RGB8")
    let (get_RGB8I : 'tags this -> GLenum.t) =
      fun (x10064 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10064) "RGB8I")
    let (get_RGB8UI : 'tags this -> GLenum.t) =
      fun (x10066 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10066) "RGB8UI")
    let (get_RGB8_SNORM : 'tags this -> GLenum.t) =
      fun (x10068 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10068) "RGB8_SNORM")
    let (get_RGB9_E5 : 'tags this -> GLenum.t) =
      fun (x10070 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10070) "RGB9_E5")
    let (get_RGBA16F : 'tags this -> GLenum.t) =
      fun (x10072 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10072) "RGBA16F")
    let (get_RGBA16I : 'tags this -> GLenum.t) =
      fun (x10074 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10074) "RGBA16I")
    let (get_RGBA16UI : 'tags this -> GLenum.t) =
      fun (x10076 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10076) "RGBA16UI")
    let (get_RGBA32F : 'tags this -> GLenum.t) =
      fun (x10078 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10078) "RGBA32F")
    let (get_RGBA32I : 'tags this -> GLenum.t) =
      fun (x10080 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10080) "RGBA32I")
    let (get_RGBA32UI : 'tags this -> GLenum.t) =
      fun (x10082 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10082) "RGBA32UI")
    let (get_RGBA8 : 'tags this -> GLenum.t) =
      fun (x10084 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10084) "RGBA8")
    let (get_RGBA8I : 'tags this -> GLenum.t) =
      fun (x10086 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10086) "RGBA8I")
    let (get_RGBA8UI : 'tags this -> GLenum.t) =
      fun (x10088 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10088) "RGBA8UI")
    let (get_RGBA8_SNORM : 'tags this -> GLenum.t) =
      fun (x10090 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10090) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : 'tags this -> GLenum.t) =
      fun (x10092 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10092) "RGBA_INTEGER")
    let (get_RGB_INTEGER : 'tags this -> GLenum.t) =
      fun (x10094 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10094) "RGB_INTEGER")
    let (get_RG_INTEGER : 'tags this -> GLenum.t) =
      fun (x10096 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10096) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10098 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10098)
             "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : 'tags this -> GLenum.t) =
      fun (x10100 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10100)
             "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : 'tags this -> GLenum.t) =
      fun (x10102 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10102)
             "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x10104 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10104) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : 'tags this -> GLenum.t) =
      fun (x10106 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10106) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : 'tags this -> GLenum.t) =
      fun (x10108 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10108)
             "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x10110 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10110)
             "SEPARATE_ATTRIBS")
    let (get_SIGNALED : 'tags this -> GLenum.t) =
      fun (x10112 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10112) "SIGNALED")
    let (get_SIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x10114 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10114)
             "SIGNED_NORMALIZED")
    let (get_SRGB : 'tags this -> GLenum.t) =
      fun (x10116 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10116) "SRGB")
    let (get_SRGB8 : 'tags this -> GLenum.t) =
      fun (x10118 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10118) "SRGB8")
    let (get_SRGB8_ALPHA8 : 'tags this -> GLenum.t) =
      fun (x10120 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10120) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : 'tags this -> GLenum.t) =
      fun (x10122 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10122) "STATIC_COPY")
    let (get_STATIC_READ : 'tags this -> GLenum.t) =
      fun (x10124 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10124) "STATIC_READ")
    let (get_STENCIL : 'tags this -> GLenum.t) =
      fun (x10126 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10126) "STENCIL")
    let (get_STREAM_COPY : 'tags this -> GLenum.t) =
      fun (x10128 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10128) "STREAM_COPY")
    let (get_STREAM_READ : 'tags this -> GLenum.t) =
      fun (x10130 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10130) "STREAM_READ")
    let (get_SYNC_CONDITION : 'tags this -> GLenum.t) =
      fun (x10132 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10132) "SYNC_CONDITION")
    let (get_SYNC_FENCE : 'tags this -> GLenum.t) =
      fun (x10134 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10134) "SYNC_FENCE")
    let (get_SYNC_FLAGS : 'tags this -> GLenum.t) =
      fun (x10136 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10136) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : 'tags this -> GLenum.t) =
      fun (x10138 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10138)
             "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : 'tags this -> GLenum.t) =
      fun (x10140 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10140)
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : 'tags this -> GLenum.t) =
      fun (x10142 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10142) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10144 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10144)
             "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : 'tags this -> GLenum.t) =
      fun (x10146 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10146) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : 'tags this -> GLenum.t) =
      fun (x10148 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10148)
             "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10150 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10150)
             "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : 'tags this -> GLenum.t) =
      fun (x10152 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10152)
             "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : 'tags this -> GLenum.t) =
      fun (x10154 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10154)
             "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : 'tags this -> GLenum.t) =
      fun (x10156 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10156)
             "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : 'tags this -> GLenum.t) =
      fun (x10158 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10158)
             "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : 'tags this -> GLenum.t) =
      fun (x10160 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10160)
             "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : 'tags this -> GLenum.t) =
      fun (x10162 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10162)
             "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : 'tags this -> GLenum.t) =
      fun (x10164 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10164) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : 'tags this -> GLenum.t) =
      fun (x10166 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10166) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : 'tags this -> GLenum.t) =
      fun (x10168 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10168) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : 'tags this -> GLenum.t) =
      fun (x10170 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10170) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : 'tags this -> GLint64.t) =
      fun (x10172 : 'tags this) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10172) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : 'tags this -> GLenum.t) =
      fun (x10174 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10174)
             "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : 'tags this -> GLenum.t) =
      fun (x10176 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10176)
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : 'tags this -> GLenum.t) =
      fun (x10178 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10178)
             "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x10180 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10180)
             "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10182 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10182)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : 'tags this -> GLenum.t) =
      fun (x10184 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10184)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x10186 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10186)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x10188 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10188)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : 'tags this -> GLenum.t) =
      fun (x10190 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10190)
             "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : 'tags this -> GLenum.t)
      =
      fun (x10192 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10192)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : 'tags this -> GLenum.t) =
      fun (x10194 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10194)
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x10196 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10196)
             "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x10198 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10198)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : 'tags this -> GLenum.t) =
      fun (x10200 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10200)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : 'tags this -> GLenum.t) =
      fun (x10202 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10202)
             "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : 'tags this -> GLenum.t) =
      fun (x10204 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10204)
             "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : 'tags this -> GLenum.t) =
      fun (x10206 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10206)
             "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :
      'tags this -> GLenum.t) =
      fun (x10208 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10208)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
      'tags this -> GLenum.t) =
      fun (x10210 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10210)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : 'tags this -> GLenum.t) =
      fun (x10212 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10212) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x10214 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10214)
             "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x10216 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10216)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x10218 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10218)
             "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x10220 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10220)
             "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : 'tags this -> GLenum.t) =
      fun (x10222 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10222)
             "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : 'tags this -> GLenum.t) =
      fun (x10224 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10224)
             "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : 'tags this -> GLenum.t) =
      fun (x10226 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10226) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : 'tags this -> GLenum.t) =
      fun (x10228 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10228) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : 'tags this -> GLenum.t) =
      fun (x10230 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10230) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : 'tags this -> GLenum.t) =
      fun (x10232 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10232)
             "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x10234 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10234)
             "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : 'tags this -> GLenum.t) =
      fun (x10236 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10236)
             "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x10238 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10238)
             "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x10240 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10240)
             "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : 'tags this -> GLenum.t) =
      fun (x10242 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10242) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : 'tags this -> GLenum.t) =
      fun (x10244 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10244)
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : 'tags this -> GLenum.t) =
      fun (x10246 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10246)
             "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x10248 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10248)
             "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : 'tags this -> GLenum.t) =
      fun (x10250 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10250)
             "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x10252 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10252)
             "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x10254 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10254)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x10256 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10256)
             "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x10258 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10258)
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x10260 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10260)
             "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x10262 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10262)
             "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x10264 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10264)
             "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x10266 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10266)
             "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : 'tags this -> GLenum.t) =
      fun (x10268 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10268)
             "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : 'tags this -> GLenum.t) =
      fun (x10270 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10270)
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : 'tags this -> GLenum.t) =
      fun (x10272 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10272)
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : 'tags this -> GLenum.t) =
      fun (x10274 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10274) "WAIT_FAILED")
    let cast_from = Obj.magic
  end
module WebGL2RenderingContext =
  struct
    type t =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10277 : Ojs.t) -> t_of_js x10277
    and t_0_to_js : t_0 -> Ojs.t = fun (x10276 : t) -> t_to_js x10276
    type tags =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x10280 : Ojs.t) -> intf_of_js __tags_of_js x10280
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x10278 : __tags intf) -> intf_to_js __tags_to_js x10278
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") 
             [||])
    let (active_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORM_BLOCKS")
    let (already_signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALREADY_SIGNALED")
    let (any_samples_passed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED")
    let (any_samples_passed_conservative : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "COLOR")
    let (color_attachment1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT1")
    let (color_attachment10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT10")
    let (color_attachment11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT11")
    let (color_attachment12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT12")
    let (color_attachment13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT13")
    let (color_attachment14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT14")
    let (color_attachment15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT15")
    let (color_attachment2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT2")
    let (color_attachment3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT3")
    let (color_attachment4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT4")
    let (color_attachment5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT5")
    let (color_attachment6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT6")
    let (color_attachment7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT7")
    let (color_attachment8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT8")
    let (color_attachment9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT9")
    let (compare_ref_to_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPARE_REF_TO_TEXTURE")
    let (condition_satisfied : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONDITION_SATISFIED")
    let (copy_read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER")
    let (copy_read_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER_BINDING")
    let (copy_write_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER")
    let (copy_write_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER_BINDING")
    let (current_query : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_QUERY")
    let (depth : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DEPTH")
    let (depth24_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH24_STENCIL8")
    let (depth32f_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH32F_STENCIL8")
    let (depth_component24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT24")
    let (depth_component32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT32F")
    let (draw_buffer0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER0")
    let (draw_buffer1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER1")
    let (draw_buffer10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER10")
    let (draw_buffer11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER11")
    let (draw_buffer12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER12")
    let (draw_buffer13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER13")
    let (draw_buffer14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER14")
    let (draw_buffer15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER15")
    let (draw_buffer2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER2")
    let (draw_buffer3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER3")
    let (draw_buffer4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER4")
    let (draw_buffer5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER5")
    let (draw_buffer6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER6")
    let (draw_buffer7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER7")
    let (draw_buffer8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER8")
    let (draw_buffer9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER9")
    let (draw_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER")
    let (draw_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER_BINDING")
    let (dynamic_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_COPY")
    let (dynamic_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_READ")
    let (float_32_unsigned_int_24_8_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (fLOAT_MAT2x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x3")
    let (fLOAT_MAT2x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x4")
    let (fLOAT_MAT3x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x2")
    let (fLOAT_MAT3x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x4")
    let (fLOAT_MAT4x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x2")
    let (fLOAT_MAT4x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x3")
    let (fragment_shader_derivative_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (framebuffer_attachment_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (framebuffer_attachment_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (framebuffer_attachment_color_encoding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (framebuffer_attachment_component_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (framebuffer_attachment_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (framebuffer_attachment_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (framebuffer_attachment_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (framebuffer_attachment_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (framebuffer_attachment_texture_layer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (framebuffer_default : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_DEFAULT")
    let (framebuffer_incomplete_multisample : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (half_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HALF_FLOAT")
    let (interleaved_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INTERLEAVED_ATTRIBS")
    let (int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_2_10_10_10_REV")
    let (int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D")
    let (int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D_ARRAY")
    let (int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_3D")
    let (int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_CUBE")
    let (invalid_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_INDEX")
    let (max : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MAX")
    let (max_3d_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_3D_TEXTURE_SIZE")
    let (max_array_texture_layers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (max_client_wait_timeout_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (max_color_attachments : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COLOR_ATTACHMENTS")
    let (max_combined_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_combined_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (max_combined_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (max_draw_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_DRAW_BUFFERS")
    let (max_elements_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_INDICES")
    let (max_elements_vertices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_VERTICES")
    let (max_element_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENT_INDEX")
    let (max_fragment_input_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (max_fragment_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (max_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (max_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SAMPLES")
    let (max_server_wait_timeout : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SERVER_WAIT_TIMEOUT")
    let (max_texture_lod_bias : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_LOD_BIAS")
    let (max_transform_feedback_interleaved_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (max_transform_feedback_separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (max_transform_feedback_separate_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (max_uniform_block_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BLOCK_SIZE")
    let (max_uniform_buffer_bindings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (max_varying_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_COMPONENTS")
    let (max_vertex_output_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (max_vertex_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (max_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (min : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MIN")
    let (min_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OBJECT_TYPE")
    let (pack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ROW_LENGTH")
    let (pack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_PIXELS")
    let (pack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_ROWS")
    let (pixel_pack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER")
    let (pixel_pack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER_BINDING")
    let (pixel_unpack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER")
    let (pixel_unpack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (query_result : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT")
    let (query_result_available : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT_AVAILABLE")
    let (r11f_g11f_b10f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R11F_G11F_B10F")
    let (r16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16F")
    let (r16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16I")
    let (r16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16UI")
    let (r32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32F")
    let (r32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32I")
    let (r32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32UI")
    let (r8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8")
    let (r8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8I")
    let (r8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8UI")
    let (r8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R8_SNORM")
    let (rasterizer_discard : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RASTERIZER_DISCARD")
    let (read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_BUFFER")
    let (read_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER")
    let (read_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER_BINDING")
    let (red : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RED")
    let (red_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_INTEGER")
    let (renderbuffer_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_SAMPLES")
    let (rg : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG")
    let (rg16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16F")
    let (rg16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16I")
    let (rg16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG16UI")
    let (rg32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32F")
    let (rg32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32I")
    let (rg32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG32UI")
    let (rg8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8")
    let (rg8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8I")
    let (rg8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8UI")
    let (rg8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG8_SNORM")
    let (rgb10_a2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2")
    let (rgb10_a2ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2UI")
    let (rgb16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16F")
    let (rgb16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16I")
    let (rgb16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16UI")
    let (rgb32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32F")
    let (rgb32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32I")
    let (rgb32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32UI")
    let (rgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8")
    let (rgb8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8I")
    let (rgb8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8UI")
    let (rgb8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8_SNORM")
    let (rgb9_e5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB9_E5")
    let (rgba16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16F")
    let (rgba16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16I")
    let (rgba16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16UI")
    let (rgba32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32F")
    let (rgba32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32I")
    let (rgba32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32UI")
    let (rgba8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA8")
    let (rgba8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8I")
    let (rgba8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8UI")
    let (rgba8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8_SNORM")
    let (rgba_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA_INTEGER")
    let (rgb_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB_INTEGER")
    let (rg_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG_INTEGER")
    let (sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY")
    let (sampler_2d_array_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY_SHADOW")
    let (sampler_2d_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_SHADOW")
    let (sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_3D")
    let (sampler_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_BINDING")
    let (sampler_cube_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE_SHADOW")
    let (separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SEPARATE_ATTRIBS")
    let (signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNALED")
    let (signed_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNED_NORMALIZED")
    let (srgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB")
    let (srgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB8")
    let (srgb8_alpha8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRGB8_ALPHA8")
    let (static_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_COPY")
    let (static_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_READ")
    let (stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL")
    let (stream_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_COPY")
    let (stream_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_READ")
    let (sync_condition : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_CONDITION")
    let (sync_fence : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FENCE")
    let (sync_flags : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLAGS")
    let (sync_flush_commands_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLUSH_COMMANDS_BIT")
    let (sync_gpu_commands_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (sync_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_STATUS")
    let (texture_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D_ARRAY")
    let (texture_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_3D")
    let (texture_base_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BASE_LEVEL")
    let (texture_binding_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D_ARRAY")
    let (texture_binding_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_3D")
    let (texture_compare_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_FUNC")
    let (texture_compare_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_MODE")
    let (texture_immutable_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_FORMAT")
    let (texture_immutable_levels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_LEVELS")
    let (texture_max_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LEVEL")
    let (texture_max_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LOD")
    let (texture_min_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_LOD")
    let (texture_wrap_r : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_R")
    let (timeout_expired : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_EXPIRED")
    let (timeout_ignored : unit -> GLint64.t) =
      fun () ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_IGNORED")
    let (transform_feedback : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK")
    let (transform_feedback_active : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (transform_feedback_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BINDING")
    let (transform_feedback_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER")
    let (transform_feedback_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (transform_feedback_buffer_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (transform_feedback_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (transform_feedback_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (transform_feedback_paused : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PAUSED")
    let (transform_feedback_primitives_written : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (transform_feedback_varyings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (uniform_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_ARRAY_STRIDE")
    let (uniform_block_active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (uniform_block_active_uniform_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (uniform_block_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_BINDING")
    let (uniform_block_data_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_DATA_SIZE")
    let (uniform_block_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_INDEX")
    let (uniform_block_referenced_by_fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (uniform_block_referenced_by_vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (uniform_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER")
    let (uniform_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_BINDING")
    let (uniform_buffer_offset_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (uniform_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_SIZE")
    let (uniform_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_START")
    let (uniform_is_row_major : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_IS_ROW_MAJOR")
    let (uniform_matrix_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_MATRIX_STRIDE")
    let (uniform_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_OFFSET")
    let (uniform_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_SIZE")
    let (uniform_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_TYPE")
    let (unpack_image_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_IMAGE_HEIGHT")
    let (unpack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ROW_LENGTH")
    let (unpack_skip_images : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_IMAGES")
    let (unpack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_PIXELS")
    let (unpack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_ROWS")
    let (unsignaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNALED")
    let (unsigned_int_10f_11f_11f_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (unsigned_int_24_8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_24_8")
    let (unsigned_int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_2_10_10_10_REV")
    let (unsigned_int_5_9_9_9_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_5_9_9_9_REV")
    let (unsigned_int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D")
    let (unsigned_int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (unsigned_int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_3D")
    let (unsigned_int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (unsigned_int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC2")
    let (unsigned_int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC3")
    let (unsigned_int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC4")
    let (unsigned_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_NORMALIZED")
    let (vertex_array_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ARRAY_BINDING")
    let (vertex_attrib_array_divisor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (vertex_attrib_array_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (wait_failed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "WAIT_FAILED")
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ZERO")
  end
module WebAssembly =
  struct
    module ImportExportKind =
      struct
        type t =
          [ `L_s115_memory  | `L_s194_table  | `L_s81_function 
          | `L_s83_global ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10283 : Ojs.t) ->
            let x10284 = x10283 in
            match Ojs.string_of_js x10284 with
            | "memory" -> `L_s115_memory
            | "table" -> `L_s194_table
            | "function" -> `L_s81_function
            | "global" -> `L_s83_global
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10282 :
              [ `L_s115_memory  | `L_s194_table  | `L_s81_function 
              | `L_s83_global ])
            ->
            match x10282 with
            | `L_s115_memory -> Ojs.string_to_js "memory"
            | `L_s194_table -> Ojs.string_to_js "table"
            | `L_s81_function -> Ojs.string_to_js "function"
            | `L_s83_global -> Ojs.string_to_js "global"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10286 : Ojs.t) -> t_of_js x10286
        and t_0_to_js : t_0 -> Ojs.t = fun (x10285 : t) -> t_to_js x10285
      end
    module ModuleImportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleImportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10288 : Ojs.t) -> t_of_js x10288
        and t_0_to_js : t_0 -> Ojs.t = fun (x10287 : t) -> t_to_js x10287
        type tags = [ `WebAssembly_ModuleImportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleImportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10291 : Ojs.t) -> intf_of_js __tags_of_js x10291
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10289 : __tags intf) -> intf_to_js __tags_to_js x10289
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10293 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10293) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10295 : 'tags this) ->
            fun (x10296 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10295) "kind"
                (ImportExportKind.t_to_js x10296)
        let (get_module : 'tags this -> string) =
          fun (x10298 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10298) "module")
        let (set_module : 'tags this -> string -> unit) =
          fun (x10300 : 'tags this) ->
            fun (x10301 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10300) "module"
                (Ojs.string_to_js x10301)
        let (get_name : 'tags this -> string) =
          fun (x10303 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10303) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10305 : 'tags this) ->
            fun (x10306 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10305) "name"
                (Ojs.string_to_js x10306)
        let (create :
          kind:ImportExportKind.t ->
            module_:string -> name:string -> unit -> t)
          =
          fun ~kind:(x10308 : ImportExportKind.t) ->
            fun ~module_:(x10309 : string) ->
              fun ~name:(x10310 : string) ->
                fun () ->
                  let x10311 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10311 "kind"
                    (ImportExportKind.t_to_js x10308);
                  Ojs.set_prop_ascii x10311 "module"
                    (Ojs.string_to_js x10309);
                  Ojs.set_prop_ascii x10311 "name" (Ojs.string_to_js x10310);
                  t_of_js x10311
        let cast_from = Obj.magic
      end
    module ModuleExportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleExportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10313 : Ojs.t) -> t_of_js x10313
        and t_0_to_js : t_0 -> Ojs.t = fun (x10312 : t) -> t_to_js x10312
        type tags = [ `WebAssembly_ModuleExportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleExportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10316 : Ojs.t) -> intf_of_js __tags_of_js x10316
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10314 : __tags intf) -> intf_to_js __tags_to_js x10314
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10318 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10318) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10320 : 'tags this) ->
            fun (x10321 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10320) "kind"
                (ImportExportKind.t_to_js x10321)
        let (get_name : 'tags this -> string) =
          fun (x10323 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10323) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10325 : 'tags this) ->
            fun (x10326 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10325) "name"
                (Ojs.string_to_js x10326)
        let (create : kind:ImportExportKind.t -> name:string -> unit -> t) =
          fun ~kind:(x10328 : ImportExportKind.t) ->
            fun ~name:(x10329 : string) ->
              fun () ->
                let x10330 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10330 "kind"
                  (ImportExportKind.t_to_js x10328);
                Ojs.set_prop_ascii x10330 "name" (Ojs.string_to_js x10329);
                t_of_js x10330
        let cast_from = Obj.magic
      end
    module Module =
      struct
        type t = [ `WebAssembly_Module ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10332 : Ojs.t) -> t_of_js x10332
        and t_0_to_js : t_0 -> Ojs.t = fun (x10331 : t) -> t_to_js x10331
        type tags = [ `WebAssembly_Module ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Module ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10335 : Ojs.t) -> intf_of_js __tags_of_js x10335
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10333 : __tags intf) -> intf_to_js __tags_to_js x10333
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "prototype")
        let (create : BufferSource.t -> t) =
          fun (x10337 : BufferSource.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 [|(BufferSource.t_to_js x10337)|])
        let (customSections :
          moduleObject:t -> sectionName:string -> ArrayBuffer.t_0 list) =
          fun ~moduleObject:(x10338 : t) ->
            fun ~sectionName:(x10339 : string) ->
              Ojs.list_of_js ArrayBuffer.t_0_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                   "customSections"
                   [|(t_to_js x10338);(Ojs.string_to_js x10339)|])
        let (exports : t -> ModuleExportDescriptor.t list) =
          fun (x10341 : t) ->
            Ojs.list_of_js ModuleExportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "exports" [|(t_to_js x10341)|])
        let (imports : t -> ModuleImportDescriptor.t list) =
          fun (x10343 : t) ->
            Ojs.list_of_js ModuleImportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "imports" [|(t_to_js x10343)|])
      end
    module TableKind =
      struct
        type t = [ `L_s36_anyfunc  | `L_s71_externref ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10346 : Ojs.t) ->
            let x10347 = x10346 in
            match Ojs.string_of_js x10347 with
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s71_externref
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x10345 : [ `L_s36_anyfunc  | `L_s71_externref ]) ->
            match x10345 with
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s71_externref -> Ojs.string_to_js "externref"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10349 : Ojs.t) -> t_of_js x10349
        and t_0_to_js : t_0 -> Ojs.t = fun (x10348 : t) -> t_to_js x10348
      end
    module TableDescriptor =
      struct
        type t = [ `WebAssembly_TableDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10351 : Ojs.t) -> t_of_js x10351
        and t_0_to_js : t_0 -> Ojs.t = fun (x10350 : t) -> t_to_js x10350
        type tags = [ `WebAssembly_TableDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_TableDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10354 : Ojs.t) -> intf_of_js __tags_of_js x10354
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10352 : __tags intf) -> intf_to_js __tags_to_js x10352
        let (get_element : 'tags this -> TableKind.t) =
          fun (x10356 : 'tags this) ->
            TableKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10356) "element")
        let (set_element : 'tags this -> TableKind.t -> unit) =
          fun (x10358 : 'tags this) ->
            fun (x10359 : TableKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10358) "element"
                (TableKind.t_to_js x10359)
        let (get_initial : 'tags this -> float) =
          fun (x10361 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10361) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10363 : 'tags this) ->
            fun (x10364 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10363) "initial"
                (Ojs.float_to_js x10364)
        let (get_maximum : 'tags this -> float) =
          fun (x10366 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10366) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10368 : 'tags this) ->
            fun (x10369 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10368) "maximum"
                (Ojs.float_to_js x10369)
        let (create :
          element:TableKind.t -> initial:float -> maximum:float -> unit -> t)
          =
          fun ~element:(x10371 : TableKind.t) ->
            fun ~initial:(x10372 : float) ->
              fun ~maximum:(x10373 : float) ->
                fun () ->
                  let x10374 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10374 "element"
                    (TableKind.t_to_js x10371);
                  Ojs.set_prop_ascii x10374 "initial"
                    (Ojs.float_to_js x10372);
                  Ojs.set_prop_ascii x10374 "maximum"
                    (Ojs.float_to_js x10373);
                  t_of_js x10374
        let cast_from = Obj.magic
      end
    module Table =
      struct
        type t = [ `WebAssembly_Table ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10376 : Ojs.t) -> t_of_js x10376
        and t_0_to_js : t_0 -> Ojs.t = fun (x10375 : t) -> t_to_js x10375
        type tags = [ `WebAssembly_Table ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Table ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10379 : Ojs.t) -> intf_of_js __tags_of_js x10379
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10377 : __tags intf) -> intf_to_js __tags_to_js x10377
        let (get_length : 'tags this -> float) =
          fun (x10381 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10381) "length")
        let (get_ : 'tags this -> index:float -> any) =
          fun (x10384 : 'tags this) ->
            fun ~index:(x10383 : float) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x10384) "get"
                   [|(Ojs.float_to_js x10383)|])
        let (grow : 'tags this -> delta:float -> ?value:any -> unit -> float)
          =
          fun (x10390 : 'tags this) ->
            fun ~delta:(x10386 : float) ->
              fun ?value:(x10387 : any option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x10392 = this_to_js Obj.magic x10390 in
                     Ojs.call (Ojs.get_prop_ascii x10392 "grow") "apply"
                       [|x10392;((let x10388 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10388 "push"
                                       [|(Ojs.float_to_js x10386)|]);
                                  (match x10387 with
                                   | Some x10389 ->
                                       ignore
                                         (Ojs.call x10388 "push"
                                            [|(any_to_js x10389)|])
                                   | None -> ());
                                  x10388))|])
        let (set_ : 'tags this -> index:float -> ?value:any -> unit -> unit)
          =
          fun (x10397 : 'tags this) ->
            fun ~index:(x10393 : float) ->
              fun ?value:(x10394 : any option) ->
                fun () ->
                  ignore
                    (let x10399 = this_to_js Obj.magic x10397 in
                     Ojs.call (Ojs.get_prop_ascii x10399 "set") "apply"
                       [|x10399;((let x10395 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10395 "push"
                                       [|(Ojs.float_to_js x10393)|]);
                                  (match x10394 with
                                   | Some x10396 ->
                                       ignore
                                         (Ojs.call x10395 "push"
                                            [|(any_to_js x10396)|])
                                   | None -> ());
                                  x10395))|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                 "prototype")
        let (create :
          descriptor:TableDescriptor.t -> ?value:any -> unit -> t) =
          fun ~descriptor:(x10400 : TableDescriptor.t) ->
            fun ?value:(x10401 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                     (let x10402 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10402 "push"
                           [|(TableDescriptor.t_to_js x10400)|]);
                      (match x10401 with
                       | Some x10403 ->
                           ignore
                             (Ojs.call x10402 "push" [|(any_to_js x10403)|])
                       | None -> ());
                      x10402))
      end
    module MemoryDescriptor =
      struct
        type t = [ `WebAssembly_MemoryDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10405 : Ojs.t) -> t_of_js x10405
        and t_0_to_js : t_0 -> Ojs.t = fun (x10404 : t) -> t_to_js x10404
        type tags = [ `WebAssembly_MemoryDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_MemoryDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10408 : Ojs.t) -> intf_of_js __tags_of_js x10408
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10406 : __tags intf) -> intf_to_js __tags_to_js x10406
        let (get_initial : 'tags this -> float) =
          fun (x10410 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10410) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10412 : 'tags this) ->
            fun (x10413 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10412) "initial"
                (Ojs.float_to_js x10413)
        let (get_maximum : 'tags this -> float) =
          fun (x10415 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10415) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10417 : 'tags this) ->
            fun (x10418 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10417) "maximum"
                (Ojs.float_to_js x10418)
        let (get_shared : 'tags this -> bool) =
          fun (x10420 : 'tags this) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10420) "shared")
        let (set_shared : 'tags this -> bool -> unit) =
          fun (x10422 : 'tags this) ->
            fun (x10423 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10422) "shared"
                (Ojs.bool_to_js x10423)
        let (create :
          initial:float -> maximum:float -> shared:bool -> unit -> t) =
          fun ~initial:(x10425 : float) ->
            fun ~maximum:(x10426 : float) ->
              fun ~shared:(x10427 : bool) ->
                fun () ->
                  let x10428 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10428 "initial"
                    (Ojs.float_to_js x10425);
                  Ojs.set_prop_ascii x10428 "maximum"
                    (Ojs.float_to_js x10426);
                  Ojs.set_prop_ascii x10428 "shared" (Ojs.bool_to_js x10427);
                  t_of_js x10428
        let cast_from = Obj.magic
      end
    module Memory =
      struct
        type t = [ `WebAssembly_Memory ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10430 : Ojs.t) -> t_of_js x10430
        and t_0_to_js : t_0 -> Ojs.t = fun (x10429 : t) -> t_to_js x10429
        type tags = [ `WebAssembly_Memory ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Memory ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10433 : Ojs.t) -> intf_of_js __tags_of_js x10433
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10431 : __tags intf) -> intf_to_js __tags_to_js x10431
        let (get_buffer : 'tags this -> ArrayBuffer.t_0) =
          fun (x10435 : 'tags this) ->
            ArrayBuffer.t_0_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10435) "buffer")
        let (grow : 'tags this -> delta:float -> float) =
          fun (x10438 : 'tags this) ->
            fun ~delta:(x10437 : float) ->
              Ojs.float_of_js
                (Ojs.call (this_to_js Obj.magic x10438) "grow"
                   [|(Ojs.float_to_js x10437)|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 "prototype")
        let (create : MemoryDescriptor.t -> t) =
          fun (x10440 : MemoryDescriptor.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 [|(MemoryDescriptor.t_to_js x10440)|])
      end
    module ValueType =
      struct
        type t =
          [ `L_s207_v128  | `L_s36_anyfunc  | `L_s71_externref  | `L_s72_f32 
          | `L_s73_f64  | `L_s89_i32  | `L_s90_i64 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10442 : Ojs.t) ->
            let x10443 = x10442 in
            match Ojs.string_of_js x10443 with
            | "v128" -> `L_s207_v128
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s71_externref
            | "f32" -> `L_s72_f32
            | "f64" -> `L_s73_f64
            | "i32" -> `L_s89_i32
            | "i64" -> `L_s90_i64
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10441 :
              [ `L_s207_v128  | `L_s36_anyfunc  | `L_s71_externref 
              | `L_s72_f32  | `L_s73_f64  | `L_s89_i32  | `L_s90_i64 ])
            ->
            match x10441 with
            | `L_s207_v128 -> Ojs.string_to_js "v128"
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s71_externref -> Ojs.string_to_js "externref"
            | `L_s72_f32 -> Ojs.string_to_js "f32"
            | `L_s73_f64 -> Ojs.string_to_js "f64"
            | `L_s89_i32 -> Ojs.string_to_js "i32"
            | `L_s90_i64 -> Ojs.string_to_js "i64"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10445 : Ojs.t) -> t_of_js x10445
        and t_0_to_js : t_0 -> Ojs.t = fun (x10444 : t) -> t_to_js x10444
      end
    module GlobalDescriptor =
      struct
        type t = [ `WebAssembly_GlobalDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10447 : Ojs.t) -> t_of_js x10447
        and t_0_to_js : t_0 -> Ojs.t = fun (x10446 : t) -> t_to_js x10446
        type tags = [ `WebAssembly_GlobalDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_GlobalDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10450 : Ojs.t) -> intf_of_js __tags_of_js x10450
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10448 : __tags intf) -> intf_to_js __tags_to_js x10448
        let (get_mutable : 'tags this -> bool) =
          fun (x10452 : 'tags this) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10452) "mutable")
        let (set_mutable : 'tags this -> bool -> unit) =
          fun (x10454 : 'tags this) ->
            fun (x10455 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10454) "mutable"
                (Ojs.bool_to_js x10455)
        let (get_value : 'tags this -> ValueType.t) =
          fun (x10457 : 'tags this) ->
            ValueType.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10457) "value")
        let (set_value : 'tags this -> ValueType.t -> unit) =
          fun (x10459 : 'tags this) ->
            fun (x10460 : ValueType.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10459) "value"
                (ValueType.t_to_js x10460)
        let (create : mutable_:bool -> value:ValueType.t -> unit -> t) =
          fun ~mutable_:(x10462 : bool) ->
            fun ~value:(x10463 : ValueType.t) ->
              fun () ->
                let x10464 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10464 "mutable" (Ojs.bool_to_js x10462);
                Ojs.set_prop_ascii x10464 "value" (ValueType.t_to_js x10463);
                t_of_js x10464
        let cast_from = Obj.magic
      end
    module Global =
      struct
        type t = [ `WebAssembly_Global ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10466 : Ojs.t) -> t_of_js x10466
        and t_0_to_js : t_0 -> Ojs.t = fun (x10465 : t) -> t_to_js x10465
        type tags = [ `WebAssembly_Global ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Global ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10469 : Ojs.t) -> intf_of_js __tags_of_js x10469
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10467 : __tags intf) -> intf_to_js __tags_to_js x10467
        let (get_value : 'tags this -> any) =
          fun (x10471 : 'tags this) ->
            any_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10471) "value")
        let (set_value : 'tags this -> any -> unit) =
          fun (x10473 : 'tags this) ->
            fun (x10474 : any) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10473) "value"
                (any_to_js x10474)
        let (valueOf : 'tags this -> any) =
          fun (x10476 : 'tags this) ->
            any_of_js (Ojs.call (this_to_js Obj.magic x10476) "valueOf" [||])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Global")
                 "prototype")
        let (create : descriptor:GlobalDescriptor.t -> ?v:any -> unit -> t) =
          fun ~descriptor:(x10478 : GlobalDescriptor.t) ->
            fun ?v:(x10479 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Global")
                     (let x10480 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10480 "push"
                           [|(GlobalDescriptor.t_to_js x10478)|]);
                      (match x10479 with
                       | Some x10481 ->
                           ignore
                             (Ojs.call x10480 "push" [|(any_to_js x10481)|])
                       | None -> ());
                      x10480))
      end
    module ExportValue =
      struct
        type t = (untyped_function, Global.t, Memory.t, Table.t) union4
        let rec t_of_js : Ojs.t -> t =
          fun (x10487 : Ojs.t) ->
            union4_of_js untyped_function_of_js Global.t_of_js Memory.t_of_js
              Table.t_of_js x10487
        and t_to_js : t -> Ojs.t =
          fun
            (x10482 : (untyped_function, Global.t, Memory.t, Table.t) union4)
            ->
            union4_to_js untyped_function_to_js Global.t_to_js Memory.t_to_js
              Table.t_to_js x10482
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10493 : Ojs.t) -> t_of_js x10493
        and t_0_to_js : t_0 -> Ojs.t = fun (x10492 : t) -> t_to_js x10492
      end
    module ImportValue =
      struct
        type t = [ `Number of float  | `Other of ExportValue.t ] Primitive.t
        let rec t_of_js : Ojs.t -> t =
          fun (x10498 : Ojs.t) ->
            Primitive.t_of_js
              (fun (x10499 : Ojs.t) ->
                 let x10500 = x10499 in
                 match Ojs.string_of_js (Ojs.get_prop_ascii x10500 "dummy")
                 with
                 | "Number" -> `Number (Ojs.float_of_js x10500)
                 | "Other" -> `Other (ExportValue.t_of_js x10500)
                 | _ -> assert false) x10498
        and t_to_js : t -> Ojs.t =
          fun
            (x10494 :
              [ `Number of float  | `Other of ExportValue.t ] Primitive.t)
            ->
            Primitive.t_to_js
              (fun (x10495 : [ `Number of float  | `Other of ExportValue.t ])
                 ->
                 match x10495 with
                 | `Number x10496 -> Ojs.float_to_js x10496
                 | `Other x10497 -> ExportValue.t_to_js x10497) x10494
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10502 : Ojs.t) -> t_of_js x10502
        and t_0_to_js : t_0 -> Ojs.t = fun (x10501 : t) -> t_to_js x10501
      end
    module ModuleImports =
      struct
        type t = (string, ImportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10506 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ImportValue.t_of_js x10506
        and t_to_js : t -> Ojs.t =
          fun (x10503 : (string, ImportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ImportValue.t_to_js x10503
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10510 : Ojs.t) -> t_of_js x10510
        and t_0_to_js : t_0 -> Ojs.t = fun (x10509 : t) -> t_to_js x10509
      end
    module Imports =
      struct
        type t = (string, ModuleImports.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10514 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ModuleImports.t_of_js x10514
        and t_to_js : t -> Ojs.t =
          fun (x10511 : (string, ModuleImports.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ModuleImports.t_to_js x10511
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10518 : Ojs.t) -> t_of_js x10518
        and t_0_to_js : t_0 -> Ojs.t = fun (x10517 : t) -> t_to_js x10517
      end
    module Exports =
      struct
        type t = (string, ExportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10522 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ExportValue.t_of_js x10522
        and t_to_js : t -> Ojs.t =
          fun (x10519 : (string, ExportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ExportValue.t_to_js x10519
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10526 : Ojs.t) -> t_of_js x10526
        and t_0_to_js : t_0 -> Ojs.t = fun (x10525 : t) -> t_to_js x10525
      end
    module Instance =
      struct
        type t = [ `WebAssembly_Instance ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10528 : Ojs.t) -> t_of_js x10528
        and t_0_to_js : t_0 -> Ojs.t = fun (x10527 : t) -> t_to_js x10527
        type tags = [ `WebAssembly_Instance ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Instance ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10531 : Ojs.t) -> intf_of_js __tags_of_js x10531
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10529 : __tags intf) -> intf_to_js __tags_to_js x10529
        let (get_exports : 'tags this -> Exports.t) =
          fun (x10533 : 'tags this) ->
            Exports.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10533) "exports")
        let (create : exports:Exports.t -> unit -> t) =
          fun ~exports:(x10535 : Exports.t) ->
            fun () ->
              let x10536 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x10536 "exports" (Exports.t_to_js x10535);
              t_of_js x10536
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Instance")
                 "prototype")
        let (create' :
          module_:Module.t -> ?importObject:Imports.t -> unit -> t) =
          fun ~module_:(x10537 : Module.t) ->
            fun ?importObject:(x10538 : Imports.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Instance")
                     (let x10539 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10539 "push" [|(Module.t_to_js x10537)|]);
                      (match x10538 with
                       | Some x10540 ->
                           ignore
                             (Ojs.call x10539 "push"
                                [|(Imports.t_to_js x10540)|])
                       | None -> ());
                      x10539))
      end
    module WebAssemblyInstantiatedSource =
      struct
        type t = [ `WebAssembly_WebAssemblyInstantiatedSource ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10542 : Ojs.t) -> t_of_js x10542
        and t_0_to_js : t_0 -> Ojs.t = fun (x10541 : t) -> t_to_js x10541
        type tags = [ `WebAssembly_WebAssemblyInstantiatedSource ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_WebAssemblyInstantiatedSource ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10545 : Ojs.t) -> intf_of_js __tags_of_js x10545
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10543 : __tags intf) -> intf_to_js __tags_to_js x10543
        let (get_instance : 'tags this -> Instance.t) =
          fun (x10547 : 'tags this) ->
            Instance.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10547) "instance")
        let (set_instance : 'tags this -> Instance.t -> unit) =
          fun (x10549 : 'tags this) ->
            fun (x10550 : Instance.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10549) "instance"
                (Instance.t_to_js x10550)
        let (get_module : 'tags this -> Module.t) =
          fun (x10552 : 'tags this) ->
            Module.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10552) "module")
        let (set_module : 'tags this -> Module.t -> unit) =
          fun (x10554 : 'tags this) ->
            fun (x10555 : Module.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10554) "module"
                (Module.t_to_js x10555)
        let (create : instance:Instance.t -> module_:Module.t -> unit -> t) =
          fun ~instance:(x10557 : Instance.t) ->
            fun ~module_:(x10558 : Module.t) ->
              fun () ->
                let x10559 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10559 "instance"
                  (Instance.t_to_js x10557);
                Ojs.set_prop_ascii x10559 "module" (Module.t_to_js x10558);
                t_of_js x10559
        let cast_from = Obj.magic
      end
    module RuntimeError =
      struct
        type t = [ `WebAssembly_RuntimeError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10561 : Ojs.t) -> t_of_js x10561
        and t_0_to_js : t_0 -> Ojs.t = fun (x10560 : t) -> t_to_js x10560
        type tags = [ `WebAssembly_RuntimeError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_RuntimeError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10564 : Ojs.t) -> intf_of_js __tags_of_js x10564
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10562 : __tags intf) -> intf_to_js __tags_to_js x10562
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "RuntimeError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10566 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError")
                   (let x10567 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10566 with
                     | Some x10568 ->
                         ignore
                           (Ojs.call x10567 "push"
                              [|(Ojs.string_to_js x10568)|])
                     | None -> ());
                    x10567))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10569 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError") "apply"
                   [|Ojs.null;((let x10570 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10569 with
                                 | Some x10571 ->
                                     ignore
                                       (Ojs.call x10570 "push"
                                          [|(Ojs.string_to_js x10571)|])
                                 | None -> ());
                                x10570))|])
      end
    module LinkError =
      struct
        type t = [ `WebAssembly_LinkError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10573 : Ojs.t) -> t_of_js x10573
        and t_0_to_js : t_0 -> Ojs.t = fun (x10572 : t) -> t_to_js x10572
        type tags = [ `WebAssembly_LinkError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_LinkError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10576 : Ojs.t) -> intf_of_js __tags_of_js x10576
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10574 : __tags intf) -> intf_to_js __tags_to_js x10574
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "LinkError")
                 "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10578 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError")
                   (let x10579 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10578 with
                     | Some x10580 ->
                         ignore
                           (Ojs.call x10579 "push"
                              [|(Ojs.string_to_js x10580)|])
                     | None -> ());
                    x10579))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10581 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError") "apply"
                   [|Ojs.null;((let x10582 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10581 with
                                 | Some x10583 ->
                                     ignore
                                       (Ojs.call x10582 "push"
                                          [|(Ojs.string_to_js x10583)|])
                                 | None -> ());
                                x10582))|])
      end
    module CompileError =
      struct
        type t = [ `WebAssembly_CompileError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10585 : Ojs.t) -> t_of_js x10585
        and t_0_to_js : t_0 -> Ojs.t = fun (x10584 : t) -> t_to_js x10584
        type tags = [ `WebAssembly_CompileError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_CompileError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          =
          fun (type __tags) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (x10588 : Ojs.t) -> intf_of_js __tags_of_js x10588
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (x10586 : __tags intf) -> intf_to_js __tags_to_js x10586
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "CompileError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10590 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError")
                   (let x10591 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10590 with
                     | Some x10592 ->
                         ignore
                           (Ojs.call x10591 "push"
                              [|(Ojs.string_to_js x10592)|])
                     | None -> ());
                    x10591))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10593 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError") "apply"
                   [|Ojs.null;((let x10594 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10593 with
                                 | Some x10595 ->
                                     ignore
                                       (Ojs.call x10594 "push"
                                          [|(Ojs.string_to_js x10595)|])
                                 | None -> ());
                                x10594))|])
      end
    let (compile : BufferSource.t -> Module.t Promise.t_1) =
      fun (x10596 : BufferSource.t) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "compile"
             [|(BufferSource.t_to_js x10596)|])
    let (compileStreaming :
      (Response.t, Response.t PromiseLike.t_1) union2 -> Module.t Promise.t_1)
      =
      fun (x10598 : (Response.t, Response.t PromiseLike.t_1) union2) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly")
             "compileStreaming"
             [|(union2_to_js Response.t_to_js
                  (fun (x10600 : Response.t PromiseLike.t_1) ->
                     PromiseLike.t_1_to_js Response.t_to_js x10600) x10598)|])
    let (instantiate :
      bytes:BufferSource.t ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~bytes:(x10603 : BufferSource.t) ->
        fun ?importObject:(x10604 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10607 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10607 "instantiate") "apply"
                 [|x10607;((let x10605 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10605 "push"
                                 [|(BufferSource.t_to_js x10603)|]);
                            (match x10604 with
                             | Some x10606 ->
                                 ignore
                                   (Ojs.call x10605 "push"
                                      [|(Imports.t_to_js x10606)|])
                             | None -> ());
                            x10605))|])
    let (instantiate' :
      moduleObject:Module.t ->
        ?importObject:Imports.t -> unit -> Instance.t Promise.t_1)
      =
      fun ~moduleObject:(x10609 : Module.t) ->
        fun ?importObject:(x10610 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js Instance.t_of_js
              (let x10613 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10613 "instantiate") "apply"
                 [|x10613;((let x10611 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10611 "push"
                                 [|(Module.t_to_js x10609)|]);
                            (match x10610 with
                             | Some x10612 ->
                                 ignore
                                   (Ojs.call x10611 "push"
                                      [|(Imports.t_to_js x10612)|])
                             | None -> ());
                            x10611))|])
    let (instantiateStreaming :
      source:(Response.t, Response.t PromiseLike.t_1) union2 ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~source:(x10615 : (Response.t, Response.t PromiseLike.t_1) union2)
        ->
        fun ?importObject:(x10616 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10622 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10622 "instantiateStreaming")
                 "apply"
                 [|x10622;((let x10617 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10617 "push"
                                 [|(union2_to_js Response.t_to_js
                                      (fun
                                         (x10620 :
                                           Response.t PromiseLike.t_1)
                                         ->
                                         PromiseLike.t_1_to_js
                                           Response.t_to_js x10620) x10615)|]);
                            (match x10616 with
                             | Some x10618 ->
                                 ignore
                                   (Ojs.call x10617 "push"
                                      [|(Imports.t_to_js x10618)|])
                             | None -> ());
                            x10617))|])
    let (validate : BufferSource.t -> bool) =
      fun (x10624 : BufferSource.t) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "validate"
             [|(BufferSource.t_to_js x10624)|])
  end
module WEBGL_multi_draw =
  struct
    type t = [ `WEBGL_multi_draw ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10626 : Ojs.t) -> t_of_js x10626
    and t_0_to_js : t_0 -> Ojs.t = fun (x10625 : t) -> t_to_js x10625
    type tags = [ `WEBGL_multi_draw ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_multi_draw ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x10629 : Ojs.t) -> intf_of_js __tags_of_js x10629
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x10627 : __tags intf) -> intf_to_js __tags_to_js x10627
    let (multiDrawArraysInstancedWEBGL :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0 
                         | `U2 of GLsizei.t Iterable.t_1 ]
                ->
                countsOffset:GLuint.t ->
                  instanceCountsList:[ `U1 of Int32Array.t_0 
                                     | `U2 of GLsizei.t Iterable.t_1 ]
                    ->
                    instanceCountsOffset:GLuint.t ->
                      drawcount:GLsizei.t -> unit)
      =
      fun (x10648 : 'tags this) ->
        fun ~mode:(x10631 : GLenum.t) ->
          fun
            ~firstsList:(x10632 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~firstsOffset:(x10636 : GLuint.t) ->
              fun
                ~countsList:(x10637 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t Iterable.t_1 ])
                ->
                fun ~countsOffset:(x10641 : GLuint.t) ->
                  fun
                    ~instanceCountsList:(x10642 :
                                          [ `U1 of Int32Array.t_0 
                                          | `U2 of GLsizei.t Iterable.t_1 ])
                    ->
                    fun ~instanceCountsOffset:(x10646 : GLuint.t) ->
                      fun ~drawcount:(x10647 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x10648)
                             "multiDrawArraysInstancedWEBGL"
                             [|(GLenum.t_to_js x10631);((match x10632 with
                                                         | `U1 x10633 ->
                                                             Int32Array.t_0_to_js
                                                               x10633
                                                         | `U2 x10634 ->
                                                             Iterable.t_1_to_js
                                                               GLint.t_to_js
                                                               x10634));(
                               GLuint.t_to_js x10636);((match x10637 with
                                                        | `U1 x10638 ->
                                                            Int32Array.t_0_to_js
                                                              x10638
                                                        | `U2 x10639 ->
                                                            Iterable.t_1_to_js
                                                              GLsizei.t_to_js
                                                              x10639));(
                               GLuint.t_to_js x10641);((match x10642 with
                                                        | `U1 x10643 ->
                                                            Int32Array.t_0_to_js
                                                              x10643
                                                        | `U2 x10644 ->
                                                            Iterable.t_1_to_js
                                                              GLsizei.t_to_js
                                                              x10644));(
                               GLuint.t_to_js x10646);(GLsizei.t_to_js x10647)|])
    let (multiDrawArraysWEBGL :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0 
                         | `U2 of GLsizei.t Iterable.t_1 ]
                -> countsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x10662 : 'tags this) ->
        fun ~mode:(x10650 : GLenum.t) ->
          fun
            ~firstsList:(x10651 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~firstsOffset:(x10655 : GLuint.t) ->
              fun
                ~countsList:(x10656 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t Iterable.t_1 ])
                ->
                fun ~countsOffset:(x10660 : GLuint.t) ->
                  fun ~drawcount:(x10661 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x10662)
                         "multiDrawArraysWEBGL"
                         [|(GLenum.t_to_js x10650);((match x10651 with
                                                     | `U1 x10652 ->
                                                         Int32Array.t_0_to_js
                                                           x10652
                                                     | `U2 x10653 ->
                                                         Iterable.t_1_to_js
                                                           GLint.t_to_js
                                                           x10653));(
                           GLuint.t_to_js x10655);((match x10656 with
                                                    | `U1 x10657 ->
                                                        Int32Array.t_0_to_js
                                                          x10657
                                                    | `U2 x10658 ->
                                                        Iterable.t_1_to_js
                                                          GLsizei.t_to_js
                                                          x10658));(GLuint.t_to_js
                                                                    x10660);(
                           GLsizei.t_to_js x10661)|])
    let (multiDrawElementsInstancedWEBGL :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t Iterable.t_1 ]
                  ->
                  offsetsOffset:GLuint.t ->
                    instanceCountsList:[ `U1 of Int32Array.t_0 
                                       | `U2 of GLsizei.t Iterable.t_1 ]
                      ->
                      instanceCountsOffset:GLuint.t ->
                        drawcount:GLsizei.t -> unit)
      =
      fun (x10682 : 'tags this) ->
        fun ~mode:(x10664 : GLenum.t) ->
          fun
            ~countsList:(x10665 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~countsOffset:(x10669 : GLuint.t) ->
              fun ~type_:(x10670 : GLenum.t) ->
                fun
                  ~offsetsList:(x10671 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t Iterable.t_1 ])
                  ->
                  fun ~offsetsOffset:(x10675 : GLuint.t) ->
                    fun
                      ~instanceCountsList:(x10676 :
                                            [ `U1 of Int32Array.t_0 
                                            | `U2 of GLsizei.t Iterable.t_1 ])
                      ->
                      fun ~instanceCountsOffset:(x10680 : GLuint.t) ->
                        fun ~drawcount:(x10681 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x10682)
                               "multiDrawElementsInstancedWEBGL"
                               [|(GLenum.t_to_js x10664);((match x10665 with
                                                           | `U1 x10666 ->
                                                               Int32Array.t_0_to_js
                                                                 x10666
                                                           | `U2 x10667 ->
                                                               Iterable.t_1_to_js
                                                                 GLint.t_to_js
                                                                 x10667));(
                                 GLuint.t_to_js x10669);(GLenum.t_to_js
                                                           x10670);((
                                 match x10671 with
                                 | `U1 x10672 -> Int32Array.t_0_to_js x10672
                                 | `U2 x10673 ->
                                     Iterable.t_1_to_js GLsizei.t_to_js
                                       x10673));(GLuint.t_to_js x10675);((
                                 match x10676 with
                                 | `U1 x10677 -> Int32Array.t_0_to_js x10677
                                 | `U2 x10678 ->
                                     Iterable.t_1_to_js GLsizei.t_to_js
                                       x10678));(GLuint.t_to_js x10680);(
                                 GLsizei.t_to_js x10681)|])
    let (multiDrawElementsWEBGL :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t Iterable.t_1 ]
            ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t Iterable.t_1 ]
                  -> offsetsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x10697 : 'tags this) ->
        fun ~mode:(x10684 : GLenum.t) ->
          fun
            ~countsList:(x10685 :
                          [ `U1 of Int32Array.t_0 
                          | `U2 of GLint.t Iterable.t_1 ])
            ->
            fun ~countsOffset:(x10689 : GLuint.t) ->
              fun ~type_:(x10690 : GLenum.t) ->
                fun
                  ~offsetsList:(x10691 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t Iterable.t_1 ])
                  ->
                  fun ~offsetsOffset:(x10695 : GLuint.t) ->
                    fun ~drawcount:(x10696 : GLsizei.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10697)
                           "multiDrawElementsWEBGL"
                           [|(GLenum.t_to_js x10684);((match x10685 with
                                                       | `U1 x10686 ->
                                                           Int32Array.t_0_to_js
                                                             x10686
                                                       | `U2 x10687 ->
                                                           Iterable.t_1_to_js
                                                             GLint.t_to_js
                                                             x10687));(
                             GLuint.t_to_js x10689);(GLenum.t_to_js x10690);((
                             match x10691 with
                             | `U1 x10692 -> Int32Array.t_0_to_js x10692
                             | `U2 x10693 ->
                                 Iterable.t_1_to_js GLsizei.t_to_js x10693));(
                             GLuint.t_to_js x10695);(GLsizei.t_to_js x10696)|])
    let (multiDrawArraysInstancedWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0  | `U2 of GLsizei.t list ]
                ->
                countsOffset:GLuint.t ->
                  instanceCountsList:[ `U1 of Int32Array.t_0 
                                     | `U2 of GLsizei.t list ]
                    ->
                    instanceCountsOffset:GLuint.t ->
                      drawcount:GLsizei.t -> unit)
      =
      fun (x10716 : 'tags this) ->
        fun ~mode:(x10699 : GLenum.t) ->
          fun
            ~firstsList:(x10700 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~firstsOffset:(x10704 : GLuint.t) ->
              fun
                ~countsList:(x10705 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t list ])
                ->
                fun ~countsOffset:(x10709 : GLuint.t) ->
                  fun
                    ~instanceCountsList:(x10710 :
                                          [ `U1 of Int32Array.t_0 
                                          | `U2 of GLsizei.t list ])
                    ->
                    fun ~instanceCountsOffset:(x10714 : GLuint.t) ->
                      fun ~drawcount:(x10715 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x10716)
                             "multiDrawArraysInstancedWEBGL"
                             [|(GLenum.t_to_js x10699);((match x10700 with
                                                         | `U1 x10701 ->
                                                             Int32Array.t_0_to_js
                                                               x10701
                                                         | `U2 x10702 ->
                                                             Ojs.list_to_js
                                                               GLint.t_to_js
                                                               x10702));(
                               GLuint.t_to_js x10704);((match x10705 with
                                                        | `U1 x10706 ->
                                                            Int32Array.t_0_to_js
                                                              x10706
                                                        | `U2 x10707 ->
                                                            Ojs.list_to_js
                                                              GLsizei.t_to_js
                                                              x10707));(
                               GLuint.t_to_js x10709);((match x10710 with
                                                        | `U1 x10711 ->
                                                            Int32Array.t_0_to_js
                                                              x10711
                                                        | `U2 x10712 ->
                                                            Ojs.list_to_js
                                                              GLsizei.t_to_js
                                                              x10712));(
                               GLuint.t_to_js x10714);(GLsizei.t_to_js x10715)|])
    let (multiDrawArraysWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          firstsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            firstsOffset:GLuint.t ->
              countsList:[ `U1 of Int32Array.t_0  | `U2 of GLsizei.t list ]
                -> countsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x10730 : 'tags this) ->
        fun ~mode:(x10718 : GLenum.t) ->
          fun
            ~firstsList:(x10719 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~firstsOffset:(x10723 : GLuint.t) ->
              fun
                ~countsList:(x10724 :
                              [ `U1 of Int32Array.t_0 
                              | `U2 of GLsizei.t list ])
                ->
                fun ~countsOffset:(x10728 : GLuint.t) ->
                  fun ~drawcount:(x10729 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x10730)
                         "multiDrawArraysWEBGL"
                         [|(GLenum.t_to_js x10718);((match x10719 with
                                                     | `U1 x10720 ->
                                                         Int32Array.t_0_to_js
                                                           x10720
                                                     | `U2 x10721 ->
                                                         Ojs.list_to_js
                                                           GLint.t_to_js
                                                           x10721));(
                           GLuint.t_to_js x10723);((match x10724 with
                                                    | `U1 x10725 ->
                                                        Int32Array.t_0_to_js
                                                          x10725
                                                    | `U2 x10726 ->
                                                        Ojs.list_to_js
                                                          GLsizei.t_to_js
                                                          x10726));(GLuint.t_to_js
                                                                    x10728);(
                           GLsizei.t_to_js x10729)|])
    let (multiDrawElementsInstancedWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t list ]
                  ->
                  offsetsOffset:GLuint.t ->
                    instanceCountsList:[ `U1 of Int32Array.t_0 
                                       | `U2 of GLsizei.t list ]
                      ->
                      instanceCountsOffset:GLuint.t ->
                        drawcount:GLsizei.t -> unit)
      =
      fun (x10750 : 'tags this) ->
        fun ~mode:(x10732 : GLenum.t) ->
          fun
            ~countsList:(x10733 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~countsOffset:(x10737 : GLuint.t) ->
              fun ~type_:(x10738 : GLenum.t) ->
                fun
                  ~offsetsList:(x10739 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t list ])
                  ->
                  fun ~offsetsOffset:(x10743 : GLuint.t) ->
                    fun
                      ~instanceCountsList:(x10744 :
                                            [ `U1 of Int32Array.t_0 
                                            | `U2 of GLsizei.t list ])
                      ->
                      fun ~instanceCountsOffset:(x10748 : GLuint.t) ->
                        fun ~drawcount:(x10749 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x10750)
                               "multiDrawElementsInstancedWEBGL"
                               [|(GLenum.t_to_js x10732);((match x10733 with
                                                           | `U1 x10734 ->
                                                               Int32Array.t_0_to_js
                                                                 x10734
                                                           | `U2 x10735 ->
                                                               Ojs.list_to_js
                                                                 GLint.t_to_js
                                                                 x10735));(
                                 GLuint.t_to_js x10737);(GLenum.t_to_js
                                                           x10738);((
                                 match x10739 with
                                 | `U1 x10740 -> Int32Array.t_0_to_js x10740
                                 | `U2 x10741 ->
                                     Ojs.list_to_js GLsizei.t_to_js x10741));(
                                 GLuint.t_to_js x10743);((match x10744 with
                                                          | `U1 x10745 ->
                                                              Int32Array.t_0_to_js
                                                                x10745
                                                          | `U2 x10746 ->
                                                              Ojs.list_to_js
                                                                GLsizei.t_to_js
                                                                x10746));(
                                 GLuint.t_to_js x10748);(GLsizei.t_to_js
                                                           x10749)|])
    let (multiDrawElementsWEBGL' :
      'tags this ->
        mode:GLenum.t ->
          countsList:[ `U1 of Int32Array.t_0  | `U2 of GLint.t list ] ->
            countsOffset:GLuint.t ->
              type_:GLenum.t ->
                offsetsList:[ `U1 of Int32Array.t_0 
                            | `U2 of GLsizei.t list ]
                  -> offsetsOffset:GLuint.t -> drawcount:GLsizei.t -> unit)
      =
      fun (x10765 : 'tags this) ->
        fun ~mode:(x10752 : GLenum.t) ->
          fun
            ~countsList:(x10753 :
                          [ `U1 of Int32Array.t_0  | `U2 of GLint.t list ])
            ->
            fun ~countsOffset:(x10757 : GLuint.t) ->
              fun ~type_:(x10758 : GLenum.t) ->
                fun
                  ~offsetsList:(x10759 :
                                 [ `U1 of Int32Array.t_0 
                                 | `U2 of GLsizei.t list ])
                  ->
                  fun ~offsetsOffset:(x10763 : GLuint.t) ->
                    fun ~drawcount:(x10764 : GLsizei.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10765)
                           "multiDrawElementsWEBGL"
                           [|(GLenum.t_to_js x10752);((match x10753 with
                                                       | `U1 x10754 ->
                                                           Int32Array.t_0_to_js
                                                             x10754
                                                       | `U2 x10755 ->
                                                           Ojs.list_to_js
                                                             GLint.t_to_js
                                                             x10755));(
                             GLuint.t_to_js x10757);(GLenum.t_to_js x10758);((
                             match x10759 with
                             | `U1 x10760 -> Int32Array.t_0_to_js x10760
                             | `U2 x10761 ->
                                 Ojs.list_to_js GLsizei.t_to_js x10761));(
                             GLuint.t_to_js x10763);(GLsizei.t_to_js x10764)|])
    let cast_from = Obj.magic
  end
module TransformStreamDefaultController =
  struct
    type 'O t = [ `TransformStreamDefaultController of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10769 : Ojs.t) -> t_of_js __O_of_js x10769
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10767 : __O t) -> t_to_js __O_to_js x10767
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10773 : Ojs.t) -> t_of_js any_of_js x10773
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10771 : any t) -> t_to_js any_to_js x10771
    type 'O tags = [ `TransformStreamDefaultController of 'O ]
    type 'O tags_1 = 'O tags
    type tags_0 = any tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformStreamDefaultController of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x10777 : Ojs.t) -> intf_of_js __tags_of_js x10777
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x10775 : __tags intf) -> intf_to_js __tags_to_js x10775
    let (get_desiredSize : ('tags, 'O) this -> float option) =
      fun (x10779 : ('tags, 'O) this) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x10779)
             "desiredSize")
    let (enqueue : ('tags, 'O) this -> ?chunk:'O -> unit -> unit) =
      fun (x10786 : ('tags, 'O) this) ->
        fun ?chunk:(x10783 : 'O option) ->
          fun () ->
            ignore
              (let x10789 = this_to_js Obj.magic Obj.magic x10786 in
               Ojs.call (Ojs.get_prop_ascii x10789 "enqueue") "apply"
                 [|x10789;((let x10784 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10783 with
                             | Some x10785 ->
                                 ignore
                                   (Ojs.call x10784 "push"
                                      [|(Obj.magic x10785)|])
                             | None -> ());
                            x10784))|])
    let (error : ('tags, 'O) this -> ?reason:any -> unit -> unit) =
      fun (x10793 : ('tags, 'O) this) ->
        fun ?reason:(x10790 : any option) ->
          fun () ->
            ignore
              (let x10796 = this_to_js Obj.magic Obj.magic x10793 in
               Ojs.call (Ojs.get_prop_ascii x10796 "error") "apply"
                 [|x10796;((let x10791 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10790 with
                             | Some x10792 ->
                                 ignore
                                   (Ojs.call x10791 "push"
                                      [|(any_to_js x10792)|])
                             | None -> ());
                            x10791))|])
    let (terminate : ('tags, 'O) this -> unit) =
      fun (x10797 : ('tags, 'O) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x10797) "terminate" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") [||])
  end
module TransformerTransformCallback =
  struct
    type ('I, 'O) t = [ `TransformerTransformCallback of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x10803 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10803
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x10800 : (__I, __O) t) ->
                t_to_js __I_to_js __O_to_js x10800
    type ('I, 'O) tags = [ `TransformerTransformCallback of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformerTransformCallback of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (__I_of_js : Ojs.t -> __I) ->
                fun (__O_of_js : Ojs.t -> __O) ->
                  fun (x10808 : Ojs.t) -> intf_of_js __tags_of_js x10808
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (__I_to_js : __I -> Ojs.t) ->
                fun (__O_to_js : __O -> Ojs.t) ->
                  fun (x10806 : __tags intf) ->
                    intf_to_js __tags_to_js x10806
    let (apply :
      ('tags, 'I, 'O) this ->
        chunk:'I ->
          controller:'O TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x10813 : ('tags, 'I, 'O) this) ->
        fun ~chunk:(x10810 : 'I) ->
          fun ~controller:(x10811 : 'O TransformStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x10818 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x10818)
              (Ojs.apply (this_to_js Obj.magic Obj.magic Obj.magic x10813)
                 [|(Obj.magic x10810);(TransformStreamDefaultController.t_to_js
                                         Obj.magic x10811)|])
    let cast_from = Obj.magic
  end
module TransformerStartCallback =
  struct
    type 'O t = [ `TransformerStartCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10822 : Ojs.t) -> t_of_js __O_of_js x10822
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10820 : __O t) -> t_to_js __O_to_js x10820
    type 'O tags = [ `TransformerStartCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x10826 : Ojs.t) -> intf_of_js __tags_of_js x10826
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x10824 : __tags intf) -> intf_to_js __tags_to_js x10824
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> any)
      =
      fun (x10830 : ('tags, 'O) this) ->
        fun ~controller:(x10828 : 'O TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x10830)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x10828)|])
    let cast_from = Obj.magic
  end
module TransformerFlushCallback =
  struct
    type 'O t = [ `TransformerFlushCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10835 : Ojs.t) -> t_of_js __O_of_js x10835
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10833 : __O t) -> t_to_js __O_to_js x10833
    type 'O tags = [ `TransformerFlushCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x10839 : Ojs.t) -> intf_of_js __tags_of_js x10839
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __O) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x10837 : __tags intf) -> intf_to_js __tags_to_js x10837
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x10843 : ('tags, 'O) this) ->
        fun ~controller:(x10841 : 'O TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x10847 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x10847)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x10843)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x10841)|])
    let cast_from = Obj.magic
  end
module Transformer =
  struct
    type ('I, 'O) t = [ `Transformer of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x10852 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10852
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x10849 : (__I, __O) t) ->
                t_to_js __I_to_js __O_to_js x10849
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 =
      fun (type __I) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (x10858 : Ojs.t) -> t_of_js __I_of_js any_of_js x10858
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t =
      fun (type __I) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (x10855 : (__I, any) t) -> t_to_js __I_to_js any_to_js x10855
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10864 : Ojs.t) -> t_of_js any_of_js any_of_js x10864
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10861 : (any, any) t) -> t_to_js any_to_js any_to_js x10861
    type ('I, 'O) tags = [ `Transformer of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (__I_of_js : Ojs.t -> __I) ->
                fun (__O_of_js : Ojs.t -> __O) ->
                  fun (x10869 : Ojs.t) -> intf_of_js __tags_of_js x10869
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (__I_to_js : __I -> Ojs.t) ->
                fun (__O_to_js : __O -> Ojs.t) ->
                  fun (x10867 : __tags intf) ->
                    intf_to_js __tags_to_js x10867
    let (get_flush : ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t) =
      fun (x10871 : ('tags, 'I, 'O) this) ->
        TransformerFlushCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10871) "flush")
    let (set_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit) =
      fun (x10876 : ('tags, 'I, 'O) this) ->
        fun (x10877 : 'O TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10876) "flush"
            (TransformerFlushCallback.t_to_js Obj.magic x10877)
    let (get_readableType : ('tags, 'I, 'O) this -> undefined) =
      fun (x10882 : ('tags, 'I, 'O) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10882) "readableType")
    let (set_readableType : ('tags, 'I, 'O) this -> undefined -> unit) =
      fun (x10886 : ('tags, 'I, 'O) this) ->
        fun (x10887 : undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10886) "readableType"
            (undefined_to_js x10887)
    let (get_start : ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t) =
      fun (x10891 : ('tags, 'I, 'O) this) ->
        TransformerStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10891) "start")
    let (set_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit) =
      fun (x10896 : ('tags, 'I, 'O) this) ->
        fun (x10897 : 'O TransformerStartCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10896) "start"
            (TransformerStartCallback.t_to_js Obj.magic x10897)
    let (get_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t) =
      fun (x10902 : ('tags, 'I, 'O) this) ->
        TransformerTransformCallback.t_of_js Obj.magic Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10902) "transform")
    let (set_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit)
      =
      fun (x10908 : ('tags, 'I, 'O) this) ->
        fun (x10909 : ('I, 'O) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10908) "transform"
            (TransformerTransformCallback.t_to_js Obj.magic Obj.magic x10909)
    let (get_writableType : ('tags, 'I, 'O) this -> undefined) =
      fun (x10915 : ('tags, 'I, 'O) this) ->
        undefined_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10915) "writableType")
    let (set_writableType : ('tags, 'I, 'O) this -> undefined -> unit) =
      fun (x10919 : ('tags, 'I, 'O) this) ->
        fun (x10920 : undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10919) "writableType"
            (undefined_to_js x10920)
    let (create :
      flush:'O TransformerFlushCallback.t ->
        ?readableType:never ->
          start:'O TransformerStartCallback.t ->
            transform:('I, 'O) TransformerTransformCallback.t ->
              ?writableType:never -> unit -> ('I, 'O) t)
      =
      fun ~flush:(x10924 : 'O TransformerFlushCallback.t) ->
        fun ?readableType:(x10925 : never option) ->
          fun ~start:(x10926 : 'O TransformerStartCallback.t) ->
            fun ~transform:(x10927 : ('I, 'O) TransformerTransformCallback.t)
              ->
              fun ?writableType:(x10928 : never option) ->
                fun () ->
                  let x10929 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10929 "flush"
                    (TransformerFlushCallback.t_to_js Obj.magic x10924);
                  (match x10925 with
                   | Some x10936 ->
                       Ojs.set_prop_ascii x10929 "readableType"
                         (never_to_js x10936)
                   | None -> ());
                  Ojs.set_prop_ascii x10929 "start"
                    (TransformerStartCallback.t_to_js Obj.magic x10926);
                  Ojs.set_prop_ascii x10929 "transform"
                    (TransformerTransformCallback.t_to_js Obj.magic Obj.magic
                       x10927);
                  (match x10928 with
                   | Some x10932 ->
                       Ojs.set_prop_ascii x10929 "writableType"
                         (never_to_js x10932)
                   | None -> ());
                  t_of_js Obj.magic Obj.magic x10929
    let cast_from = Obj.magic
  end
module TransformStream =
  struct
    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x10941 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10941
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x10938 : (__I, __O) t) ->
                t_to_js __I_to_js __O_to_js x10938
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 =
      fun (type __I) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (x10947 : Ojs.t) -> t_of_js __I_of_js any_of_js x10947
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t =
      fun (type __I) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (x10944 : (__I, any) t) -> t_to_js __I_to_js any_to_js x10944
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10953 : Ojs.t) -> t_of_js any_of_js any_of_js x10953
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10950 : (any, any) t) -> t_to_js any_to_js any_to_js x10950
    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_of_js : Ojs.t -> __tags) ->
              fun (__I_of_js : Ojs.t -> __I) ->
                fun (__O_of_js : Ojs.t -> __O) ->
                  fun (x10958 : Ojs.t) -> intf_of_js __tags_of_js x10958
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __I) ->
          fun (type __O) ->
            fun (__tags_to_js : __tags -> Ojs.t) ->
              fun (__I_to_js : __I -> Ojs.t) ->
                fun (__O_to_js : __O -> Ojs.t) ->
                  fun (x10956 : __tags intf) ->
                    intf_to_js __tags_to_js x10956
    let (get_readable : ('tags, 'I, 'O) this -> 'O ReadableStream.t) =
      fun (x10960 : ('tags, 'I, 'O) this) ->
        ReadableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10960) "readable")
    let (get_writable : ('tags, 'I, 'O) this -> 'I WritableStream.t) =
      fun (x10965 : ('tags, 'I, 'O) this) ->
        WritableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10965) "writable")
    let (create :
      readable:'O ReadableStream.t ->
        writable:'I WritableStream.t -> unit -> ('I, 'O) t)
      =
      fun ~readable:(x10970 : 'O ReadableStream.t) ->
        fun ~writable:(x10971 : 'I WritableStream.t) ->
          fun () ->
            let x10972 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10972 "readable"
              (ReadableStream.t_to_js Obj.magic x10970);
            Ojs.set_prop_ascii x10972 "writable"
              (WritableStream.t_to_js Obj.magic x10971);
            t_of_js Obj.magic Obj.magic x10972
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TransformStream") "prototype")
    let (create' :
      ?transformer:('I, 'O) Transformer.t ->
        ?writableStrategy:'I QueuingStrategy.t ->
          ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t)
      =
      fun ?transformer:(x10977 : ('I, 'O) Transformer.t option) ->
        fun ?writableStrategy:(x10978 : 'I QueuingStrategy.t option) ->
          fun ?readableStrategy:(x10979 : 'O QueuingStrategy.t option) ->
            fun () ->
              t_of_js Obj.magic Obj.magic
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "TransformStream")
                   (let x10980 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10977 with
                     | Some x10985 ->
                         ignore
                           (Ojs.call x10980 "push"
                              [|(Transformer.t_to_js Obj.magic Obj.magic
                                   x10985)|])
                     | None -> ());
                    (match x10978 with
                     | Some x10983 ->
                         ignore
                           (Ojs.call x10980 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x10983)|])
                     | None -> ());
                    (match x10979 with
                     | Some x10981 ->
                         ignore
                           (Ojs.call x10980 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x10981)|])
                     | None -> ());
                    x10980))
  end
module TextMetrics =
  struct
    type t = [ `TextMetrics ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10991 : Ojs.t) -> t_of_js x10991
    and t_0_to_js : t_0 -> Ojs.t = fun (x10990 : t) -> t_to_js x10990
    type tags = [ `TextMetrics ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x10994 : Ojs.t) -> intf_of_js __tags_of_js x10994
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x10992 : __tags intf) -> intf_to_js __tags_to_js x10992
    let (get_actualBoundingBoxAscent : 'tags this -> float) =
      fun (x10996 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10996)
             "actualBoundingBoxAscent")
    let (get_actualBoundingBoxDescent : 'tags this -> float) =
      fun (x10998 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10998)
             "actualBoundingBoxDescent")
    let (get_actualBoundingBoxLeft : 'tags this -> float) =
      fun (x11000 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11000)
             "actualBoundingBoxLeft")
    let (get_actualBoundingBoxRight : 'tags this -> float) =
      fun (x11002 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11002)
             "actualBoundingBoxRight")
    let (get_fontBoundingBoxAscent : 'tags this -> float) =
      fun (x11004 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11004)
             "fontBoundingBoxAscent")
    let (get_fontBoundingBoxDescent : 'tags this -> float) =
      fun (x11006 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11006)
             "fontBoundingBoxDescent")
    let (get_width : 'tags this -> float) =
      fun (x11008 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11008) "width")
    let (create :
      actualBoundingBoxAscent:float ->
        actualBoundingBoxDescent:float ->
          actualBoundingBoxLeft:float ->
            actualBoundingBoxRight:float ->
              fontBoundingBoxAscent:float ->
                fontBoundingBoxDescent:float -> width:float -> unit -> t)
      =
      fun ~actualBoundingBoxAscent:(x11010 : float) ->
        fun ~actualBoundingBoxDescent:(x11011 : float) ->
          fun ~actualBoundingBoxLeft:(x11012 : float) ->
            fun ~actualBoundingBoxRight:(x11013 : float) ->
              fun ~fontBoundingBoxAscent:(x11014 : float) ->
                fun ~fontBoundingBoxDescent:(x11015 : float) ->
                  fun ~width:(x11016 : float) ->
                    fun () ->
                      let x11017 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x11017 "actualBoundingBoxAscent"
                        (Ojs.float_to_js x11010);
                      Ojs.set_prop_ascii x11017 "actualBoundingBoxDescent"
                        (Ojs.float_to_js x11011);
                      Ojs.set_prop_ascii x11017 "actualBoundingBoxLeft"
                        (Ojs.float_to_js x11012);
                      Ojs.set_prop_ascii x11017 "actualBoundingBoxRight"
                        (Ojs.float_to_js x11013);
                      Ojs.set_prop_ascii x11017 "fontBoundingBoxAscent"
                        (Ojs.float_to_js x11014);
                      Ojs.set_prop_ascii x11017 "fontBoundingBoxDescent"
                        (Ojs.float_to_js x11015);
                      Ojs.set_prop_ascii x11017 "width"
                        (Ojs.float_to_js x11016);
                      t_of_js x11017
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextMetrics")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextMetrics") [||])
  end
module TextEncoderCommon =
  struct
    type t = [ `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11019 : Ojs.t) -> t_of_js x11019
    and t_0_to_js : t_0 -> Ojs.t = fun (x11018 : t) -> t_to_js x11018
    type tags = [ `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11022 : Ojs.t) -> intf_of_js __tags_of_js x11022
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11020 : __tags intf) -> intf_to_js __tags_to_js x11020
    let (get_encoding : 'tags this -> string) =
      fun (x11024 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11024) "encoding")
    let (create : encoding:string -> unit -> t) =
      fun ~encoding:(x11026 : string) ->
        fun () ->
          let x11027 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11027 "encoding" (Ojs.string_to_js x11026);
          t_of_js x11027
    let cast_from = Obj.magic
  end
module GenericTransformStream =
  struct
    type t = [ `GenericTransformStream ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11029 : Ojs.t) -> t_of_js x11029
    and t_0_to_js : t_0 -> Ojs.t = fun (x11028 : t) -> t_to_js x11028
    type tags = [ `GenericTransformStream ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GenericTransformStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11032 : Ojs.t) -> intf_of_js __tags_of_js x11032
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11030 : __tags intf) -> intf_to_js __tags_to_js x11030
    let (get_readable : 'tags this -> ReadableStream.t_0) =
      fun (x11034 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11034) "readable")
    let (get_writable : 'tags this -> WritableStream.t_0) =
      fun (x11036 : 'tags this) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11036) "writable")
    let (create :
      readable:ReadableStream.t_0 -> writable:WritableStream.t_0 -> unit -> t)
      =
      fun ~readable:(x11038 : ReadableStream.t_0) ->
        fun ~writable:(x11039 : WritableStream.t_0) ->
          fun () ->
            let x11040 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11040 "readable"
              (ReadableStream.t_0_to_js x11038);
            Ojs.set_prop_ascii x11040 "writable"
              (WritableStream.t_0_to_js x11039);
            t_of_js x11040
    let cast_from = Obj.magic
  end
module TextEncoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11042 : Ojs.t) -> t_of_js x11042
    and t_0_to_js : t_0 -> Ojs.t = fun (x11041 : t) -> t_to_js x11041
    type tags =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11045 : Ojs.t) -> intf_of_js __tags_of_js x11045
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11043 : __tags intf) -> intf_to_js __tags_to_js x11043
    let (get_readable : 'tags this -> Uint8Array.t_0 ReadableStream.t) =
      fun (x11047 : 'tags this) ->
        ReadableStream.t_of_js Uint8Array.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11047) "readable")
    let (get_writable : 'tags this -> string WritableStream.t) =
      fun (x11050 : 'tags this) ->
        WritableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11050) "writable")
    let (create :
      readable:Uint8Array.t_0 ReadableStream.t ->
        writable:string WritableStream.t -> unit -> t)
      =
      fun ~readable:(x11053 : Uint8Array.t_0 ReadableStream.t) ->
        fun ~writable:(x11054 : string WritableStream.t) ->
          fun () ->
            let x11055 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11055 "readable"
              (ReadableStream.t_to_js Uint8Array.t_0_to_js x11053);
            Ojs.set_prop_ascii x11055 "writable"
              (WritableStream.t_to_js Ojs.string_to_js x11054);
            t_of_js x11055
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextEncoderStream") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
             [||])
  end
module TextEncoderEncodeIntoResult =
  struct
    type t = [ `TextEncoderEncodeIntoResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11059 : Ojs.t) -> t_of_js x11059
    and t_0_to_js : t_0 -> Ojs.t = fun (x11058 : t) -> t_to_js x11058
    type tags = [ `TextEncoderEncodeIntoResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11062 : Ojs.t) -> intf_of_js __tags_of_js x11062
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11060 : __tags intf) -> intf_to_js __tags_to_js x11060
    let (get_read : 'tags this -> float) =
      fun (x11064 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11064) "read")
    let (set_read : 'tags this -> float -> unit) =
      fun (x11066 : 'tags this) ->
        fun (x11067 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11066) "read"
            (Ojs.float_to_js x11067)
    let (get_written : 'tags this -> float) =
      fun (x11069 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11069) "written")
    let (set_written : 'tags this -> float -> unit) =
      fun (x11071 : 'tags this) ->
        fun (x11072 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11071) "written"
            (Ojs.float_to_js x11072)
    let (create : read:float -> written:float -> unit -> t) =
      fun ~read:(x11074 : float) ->
        fun ~written:(x11075 : float) ->
          fun () ->
            let x11076 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11076 "read" (Ojs.float_to_js x11074);
            Ojs.set_prop_ascii x11076 "written" (Ojs.float_to_js x11075);
            t_of_js x11076
    let cast_from = Obj.magic
  end
module TextEncoder =
  struct
    type t = [ `TextEncoder  | `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11078 : Ojs.t) -> t_of_js x11078
    and t_0_to_js : t_0 -> Ojs.t = fun (x11077 : t) -> t_to_js x11077
    type tags = [ `TextEncoder  | `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11081 : Ojs.t) -> intf_of_js __tags_of_js x11081
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11079 : __tags intf) -> intf_to_js __tags_to_js x11079
    let (encode : 'tags this -> ?input:string -> unit -> Uint8Array.t_0) =
      fun (x11086 : 'tags this) ->
        fun ?input:(x11083 : string option) ->
          fun () ->
            Uint8Array.t_0_of_js
              (let x11088 = this_to_js Obj.magic x11086 in
               Ojs.call (Ojs.get_prop_ascii x11088 "encode") "apply"
                 [|x11088;((let x11084 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11083 with
                             | Some x11085 ->
                                 ignore
                                   (Ojs.call x11084 "push"
                                      [|(Ojs.string_to_js x11085)|])
                             | None -> ());
                            x11084))|])
    let (encodeInto :
      'tags this ->
        source:string ->
          destination:Uint8Array.t_0 -> TextEncoderEncodeIntoResult.t)
      =
      fun (x11091 : 'tags this) ->
        fun ~source:(x11089 : string) ->
          fun ~destination:(x11090 : Uint8Array.t_0) ->
            TextEncoderEncodeIntoResult.t_of_js
              (Ojs.call (this_to_js Obj.magic x11091) "encodeInto"
                 [|(Ojs.string_to_js x11089);(Uint8Array.t_0_to_js x11090)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextEncoder")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoder") [||])
  end
module TextDecoderOptions =
  struct
    type t = [ `TextDecoderOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11094 : Ojs.t) -> t_of_js x11094
    and t_0_to_js : t_0 -> Ojs.t = fun (x11093 : t) -> t_to_js x11093
    type tags = [ `TextDecoderOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11097 : Ojs.t) -> intf_of_js __tags_of_js x11097
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11095 : __tags intf) -> intf_to_js __tags_to_js x11095
    let (get_fatal : 'tags this -> bool) =
      fun (x11099 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11099) "fatal")
    let (set_fatal : 'tags this -> bool -> unit) =
      fun (x11101 : 'tags this) ->
        fun (x11102 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11101) "fatal"
            (Ojs.bool_to_js x11102)
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x11104 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11104) "ignoreBOM")
    let (set_ignoreBOM : 'tags this -> bool -> unit) =
      fun (x11106 : 'tags this) ->
        fun (x11107 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11106) "ignoreBOM"
            (Ojs.bool_to_js x11107)
    let (create : fatal:bool -> ignoreBOM:bool -> unit -> t) =
      fun ~fatal:(x11109 : bool) ->
        fun ~ignoreBOM:(x11110 : bool) ->
          fun () ->
            let x11111 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11111 "fatal" (Ojs.bool_to_js x11109);
            Ojs.set_prop_ascii x11111 "ignoreBOM" (Ojs.bool_to_js x11110);
            t_of_js x11111
    let cast_from = Obj.magic
  end
module TextDecoderCommon =
  struct
    type t = [ `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11113 : Ojs.t) -> t_of_js x11113
    and t_0_to_js : t_0 -> Ojs.t = fun (x11112 : t) -> t_to_js x11112
    type tags = [ `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11116 : Ojs.t) -> intf_of_js __tags_of_js x11116
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11114 : __tags intf) -> intf_to_js __tags_to_js x11114
    let (get_encoding : 'tags this -> string) =
      fun (x11118 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11118) "encoding")
    let (get_fatal : 'tags this -> bool) =
      fun (x11120 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11120) "fatal")
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x11122 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11122) "ignoreBOM")
    let (create :
      encoding:string -> fatal:bool -> ignoreBOM:bool -> unit -> t) =
      fun ~encoding:(x11124 : string) ->
        fun ~fatal:(x11125 : bool) ->
          fun ~ignoreBOM:(x11126 : bool) ->
            fun () ->
              let x11127 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x11127 "encoding" (Ojs.string_to_js x11124);
              Ojs.set_prop_ascii x11127 "fatal" (Ojs.bool_to_js x11125);
              Ojs.set_prop_ascii x11127 "ignoreBOM" (Ojs.bool_to_js x11126);
              t_of_js x11127
    let cast_from = Obj.magic
  end
module TextDecoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11129 : Ojs.t) -> t_of_js x11129
    and t_0_to_js : t_0 -> Ojs.t = fun (x11128 : t) -> t_to_js x11128
    type tags =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11132 : Ojs.t) -> intf_of_js __tags_of_js x11132
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11130 : __tags intf) -> intf_to_js __tags_to_js x11130
    let (get_readable : 'tags this -> string ReadableStream.t) =
      fun (x11134 : 'tags this) ->
        ReadableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11134) "readable")
    let (get_writable : 'tags this -> BufferSource.t WritableStream.t) =
      fun (x11137 : 'tags this) ->
        WritableStream.t_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11137) "writable")
    let (create :
      readable:string ReadableStream.t ->
        writable:BufferSource.t WritableStream.t -> unit -> t)
      =
      fun ~readable:(x11140 : string ReadableStream.t) ->
        fun ~writable:(x11141 : BufferSource.t WritableStream.t) ->
          fun () ->
            let x11142 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11142 "readable"
              (ReadableStream.t_to_js Ojs.string_to_js x11140);
            Ojs.set_prop_ascii x11142 "writable"
              (WritableStream.t_to_js BufferSource.t_to_js x11141);
            t_of_js x11142
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextDecoderStream") "prototype")
    let (create' :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x11145 : string option) ->
        fun ?options:(x11146 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
                 (let x11147 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x11145 with
                   | Some x11149 ->
                       ignore
                         (Ojs.call x11147 "push"
                            [|(Ojs.string_to_js x11149)|])
                   | None -> ());
                  (match x11146 with
                   | Some x11148 ->
                       ignore
                         (Ojs.call x11147 "push"
                            [|(TextDecoderOptions.t_to_js x11148)|])
                   | None -> ());
                  x11147))
  end
module TextDecodeOptions =
  struct
    type t = [ `TextDecodeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11151 : Ojs.t) -> t_of_js x11151
    and t_0_to_js : t_0 -> Ojs.t = fun (x11150 : t) -> t_to_js x11150
    type tags = [ `TextDecodeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11154 : Ojs.t) -> intf_of_js __tags_of_js x11154
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11152 : __tags intf) -> intf_to_js __tags_to_js x11152
    let (get_stream : 'tags this -> bool) =
      fun (x11156 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11156) "stream")
    let (set_stream : 'tags this -> bool -> unit) =
      fun (x11158 : 'tags this) ->
        fun (x11159 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11158) "stream"
            (Ojs.bool_to_js x11159)
    let (create : stream:bool -> unit -> t) =
      fun ~stream:(x11161 : bool) ->
        fun () ->
          let x11162 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11162 "stream" (Ojs.bool_to_js x11161);
          t_of_js x11162
    let cast_from = Obj.magic
  end
module TextDecoder =
  struct
    type t = [ `TextDecoder  | `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11164 : Ojs.t) -> t_of_js x11164
    and t_0_to_js : t_0 -> Ojs.t = fun (x11163 : t) -> t_to_js x11163
    type tags = [ `TextDecoder  | `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11167 : Ojs.t) -> intf_of_js __tags_of_js x11167
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11165 : __tags intf) -> intf_to_js __tags_to_js x11165
    let (decode :
      'tags this ->
        ?input:BufferSource.t ->
          ?options:TextDecodeOptions.t -> unit -> string)
      =
      fun (x11174 : 'tags this) ->
        fun ?input:(x11169 : BufferSource.t option) ->
          fun ?options:(x11170 : TextDecodeOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x11176 = this_to_js Obj.magic x11174 in
                 Ojs.call (Ojs.get_prop_ascii x11176 "decode") "apply"
                   [|x11176;((let x11171 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x11169 with
                               | Some x11173 ->
                                   ignore
                                     (Ojs.call x11171 "push"
                                        [|(BufferSource.t_to_js x11173)|])
                               | None -> ());
                              (match x11170 with
                               | Some x11172 ->
                                   ignore
                                     (Ojs.call x11171 "push"
                                        [|(TextDecodeOptions.t_to_js x11172)|])
                               | None -> ());
                              x11171))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextDecoder")
             "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x11177 : string option) ->
        fun ?options:(x11178 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TextDecoder")
                 (let x11179 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x11177 with
                   | Some x11181 ->
                       ignore
                         (Ojs.call x11179 "push"
                            [|(Ojs.string_to_js x11181)|])
                   | None -> ());
                  (match x11178 with
                   | Some x11180 ->
                       ignore
                         (Ojs.call x11179 "push"
                            [|(TextDecoderOptions.t_to_js x11180)|])
                   | None -> ());
                  x11179))
  end
module PromiseRejectionEventInit =
  struct
    type t = [ `EventInit  | `PromiseRejectionEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11183 : Ojs.t) -> t_of_js x11183
    and t_0_to_js : t_0 -> Ojs.t = fun (x11182 : t) -> t_to_js x11182
    type tags = [ `EventInit  | `PromiseRejectionEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11186 : Ojs.t) -> intf_of_js __tags_of_js x11186
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11184 : __tags intf) -> intf_to_js __tags_to_js x11184
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x11188 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11188) "promise")
    let (set_promise : 'tags this -> any Promise.t_1 -> unit) =
      fun (x11191 : 'tags this) ->
        fun (x11192 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11191) "promise"
            (Promise.t_1_to_js any_to_js x11192)
    let (get_reason : 'tags this -> any) =
      fun (x11195 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11195) "reason")
    let (set_reason : 'tags this -> any -> unit) =
      fun (x11197 : 'tags this) ->
        fun (x11198 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11197) "reason"
            (any_to_js x11198)
    let (create : promise:any Promise.t_1 -> reason:any -> unit -> t) =
      fun ~promise:(x11200 : any Promise.t_1) ->
        fun ~reason:(x11201 : any) ->
          fun () ->
            let x11202 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11202 "promise"
              (Promise.t_1_to_js any_to_js x11200);
            Ojs.set_prop_ascii x11202 "reason" (any_to_js x11201);
            t_of_js x11202
    let cast_from = Obj.magic
  end
module PromiseRejectionEvent =
  struct
    type t = [ `Event  | `PromiseRejectionEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11205 : Ojs.t) -> t_of_js x11205
    and t_0_to_js : t_0 -> Ojs.t = fun (x11204 : t) -> t_to_js x11204
    type tags = [ `Event  | `PromiseRejectionEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11208 : Ojs.t) -> intf_of_js __tags_of_js x11208
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11206 : __tags intf) -> intf_to_js __tags_to_js x11206
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x11210 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11210) "promise")
    let (get_reason : 'tags this -> any) =
      fun (x11213 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11213) "reason")
    let (create : promise:any Promise.t_1 -> reason:any -> unit -> t) =
      fun ~promise:(x11215 : any Promise.t_1) ->
        fun ~reason:(x11216 : any) ->
          fun () ->
            let x11217 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11217 "promise"
              (Promise.t_1_to_js any_to_js x11215);
            Ojs.set_prop_ascii x11217 "reason" (any_to_js x11216);
            t_of_js x11217
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
             "prototype")
    let (create' :
      type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t) =
      fun ~type_:(x11219 : string) ->
        fun ~eventInitDict:(x11220 : PromiseRejectionEventInit.t) ->
          t_of_js
            (Ojs.new_obj
               (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
               [|(Ojs.string_to_js x11219);(PromiseRejectionEventInit.t_to_js
                                              x11220)|])
  end
module WorkerGlobalScopeEventMap =
  struct
    type t = [ `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11222 : Ojs.t) -> t_of_js x11222
    and t_0_to_js : t_0 -> Ojs.t = fun (x11221 : t) -> t_to_js x11221
    type tags = [ `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11225 : Ojs.t) -> intf_of_js __tags_of_js x11225
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11223 : __tags intf) -> intf_to_js __tags_to_js x11223
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x11227 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11227) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x11229 : 'tags this) ->
        fun (x11230 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11229) "error"
            (ErrorEvent.t_to_js x11230)
    let (get_languagechange : 'tags this -> Event.t) =
      fun (x11232 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11232) "languagechange")
    let (set_languagechange : 'tags this -> Event.t -> unit) =
      fun (x11234 : 'tags this) ->
        fun (x11235 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11234) "languagechange"
            (Event.t_to_js x11235)
    let (get_offline : 'tags this -> Event.t) =
      fun (x11237 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11237) "offline")
    let (set_offline : 'tags this -> Event.t -> unit) =
      fun (x11239 : 'tags this) ->
        fun (x11240 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11239) "offline"
            (Event.t_to_js x11240)
    let (get_online : 'tags this -> Event.t) =
      fun (x11242 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11242) "online")
    let (set_online : 'tags this -> Event.t -> unit) =
      fun (x11244 : 'tags this) ->
        fun (x11245 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11244) "online"
            (Event.t_to_js x11245)
    let (get_rejectionhandled : 'tags this -> PromiseRejectionEvent.t) =
      fun (x11247 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11247)
             "rejectionhandled")
    let (set_rejectionhandled :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x11249 : 'tags this) ->
        fun (x11250 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11249) "rejectionhandled"
            (PromiseRejectionEvent.t_to_js x11250)
    let (get_unhandledrejection : 'tags this -> PromiseRejectionEvent.t) =
      fun (x11252 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11252)
             "unhandledrejection")
    let (set_unhandledrejection :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x11254 : 'tags this) ->
        fun (x11255 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11254)
            "unhandledrejection" (PromiseRejectionEvent.t_to_js x11255)
    let (create :
      error:ErrorEvent.t ->
        languagechange:Event.t ->
          offline:Event.t ->
            online:Event.t ->
              rejectionhandled:PromiseRejectionEvent.t ->
                unhandledrejection:PromiseRejectionEvent.t -> unit -> t)
      =
      fun ~error:(x11257 : ErrorEvent.t) ->
        fun ~languagechange:(x11258 : Event.t) ->
          fun ~offline:(x11259 : Event.t) ->
            fun ~online:(x11260 : Event.t) ->
              fun ~rejectionhandled:(x11261 : PromiseRejectionEvent.t) ->
                fun ~unhandledrejection:(x11262 : PromiseRejectionEvent.t) ->
                  fun () ->
                    let x11263 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x11263 "error"
                      (ErrorEvent.t_to_js x11257);
                    Ojs.set_prop_ascii x11263 "languagechange"
                      (Event.t_to_js x11258);
                    Ojs.set_prop_ascii x11263 "offline"
                      (Event.t_to_js x11259);
                    Ojs.set_prop_ascii x11263 "online" (Event.t_to_js x11260);
                    Ojs.set_prop_ascii x11263 "rejectionhandled"
                      (PromiseRejectionEvent.t_to_js x11261);
                    Ojs.set_prop_ascii x11263 "unhandledrejection"
                      (PromiseRejectionEvent.t_to_js x11262);
                    t_of_js x11263
    let cast_from = Obj.magic
  end
module SharedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11265 : Ojs.t) -> t_of_js x11265
    and t_0_to_js : t_0 -> Ojs.t = fun (x11264 : t) -> t_to_js x11264
    type tags =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11268 : Ojs.t) -> intf_of_js __tags_of_js x11268
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11266 : __tags intf) -> intf_to_js __tags_to_js x11266
    let (get_connect : 'tags this -> MessageEvent.t_0) =
      fun (x11270 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11270) "connect")
    let (set_connect : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x11272 : 'tags this) ->
        fun (x11273 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11272) "connect"
            (MessageEvent.t_0_to_js x11273)
    let (create : connect:MessageEvent.t_0 -> unit -> t) =
      fun ~connect:(x11275 : MessageEvent.t_0) ->
        fun () ->
          let x11276 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11276 "connect" (MessageEvent.t_0_to_js x11275);
          t_of_js x11276
    let cast_from = Obj.magic
  end
module WorkerNavigator =
  struct
    type t =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11278 : Ojs.t) -> t_of_js x11278
    and t_0_to_js : t_0 -> Ojs.t = fun (x11277 : t) -> t_to_js x11277
    type tags =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerNavigator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11281 : Ojs.t) -> intf_of_js __tags_of_js x11281
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11279 : __tags intf) -> intf_to_js __tags_to_js x11279
    let (get_mediaCapabilities : 'tags this -> MediaCapabilities.t) =
      fun (x11283 : 'tags this) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11283)
             "mediaCapabilities")
    let (create : mediaCapabilities:MediaCapabilities.t -> unit -> t) =
      fun ~mediaCapabilities:(x11285 : MediaCapabilities.t) ->
        fun () ->
          let x11286 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11286 "mediaCapabilities"
            (MediaCapabilities.t_to_js x11285);
          t_of_js x11286
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") [||])
  end
module WorkerLocation =
  struct
    type t = [ `WorkerLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11288 : Ojs.t) -> t_of_js x11288
    and t_0_to_js : t_0 -> Ojs.t = fun (x11287 : t) -> t_to_js x11287
    type tags = [ `WorkerLocation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11291 : Ojs.t) -> intf_of_js __tags_of_js x11291
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11289 : __tags intf) -> intf_to_js __tags_to_js x11289
    let (get_hash : 'tags this -> string) =
      fun (x11293 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11293) "hash")
    let (get_host : 'tags this -> string) =
      fun (x11295 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11295) "host")
    let (get_hostname : 'tags this -> string) =
      fun (x11297 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11297) "hostname")
    let (get_href : 'tags this -> string) =
      fun (x11299 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11299) "href")
    let (toString : 'tags this -> string) =
      fun (x11301 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x11301) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x11303 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11303) "origin")
    let (get_pathname : 'tags this -> string) =
      fun (x11305 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11305) "pathname")
    let (get_port : 'tags this -> string) =
      fun (x11307 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11307) "port")
    let (get_protocol : 'tags this -> string) =
      fun (x11309 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11309) "protocol")
    let (get_search : 'tags this -> string) =
      fun (x11311 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11311) "search")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerLocation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerLocation") [||])
  end
module VoidFunction =
  struct
    type t = [ `VoidFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11314 : Ojs.t) -> t_of_js x11314
    and t_0_to_js : t_0 -> Ojs.t = fun (x11313 : t) -> t_to_js x11313
    type tags = [ `VoidFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11317 : Ojs.t) -> intf_of_js __tags_of_js x11317
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11315 : __tags intf) -> intf_to_js __tags_to_js x11315
    let (apply : 'tags this -> unit) =
      fun (x11319 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x11319) [||])
    let cast_from = Obj.magic
  end
module TimerHandler =
  struct
    type t = [ `String of string  | `Other of untyped_function ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x11325 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x11326 : Ojs.t) ->
             let x11327 = x11326 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x11327 "dummy") with
             | "String" -> `String (Ojs.string_of_js x11327)
             | "Other" -> `Other (untyped_function_of_js x11327)
             | _ -> assert false) x11325
    and t_to_js : t -> Ojs.t =
      fun
        (x11321 :
          [ `String of string  | `Other of untyped_function ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x11322 : [ `String of string  | `Other of untyped_function ])
             ->
             match x11322 with
             | `String x11323 -> Ojs.string_to_js x11323
             | `Other x11324 -> untyped_function_to_js x11324) x11321
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11329 : Ojs.t) -> t_of_js x11329
    and t_0_to_js : t_0 -> Ojs.t = fun (x11328 : t) -> t_to_js x11328
  end
module CanvasImageSource =
  struct
    type t = (ImageBitmap.t, OffscreenCanvas.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x11333 : Ojs.t) ->
        union2_of_js ImageBitmap.t_of_js OffscreenCanvas.t_of_js x11333
    and t_to_js : t -> Ojs.t =
      fun (x11330 : (ImageBitmap.t, OffscreenCanvas.t) union2) ->
        union2_to_js ImageBitmap.t_to_js OffscreenCanvas.t_to_js x11330
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11337 : Ojs.t) -> t_of_js x11337
    and t_0_to_js : t_0 -> Ojs.t = fun (x11336 : t) -> t_to_js x11336
  end
module ImageBitmapSource =
  struct
    type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x11342 : Ojs.t) ->
        union3_of_js Blob.t_of_js CanvasImageSource.t_of_js ImageData.t_of_js
          x11342
    and t_to_js : t -> Ojs.t =
      fun (x11338 : (Blob.t, CanvasImageSource.t, ImageData.t) union3) ->
        union3_to_js Blob.t_to_js CanvasImageSource.t_to_js ImageData.t_to_js
          x11338
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11347 : Ojs.t) -> t_of_js x11347
    and t_0_to_js : t_0 -> Ojs.t = fun (x11346 : t) -> t_to_js x11346
  end
module ResizeQuality =
  struct
    type t =
      [ `L_s108_low  | `L_s114_medium  | `L_s151_pixelated  | `L_s86_high ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11349 : Ojs.t) ->
        let x11350 = x11349 in
        match Ojs.string_of_js x11350 with
        | "low" -> `L_s108_low
        | "medium" -> `L_s114_medium
        | "pixelated" -> `L_s151_pixelated
        | "high" -> `L_s86_high
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11348 :
          [ `L_s108_low  | `L_s114_medium  | `L_s151_pixelated 
          | `L_s86_high ])
        ->
        match x11348 with
        | `L_s108_low -> Ojs.string_to_js "low"
        | `L_s114_medium -> Ojs.string_to_js "medium"
        | `L_s151_pixelated -> Ojs.string_to_js "pixelated"
        | `L_s86_high -> Ojs.string_to_js "high"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11352 : Ojs.t) -> t_of_js x11352
    and t_0_to_js : t_0 -> Ojs.t = fun (x11351 : t) -> t_to_js x11351
  end
module PremultiplyAlpha =
  struct
    type t = [ `L_s130_none  | `L_s154_premultiply  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11354 : Ojs.t) ->
        let x11355 = x11354 in
        match Ojs.string_of_js x11355 with
        | "none" -> `L_s130_none
        | "premultiply" -> `L_s154_premultiply
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11353 : [ `L_s130_none  | `L_s154_premultiply  | `L_s57_default ])
        ->
        match x11353 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s154_premultiply -> Ojs.string_to_js "premultiply"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11357 : Ojs.t) -> t_of_js x11357
    and t_0_to_js : t_0 -> Ojs.t = fun (x11356 : t) -> t_to_js x11356
  end
module ImageOrientation =
  struct
    type t = [ `L_s130_none  | `L_s76_flipY ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11359 : Ojs.t) ->
        let x11360 = x11359 in
        match Ojs.string_of_js x11360 with
        | "none" -> `L_s130_none
        | "flipY" -> `L_s76_flipY
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11358 : [ `L_s130_none  | `L_s76_flipY ]) ->
        match x11358 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s76_flipY -> Ojs.string_to_js "flipY"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11362 : Ojs.t) -> t_of_js x11362
    and t_0_to_js : t_0 -> Ojs.t = fun (x11361 : t) -> t_to_js x11361
  end
module ColorSpaceConversion =
  struct
    type t = [ `L_s130_none  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11364 : Ojs.t) ->
        let x11365 = x11364 in
        match Ojs.string_of_js x11365 with
        | "none" -> `L_s130_none
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11363 : [ `L_s130_none  | `L_s57_default ]) ->
        match x11363 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11367 : Ojs.t) -> t_of_js x11367
    and t_0_to_js : t_0 -> Ojs.t = fun (x11366 : t) -> t_to_js x11366
  end
module ImageBitmapOptions =
  struct
    type t = [ `ImageBitmapOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11369 : Ojs.t) -> t_of_js x11369
    and t_0_to_js : t_0 -> Ojs.t = fun (x11368 : t) -> t_to_js x11368
    type tags = [ `ImageBitmapOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11372 : Ojs.t) -> intf_of_js __tags_of_js x11372
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11370 : __tags intf) -> intf_to_js __tags_to_js x11370
    let (get_colorSpaceConversion : 'tags this -> ColorSpaceConversion.t) =
      fun (x11374 : 'tags this) ->
        ColorSpaceConversion.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11374)
             "colorSpaceConversion")
    let (set_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t -> unit) =
      fun (x11376 : 'tags this) ->
        fun (x11377 : ColorSpaceConversion.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11376)
            "colorSpaceConversion" (ColorSpaceConversion.t_to_js x11377)
    let (get_imageOrientation : 'tags this -> ImageOrientation.t) =
      fun (x11379 : 'tags this) ->
        ImageOrientation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11379)
             "imageOrientation")
    let (set_imageOrientation : 'tags this -> ImageOrientation.t -> unit) =
      fun (x11381 : 'tags this) ->
        fun (x11382 : ImageOrientation.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11381) "imageOrientation"
            (ImageOrientation.t_to_js x11382)
    let (get_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t) =
      fun (x11384 : 'tags this) ->
        PremultiplyAlpha.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11384)
             "premultiplyAlpha")
    let (set_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t -> unit) =
      fun (x11386 : 'tags this) ->
        fun (x11387 : PremultiplyAlpha.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11386) "premultiplyAlpha"
            (PremultiplyAlpha.t_to_js x11387)
    let (get_resizeHeight : 'tags this -> float) =
      fun (x11389 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11389) "resizeHeight")
    let (set_resizeHeight : 'tags this -> float -> unit) =
      fun (x11391 : 'tags this) ->
        fun (x11392 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11391) "resizeHeight"
            (Ojs.float_to_js x11392)
    let (get_resizeQuality : 'tags this -> ResizeQuality.t) =
      fun (x11394 : 'tags this) ->
        ResizeQuality.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11394) "resizeQuality")
    let (set_resizeQuality : 'tags this -> ResizeQuality.t -> unit) =
      fun (x11396 : 'tags this) ->
        fun (x11397 : ResizeQuality.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11396) "resizeQuality"
            (ResizeQuality.t_to_js x11397)
    let (get_resizeWidth : 'tags this -> float) =
      fun (x11399 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11399) "resizeWidth")
    let (set_resizeWidth : 'tags this -> float -> unit) =
      fun (x11401 : 'tags this) ->
        fun (x11402 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11401) "resizeWidth"
            (Ojs.float_to_js x11402)
    let (create :
      colorSpaceConversion:ColorSpaceConversion.t ->
        imageOrientation:ImageOrientation.t ->
          premultiplyAlpha:PremultiplyAlpha.t ->
            resizeHeight:float ->
              resizeQuality:ResizeQuality.t -> resizeWidth:float -> unit -> t)
      =
      fun ~colorSpaceConversion:(x11404 : ColorSpaceConversion.t) ->
        fun ~imageOrientation:(x11405 : ImageOrientation.t) ->
          fun ~premultiplyAlpha:(x11406 : PremultiplyAlpha.t) ->
            fun ~resizeHeight:(x11407 : float) ->
              fun ~resizeQuality:(x11408 : ResizeQuality.t) ->
                fun ~resizeWidth:(x11409 : float) ->
                  fun () ->
                    let x11410 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x11410 "colorSpaceConversion"
                      (ColorSpaceConversion.t_to_js x11404);
                    Ojs.set_prop_ascii x11410 "imageOrientation"
                      (ImageOrientation.t_to_js x11405);
                    Ojs.set_prop_ascii x11410 "premultiplyAlpha"
                      (PremultiplyAlpha.t_to_js x11406);
                    Ojs.set_prop_ascii x11410 "resizeHeight"
                      (Ojs.float_to_js x11407);
                    Ojs.set_prop_ascii x11410 "resizeQuality"
                      (ResizeQuality.t_to_js x11408);
                    Ojs.set_prop_ascii x11410 "resizeWidth"
                      (Ojs.float_to_js x11409);
                    t_of_js x11410
    let cast_from = Obj.magic
  end
module IDBFactory =
  struct
    type t = [ `IDBFactory ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11412 : Ojs.t) -> t_of_js x11412
    and t_0_to_js : t_0 -> Ojs.t = fun (x11411 : t) -> t_to_js x11411
    type tags = [ `IDBFactory ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11415 : Ojs.t) -> intf_of_js __tags_of_js x11415
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11413 : __tags intf) -> intf_to_js __tags_to_js x11413
    let (cmp : 'tags this -> first:any -> second:any -> float) =
      fun (x11419 : 'tags this) ->
        fun ~first:(x11417 : any) ->
          fun ~second:(x11418 : any) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x11419) "cmp"
                 [|(any_to_js x11417);(any_to_js x11418)|])
    let (databases : 'tags this -> IDBDatabaseInfo.t list Promise.t_1) =
      fun (x11421 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11423 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x11423)
          (Ojs.call (this_to_js Obj.magic x11421) "databases" [||])
    let (deleteDatabase : 'tags this -> name:string -> IDBOpenDBRequest.t) =
      fun (x11426 : 'tags this) ->
        fun ~name:(x11425 : string) ->
          IDBOpenDBRequest.t_of_js
            (Ojs.call (this_to_js Obj.magic x11426) "deleteDatabase"
               [|(Ojs.string_to_js x11425)|])
    let (open_ :
      'tags this ->
        name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun (x11432 : 'tags this) ->
        fun ~name:(x11428 : string) ->
          fun ?version:(x11429 : float option) ->
            fun () ->
              IDBOpenDBRequest.t_of_js
                (let x11434 = this_to_js Obj.magic x11432 in
                 Ojs.call (Ojs.get_prop_ascii x11434 "open") "apply"
                   [|x11434;((let x11430 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11430 "push"
                                   [|(Ojs.string_to_js x11428)|]);
                              (match x11429 with
                               | Some x11431 ->
                                   ignore
                                     (Ojs.call x11430 "push"
                                        [|(Ojs.float_to_js x11431)|])
                               | None -> ());
                              x11430))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBFactory")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBFactory") [||])
  end
module Crypto =
  struct
    type t = [ `Crypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11436 : Ojs.t) -> t_of_js x11436
    and t_0_to_js : t_0 -> Ojs.t = fun (x11435 : t) -> t_to_js x11435
    type tags = [ `Crypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11439 : Ojs.t) -> intf_of_js __tags_of_js x11439
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11437 : __tags intf) -> intf_to_js __tags_to_js x11437
    let (get_subtle : 'tags this -> SubtleCrypto.t) =
      fun (x11441 : 'tags this) ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11441) "subtle")
    let (getRandomValues : 'tags this -> array:'T -> 'T) =
      fun (x11444 : 'tags this) ->
        fun ~array:(x11443 : 'T) ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic x11444) "getRandomValues"
               [|(Obj.magic x11443)|])
    let (randomUUID : 'tags this -> string) =
      fun (x11446 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x11446) "randomUUID" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Crypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Crypto") [||])
  end
module CacheStorage =
  struct
    type t = [ `CacheStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11449 : Ojs.t) -> t_of_js x11449
    and t_0_to_js : t_0 -> Ojs.t = fun (x11448 : t) -> t_to_js x11448
    type tags = [ `CacheStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11452 : Ojs.t) -> intf_of_js __tags_of_js x11452
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11450 : __tags intf) -> intf_to_js __tags_to_js x11450
    let (delete : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11455 : 'tags this) ->
        fun ~cacheName:(x11454 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11455) "delete"
               [|(Ojs.string_to_js x11454)|])
    let (has : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11459 : 'tags this) ->
        fun ~cacheName:(x11458 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11459) "has"
               [|(Ojs.string_to_js x11458)|])
    let (keys : 'tags this -> string list Promise.t_1) =
      fun (x11462 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11464 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x11464)
          (Ojs.call (this_to_js Obj.magic x11462) "keys" [||])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:MultiCacheQueryOptions.t ->
            unit -> Response.t option Promise.t_1)
      =
      fun (x11470 : 'tags this) ->
        fun ~request:(x11466 : RequestInfo.t) ->
          fun ?options:(x11467 : MultiCacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x11473 : Ojs.t) ->
                   Ojs.option_of_js Response.t_of_js x11473)
                (let x11472 = this_to_js Obj.magic x11470 in
                 Ojs.call (Ojs.get_prop_ascii x11472 "match") "apply"
                   [|x11472;((let x11468 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11468 "push"
                                   [|(RequestInfo.t_to_js x11466)|]);
                              (match x11467 with
                               | Some x11469 ->
                                   ignore
                                     (Ojs.call x11468 "push"
                                        [|(MultiCacheQueryOptions.t_to_js
                                             x11469)|])
                               | None -> ());
                              x11468))|])
    let (open_ : 'tags this -> cacheName:string -> Cache.t Promise.t_1) =
      fun (x11476 : 'tags this) ->
        fun ~cacheName:(x11475 : string) ->
          Promise.t_1_of_js Cache.t_of_js
            (Ojs.call (this_to_js Obj.magic x11476) "open"
               [|(Ojs.string_to_js x11475)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CacheStorage")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CacheStorage") [||])
  end
module WindowOrWorkerGlobalScope =
  struct
    type t = [ `WindowOrWorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11480 : Ojs.t) -> t_of_js x11480
    and t_0_to_js : t_0 -> Ojs.t = fun (x11479 : t) -> t_to_js x11479
    type tags = [ `WindowOrWorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11483 : Ojs.t) -> intf_of_js __tags_of_js x11483
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11481 : __tags intf) -> intf_to_js __tags_to_js x11481
    let (get_caches : 'tags this -> CacheStorage.t) =
      fun (x11485 : 'tags this) ->
        CacheStorage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11485) "caches")
    let (get_crossOriginIsolated : 'tags this -> bool) =
      fun (x11487 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11487)
             "crossOriginIsolated")
    let (get_crypto : 'tags this -> Crypto.t) =
      fun (x11489 : 'tags this) ->
        Crypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11489) "crypto")
    let (get_indexedDB : 'tags this -> IDBFactory.t) =
      fun (x11491 : 'tags this) ->
        IDBFactory.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11491) "indexedDB")
    let (get_isSecureContext : 'tags this -> bool) =
      fun (x11493 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11493) "isSecureContext")
    let (get_origin : 'tags this -> string) =
      fun (x11495 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11495) "origin")
    let (get_performance : 'tags this -> Performance.t) =
      fun (x11497 : 'tags this) ->
        Performance.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11497) "performance")
    let (atob : 'tags this -> data:string -> string) =
      fun (x11500 : 'tags this) ->
        fun ~data:(x11499 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11500) "atob"
               [|(Ojs.string_to_js x11499)|])
    let (btoa : 'tags this -> data:string -> string) =
      fun (x11503 : 'tags this) ->
        fun ~data:(x11502 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11503) "btoa"
               [|(Ojs.string_to_js x11502)|])
    let (clearInterval : 'tags this -> ?id:float -> unit -> unit) =
      fun (x11508 : 'tags this) ->
        fun ?id:(x11505 : float option) ->
          fun () ->
            ignore
              (let x11510 = this_to_js Obj.magic x11508 in
               Ojs.call (Ojs.get_prop_ascii x11510 "clearInterval") "apply"
                 [|x11510;((let x11506 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11505 with
                             | Some x11507 ->
                                 ignore
                                   (Ojs.call x11506 "push"
                                      [|(Ojs.float_to_js x11507)|])
                             | None -> ());
                            x11506))|])
    let (clearTimeout : 'tags this -> ?id:float -> unit -> unit) =
      fun (x11514 : 'tags this) ->
        fun ?id:(x11511 : float option) ->
          fun () ->
            ignore
              (let x11516 = this_to_js Obj.magic x11514 in
               Ojs.call (Ojs.get_prop_ascii x11516 "clearTimeout") "apply"
                 [|x11516;((let x11512 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11511 with
                             | Some x11513 ->
                                 ignore
                                   (Ojs.call x11512 "push"
                                      [|(Ojs.float_to_js x11513)|])
                             | None -> ());
                            x11512))|])
    let (createImageBitmap :
      'tags this ->
        image:ImageBitmapSource.t ->
          ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11521 : 'tags this) ->
        fun ~image:(x11517 : ImageBitmapSource.t) ->
          fun ?options:(x11518 : ImageBitmapOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ImageBitmap.t_of_js
                (let x11523 = this_to_js Obj.magic x11521 in
                 Ojs.call (Ojs.get_prop_ascii x11523 "createImageBitmap")
                   "apply"
                   [|x11523;((let x11519 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11519 "push"
                                   [|(ImageBitmapSource.t_to_js x11517)|]);
                              (match x11518 with
                               | Some x11520 ->
                                   ignore
                                     (Ojs.call x11519 "push"
                                        [|(ImageBitmapOptions.t_to_js x11520)|])
                               | None -> ());
                              x11519))|])
    let (createImageBitmap' :
      'tags this ->
        image:ImageBitmapSource.t ->
          sx:float ->
            sy:float ->
              sw:float ->
                sh:float ->
                  ?options:ImageBitmapOptions.t ->
                    unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11533 : 'tags this) ->
        fun ~image:(x11525 : ImageBitmapSource.t) ->
          fun ~sx:(x11526 : float) ->
            fun ~sy:(x11527 : float) ->
              fun ~sw:(x11528 : float) ->
                fun ~sh:(x11529 : float) ->
                  fun ?options:(x11530 : ImageBitmapOptions.t option) ->
                    fun () ->
                      Promise.t_1_of_js ImageBitmap.t_of_js
                        (let x11535 = this_to_js Obj.magic x11533 in
                         Ojs.call
                           (Ojs.get_prop_ascii x11535 "createImageBitmap")
                           "apply"
                           [|x11535;((let x11531 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x11531 "push"
                                           [|(ImageBitmapSource.t_to_js
                                                x11525)|]);
                                      ignore
                                        (Ojs.call x11531 "push"
                                           [|(Ojs.float_to_js x11526)|]);
                                      ignore
                                        (Ojs.call x11531 "push"
                                           [|(Ojs.float_to_js x11527)|]);
                                      ignore
                                        (Ojs.call x11531 "push"
                                           [|(Ojs.float_to_js x11528)|]);
                                      ignore
                                        (Ojs.call x11531 "push"
                                           [|(Ojs.float_to_js x11529)|]);
                                      (match x11530 with
                                       | Some x11532 ->
                                           ignore
                                             (Ojs.call x11531 "push"
                                                [|(ImageBitmapOptions.t_to_js
                                                     x11532)|])
                                       | None -> ());
                                      x11531))|])
    let (fetch :
      'tags this ->
        input:RequestInfo.t ->
          ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
      =
      fun (x11541 : 'tags this) ->
        fun ~input:(x11537 : RequestInfo.t) ->
          fun ?init:(x11538 : RequestInit.t option) ->
            fun () ->
              Promise.t_1_of_js Response.t_of_js
                (let x11543 = this_to_js Obj.magic x11541 in
                 Ojs.call (Ojs.get_prop_ascii x11543 "fetch") "apply"
                   [|x11543;((let x11539 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11539 "push"
                                   [|(RequestInfo.t_to_js x11537)|]);
                              (match x11538 with
                               | Some x11540 ->
                                   ignore
                                     (Ojs.call x11539 "push"
                                        [|(RequestInit.t_to_js x11540)|])
                               | None -> ());
                              x11539))|])
    let (queueMicrotask : 'tags this -> callback:VoidFunction.t -> unit) =
      fun (x11546 : 'tags this) ->
        fun ~callback:(x11545 : VoidFunction.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11546) "queueMicrotask"
               [|(VoidFunction.t_to_js x11545)|])
    let (reportError : 'tags this -> e:any -> unit) =
      fun (x11549 : 'tags this) ->
        fun ~e:(x11548 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11549) "reportError"
               [|(any_to_js x11548)|])
    let (setInterval :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11557 : 'tags this) ->
        fun ~handler:(x11551 : TimerHandler.t) ->
          fun ?timeout:(x11552 : float option) ->
            fun ~arguments:(x11553 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11559 = this_to_js Obj.magic x11557 in
                   Ojs.call (Ojs.get_prop_ascii x11559 "setInterval") "apply"
                     [|x11559;((let x11554 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11554 "push"
                                     [|(TimerHandler.t_to_js x11551)|]);
                                (match x11552 with
                                 | Some x11556 ->
                                     ignore
                                       (Ojs.call x11554 "push"
                                          [|(Ojs.float_to_js x11556)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11555 : any) ->
                                     ignore
                                       (Ojs.call x11554 "push"
                                          [|(any_to_js x11555)|])) x11553;
                                x11554))|])
    let (setTimeout :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11566 : 'tags this) ->
        fun ~handler:(x11560 : TimerHandler.t) ->
          fun ?timeout:(x11561 : float option) ->
            fun ~arguments:(x11562 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11568 = this_to_js Obj.magic x11566 in
                   Ojs.call (Ojs.get_prop_ascii x11568 "setTimeout") "apply"
                     [|x11568;((let x11563 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11563 "push"
                                     [|(TimerHandler.t_to_js x11560)|]);
                                (match x11561 with
                                 | Some x11565 ->
                                     ignore
                                       (Ojs.call x11563 "push"
                                          [|(Ojs.float_to_js x11565)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11564 : any) ->
                                     ignore
                                       (Ojs.call x11563 "push"
                                          [|(any_to_js x11564)|])) x11562;
                                x11563))|])
    let cast_from = Obj.magic
  end
module FontFaceSource =
  struct
    type t = [ `FontFaceSource ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11570 : Ojs.t) -> t_of_js x11570
    and t_0_to_js : t_0 -> Ojs.t = fun (x11569 : t) -> t_to_js x11569
    type tags = [ `FontFaceSource ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11573 : Ojs.t) -> intf_of_js __tags_of_js x11573
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11571 : __tags intf) -> intf_to_js __tags_to_js x11571
    let (get_fonts : 'tags this -> FontFaceSet.t) =
      fun (x11575 : 'tags this) ->
        FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11575) "fonts")
    let (create : fonts:FontFaceSet.t -> unit -> t) =
      fun ~fonts:(x11577 : FontFaceSet.t) ->
        fun () ->
          let x11578 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11578 "fonts" (FontFaceSet.t_to_js x11577);
          t_of_js x11578
    let cast_from = Obj.magic
  end
module WorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11580 : Ojs.t) -> t_of_js x11580
    and t_0_to_js : t_0 -> Ojs.t = fun (x11579 : t) -> t_to_js x11579
    type tags =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11583 : Ojs.t) -> intf_of_js __tags_of_js x11583
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11581 : __tags intf) -> intf_to_js __tags_to_js x11581
    let (get_location : 'tags this -> WorkerLocation.t) =
      fun (x11585 : 'tags this) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11585) "location")
    let (get_navigator : 'tags this -> WorkerNavigator.t) =
      fun (x11587 : 'tags this) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11587) "navigator")
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option) =
      fun (x11589 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11591 : Ojs.t) ->
             fun ~this:(x11592 : t) ->
               fun ~ev:(x11593 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x11591
                      [|(t_to_js x11592);(ErrorEvent.t_to_js x11593)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11589) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) option -> unit) =
      fun (x11594 : 'tags this) ->
        fun (x11595 : (this:t -> ev:ErrorEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11594) "onerror"
            (Ojs.option_to_js
               (fun (x11596 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11597 : Ojs.t) ->
                       fun (x11598 : Ojs.t) ->
                         any_to_js
                           (x11596 ~this:(t_of_js x11597)
                              ~ev:(ErrorEvent.t_of_js x11598)))) x11595)
    let (get_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11600 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11602 : Ojs.t) ->
             fun ~this:(x11603 : t) ->
               fun ~ev:(x11604 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11602
                      [|(t_to_js x11603);(Event.t_to_js x11604)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11600)
             "onlanguagechange")
    let (set_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11605 : 'tags this) ->
        fun (x11606 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11605) "onlanguagechange"
            (Ojs.option_to_js
               (fun (x11607 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11608 : Ojs.t) ->
                       fun (x11609 : Ojs.t) ->
                         any_to_js
                           (x11607 ~this:(t_of_js x11608)
                              ~ev:(Event.t_of_js x11609)))) x11606)
    let (get_onoffline : 'tags this -> (this:t -> ev:Event.t -> any) option)
      =
      fun (x11611 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11613 : Ojs.t) ->
             fun ~this:(x11614 : t) ->
               fun ~ev:(x11615 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11613
                      [|(t_to_js x11614);(Event.t_to_js x11615)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11611) "onoffline")
    let (set_onoffline :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11616 : 'tags this) ->
        fun (x11617 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11616) "onoffline"
            (Ojs.option_to_js
               (fun (x11618 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11619 : Ojs.t) ->
                       fun (x11620 : Ojs.t) ->
                         any_to_js
                           (x11618 ~this:(t_of_js x11619)
                              ~ev:(Event.t_of_js x11620)))) x11617)
    let (get_ononline : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x11622 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11624 : Ojs.t) ->
             fun ~this:(x11625 : t) ->
               fun ~ev:(x11626 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11624
                      [|(t_to_js x11625);(Event.t_to_js x11626)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11622) "ononline")
    let (set_ononline :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x11627 : 'tags this) ->
        fun (x11628 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11627) "ononline"
            (Ojs.option_to_js
               (fun (x11629 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11630 : Ojs.t) ->
                       fun (x11631 : Ojs.t) ->
                         any_to_js
                           (x11629 ~this:(t_of_js x11630)
                              ~ev:(Event.t_of_js x11631)))) x11628)
    let (get_onrejectionhandled :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option) =
      fun (x11633 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11635 : Ojs.t) ->
             fun ~this:(x11636 : t) ->
               fun ~ev:(x11637 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11635
                      [|(t_to_js x11636);(PromiseRejectionEvent.t_to_js
                                            x11637)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11633)
             "onrejectionhandled")
    let (set_onrejectionhandled :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit)
      =
      fun (x11638 : 'tags this) ->
        fun (x11639 : (this:t -> ev:PromiseRejectionEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11638)
            "onrejectionhandled"
            (Ojs.option_to_js
               (fun (x11640 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11641 : Ojs.t) ->
                       fun (x11642 : Ojs.t) ->
                         any_to_js
                           (x11640 ~this:(t_of_js x11641)
                              ~ev:(PromiseRejectionEvent.t_of_js x11642))))
               x11639)
    let (get_onunhandledrejection :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) option) =
      fun (x11644 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11646 : Ojs.t) ->
             fun ~this:(x11647 : t) ->
               fun ~ev:(x11648 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11646
                      [|(t_to_js x11647);(PromiseRejectionEvent.t_to_js
                                            x11648)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11644)
             "onunhandledrejection")
    let (set_onunhandledrejection :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) option -> unit)
      =
      fun (x11649 : 'tags this) ->
        fun (x11650 : (this:t -> ev:PromiseRejectionEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11649)
            "onunhandledrejection"
            (Ojs.option_to_js
               (fun (x11651 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11652 : Ojs.t) ->
                       fun (x11653 : Ojs.t) ->
                         any_to_js
                           (x11651 ~this:(t_of_js x11652)
                              ~ev:(PromiseRejectionEvent.t_of_js x11653))))
               x11650)
    let (get_self : 'tags this -> (t, any) intersection2) =
      fun (x11655 : 'tags this) ->
        intersection2_of_js t_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11655) "self")
    let (importScripts :
      'tags this -> urls:[ `U1 of string  | `U2 of URL.t ] list -> unit) =
      fun (x11664 : 'tags this) ->
        fun ~urls:(x11659 : [ `U1 of string  | `U2 of URL.t ] list) ->
          ignore
            (let x11666 = this_to_js Obj.magic x11664 in
             Ojs.call (Ojs.get_prop_ascii x11666 "importScripts") "apply"
               [|x11666;((let x11660 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x11661 : [ `U1 of string  | `U2 of URL.t ])
                               ->
                               ignore
                                 (Ojs.call x11660 "push"
                                    [|((match x11661 with
                                        | `U1 x11662 ->
                                            Ojs.string_to_js x11662
                                        | `U2 x11663 -> URL.t_to_js x11663))|]))
                            x11659;
                          x11660))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11676 : 'tags this) ->
        fun ~type_:(x11667 : 'K) ->
          fun ~listener:(x11668 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11669 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11678 = this_to_js Obj.magic x11676 in
                   Ojs.call (Ojs.get_prop_ascii x11678 "addEventListener")
                     "apply"
                     [|x11678;((let x11670 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11670 "push"
                                     [|(Obj.magic x11667)|]);
                                ignore
                                  (Ojs.call x11670 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11674 : Ojs.t) ->
                                             fun (x11675 : Ojs.t) ->
                                               any_to_js
                                                 (x11668
                                                    ~this:(t_of_js x11674)
                                                    ~ev:(any_of_js x11675))))|]);
                                (match x11669 with
                                 | Some x11671 ->
                                     ignore
                                       (Ojs.call x11670 "push"
                                          [|((match x11671 with
                                              | `U1 x11672 ->
                                                  Ojs.bool_to_js x11672
                                              | `U2 x11673 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11673))|])
                                 | None -> ());
                                x11670))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11686 : 'tags this) ->
        fun ~type_:(x11679 : string) ->
          fun ~listener:(x11680 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11681 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11688 = this_to_js Obj.magic x11686 in
                   Ojs.call (Ojs.get_prop_ascii x11688 "addEventListener")
                     "apply"
                     [|x11688;((let x11682 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11682 "push"
                                     [|(Ojs.string_to_js x11679)|]);
                                ignore
                                  (Ojs.call x11682 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11680)|]);
                                (match x11681 with
                                 | Some x11683 ->
                                     ignore
                                       (Ojs.call x11682 "push"
                                          [|((match x11683 with
                                              | `U1 x11684 ->
                                                  Ojs.bool_to_js x11684
                                              | `U2 x11685 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11685))|])
                                 | None -> ());
                                x11682))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11698 : 'tags this) ->
        fun ~type_:(x11689 : 'K) ->
          fun ~listener:(x11690 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11691 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11700 = this_to_js Obj.magic x11698 in
                   Ojs.call (Ojs.get_prop_ascii x11700 "removeEventListener")
                     "apply"
                     [|x11700;((let x11692 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11692 "push"
                                     [|(Obj.magic x11689)|]);
                                ignore
                                  (Ojs.call x11692 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11696 : Ojs.t) ->
                                             fun (x11697 : Ojs.t) ->
                                               any_to_js
                                                 (x11690
                                                    ~this:(t_of_js x11696)
                                                    ~ev:(any_of_js x11697))))|]);
                                (match x11691 with
                                 | Some x11693 ->
                                     ignore
                                       (Ojs.call x11692 "push"
                                          [|((match x11693 with
                                              | `U1 x11694 ->
                                                  Ojs.bool_to_js x11694
                                              | `U2 x11695 ->
                                                  EventListenerOptions.t_to_js
                                                    x11695))|])
                                 | None -> ());
                                x11692))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11708 : 'tags this) ->
        fun ~type_:(x11701 : string) ->
          fun ~listener:(x11702 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11703 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11710 = this_to_js Obj.magic x11708 in
                   Ojs.call (Ojs.get_prop_ascii x11710 "removeEventListener")
                     "apply"
                     [|x11710;((let x11704 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11704 "push"
                                     [|(Ojs.string_to_js x11701)|]);
                                ignore
                                  (Ojs.call x11704 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11702)|]);
                                (match x11703 with
                                 | Some x11705 ->
                                     ignore
                                       (Ojs.call x11704 "push"
                                          [|((match x11705 with
                                              | `U1 x11706 ->
                                                  Ojs.bool_to_js x11706
                                              | `U2 x11707 ->
                                                  EventListenerOptions.t_to_js
                                                    x11707))|])
                                 | None -> ());
                                x11704))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
             [||])
  end
module SharedWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11712 : Ojs.t) -> t_of_js x11712
    and t_0_to_js : t_0 -> Ojs.t = fun (x11711 : t) -> t_to_js x11711
    type tags =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11715 : Ojs.t) -> intf_of_js __tags_of_js x11715
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11713 : __tags intf) -> intf_to_js __tags_to_js x11713
    let (get_name : 'tags this -> string) =
      fun (x11717 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11717) "name")
    let (get_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x11719 : 'tags this) ->
        Ojs.option_of_js
          (fun (x11721 : Ojs.t) ->
             fun ~this:(x11722 : t) ->
               fun ~ev:(x11723 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x11721
                      [|(t_to_js x11722);(MessageEvent.t_0_to_js x11723)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11719) "onconnect")
    let (set_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x11724 : 'tags this) ->
        fun (x11725 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11724) "onconnect"
            (Ojs.option_to_js
               (fun (x11726 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11727 : Ojs.t) ->
                       fun (x11728 : Ojs.t) ->
                         any_to_js
                           (x11726 ~this:(t_of_js x11727)
                              ~ev:(MessageEvent.t_0_of_js x11728)))) x11725)
    let (close : 'tags this -> unit) =
      fun (x11730 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11730) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11741 : 'tags this) ->
        fun ~type_:(x11732 : 'K) ->
          fun ~listener:(x11733 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11734 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11743 = this_to_js Obj.magic x11741 in
                   Ojs.call (Ojs.get_prop_ascii x11743 "addEventListener")
                     "apply"
                     [|x11743;((let x11735 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11735 "push"
                                     [|(Obj.magic x11732)|]);
                                ignore
                                  (Ojs.call x11735 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11739 : Ojs.t) ->
                                             fun (x11740 : Ojs.t) ->
                                               any_to_js
                                                 (x11733
                                                    ~this:(t_of_js x11739)
                                                    ~ev:(any_of_js x11740))))|]);
                                (match x11734 with
                                 | Some x11736 ->
                                     ignore
                                       (Ojs.call x11735 "push"
                                          [|((match x11736 with
                                              | `U1 x11737 ->
                                                  Ojs.bool_to_js x11737
                                              | `U2 x11738 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11738))|])
                                 | None -> ());
                                x11735))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11751 : 'tags this) ->
        fun ~type_:(x11744 : string) ->
          fun ~listener:(x11745 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11746 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11753 = this_to_js Obj.magic x11751 in
                   Ojs.call (Ojs.get_prop_ascii x11753 "addEventListener")
                     "apply"
                     [|x11753;((let x11747 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11747 "push"
                                     [|(Ojs.string_to_js x11744)|]);
                                ignore
                                  (Ojs.call x11747 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11745)|]);
                                (match x11746 with
                                 | Some x11748 ->
                                     ignore
                                       (Ojs.call x11747 "push"
                                          [|((match x11748 with
                                              | `U1 x11749 ->
                                                  Ojs.bool_to_js x11749
                                              | `U2 x11750 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x11750))|])
                                 | None -> ());
                                x11747))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11763 : 'tags this) ->
        fun ~type_:(x11754 : 'K) ->
          fun ~listener:(x11755 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11756 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11765 = this_to_js Obj.magic x11763 in
                   Ojs.call (Ojs.get_prop_ascii x11765 "removeEventListener")
                     "apply"
                     [|x11765;((let x11757 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11757 "push"
                                     [|(Obj.magic x11754)|]);
                                ignore
                                  (Ojs.call x11757 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11761 : Ojs.t) ->
                                             fun (x11762 : Ojs.t) ->
                                               any_to_js
                                                 (x11755
                                                    ~this:(t_of_js x11761)
                                                    ~ev:(any_of_js x11762))))|]);
                                (match x11756 with
                                 | Some x11758 ->
                                     ignore
                                       (Ojs.call x11757 "push"
                                          [|((match x11758 with
                                              | `U1 x11759 ->
                                                  Ojs.bool_to_js x11759
                                              | `U2 x11760 ->
                                                  EventListenerOptions.t_to_js
                                                    x11760))|])
                                 | None -> ());
                                x11757))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x11773 : 'tags this) ->
        fun ~type_:(x11766 : string) ->
          fun ~listener:(x11767 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11768 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x11775 = this_to_js Obj.magic x11773 in
                   Ojs.call (Ojs.get_prop_ascii x11775 "removeEventListener")
                     "apply"
                     [|x11775;((let x11769 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11769 "push"
                                     [|(Ojs.string_to_js x11766)|]);
                                ignore
                                  (Ojs.call x11769 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11767)|]);
                                (match x11768 with
                                 | Some x11770 ->
                                     ignore
                                       (Ojs.call x11769 "push"
                                          [|((match x11770 with
                                              | `U1 x11771 ->
                                                  Ojs.bool_to_js x11771
                                              | `U2 x11772 ->
                                                  EventListenerOptions.t_to_js
                                                    x11772))|])
                                 | None -> ());
                                x11769))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerRegistrationEventMap =
  struct
    type t = [ `ServiceWorkerRegistrationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11777 : Ojs.t) -> t_of_js x11777
    and t_0_to_js : t_0 -> Ojs.t = fun (x11776 : t) -> t_to_js x11776
    type tags = [ `ServiceWorkerRegistrationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11780 : Ojs.t) -> intf_of_js __tags_of_js x11780
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11778 : __tags intf) -> intf_to_js __tags_to_js x11778
    let (get_updatefound : 'tags this -> Event.t) =
      fun (x11782 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11782) "updatefound")
    let (set_updatefound : 'tags this -> Event.t -> unit) =
      fun (x11784 : 'tags this) ->
        fun (x11785 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11784) "updatefound"
            (Event.t_to_js x11785)
    let (create : updatefound:Event.t -> unit -> t) =
      fun ~updatefound:(x11787 : Event.t) ->
        fun () ->
          let x11788 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11788 "updatefound" (Event.t_to_js x11787);
          t_of_js x11788
    let cast_from = Obj.magic
  end
module PushMessageData =
  struct
    type t = [ `PushMessageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11790 : Ojs.t) -> t_of_js x11790
    and t_0_to_js : t_0 -> Ojs.t = fun (x11789 : t) -> t_to_js x11789
    type tags = [ `PushMessageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushMessageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11793 : Ojs.t) -> intf_of_js __tags_of_js x11793
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11791 : __tags intf) -> intf_to_js __tags_to_js x11791
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0) =
      fun (x11795 : 'tags this) ->
        ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x11795) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t) =
      fun (x11797 : 'tags this) ->
        Blob.t_of_js (Ojs.call (this_to_js Obj.magic x11797) "blob" [||])
    let (json : 'tags this -> any) =
      fun (x11799 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x11799) "json" [||])
    let (text : 'tags this -> string) =
      fun (x11801 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x11801) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushMessageData") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushMessageData") [||])
  end
module PushMessageDataInit =
  struct
    type t = [ `String of string  | `Other of BufferSource.t ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x11807 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x11808 : Ojs.t) ->
             let x11809 = x11808 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x11809 "dummy") with
             | "String" -> `String (Ojs.string_of_js x11809)
             | "Other" -> `Other (BufferSource.t_of_js x11809)
             | _ -> assert false) x11807
    and t_to_js : t -> Ojs.t =
      fun
        (x11803 :
          [ `String of string  | `Other of BufferSource.t ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x11804 : [ `String of string  | `Other of BufferSource.t ])
             ->
             match x11804 with
             | `String x11805 -> Ojs.string_to_js x11805
             | `Other x11806 -> BufferSource.t_to_js x11806) x11803
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11811 : Ojs.t) -> t_of_js x11811
    and t_0_to_js : t_0 -> Ojs.t = fun (x11810 : t) -> t_to_js x11810
  end
module ExtendableEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11813 : Ojs.t) -> t_of_js x11813
    and t_0_to_js : t_0 -> Ojs.t = fun (x11812 : t) -> t_to_js x11812
    type tags = [ `EventInit  | `ExtendableEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11816 : Ojs.t) -> intf_of_js __tags_of_js x11816
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11814 : __tags intf) -> intf_to_js __tags_to_js x11814
    let cast_from = Obj.magic
  end
module PushEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11819 : Ojs.t) -> t_of_js x11819
    and t_0_to_js : t_0 -> Ojs.t = fun (x11818 : t) -> t_to_js x11818
    type tags = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11822 : Ojs.t) -> intf_of_js __tags_of_js x11822
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11820 : __tags intf) -> intf_to_js __tags_to_js x11820
    let (get_data : 'tags this -> PushMessageDataInit.t) =
      fun (x11824 : 'tags this) ->
        PushMessageDataInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11824) "data")
    let (set_data : 'tags this -> PushMessageDataInit.t -> unit) =
      fun (x11826 : 'tags this) ->
        fun (x11827 : PushMessageDataInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11826) "data"
            (PushMessageDataInit.t_to_js x11827)
    let (create : data:PushMessageDataInit.t -> unit -> t) =
      fun ~data:(x11829 : PushMessageDataInit.t) ->
        fun () ->
          let x11830 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11830 "data"
            (PushMessageDataInit.t_to_js x11829);
          t_of_js x11830
    let cast_from = Obj.magic
  end
module ExtendableEvent =
  struct
    type t = [ `Event  | `ExtendableEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11832 : Ojs.t) -> t_of_js x11832
    and t_0_to_js : t_0 -> Ojs.t = fun (x11831 : t) -> t_to_js x11831
    type tags = [ `Event  | `ExtendableEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11835 : Ojs.t) -> intf_of_js __tags_of_js x11835
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11833 : __tags intf) -> intf_to_js __tags_to_js x11833
    let (waitUntil : 'tags this -> f:any -> unit) =
      fun (x11838 : 'tags this) ->
        fun ~f:(x11837 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11838) "waitUntil"
               [|(any_to_js x11837)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableEvent") "prototype")
    let (create :
      type_:string -> ?eventInitDict:ExtendableEventInit.t -> unit -> t) =
      fun ~type_:(x11840 : string) ->
        fun ?eventInitDict:(x11841 : ExtendableEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
                 (let x11842 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11842 "push" [|(Ojs.string_to_js x11840)|]);
                  (match x11841 with
                   | Some x11843 ->
                       ignore
                         (Ojs.call x11842 "push"
                            [|(ExtendableEventInit.t_to_js x11843)|])
                   | None -> ());
                  x11842))
  end
module PushEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11845 : Ojs.t) -> t_of_js x11845
    and t_0_to_js : t_0 -> Ojs.t = fun (x11844 : t) -> t_to_js x11844
    type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11848 : Ojs.t) -> intf_of_js __tags_of_js x11848
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11846 : __tags intf) -> intf_to_js __tags_to_js x11846
    let (get_data : 'tags this -> PushMessageData.t option) =
      fun (x11850 : 'tags this) ->
        Ojs.option_of_js PushMessageData.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11850) "data")
    let (create : ?data:PushMessageData.t -> unit -> t) =
      fun ?data:(x11853 : PushMessageData.t option) ->
        fun () ->
          let x11854 = Ojs.empty_obj () in
          (match x11853 with
           | Some x11855 ->
               Ojs.set_prop_ascii x11854 "data"
                 (PushMessageData.t_to_js x11855)
           | None -> ());
          t_of_js x11854
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t) =
      fun ~type_:(x11856 : string) ->
        fun ?eventInitDict:(x11857 : PushEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "PushEvent")
                 (let x11858 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11858 "push" [|(Ojs.string_to_js x11856)|]);
                  (match x11857 with
                   | Some x11859 ->
                       ignore
                         (Ojs.call x11858 "push"
                            [|(PushEventInit.t_to_js x11859)|])
                   | None -> ());
                  x11858))
  end
module NotificationPermission =
  struct
    type t = [ `L_s57_default  | `L_s58_denied  | `L_s84_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11861 : Ojs.t) ->
        let x11862 = x11861 in
        match Ojs.string_of_js x11862 with
        | "default" -> `L_s57_default
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s84_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11860 : [ `L_s57_default  | `L_s58_denied  | `L_s84_granted ]) ->
        match x11860 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s84_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11864 : Ojs.t) -> t_of_js x11864
    and t_0_to_js : t_0 -> Ojs.t = fun (x11863 : t) -> t_to_js x11863
  end
module VibratePattern =
  struct
    type t = [ `Number of float  | `Other of float list ] Primitive.t
    let rec t_of_js : Ojs.t -> t =
      fun (x11870 : Ojs.t) ->
        Primitive.t_of_js
          (fun (x11871 : Ojs.t) ->
             let x11872 = x11871 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x11872 "dummy") with
             | "Number" -> `Number (Ojs.float_of_js x11872)
             | "Other" -> `Other (Ojs.list_of_js Ojs.float_of_js x11872)
             | _ -> assert false) x11870
    and t_to_js : t -> Ojs.t =
      fun (x11865 : [ `Number of float  | `Other of float list ] Primitive.t)
        ->
        Primitive.t_to_js
          (fun (x11866 : [ `Number of float  | `Other of float list ]) ->
             match x11866 with
             | `Number x11867 -> Ojs.float_to_js x11867
             | `Other x11868 -> Ojs.list_to_js Ojs.float_to_js x11868) x11865
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11875 : Ojs.t) -> t_of_js x11875
    and t_0_to_js : t_0 -> Ojs.t = fun (x11874 : t) -> t_to_js x11874
  end
module NotificationAction =
  struct
    type t = [ `NotificationAction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11877 : Ojs.t) -> t_of_js x11877
    and t_0_to_js : t_0 -> Ojs.t = fun (x11876 : t) -> t_to_js x11876
    type tags = [ `NotificationAction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationAction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11880 : Ojs.t) -> intf_of_js __tags_of_js x11880
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11878 : __tags intf) -> intf_to_js __tags_to_js x11878
    let (get_action : 'tags this -> string) =
      fun (x11882 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11882) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x11884 : 'tags this) ->
        fun (x11885 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11884) "action"
            (Ojs.string_to_js x11885)
    let (get_icon : 'tags this -> string) =
      fun (x11887 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11887) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x11889 : 'tags this) ->
        fun (x11890 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11889) "icon"
            (Ojs.string_to_js x11890)
    let (get_title : 'tags this -> string) =
      fun (x11892 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11892) "title")
    let (set_title : 'tags this -> string -> unit) =
      fun (x11894 : 'tags this) ->
        fun (x11895 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11894) "title"
            (Ojs.string_to_js x11895)
    let (create : action:string -> icon:string -> title:string -> unit -> t)
      =
      fun ~action:(x11897 : string) ->
        fun ~icon:(x11898 : string) ->
          fun ~title:(x11899 : string) ->
            fun () ->
              let x11900 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x11900 "action" (Ojs.string_to_js x11897);
              Ojs.set_prop_ascii x11900 "icon" (Ojs.string_to_js x11898);
              Ojs.set_prop_ascii x11900 "title" (Ojs.string_to_js x11899);
              t_of_js x11900
    let cast_from = Obj.magic
  end
module NotificationDirection =
  struct
    type t = [ `L_s110_ltr  | `L_s174_rtl  | `L_s41_auto ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11902 : Ojs.t) ->
        let x11903 = x11902 in
        match Ojs.string_of_js x11903 with
        | "ltr" -> `L_s110_ltr
        | "rtl" -> `L_s174_rtl
        | "auto" -> `L_s41_auto
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11901 : [ `L_s110_ltr  | `L_s174_rtl  | `L_s41_auto ]) ->
        match x11901 with
        | `L_s110_ltr -> Ojs.string_to_js "ltr"
        | `L_s174_rtl -> Ojs.string_to_js "rtl"
        | `L_s41_auto -> Ojs.string_to_js "auto"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11905 : Ojs.t) -> t_of_js x11905
    and t_0_to_js : t_0 -> Ojs.t = fun (x11904 : t) -> t_to_js x11904
  end
module EpochTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x11907 : Ojs.t) -> Ojs.float_of_js x11907
    and t_to_js : t -> Ojs.t = fun (x11906 : float) -> Ojs.float_to_js x11906
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11909 : Ojs.t) -> t_of_js x11909
    and t_0_to_js : t_0 -> Ojs.t = fun (x11908 : t) -> t_to_js x11908
  end
module NotificationOptions =
  struct
    type t = [ `NotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11911 : Ojs.t) -> t_of_js x11911
    and t_0_to_js : t_0 -> Ojs.t = fun (x11910 : t) -> t_to_js x11910
    type tags = [ `NotificationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x11914 : Ojs.t) -> intf_of_js __tags_of_js x11914
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x11912 : __tags intf) -> intf_to_js __tags_to_js x11912
    let (get_actions : 'tags this -> NotificationAction.t list) =
      fun (x11916 : 'tags this) ->
        Ojs.list_of_js NotificationAction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11916) "actions")
    let (set_actions : 'tags this -> NotificationAction.t list -> unit) =
      fun (x11919 : 'tags this) ->
        fun (x11920 : NotificationAction.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11919) "actions"
            (Ojs.list_to_js NotificationAction.t_to_js x11920)
    let (get_badge : 'tags this -> string) =
      fun (x11923 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11923) "badge")
    let (set_badge : 'tags this -> string -> unit) =
      fun (x11925 : 'tags this) ->
        fun (x11926 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11925) "badge"
            (Ojs.string_to_js x11926)
    let (get_body : 'tags this -> string) =
      fun (x11928 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11928) "body")
    let (set_body : 'tags this -> string -> unit) =
      fun (x11930 : 'tags this) ->
        fun (x11931 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11930) "body"
            (Ojs.string_to_js x11931)
    let (get_data : 'tags this -> any) =
      fun (x11933 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11933) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x11935 : 'tags this) ->
        fun (x11936 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11935) "data"
            (any_to_js x11936)
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x11938 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11938) "dir")
    let (set_dir : 'tags this -> NotificationDirection.t -> unit) =
      fun (x11940 : 'tags this) ->
        fun (x11941 : NotificationDirection.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11940) "dir"
            (NotificationDirection.t_to_js x11941)
    let (get_icon : 'tags this -> string) =
      fun (x11943 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11943) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x11945 : 'tags this) ->
        fun (x11946 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11945) "icon"
            (Ojs.string_to_js x11946)
    let (get_image : 'tags this -> string) =
      fun (x11948 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11948) "image")
    let (set_image : 'tags this -> string -> unit) =
      fun (x11950 : 'tags this) ->
        fun (x11951 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11950) "image"
            (Ojs.string_to_js x11951)
    let (get_lang : 'tags this -> string) =
      fun (x11953 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11953) "lang")
    let (set_lang : 'tags this -> string -> unit) =
      fun (x11955 : 'tags this) ->
        fun (x11956 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11955) "lang"
            (Ojs.string_to_js x11956)
    let (get_renotify : 'tags this -> bool) =
      fun (x11958 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11958) "renotify")
    let (set_renotify : 'tags this -> bool -> unit) =
      fun (x11960 : 'tags this) ->
        fun (x11961 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11960) "renotify"
            (Ojs.bool_to_js x11961)
    let (get_requireInteraction : 'tags this -> bool) =
      fun (x11963 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11963)
             "requireInteraction")
    let (set_requireInteraction : 'tags this -> bool -> unit) =
      fun (x11965 : 'tags this) ->
        fun (x11966 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11965)
            "requireInteraction" (Ojs.bool_to_js x11966)
    let (get_silent : 'tags this -> bool) =
      fun (x11968 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11968) "silent")
    let (set_silent : 'tags this -> bool -> unit) =
      fun (x11970 : 'tags this) ->
        fun (x11971 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11970) "silent"
            (Ojs.bool_to_js x11971)
    let (get_tag : 'tags this -> string) =
      fun (x11973 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11973) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x11975 : 'tags this) ->
        fun (x11976 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11975) "tag"
            (Ojs.string_to_js x11976)
    let (get_timestamp : 'tags this -> EpochTimeStamp.t) =
      fun (x11978 : 'tags this) ->
        EpochTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11978) "timestamp")
    let (set_timestamp : 'tags this -> EpochTimeStamp.t -> unit) =
      fun (x11980 : 'tags this) ->
        fun (x11981 : EpochTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11980) "timestamp"
            (EpochTimeStamp.t_to_js x11981)
    let (get_vibrate : 'tags this -> VibratePattern.t) =
      fun (x11983 : 'tags this) ->
        VibratePattern.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11983) "vibrate")
    let (set_vibrate : 'tags this -> VibratePattern.t -> unit) =
      fun (x11985 : 'tags this) ->
        fun (x11986 : VibratePattern.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11985) "vibrate"
            (VibratePattern.t_to_js x11986)
    let (create :
      actions:NotificationAction.t list ->
        badge:string ->
          body:string ->
            data:any ->
              dir:NotificationDirection.t ->
                icon:string ->
                  image:string ->
                    lang:string ->
                      renotify:bool ->
                        requireInteraction:bool ->
                          silent:bool ->
                            tag:string ->
                              timestamp:EpochTimeStamp.t ->
                                vibrate:VibratePattern.t -> unit -> t)
      =
      fun ~actions:(x11988 : NotificationAction.t list) ->
        fun ~badge:(x11989 : string) ->
          fun ~body:(x11990 : string) ->
            fun ~data:(x11991 : any) ->
              fun ~dir:(x11992 : NotificationDirection.t) ->
                fun ~icon:(x11993 : string) ->
                  fun ~image:(x11994 : string) ->
                    fun ~lang:(x11995 : string) ->
                      fun ~renotify:(x11996 : bool) ->
                        fun ~requireInteraction:(x11997 : bool) ->
                          fun ~silent:(x11998 : bool) ->
                            fun ~tag:(x11999 : string) ->
                              fun ~timestamp:(x12000 : EpochTimeStamp.t) ->
                                fun ~vibrate:(x12001 : VibratePattern.t) ->
                                  fun () ->
                                    let x12002 = Ojs.empty_obj () in
                                    Ojs.set_prop_ascii x12002 "actions"
                                      (Ojs.list_to_js
                                         NotificationAction.t_to_js x11988);
                                    Ojs.set_prop_ascii x12002 "badge"
                                      (Ojs.string_to_js x11989);
                                    Ojs.set_prop_ascii x12002 "body"
                                      (Ojs.string_to_js x11990);
                                    Ojs.set_prop_ascii x12002 "data"
                                      (any_to_js x11991);
                                    Ojs.set_prop_ascii x12002 "dir"
                                      (NotificationDirection.t_to_js x11992);
                                    Ojs.set_prop_ascii x12002 "icon"
                                      (Ojs.string_to_js x11993);
                                    Ojs.set_prop_ascii x12002 "image"
                                      (Ojs.string_to_js x11994);
                                    Ojs.set_prop_ascii x12002 "lang"
                                      (Ojs.string_to_js x11995);
                                    Ojs.set_prop_ascii x12002 "renotify"
                                      (Ojs.bool_to_js x11996);
                                    Ojs.set_prop_ascii x12002
                                      "requireInteraction"
                                      (Ojs.bool_to_js x11997);
                                    Ojs.set_prop_ascii x12002 "silent"
                                      (Ojs.bool_to_js x11998);
                                    Ojs.set_prop_ascii x12002 "tag"
                                      (Ojs.string_to_js x11999);
                                    Ojs.set_prop_ascii x12002 "timestamp"
                                      (EpochTimeStamp.t_to_js x12000);
                                    Ojs.set_prop_ascii x12002 "vibrate"
                                      (VibratePattern.t_to_js x12001);
                                    t_of_js x12002
    let cast_from = Obj.magic
  end
module Notification =
  struct
    type t = [ `EventTarget  | `Notification ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12005 : Ojs.t) -> t_of_js x12005
    and t_0_to_js : t_0 -> Ojs.t = fun (x12004 : t) -> t_to_js x12004
    type tags = [ `EventTarget  | `Notification ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12008 : Ojs.t) -> intf_of_js __tags_of_js x12008
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12006 : __tags intf) -> intf_to_js __tags_to_js x12006
    let (get_body : 'tags this -> string) =
      fun (x12010 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12010) "body")
    let (get_data : 'tags this -> any) =
      fun (x12012 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x12012) "data")
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x12014 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12014) "dir")
    let (get_icon : 'tags this -> string) =
      fun (x12016 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12016) "icon")
    let (get_lang : 'tags this -> string) =
      fun (x12018 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12018) "lang")
    let (get_onclick : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12020 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12022 : Ojs.t) ->
             fun ~this:(x12023 : t) ->
               fun ~ev:(x12024 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12022
                      [|(t_to_js x12023);(Event.t_to_js x12024)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12020) "onclick")
    let (set_onclick :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12025 : 'tags this) ->
        fun (x12026 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12025) "onclick"
            (Ojs.option_to_js
               (fun (x12027 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12028 : Ojs.t) ->
                       fun (x12029 : Ojs.t) ->
                         any_to_js
                           (x12027 ~this:(t_of_js x12028)
                              ~ev:(Event.t_of_js x12029)))) x12026)
    let (get_onclose : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12031 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12033 : Ojs.t) ->
             fun ~this:(x12034 : t) ->
               fun ~ev:(x12035 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12033
                      [|(t_to_js x12034);(Event.t_to_js x12035)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12031) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12036 : 'tags this) ->
        fun (x12037 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12036) "onclose"
            (Ojs.option_to_js
               (fun (x12038 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12039 : Ojs.t) ->
                       fun (x12040 : Ojs.t) ->
                         any_to_js
                           (x12038 ~this:(t_of_js x12039)
                              ~ev:(Event.t_of_js x12040)))) x12037)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12042 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12044 : Ojs.t) ->
             fun ~this:(x12045 : t) ->
               fun ~ev:(x12046 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12044
                      [|(t_to_js x12045);(Event.t_to_js x12046)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12042) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12047 : 'tags this) ->
        fun (x12048 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12047) "onerror"
            (Ojs.option_to_js
               (fun (x12049 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12050 : Ojs.t) ->
                       fun (x12051 : Ojs.t) ->
                         any_to_js
                           (x12049 ~this:(t_of_js x12050)
                              ~ev:(Event.t_of_js x12051)))) x12048)
    let (get_onshow : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12053 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12055 : Ojs.t) ->
             fun ~this:(x12056 : t) ->
               fun ~ev:(x12057 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12055
                      [|(t_to_js x12056);(Event.t_to_js x12057)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12053) "onshow")
    let (set_onshow :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12058 : 'tags this) ->
        fun (x12059 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12058) "onshow"
            (Ojs.option_to_js
               (fun (x12060 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12061 : Ojs.t) ->
                       fun (x12062 : Ojs.t) ->
                         any_to_js
                           (x12060 ~this:(t_of_js x12061)
                              ~ev:(Event.t_of_js x12062)))) x12059)
    let (get_tag : 'tags this -> string) =
      fun (x12064 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12064) "tag")
    let (get_title : 'tags this -> string) =
      fun (x12066 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12066) "title")
    let (close : 'tags this -> unit) =
      fun (x12068 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12068) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12079 : 'tags this) ->
        fun ~type_:(x12070 : 'K) ->
          fun ~listener:(x12071 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12072 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12081 = this_to_js Obj.magic x12079 in
                   Ojs.call (Ojs.get_prop_ascii x12081 "addEventListener")
                     "apply"
                     [|x12081;((let x12073 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12073 "push"
                                     [|(Obj.magic x12070)|]);
                                ignore
                                  (Ojs.call x12073 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12077 : Ojs.t) ->
                                             fun (x12078 : Ojs.t) ->
                                               any_to_js
                                                 (x12071
                                                    ~this:(t_of_js x12077)
                                                    ~ev:(any_of_js x12078))))|]);
                                (match x12072 with
                                 | Some x12074 ->
                                     ignore
                                       (Ojs.call x12073 "push"
                                          [|((match x12074 with
                                              | `U1 x12075 ->
                                                  Ojs.bool_to_js x12075
                                              | `U2 x12076 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12076))|])
                                 | None -> ());
                                x12073))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12089 : 'tags this) ->
        fun ~type_:(x12082 : string) ->
          fun ~listener:(x12083 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12084 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12091 = this_to_js Obj.magic x12089 in
                   Ojs.call (Ojs.get_prop_ascii x12091 "addEventListener")
                     "apply"
                     [|x12091;((let x12085 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12085 "push"
                                     [|(Ojs.string_to_js x12082)|]);
                                ignore
                                  (Ojs.call x12085 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12083)|]);
                                (match x12084 with
                                 | Some x12086 ->
                                     ignore
                                       (Ojs.call x12085 "push"
                                          [|((match x12086 with
                                              | `U1 x12087 ->
                                                  Ojs.bool_to_js x12087
                                              | `U2 x12088 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12088))|])
                                 | None -> ());
                                x12085))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12101 : 'tags this) ->
        fun ~type_:(x12092 : 'K) ->
          fun ~listener:(x12093 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12094 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12103 = this_to_js Obj.magic x12101 in
                   Ojs.call (Ojs.get_prop_ascii x12103 "removeEventListener")
                     "apply"
                     [|x12103;((let x12095 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12095 "push"
                                     [|(Obj.magic x12092)|]);
                                ignore
                                  (Ojs.call x12095 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12099 : Ojs.t) ->
                                             fun (x12100 : Ojs.t) ->
                                               any_to_js
                                                 (x12093
                                                    ~this:(t_of_js x12099)
                                                    ~ev:(any_of_js x12100))))|]);
                                (match x12094 with
                                 | Some x12096 ->
                                     ignore
                                       (Ojs.call x12095 "push"
                                          [|((match x12096 with
                                              | `U1 x12097 ->
                                                  Ojs.bool_to_js x12097
                                              | `U2 x12098 ->
                                                  EventListenerOptions.t_to_js
                                                    x12098))|])
                                 | None -> ());
                                x12095))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12111 : 'tags this) ->
        fun ~type_:(x12104 : string) ->
          fun ~listener:(x12105 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12106 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12113 = this_to_js Obj.magic x12111 in
                   Ojs.call (Ojs.get_prop_ascii x12113 "removeEventListener")
                     "apply"
                     [|x12113;((let x12107 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12107 "push"
                                     [|(Ojs.string_to_js x12104)|]);
                                ignore
                                  (Ojs.call x12107 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12105)|]);
                                (match x12106 with
                                 | Some x12108 ->
                                     ignore
                                       (Ojs.call x12107 "push"
                                          [|((match x12108 with
                                              | `U1 x12109 ->
                                                  Ojs.bool_to_js x12109
                                              | `U2 x12110 ->
                                                  EventListenerOptions.t_to_js
                                                    x12110))|])
                                 | None -> ());
                                x12107))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "prototype")
    let (create :
      title:string -> ?options:NotificationOptions.t -> unit -> t) =
      fun ~title:(x12114 : string) ->
        fun ?options:(x12115 : NotificationOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Notification")
                 (let x12116 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12116 "push" [|(Ojs.string_to_js x12114)|]);
                  (match x12115 with
                   | Some x12117 ->
                       ignore
                         (Ojs.call x12116 "push"
                            [|(NotificationOptions.t_to_js x12117)|])
                   | None -> ());
                  x12116))
    let (permission : unit -> NotificationPermission.t) =
      fun () ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "permission")
  end
module NotificationEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12119 : Ojs.t) -> t_of_js x12119
    and t_0_to_js : t_0 -> Ojs.t = fun (x12118 : t) -> t_to_js x12118
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12122 : Ojs.t) -> intf_of_js __tags_of_js x12122
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12120 : __tags intf) -> intf_to_js __tags_to_js x12120
    let (get_action : 'tags this -> string) =
      fun (x12124 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12124) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x12126 : 'tags this) ->
        fun (x12127 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12126) "action"
            (Ojs.string_to_js x12127)
    let (get_notification : 'tags this -> Notification.t) =
      fun (x12129 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12129) "notification")
    let (set_notification : 'tags this -> Notification.t -> unit) =
      fun (x12131 : 'tags this) ->
        fun (x12132 : Notification.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12131) "notification"
            (Notification.t_to_js x12132)
    let (create : action:string -> notification:Notification.t -> unit -> t)
      =
      fun ~action:(x12134 : string) ->
        fun ~notification:(x12135 : Notification.t) ->
          fun () ->
            let x12136 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x12136 "action" (Ojs.string_to_js x12134);
            Ojs.set_prop_ascii x12136 "notification"
              (Notification.t_to_js x12135);
            t_of_js x12136
    let cast_from = Obj.magic
  end
module NotificationEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `NotificationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12138 : Ojs.t) -> t_of_js x12138
    and t_0_to_js : t_0 -> Ojs.t = fun (x12137 : t) -> t_to_js x12137
    type tags = [ `Event  | `ExtendableEvent  | `NotificationEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12141 : Ojs.t) -> intf_of_js __tags_of_js x12141
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12139 : __tags intf) -> intf_to_js __tags_to_js x12139
    let (get_action : 'tags this -> string) =
      fun (x12143 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12143) "action")
    let (get_notification : 'tags this -> Notification.t) =
      fun (x12145 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12145) "notification")
    let (create : action:string -> notification:Notification.t -> unit -> t)
      =
      fun ~action:(x12147 : string) ->
        fun ~notification:(x12148 : Notification.t) ->
          fun () ->
            let x12149 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x12149 "action" (Ojs.string_to_js x12147);
            Ojs.set_prop_ascii x12149 "notification"
              (Notification.t_to_js x12148);
            t_of_js x12149
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NotificationEvent") "prototype")
    let (create' :
      type_:string -> eventInitDict:NotificationEventInit.t -> t) =
      fun ~type_:(x12150 : string) ->
        fun ~eventInitDict:(x12151 : NotificationEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
               [|(Ojs.string_to_js x12150);(NotificationEventInit.t_to_js
                                              x12151)|])
  end
module FetchEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12153 : Ojs.t) -> t_of_js x12153
    and t_0_to_js : t_0 -> Ojs.t = fun (x12152 : t) -> t_to_js x12152
    type tags = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12156 : Ojs.t) -> intf_of_js __tags_of_js x12156
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12154 : __tags intf) -> intf_to_js __tags_to_js x12154
    let (get_clientId : 'tags this -> string) =
      fun (x12158 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12158) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x12160 : 'tags this) ->
        fun (x12161 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12160) "clientId"
            (Ojs.string_to_js x12161)
    let (get_handled : 'tags this -> undefined Promise.t_1) =
      fun (x12163 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12163) "handled")
    let (set_handled : 'tags this -> undefined Promise.t_1 -> unit) =
      fun (x12166 : 'tags this) ->
        fun (x12167 : undefined Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12166) "handled"
            (Promise.t_1_to_js undefined_to_js x12167)
    let (get_preloadResponse : 'tags this -> any Promise.t_1) =
      fun (x12170 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12170) "preloadResponse")
    let (set_preloadResponse : 'tags this -> any Promise.t_1 -> unit) =
      fun (x12173 : 'tags this) ->
        fun (x12174 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12173) "preloadResponse"
            (Promise.t_1_to_js any_to_js x12174)
    let (get_replacesClientId : 'tags this -> string) =
      fun (x12177 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12177)
             "replacesClientId")
    let (set_replacesClientId : 'tags this -> string -> unit) =
      fun (x12179 : 'tags this) ->
        fun (x12180 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12179) "replacesClientId"
            (Ojs.string_to_js x12180)
    let (get_request : 'tags this -> Request.t) =
      fun (x12182 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12182) "request")
    let (set_request : 'tags this -> Request.t -> unit) =
      fun (x12184 : 'tags this) ->
        fun (x12185 : Request.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12184) "request"
            (Request.t_to_js x12185)
    let (get_resultingClientId : 'tags this -> string) =
      fun (x12187 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12187)
             "resultingClientId")
    let (set_resultingClientId : 'tags this -> string -> unit) =
      fun (x12189 : 'tags this) ->
        fun (x12190 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12189)
            "resultingClientId" (Ojs.string_to_js x12190)
    let (create :
      clientId:string ->
        handled:undefined Promise.t_1 ->
          preloadResponse:any Promise.t_1 ->
            replacesClientId:string ->
              request:Request.t -> resultingClientId:string -> unit -> t)
      =
      fun ~clientId:(x12192 : string) ->
        fun ~handled:(x12193 : undefined Promise.t_1) ->
          fun ~preloadResponse:(x12194 : any Promise.t_1) ->
            fun ~replacesClientId:(x12195 : string) ->
              fun ~request:(x12196 : Request.t) ->
                fun ~resultingClientId:(x12197 : string) ->
                  fun () ->
                    let x12198 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x12198 "clientId"
                      (Ojs.string_to_js x12192);
                    Ojs.set_prop_ascii x12198 "handled"
                      (Promise.t_1_to_js undefined_to_js x12193);
                    Ojs.set_prop_ascii x12198 "preloadResponse"
                      (Promise.t_1_to_js any_to_js x12194);
                    Ojs.set_prop_ascii x12198 "replacesClientId"
                      (Ojs.string_to_js x12195);
                    Ojs.set_prop_ascii x12198 "request"
                      (Request.t_to_js x12196);
                    Ojs.set_prop_ascii x12198 "resultingClientId"
                      (Ojs.string_to_js x12197);
                    t_of_js x12198
    let cast_from = Obj.magic
  end
module FetchEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12202 : Ojs.t) -> t_of_js x12202
    and t_0_to_js : t_0 -> Ojs.t = fun (x12201 : t) -> t_to_js x12201
    type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12205 : Ojs.t) -> intf_of_js __tags_of_js x12205
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12203 : __tags intf) -> intf_to_js __tags_to_js x12203
    let (get_clientId : 'tags this -> string) =
      fun (x12207 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12207) "clientId")
    let (get_handled : 'tags this -> undefined Promise.t_1) =
      fun (x12209 : 'tags this) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12209) "handled")
    let (get_request : 'tags this -> Request.t) =
      fun (x12212 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12212) "request")
    let (get_resultingClientId : 'tags this -> string) =
      fun (x12214 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12214)
             "resultingClientId")
    let (respondWith :
      'tags this ->
        r:[ `U1 of Response.t  | `U2 of Response.t PromiseLike.t_1 ] -> unit)
      =
      fun (x12220 : 'tags this) ->
        fun
          ~r:(x12216 :
               [ `U1 of Response.t  | `U2 of Response.t PromiseLike.t_1 ])
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12220) "respondWith"
               [|((match x12216 with
                   | `U1 x12217 -> Response.t_to_js x12217
                   | `U2 x12218 ->
                       PromiseLike.t_1_to_js Response.t_to_js x12218))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FetchEvent")
             "prototype")
    let (create : type_:string -> eventInitDict:FetchEventInit.t -> t) =
      fun ~type_:(x12222 : string) ->
        fun ~eventInitDict:(x12223 : FetchEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FetchEvent")
               [|(Ojs.string_to_js x12222);(FetchEventInit.t_to_js x12223)|])
  end
module FrameType =
  struct
    type t =
      [ `L_s122_nested  | `L_s130_none  | `L_s197_top_level 
      | `L_s42_auxiliary ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12225 : Ojs.t) ->
        let x12226 = x12225 in
        match Ojs.string_of_js x12226 with
        | "nested" -> `L_s122_nested
        | "none" -> `L_s130_none
        | "top-level" -> `L_s197_top_level
        | "auxiliary" -> `L_s42_auxiliary
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x12224 :
          [ `L_s122_nested  | `L_s130_none  | `L_s197_top_level 
          | `L_s42_auxiliary ])
        ->
        match x12224 with
        | `L_s122_nested -> Ojs.string_to_js "nested"
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s197_top_level -> Ojs.string_to_js "top-level"
        | `L_s42_auxiliary -> Ojs.string_to_js "auxiliary"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12228 : Ojs.t) -> t_of_js x12228
    and t_0_to_js : t_0 -> Ojs.t = fun (x12227 : t) -> t_to_js x12227
  end
module ClientTypes =
  struct
    type t =
      [ `L_s180_sharedworker  | `L_s214_window  | `L_s215_worker 
      | `L_s35_all ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12230 : Ojs.t) ->
        let x12231 = x12230 in
        match Ojs.string_of_js x12231 with
        | "sharedworker" -> `L_s180_sharedworker
        | "window" -> `L_s214_window
        | "worker" -> `L_s215_worker
        | "all" -> `L_s35_all
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x12229 :
          [ `L_s180_sharedworker  | `L_s214_window  | `L_s215_worker 
          | `L_s35_all ])
        ->
        match x12229 with
        | `L_s180_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s214_window -> Ojs.string_to_js "window"
        | `L_s215_worker -> Ojs.string_to_js "worker"
        | `L_s35_all -> Ojs.string_to_js "all"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12233 : Ojs.t) -> t_of_js x12233
    and t_0_to_js : t_0 -> Ojs.t = fun (x12232 : t) -> t_to_js x12232
  end
module Client =
  struct
    type t = [ `Client ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12235 : Ojs.t) -> t_of_js x12235
    and t_0_to_js : t_0 -> Ojs.t = fun (x12234 : t) -> t_to_js x12234
    type tags = [ `Client ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Client ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12238 : Ojs.t) -> intf_of_js __tags_of_js x12238
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12236 : __tags intf) -> intf_to_js __tags_to_js x12236
    let (get_frameType : 'tags this -> FrameType.t) =
      fun (x12240 : 'tags this) ->
        FrameType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12240) "frameType")
    let (get_id : 'tags this -> string) =
      fun (x12242 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12242) "id")
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x12244 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12244) "type")
    let (get_url : 'tags this -> string) =
      fun (x12246 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12246) "url")
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x12251 : 'tags this) ->
        fun ~message:(x12248 : any) ->
          fun ~transfer:(x12249 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12251) "postMessage"
                 [|(any_to_js x12248);(Ojs.list_to_js Transferable.t_to_js
                                         x12249)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x12257 : 'tags this) ->
        fun ~message:(x12253 : any) ->
          fun ?options:(x12254 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x12259 = this_to_js Obj.magic x12257 in
                 Ojs.call (Ojs.get_prop_ascii x12259 "postMessage") "apply"
                   [|x12259;((let x12255 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12255 "push"
                                   [|(any_to_js x12253)|]);
                              (match x12254 with
                               | Some x12256 ->
                                   ignore
                                     (Ojs.call x12255 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x12256)|])
                               | None -> ());
                              x12255))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Client")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Client") [||])
  end
module ExtendableMessageEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12261 : Ojs.t) -> t_of_js x12261
    and t_0_to_js : t_0 -> Ojs.t = fun (x12260 : t) -> t_to_js x12260
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12264 : Ojs.t) -> intf_of_js __tags_of_js x12264
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12262 : __tags intf) -> intf_to_js __tags_to_js x12262
    let (get_data : 'tags this -> any) =
      fun (x12266 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x12266) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x12268 : 'tags this) ->
        fun (x12269 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12268) "data"
            (any_to_js x12269)
    let (get_lastEventId : 'tags this -> string) =
      fun (x12271 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12271) "lastEventId")
    let (set_lastEventId : 'tags this -> string -> unit) =
      fun (x12273 : 'tags this) ->
        fun (x12274 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12273) "lastEventId"
            (Ojs.string_to_js x12274)
    let (get_origin : 'tags this -> string) =
      fun (x12276 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12276) "origin")
    let (set_origin : 'tags this -> string -> unit) =
      fun (x12278 : 'tags this) ->
        fun (x12279 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12278) "origin"
            (Ojs.string_to_js x12279)
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x12281 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12281) "ports")
    let (set_ports : 'tags this -> MessagePort.t list -> unit) =
      fun (x12284 : 'tags this) ->
        fun (x12285 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12284) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x12285)
    let (get_source :
      'tags this -> (Client.t, MessagePort.t, ServiceWorker.t) union3 option)
      =
      fun (x12288 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12290 : Ojs.t) ->
             union3_of_js Client.t_of_js MessagePort.t_of_js
               ServiceWorker.t_of_js x12290)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12288) "source")
    let (set_source :
      'tags this ->
        [ `Null  | `U1 of Client.t  | `U2 of ServiceWorker.t 
        | `U3 of MessagePort.t ] -> unit)
      =
      fun (x12294 : 'tags this) ->
        fun
          (x12295 :
            [ `Null  | `U1 of Client.t  | `U2 of ServiceWorker.t 
            | `U3 of MessagePort.t ])
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12294) "source"
            (match x12295 with
             | `Null -> Ojs.null
             | `U1 x12296 -> Client.t_to_js x12296
             | `U2 x12297 -> ServiceWorker.t_to_js x12297
             | `U3 x12298 -> MessagePort.t_to_js x12298)
    let (create :
      data:any ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 ->
                unit -> t)
      =
      fun ~data:(x12300 : any) ->
        fun ~lastEventId:(x12301 : string) ->
          fun ~origin:(x12302 : string) ->
            fun ~ports:(x12303 : MessagePort.t list) ->
              fun
                ?source:(x12304 :
                          (Client.t, MessagePort.t, ServiceWorker.t) union3
                            option)
                ->
                fun () ->
                  let x12305 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x12305 "data" (any_to_js x12300);
                  Ojs.set_prop_ascii x12305 "lastEventId"
                    (Ojs.string_to_js x12301);
                  Ojs.set_prop_ascii x12305 "origin"
                    (Ojs.string_to_js x12302);
                  Ojs.set_prop_ascii x12305 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x12303);
                  (match x12304 with
                   | Some x12306 ->
                       Ojs.set_prop_ascii x12305 "source"
                         (union3_to_js Client.t_to_js MessagePort.t_to_js
                            ServiceWorker.t_to_js x12306)
                   | None -> ());
                  t_of_js x12305
    let cast_from = Obj.magic
  end
module ExtendableMessageEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12312 : Ojs.t) -> t_of_js x12312
    and t_0_to_js : t_0 -> Ojs.t = fun (x12311 : t) -> t_to_js x12311
    type tags = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12315 : Ojs.t) -> intf_of_js __tags_of_js x12315
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12313 : __tags intf) -> intf_to_js __tags_to_js x12313
    let (get_data : 'tags this -> any) =
      fun (x12317 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x12317) "data")
    let (get_lastEventId : 'tags this -> string) =
      fun (x12319 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12319) "lastEventId")
    let (get_origin : 'tags this -> string) =
      fun (x12321 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12321) "origin")
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x12323 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12323) "ports")
    let (get_source :
      'tags this -> (Client.t, MessagePort.t, ServiceWorker.t) union3 option)
      =
      fun (x12326 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12328 : Ojs.t) ->
             union3_of_js Client.t_of_js MessagePort.t_of_js
               ServiceWorker.t_of_js x12328)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12326) "source")
    let (create :
      data:any ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:(Client.t, MessagePort.t, ServiceWorker.t) union3 ->
                unit -> t)
      =
      fun ~data:(x12332 : any) ->
        fun ~lastEventId:(x12333 : string) ->
          fun ~origin:(x12334 : string) ->
            fun ~ports:(x12335 : MessagePort.t list) ->
              fun
                ?source:(x12336 :
                          (Client.t, MessagePort.t, ServiceWorker.t) union3
                            option)
                ->
                fun () ->
                  let x12337 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x12337 "data" (any_to_js x12332);
                  Ojs.set_prop_ascii x12337 "lastEventId"
                    (Ojs.string_to_js x12333);
                  Ojs.set_prop_ascii x12337 "origin"
                    (Ojs.string_to_js x12334);
                  Ojs.set_prop_ascii x12337 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x12335);
                  (match x12336 with
                   | Some x12338 ->
                       Ojs.set_prop_ascii x12337 "source"
                         (union3_to_js Client.t_to_js MessagePort.t_to_js
                            ServiceWorker.t_to_js x12338)
                   | None -> ());
                  t_of_js x12337
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:ExtendableMessageEventInit.t -> unit -> t)
      =
      fun ~type_:(x12343 : string) ->
        fun ?eventInitDict:(x12344 : ExtendableMessageEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
                 (let x12345 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12345 "push" [|(Ojs.string_to_js x12343)|]);
                  (match x12344 with
                   | Some x12346 ->
                       ignore
                         (Ojs.call x12345 "push"
                            [|(ExtendableMessageEventInit.t_to_js x12346)|])
                   | None -> ());
                  x12345))
  end
module ServiceWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12348 : Ojs.t) -> t_of_js x12348
    and t_0_to_js : t_0 -> Ojs.t = fun (x12347 : t) -> t_to_js x12347
    type tags =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12351 : Ojs.t) -> intf_of_js __tags_of_js x12351
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12349 : __tags intf) -> intf_to_js __tags_to_js x12349
    let (get_activate : 'tags this -> ExtendableEvent.t) =
      fun (x12353 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12353) "activate")
    let (set_activate : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x12355 : 'tags this) ->
        fun (x12356 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12355) "activate"
            (ExtendableEvent.t_to_js x12356)
    let (get_fetch : 'tags this -> FetchEvent.t) =
      fun (x12358 : 'tags this) ->
        FetchEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12358) "fetch")
    let (set_fetch : 'tags this -> FetchEvent.t -> unit) =
      fun (x12360 : 'tags this) ->
        fun (x12361 : FetchEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12360) "fetch"
            (FetchEvent.t_to_js x12361)
    let (get_install : 'tags this -> ExtendableEvent.t) =
      fun (x12363 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12363) "install")
    let (set_install : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x12365 : 'tags this) ->
        fun (x12366 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12365) "install"
            (ExtendableEvent.t_to_js x12366)
    let (get_message : 'tags this -> ExtendableMessageEvent.t) =
      fun (x12368 : 'tags this) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12368) "message")
    let (set_message : 'tags this -> ExtendableMessageEvent.t -> unit) =
      fun (x12370 : 'tags this) ->
        fun (x12371 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12370) "message"
            (ExtendableMessageEvent.t_to_js x12371)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x12373 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12373) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12375 : 'tags this) ->
        fun (x12376 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12375) "messageerror"
            (MessageEvent.t_0_to_js x12376)
    let (get_notificationclick : 'tags this -> NotificationEvent.t) =
      fun (x12378 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12378)
             "notificationclick")
    let (set_notificationclick : 'tags this -> NotificationEvent.t -> unit) =
      fun (x12380 : 'tags this) ->
        fun (x12381 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12380)
            "notificationclick" (NotificationEvent.t_to_js x12381)
    let (get_notificationclose : 'tags this -> NotificationEvent.t) =
      fun (x12383 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12383)
             "notificationclose")
    let (set_notificationclose : 'tags this -> NotificationEvent.t -> unit) =
      fun (x12385 : 'tags this) ->
        fun (x12386 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12385)
            "notificationclose" (NotificationEvent.t_to_js x12386)
    let (get_push : 'tags this -> PushEvent.t) =
      fun (x12388 : 'tags this) ->
        PushEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12388) "push")
    let (set_push : 'tags this -> PushEvent.t -> unit) =
      fun (x12390 : 'tags this) ->
        fun (x12391 : PushEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12390) "push"
            (PushEvent.t_to_js x12391)
    let (create :
      activate:ExtendableEvent.t ->
        fetch:FetchEvent.t ->
          install:ExtendableEvent.t ->
            message:ExtendableMessageEvent.t ->
              messageerror:MessageEvent.t_0 ->
                notificationclick:NotificationEvent.t ->
                  notificationclose:NotificationEvent.t ->
                    push:PushEvent.t -> unit -> t)
      =
      fun ~activate:(x12393 : ExtendableEvent.t) ->
        fun ~fetch:(x12394 : FetchEvent.t) ->
          fun ~install:(x12395 : ExtendableEvent.t) ->
            fun ~message:(x12396 : ExtendableMessageEvent.t) ->
              fun ~messageerror:(x12397 : MessageEvent.t_0) ->
                fun ~notificationclick:(x12398 : NotificationEvent.t) ->
                  fun ~notificationclose:(x12399 : NotificationEvent.t) ->
                    fun ~push:(x12400 : PushEvent.t) ->
                      fun () ->
                        let x12401 = Ojs.empty_obj () in
                        Ojs.set_prop_ascii x12401 "activate"
                          (ExtendableEvent.t_to_js x12393);
                        Ojs.set_prop_ascii x12401 "fetch"
                          (FetchEvent.t_to_js x12394);
                        Ojs.set_prop_ascii x12401 "install"
                          (ExtendableEvent.t_to_js x12395);
                        Ojs.set_prop_ascii x12401 "message"
                          (ExtendableMessageEvent.t_to_js x12396);
                        Ojs.set_prop_ascii x12401 "messageerror"
                          (MessageEvent.t_0_to_js x12397);
                        Ojs.set_prop_ascii x12401 "notificationclick"
                          (NotificationEvent.t_to_js x12398);
                        Ojs.set_prop_ascii x12401 "notificationclose"
                          (NotificationEvent.t_to_js x12399);
                        Ojs.set_prop_ascii x12401 "push"
                          (PushEvent.t_to_js x12400);
                        t_of_js x12401
    let cast_from = Obj.magic
  end
module ServiceWorkerUpdateViaCache =
  struct
    type t = [ `L_s130_none  | `L_s35_all  | `L_s93_imports ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12403 : Ojs.t) ->
        let x12404 = x12403 in
        match Ojs.string_of_js x12404 with
        | "none" -> `L_s130_none
        | "all" -> `L_s35_all
        | "imports" -> `L_s93_imports
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12402 : [ `L_s130_none  | `L_s35_all  | `L_s93_imports ]) ->
        match x12402 with
        | `L_s130_none -> Ojs.string_to_js "none"
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s93_imports -> Ojs.string_to_js "imports"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12406 : Ojs.t) -> t_of_js x12406
    and t_0_to_js : t_0 -> Ojs.t = fun (x12405 : t) -> t_to_js x12405
  end
module PushSubscriptionOptionsInit =
  struct
    type t = [ `PushSubscriptionOptionsInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12408 : Ojs.t) -> t_of_js x12408
    and t_0_to_js : t_0 -> Ojs.t = fun (x12407 : t) -> t_to_js x12407
    type tags = [ `PushSubscriptionOptionsInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12411 : Ojs.t) -> intf_of_js __tags_of_js x12411
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12409 : __tags intf) -> intf_to_js __tags_to_js x12409
    let (get_applicationServerKey :
      'tags this ->
        [ `String of string  | `Null  | `Other of BufferSource.t ]
          Primitive.t)
      =
      fun (x12413 : 'tags this) ->
        Primitive.t_of_js
          (fun (x12415 : Ojs.t) ->
             let x12416 = x12415 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x12416 "dummy") with
             | "String" -> `String (Ojs.string_of_js x12416)
             | "Null" -> `Null
             | "Other" -> `Other (BufferSource.t_of_js x12416)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12413)
             "applicationServerKey")
    let (set_applicationServerKey :
      'tags this ->
        [ `Null  | `U1 of BufferSource.t  | `U2 of string ] -> unit)
      =
      fun (x12417 : 'tags this) ->
        fun (x12418 : [ `Null  | `U1 of BufferSource.t  | `U2 of string ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12417)
            "applicationServerKey"
            (match x12418 with
             | `Null -> Ojs.null
             | `U1 x12419 -> BufferSource.t_to_js x12419
             | `U2 x12420 -> Ojs.string_to_js x12420)
    let (get_userVisibleOnly : 'tags this -> bool) =
      fun (x12422 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12422) "userVisibleOnly")
    let (set_userVisibleOnly : 'tags this -> bool -> unit) =
      fun (x12424 : 'tags this) ->
        fun (x12425 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12424) "userVisibleOnly"
            (Ojs.bool_to_js x12425)
    let (create :
      ?applicationServerKey:[ `String of string  | `Other of BufferSource.t ]
        Primitive.t -> userVisibleOnly:bool -> unit -> t)
      =
      fun
        ?applicationServerKey:(x12427 :
                                [ `String of string 
                                | `Other of BufferSource.t ] Primitive.t
                                  option)
        ->
        fun ~userVisibleOnly:(x12428 : bool) ->
          fun () ->
            let x12429 = Ojs.empty_obj () in
            (match x12427 with
             | Some x12430 ->
                 Ojs.set_prop_ascii x12429 "applicationServerKey"
                   (Primitive.t_to_js
                      (fun
                         (x12431 :
                           [ `String of string  | `Other of BufferSource.t ])
                         ->
                         match x12431 with
                         | `String x12432 -> Ojs.string_to_js x12432
                         | `Other x12433 -> BufferSource.t_to_js x12433)
                      x12430)
             | None -> ());
            Ojs.set_prop_ascii x12429 "userVisibleOnly"
              (Ojs.bool_to_js x12428);
            t_of_js x12429
    let cast_from = Obj.magic
  end
module PushSubscriptionOptions =
  struct
    type t = [ `PushSubscriptionOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12435 : Ojs.t) -> t_of_js x12435
    and t_0_to_js : t_0 -> Ojs.t = fun (x12434 : t) -> t_to_js x12434
    type tags = [ `PushSubscriptionOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12438 : Ojs.t) -> intf_of_js __tags_of_js x12438
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12436 : __tags intf) -> intf_to_js __tags_to_js x12436
    let (get_applicationServerKey : 'tags this -> ArrayBuffer.t_0 option) =
      fun (x12440 : 'tags this) ->
        Ojs.option_of_js ArrayBuffer.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12440)
             "applicationServerKey")
    let (create : ?applicationServerKey:ArrayBuffer.t_0 -> unit -> t) =
      fun ?applicationServerKey:(x12443 : ArrayBuffer.t_0 option) ->
        fun () ->
          let x12444 = Ojs.empty_obj () in
          (match x12443 with
           | Some x12445 ->
               Ojs.set_prop_ascii x12444 "applicationServerKey"
                 (ArrayBuffer.t_0_to_js x12445)
           | None -> ());
          t_of_js x12444
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions") 
             [||])
  end
module PushSubscriptionJSON =
  struct
    type t = [ `PushSubscriptionJSON ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12447 : Ojs.t) -> t_of_js x12447
    and t_0_to_js : t_0 -> Ojs.t = fun (x12446 : t) -> t_to_js x12446
    type tags = [ `PushSubscriptionJSON ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12450 : Ojs.t) -> intf_of_js __tags_of_js x12450
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12448 : __tags intf) -> intf_to_js __tags_to_js x12448
    let (get_endpoint : 'tags this -> string) =
      fun (x12452 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12452) "endpoint")
    let (set_endpoint : 'tags this -> string -> unit) =
      fun (x12454 : 'tags this) ->
        fun (x12455 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12454) "endpoint"
            (Ojs.string_to_js x12455)
    let (get_expirationTime : 'tags this -> EpochTimeStamp.t option) =
      fun (x12457 : 'tags this) ->
        Ojs.option_of_js EpochTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12457) "expirationTime")
    let (set_expirationTime : 'tags this -> EpochTimeStamp.t option -> unit)
      =
      fun (x12460 : 'tags this) ->
        fun (x12461 : EpochTimeStamp.t option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12460) "expirationTime"
            (Ojs.option_to_js EpochTimeStamp.t_to_js x12461)
    let (get_keys : 'tags this -> (string, string) Record.t_2) =
      fun (x12464 : 'tags this) ->
        Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12464) "keys")
    let (set_keys : 'tags this -> (string, string) Record.t_2 -> unit) =
      fun (x12468 : 'tags this) ->
        fun (x12469 : (string, string) Record.t_2) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12468) "keys"
            (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x12469)
    let (create :
      endpoint:string ->
        ?expirationTime:EpochTimeStamp.t ->
          keys:(string, string) Record.t_2 -> unit -> t)
      =
      fun ~endpoint:(x12473 : string) ->
        fun ?expirationTime:(x12474 : EpochTimeStamp.t option) ->
          fun ~keys:(x12475 : (string, string) Record.t_2) ->
            fun () ->
              let x12476 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12476 "endpoint" (Ojs.string_to_js x12473);
              (match x12474 with
               | Some x12479 ->
                   Ojs.set_prop_ascii x12476 "expirationTime"
                     (EpochTimeStamp.t_to_js x12479)
               | None -> ());
              Ojs.set_prop_ascii x12476 "keys"
                (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x12475);
              t_of_js x12476
    let cast_from = Obj.magic
  end
module PushEncryptionKeyName =
  struct
    type t = [ `L_s145_p256dh  | `L_s40_auth ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12481 : Ojs.t) ->
        let x12482 = x12481 in
        match Ojs.string_of_js x12482 with
        | "p256dh" -> `L_s145_p256dh
        | "auth" -> `L_s40_auth
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12480 : [ `L_s145_p256dh  | `L_s40_auth ]) ->
        match x12480 with
        | `L_s145_p256dh -> Ojs.string_to_js "p256dh"
        | `L_s40_auth -> Ojs.string_to_js "auth"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12484 : Ojs.t) -> t_of_js x12484
    and t_0_to_js : t_0 -> Ojs.t = fun (x12483 : t) -> t_to_js x12483
  end
module PushSubscription =
  struct
    type t = [ `PushSubscription ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12486 : Ojs.t) -> t_of_js x12486
    and t_0_to_js : t_0 -> Ojs.t = fun (x12485 : t) -> t_to_js x12485
    type tags = [ `PushSubscription ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12489 : Ojs.t) -> intf_of_js __tags_of_js x12489
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12487 : __tags intf) -> intf_to_js __tags_to_js x12487
    let (get_endpoint : 'tags this -> string) =
      fun (x12491 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12491) "endpoint")
    let (get_options : 'tags this -> PushSubscriptionOptions.t) =
      fun (x12493 : 'tags this) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12493) "options")
    let (getKey :
      'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t_0 option) =
      fun (x12496 : 'tags this) ->
        fun ~name:(x12495 : PushEncryptionKeyName.t) ->
          Ojs.option_of_js ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x12496) "getKey"
               [|(PushEncryptionKeyName.t_to_js x12495)|])
    let (toJSON : 'tags this -> PushSubscriptionJSON.t) =
      fun (x12499 : 'tags this) ->
        PushSubscriptionJSON.t_of_js
          (Ojs.call (this_to_js Obj.magic x12499) "toJSON" [||])
    let (unsubscribe : 'tags this -> bool Promise.t_1) =
      fun (x12501 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12501) "unsubscribe" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscription") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushSubscription")
             [||])
  end
module PermissionState =
  struct
    type t = [ `L_s159_prompt  | `L_s58_denied  | `L_s84_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12505 : Ojs.t) ->
        let x12506 = x12505 in
        match Ojs.string_of_js x12506 with
        | "prompt" -> `L_s159_prompt
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s84_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12504 : [ `L_s159_prompt  | `L_s58_denied  | `L_s84_granted ]) ->
        match x12504 with
        | `L_s159_prompt -> Ojs.string_to_js "prompt"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s84_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12508 : Ojs.t) -> t_of_js x12508
    and t_0_to_js : t_0 -> Ojs.t = fun (x12507 : t) -> t_to_js x12507
  end
module PushManager =
  struct
    type t = [ `PushManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12510 : Ojs.t) -> t_of_js x12510
    and t_0_to_js : t_0 -> Ojs.t = fun (x12509 : t) -> t_to_js x12509
    type tags = [ `PushManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12513 : Ojs.t) -> intf_of_js __tags_of_js x12513
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12511 : __tags intf) -> intf_to_js __tags_to_js x12511
    let (getSubscription :
      'tags this -> PushSubscription.t option Promise.t_1) =
      fun (x12515 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x12517 : Ojs.t) ->
             Ojs.option_of_js PushSubscription.t_of_js x12517)
          (Ojs.call (this_to_js Obj.magic x12515) "getSubscription" [||])
    let (permissionState :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PermissionState.t Promise.t_1)
      =
      fun (x12522 : 'tags this) ->
        fun ?options:(x12519 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PermissionState.t_of_js
              (let x12524 = this_to_js Obj.magic x12522 in
               Ojs.call (Ojs.get_prop_ascii x12524 "permissionState") "apply"
                 [|x12524;((let x12520 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12519 with
                             | Some x12521 ->
                                 ignore
                                   (Ojs.call x12520 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12521)|])
                             | None -> ());
                            x12520))|])
    let (subscribe :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushSubscription.t Promise.t_1)
      =
      fun (x12529 : 'tags this) ->
        fun ?options:(x12526 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushSubscription.t_of_js
              (let x12531 = this_to_js Obj.magic x12529 in
               Ojs.call (Ojs.get_prop_ascii x12531 "subscribe") "apply"
                 [|x12531;((let x12527 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12526 with
                             | Some x12528 ->
                                 ignore
                                   (Ojs.call x12527 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12528)|])
                             | None -> ());
                            x12527))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushManager") [||])
    let (supportedContentEncodings : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "supportedContentEncodings")
  end
module GetNotificationOptions =
  struct
    type t = [ `GetNotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12535 : Ojs.t) -> t_of_js x12535
    and t_0_to_js : t_0 -> Ojs.t = fun (x12534 : t) -> t_to_js x12534
    type tags = [ `GetNotificationOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GetNotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12538 : Ojs.t) -> intf_of_js __tags_of_js x12538
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12536 : __tags intf) -> intf_to_js __tags_to_js x12536
    let (get_tag : 'tags this -> string) =
      fun (x12540 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12540) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x12542 : 'tags this) ->
        fun (x12543 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12542) "tag"
            (Ojs.string_to_js x12543)
    let (create : tag:string -> unit -> t) =
      fun ~tag:(x12545 : string) ->
        fun () ->
          let x12546 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12546 "tag" (Ojs.string_to_js x12545);
          t_of_js x12546
    let cast_from = Obj.magic
  end
module ServiceWorkerRegistration =
  struct
    type t = [ `EventTarget  | `ServiceWorkerRegistration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12548 : Ojs.t) -> t_of_js x12548
    and t_0_to_js : t_0 -> Ojs.t = fun (x12547 : t) -> t_to_js x12547
    type tags = [ `EventTarget  | `ServiceWorkerRegistration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12551 : Ojs.t) -> intf_of_js __tags_of_js x12551
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12549 : __tags intf) -> intf_to_js __tags_to_js x12549
    let (get_active : 'tags this -> ServiceWorker.t option) =
      fun (x12553 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12553) "active")
    let (get_installing : 'tags this -> ServiceWorker.t option) =
      fun (x12556 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12556) "installing")
    let (get_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12559 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12561 : Ojs.t) ->
             fun ~this:(x12562 : t) ->
               fun ~ev:(x12563 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12561
                      [|(t_to_js x12562);(Event.t_to_js x12563)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12559) "onupdatefound")
    let (set_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12564 : 'tags this) ->
        fun (x12565 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12564) "onupdatefound"
            (Ojs.option_to_js
               (fun (x12566 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12567 : Ojs.t) ->
                       fun (x12568 : Ojs.t) ->
                         any_to_js
                           (x12566 ~this:(t_of_js x12567)
                              ~ev:(Event.t_of_js x12568)))) x12565)
    let (get_pushManager : 'tags this -> PushManager.t) =
      fun (x12570 : 'tags this) ->
        PushManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12570) "pushManager")
    let (get_scope : 'tags this -> string) =
      fun (x12572 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12572) "scope")
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x12574 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12574) "updateViaCache")
    let (get_waiting : 'tags this -> ServiceWorker.t option) =
      fun (x12576 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12576) "waiting")
    let (getNotifications :
      'tags this ->
        ?filter:GetNotificationOptions.t ->
          unit -> Notification.t list Promise.t_1)
      =
      fun (x12582 : 'tags this) ->
        fun ?filter:(x12579 : GetNotificationOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12585 : Ojs.t) ->
                 Ojs.list_of_js Notification.t_of_js x12585)
              (let x12584 = this_to_js Obj.magic x12582 in
               Ojs.call (Ojs.get_prop_ascii x12584 "getNotifications")
                 "apply"
                 [|x12584;((let x12580 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12579 with
                             | Some x12581 ->
                                 ignore
                                   (Ojs.call x12580 "push"
                                      [|(GetNotificationOptions.t_to_js
                                           x12581)|])
                             | None -> ());
                            x12580))|])
    let (showNotification :
      'tags this ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x12591 : 'tags this) ->
        fun ~title:(x12587 : string) ->
          fun ?options:(x12588 : NotificationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x12593 = this_to_js Obj.magic x12591 in
                 Ojs.call (Ojs.get_prop_ascii x12593 "showNotification")
                   "apply"
                   [|x12593;((let x12589 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12589 "push"
                                   [|(Ojs.string_to_js x12587)|]);
                              (match x12588 with
                               | Some x12590 ->
                                   ignore
                                     (Ojs.call x12589 "push"
                                        [|(NotificationOptions.t_to_js x12590)|])
                               | None -> ());
                              x12589))|])
    let (unregister : 'tags this -> bool Promise.t_1) =
      fun (x12595 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12595) "unregister" [||])
    let (update : 'tags this -> unit Promise.t_1) =
      fun (x12598 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12598) "update" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12610 : 'tags this) ->
        fun ~type_:(x12601 : 'K) ->
          fun ~listener:(x12602 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12603 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12612 = this_to_js Obj.magic x12610 in
                   Ojs.call (Ojs.get_prop_ascii x12612 "addEventListener")
                     "apply"
                     [|x12612;((let x12604 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12604 "push"
                                     [|(Obj.magic x12601)|]);
                                ignore
                                  (Ojs.call x12604 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12608 : Ojs.t) ->
                                             fun (x12609 : Ojs.t) ->
                                               any_to_js
                                                 (x12602
                                                    ~this:(t_of_js x12608)
                                                    ~ev:(any_of_js x12609))))|]);
                                (match x12603 with
                                 | Some x12605 ->
                                     ignore
                                       (Ojs.call x12604 "push"
                                          [|((match x12605 with
                                              | `U1 x12606 ->
                                                  Ojs.bool_to_js x12606
                                              | `U2 x12607 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12607))|])
                                 | None -> ());
                                x12604))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12620 : 'tags this) ->
        fun ~type_:(x12613 : string) ->
          fun ~listener:(x12614 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12615 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12622 = this_to_js Obj.magic x12620 in
                   Ojs.call (Ojs.get_prop_ascii x12622 "addEventListener")
                     "apply"
                     [|x12622;((let x12616 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12616 "push"
                                     [|(Ojs.string_to_js x12613)|]);
                                ignore
                                  (Ojs.call x12616 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12614)|]);
                                (match x12615 with
                                 | Some x12617 ->
                                     ignore
                                       (Ojs.call x12616 "push"
                                          [|((match x12617 with
                                              | `U1 x12618 ->
                                                  Ojs.bool_to_js x12618
                                              | `U2 x12619 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12619))|])
                                 | None -> ());
                                x12616))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12632 : 'tags this) ->
        fun ~type_:(x12623 : 'K) ->
          fun ~listener:(x12624 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12625 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12634 = this_to_js Obj.magic x12632 in
                   Ojs.call (Ojs.get_prop_ascii x12634 "removeEventListener")
                     "apply"
                     [|x12634;((let x12626 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12626 "push"
                                     [|(Obj.magic x12623)|]);
                                ignore
                                  (Ojs.call x12626 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12630 : Ojs.t) ->
                                             fun (x12631 : Ojs.t) ->
                                               any_to_js
                                                 (x12624
                                                    ~this:(t_of_js x12630)
                                                    ~ev:(any_of_js x12631))))|]);
                                (match x12625 with
                                 | Some x12627 ->
                                     ignore
                                       (Ojs.call x12626 "push"
                                          [|((match x12627 with
                                              | `U1 x12628 ->
                                                  Ojs.bool_to_js x12628
                                              | `U2 x12629 ->
                                                  EventListenerOptions.t_to_js
                                                    x12629))|])
                                 | None -> ());
                                x12626))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12642 : 'tags this) ->
        fun ~type_:(x12635 : string) ->
          fun ~listener:(x12636 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12637 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12644 = this_to_js Obj.magic x12642 in
                   Ojs.call (Ojs.get_prop_ascii x12644 "removeEventListener")
                     "apply"
                     [|x12644;((let x12638 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12638 "push"
                                     [|(Ojs.string_to_js x12635)|]);
                                ignore
                                  (Ojs.call x12638 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12636)|]);
                                (match x12637 with
                                 | Some x12639 ->
                                     ignore
                                       (Ojs.call x12638 "push"
                                          [|((match x12639 with
                                              | `U1 x12640 ->
                                                  Ojs.bool_to_js x12640
                                              | `U2 x12641 ->
                                                  EventListenerOptions.t_to_js
                                                    x12641))|])
                                 | None -> ());
                                x12638))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration") 
             [||])
  end
module DocumentVisibilityState =
  struct
    type t = [ `L_s211_visible  | `L_s85_hidden ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12646 : Ojs.t) ->
        let x12647 = x12646 in
        match Ojs.string_of_js x12647 with
        | "visible" -> `L_s211_visible
        | "hidden" -> `L_s85_hidden
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12645 : [ `L_s211_visible  | `L_s85_hidden ]) ->
        match x12645 with
        | `L_s211_visible -> Ojs.string_to_js "visible"
        | `L_s85_hidden -> Ojs.string_to_js "hidden"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12649 : Ojs.t) -> t_of_js x12649
    and t_0_to_js : t_0 -> Ojs.t = fun (x12648 : t) -> t_to_js x12648
  end
module WindowClient =
  struct
    type t = [ `Client  | `WindowClient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12651 : Ojs.t) -> t_of_js x12651
    and t_0_to_js : t_0 -> Ojs.t = fun (x12650 : t) -> t_to_js x12650
    type tags = [ `Client  | `WindowClient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WindowClient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12654 : Ojs.t) -> intf_of_js __tags_of_js x12654
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12652 : __tags intf) -> intf_to_js __tags_to_js x12652
    let (get_focused : 'tags this -> bool) =
      fun (x12656 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12656) "focused")
    let (get_visibilityState : 'tags this -> DocumentVisibilityState.t) =
      fun (x12658 : 'tags this) ->
        DocumentVisibilityState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12658) "visibilityState")
    let (focus : 'tags this -> t Promise.t_1) =
      fun (x12660 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x12660) "focus" [||])
    let (navigate :
      'tags this ->
        url:[ `U1 of string  | `U2 of URL.t ] -> t option Promise.t_1)
      =
      fun (x12666 : 'tags this) ->
        fun ~url:(x12663 : [ `U1 of string  | `U2 of URL.t ]) ->
          Promise.t_1_of_js
            (fun (x12668 : Ojs.t) -> Ojs.option_of_js t_of_js x12668)
            (Ojs.call (this_to_js Obj.magic x12666) "navigate"
               [|((match x12663 with
                   | `U1 x12664 -> Ojs.string_to_js x12664
                   | `U2 x12665 -> URL.t_to_js x12665))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WindowClient")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WindowClient") [||])
  end
module ClientQueryOptions =
  struct
    type t = [ `ClientQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12671 : Ojs.t) -> t_of_js x12671
    and t_0_to_js : t_0 -> Ojs.t = fun (x12670 : t) -> t_to_js x12670
    type tags = [ `ClientQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12674 : Ojs.t) -> intf_of_js __tags_of_js x12674
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12672 : __tags intf) -> intf_to_js __tags_to_js x12672
    let (get_includeUncontrolled : 'tags this -> bool) =
      fun (x12676 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12676)
             "includeUncontrolled")
    let (set_includeUncontrolled : 'tags this -> bool -> unit) =
      fun (x12678 : 'tags this) ->
        fun (x12679 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12678)
            "includeUncontrolled" (Ojs.bool_to_js x12679)
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x12681 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12681) "type")
    let (set_type : 'tags this -> ClientTypes.t -> unit) =
      fun (x12683 : 'tags this) ->
        fun (x12684 : ClientTypes.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12683) "type"
            (ClientTypes.t_to_js x12684)
    let (create :
      includeUncontrolled:bool -> type_:ClientTypes.t -> unit -> t) =
      fun ~includeUncontrolled:(x12686 : bool) ->
        fun ~type_:(x12687 : ClientTypes.t) ->
          fun () ->
            let x12688 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x12688 "includeUncontrolled"
              (Ojs.bool_to_js x12686);
            Ojs.set_prop_ascii x12688 "type" (ClientTypes.t_to_js x12687);
            t_of_js x12688
    let cast_from = Obj.magic
  end
module Clients =
  struct
    type t = [ `Clients ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12690 : Ojs.t) -> t_of_js x12690
    and t_0_to_js : t_0 -> Ojs.t = fun (x12689 : t) -> t_to_js x12689
    type tags = [ `Clients ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12693 : Ojs.t) -> intf_of_js __tags_of_js x12693
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12691 : __tags intf) -> intf_to_js __tags_to_js x12691
    let (claim : 'tags this -> unit Promise.t_1) =
      fun (x12695 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12695) "claim" [||])
    let (get_ : 'tags this -> id:string -> Client.t option Promise.t_1) =
      fun (x12699 : 'tags this) ->
        fun ~id:(x12698 : string) ->
          Promise.t_1_of_js
            (fun (x12701 : Ojs.t) -> Ojs.option_of_js Client.t_of_js x12701)
            (Ojs.call (this_to_js Obj.magic x12699) "get"
               [|(Ojs.string_to_js x12698)|])
    let (matchAll :
      'tags this -> ?options:'T -> unit -> any list Promise.t_1) =
      fun (x12706 : 'tags this) ->
        fun ?options:(x12703 : 'T option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12709 : Ojs.t) -> Ojs.list_of_js any_of_js x12709)
              (let x12708 = this_to_js Obj.magic x12706 in
               Ojs.call (Ojs.get_prop_ascii x12708 "matchAll") "apply"
                 [|x12708;((let x12704 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12703 with
                             | Some x12705 ->
                                 ignore
                                   (Ojs.call x12704 "push"
                                      [|(Obj.magic x12705)|])
                             | None -> ());
                            x12704))|])
    let (openWindow :
      'tags this ->
        url:[ `U1 of string  | `U2 of URL.t ] ->
          WindowClient.t option Promise.t_1)
      =
      fun (x12714 : 'tags this) ->
        fun ~url:(x12711 : [ `U1 of string  | `U2 of URL.t ]) ->
          Promise.t_1_of_js
            (fun (x12716 : Ojs.t) ->
               Ojs.option_of_js WindowClient.t_of_js x12716)
            (Ojs.call (this_to_js Obj.magic x12714) "openWindow"
               [|((match x12711 with
                   | `U1 x12712 -> Ojs.string_to_js x12712
                   | `U2 x12713 -> URL.t_to_js x12713))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Clients")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Clients") [||])
  end
module ServiceWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12719 : Ojs.t) -> t_of_js x12719
    and t_0_to_js : t_0 -> Ojs.t = fun (x12718 : t) -> t_to_js x12718
    type tags =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12722 : Ojs.t) -> intf_of_js __tags_of_js x12722
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12720 : __tags intf) -> intf_to_js __tags_to_js x12720
    let (get_clients : 'tags this -> Clients.t) =
      fun (x12724 : 'tags this) ->
        Clients.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12724) "clients")
    let (get_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option) =
      fun (x12726 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12728 : Ojs.t) ->
             fun ~this:(x12729 : t) ->
               fun ~ev:(x12730 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x12728
                      [|(t_to_js x12729);(ExtendableEvent.t_to_js x12730)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12726) "onactivate")
    let (set_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit) =
      fun (x12731 : 'tags this) ->
        fun (x12732 : (this:t -> ev:ExtendableEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12731) "onactivate"
            (Ojs.option_to_js
               (fun (x12733 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12734 : Ojs.t) ->
                       fun (x12735 : Ojs.t) ->
                         any_to_js
                           (x12733 ~this:(t_of_js x12734)
                              ~ev:(ExtendableEvent.t_of_js x12735)))) x12732)
    let (get_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) option) =
      fun (x12737 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12739 : Ojs.t) ->
             fun ~this:(x12740 : t) ->
               fun ~ev:(x12741 : FetchEvent.t) ->
                 any_of_js
                   (Ojs.apply x12739
                      [|(t_to_js x12740);(FetchEvent.t_to_js x12741)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12737) "onfetch")
    let (set_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) option -> unit) =
      fun (x12742 : 'tags this) ->
        fun (x12743 : (this:t -> ev:FetchEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12742) "onfetch"
            (Ojs.option_to_js
               (fun (x12744 : this:t -> ev:FetchEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12745 : Ojs.t) ->
                       fun (x12746 : Ojs.t) ->
                         any_to_js
                           (x12744 ~this:(t_of_js x12745)
                              ~ev:(FetchEvent.t_of_js x12746)))) x12743)
    let (get_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option) =
      fun (x12748 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12750 : Ojs.t) ->
             fun ~this:(x12751 : t) ->
               fun ~ev:(x12752 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x12750
                      [|(t_to_js x12751);(ExtendableEvent.t_to_js x12752)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12748) "oninstall")
    let (set_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) option -> unit) =
      fun (x12753 : 'tags this) ->
        fun (x12754 : (this:t -> ev:ExtendableEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12753) "oninstall"
            (Ojs.option_to_js
               (fun (x12755 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12756 : Ojs.t) ->
                       fun (x12757 : Ojs.t) ->
                         any_to_js
                           (x12755 ~this:(t_of_js x12756)
                              ~ev:(ExtendableEvent.t_of_js x12757)))) x12754)
    let (get_onmessage :
      'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) option) =
      fun (x12759 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12761 : Ojs.t) ->
             fun ~this:(x12762 : t) ->
               fun ~ev:(x12763 : ExtendableMessageEvent.t) ->
                 any_of_js
                   (Ojs.apply x12761
                      [|(t_to_js x12762);(ExtendableMessageEvent.t_to_js
                                            x12763)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12759) "onmessage")
    let (set_onmessage :
      'tags this ->
        (this:t -> ev:ExtendableMessageEvent.t -> any) option -> unit)
      =
      fun (x12764 : 'tags this) ->
        fun (x12765 : (this:t -> ev:ExtendableMessageEvent.t -> any) option)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12764) "onmessage"
            (Ojs.option_to_js
               (fun (x12766 : this:t -> ev:ExtendableMessageEvent.t -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x12767 : Ojs.t) ->
                       fun (x12768 : Ojs.t) ->
                         any_to_js
                           (x12766 ~this:(t_of_js x12767)
                              ~ev:(ExtendableMessageEvent.t_of_js x12768))))
               x12765)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x12770 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12772 : Ojs.t) ->
             fun ~this:(x12773 : t) ->
               fun ~ev:(x12774 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12772
                      [|(t_to_js x12773);(MessageEvent.t_0_to_js x12774)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12770) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x12775 : 'tags this) ->
        fun (x12776 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12775) "onmessageerror"
            (Ojs.option_to_js
               (fun (x12777 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12778 : Ojs.t) ->
                       fun (x12779 : Ojs.t) ->
                         any_to_js
                           (x12777 ~this:(t_of_js x12778)
                              ~ev:(MessageEvent.t_0_of_js x12779)))) x12776)
    let (get_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option) =
      fun (x12781 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12783 : Ojs.t) ->
             fun ~this:(x12784 : t) ->
               fun ~ev:(x12785 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x12783
                      [|(t_to_js x12784);(NotificationEvent.t_to_js x12785)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12781)
             "onnotificationclick")
    let (set_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit)
      =
      fun (x12786 : 'tags this) ->
        fun (x12787 : (this:t -> ev:NotificationEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12786)
            "onnotificationclick"
            (Ojs.option_to_js
               (fun (x12788 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12789 : Ojs.t) ->
                       fun (x12790 : Ojs.t) ->
                         any_to_js
                           (x12788 ~this:(t_of_js x12789)
                              ~ev:(NotificationEvent.t_of_js x12790))))
               x12787)
    let (get_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option) =
      fun (x12792 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12794 : Ojs.t) ->
             fun ~this:(x12795 : t) ->
               fun ~ev:(x12796 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x12794
                      [|(t_to_js x12795);(NotificationEvent.t_to_js x12796)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12792)
             "onnotificationclose")
    let (set_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) option -> unit)
      =
      fun (x12797 : 'tags this) ->
        fun (x12798 : (this:t -> ev:NotificationEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12797)
            "onnotificationclose"
            (Ojs.option_to_js
               (fun (x12799 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12800 : Ojs.t) ->
                       fun (x12801 : Ojs.t) ->
                         any_to_js
                           (x12799 ~this:(t_of_js x12800)
                              ~ev:(NotificationEvent.t_of_js x12801))))
               x12798)
    let (get_onpush : 'tags this -> (this:t -> ev:PushEvent.t -> any) option)
      =
      fun (x12803 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12805 : Ojs.t) ->
             fun ~this:(x12806 : t) ->
               fun ~ev:(x12807 : PushEvent.t) ->
                 any_of_js
                   (Ojs.apply x12805
                      [|(t_to_js x12806);(PushEvent.t_to_js x12807)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12803) "onpush")
    let (set_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) option -> unit) =
      fun (x12808 : 'tags this) ->
        fun (x12809 : (this:t -> ev:PushEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12808) "onpush"
            (Ojs.option_to_js
               (fun (x12810 : this:t -> ev:PushEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12811 : Ojs.t) ->
                       fun (x12812 : Ojs.t) ->
                         any_to_js
                           (x12810 ~this:(t_of_js x12811)
                              ~ev:(PushEvent.t_of_js x12812)))) x12809)
    let (get_registration : 'tags this -> ServiceWorkerRegistration.t) =
      fun (x12814 : 'tags this) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12814) "registration")
    let (skipWaiting : 'tags this -> unit Promise.t_1) =
      fun (x12816 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12816) "skipWaiting" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12828 : 'tags this) ->
        fun ~type_:(x12819 : 'K) ->
          fun ~listener:(x12820 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12821 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12830 = this_to_js Obj.magic x12828 in
                   Ojs.call (Ojs.get_prop_ascii x12830 "addEventListener")
                     "apply"
                     [|x12830;((let x12822 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12822 "push"
                                     [|(Obj.magic x12819)|]);
                                ignore
                                  (Ojs.call x12822 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12826 : Ojs.t) ->
                                             fun (x12827 : Ojs.t) ->
                                               any_to_js
                                                 (x12820
                                                    ~this:(t_of_js x12826)
                                                    ~ev:(any_of_js x12827))))|]);
                                (match x12821 with
                                 | Some x12823 ->
                                     ignore
                                       (Ojs.call x12822 "push"
                                          [|((match x12823 with
                                              | `U1 x12824 ->
                                                  Ojs.bool_to_js x12824
                                              | `U2 x12825 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12825))|])
                                 | None -> ());
                                x12822))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12838 : 'tags this) ->
        fun ~type_:(x12831 : string) ->
          fun ~listener:(x12832 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12833 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12840 = this_to_js Obj.magic x12838 in
                   Ojs.call (Ojs.get_prop_ascii x12840 "addEventListener")
                     "apply"
                     [|x12840;((let x12834 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12834 "push"
                                     [|(Ojs.string_to_js x12831)|]);
                                ignore
                                  (Ojs.call x12834 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12832)|]);
                                (match x12833 with
                                 | Some x12835 ->
                                     ignore
                                       (Ojs.call x12834 "push"
                                          [|((match x12835 with
                                              | `U1 x12836 ->
                                                  Ojs.bool_to_js x12836
                                              | `U2 x12837 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x12837))|])
                                 | None -> ());
                                x12834))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12850 : 'tags this) ->
        fun ~type_:(x12841 : 'K) ->
          fun ~listener:(x12842 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12843 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12852 = this_to_js Obj.magic x12850 in
                   Ojs.call (Ojs.get_prop_ascii x12852 "removeEventListener")
                     "apply"
                     [|x12852;((let x12844 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12844 "push"
                                     [|(Obj.magic x12841)|]);
                                ignore
                                  (Ojs.call x12844 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12848 : Ojs.t) ->
                                             fun (x12849 : Ojs.t) ->
                                               any_to_js
                                                 (x12842
                                                    ~this:(t_of_js x12848)
                                                    ~ev:(any_of_js x12849))))|]);
                                (match x12843 with
                                 | Some x12845 ->
                                     ignore
                                       (Ojs.call x12844 "push"
                                          [|((match x12845 with
                                              | `U1 x12846 ->
                                                  Ojs.bool_to_js x12846
                                              | `U2 x12847 ->
                                                  EventListenerOptions.t_to_js
                                                    x12847))|])
                                 | None -> ());
                                x12844))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x12860 : 'tags this) ->
        fun ~type_:(x12853 : string) ->
          fun ~listener:(x12854 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12855 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x12862 = this_to_js Obj.magic x12860 in
                   Ojs.call (Ojs.get_prop_ascii x12862 "removeEventListener")
                     "apply"
                     [|x12862;((let x12856 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12856 "push"
                                     [|(Ojs.string_to_js x12853)|]);
                                ignore
                                  (Ojs.call x12856 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12854)|]);
                                (match x12855 with
                                 | Some x12857 ->
                                     ignore
                                       (Ojs.call x12856 "push"
                                          [|((match x12857 with
                                              | `U1 x12858 ->
                                                  Ojs.bool_to_js x12858
                                              | `U2 x12859 ->
                                                  EventListenerOptions.t_to_js
                                                    x12859))|])
                                 | None -> ());
                                x12856))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12864 : Ojs.t) -> t_of_js x12864
    and t_0_to_js : t_0 -> Ojs.t = fun (x12863 : t) -> t_to_js x12863
    type tags = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12867 : Ojs.t) -> intf_of_js __tags_of_js x12867
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12865 : __tags intf) -> intf_to_js __tags_to_js x12865
    let (get_statechange : 'tags this -> Event.t) =
      fun (x12869 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12869) "statechange")
    let (set_statechange : 'tags this -> Event.t -> unit) =
      fun (x12871 : 'tags this) ->
        fun (x12872 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12871) "statechange"
            (Event.t_to_js x12872)
    let (create : statechange:Event.t -> unit -> t) =
      fun ~statechange:(x12874 : Event.t) ->
        fun () ->
          let x12875 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12875 "statechange" (Event.t_to_js x12874);
          t_of_js x12875
    let cast_from = Obj.magic
  end
module ServiceWorkerContainerEventMap =
  struct
    type t = [ `ServiceWorkerContainerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12877 : Ojs.t) -> t_of_js x12877
    and t_0_to_js : t_0 -> Ojs.t = fun (x12876 : t) -> t_to_js x12876
    type tags = [ `ServiceWorkerContainerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12880 : Ojs.t) -> intf_of_js __tags_of_js x12880
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12878 : __tags intf) -> intf_to_js __tags_to_js x12878
    let (get_controllerchange : 'tags this -> Event.t) =
      fun (x12882 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12882)
             "controllerchange")
    let (set_controllerchange : 'tags this -> Event.t -> unit) =
      fun (x12884 : 'tags this) ->
        fun (x12885 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12884) "controllerchange"
            (Event.t_to_js x12885)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x12887 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12887) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12889 : 'tags this) ->
        fun (x12890 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12889) "message"
            (MessageEvent.t_0_to_js x12890)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x12892 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12892) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12894 : 'tags this) ->
        fun (x12895 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12894) "messageerror"
            (MessageEvent.t_0_to_js x12895)
    let (create :
      controllerchange:Event.t ->
        message:MessageEvent.t_0 ->
          messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~controllerchange:(x12897 : Event.t) ->
        fun ~message:(x12898 : MessageEvent.t_0) ->
          fun ~messageerror:(x12899 : MessageEvent.t_0) ->
            fun () ->
              let x12900 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12900 "controllerchange"
                (Event.t_to_js x12897);
              Ojs.set_prop_ascii x12900 "message"
                (MessageEvent.t_0_to_js x12898);
              Ojs.set_prop_ascii x12900 "messageerror"
                (MessageEvent.t_0_to_js x12899);
              t_of_js x12900
    let cast_from = Obj.magic
  end
module RegistrationOptions =
  struct
    type t = [ `RegistrationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12902 : Ojs.t) -> t_of_js x12902
    and t_0_to_js : t_0 -> Ojs.t = fun (x12901 : t) -> t_to_js x12901
    type tags = [ `RegistrationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12905 : Ojs.t) -> intf_of_js __tags_of_js x12905
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12903 : __tags intf) -> intf_to_js __tags_to_js x12903
    let (get_scope : 'tags this -> string) =
      fun (x12907 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12907) "scope")
    let (set_scope : 'tags this -> string -> unit) =
      fun (x12909 : 'tags this) ->
        fun (x12910 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12909) "scope"
            (Ojs.string_to_js x12910)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x12912 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12912) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x12914 : 'tags this) ->
        fun (x12915 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12914) "type"
            (WorkerType.t_to_js x12915)
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x12917 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12917) "updateViaCache")
    let (set_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t -> unit) =
      fun (x12919 : 'tags this) ->
        fun (x12920 : ServiceWorkerUpdateViaCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12919) "updateViaCache"
            (ServiceWorkerUpdateViaCache.t_to_js x12920)
    let (create :
      scope:string ->
        type_:WorkerType.t ->
          updateViaCache:ServiceWorkerUpdateViaCache.t -> unit -> t)
      =
      fun ~scope:(x12922 : string) ->
        fun ~type_:(x12923 : WorkerType.t) ->
          fun ~updateViaCache:(x12924 : ServiceWorkerUpdateViaCache.t) ->
            fun () ->
              let x12925 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12925 "scope" (Ojs.string_to_js x12922);
              Ojs.set_prop_ascii x12925 "type" (WorkerType.t_to_js x12923);
              Ojs.set_prop_ascii x12925 "updateViaCache"
                (ServiceWorkerUpdateViaCache.t_to_js x12924);
              t_of_js x12925
    let cast_from = Obj.magic
  end
module ServiceWorkerContainer =
  struct
    type t = [ `EventTarget  | `ServiceWorkerContainer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12927 : Ojs.t) -> t_of_js x12927
    and t_0_to_js : t_0 -> Ojs.t = fun (x12926 : t) -> t_to_js x12926
    type tags = [ `EventTarget  | `ServiceWorkerContainer ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x12930 : Ojs.t) -> intf_of_js __tags_of_js x12930
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x12928 : __tags intf) -> intf_to_js __tags_to_js x12928
    let (get_controller : 'tags this -> ServiceWorker.t option) =
      fun (x12932 : 'tags this) ->
        Ojs.option_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12932) "controller")
    let (get_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x12935 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12937 : Ojs.t) ->
             fun ~this:(x12938 : t) ->
               fun ~ev:(x12939 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12937
                      [|(t_to_js x12938);(Event.t_to_js x12939)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12935)
             "oncontrollerchange")
    let (set_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x12940 : 'tags this) ->
        fun (x12941 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12940)
            "oncontrollerchange"
            (Ojs.option_to_js
               (fun (x12942 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12943 : Ojs.t) ->
                       fun (x12944 : Ojs.t) ->
                         any_to_js
                           (x12942 ~this:(t_of_js x12943)
                              ~ev:(Event.t_of_js x12944)))) x12941)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x12946 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12948 : Ojs.t) ->
             fun ~this:(x12949 : t) ->
               fun ~ev:(x12950 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12948
                      [|(t_to_js x12949);(MessageEvent.t_0_to_js x12950)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12946) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x12951 : 'tags this) ->
        fun (x12952 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12951) "onmessage"
            (Ojs.option_to_js
               (fun (x12953 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12954 : Ojs.t) ->
                       fun (x12955 : Ojs.t) ->
                         any_to_js
                           (x12953 ~this:(t_of_js x12954)
                              ~ev:(MessageEvent.t_0_of_js x12955)))) x12952)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x12957 : 'tags this) ->
        Ojs.option_of_js
          (fun (x12959 : Ojs.t) ->
             fun ~this:(x12960 : t) ->
               fun ~ev:(x12961 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12959
                      [|(t_to_js x12960);(MessageEvent.t_0_to_js x12961)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12957) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x12962 : 'tags this) ->
        fun (x12963 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12962) "onmessageerror"
            (Ojs.option_to_js
               (fun (x12964 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12965 : Ojs.t) ->
                       fun (x12966 : Ojs.t) ->
                         any_to_js
                           (x12964 ~this:(t_of_js x12965)
                              ~ev:(MessageEvent.t_0_of_js x12966)))) x12963)
    let (get_ready : 'tags this -> ServiceWorkerRegistration.t Promise.t_1) =
      fun (x12968 : 'tags this) ->
        Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12968) "ready")
    let (getRegistration :
      'tags this ->
        ?clientURL:[ `U1 of string  | `U2 of URL.t ] ->
          unit -> ServiceWorkerRegistration.t option Promise.t_1)
      =
      fun (x12976 : 'tags this) ->
        fun ?clientURL:(x12971 : [ `U1 of string  | `U2 of URL.t ] option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12979 : Ojs.t) ->
                 Ojs.option_of_js ServiceWorkerRegistration.t_of_js x12979)
              (let x12978 = this_to_js Obj.magic x12976 in
               Ojs.call (Ojs.get_prop_ascii x12978 "getRegistration") "apply"
                 [|x12978;((let x12972 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12971 with
                             | Some x12973 ->
                                 ignore
                                   (Ojs.call x12972 "push"
                                      [|((match x12973 with
                                          | `U1 x12974 ->
                                              Ojs.string_to_js x12974
                                          | `U2 x12975 -> URL.t_to_js x12975))|])
                             | None -> ());
                            x12972))|])
    let (getRegistrations :
      'tags this -> ServiceWorkerRegistration.t list Promise.t_1) =
      fun (x12981 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x12983 : Ojs.t) ->
             Ojs.list_of_js ServiceWorkerRegistration.t_of_js x12983)
          (Ojs.call (this_to_js Obj.magic x12981) "getRegistrations" [||])
    let (register :
      'tags this ->
        scriptURL:[ `U1 of string  | `U2 of URL.t ] ->
          ?options:RegistrationOptions.t ->
            unit -> ServiceWorkerRegistration.t Promise.t_1)
      =
      fun (x12991 : 'tags this) ->
        fun ~scriptURL:(x12985 : [ `U1 of string  | `U2 of URL.t ]) ->
          fun ?options:(x12986 : RegistrationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
                (let x12993 = this_to_js Obj.magic x12991 in
                 Ojs.call (Ojs.get_prop_ascii x12993 "register") "apply"
                   [|x12993;((let x12987 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12987 "push"
                                   [|((match x12985 with
                                       | `U1 x12989 ->
                                           Ojs.string_to_js x12989
                                       | `U2 x12990 -> URL.t_to_js x12990))|]);
                              (match x12986 with
                               | Some x12988 ->
                                   ignore
                                     (Ojs.call x12987 "push"
                                        [|(RegistrationOptions.t_to_js x12988)|])
                               | None -> ());
                              x12987))|])
    let (startMessages : 'tags this -> unit) =
      fun (x12995 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12995) "startMessages" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13006 : 'tags this) ->
        fun ~type_:(x12997 : 'K) ->
          fun ~listener:(x12998 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12999 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13008 = this_to_js Obj.magic x13006 in
                   Ojs.call (Ojs.get_prop_ascii x13008 "addEventListener")
                     "apply"
                     [|x13008;((let x13000 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13000 "push"
                                     [|(Obj.magic x12997)|]);
                                ignore
                                  (Ojs.call x13000 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13004 : Ojs.t) ->
                                             fun (x13005 : Ojs.t) ->
                                               any_to_js
                                                 (x12998
                                                    ~this:(t_of_js x13004)
                                                    ~ev:(any_of_js x13005))))|]);
                                (match x12999 with
                                 | Some x13001 ->
                                     ignore
                                       (Ojs.call x13000 "push"
                                          [|((match x13001 with
                                              | `U1 x13002 ->
                                                  Ojs.bool_to_js x13002
                                              | `U2 x13003 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13003))|])
                                 | None -> ());
                                x13000))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13016 : 'tags this) ->
        fun ~type_:(x13009 : string) ->
          fun ~listener:(x13010 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13011 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13018 = this_to_js Obj.magic x13016 in
                   Ojs.call (Ojs.get_prop_ascii x13018 "addEventListener")
                     "apply"
                     [|x13018;((let x13012 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13012 "push"
                                     [|(Ojs.string_to_js x13009)|]);
                                ignore
                                  (Ojs.call x13012 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13010)|]);
                                (match x13011 with
                                 | Some x13013 ->
                                     ignore
                                       (Ojs.call x13012 "push"
                                          [|((match x13013 with
                                              | `U1 x13014 ->
                                                  Ojs.bool_to_js x13014
                                              | `U2 x13015 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13015))|])
                                 | None -> ());
                                x13012))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13028 : 'tags this) ->
        fun ~type_:(x13019 : 'K) ->
          fun ~listener:(x13020 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13021 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13030 = this_to_js Obj.magic x13028 in
                   Ojs.call (Ojs.get_prop_ascii x13030 "removeEventListener")
                     "apply"
                     [|x13030;((let x13022 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13022 "push"
                                     [|(Obj.magic x13019)|]);
                                ignore
                                  (Ojs.call x13022 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13026 : Ojs.t) ->
                                             fun (x13027 : Ojs.t) ->
                                               any_to_js
                                                 (x13020
                                                    ~this:(t_of_js x13026)
                                                    ~ev:(any_of_js x13027))))|]);
                                (match x13021 with
                                 | Some x13023 ->
                                     ignore
                                       (Ojs.call x13022 "push"
                                          [|((match x13023 with
                                              | `U1 x13024 ->
                                                  Ojs.bool_to_js x13024
                                              | `U2 x13025 ->
                                                  EventListenerOptions.t_to_js
                                                    x13025))|])
                                 | None -> ());
                                x13022))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13038 : 'tags this) ->
        fun ~type_:(x13031 : string) ->
          fun ~listener:(x13032 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13033 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13040 = this_to_js Obj.magic x13038 in
                   Ojs.call (Ojs.get_prop_ascii x13040 "removeEventListener")
                     "apply"
                     [|x13040;((let x13034 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13034 "push"
                                     [|(Ojs.string_to_js x13031)|]);
                                ignore
                                  (Ojs.call x13034 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13032)|]);
                                (match x13033 with
                                 | Some x13035 ->
                                     ignore
                                       (Ojs.call x13034 "push"
                                          [|((match x13035 with
                                              | `U1 x13036 ->
                                                  Ojs.bool_to_js x13036
                                              | `U2 x13037 ->
                                                  EventListenerOptions.t_to_js
                                                    x13037))|])
                                 | None -> ());
                                x13034))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer") 
             [||])
  end
module SecurityPolicyViolationEventDisposition =
  struct
    type t = [ `L_s172_report  | `L_s67_enforce ]
    let rec t_of_js : Ojs.t -> t =
      fun (x13042 : Ojs.t) ->
        let x13043 = x13042 in
        match Ojs.string_of_js x13043 with
        | "report" -> `L_s172_report
        | "enforce" -> `L_s67_enforce
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x13041 : [ `L_s172_report  | `L_s67_enforce ]) ->
        match x13041 with
        | `L_s172_report -> Ojs.string_to_js "report"
        | `L_s67_enforce -> Ojs.string_to_js "enforce"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13045 : Ojs.t) -> t_of_js x13045
    and t_0_to_js : t_0 -> Ojs.t = fun (x13044 : t) -> t_to_js x13044
  end
module SecurityPolicyViolationEventInit =
  struct
    type t = [ `EventInit  | `SecurityPolicyViolationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13047 : Ojs.t) -> t_of_js x13047
    and t_0_to_js : t_0 -> Ojs.t = fun (x13046 : t) -> t_to_js x13046
    type tags = [ `EventInit  | `SecurityPolicyViolationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13050 : Ojs.t) -> intf_of_js __tags_of_js x13050
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13048 : __tags intf) -> intf_to_js __tags_to_js x13048
    let (get_blockedURI : 'tags this -> string) =
      fun (x13052 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13052) "blockedURI")
    let (set_blockedURI : 'tags this -> string -> unit) =
      fun (x13054 : 'tags this) ->
        fun (x13055 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13054) "blockedURI"
            (Ojs.string_to_js x13055)
    let (get_columnNumber : 'tags this -> float) =
      fun (x13057 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13057) "columnNumber")
    let (set_columnNumber : 'tags this -> float -> unit) =
      fun (x13059 : 'tags this) ->
        fun (x13060 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13059) "columnNumber"
            (Ojs.float_to_js x13060)
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x13062 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13062) "disposition")
    let (set_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t -> unit) =
      fun (x13064 : 'tags this) ->
        fun (x13065 : SecurityPolicyViolationEventDisposition.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13064) "disposition"
            (SecurityPolicyViolationEventDisposition.t_to_js x13065)
    let (get_documentURI : 'tags this -> string) =
      fun (x13067 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13067) "documentURI")
    let (set_documentURI : 'tags this -> string -> unit) =
      fun (x13069 : 'tags this) ->
        fun (x13070 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13069) "documentURI"
            (Ojs.string_to_js x13070)
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x13072 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13072)
             "effectiveDirective")
    let (set_effectiveDirective : 'tags this -> string -> unit) =
      fun (x13074 : 'tags this) ->
        fun (x13075 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13074)
            "effectiveDirective" (Ojs.string_to_js x13075)
    let (get_lineNumber : 'tags this -> float) =
      fun (x13077 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13077) "lineNumber")
    let (set_lineNumber : 'tags this -> float -> unit) =
      fun (x13079 : 'tags this) ->
        fun (x13080 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13079) "lineNumber"
            (Ojs.float_to_js x13080)
    let (get_originalPolicy : 'tags this -> string) =
      fun (x13082 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13082) "originalPolicy")
    let (set_originalPolicy : 'tags this -> string -> unit) =
      fun (x13084 : 'tags this) ->
        fun (x13085 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13084) "originalPolicy"
            (Ojs.string_to_js x13085)
    let (get_referrer : 'tags this -> string) =
      fun (x13087 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13087) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x13089 : 'tags this) ->
        fun (x13090 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13089) "referrer"
            (Ojs.string_to_js x13090)
    let (get_sample : 'tags this -> string) =
      fun (x13092 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13092) "sample")
    let (set_sample : 'tags this -> string -> unit) =
      fun (x13094 : 'tags this) ->
        fun (x13095 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13094) "sample"
            (Ojs.string_to_js x13095)
    let (get_sourceFile : 'tags this -> string) =
      fun (x13097 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13097) "sourceFile")
    let (set_sourceFile : 'tags this -> string -> unit) =
      fun (x13099 : 'tags this) ->
        fun (x13100 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13099) "sourceFile"
            (Ojs.string_to_js x13100)
    let (get_statusCode : 'tags this -> float) =
      fun (x13102 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13102) "statusCode")
    let (set_statusCode : 'tags this -> float -> unit) =
      fun (x13104 : 'tags this) ->
        fun (x13105 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13104) "statusCode"
            (Ojs.float_to_js x13105)
    let (get_violatedDirective : 'tags this -> string) =
      fun (x13107 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13107)
             "violatedDirective")
    let (set_violatedDirective : 'tags this -> string -> unit) =
      fun (x13109 : 'tags this) ->
        fun (x13110 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13109)
            "violatedDirective" (Ojs.string_to_js x13110)
    let (create :
      blockedURI:string ->
        columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                lineNumber:float ->
                  originalPolicy:string ->
                    referrer:string ->
                      sample:string ->
                        sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ~blockedURI:(x13112 : string) ->
        fun ~columnNumber:(x13113 : float) ->
          fun
            ~disposition:(x13114 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x13115 : string) ->
              fun ~effectiveDirective:(x13116 : string) ->
                fun ~lineNumber:(x13117 : float) ->
                  fun ~originalPolicy:(x13118 : string) ->
                    fun ~referrer:(x13119 : string) ->
                      fun ~sample:(x13120 : string) ->
                        fun ~sourceFile:(x13121 : string) ->
                          fun ~statusCode:(x13122 : float) ->
                            fun ~violatedDirective:(x13123 : string) ->
                              fun () ->
                                let x13124 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x13124 "blockedURI"
                                  (Ojs.string_to_js x13112);
                                Ojs.set_prop_ascii x13124 "columnNumber"
                                  (Ojs.float_to_js x13113);
                                Ojs.set_prop_ascii x13124 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x13114);
                                Ojs.set_prop_ascii x13124 "documentURI"
                                  (Ojs.string_to_js x13115);
                                Ojs.set_prop_ascii x13124
                                  "effectiveDirective"
                                  (Ojs.string_to_js x13116);
                                Ojs.set_prop_ascii x13124 "lineNumber"
                                  (Ojs.float_to_js x13117);
                                Ojs.set_prop_ascii x13124 "originalPolicy"
                                  (Ojs.string_to_js x13118);
                                Ojs.set_prop_ascii x13124 "referrer"
                                  (Ojs.string_to_js x13119);
                                Ojs.set_prop_ascii x13124 "sample"
                                  (Ojs.string_to_js x13120);
                                Ojs.set_prop_ascii x13124 "sourceFile"
                                  (Ojs.string_to_js x13121);
                                Ojs.set_prop_ascii x13124 "statusCode"
                                  (Ojs.float_to_js x13122);
                                Ojs.set_prop_ascii x13124 "violatedDirective"
                                  (Ojs.string_to_js x13123);
                                t_of_js x13124
    let cast_from = Obj.magic
  end
module SecurityPolicyViolationEvent =
  struct
    type t = [ `Event  | `SecurityPolicyViolationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13126 : Ojs.t) -> t_of_js x13126
    and t_0_to_js : t_0 -> Ojs.t = fun (x13125 : t) -> t_to_js x13125
    type tags = [ `Event  | `SecurityPolicyViolationEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13129 : Ojs.t) -> intf_of_js __tags_of_js x13129
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13127 : __tags intf) -> intf_to_js __tags_to_js x13127
    let (get_blockedURI : 'tags this -> string) =
      fun (x13131 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13131) "blockedURI")
    let (get_columnNumber : 'tags this -> float) =
      fun (x13133 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13133) "columnNumber")
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x13135 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13135) "disposition")
    let (get_documentURI : 'tags this -> string) =
      fun (x13137 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13137) "documentURI")
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x13139 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13139)
             "effectiveDirective")
    let (get_lineNumber : 'tags this -> float) =
      fun (x13141 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13141) "lineNumber")
    let (get_originalPolicy : 'tags this -> string) =
      fun (x13143 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13143) "originalPolicy")
    let (get_referrer : 'tags this -> string) =
      fun (x13145 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13145) "referrer")
    let (get_sample : 'tags this -> string) =
      fun (x13147 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13147) "sample")
    let (get_sourceFile : 'tags this -> string) =
      fun (x13149 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13149) "sourceFile")
    let (get_statusCode : 'tags this -> float) =
      fun (x13151 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13151) "statusCode")
    let (get_violatedDirective : 'tags this -> string) =
      fun (x13153 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13153)
             "violatedDirective")
    let (create :
      blockedURI:string ->
        columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                lineNumber:float ->
                  originalPolicy:string ->
                    referrer:string ->
                      sample:string ->
                        sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ~blockedURI:(x13155 : string) ->
        fun ~columnNumber:(x13156 : float) ->
          fun
            ~disposition:(x13157 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x13158 : string) ->
              fun ~effectiveDirective:(x13159 : string) ->
                fun ~lineNumber:(x13160 : float) ->
                  fun ~originalPolicy:(x13161 : string) ->
                    fun ~referrer:(x13162 : string) ->
                      fun ~sample:(x13163 : string) ->
                        fun ~sourceFile:(x13164 : string) ->
                          fun ~statusCode:(x13165 : float) ->
                            fun ~violatedDirective:(x13166 : string) ->
                              fun () ->
                                let x13167 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x13167 "blockedURI"
                                  (Ojs.string_to_js x13155);
                                Ojs.set_prop_ascii x13167 "columnNumber"
                                  (Ojs.float_to_js x13156);
                                Ojs.set_prop_ascii x13167 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x13157);
                                Ojs.set_prop_ascii x13167 "documentURI"
                                  (Ojs.string_to_js x13158);
                                Ojs.set_prop_ascii x13167
                                  "effectiveDirective"
                                  (Ojs.string_to_js x13159);
                                Ojs.set_prop_ascii x13167 "lineNumber"
                                  (Ojs.float_to_js x13160);
                                Ojs.set_prop_ascii x13167 "originalPolicy"
                                  (Ojs.string_to_js x13161);
                                Ojs.set_prop_ascii x13167 "referrer"
                                  (Ojs.string_to_js x13162);
                                Ojs.set_prop_ascii x13167 "sample"
                                  (Ojs.string_to_js x13163);
                                Ojs.set_prop_ascii x13167 "sourceFile"
                                  (Ojs.string_to_js x13164);
                                Ojs.set_prop_ascii x13167 "statusCode"
                                  (Ojs.float_to_js x13165);
                                Ojs.set_prop_ascii x13167 "violatedDirective"
                                  (Ojs.string_to_js x13166);
                                t_of_js x13167
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t)
      =
      fun ~type_:(x13168 : string) ->
        fun
          ?eventInitDict:(x13169 : SecurityPolicyViolationEventInit.t option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global
                    "SecurityPolicyViolationEvent")
                 (let x13170 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13170 "push" [|(Ojs.string_to_js x13168)|]);
                  (match x13169 with
                   | Some x13171 ->
                       ignore
                         (Ojs.call x13170 "push"
                            [|(SecurityPolicyViolationEventInit.t_to_js
                                 x13171)|])
                   | None -> ());
                  x13170))
  end
module ReadableStreamReader =
  struct
    type 'T t = 'T ReadableStreamDefaultReader.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x13174 : Ojs.t) ->
            ReadableStreamDefaultReader.t_of_js __T_of_js x13174
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x13172 : __T ReadableStreamDefaultReader.t) ->
            ReadableStreamDefaultReader.t_to_js __T_to_js x13172
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x13178 : Ojs.t) -> t_of_js __T_of_js x13178
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x13176 : __T t) -> t_to_js __T_to_js x13176
  end
module PermissionStatus =
  struct
    type t = [ `EventTarget  | `PermissionStatus ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13181 : Ojs.t) -> t_of_js x13181
    and t_0_to_js : t_0 -> Ojs.t = fun (x13180 : t) -> t_to_js x13180
    type tags = [ `EventTarget  | `PermissionStatus ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13184 : Ojs.t) -> intf_of_js __tags_of_js x13184
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13182 : __tags intf) -> intf_to_js __tags_to_js x13182
    let (get_onchange : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x13186 : 'tags this) ->
        Ojs.option_of_js
          (fun (x13188 : Ojs.t) ->
             fun ~this:(x13189 : t) ->
               fun ~ev:(x13190 : Event.t) ->
                 any_of_js
                   (Ojs.apply x13188
                      [|(t_to_js x13189);(Event.t_to_js x13190)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13186) "onchange")
    let (set_onchange :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x13191 : 'tags this) ->
        fun (x13192 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13191) "onchange"
            (Ojs.option_to_js
               (fun (x13193 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13194 : Ojs.t) ->
                       fun (x13195 : Ojs.t) ->
                         any_to_js
                           (x13193 ~this:(t_of_js x13194)
                              ~ev:(Event.t_of_js x13195)))) x13192)
    let (get_state : 'tags this -> PermissionState.t) =
      fun (x13197 : 'tags this) ->
        PermissionState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13197) "state")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13208 : 'tags this) ->
        fun ~type_:(x13199 : 'K) ->
          fun ~listener:(x13200 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13201 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13210 = this_to_js Obj.magic x13208 in
                   Ojs.call (Ojs.get_prop_ascii x13210 "addEventListener")
                     "apply"
                     [|x13210;((let x13202 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13202 "push"
                                     [|(Obj.magic x13199)|]);
                                ignore
                                  (Ojs.call x13202 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13206 : Ojs.t) ->
                                             fun (x13207 : Ojs.t) ->
                                               any_to_js
                                                 (x13200
                                                    ~this:(t_of_js x13206)
                                                    ~ev:(any_of_js x13207))))|]);
                                (match x13201 with
                                 | Some x13203 ->
                                     ignore
                                       (Ojs.call x13202 "push"
                                          [|((match x13203 with
                                              | `U1 x13204 ->
                                                  Ojs.bool_to_js x13204
                                              | `U2 x13205 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13205))|])
                                 | None -> ());
                                x13202))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13218 : 'tags this) ->
        fun ~type_:(x13211 : string) ->
          fun ~listener:(x13212 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13213 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13220 = this_to_js Obj.magic x13218 in
                   Ojs.call (Ojs.get_prop_ascii x13220 "addEventListener")
                     "apply"
                     [|x13220;((let x13214 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13214 "push"
                                     [|(Ojs.string_to_js x13211)|]);
                                ignore
                                  (Ojs.call x13214 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13212)|]);
                                (match x13213 with
                                 | Some x13215 ->
                                     ignore
                                       (Ojs.call x13214 "push"
                                          [|((match x13215 with
                                              | `U1 x13216 ->
                                                  Ojs.bool_to_js x13216
                                              | `U2 x13217 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x13217))|])
                                 | None -> ());
                                x13214))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13230 : 'tags this) ->
        fun ~type_:(x13221 : 'K) ->
          fun ~listener:(x13222 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13223 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13232 = this_to_js Obj.magic x13230 in
                   Ojs.call (Ojs.get_prop_ascii x13232 "removeEventListener")
                     "apply"
                     [|x13232;((let x13224 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13224 "push"
                                     [|(Obj.magic x13221)|]);
                                ignore
                                  (Ojs.call x13224 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13228 : Ojs.t) ->
                                             fun (x13229 : Ojs.t) ->
                                               any_to_js
                                                 (x13222
                                                    ~this:(t_of_js x13228)
                                                    ~ev:(any_of_js x13229))))|]);
                                (match x13223 with
                                 | Some x13225 ->
                                     ignore
                                       (Ojs.call x13224 "push"
                                          [|((match x13225 with
                                              | `U1 x13226 ->
                                                  Ojs.bool_to_js x13226
                                              | `U2 x13227 ->
                                                  EventListenerOptions.t_to_js
                                                    x13227))|])
                                 | None -> ());
                                x13224))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x13240 : 'tags this) ->
        fun ~type_:(x13233 : string) ->
          fun ~listener:(x13234 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13235 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x13242 = this_to_js Obj.magic x13240 in
                   Ojs.call (Ojs.get_prop_ascii x13242 "removeEventListener")
                     "apply"
                     [|x13242;((let x13236 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13236 "push"
                                     [|(Ojs.string_to_js x13233)|]);
                                ignore
                                  (Ojs.call x13236 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13234)|]);
                                (match x13235 with
                                 | Some x13237 ->
                                     ignore
                                       (Ojs.call x13236 "push"
                                          [|((match x13237 with
                                              | `U1 x13238 ->
                                                  Ojs.bool_to_js x13238
                                              | `U2 x13239 ->
                                                  EventListenerOptions.t_to_js
                                                    x13239))|])
                                 | None -> ());
                                x13236))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PermissionStatus") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
             [||])
  end
module PermissionName =
  struct
    type t =
      [ `L_s133_notifications  | `L_s150_persistent_storage  | `L_s161_push 
      | `L_s176_screen_wake_lock  | `L_s217_xr_spatial_tracking 
      | `L_s82_geolocation ]
    let rec t_of_js : Ojs.t -> t =
      fun (x13244 : Ojs.t) ->
        let x13245 = x13244 in
        match Ojs.string_of_js x13245 with
        | "notifications" -> `L_s133_notifications
        | "persistent-storage" -> `L_s150_persistent_storage
        | "push" -> `L_s161_push
        | "screen-wake-lock" -> `L_s176_screen_wake_lock
        | "xr-spatial-tracking" -> `L_s217_xr_spatial_tracking
        | "geolocation" -> `L_s82_geolocation
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x13243 :
          [ `L_s133_notifications  | `L_s150_persistent_storage 
          | `L_s161_push  | `L_s176_screen_wake_lock 
          | `L_s217_xr_spatial_tracking  | `L_s82_geolocation ])
        ->
        match x13243 with
        | `L_s133_notifications -> Ojs.string_to_js "notifications"
        | `L_s150_persistent_storage -> Ojs.string_to_js "persistent-storage"
        | `L_s161_push -> Ojs.string_to_js "push"
        | `L_s176_screen_wake_lock -> Ojs.string_to_js "screen-wake-lock"
        | `L_s217_xr_spatial_tracking ->
            Ojs.string_to_js "xr-spatial-tracking"
        | `L_s82_geolocation -> Ojs.string_to_js "geolocation"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13247 : Ojs.t) -> t_of_js x13247
    and t_0_to_js : t_0 -> Ojs.t = fun (x13246 : t) -> t_to_js x13246
  end
module PermissionDescriptor =
  struct
    type t = [ `PermissionDescriptor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13249 : Ojs.t) -> t_of_js x13249
    and t_0_to_js : t_0 -> Ojs.t = fun (x13248 : t) -> t_to_js x13248
    type tags = [ `PermissionDescriptor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionDescriptor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13252 : Ojs.t) -> intf_of_js __tags_of_js x13252
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13250 : __tags intf) -> intf_to_js __tags_to_js x13250
    let (get_name : 'tags this -> PermissionName.t) =
      fun (x13254 : 'tags this) ->
        PermissionName.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13254) "name")
    let (set_name : 'tags this -> PermissionName.t -> unit) =
      fun (x13256 : 'tags this) ->
        fun (x13257 : PermissionName.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13256) "name"
            (PermissionName.t_to_js x13257)
    let (create : name:PermissionName.t -> unit -> t) =
      fun ~name:(x13259 : PermissionName.t) ->
        fun () ->
          let x13260 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13260 "name" (PermissionName.t_to_js x13259);
          t_of_js x13260
    let cast_from = Obj.magic
  end
module Permissions =
  struct
    type t = [ `Permissions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13262 : Ojs.t) -> t_of_js x13262
    and t_0_to_js : t_0 -> Ojs.t = fun (x13261 : t) -> t_to_js x13261
    type tags = [ `Permissions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13265 : Ojs.t) -> intf_of_js __tags_of_js x13265
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13263 : __tags intf) -> intf_to_js __tags_to_js x13263
    let (query :
      'tags this ->
        permissionDesc:PermissionDescriptor.t ->
          PermissionStatus.t Promise.t_1)
      =
      fun (x13268 : 'tags this) ->
        fun ~permissionDesc:(x13267 : PermissionDescriptor.t) ->
          Promise.t_1_of_js PermissionStatus.t_of_js
            (Ojs.call (this_to_js Obj.magic x13268) "query"
               [|(PermissionDescriptor.t_to_js x13267)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Permissions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Permissions") [||])
  end
module PermissionStatusEventMap =
  struct
    type t = [ `PermissionStatusEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13272 : Ojs.t) -> t_of_js x13272
    and t_0_to_js : t_0 -> Ojs.t = fun (x13271 : t) -> t_to_js x13271
    type tags = [ `PermissionStatusEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13275 : Ojs.t) -> intf_of_js __tags_of_js x13275
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13273 : __tags intf) -> intf_to_js __tags_to_js x13273
    let (get_change : 'tags this -> Event.t) =
      fun (x13277 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13277) "change")
    let (set_change : 'tags this -> Event.t -> unit) =
      fun (x13279 : 'tags this) ->
        fun (x13280 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13279) "change"
            (Event.t_to_js x13280)
    let (create : change:Event.t -> unit -> t) =
      fun ~change:(x13282 : Event.t) ->
        fun () ->
          let x13283 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13283 "change" (Event.t_to_js x13282);
          t_of_js x13283
    let cast_from = Obj.magic
  end
module PerformanceServerTiming =
  struct
    type t = [ `PerformanceServerTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13285 : Ojs.t) -> t_of_js x13285
    and t_0_to_js : t_0 -> Ojs.t = fun (x13284 : t) -> t_to_js x13284
    type tags = [ `PerformanceServerTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceServerTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13288 : Ojs.t) -> intf_of_js __tags_of_js x13288
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13286 : __tags intf) -> intf_to_js __tags_to_js x13286
    let (get_description : 'tags this -> string) =
      fun (x13290 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13290) "description")
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13292 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13292) "duration")
    let (get_name : 'tags this -> string) =
      fun (x13294 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13294) "name")
    let (toJSON : 'tags this -> any) =
      fun (x13296 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13296) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming") 
             [||])
  end
module PerformanceResourceTiming =
  struct
    type t = [ `PerformanceEntry  | `PerformanceResourceTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13299 : Ojs.t) -> t_of_js x13299
    and t_0_to_js : t_0 -> Ojs.t = fun (x13298 : t) -> t_to_js x13298
    type tags = [ `PerformanceEntry  | `PerformanceResourceTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13302 : Ojs.t) -> intf_of_js __tags_of_js x13302
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13300 : __tags intf) -> intf_to_js __tags_to_js x13300
    let (get_connectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13304 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13304) "connectEnd")
    let (get_connectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13306 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13306) "connectStart")
    let (get_decodedBodySize : 'tags this -> float) =
      fun (x13308 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13308) "decodedBodySize")
    let (get_domainLookupEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13310 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13310) "domainLookupEnd")
    let (get_domainLookupStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13312 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13312)
             "domainLookupStart")
    let (get_encodedBodySize : 'tags this -> float) =
      fun (x13314 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13314) "encodedBodySize")
    let (get_fetchStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13316 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13316) "fetchStart")
    let (get_initiatorType : 'tags this -> string) =
      fun (x13318 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13318) "initiatorType")
    let (get_nextHopProtocol : 'tags this -> string) =
      fun (x13320 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13320) "nextHopProtocol")
    let (get_redirectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13322 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13322) "redirectEnd")
    let (get_redirectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13324 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13324) "redirectStart")
    let (get_requestStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13326 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13326) "requestStart")
    let (get_responseEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13328 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13328) "responseEnd")
    let (get_responseStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13330 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13330) "responseStart")
    let (get_secureConnectionStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13332 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13332)
             "secureConnectionStart")
    let (get_serverTiming : 'tags this -> PerformanceServerTiming.t list) =
      fun (x13334 : 'tags this) ->
        Ojs.list_of_js PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13334) "serverTiming")
    let (get_transferSize : 'tags this -> float) =
      fun (x13337 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13337) "transferSize")
    let (get_workerStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x13339 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13339) "workerStart")
    let (toJSON : 'tags this -> any) =
      fun (x13341 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13341) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming") 
             [||])
  end
module PerformanceObserverInit =
  struct
    type t = [ `PerformanceObserverInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13344 : Ojs.t) -> t_of_js x13344
    and t_0_to_js : t_0 -> Ojs.t = fun (x13343 : t) -> t_to_js x13343
    type tags = [ `PerformanceObserverInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13347 : Ojs.t) -> intf_of_js __tags_of_js x13347
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13345 : __tags intf) -> intf_to_js __tags_to_js x13345
    let (get_buffered : 'tags this -> bool) =
      fun (x13349 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13349) "buffered")
    let (set_buffered : 'tags this -> bool -> unit) =
      fun (x13351 : 'tags this) ->
        fun (x13352 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13351) "buffered"
            (Ojs.bool_to_js x13352)
    let (get_entryTypes : 'tags this -> string list) =
      fun (x13354 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13354) "entryTypes")
    let (set_entryTypes : 'tags this -> string list -> unit) =
      fun (x13357 : 'tags this) ->
        fun (x13358 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13357) "entryTypes"
            (Ojs.list_to_js Ojs.string_to_js x13358)
    let (get_type : 'tags this -> string) =
      fun (x13361 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13361) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x13363 : 'tags this) ->
        fun (x13364 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13363) "type"
            (Ojs.string_to_js x13364)
    let (create :
      buffered:bool -> entryTypes:string list -> type_:string -> unit -> t) =
      fun ~buffered:(x13366 : bool) ->
        fun ~entryTypes:(x13367 : string list) ->
          fun ~type_:(x13368 : string) ->
            fun () ->
              let x13369 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13369 "buffered" (Ojs.bool_to_js x13366);
              Ojs.set_prop_ascii x13369 "entryTypes"
                (Ojs.list_to_js Ojs.string_to_js x13367);
              Ojs.set_prop_ascii x13369 "type" (Ojs.string_to_js x13368);
              t_of_js x13369
    let cast_from = Obj.magic
  end
module PerformanceObserverEntryList =
  struct
    type t = [ `PerformanceObserverEntryList ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13372 : Ojs.t) -> t_of_js x13372
    and t_0_to_js : t_0 -> Ojs.t = fun (x13371 : t) -> t_to_js x13371
    type tags = [ `PerformanceObserverEntryList ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13375 : Ojs.t) -> intf_of_js __tags_of_js x13375
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13373 : __tags intf) -> intf_to_js __tags_to_js x13373
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x13377 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x13377) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x13383 : 'tags this) ->
        fun ~name:(x13379 : string) ->
          fun ?type_:(x13380 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x13385 = this_to_js Obj.magic x13383 in
                 Ojs.call (Ojs.get_prop_ascii x13385 "getEntriesByName")
                   "apply"
                   [|x13385;((let x13381 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13381 "push"
                                   [|(Ojs.string_to_js x13379)|]);
                              (match x13380 with
                               | Some x13382 ->
                                   ignore
                                     (Ojs.call x13381 "push"
                                        [|(Ojs.string_to_js x13382)|])
                               | None -> ());
                              x13381))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x13387 : 'tags this) ->
        fun ~type_:(x13386 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x13387) "getEntriesByType"
               [|(Ojs.string_to_js x13386)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             [||])
  end
module rec
  PerformanceObserver:sig
                        type t = [ `PerformanceObserver ] intf
                        type t_0 = t
                        [@@@js.stop ]
                        type tags = [ `PerformanceObserver ]
                        type tags_0 = tags
                        [@@@js.start ]
                        [@@@js.implem
                          type tags = [ `PerformanceObserver ]
                          type tags_0 = tags]
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `PerformanceObserver ]
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val disconnect : 'tags this -> unit
                        val observe :
                          'tags this ->
                            ?options:PerformanceObserverInit.t ->
                              unit -> unit
                        val takeRecords :
                          'tags this -> PerformanceEntryList.t
                        val cast_from : 'tags this -> t
                        val prototype : unit -> t
                        val create : PerformanceObserverCallback.t -> t
                        val supportedEntryTypes : unit -> string list
                      end =
  struct
    type t = [ `PerformanceObserver ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13390 : Ojs.t) -> t_of_js x13390
    and t_0_to_js : t_0 -> Ojs.t = fun (x13389 : t) -> t_to_js x13389
    type tags = [ `PerformanceObserver ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13393 : Ojs.t) -> intf_of_js __tags_of_js x13393
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13391 : __tags intf) -> intf_to_js __tags_to_js x13391
    let (disconnect : 'tags this -> unit) =
      fun (x13395 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13395) "disconnect" [||])
    let (observe :
      'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit) =
      fun (x13400 : 'tags this) ->
        fun ?options:(x13397 : PerformanceObserverInit.t option) ->
          fun () ->
            ignore
              (let x13402 = this_to_js Obj.magic x13400 in
               Ojs.call (Ojs.get_prop_ascii x13402 "observe") "apply"
                 [|x13402;((let x13398 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13397 with
                             | Some x13399 ->
                                 ignore
                                   (Ojs.call x13398 "push"
                                      [|(PerformanceObserverInit.t_to_js
                                           x13399)|])
                             | None -> ());
                            x13398))|])
    let (takeRecords : 'tags this -> PerformanceEntryList.t) =
      fun (x13403 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x13403) "takeRecords" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "prototype")
    let (create : PerformanceObserverCallback.t -> t) =
      fun (x13405 : PerformanceObserverCallback.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             [|(PerformanceObserverCallback.t_to_js x13405)|])
    let (supportedEntryTypes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "supportedEntryTypes")
  end
 and
  PerformanceObserverCallback:sig
                                type t =
                                  [ `PerformanceObserverCallback ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `PerformanceObserverCallback ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags =
                                    [ `PerformanceObserverCallback ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `PerformanceObserverCallback ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val apply :
                                  'tags this ->
                                    entries:PerformanceObserverEntryList.t ->
                                      observer:PerformanceObserver.t -> unit
                                val cast_from : 'tags this -> t
                              end =
  struct
    type t = [ `PerformanceObserverCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13408 : Ojs.t) -> t_of_js x13408
    and t_0_to_js : t_0 -> Ojs.t = fun (x13407 : t) -> t_to_js x13407
    type tags = [ `PerformanceObserverCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13411 : Ojs.t) -> intf_of_js __tags_of_js x13411
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13409 : __tags intf) -> intf_to_js __tags_to_js x13409
    let (apply :
      'tags this ->
        entries:PerformanceObserverEntryList.t ->
          observer:PerformanceObserver.t -> unit)
      =
      fun (x13415 : 'tags this) ->
        fun ~entries:(x13413 : PerformanceObserverEntryList.t) ->
          fun ~observer:(x13414 : PerformanceObserver.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic x13415)
                 [|(PerformanceObserverEntryList.t_to_js x13413);(PerformanceObserver.t_to_js
                                                                    x13414)|])
    let cast_from = Obj.magic
  end
module PerformanceEventMap =
  struct
    type t = [ `PerformanceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13418 : Ojs.t) -> t_of_js x13418
    and t_0_to_js : t_0 -> Ojs.t = fun (x13417 : t) -> t_to_js x13417
    type tags = [ `PerformanceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13421 : Ojs.t) -> intf_of_js __tags_of_js x13421
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13419 : __tags intf) -> intf_to_js __tags_to_js x13419
    let (get_resourcetimingbufferfull : 'tags this -> Event.t) =
      fun (x13423 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13423)
             "resourcetimingbufferfull")
    let (set_resourcetimingbufferfull : 'tags this -> Event.t -> unit) =
      fun (x13425 : 'tags this) ->
        fun (x13426 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13425)
            "resourcetimingbufferfull" (Event.t_to_js x13426)
    let (create : resourcetimingbufferfull:Event.t -> unit -> t) =
      fun ~resourcetimingbufferfull:(x13428 : Event.t) ->
        fun () ->
          let x13429 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13429 "resourcetimingbufferfull"
            (Event.t_to_js x13428);
          t_of_js x13429
    let cast_from = Obj.magic
  end
module DOMMatrix2DInit =
  struct
    type t = [ `DOMMatrix2DInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13431 : Ojs.t) -> t_of_js x13431
    and t_0_to_js : t_0 -> Ojs.t = fun (x13430 : t) -> t_to_js x13430
    type tags = [ `DOMMatrix2DInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13434 : Ojs.t) -> intf_of_js __tags_of_js x13434
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13432 : __tags intf) -> intf_to_js __tags_to_js x13432
    let (get_a : 'tags this -> float) =
      fun (x13436 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13436) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x13438 : 'tags this) ->
        fun (x13439 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13438) "a"
            (Ojs.float_to_js x13439)
    let (get_b : 'tags this -> float) =
      fun (x13441 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13441) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x13443 : 'tags this) ->
        fun (x13444 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13443) "b"
            (Ojs.float_to_js x13444)
    let (get_c : 'tags this -> float) =
      fun (x13446 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13446) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x13448 : 'tags this) ->
        fun (x13449 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13448) "c"
            (Ojs.float_to_js x13449)
    let (get_d : 'tags this -> float) =
      fun (x13451 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13451) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x13453 : 'tags this) ->
        fun (x13454 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13453) "d"
            (Ojs.float_to_js x13454)
    let (get_e : 'tags this -> float) =
      fun (x13456 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13456) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x13458 : 'tags this) ->
        fun (x13459 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13458) "e"
            (Ojs.float_to_js x13459)
    let (get_f : 'tags this -> float) =
      fun (x13461 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13461) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x13463 : 'tags this) ->
        fun (x13464 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13463) "f"
            (Ojs.float_to_js x13464)
    let (get_m11 : 'tags this -> float) =
      fun (x13466 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13466) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x13468 : 'tags this) ->
        fun (x13469 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13468) "m11"
            (Ojs.float_to_js x13469)
    let (get_m12 : 'tags this -> float) =
      fun (x13471 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13471) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x13473 : 'tags this) ->
        fun (x13474 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13473) "m12"
            (Ojs.float_to_js x13474)
    let (get_m21 : 'tags this -> float) =
      fun (x13476 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13476) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x13478 : 'tags this) ->
        fun (x13479 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13478) "m21"
            (Ojs.float_to_js x13479)
    let (get_m22 : 'tags this -> float) =
      fun (x13481 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13481) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x13483 : 'tags this) ->
        fun (x13484 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13483) "m22"
            (Ojs.float_to_js x13484)
    let (get_m41 : 'tags this -> float) =
      fun (x13486 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13486) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x13488 : 'tags this) ->
        fun (x13489 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13488) "m41"
            (Ojs.float_to_js x13489)
    let (get_m42 : 'tags this -> float) =
      fun (x13491 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13491) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x13493 : 'tags this) ->
        fun (x13494 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13493) "m42"
            (Ojs.float_to_js x13494)
    let (create :
      a:float ->
        b:float ->
          c:float ->
            d:float ->
              e:float ->
                f:float ->
                  m11:float ->
                    m12:float ->
                      m21:float ->
                        m22:float -> m41:float -> m42:float -> unit -> t)
      =
      fun ~a:(x13496 : float) ->
        fun ~b:(x13497 : float) ->
          fun ~c:(x13498 : float) ->
            fun ~d:(x13499 : float) ->
              fun ~e:(x13500 : float) ->
                fun ~f:(x13501 : float) ->
                  fun ~m11:(x13502 : float) ->
                    fun ~m12:(x13503 : float) ->
                      fun ~m21:(x13504 : float) ->
                        fun ~m22:(x13505 : float) ->
                          fun ~m41:(x13506 : float) ->
                            fun ~m42:(x13507 : float) ->
                              fun () ->
                                let x13508 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x13508 "a"
                                  (Ojs.float_to_js x13496);
                                Ojs.set_prop_ascii x13508 "b"
                                  (Ojs.float_to_js x13497);
                                Ojs.set_prop_ascii x13508 "c"
                                  (Ojs.float_to_js x13498);
                                Ojs.set_prop_ascii x13508 "d"
                                  (Ojs.float_to_js x13499);
                                Ojs.set_prop_ascii x13508 "e"
                                  (Ojs.float_to_js x13500);
                                Ojs.set_prop_ascii x13508 "f"
                                  (Ojs.float_to_js x13501);
                                Ojs.set_prop_ascii x13508 "m11"
                                  (Ojs.float_to_js x13502);
                                Ojs.set_prop_ascii x13508 "m12"
                                  (Ojs.float_to_js x13503);
                                Ojs.set_prop_ascii x13508 "m21"
                                  (Ojs.float_to_js x13504);
                                Ojs.set_prop_ascii x13508 "m22"
                                  (Ojs.float_to_js x13505);
                                Ojs.set_prop_ascii x13508 "m41"
                                  (Ojs.float_to_js x13506);
                                Ojs.set_prop_ascii x13508 "m42"
                                  (Ojs.float_to_js x13507);
                                t_of_js x13508
    let cast_from = Obj.magic
  end
module CanvasPath =
  struct
    type t = [ `CanvasPath ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13510 : Ojs.t) -> t_of_js x13510
    and t_0_to_js : t_0 -> Ojs.t = fun (x13509 : t) -> t_to_js x13509
    type tags = [ `CanvasPath ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13513 : Ojs.t) -> intf_of_js __tags_of_js x13513
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13511 : __tags intf) -> intf_to_js __tags_to_js x13511
    let (arc :
      'tags this ->
        x:float ->
          y:float ->
            radius:float ->
              startAngle:float ->
                endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13523 : 'tags this) ->
        fun ~x:(x13515 : float) ->
          fun ~y:(x13516 : float) ->
            fun ~radius:(x13517 : float) ->
              fun ~startAngle:(x13518 : float) ->
                fun ~endAngle:(x13519 : float) ->
                  fun ?counterclockwise:(x13520 : bool option) ->
                    fun () ->
                      ignore
                        (let x13525 = this_to_js Obj.magic x13523 in
                         Ojs.call (Ojs.get_prop_ascii x13525 "arc") "apply"
                           [|x13525;((let x13521 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x13521 "push"
                                           [|(Ojs.float_to_js x13515)|]);
                                      ignore
                                        (Ojs.call x13521 "push"
                                           [|(Ojs.float_to_js x13516)|]);
                                      ignore
                                        (Ojs.call x13521 "push"
                                           [|(Ojs.float_to_js x13517)|]);
                                      ignore
                                        (Ojs.call x13521 "push"
                                           [|(Ojs.float_to_js x13518)|]);
                                      ignore
                                        (Ojs.call x13521 "push"
                                           [|(Ojs.float_to_js x13519)|]);
                                      (match x13520 with
                                       | Some x13522 ->
                                           ignore
                                             (Ojs.call x13521 "push"
                                                [|(Ojs.bool_to_js x13522)|])
                                       | None -> ());
                                      x13521))|])
    let (arcTo :
      'tags this ->
        x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit)
      =
      fun (x13531 : 'tags this) ->
        fun ~x1:(x13526 : float) ->
          fun ~y1:(x13527 : float) ->
            fun ~x2:(x13528 : float) ->
              fun ~y2:(x13529 : float) ->
                fun ~radius:(x13530 : float) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13531) "arcTo"
                       [|(Ojs.float_to_js x13526);(Ojs.float_to_js x13527);(
                         Ojs.float_to_js x13528);(Ojs.float_to_js x13529);(
                         Ojs.float_to_js x13530)|])
    let (bezierCurveTo :
      'tags this ->
        cp1x:float ->
          cp1y:float ->
            cp2x:float -> cp2y:float -> x:float -> y:float -> unit)
      =
      fun (x13539 : 'tags this) ->
        fun ~cp1x:(x13533 : float) ->
          fun ~cp1y:(x13534 : float) ->
            fun ~cp2x:(x13535 : float) ->
              fun ~cp2y:(x13536 : float) ->
                fun ~x:(x13537 : float) ->
                  fun ~y:(x13538 : float) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13539) "bezierCurveTo"
                         [|(Ojs.float_to_js x13533);(Ojs.float_to_js x13534);(
                           Ojs.float_to_js x13535);(Ojs.float_to_js x13536);(
                           Ojs.float_to_js x13537);(Ojs.float_to_js x13538)|])
    let (closePath : 'tags this -> unit) =
      fun (x13541 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13541) "closePath" [||])
    let (ellipse :
      'tags this ->
        x:float ->
          y:float ->
            radiusX:float ->
              radiusY:float ->
                rotation:float ->
                  startAngle:float ->
                    endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13553 : 'tags this) ->
        fun ~x:(x13543 : float) ->
          fun ~y:(x13544 : float) ->
            fun ~radiusX:(x13545 : float) ->
              fun ~radiusY:(x13546 : float) ->
                fun ~rotation:(x13547 : float) ->
                  fun ~startAngle:(x13548 : float) ->
                    fun ~endAngle:(x13549 : float) ->
                      fun ?counterclockwise:(x13550 : bool option) ->
                        fun () ->
                          ignore
                            (let x13555 = this_to_js Obj.magic x13553 in
                             Ojs.call (Ojs.get_prop_ascii x13555 "ellipse")
                               "apply"
                               [|x13555;((let x13551 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x13551 "push"
                                               [|(Ojs.float_to_js x13543)|]);
                                          ignore
                                            (Ojs.call x13551 "push"
                                               [|(Ojs.float_to_js x13544)|]);
                                          ignore
                                            (Ojs.call x13551 "push"
                                               [|(Ojs.float_to_js x13545)|]);
                                          ignore
                                            (Ojs.call x13551 "push"
                                               [|(Ojs.float_to_js x13546)|]);
                                          ignore
                                            (Ojs.call x13551 "push"
                                               [|(Ojs.float_to_js x13547)|]);
                                          ignore
                                            (Ojs.call x13551 "push"
                                               [|(Ojs.float_to_js x13548)|]);
                                          ignore
                                            (Ojs.call x13551 "push"
                                               [|(Ojs.float_to_js x13549)|]);
                                          (match x13550 with
                                           | Some x13552 ->
                                               ignore
                                                 (Ojs.call x13551 "push"
                                                    [|(Ojs.bool_to_js x13552)|])
                                           | None -> ());
                                          x13551))|])
    let (lineTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13558 : 'tags this) ->
        fun ~x:(x13556 : float) ->
          fun ~y:(x13557 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13558) "lineTo"
                 [|(Ojs.float_to_js x13556);(Ojs.float_to_js x13557)|])
    let (moveTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13562 : 'tags this) ->
        fun ~x:(x13560 : float) ->
          fun ~y:(x13561 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13562) "moveTo"
                 [|(Ojs.float_to_js x13560);(Ojs.float_to_js x13561)|])
    let (quadraticCurveTo :
      'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit) =
      fun (x13568 : 'tags this) ->
        fun ~cpx:(x13564 : float) ->
          fun ~cpy:(x13565 : float) ->
            fun ~x:(x13566 : float) ->
              fun ~y:(x13567 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13568) "quadraticCurveTo"
                     [|(Ojs.float_to_js x13564);(Ojs.float_to_js x13565);(
                       Ojs.float_to_js x13566);(Ojs.float_to_js x13567)|])
    let (rect :
      'tags this -> x:float -> y:float -> w:float -> h:float -> unit) =
      fun (x13574 : 'tags this) ->
        fun ~x:(x13570 : float) ->
          fun ~y:(x13571 : float) ->
            fun ~w:(x13572 : float) ->
              fun ~h:(x13573 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13574) "rect"
                     [|(Ojs.float_to_js x13570);(Ojs.float_to_js x13571);(
                       Ojs.float_to_js x13572);(Ojs.float_to_js x13573)|])
    let cast_from = Obj.magic
  end
module Path2D =
  struct
    type t = [ `CanvasPath  | `Path2D ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13577 : Ojs.t) -> t_of_js x13577
    and t_0_to_js : t_0 -> Ojs.t = fun (x13576 : t) -> t_to_js x13576
    type tags = [ `CanvasPath  | `Path2D ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13580 : Ojs.t) -> intf_of_js __tags_of_js x13580
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13578 : __tags intf) -> intf_to_js __tags_to_js x13578
    let (addPath :
      'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x13586 : 'tags this) ->
        fun ~path:(x13582 : t) ->
          fun ?transform:(x13583 : DOMMatrix2DInit.t option) ->
            fun () ->
              ignore
                (let x13588 = this_to_js Obj.magic x13586 in
                 Ojs.call (Ojs.get_prop_ascii x13588 "addPath") "apply"
                   [|x13588;((let x13584 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13584 "push" [|(t_to_js x13582)|]);
                              (match x13583 with
                               | Some x13585 ->
                                   ignore
                                     (Ojs.call x13584 "push"
                                        [|(DOMMatrix2DInit.t_to_js x13585)|])
                               | None -> ());
                              x13584))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Path2D")
             "prototype")
    let (create : ?path:[ `U1 of t  | `U2 of string ] -> unit -> t) =
      fun ?path:(x13589 : [ `U1 of t  | `U2 of string ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Path2D")
               (let x13590 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x13589 with
                 | Some x13591 ->
                     ignore
                       (Ojs.call x13590 "push"
                          [|((match x13591 with
                              | `U1 x13592 -> t_to_js x13592
                              | `U2 x13593 -> Ojs.string_to_js x13593))|])
                 | None -> ());
                x13590))
  end
module OnErrorEventHandlerNonNull =
  struct
    type t = [ `OnErrorEventHandlerNonNull ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13595 : Ojs.t) -> t_of_js x13595
    and t_0_to_js : t_0 -> Ojs.t = fun (x13594 : t) -> t_to_js x13594
    type tags = [ `OnErrorEventHandlerNonNull ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13598 : Ojs.t) -> intf_of_js __tags_of_js x13598
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13596 : __tags intf) -> intf_to_js __tags_to_js x13596
    let (apply :
      'tags this ->
        event:[ `U1 of Event.t  | `U2 of string ] ->
          ?source:string ->
            ?lineno:float -> ?colno:float -> ?error:Error.t_0 -> unit -> any)
      =
      fun (x13612 : 'tags this) ->
        fun ~event:(x13600 : [ `U1 of Event.t  | `U2 of string ]) ->
          fun ?source:(x13601 : string option) ->
            fun ?lineno:(x13602 : float option) ->
              fun ?colno:(x13603 : float option) ->
                fun ?error:(x13604 : Error.t_0 option) ->
                  fun () ->
                    any_of_js
                      (Ojs.call (this_to_js Obj.magic x13612) "apply"
                         [|Ojs.null;((let x13605 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x13605 "push"
                                           [|((match x13600 with
                                               | `U1 x13610 ->
                                                   Event.t_to_js x13610
                                               | `U2 x13611 ->
                                                   Ojs.string_to_js x13611))|]);
                                      (match x13601 with
                                       | Some x13609 ->
                                           ignore
                                             (Ojs.call x13605 "push"
                                                [|(Ojs.string_to_js x13609)|])
                                       | None -> ());
                                      (match x13602 with
                                       | Some x13608 ->
                                           ignore
                                             (Ojs.call x13605 "push"
                                                [|(Ojs.float_to_js x13608)|])
                                       | None -> ());
                                      (match x13603 with
                                       | Some x13607 ->
                                           ignore
                                             (Ojs.call x13605 "push"
                                                [|(Ojs.float_to_js x13607)|])
                                       | None -> ());
                                      (match x13604 with
                                       | Some x13606 ->
                                           ignore
                                             (Ojs.call x13605 "push"
                                                [|(Error.t_0_to_js x13606)|])
                                       | None -> ());
                                      x13605))|])
    let cast_from = Obj.magic
  end
module OnErrorEventHandler =
  struct
    type t = OnErrorEventHandlerNonNull.t option
    let rec t_of_js : Ojs.t -> t =
      fun (x13616 : Ojs.t) ->
        Ojs.option_of_js OnErrorEventHandlerNonNull.t_of_js x13616
    and t_to_js : t -> Ojs.t =
      fun (x13614 : OnErrorEventHandlerNonNull.t option) ->
        Ojs.option_to_js OnErrorEventHandlerNonNull.t_to_js x13614
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13619 : Ojs.t) -> t_of_js x13619
    and t_0_to_js : t_0 -> Ojs.t = fun (x13618 : t) -> t_to_js x13618
  end
module OES_fbo_render_mipmap =
  struct
    type t = [ `OES_fbo_render_mipmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13621 : Ojs.t) -> t_of_js x13621
    and t_0_to_js : t_0 -> Ojs.t = fun (x13620 : t) -> t_to_js x13620
    type tags = [ `OES_fbo_render_mipmap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13624 : Ojs.t) -> intf_of_js __tags_of_js x13624
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13622 : __tags intf) -> intf_to_js __tags_to_js x13622
    let cast_from = Obj.magic
  end
module NotificationEventMap =
  struct
    type t = [ `NotificationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13627 : Ojs.t) -> t_of_js x13627
    and t_0_to_js : t_0 -> Ojs.t = fun (x13626 : t) -> t_to_js x13626
    type tags = [ `NotificationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13630 : Ojs.t) -> intf_of_js __tags_of_js x13630
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13628 : __tags intf) -> intf_to_js __tags_to_js x13628
    let (get_click : 'tags this -> Event.t) =
      fun (x13632 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13632) "click")
    let (set_click : 'tags this -> Event.t -> unit) =
      fun (x13634 : 'tags this) ->
        fun (x13635 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13634) "click"
            (Event.t_to_js x13635)
    let (get_close : 'tags this -> Event.t) =
      fun (x13637 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13637) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x13639 : 'tags this) ->
        fun (x13640 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13639) "close"
            (Event.t_to_js x13640)
    let (get_error : 'tags this -> Event.t) =
      fun (x13642 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13642) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13644 : 'tags this) ->
        fun (x13645 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13644) "error"
            (Event.t_to_js x13645)
    let (get_show : 'tags this -> Event.t) =
      fun (x13647 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13647) "show")
    let (set_show : 'tags this -> Event.t -> unit) =
      fun (x13649 : 'tags this) ->
        fun (x13650 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13649) "show"
            (Event.t_to_js x13650)
    let (create :
      click:Event.t ->
        close:Event.t -> error:Event.t -> show:Event.t -> unit -> t)
      =
      fun ~click:(x13652 : Event.t) ->
        fun ~close:(x13653 : Event.t) ->
          fun ~error:(x13654 : Event.t) ->
            fun ~show:(x13655 : Event.t) ->
              fun () ->
                let x13656 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x13656 "click" (Event.t_to_js x13652);
                Ojs.set_prop_ascii x13656 "close" (Event.t_to_js x13653);
                Ojs.set_prop_ascii x13656 "error" (Event.t_to_js x13654);
                Ojs.set_prop_ascii x13656 "show" (Event.t_to_js x13655);
                t_of_js x13656
    let cast_from = Obj.magic
  end
module MessagePortEventMap =
  struct
    type t = [ `MessagePortEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13658 : Ojs.t) -> t_of_js x13658
    and t_0_to_js : t_0 -> Ojs.t = fun (x13657 : t) -> t_to_js x13657
    type tags = [ `MessagePortEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13661 : Ojs.t) -> intf_of_js __tags_of_js x13661
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13659 : __tags intf) -> intf_to_js __tags_to_js x13659
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x13663 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13663) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13665 : 'tags this) ->
        fun (x13666 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13665) "message"
            (MessageEvent.t_0_to_js x13666)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x13668 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13668) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13670 : 'tags this) ->
        fun (x13671 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13670) "messageerror"
            (MessageEvent.t_0_to_js x13671)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x13673 : MessageEvent.t_0) ->
        fun ~messageerror:(x13674 : MessageEvent.t_0) ->
          fun () ->
            let x13675 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13675 "message"
              (MessageEvent.t_0_to_js x13673);
            Ojs.set_prop_ascii x13675 "messageerror"
              (MessageEvent.t_0_to_js x13674);
            t_of_js x13675
    let cast_from = Obj.magic
  end
module MessageChannel =
  struct
    type t = [ `MessageChannel ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13677 : Ojs.t) -> t_of_js x13677
    and t_0_to_js : t_0 -> Ojs.t = fun (x13676 : t) -> t_to_js x13676
    type tags = [ `MessageChannel ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13680 : Ojs.t) -> intf_of_js __tags_of_js x13680
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13678 : __tags intf) -> intf_to_js __tags_to_js x13678
    let (get_port1 : 'tags this -> MessagePort.t) =
      fun (x13682 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13682) "port1")
    let (get_port2 : 'tags this -> MessagePort.t) =
      fun (x13684 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13684) "port2")
    let (create : port1:MessagePort.t -> port2:MessagePort.t -> unit -> t) =
      fun ~port1:(x13686 : MessagePort.t) ->
        fun ~port2:(x13687 : MessagePort.t) ->
          fun () ->
            let x13688 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13688 "port1" (MessagePort.t_to_js x13686);
            Ojs.set_prop_ascii x13688 "port2" (MessagePort.t_to_js x13687);
            t_of_js x13688
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MessageChannel") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MessageChannel") [||])
  end
module LockMode =
  struct
    type t = [ `L_s179_shared  | `L_s70_exclusive ]
    let rec t_of_js : Ojs.t -> t =
      fun (x13690 : Ojs.t) ->
        let x13691 = x13690 in
        match Ojs.string_of_js x13691 with
        | "shared" -> `L_s179_shared
        | "exclusive" -> `L_s70_exclusive
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x13689 : [ `L_s179_shared  | `L_s70_exclusive ]) ->
        match x13689 with
        | `L_s179_shared -> Ojs.string_to_js "shared"
        | `L_s70_exclusive -> Ojs.string_to_js "exclusive"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13693 : Ojs.t) -> t_of_js x13693
    and t_0_to_js : t_0 -> Ojs.t = fun (x13692 : t) -> t_to_js x13692
  end
module LockOptions =
  struct
    type t = [ `LockOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13695 : Ojs.t) -> t_of_js x13695
    and t_0_to_js : t_0 -> Ojs.t = fun (x13694 : t) -> t_to_js x13694
    type tags = [ `LockOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13698 : Ojs.t) -> intf_of_js __tags_of_js x13698
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13696 : __tags intf) -> intf_to_js __tags_to_js x13696
    let (get_ifAvailable : 'tags this -> bool) =
      fun (x13700 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13700) "ifAvailable")
    let (set_ifAvailable : 'tags this -> bool -> unit) =
      fun (x13702 : 'tags this) ->
        fun (x13703 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13702) "ifAvailable"
            (Ojs.bool_to_js x13703)
    let (get_mode : 'tags this -> LockMode.t) =
      fun (x13705 : 'tags this) ->
        LockMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13705) "mode")
    let (set_mode : 'tags this -> LockMode.t -> unit) =
      fun (x13707 : 'tags this) ->
        fun (x13708 : LockMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13707) "mode"
            (LockMode.t_to_js x13708)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x13710 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13710) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x13712 : 'tags this) ->
        fun (x13713 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13712) "signal"
            (AbortSignal.t_to_js x13713)
    let (get_steal : 'tags this -> bool) =
      fun (x13715 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13715) "steal")
    let (set_steal : 'tags this -> bool -> unit) =
      fun (x13717 : 'tags this) ->
        fun (x13718 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13717) "steal"
            (Ojs.bool_to_js x13718)
    let (create :
      ifAvailable:bool ->
        mode:LockMode.t -> signal:AbortSignal.t -> steal:bool -> unit -> t)
      =
      fun ~ifAvailable:(x13720 : bool) ->
        fun ~mode:(x13721 : LockMode.t) ->
          fun ~signal:(x13722 : AbortSignal.t) ->
            fun ~steal:(x13723 : bool) ->
              fun () ->
                let x13724 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x13724 "ifAvailable"
                  (Ojs.bool_to_js x13720);
                Ojs.set_prop_ascii x13724 "mode" (LockMode.t_to_js x13721);
                Ojs.set_prop_ascii x13724 "signal"
                  (AbortSignal.t_to_js x13722);
                Ojs.set_prop_ascii x13724 "steal" (Ojs.bool_to_js x13723);
                t_of_js x13724
    let cast_from = Obj.magic
  end
module LockInfo =
  struct
    type t = [ `LockInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13726 : Ojs.t) -> t_of_js x13726
    and t_0_to_js : t_0 -> Ojs.t = fun (x13725 : t) -> t_to_js x13725
    type tags = [ `LockInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13729 : Ojs.t) -> intf_of_js __tags_of_js x13729
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13727 : __tags intf) -> intf_to_js __tags_to_js x13727
    let (get_clientId : 'tags this -> string) =
      fun (x13731 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13731) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x13733 : 'tags this) ->
        fun (x13734 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13733) "clientId"
            (Ojs.string_to_js x13734)
    let (get_mode : 'tags this -> LockMode.t) =
      fun (x13736 : 'tags this) ->
        LockMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13736) "mode")
    let (set_mode : 'tags this -> LockMode.t -> unit) =
      fun (x13738 : 'tags this) ->
        fun (x13739 : LockMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13738) "mode"
            (LockMode.t_to_js x13739)
    let (get_name : 'tags this -> string) =
      fun (x13741 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13741) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x13743 : 'tags this) ->
        fun (x13744 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13743) "name"
            (Ojs.string_to_js x13744)
    let (create :
      clientId:string -> mode:LockMode.t -> name:string -> unit -> t) =
      fun ~clientId:(x13746 : string) ->
        fun ~mode:(x13747 : LockMode.t) ->
          fun ~name:(x13748 : string) ->
            fun () ->
              let x13749 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13749 "clientId" (Ojs.string_to_js x13746);
              Ojs.set_prop_ascii x13749 "mode" (LockMode.t_to_js x13747);
              Ojs.set_prop_ascii x13749 "name" (Ojs.string_to_js x13748);
              t_of_js x13749
    let cast_from = Obj.magic
  end
module LockManagerSnapshot =
  struct
    type t = [ `LockManagerSnapshot ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13751 : Ojs.t) -> t_of_js x13751
    and t_0_to_js : t_0 -> Ojs.t = fun (x13750 : t) -> t_to_js x13750
    type tags = [ `LockManagerSnapshot ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockManagerSnapshot ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13754 : Ojs.t) -> intf_of_js __tags_of_js x13754
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13752 : __tags intf) -> intf_to_js __tags_to_js x13752
    let (get_held : 'tags this -> LockInfo.t list) =
      fun (x13756 : 'tags this) ->
        Ojs.list_of_js LockInfo.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13756) "held")
    let (set_held : 'tags this -> LockInfo.t list -> unit) =
      fun (x13759 : 'tags this) ->
        fun (x13760 : LockInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13759) "held"
            (Ojs.list_to_js LockInfo.t_to_js x13760)
    let (get_pending : 'tags this -> LockInfo.t list) =
      fun (x13763 : 'tags this) ->
        Ojs.list_of_js LockInfo.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13763) "pending")
    let (set_pending : 'tags this -> LockInfo.t list -> unit) =
      fun (x13766 : 'tags this) ->
        fun (x13767 : LockInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13766) "pending"
            (Ojs.list_to_js LockInfo.t_to_js x13767)
    let (create :
      held:LockInfo.t list -> pending:LockInfo.t list -> unit -> t) =
      fun ~held:(x13770 : LockInfo.t list) ->
        fun ~pending:(x13771 : LockInfo.t list) ->
          fun () ->
            let x13772 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13772 "held"
              (Ojs.list_to_js LockInfo.t_to_js x13770);
            Ojs.set_prop_ascii x13772 "pending"
              (Ojs.list_to_js LockInfo.t_to_js x13771);
            t_of_js x13772
    let cast_from = Obj.magic
  end
module Lock =
  struct
    type t = [ `Lock ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13776 : Ojs.t) -> t_of_js x13776
    and t_0_to_js : t_0 -> Ojs.t = fun (x13775 : t) -> t_to_js x13775
    type tags = [ `Lock ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Lock ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13779 : Ojs.t) -> intf_of_js __tags_of_js x13779
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13777 : __tags intf) -> intf_to_js __tags_to_js x13777
    let (get_mode : 'tags this -> LockMode.t) =
      fun (x13781 : 'tags this) ->
        LockMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13781) "mode")
    let (get_name : 'tags this -> string) =
      fun (x13783 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13783) "name")
    let (create : mode:LockMode.t -> name:string -> unit -> t) =
      fun ~mode:(x13785 : LockMode.t) ->
        fun ~name:(x13786 : string) ->
          fun () ->
            let x13787 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13787 "mode" (LockMode.t_to_js x13785);
            Ojs.set_prop_ascii x13787 "name" (Ojs.string_to_js x13786);
            t_of_js x13787
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Lock")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Lock") [||])
  end
module LockGrantedCallback =
  struct
    type t = [ `LockGrantedCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13789 : Ojs.t) -> t_of_js x13789
    and t_0_to_js : t_0 -> Ojs.t = fun (x13788 : t) -> t_to_js x13788
    type tags = [ `LockGrantedCallback ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockGrantedCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13792 : Ojs.t) -> intf_of_js __tags_of_js x13792
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13790 : __tags intf) -> intf_to_js __tags_to_js x13790
    let (apply : 'tags this -> lock:Lock.t option -> any) =
      fun (x13796 : 'tags this) ->
        fun ~lock:(x13794 : Lock.t option) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x13796)
               [|(Ojs.option_to_js Lock.t_to_js x13794)|])
    let cast_from = Obj.magic
  end
module LockManager =
  struct
    type t = [ `LockManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13799 : Ojs.t) -> t_of_js x13799
    and t_0_to_js : t_0 -> Ojs.t = fun (x13798 : t) -> t_to_js x13798
    type tags = [ `LockManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `LockManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13802 : Ojs.t) -> intf_of_js __tags_of_js x13802
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13800 : __tags intf) -> intf_to_js __tags_to_js x13800
    let (query : 'tags this -> LockManagerSnapshot.t Promise.t_1) =
      fun (x13804 : 'tags this) ->
        Promise.t_1_of_js LockManagerSnapshot.t_of_js
          (Ojs.call (this_to_js Obj.magic x13804) "query" [||])
    let (request :
      'tags this ->
        name:string -> callback:LockGrantedCallback.t -> any Promise.t_1)
      =
      fun (x13809 : 'tags this) ->
        fun ~name:(x13807 : string) ->
          fun ~callback:(x13808 : LockGrantedCallback.t) ->
            Promise.t_1_of_js any_of_js
              (Ojs.call (this_to_js Obj.magic x13809) "request"
                 [|(Ojs.string_to_js x13807);(LockGrantedCallback.t_to_js
                                                x13808)|])
    let (request' :
      'tags this ->
        name:string ->
          options:LockOptions.t ->
            callback:LockGrantedCallback.t -> any Promise.t_1)
      =
      fun (x13815 : 'tags this) ->
        fun ~name:(x13812 : string) ->
          fun ~options:(x13813 : LockOptions.t) ->
            fun ~callback:(x13814 : LockGrantedCallback.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x13815) "request"
                   [|(Ojs.string_to_js x13812);(LockOptions.t_to_js x13813);(
                     LockGrantedCallback.t_to_js x13814)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "LockManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "LockManager") [||])
  end
module ImportMeta =
  struct
    type t = [ `ImportMeta ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13819 : Ojs.t) -> t_of_js x13819
    and t_0_to_js : t_0 -> Ojs.t = fun (x13818 : t) -> t_to_js x13818
    type tags = [ `ImportMeta ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13822 : Ojs.t) -> intf_of_js __tags_of_js x13822
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13820 : __tags intf) -> intf_to_js __tags_to_js x13820
    let (get_url : 'tags this -> string) =
      fun (x13824 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13824) "url")
    let (set_url : 'tags this -> string -> unit) =
      fun (x13826 : 'tags this) ->
        fun (x13827 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13826) "url"
            (Ojs.string_to_js x13827)
    let (create : url:string -> unit -> t) =
      fun ~url:(x13829 : string) ->
        fun () ->
          let x13830 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13830 "url" (Ojs.string_to_js x13829);
          t_of_js x13830
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContextSettings =
  struct
    type t = [ `ImageBitmapRenderingContextSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13832 : Ojs.t) -> t_of_js x13832
    and t_0_to_js : t_0 -> Ojs.t = fun (x13831 : t) -> t_to_js x13831
    type tags = [ `ImageBitmapRenderingContextSettings ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13835 : Ojs.t) -> intf_of_js __tags_of_js x13835
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13833 : __tags intf) -> intf_to_js __tags_to_js x13833
    let (get_alpha : 'tags this -> bool) =
      fun (x13837 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13837) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x13839 : 'tags this) ->
        fun (x13840 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13839) "alpha"
            (Ojs.bool_to_js x13840)
    let (create : alpha:bool -> unit -> t) =
      fun ~alpha:(x13842 : bool) ->
        fun () ->
          let x13843 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13843 "alpha" (Ojs.bool_to_js x13842);
          t_of_js x13843
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContext =
  struct
    type t = [ `ImageBitmapRenderingContext ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13845 : Ojs.t) -> t_of_js x13845
    and t_0_to_js : t_0 -> Ojs.t = fun (x13844 : t) -> t_to_js x13844
    type tags = [ `ImageBitmapRenderingContext ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13848 : Ojs.t) -> intf_of_js __tags_of_js x13848
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13846 : __tags intf) -> intf_to_js __tags_to_js x13846
    let (transferFromImageBitmap :
      'tags this -> bitmap:ImageBitmap.t option -> unit) =
      fun (x13852 : 'tags this) ->
        fun ~bitmap:(x13850 : ImageBitmap.t option) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13852) "transferFromImageBitmap"
               [|(Ojs.option_to_js ImageBitmap.t_to_js x13850)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             [||])
  end
module IDBTransactionEventMap =
  struct
    type t = [ `IDBTransactionEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13855 : Ojs.t) -> t_of_js x13855
    and t_0_to_js : t_0 -> Ojs.t = fun (x13854 : t) -> t_to_js x13854
    type tags = [ `IDBTransactionEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13858 : Ojs.t) -> intf_of_js __tags_of_js x13858
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13856 : __tags intf) -> intf_to_js __tags_to_js x13856
    let (get_abort : 'tags this -> Event.t) =
      fun (x13860 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13860) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x13862 : 'tags this) ->
        fun (x13863 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13862) "abort"
            (Event.t_to_js x13863)
    let (get_complete : 'tags this -> Event.t) =
      fun (x13865 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13865) "complete")
    let (set_complete : 'tags this -> Event.t -> unit) =
      fun (x13867 : 'tags this) ->
        fun (x13868 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13867) "complete"
            (Event.t_to_js x13868)
    let (get_error : 'tags this -> Event.t) =
      fun (x13870 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13870) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13872 : 'tags this) ->
        fun (x13873 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13872) "error"
            (Event.t_to_js x13873)
    let (create :
      abort:Event.t -> complete:Event.t -> error:Event.t -> unit -> t) =
      fun ~abort:(x13875 : Event.t) ->
        fun ~complete:(x13876 : Event.t) ->
          fun ~error:(x13877 : Event.t) ->
            fun () ->
              let x13878 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13878 "abort" (Event.t_to_js x13875);
              Ojs.set_prop_ascii x13878 "complete" (Event.t_to_js x13876);
              Ojs.set_prop_ascii x13878 "error" (Event.t_to_js x13877);
              t_of_js x13878
    let cast_from = Obj.magic
  end
module IDBRequestEventMap =
  struct
    type t = [ `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13880 : Ojs.t) -> t_of_js x13880
    and t_0_to_js : t_0 -> Ojs.t = fun (x13879 : t) -> t_to_js x13879
    type tags = [ `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13883 : Ojs.t) -> intf_of_js __tags_of_js x13883
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13881 : __tags intf) -> intf_to_js __tags_to_js x13881
    let (get_error : 'tags this -> Event.t) =
      fun (x13885 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13885) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13887 : 'tags this) ->
        fun (x13888 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13887) "error"
            (Event.t_to_js x13888)
    let (get_success : 'tags this -> Event.t) =
      fun (x13890 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13890) "success")
    let (set_success : 'tags this -> Event.t -> unit) =
      fun (x13892 : 'tags this) ->
        fun (x13893 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13892) "success"
            (Event.t_to_js x13893)
    let (create : error:Event.t -> success:Event.t -> unit -> t) =
      fun ~error:(x13895 : Event.t) ->
        fun ~success:(x13896 : Event.t) ->
          fun () ->
            let x13897 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13897 "error" (Event.t_to_js x13895);
            Ojs.set_prop_ascii x13897 "success" (Event.t_to_js x13896);
            t_of_js x13897
    let cast_from = Obj.magic
  end
module IDBOpenDBRequestEventMap =
  struct
    type t = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13899 : Ojs.t) -> t_of_js x13899
    and t_0_to_js : t_0 -> Ojs.t = fun (x13898 : t) -> t_to_js x13898
    type tags = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13902 : Ojs.t) -> intf_of_js __tags_of_js x13902
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13900 : __tags intf) -> intf_to_js __tags_to_js x13900
    let (get_blocked : 'tags this -> Event.t) =
      fun (x13904 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13904) "blocked")
    let (set_blocked : 'tags this -> Event.t -> unit) =
      fun (x13906 : 'tags this) ->
        fun (x13907 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13906) "blocked"
            (Event.t_to_js x13907)
    let (get_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x13909 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13909) "upgradeneeded")
    let (set_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x13911 : 'tags this) ->
        fun (x13912 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13911) "upgradeneeded"
            (IDBVersionChangeEvent.t_to_js x13912)
    let (create :
      blocked:Event.t -> upgradeneeded:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~blocked:(x13914 : Event.t) ->
        fun ~upgradeneeded:(x13915 : IDBVersionChangeEvent.t) ->
          fun () ->
            let x13916 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13916 "blocked" (Event.t_to_js x13914);
            Ojs.set_prop_ascii x13916 "upgradeneeded"
              (IDBVersionChangeEvent.t_to_js x13915);
            t_of_js x13916
    let cast_from = Obj.magic
  end
module IDBDatabaseEventMap =
  struct
    type t = [ `IDBDatabaseEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13918 : Ojs.t) -> t_of_js x13918
    and t_0_to_js : t_0 -> Ojs.t = fun (x13917 : t) -> t_to_js x13917
    type tags = [ `IDBDatabaseEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13921 : Ojs.t) -> intf_of_js __tags_of_js x13921
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13919 : __tags intf) -> intf_to_js __tags_to_js x13919
    let (get_abort : 'tags this -> Event.t) =
      fun (x13923 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13923) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x13925 : 'tags this) ->
        fun (x13926 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13925) "abort"
            (Event.t_to_js x13926)
    let (get_close : 'tags this -> Event.t) =
      fun (x13928 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13928) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x13930 : 'tags this) ->
        fun (x13931 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13930) "close"
            (Event.t_to_js x13931)
    let (get_error : 'tags this -> Event.t) =
      fun (x13933 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13933) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13935 : 'tags this) ->
        fun (x13936 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13935) "error"
            (Event.t_to_js x13936)
    let (get_versionchange : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x13938 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13938) "versionchange")
    let (set_versionchange : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x13940 : 'tags this) ->
        fun (x13941 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13940) "versionchange"
            (IDBVersionChangeEvent.t_to_js x13941)
    let (create :
      abort:Event.t ->
        close:Event.t ->
          error:Event.t -> versionchange:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~abort:(x13943 : Event.t) ->
        fun ~close:(x13944 : Event.t) ->
          fun ~error:(x13945 : Event.t) ->
            fun ~versionchange:(x13946 : IDBVersionChangeEvent.t) ->
              fun () ->
                let x13947 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x13947 "abort" (Event.t_to_js x13943);
                Ojs.set_prop_ascii x13947 "close" (Event.t_to_js x13944);
                Ojs.set_prop_ascii x13947 "error" (Event.t_to_js x13945);
                Ojs.set_prop_ascii x13947 "versionchange"
                  (IDBVersionChangeEvent.t_to_js x13946);
                t_of_js x13947
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEventInit =
  struct
    type t = [ `EventInit  | `FontFaceSetLoadEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13949 : Ojs.t) -> t_of_js x13949
    and t_0_to_js : t_0 -> Ojs.t = fun (x13948 : t) -> t_to_js x13948
    type tags = [ `EventInit  | `FontFaceSetLoadEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13952 : Ojs.t) -> intf_of_js __tags_of_js x13952
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13950 : __tags intf) -> intf_to_js __tags_to_js x13950
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x13954 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13954) "fontfaces")
    let (set_fontfaces : 'tags this -> FontFace.t list -> unit) =
      fun (x13957 : 'tags this) ->
        fun (x13958 : FontFace.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13957) "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x13958)
    let (create : fontfaces:FontFace.t list -> unit -> t) =
      fun ~fontfaces:(x13961 : FontFace.t list) ->
        fun () ->
          let x13962 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13962 "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x13961);
          t_of_js x13962
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEvent =
  struct
    type t = [ `Event  | `FontFaceSetLoadEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13965 : Ojs.t) -> t_of_js x13965
    and t_0_to_js : t_0 -> Ojs.t = fun (x13964 : t) -> t_to_js x13964
    type tags = [ `Event  | `FontFaceSetLoadEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13968 : Ojs.t) -> intf_of_js __tags_of_js x13968
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13966 : __tags intf) -> intf_to_js __tags_to_js x13966
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x13970 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13970) "fontfaces")
    let (create : fontfaces:FontFace.t list -> unit -> t) =
      fun ~fontfaces:(x13973 : FontFace.t list) ->
        fun () ->
          let x13974 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13974 "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x13973);
          t_of_js x13974
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t)
      =
      fun ~type_:(x13976 : string) ->
        fun ?eventInitDict:(x13977 : FontFaceSetLoadEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
                 (let x13978 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13978 "push" [|(Ojs.string_to_js x13976)|]);
                  (match x13977 with
                   | Some x13979 ->
                       ignore
                         (Ojs.call x13978 "push"
                            [|(FontFaceSetLoadEventInit.t_to_js x13979)|])
                   | None -> ());
                  x13978))
  end
module FontFaceSetEventMap =
  struct
    type t = [ `FontFaceSetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13981 : Ojs.t) -> t_of_js x13981
    and t_0_to_js : t_0 -> Ojs.t = fun (x13980 : t) -> t_to_js x13980
    type tags = [ `FontFaceSetEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x13984 : Ojs.t) -> intf_of_js __tags_of_js x13984
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x13982 : __tags intf) -> intf_to_js __tags_to_js x13982
    let (get_loading : 'tags this -> Event.t) =
      fun (x13986 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13986) "loading")
    let (set_loading : 'tags this -> Event.t -> unit) =
      fun (x13988 : 'tags this) ->
        fun (x13989 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13988) "loading"
            (Event.t_to_js x13989)
    let (get_loadingdone : 'tags this -> Event.t) =
      fun (x13991 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13991) "loadingdone")
    let (set_loadingdone : 'tags this -> Event.t -> unit) =
      fun (x13993 : 'tags this) ->
        fun (x13994 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13993) "loadingdone"
            (Event.t_to_js x13994)
    let (get_loadingerror : 'tags this -> Event.t) =
      fun (x13996 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13996) "loadingerror")
    let (set_loadingerror : 'tags this -> Event.t -> unit) =
      fun (x13998 : 'tags this) ->
        fun (x13999 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13998) "loadingerror"
            (Event.t_to_js x13999)
    let (create :
      loading:Event.t ->
        loadingdone:Event.t -> loadingerror:Event.t -> unit -> t)
      =
      fun ~loading:(x14001 : Event.t) ->
        fun ~loadingdone:(x14002 : Event.t) ->
          fun ~loadingerror:(x14003 : Event.t) ->
            fun () ->
              let x14004 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x14004 "loading" (Event.t_to_js x14001);
              Ojs.set_prop_ascii x14004 "loadingdone" (Event.t_to_js x14002);
              Ojs.set_prop_ascii x14004 "loadingerror" (Event.t_to_js x14003);
              t_of_js x14004
    let cast_from = Obj.magic
  end
module FileReaderSync =
  struct
    type t = [ `FileReaderSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14006 : Ojs.t) -> t_of_js x14006
    and t_0_to_js : t_0 -> Ojs.t = fun (x14005 : t) -> t_to_js x14005
    type tags = [ `FileReaderSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14009 : Ojs.t) -> intf_of_js __tags_of_js x14009
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14007 : __tags intf) -> intf_to_js __tags_to_js x14007
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> ArrayBuffer.t_0) =
      fun (x14012 : 'tags this) ->
        fun ~blob:(x14011 : Blob.t) ->
          ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x14012) "readAsArrayBuffer"
               [|(Blob.t_to_js x14011)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> string) =
      fun (x14015 : 'tags this) ->
        fun ~blob:(x14014 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x14015) "readAsBinaryString"
               [|(Blob.t_to_js x14014)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> string) =
      fun (x14018 : 'tags this) ->
        fun ~blob:(x14017 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x14018) "readAsDataURL"
               [|(Blob.t_to_js x14017)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> string) =
      fun (x14024 : 'tags this) ->
        fun ~blob:(x14020 : Blob.t) ->
          fun ?encoding:(x14021 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x14026 = this_to_js Obj.magic x14024 in
                 Ojs.call (Ojs.get_prop_ascii x14026 "readAsText") "apply"
                   [|x14026;((let x14022 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14022 "push"
                                   [|(Blob.t_to_js x14020)|]);
                              (match x14021 with
                               | Some x14023 ->
                                   ignore
                                     (Ojs.call x14022 "push"
                                        [|(Ojs.string_to_js x14023)|])
                               | None -> ());
                              x14022))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileReaderSync") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReaderSync") [||])
  end
module FileReader =
  struct
    type t = [ `EventTarget  | `FileReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14028 : Ojs.t) -> t_of_js x14028
    and t_0_to_js : t_0 -> Ojs.t = fun (x14027 : t) -> t_to_js x14027
    type tags = [ `EventTarget  | `FileReader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14031 : Ojs.t) -> intf_of_js __tags_of_js x14031
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14029 : __tags intf) -> intf_to_js __tags_to_js x14029
    let (get_error : 'tags this -> DOMException.t option) =
      fun (x14033 : 'tags this) ->
        Ojs.option_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14033) "error")
    let (get_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14036 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14038 : Ojs.t) ->
             fun ~this:(x14039 : t) ->
               fun ~ev:(x14040 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14038
                      [|(t_to_js x14039);(ProgressEvent.t_to_js t_to_js
                                            x14040)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14036) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14042 : 'tags this) ->
        fun (x14043 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14042) "onabort"
            (Ojs.option_to_js
               (fun (x14044 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14045 : Ojs.t) ->
                       fun (x14046 : Ojs.t) ->
                         any_to_js
                           (x14044 ~this:(t_of_js x14045)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14046))))
               x14043)
    let (get_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14049 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14051 : Ojs.t) ->
             fun ~this:(x14052 : t) ->
               fun ~ev:(x14053 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14051
                      [|(t_to_js x14052);(ProgressEvent.t_to_js t_to_js
                                            x14053)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14049) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14055 : 'tags this) ->
        fun (x14056 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14055) "onerror"
            (Ojs.option_to_js
               (fun (x14057 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14058 : Ojs.t) ->
                       fun (x14059 : Ojs.t) ->
                         any_to_js
                           (x14057 ~this:(t_of_js x14058)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14059))))
               x14056)
    let (get_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14062 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14064 : Ojs.t) ->
             fun ~this:(x14065 : t) ->
               fun ~ev:(x14066 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14064
                      [|(t_to_js x14065);(ProgressEvent.t_to_js t_to_js
                                            x14066)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14062) "onload")
    let (set_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14068 : 'tags this) ->
        fun (x14069 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14068) "onload"
            (Ojs.option_to_js
               (fun (x14070 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14071 : Ojs.t) ->
                       fun (x14072 : Ojs.t) ->
                         any_to_js
                           (x14070 ~this:(t_of_js x14071)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14072))))
               x14069)
    let (get_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14075 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14077 : Ojs.t) ->
             fun ~this:(x14078 : t) ->
               fun ~ev:(x14079 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14077
                      [|(t_to_js x14078);(ProgressEvent.t_to_js t_to_js
                                            x14079)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14075) "onloadend")
    let (set_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14081 : 'tags this) ->
        fun (x14082 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14081) "onloadend"
            (Ojs.option_to_js
               (fun (x14083 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14084 : Ojs.t) ->
                       fun (x14085 : Ojs.t) ->
                         any_to_js
                           (x14083 ~this:(t_of_js x14084)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14085))))
               x14082)
    let (get_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14088 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14090 : Ojs.t) ->
             fun ~this:(x14091 : t) ->
               fun ~ev:(x14092 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14090
                      [|(t_to_js x14091);(ProgressEvent.t_to_js t_to_js
                                            x14092)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14088) "onloadstart")
    let (set_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14094 : 'tags this) ->
        fun (x14095 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14094) "onloadstart"
            (Ojs.option_to_js
               (fun (x14096 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14097 : Ojs.t) ->
                       fun (x14098 : Ojs.t) ->
                         any_to_js
                           (x14096 ~this:(t_of_js x14097)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14098))))
               x14095)
    let (get_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option) =
      fun (x14101 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14103 : Ojs.t) ->
             fun ~this:(x14104 : t) ->
               fun ~ev:(x14105 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x14103
                      [|(t_to_js x14104);(ProgressEvent.t_to_js t_to_js
                                            x14105)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14101) "onprogress")
    let (set_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) option -> unit) =
      fun (x14107 : 'tags this) ->
        fun (x14108 : (this:t -> ev:t ProgressEvent.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14107) "onprogress"
            (Ojs.option_to_js
               (fun (x14109 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14110 : Ojs.t) ->
                       fun (x14111 : Ojs.t) ->
                         any_to_js
                           (x14109 ~this:(t_of_js x14110)
                              ~ev:(ProgressEvent.t_of_js t_of_js x14111))))
               x14108)
    let (get_readyState : 'tags this -> float) =
      fun (x14114 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14114) "readyState")
    let (get_result :
      'tags this ->
        [ `String of string  | `Null  | `Other of ArrayBuffer.t_0 ]
          Primitive.t)
      =
      fun (x14116 : 'tags this) ->
        Primitive.t_of_js
          (fun (x14118 : Ojs.t) ->
             let x14119 = x14118 in
             match Ojs.string_of_js (Ojs.get_prop_ascii x14119 "dummy") with
             | "String" -> `String (Ojs.string_of_js x14119)
             | "Null" -> `Null
             | "Other" -> `Other (ArrayBuffer.t_0_of_js x14119)
             | _ -> assert false)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14116) "result")
    let (abort : 'tags this -> unit) =
      fun (x14120 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14120) "abort" [||])
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit) =
      fun (x14123 : 'tags this) ->
        fun ~blob:(x14122 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14123) "readAsArrayBuffer"
               [|(Blob.t_to_js x14122)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> unit) =
      fun (x14126 : 'tags this) ->
        fun ~blob:(x14125 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14126) "readAsBinaryString"
               [|(Blob.t_to_js x14125)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> unit) =
      fun (x14129 : 'tags this) ->
        fun ~blob:(x14128 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14129) "readAsDataURL"
               [|(Blob.t_to_js x14128)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit) =
      fun (x14135 : 'tags this) ->
        fun ~blob:(x14131 : Blob.t) ->
          fun ?encoding:(x14132 : string option) ->
            fun () ->
              ignore
                (let x14137 = this_to_js Obj.magic x14135 in
                 Ojs.call (Ojs.get_prop_ascii x14137 "readAsText") "apply"
                   [|x14137;((let x14133 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14133 "push"
                                   [|(Blob.t_to_js x14131)|]);
                              (match x14132 with
                               | Some x14134 ->
                                   ignore
                                     (Ojs.call x14133 "push"
                                        [|(Ojs.string_to_js x14134)|])
                               | None -> ());
                              x14133))|])
    let (get_DONE : 'tags this -> float) =
      fun (x14138 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14138) "DONE")
    let (get_EMPTY : 'tags this -> float) =
      fun (x14140 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14140) "EMPTY")
    let (get_LOADING : 'tags this -> float) =
      fun (x14142 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14142) "LOADING")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14153 : 'tags this) ->
        fun ~type_:(x14144 : 'K) ->
          fun ~listener:(x14145 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14146 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14155 = this_to_js Obj.magic x14153 in
                   Ojs.call (Ojs.get_prop_ascii x14155 "addEventListener")
                     "apply"
                     [|x14155;((let x14147 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14147 "push"
                                     [|(Obj.magic x14144)|]);
                                ignore
                                  (Ojs.call x14147 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14151 : Ojs.t) ->
                                             fun (x14152 : Ojs.t) ->
                                               any_to_js
                                                 (x14145
                                                    ~this:(t_of_js x14151)
                                                    ~ev:(any_of_js x14152))))|]);
                                (match x14146 with
                                 | Some x14148 ->
                                     ignore
                                       (Ojs.call x14147 "push"
                                          [|((match x14148 with
                                              | `U1 x14149 ->
                                                  Ojs.bool_to_js x14149
                                              | `U2 x14150 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14150))|])
                                 | None -> ());
                                x14147))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14163 : 'tags this) ->
        fun ~type_:(x14156 : string) ->
          fun ~listener:(x14157 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14158 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14165 = this_to_js Obj.magic x14163 in
                   Ojs.call (Ojs.get_prop_ascii x14165 "addEventListener")
                     "apply"
                     [|x14165;((let x14159 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14159 "push"
                                     [|(Ojs.string_to_js x14156)|]);
                                ignore
                                  (Ojs.call x14159 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14157)|]);
                                (match x14158 with
                                 | Some x14160 ->
                                     ignore
                                       (Ojs.call x14159 "push"
                                          [|((match x14160 with
                                              | `U1 x14161 ->
                                                  Ojs.bool_to_js x14161
                                              | `U2 x14162 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14162))|])
                                 | None -> ());
                                x14159))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14175 : 'tags this) ->
        fun ~type_:(x14166 : 'K) ->
          fun ~listener:(x14167 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14168 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14177 = this_to_js Obj.magic x14175 in
                   Ojs.call (Ojs.get_prop_ascii x14177 "removeEventListener")
                     "apply"
                     [|x14177;((let x14169 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14169 "push"
                                     [|(Obj.magic x14166)|]);
                                ignore
                                  (Ojs.call x14169 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14173 : Ojs.t) ->
                                             fun (x14174 : Ojs.t) ->
                                               any_to_js
                                                 (x14167
                                                    ~this:(t_of_js x14173)
                                                    ~ev:(any_of_js x14174))))|]);
                                (match x14168 with
                                 | Some x14170 ->
                                     ignore
                                       (Ojs.call x14169 "push"
                                          [|((match x14170 with
                                              | `U1 x14171 ->
                                                  Ojs.bool_to_js x14171
                                              | `U2 x14172 ->
                                                  EventListenerOptions.t_to_js
                                                    x14172))|])
                                 | None -> ());
                                x14169))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14185 : 'tags this) ->
        fun ~type_:(x14178 : string) ->
          fun ~listener:(x14179 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14180 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14187 = this_to_js Obj.magic x14185 in
                   Ojs.call (Ojs.get_prop_ascii x14187 "removeEventListener")
                     "apply"
                     [|x14187;((let x14181 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14181 "push"
                                     [|(Ojs.string_to_js x14178)|]);
                                ignore
                                  (Ojs.call x14181 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14179)|]);
                                (match x14180 with
                                 | Some x14182 ->
                                     ignore
                                       (Ojs.call x14181 "push"
                                          [|((match x14182 with
                                              | `U1 x14183 ->
                                                  Ojs.bool_to_js x14183
                                              | `U2 x14184 ->
                                                  EventListenerOptions.t_to_js
                                                    x14184))|])
                                 | None -> ());
                                x14181))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReader") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "DONE")
    let (empty : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "EMPTY")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "LOADING")
  end
module FileReaderEventMap =
  struct
    type t = [ `FileReaderEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14189 : Ojs.t) -> t_of_js x14189
    and t_0_to_js : t_0 -> Ojs.t = fun (x14188 : t) -> t_to_js x14188
    type tags = [ `FileReaderEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14192 : Ojs.t) -> intf_of_js __tags_of_js x14192
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14190 : __tags intf) -> intf_to_js __tags_to_js x14190
    let (get_abort : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14194 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14194) "abort")
    let (set_abort : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14197 : 'tags this) ->
        fun (x14198 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14197) "abort"
            (ProgressEvent.t_to_js FileReader.t_to_js x14198)
    let (get_error : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14201 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14201) "error")
    let (set_error : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14204 : 'tags this) ->
        fun (x14205 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14204) "error"
            (ProgressEvent.t_to_js FileReader.t_to_js x14205)
    let (get_load : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14208 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14208) "load")
    let (set_load : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14211 : 'tags this) ->
        fun (x14212 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14211) "load"
            (ProgressEvent.t_to_js FileReader.t_to_js x14212)
    let (get_loadend : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14215 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14215) "loadend")
    let (set_loadend : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14218 : 'tags this) ->
        fun (x14219 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14218) "loadend"
            (ProgressEvent.t_to_js FileReader.t_to_js x14219)
    let (get_loadstart : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14222 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14222) "loadstart")
    let (set_loadstart : 'tags this -> FileReader.t ProgressEvent.t -> unit)
      =
      fun (x14225 : 'tags this) ->
        fun (x14226 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14225) "loadstart"
            (ProgressEvent.t_to_js FileReader.t_to_js x14226)
    let (get_progress : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x14229 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14229) "progress")
    let (set_progress : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x14232 : 'tags this) ->
        fun (x14233 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14232) "progress"
            (ProgressEvent.t_to_js FileReader.t_to_js x14233)
    let (create :
      abort:FileReader.t ProgressEvent.t ->
        error:FileReader.t ProgressEvent.t ->
          load:FileReader.t ProgressEvent.t ->
            loadend:FileReader.t ProgressEvent.t ->
              loadstart:FileReader.t ProgressEvent.t ->
                progress:FileReader.t ProgressEvent.t -> unit -> t)
      =
      fun ~abort:(x14236 : FileReader.t ProgressEvent.t) ->
        fun ~error:(x14237 : FileReader.t ProgressEvent.t) ->
          fun ~load:(x14238 : FileReader.t ProgressEvent.t) ->
            fun ~loadend:(x14239 : FileReader.t ProgressEvent.t) ->
              fun ~loadstart:(x14240 : FileReader.t ProgressEvent.t) ->
                fun ~progress:(x14241 : FileReader.t ProgressEvent.t) ->
                  fun () ->
                    let x14242 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x14242 "abort"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14236);
                    Ojs.set_prop_ascii x14242 "error"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14237);
                    Ojs.set_prop_ascii x14242 "load"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14238);
                    Ojs.set_prop_ascii x14242 "loadend"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14239);
                    Ojs.set_prop_ascii x14242 "loadstart"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14240);
                    Ojs.set_prop_ascii x14242 "progress"
                      (ProgressEvent.t_to_js FileReader.t_to_js x14241);
                    t_of_js x14242
    let cast_from = Obj.magic
  end
module FileList =
  struct
    type t =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14250 : Ojs.t) -> t_of_js x14250
    and t_0_to_js : t_0 -> Ojs.t = fun (x14249 : t) -> t_to_js x14249
    type tags =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14253 : Ojs.t) -> intf_of_js __tags_of_js x14253
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14251 : __tags intf) -> intf_to_js __tags_to_js x14251
    let (get_length : 'tags this -> float) =
      fun (x14255 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14255) "length")
    let (item : 'tags this -> index:float -> File.t option) =
      fun (x14258 : 'tags this) ->
        fun ~index:(x14257 : float) ->
          Ojs.option_of_js File.t_of_js
            (Ojs.call (this_to_js Obj.magic x14258) "item"
               [|(Ojs.float_to_js x14257)|])
    let (get : 'tags this -> float -> File.t) =
      fun (x14261 : 'tags this) ->
        fun (x14263 : float) ->
          File.t_of_js
            (Ojs.get_prop (this_to_js Obj.magic x14261)
               (Ojs.float_to_js x14263))
    let (set : 'tags this -> float -> File.t -> unit) =
      fun (x14264 : 'tags this) ->
        fun (x14266 : float) ->
          fun (x14267 : File.t) ->
            Ojs.set_prop (this_to_js Obj.magic x14264)
              (Ojs.float_to_js x14266) (File.t_to_js x14267)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileList") [||])
  end
module EventSourceEventMap =
  struct
    type t = [ `EventSourceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14269 : Ojs.t) -> t_of_js x14269
    and t_0_to_js : t_0 -> Ojs.t = fun (x14268 : t) -> t_to_js x14268
    type tags = [ `EventSourceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14272 : Ojs.t) -> intf_of_js __tags_of_js x14272
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14270 : __tags intf) -> intf_to_js __tags_to_js x14270
    let (get_error : 'tags this -> Event.t) =
      fun (x14274 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14274) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x14276 : 'tags this) ->
        fun (x14277 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14276) "error"
            (Event.t_to_js x14277)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14279 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14279) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14281 : 'tags this) ->
        fun (x14282 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14281) "message"
            (MessageEvent.t_0_to_js x14282)
    let (get_open : 'tags this -> Event.t) =
      fun (x14284 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14284) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x14286 : 'tags this) ->
        fun (x14287 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14286) "open"
            (Event.t_to_js x14287)
    let (create :
      error:Event.t -> message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~error:(x14289 : Event.t) ->
        fun ~message:(x14290 : MessageEvent.t_0) ->
          fun ~open_:(x14291 : Event.t) ->
            fun () ->
              let x14292 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x14292 "error" (Event.t_to_js x14289);
              Ojs.set_prop_ascii x14292 "message"
                (MessageEvent.t_0_to_js x14290);
              Ojs.set_prop_ascii x14292 "open" (Event.t_to_js x14291);
              t_of_js x14292
    let cast_from = Obj.magic
  end
module EventSourceInit =
  struct
    type t = [ `EventSourceInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14294 : Ojs.t) -> t_of_js x14294
    and t_0_to_js : t_0 -> Ojs.t = fun (x14293 : t) -> t_to_js x14293
    type tags = [ `EventSourceInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14297 : Ojs.t) -> intf_of_js __tags_of_js x14297
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14295 : __tags intf) -> intf_to_js __tags_to_js x14295
    let (get_withCredentials : 'tags this -> bool) =
      fun (x14299 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14299) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x14301 : 'tags this) ->
        fun (x14302 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14301) "withCredentials"
            (Ojs.bool_to_js x14302)
    let (create : withCredentials:bool -> unit -> t) =
      fun ~withCredentials:(x14304 : bool) ->
        fun () ->
          let x14305 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x14305 "withCredentials" (Ojs.bool_to_js x14304);
          t_of_js x14305
    let cast_from = Obj.magic
  end
module EventSource =
  struct
    type t = [ `EventSource  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14307 : Ojs.t) -> t_of_js x14307
    and t_0_to_js : t_0 -> Ojs.t = fun (x14306 : t) -> t_to_js x14306
    type tags = [ `EventSource  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14310 : Ojs.t) -> intf_of_js __tags_of_js x14310
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14308 : __tags intf) -> intf_to_js __tags_to_js x14308
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x14312 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14314 : Ojs.t) ->
             fun ~this:(x14315 : t) ->
               fun ~ev:(x14316 : Event.t) ->
                 any_of_js
                   (Ojs.apply x14314
                      [|(t_to_js x14315);(Event.t_to_js x14316)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14312) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x14317 : 'tags this) ->
        fun (x14318 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14317) "onerror"
            (Ojs.option_to_js
               (fun (x14319 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14320 : Ojs.t) ->
                       fun (x14321 : Ojs.t) ->
                         any_to_js
                           (x14319 ~this:(t_of_js x14320)
                              ~ev:(Event.t_of_js x14321)))) x14318)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14323 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14325 : Ojs.t) ->
             fun ~this:(x14326 : t) ->
               fun ~ev:(x14327 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14325
                      [|(t_to_js x14326);(MessageEvent.t_0_to_js x14327)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14323) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14328 : 'tags this) ->
        fun (x14329 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14328) "onmessage"
            (Ojs.option_to_js
               (fun (x14330 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14331 : Ojs.t) ->
                       fun (x14332 : Ojs.t) ->
                         any_to_js
                           (x14330 ~this:(t_of_js x14331)
                              ~ev:(MessageEvent.t_0_of_js x14332)))) x14329)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) option) =
      fun (x14334 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14336 : Ojs.t) ->
             fun ~this:(x14337 : t) ->
               fun ~ev:(x14338 : Event.t) ->
                 any_of_js
                   (Ojs.apply x14336
                      [|(t_to_js x14337);(Event.t_to_js x14338)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14334) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x14339 : 'tags this) ->
        fun (x14340 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14339) "onopen"
            (Ojs.option_to_js
               (fun (x14341 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14342 : Ojs.t) ->
                       fun (x14343 : Ojs.t) ->
                         any_to_js
                           (x14341 ~this:(t_of_js x14342)
                              ~ev:(Event.t_of_js x14343)))) x14340)
    let (get_readyState : 'tags this -> float) =
      fun (x14345 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14345) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x14347 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14347) "url")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x14349 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14349) "withCredentials")
    let (close : 'tags this -> unit) =
      fun (x14351 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14351) "close" [||])
    let (get_CLOSED : 'tags this -> float) =
      fun (x14353 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14353) "CLOSED")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x14355 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14355) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x14357 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14357) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14368 : 'tags this) ->
        fun ~type_:(x14359 : 'K) ->
          fun ~listener:(x14360 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14361 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14370 = this_to_js Obj.magic x14368 in
                   Ojs.call (Ojs.get_prop_ascii x14370 "addEventListener")
                     "apply"
                     [|x14370;((let x14362 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14362 "push"
                                     [|(Obj.magic x14359)|]);
                                ignore
                                  (Ojs.call x14362 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14366 : Ojs.t) ->
                                             fun (x14367 : Ojs.t) ->
                                               any_to_js
                                                 (x14360
                                                    ~this:(t_of_js x14366)
                                                    ~ev:(any_of_js x14367))))|]);
                                (match x14361 with
                                 | Some x14363 ->
                                     ignore
                                       (Ojs.call x14362 "push"
                                          [|((match x14363 with
                                              | `U1 x14364 ->
                                                  Ojs.bool_to_js x14364
                                              | `U2 x14365 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14365))|])
                                 | None -> ());
                                x14362))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:(this:t -> event:MessageEvent.t_0 -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14380 : 'tags this) ->
        fun ~type_:(x14371 : string) ->
          fun ~listener:(x14372 : this:t -> event:MessageEvent.t_0 -> any) ->
            fun
              ?options:(x14373 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14382 = this_to_js Obj.magic x14380 in
                   Ojs.call (Ojs.get_prop_ascii x14382 "addEventListener")
                     "apply"
                     [|x14382;((let x14374 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14374 "push"
                                     [|(Ojs.string_to_js x14371)|]);
                                ignore
                                  (Ojs.call x14374 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14378 : Ojs.t) ->
                                             fun (x14379 : Ojs.t) ->
                                               any_to_js
                                                 (x14372
                                                    ~this:(t_of_js x14378)
                                                    ~event:(MessageEvent.t_0_of_js
                                                              x14379))))|]);
                                (match x14373 with
                                 | Some x14375 ->
                                     ignore
                                       (Ojs.call x14374 "push"
                                          [|((match x14375 with
                                              | `U1 x14376 ->
                                                  Ojs.bool_to_js x14376
                                              | `U2 x14377 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14377))|])
                                 | None -> ());
                                x14374))|])
    let (addEventListener'' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14390 : 'tags this) ->
        fun ~type_:(x14383 : string) ->
          fun ~listener:(x14384 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14385 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14392 = this_to_js Obj.magic x14390 in
                   Ojs.call (Ojs.get_prop_ascii x14392 "addEventListener")
                     "apply"
                     [|x14392;((let x14386 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14386 "push"
                                     [|(Ojs.string_to_js x14383)|]);
                                ignore
                                  (Ojs.call x14386 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14384)|]);
                                (match x14385 with
                                 | Some x14387 ->
                                     ignore
                                       (Ojs.call x14386 "push"
                                          [|((match x14387 with
                                              | `U1 x14388 ->
                                                  Ojs.bool_to_js x14388
                                              | `U2 x14389 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14389))|])
                                 | None -> ());
                                x14386))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14402 : 'tags this) ->
        fun ~type_:(x14393 : 'K) ->
          fun ~listener:(x14394 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14395 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14404 = this_to_js Obj.magic x14402 in
                   Ojs.call (Ojs.get_prop_ascii x14404 "removeEventListener")
                     "apply"
                     [|x14404;((let x14396 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14396 "push"
                                     [|(Obj.magic x14393)|]);
                                ignore
                                  (Ojs.call x14396 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14400 : Ojs.t) ->
                                             fun (x14401 : Ojs.t) ->
                                               any_to_js
                                                 (x14394
                                                    ~this:(t_of_js x14400)
                                                    ~ev:(any_of_js x14401))))|]);
                                (match x14395 with
                                 | Some x14397 ->
                                     ignore
                                       (Ojs.call x14396 "push"
                                          [|((match x14397 with
                                              | `U1 x14398 ->
                                                  Ojs.bool_to_js x14398
                                              | `U2 x14399 ->
                                                  EventListenerOptions.t_to_js
                                                    x14399))|])
                                 | None -> ());
                                x14396))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:(this:t -> event:MessageEvent.t_0 -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14414 : 'tags this) ->
        fun ~type_:(x14405 : string) ->
          fun ~listener:(x14406 : this:t -> event:MessageEvent.t_0 -> any) ->
            fun
              ?options:(x14407 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14416 = this_to_js Obj.magic x14414 in
                   Ojs.call (Ojs.get_prop_ascii x14416 "removeEventListener")
                     "apply"
                     [|x14416;((let x14408 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14408 "push"
                                     [|(Ojs.string_to_js x14405)|]);
                                ignore
                                  (Ojs.call x14408 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14412 : Ojs.t) ->
                                             fun (x14413 : Ojs.t) ->
                                               any_to_js
                                                 (x14406
                                                    ~this:(t_of_js x14412)
                                                    ~event:(MessageEvent.t_0_of_js
                                                              x14413))))|]);
                                (match x14407 with
                                 | Some x14409 ->
                                     ignore
                                       (Ojs.call x14408 "push"
                                          [|((match x14409 with
                                              | `U1 x14410 ->
                                                  Ojs.bool_to_js x14410
                                              | `U2 x14411 ->
                                                  EventListenerOptions.t_to_js
                                                    x14411))|])
                                 | None -> ());
                                x14408))|])
    let (removeEventListener'' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14424 : 'tags this) ->
        fun ~type_:(x14417 : string) ->
          fun ~listener:(x14418 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14419 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14426 = this_to_js Obj.magic x14424 in
                   Ojs.call (Ojs.get_prop_ascii x14426 "removeEventListener")
                     "apply"
                     [|x14426;((let x14420 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14420 "push"
                                     [|(Ojs.string_to_js x14417)|]);
                                ignore
                                  (Ojs.call x14420 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14418)|]);
                                (match x14419 with
                                 | Some x14421 ->
                                     ignore
                                       (Ojs.call x14420 "push"
                                          [|((match x14421 with
                                              | `U1 x14422 ->
                                                  Ojs.bool_to_js x14422
                                              | `U2 x14423 ->
                                                  EventListenerOptions.t_to_js
                                                    x14423))|])
                                 | None -> ());
                                x14420))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "prototype")
    let (create :
      url:[ `U1 of string  | `U2 of URL.t ] ->
        ?eventSourceInitDict:EventSourceInit.t -> unit -> t)
      =
      fun ~url:(x14427 : [ `U1 of string  | `U2 of URL.t ]) ->
        fun ?eventSourceInitDict:(x14428 : EventSourceInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EventSource")
                 (let x14429 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x14429 "push"
                       [|((match x14427 with
                           | `U1 x14431 -> Ojs.string_to_js x14431
                           | `U2 x14432 -> URL.t_to_js x14432))|]);
                  (match x14428 with
                   | Some x14430 ->
                       ignore
                         (Ojs.call x14429 "push"
                            [|(EventSourceInit.t_to_js x14430)|])
                   | None -> ());
                  x14429))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CLOSED")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "OPEN")
  end
module EXT_texture_compression_rgtc =
  struct
    type t = [ `EXT_texture_compression_rgtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14434 : Ojs.t) -> t_of_js x14434
    and t_0_to_js : t_0 -> Ojs.t = fun (x14433 : t) -> t_to_js x14433
    type tags = [ `EXT_texture_compression_rgtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14437 : Ojs.t) -> intf_of_js __tags_of_js x14437
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14435 : __tags intf) -> intf_to_js __tags_to_js x14435
    let (get_COMPRESSED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t) =
      fun (x14439 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14439)
             "COMPRESSED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x14441 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14441)
             "COMPRESSED_RED_RGTC1_EXT")
    let (get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t)
      =
      fun (x14443 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14443)
             "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_SIGNED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x14445 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14445)
             "COMPRESSED_SIGNED_RED_RGTC1_EXT")
    let (create :
      compressed_red_green_rgtc2_ext:GLenum.t ->
        compressed_red_rgtc1_ext:GLenum.t ->
          compressed_signed_red_green_rgtc2_ext:GLenum.t ->
            compressed_signed_red_rgtc1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_red_green_rgtc2_ext:(x14447 : GLenum.t) ->
        fun ~compressed_red_rgtc1_ext:(x14448 : GLenum.t) ->
          fun ~compressed_signed_red_green_rgtc2_ext:(x14449 : GLenum.t) ->
            fun ~compressed_signed_red_rgtc1_ext:(x14450 : GLenum.t) ->
              fun () ->
                let x14451 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14451 "COMPRESSED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x14447);
                Ojs.set_prop_ascii x14451 "COMPRESSED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x14448);
                Ojs.set_prop_ascii x14451
                  "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x14449);
                Ojs.set_prop_ascii x14451 "COMPRESSED_SIGNED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x14450);
                t_of_js x14451
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14453 : Ojs.t) -> t_of_js x14453
    and t_0_to_js : t_0 -> Ojs.t = fun (x14452 : t) -> t_to_js x14452
    type tags =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14456 : Ojs.t) -> intf_of_js __tags_of_js x14456
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14454 : __tags intf) -> intf_to_js __tags_to_js x14454
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14458 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14458) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14460 : 'tags this) ->
        fun (x14461 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14460) "message"
            (MessageEvent.t_0_to_js x14461)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x14463 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14463) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14465 : 'tags this) ->
        fun (x14466 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14465) "messageerror"
            (MessageEvent.t_0_to_js x14466)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x14468 : MessageEvent.t_0) ->
        fun ~messageerror:(x14469 : MessageEvent.t_0) ->
          fun () ->
            let x14470 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14470 "message"
              (MessageEvent.t_0_to_js x14468);
            Ojs.set_prop_ascii x14470 "messageerror"
              (MessageEvent.t_0_to_js x14469);
            t_of_js x14470
    let cast_from = Obj.magic
  end
module FrameRequestCallback =
  struct
    type t = [ `FrameRequestCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14472 : Ojs.t) -> t_of_js x14472
    and t_0_to_js : t_0 -> Ojs.t = fun (x14471 : t) -> t_to_js x14471
    type tags = [ `FrameRequestCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FrameRequestCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14475 : Ojs.t) -> intf_of_js __tags_of_js x14475
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14473 : __tags intf) -> intf_to_js __tags_to_js x14473
    let (apply : 'tags this -> time:DOMHighResTimeStamp.t -> unit) =
      fun (x14478 : 'tags this) ->
        fun ~time:(x14477 : DOMHighResTimeStamp.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic x14478)
               [|(DOMHighResTimeStamp.t_to_js x14477)|])
    let cast_from = Obj.magic
  end
module AnimationFrameProvider =
  struct
    type t = [ `AnimationFrameProvider ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14481 : Ojs.t) -> t_of_js x14481
    and t_0_to_js : t_0 -> Ojs.t = fun (x14480 : t) -> t_to_js x14480
    type tags = [ `AnimationFrameProvider ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AnimationFrameProvider ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14484 : Ojs.t) -> intf_of_js __tags_of_js x14484
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14482 : __tags intf) -> intf_to_js __tags_to_js x14482
    let (cancelAnimationFrame : 'tags this -> handle:float -> unit) =
      fun (x14487 : 'tags this) ->
        fun ~handle:(x14486 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14487) "cancelAnimationFrame"
               [|(Ojs.float_to_js x14486)|])
    let (requestAnimationFrame :
      'tags this -> callback:FrameRequestCallback.t -> float) =
      fun (x14490 : 'tags this) ->
        fun ~callback:(x14489 : FrameRequestCallback.t) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x14490) "requestAnimationFrame"
               [|(FrameRequestCallback.t_to_js x14489)|])
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScope =
  struct
    type t =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14493 : Ojs.t) -> t_of_js x14493
    and t_0_to_js : t_0 -> Ojs.t = fun (x14492 : t) -> t_to_js x14492
    type tags =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14496 : Ojs.t) -> intf_of_js __tags_of_js x14496
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14494 : __tags intf) -> intf_to_js __tags_to_js x14494
    let (get_name : 'tags this -> string) =
      fun (x14498 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14498) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14500 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14502 : Ojs.t) ->
             fun ~this:(x14503 : t) ->
               fun ~ev:(x14504 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14502
                      [|(t_to_js x14503);(MessageEvent.t_0_to_js x14504)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14500) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14505 : 'tags this) ->
        fun (x14506 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14505) "onmessage"
            (Ojs.option_to_js
               (fun (x14507 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14508 : Ojs.t) ->
                       fun (x14509 : Ojs.t) ->
                         any_to_js
                           (x14507 ~this:(t_of_js x14508)
                              ~ev:(MessageEvent.t_0_of_js x14509)))) x14506)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x14511 : 'tags this) ->
        Ojs.option_of_js
          (fun (x14513 : Ojs.t) ->
             fun ~this:(x14514 : t) ->
               fun ~ev:(x14515 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14513
                      [|(t_to_js x14514);(MessageEvent.t_0_to_js x14515)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14511) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x14516 : 'tags this) ->
        fun (x14517 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14516) "onmessageerror"
            (Ojs.option_to_js
               (fun (x14518 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14519 : Ojs.t) ->
                       fun (x14520 : Ojs.t) ->
                         any_to_js
                           (x14518 ~this:(t_of_js x14519)
                              ~ev:(MessageEvent.t_0_of_js x14520)))) x14517)
    let (close : 'tags this -> unit) =
      fun (x14522 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14522) "close" [||])
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x14527 : 'tags this) ->
        fun ~message:(x14524 : any) ->
          fun ~transfer:(x14525 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14527) "postMessage"
                 [|(any_to_js x14524);(Ojs.list_to_js Transferable.t_to_js
                                         x14525)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x14533 : 'tags this) ->
        fun ~message:(x14529 : any) ->
          fun ?options:(x14530 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x14535 = this_to_js Obj.magic x14533 in
                 Ojs.call (Ojs.get_prop_ascii x14535 "postMessage") "apply"
                   [|x14535;((let x14531 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x14531 "push"
                                   [|(any_to_js x14529)|]);
                              (match x14530 with
                               | Some x14532 ->
                                   ignore
                                     (Ojs.call x14531 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x14532)|])
                               | None -> ());
                              x14531))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14545 : 'tags this) ->
        fun ~type_:(x14536 : 'K) ->
          fun ~listener:(x14537 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14538 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14547 = this_to_js Obj.magic x14545 in
                   Ojs.call (Ojs.get_prop_ascii x14547 "addEventListener")
                     "apply"
                     [|x14547;((let x14539 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14539 "push"
                                     [|(Obj.magic x14536)|]);
                                ignore
                                  (Ojs.call x14539 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14543 : Ojs.t) ->
                                             fun (x14544 : Ojs.t) ->
                                               any_to_js
                                                 (x14537
                                                    ~this:(t_of_js x14543)
                                                    ~ev:(any_of_js x14544))))|]);
                                (match x14538 with
                                 | Some x14540 ->
                                     ignore
                                       (Ojs.call x14539 "push"
                                          [|((match x14540 with
                                              | `U1 x14541 ->
                                                  Ojs.bool_to_js x14541
                                              | `U2 x14542 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14542))|])
                                 | None -> ());
                                x14539))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14555 : 'tags this) ->
        fun ~type_:(x14548 : string) ->
          fun ~listener:(x14549 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14550 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14557 = this_to_js Obj.magic x14555 in
                   Ojs.call (Ojs.get_prop_ascii x14557 "addEventListener")
                     "apply"
                     [|x14557;((let x14551 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14551 "push"
                                     [|(Ojs.string_to_js x14548)|]);
                                ignore
                                  (Ojs.call x14551 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14549)|]);
                                (match x14550 with
                                 | Some x14552 ->
                                     ignore
                                       (Ojs.call x14551 "push"
                                          [|((match x14552 with
                                              | `U1 x14553 ->
                                                  Ojs.bool_to_js x14553
                                              | `U2 x14554 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x14554))|])
                                 | None -> ());
                                x14551))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14567 : 'tags this) ->
        fun ~type_:(x14558 : 'K) ->
          fun ~listener:(x14559 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14560 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14569 = this_to_js Obj.magic x14567 in
                   Ojs.call (Ojs.get_prop_ascii x14569 "removeEventListener")
                     "apply"
                     [|x14569;((let x14561 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14561 "push"
                                     [|(Obj.magic x14558)|]);
                                ignore
                                  (Ojs.call x14561 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14565 : Ojs.t) ->
                                             fun (x14566 : Ojs.t) ->
                                               any_to_js
                                                 (x14559
                                                    ~this:(t_of_js x14565)
                                                    ~ev:(any_of_js x14566))))|]);
                                (match x14560 with
                                 | Some x14562 ->
                                     ignore
                                       (Ojs.call x14561 "push"
                                          [|((match x14562 with
                                              | `U1 x14563 ->
                                                  Ojs.bool_to_js x14563
                                              | `U2 x14564 ->
                                                  EventListenerOptions.t_to_js
                                                    x14564))|])
                                 | None -> ());
                                x14561))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x14577 : 'tags this) ->
        fun ~type_:(x14570 : string) ->
          fun ~listener:(x14571 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14572 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x14579 = this_to_js Obj.magic x14577 in
                   Ojs.call (Ojs.get_prop_ascii x14579 "removeEventListener")
                     "apply"
                     [|x14579;((let x14573 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14573 "push"
                                     [|(Ojs.string_to_js x14570)|]);
                                ignore
                                  (Ojs.call x14573 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14571)|]);
                                (match x14572 with
                                 | Some x14574 ->
                                     ignore
                                       (Ojs.call x14573 "push"
                                          [|((match x14574 with
                                              | `U1 x14575 ->
                                                  Ojs.bool_to_js x14575
                                              | `U2 x14576 ->
                                                  EventListenerOptions.t_to_js
                                                    x14576))|])
                                 | None -> ());
                                x14573))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             [||])
  end
module DOMRectInit =
  struct
    type t = [ `DOMRectInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14581 : Ojs.t) -> t_of_js x14581
    and t_0_to_js : t_0 -> Ojs.t = fun (x14580 : t) -> t_to_js x14580
    type tags = [ `DOMRectInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14584 : Ojs.t) -> intf_of_js __tags_of_js x14584
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14582 : __tags intf) -> intf_to_js __tags_to_js x14582
    let (get_height : 'tags this -> float) =
      fun (x14586 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14586) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x14588 : 'tags this) ->
        fun (x14589 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14588) "height"
            (Ojs.float_to_js x14589)
    let (get_width : 'tags this -> float) =
      fun (x14591 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14591) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x14593 : 'tags this) ->
        fun (x14594 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14593) "width"
            (Ojs.float_to_js x14594)
    let (get_x : 'tags this -> float) =
      fun (x14596 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14596) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14598 : 'tags this) ->
        fun (x14599 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14598) "x"
            (Ojs.float_to_js x14599)
    let (get_y : 'tags this -> float) =
      fun (x14601 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14601) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14603 : 'tags this) ->
        fun (x14604 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14603) "y"
            (Ojs.float_to_js x14604)
    let (create :
      height:float -> width:float -> x:float -> y:float -> unit -> t) =
      fun ~height:(x14606 : float) ->
        fun ~width:(x14607 : float) ->
          fun ~x:(x14608 : float) ->
            fun ~y:(x14609 : float) ->
              fun () ->
                let x14610 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14610 "height" (Ojs.float_to_js x14606);
                Ojs.set_prop_ascii x14610 "width" (Ojs.float_to_js x14607);
                Ojs.set_prop_ascii x14610 "x" (Ojs.float_to_js x14608);
                Ojs.set_prop_ascii x14610 "y" (Ojs.float_to_js x14609);
                t_of_js x14610
    let cast_from = Obj.magic
  end
module DOMRectReadOnly =
  struct
    type t = [ `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14612 : Ojs.t) -> t_of_js x14612
    and t_0_to_js : t_0 -> Ojs.t = fun (x14611 : t) -> t_to_js x14611
    type tags = [ `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14615 : Ojs.t) -> intf_of_js __tags_of_js x14615
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14613 : __tags intf) -> intf_to_js __tags_to_js x14613
    let (get_bottom : 'tags this -> float) =
      fun (x14617 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14617) "bottom")
    let (get_height : 'tags this -> float) =
      fun (x14619 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14619) "height")
    let (get_left : 'tags this -> float) =
      fun (x14621 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14621) "left")
    let (get_right : 'tags this -> float) =
      fun (x14623 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14623) "right")
    let (get_top : 'tags this -> float) =
      fun (x14625 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14625) "top")
    let (get_width : 'tags this -> float) =
      fun (x14627 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14627) "width")
    let (get_x : 'tags this -> float) =
      fun (x14629 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14629) "x")
    let (get_y : 'tags this -> float) =
      fun (x14631 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14631) "y")
    let (toJSON : 'tags this -> any) =
      fun (x14633 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14633) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly") "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x14635 : float option) ->
        fun ?y:(x14636 : float option) ->
          fun ?width:(x14637 : float option) ->
            fun ?height:(x14638 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
                     (let x14639 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14635 with
                       | Some x14643 ->
                           ignore
                             (Ojs.call x14639 "push"
                                [|(Ojs.float_to_js x14643)|])
                       | None -> ());
                      (match x14636 with
                       | Some x14642 ->
                           ignore
                             (Ojs.call x14639 "push"
                                [|(Ojs.float_to_js x14642)|])
                       | None -> ());
                      (match x14637 with
                       | Some x14641 ->
                           ignore
                             (Ojs.call x14639 "push"
                                [|(Ojs.float_to_js x14641)|])
                       | None -> ());
                      (match x14638 with
                       | Some x14640 ->
                           ignore
                             (Ojs.call x14639 "push"
                                [|(Ojs.float_to_js x14640)|])
                       | None -> ());
                      x14639))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x14644 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x14647 = Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x14647 "fromRect") "apply"
               [|x14647;((let x14645 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14644 with
                           | Some x14646 ->
                               ignore
                                 (Ojs.call x14645 "push"
                                    [|(DOMRectInit.t_to_js x14646)|])
                           | None -> ());
                          x14645))|])
  end
module DOMRect =
  struct
    type t = [ `DOMRect  | `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14649 : Ojs.t) -> t_of_js x14649
    and t_0_to_js : t_0 -> Ojs.t = fun (x14648 : t) -> t_to_js x14648
    type tags = [ `DOMRect  | `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14652 : Ojs.t) -> intf_of_js __tags_of_js x14652
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14650 : __tags intf) -> intf_to_js __tags_to_js x14650
    let (get_height : 'tags this -> float) =
      fun (x14654 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14654) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x14656 : 'tags this) ->
        fun (x14657 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14656) "height"
            (Ojs.float_to_js x14657)
    let (get_width : 'tags this -> float) =
      fun (x14659 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14659) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x14661 : 'tags this) ->
        fun (x14662 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14661) "width"
            (Ojs.float_to_js x14662)
    let (get_x : 'tags this -> float) =
      fun (x14664 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14664) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14666 : 'tags this) ->
        fun (x14667 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14666) "x"
            (Ojs.float_to_js x14667)
    let (get_y : 'tags this -> float) =
      fun (x14669 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14669) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14671 : 'tags this) ->
        fun (x14672 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14671) "y"
            (Ojs.float_to_js x14672)
    let (create :
      height:float -> width:float -> x:float -> y:float -> unit -> t) =
      fun ~height:(x14674 : float) ->
        fun ~width:(x14675 : float) ->
          fun ~x:(x14676 : float) ->
            fun ~y:(x14677 : float) ->
              fun () ->
                let x14678 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14678 "height" (Ojs.float_to_js x14674);
                Ojs.set_prop_ascii x14678 "width" (Ojs.float_to_js x14675);
                Ojs.set_prop_ascii x14678 "x" (Ojs.float_to_js x14676);
                Ojs.set_prop_ascii x14678 "y" (Ojs.float_to_js x14677);
                t_of_js x14678
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMRect")
             "prototype")
    let (create' :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x14679 : float option) ->
        fun ?y:(x14680 : float option) ->
          fun ?width:(x14681 : float option) ->
            fun ?height:(x14682 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMRect")
                     (let x14683 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14679 with
                       | Some x14687 ->
                           ignore
                             (Ojs.call x14683 "push"
                                [|(Ojs.float_to_js x14687)|])
                       | None -> ());
                      (match x14680 with
                       | Some x14686 ->
                           ignore
                             (Ojs.call x14683 "push"
                                [|(Ojs.float_to_js x14686)|])
                       | None -> ());
                      (match x14681 with
                       | Some x14685 ->
                           ignore
                             (Ojs.call x14683 "push"
                                [|(Ojs.float_to_js x14685)|])
                       | None -> ());
                      (match x14682 with
                       | Some x14684 ->
                           ignore
                             (Ojs.call x14683 "push"
                                [|(Ojs.float_to_js x14684)|])
                       | None -> ());
                      x14683))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x14688 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x14691 = Ojs.get_prop_ascii Ojs.global "DOMRect" in
             Ojs.call (Ojs.get_prop_ascii x14691 "fromRect") "apply"
               [|x14691;((let x14689 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14688 with
                           | Some x14690 ->
                               ignore
                                 (Ojs.call x14689 "push"
                                    [|(DOMRectInit.t_to_js x14690)|])
                           | None -> ());
                          x14689))|])
  end
module DOMPointInit =
  struct
    type t = [ `DOMPointInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14693 : Ojs.t) -> t_of_js x14693
    and t_0_to_js : t_0 -> Ojs.t = fun (x14692 : t) -> t_to_js x14692
    type tags = [ `DOMPointInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14696 : Ojs.t) -> intf_of_js __tags_of_js x14696
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14694 : __tags intf) -> intf_to_js __tags_to_js x14694
    let (get_w : 'tags this -> float) =
      fun (x14698 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14698) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x14700 : 'tags this) ->
        fun (x14701 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14700) "w"
            (Ojs.float_to_js x14701)
    let (get_x : 'tags this -> float) =
      fun (x14703 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14703) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14705 : 'tags this) ->
        fun (x14706 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14705) "x"
            (Ojs.float_to_js x14706)
    let (get_y : 'tags this -> float) =
      fun (x14708 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14708) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14710 : 'tags this) ->
        fun (x14711 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14710) "y"
            (Ojs.float_to_js x14711)
    let (get_z : 'tags this -> float) =
      fun (x14713 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14713) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x14715 : 'tags this) ->
        fun (x14716 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14715) "z"
            (Ojs.float_to_js x14716)
    let (create : w:float -> x:float -> y:float -> z:float -> unit -> t) =
      fun ~w:(x14718 : float) ->
        fun ~x:(x14719 : float) ->
          fun ~y:(x14720 : float) ->
            fun ~z:(x14721 : float) ->
              fun () ->
                let x14722 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14722 "w" (Ojs.float_to_js x14718);
                Ojs.set_prop_ascii x14722 "x" (Ojs.float_to_js x14719);
                Ojs.set_prop_ascii x14722 "y" (Ojs.float_to_js x14720);
                Ojs.set_prop_ascii x14722 "z" (Ojs.float_to_js x14721);
                t_of_js x14722
    let cast_from = Obj.magic
  end
module DOMQuadInit =
  struct
    type t = [ `DOMQuadInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14724 : Ojs.t) -> t_of_js x14724
    and t_0_to_js : t_0 -> Ojs.t = fun (x14723 : t) -> t_to_js x14723
    type tags = [ `DOMQuadInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14727 : Ojs.t) -> intf_of_js __tags_of_js x14727
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14725 : __tags intf) -> intf_to_js __tags_to_js x14725
    let (get_p1 : 'tags this -> DOMPointInit.t) =
      fun (x14729 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14729) "p1")
    let (set_p1 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14731 : 'tags this) ->
        fun (x14732 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14731) "p1"
            (DOMPointInit.t_to_js x14732)
    let (get_p2 : 'tags this -> DOMPointInit.t) =
      fun (x14734 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14734) "p2")
    let (set_p2 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14736 : 'tags this) ->
        fun (x14737 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14736) "p2"
            (DOMPointInit.t_to_js x14737)
    let (get_p3 : 'tags this -> DOMPointInit.t) =
      fun (x14739 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14739) "p3")
    let (set_p3 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14741 : 'tags this) ->
        fun (x14742 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14741) "p3"
            (DOMPointInit.t_to_js x14742)
    let (get_p4 : 'tags this -> DOMPointInit.t) =
      fun (x14744 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14744) "p4")
    let (set_p4 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14746 : 'tags this) ->
        fun (x14747 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14746) "p4"
            (DOMPointInit.t_to_js x14747)
    let (create :
      p1:DOMPointInit.t ->
        p2:DOMPointInit.t ->
          p3:DOMPointInit.t -> p4:DOMPointInit.t -> unit -> t)
      =
      fun ~p1:(x14749 : DOMPointInit.t) ->
        fun ~p2:(x14750 : DOMPointInit.t) ->
          fun ~p3:(x14751 : DOMPointInit.t) ->
            fun ~p4:(x14752 : DOMPointInit.t) ->
              fun () ->
                let x14753 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14753 "p1" (DOMPointInit.t_to_js x14749);
                Ojs.set_prop_ascii x14753 "p2" (DOMPointInit.t_to_js x14750);
                Ojs.set_prop_ascii x14753 "p3" (DOMPointInit.t_to_js x14751);
                Ojs.set_prop_ascii x14753 "p4" (DOMPointInit.t_to_js x14752);
                t_of_js x14753
    let cast_from = Obj.magic
  end
module DOMMatrixInit =
  struct
    type t = [ `DOMMatrix2DInit  | `DOMMatrixInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14755 : Ojs.t) -> t_of_js x14755
    and t_0_to_js : t_0 -> Ojs.t = fun (x14754 : t) -> t_to_js x14754
    type tags = [ `DOMMatrix2DInit  | `DOMMatrixInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14758 : Ojs.t) -> intf_of_js __tags_of_js x14758
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14756 : __tags intf) -> intf_to_js __tags_to_js x14756
    let (get_is2D : 'tags this -> bool) =
      fun (x14760 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14760) "is2D")
    let (set_is2D : 'tags this -> bool -> unit) =
      fun (x14762 : 'tags this) ->
        fun (x14763 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14762) "is2D"
            (Ojs.bool_to_js x14763)
    let (get_m13 : 'tags this -> float) =
      fun (x14765 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14765) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x14767 : 'tags this) ->
        fun (x14768 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14767) "m13"
            (Ojs.float_to_js x14768)
    let (get_m14 : 'tags this -> float) =
      fun (x14770 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14770) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x14772 : 'tags this) ->
        fun (x14773 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14772) "m14"
            (Ojs.float_to_js x14773)
    let (get_m23 : 'tags this -> float) =
      fun (x14775 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14775) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x14777 : 'tags this) ->
        fun (x14778 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14777) "m23"
            (Ojs.float_to_js x14778)
    let (get_m24 : 'tags this -> float) =
      fun (x14780 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14780) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x14782 : 'tags this) ->
        fun (x14783 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14782) "m24"
            (Ojs.float_to_js x14783)
    let (get_m31 : 'tags this -> float) =
      fun (x14785 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14785) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x14787 : 'tags this) ->
        fun (x14788 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14787) "m31"
            (Ojs.float_to_js x14788)
    let (get_m32 : 'tags this -> float) =
      fun (x14790 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14790) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x14792 : 'tags this) ->
        fun (x14793 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14792) "m32"
            (Ojs.float_to_js x14793)
    let (get_m33 : 'tags this -> float) =
      fun (x14795 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14795) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x14797 : 'tags this) ->
        fun (x14798 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14797) "m33"
            (Ojs.float_to_js x14798)
    let (get_m34 : 'tags this -> float) =
      fun (x14800 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14800) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x14802 : 'tags this) ->
        fun (x14803 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14802) "m34"
            (Ojs.float_to_js x14803)
    let (get_m43 : 'tags this -> float) =
      fun (x14805 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14805) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x14807 : 'tags this) ->
        fun (x14808 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14807) "m43"
            (Ojs.float_to_js x14808)
    let (get_m44 : 'tags this -> float) =
      fun (x14810 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14810) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x14812 : 'tags this) ->
        fun (x14813 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14812) "m44"
            (Ojs.float_to_js x14813)
    let (create :
      is2D:bool ->
        m13:float ->
          m14:float ->
            m23:float ->
              m24:float ->
                m31:float ->
                  m32:float ->
                    m33:float ->
                      m34:float -> m43:float -> m44:float -> unit -> t)
      =
      fun ~is2D:(x14815 : bool) ->
        fun ~m13:(x14816 : float) ->
          fun ~m14:(x14817 : float) ->
            fun ~m23:(x14818 : float) ->
              fun ~m24:(x14819 : float) ->
                fun ~m31:(x14820 : float) ->
                  fun ~m32:(x14821 : float) ->
                    fun ~m33:(x14822 : float) ->
                      fun ~m34:(x14823 : float) ->
                        fun ~m43:(x14824 : float) ->
                          fun ~m44:(x14825 : float) ->
                            fun () ->
                              let x14826 = Ojs.empty_obj () in
                              Ojs.set_prop_ascii x14826 "is2D"
                                (Ojs.bool_to_js x14815);
                              Ojs.set_prop_ascii x14826 "m13"
                                (Ojs.float_to_js x14816);
                              Ojs.set_prop_ascii x14826 "m14"
                                (Ojs.float_to_js x14817);
                              Ojs.set_prop_ascii x14826 "m23"
                                (Ojs.float_to_js x14818);
                              Ojs.set_prop_ascii x14826 "m24"
                                (Ojs.float_to_js x14819);
                              Ojs.set_prop_ascii x14826 "m31"
                                (Ojs.float_to_js x14820);
                              Ojs.set_prop_ascii x14826 "m32"
                                (Ojs.float_to_js x14821);
                              Ojs.set_prop_ascii x14826 "m33"
                                (Ojs.float_to_js x14822);
                              Ojs.set_prop_ascii x14826 "m34"
                                (Ojs.float_to_js x14823);
                              Ojs.set_prop_ascii x14826 "m43"
                                (Ojs.float_to_js x14824);
                              Ojs.set_prop_ascii x14826 "m44"
                                (Ojs.float_to_js x14825);
                              t_of_js x14826
    let cast_from = Obj.magic
  end
module rec
  DOMPoint:sig
             type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `DOMPoint  | `DOMPointReadOnly ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags = [ `DOMPoint  | `DOMPointReadOnly ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_w : 'tags this -> float
             val set_w : 'tags this -> float -> unit
             val get_x : 'tags this -> float
             val set_x : 'tags this -> float -> unit
             val get_y : 'tags this -> float
             val set_y : 'tags this -> float -> unit
             val get_z : 'tags this -> float
             val set_z : 'tags this -> float -> unit
             val create :
               w:float -> x:float -> y:float -> z:float -> unit -> t
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create' :
               ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
             val fromPoint : ?other:DOMPointInit.t -> unit -> t
           end =
  struct
    type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14828 : Ojs.t) -> t_of_js x14828
    and t_0_to_js : t_0 -> Ojs.t = fun (x14827 : t) -> t_to_js x14827
    type tags = [ `DOMPoint  | `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14831 : Ojs.t) -> intf_of_js __tags_of_js x14831
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14829 : __tags intf) -> intf_to_js __tags_to_js x14829
    let (get_w : 'tags this -> float) =
      fun (x14833 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14833) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x14835 : 'tags this) ->
        fun (x14836 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14835) "w"
            (Ojs.float_to_js x14836)
    let (get_x : 'tags this -> float) =
      fun (x14838 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14838) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14840 : 'tags this) ->
        fun (x14841 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14840) "x"
            (Ojs.float_to_js x14841)
    let (get_y : 'tags this -> float) =
      fun (x14843 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14843) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14845 : 'tags this) ->
        fun (x14846 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14845) "y"
            (Ojs.float_to_js x14846)
    let (get_z : 'tags this -> float) =
      fun (x14848 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14848) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x14850 : 'tags this) ->
        fun (x14851 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14850) "z"
            (Ojs.float_to_js x14851)
    let (create : w:float -> x:float -> y:float -> z:float -> unit -> t) =
      fun ~w:(x14853 : float) ->
        fun ~x:(x14854 : float) ->
          fun ~y:(x14855 : float) ->
            fun ~z:(x14856 : float) ->
              fun () ->
                let x14857 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14857 "w" (Ojs.float_to_js x14853);
                Ojs.set_prop_ascii x14857 "x" (Ojs.float_to_js x14854);
                Ojs.set_prop_ascii x14857 "y" (Ojs.float_to_js x14855);
                Ojs.set_prop_ascii x14857 "z" (Ojs.float_to_js x14856);
                t_of_js x14857
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMPoint")
             "prototype")
    let (create' : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x14858 : float option) ->
        fun ?y:(x14859 : float option) ->
          fun ?z:(x14860 : float option) ->
            fun ?w:(x14861 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                     (let x14862 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14858 with
                       | Some x14866 ->
                           ignore
                             (Ojs.call x14862 "push"
                                [|(Ojs.float_to_js x14866)|])
                       | None -> ());
                      (match x14859 with
                       | Some x14865 ->
                           ignore
                             (Ojs.call x14862 "push"
                                [|(Ojs.float_to_js x14865)|])
                       | None -> ());
                      (match x14860 with
                       | Some x14864 ->
                           ignore
                             (Ojs.call x14862 "push"
                                [|(Ojs.float_to_js x14864)|])
                       | None -> ());
                      (match x14861 with
                       | Some x14863 ->
                           ignore
                             (Ojs.call x14862 "push"
                                [|(Ojs.float_to_js x14863)|])
                       | None -> ());
                      x14862))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x14867 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x14870 = Ojs.get_prop_ascii Ojs.global "DOMPoint" in
             Ojs.call (Ojs.get_prop_ascii x14870 "fromPoint") "apply"
               [|x14870;((let x14868 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14867 with
                           | Some x14869 ->
                               ignore
                                 (Ojs.call x14868 "push"
                                    [|(DOMPointInit.t_to_js x14869)|])
                           | None -> ());
                          x14868))|])
  end
 and
  DOMPointReadOnly:sig
                     type t = [ `DOMPointReadOnly ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `DOMPointReadOnly ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `DOMPointReadOnly ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `DOMPointReadOnly ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_w : 'tags this -> float
                     val get_x : 'tags this -> float
                     val get_y : 'tags this -> float
                     val get_z : 'tags this -> float
                     val matrixTransform :
                       'tags this ->
                         ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t
                     val toJSON : 'tags this -> any
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create :
                       ?x:float ->
                         ?y:float -> ?z:float -> ?w:float -> unit -> t
                     val fromPoint : ?other:DOMPointInit.t -> unit -> t
                   end =
  struct
    type t = [ `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14872 : Ojs.t) -> t_of_js x14872
    and t_0_to_js : t_0 -> Ojs.t = fun (x14871 : t) -> t_to_js x14871
    type tags = [ `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14875 : Ojs.t) -> intf_of_js __tags_of_js x14875
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14873 : __tags intf) -> intf_to_js __tags_to_js x14873
    let (get_w : 'tags this -> float) =
      fun (x14877 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14877) "w")
    let (get_x : 'tags this -> float) =
      fun (x14879 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14879) "x")
    let (get_y : 'tags this -> float) =
      fun (x14881 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14881) "y")
    let (get_z : 'tags this -> float) =
      fun (x14883 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14883) "z")
    let (matrixTransform :
      'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t) =
      fun (x14888 : 'tags this) ->
        fun ?matrix:(x14885 : DOMMatrixInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x14890 = this_to_js Obj.magic x14888 in
               Ojs.call (Ojs.get_prop_ascii x14890 "matrixTransform") "apply"
                 [|x14890;((let x14886 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14885 with
                             | Some x14887 ->
                                 ignore
                                   (Ojs.call x14886 "push"
                                      [|(DOMMatrixInit.t_to_js x14887)|])
                             | None -> ());
                            x14886))|])
    let (toJSON : 'tags this -> any) =
      fun (x14891 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14891) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly") "prototype")
    let (create : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x14893 : float option) ->
        fun ?y:(x14894 : float option) ->
          fun ?z:(x14895 : float option) ->
            fun ?w:(x14896 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
                     (let x14897 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14893 with
                       | Some x14901 ->
                           ignore
                             (Ojs.call x14897 "push"
                                [|(Ojs.float_to_js x14901)|])
                       | None -> ());
                      (match x14894 with
                       | Some x14900 ->
                           ignore
                             (Ojs.call x14897 "push"
                                [|(Ojs.float_to_js x14900)|])
                       | None -> ());
                      (match x14895 with
                       | Some x14899 ->
                           ignore
                             (Ojs.call x14897 "push"
                                [|(Ojs.float_to_js x14899)|])
                       | None -> ());
                      (match x14896 with
                       | Some x14898 ->
                           ignore
                             (Ojs.call x14897 "push"
                                [|(Ojs.float_to_js x14898)|])
                       | None -> ());
                      x14897))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x14902 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x14905 = Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x14905 "fromPoint") "apply"
               [|x14905;((let x14903 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14902 with
                           | Some x14904 ->
                               ignore
                                 (Ojs.call x14903 "push"
                                    [|(DOMPointInit.t_to_js x14904)|])
                           | None -> ());
                          x14903))|])
  end
module DOMQuad =
  struct
    type t = [ `DOMQuad ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14907 : Ojs.t) -> t_of_js x14907
    and t_0_to_js : t_0 -> Ojs.t = fun (x14906 : t) -> t_to_js x14906
    type tags = [ `DOMQuad ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14910 : Ojs.t) -> intf_of_js __tags_of_js x14910
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14908 : __tags intf) -> intf_to_js __tags_to_js x14908
    let (get_p1 : 'tags this -> DOMPoint.t) =
      fun (x14912 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14912) "p1")
    let (get_p2 : 'tags this -> DOMPoint.t) =
      fun (x14914 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14914) "p2")
    let (get_p3 : 'tags this -> DOMPoint.t) =
      fun (x14916 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14916) "p3")
    let (get_p4 : 'tags this -> DOMPoint.t) =
      fun (x14918 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14918) "p4")
    let (getBounds : 'tags this -> DOMRect.t) =
      fun (x14920 : 'tags this) ->
        DOMRect.t_of_js
          (Ojs.call (this_to_js Obj.magic x14920) "getBounds" [||])
    let (toJSON : 'tags this -> any) =
      fun (x14922 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14922) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMQuad")
             "prototype")
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x14924 : DOMPointInit.t option) ->
        fun ?p2:(x14925 : DOMPointInit.t option) ->
          fun ?p3:(x14926 : DOMPointInit.t option) ->
            fun ?p4:(x14927 : DOMPointInit.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMQuad")
                     (let x14928 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14924 with
                       | Some x14932 ->
                           ignore
                             (Ojs.call x14928 "push"
                                [|(DOMPointInit.t_to_js x14932)|])
                       | None -> ());
                      (match x14925 with
                       | Some x14931 ->
                           ignore
                             (Ojs.call x14928 "push"
                                [|(DOMPointInit.t_to_js x14931)|])
                       | None -> ());
                      (match x14926 with
                       | Some x14930 ->
                           ignore
                             (Ojs.call x14928 "push"
                                [|(DOMPointInit.t_to_js x14930)|])
                       | None -> ());
                      (match x14927 with
                       | Some x14929 ->
                           ignore
                             (Ojs.call x14928 "push"
                                [|(DOMPointInit.t_to_js x14929)|])
                       | None -> ());
                      x14928))
    let (fromQuad : ?other:DOMQuadInit.t -> unit -> t) =
      fun ?other:(x14933 : DOMQuadInit.t option) ->
        fun () ->
          t_of_js
            (let x14936 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x14936 "fromQuad") "apply"
               [|x14936;((let x14934 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14933 with
                           | Some x14935 ->
                               ignore
                                 (Ojs.call x14934 "push"
                                    [|(DOMQuadInit.t_to_js x14935)|])
                           | None -> ());
                          x14934))|])
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x14937 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x14940 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x14940 "fromRect") "apply"
               [|x14940;((let x14938 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14937 with
                           | Some x14939 ->
                               ignore
                                 (Ojs.call x14938 "push"
                                    [|(DOMRectInit.t_to_js x14939)|])
                           | None -> ());
                          x14938))|])
  end
module rec
  DOMMatrix:sig
              type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_a : 'tags this -> float
              val set_a : 'tags this -> float -> unit
              val get_b : 'tags this -> float
              val set_b : 'tags this -> float -> unit
              val get_c : 'tags this -> float
              val set_c : 'tags this -> float -> unit
              val get_d : 'tags this -> float
              val set_d : 'tags this -> float -> unit
              val get_e : 'tags this -> float
              val set_e : 'tags this -> float -> unit
              val get_f : 'tags this -> float
              val set_f : 'tags this -> float -> unit
              val get_m11 : 'tags this -> float
              val set_m11 : 'tags this -> float -> unit
              val get_m12 : 'tags this -> float
              val set_m12 : 'tags this -> float -> unit
              val get_m13 : 'tags this -> float
              val set_m13 : 'tags this -> float -> unit
              val get_m14 : 'tags this -> float
              val set_m14 : 'tags this -> float -> unit
              val get_m21 : 'tags this -> float
              val set_m21 : 'tags this -> float -> unit
              val get_m22 : 'tags this -> float
              val set_m22 : 'tags this -> float -> unit
              val get_m23 : 'tags this -> float
              val set_m23 : 'tags this -> float -> unit
              val get_m24 : 'tags this -> float
              val set_m24 : 'tags this -> float -> unit
              val get_m31 : 'tags this -> float
              val set_m31 : 'tags this -> float -> unit
              val get_m32 : 'tags this -> float
              val set_m32 : 'tags this -> float -> unit
              val get_m33 : 'tags this -> float
              val set_m33 : 'tags this -> float -> unit
              val get_m34 : 'tags this -> float
              val set_m34 : 'tags this -> float -> unit
              val get_m41 : 'tags this -> float
              val set_m41 : 'tags this -> float -> unit
              val get_m42 : 'tags this -> float
              val set_m42 : 'tags this -> float -> unit
              val get_m43 : 'tags this -> float
              val set_m43 : 'tags this -> float -> unit
              val get_m44 : 'tags this -> float
              val set_m44 : 'tags this -> float -> unit
              val invertSelf : 'tags this -> t
              val multiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val preMultiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val rotateAxisAngleSelf :
                'tags this ->
                  ?x:float ->
                    ?y:float -> ?z:float -> ?angle:float -> unit -> t
              val rotateFromVectorSelf :
                'tags this -> ?x:float -> ?y:float -> unit -> t
              val rotateSelf :
                'tags this ->
                  ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t
              val scale3dSelf :
                'tags this ->
                  ?scale:float ->
                    ?originX:float ->
                      ?originY:float -> ?originZ:float -> unit -> t
              val scaleSelf :
                'tags this ->
                  ?scaleX:float ->
                    ?scaleY:float ->
                      ?scaleZ:float ->
                        ?originX:float ->
                          ?originY:float -> ?originZ:float -> unit -> t
              val skewXSelf : 'tags this -> ?sx:float -> unit -> t
              val skewYSelf : 'tags this -> ?sy:float -> unit -> t
              val translateSelf :
                'tags this ->
                  ?tx:float -> ?ty:float -> ?tz:float -> unit -> t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t
              val fromFloat32Array : Float32Array.t_0 -> t
              val fromFloat64Array : Float64Array.t_0 -> t
              val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
            end =
  struct
    type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14942 : Ojs.t) -> t_of_js x14942
    and t_0_to_js : t_0 -> Ojs.t = fun (x14941 : t) -> t_to_js x14941
    type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x14945 : Ojs.t) -> intf_of_js __tags_of_js x14945
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x14943 : __tags intf) -> intf_to_js __tags_to_js x14943
    let (get_a : 'tags this -> float) =
      fun (x14947 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14947) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x14949 : 'tags this) ->
        fun (x14950 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14949) "a"
            (Ojs.float_to_js x14950)
    let (get_b : 'tags this -> float) =
      fun (x14952 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14952) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x14954 : 'tags this) ->
        fun (x14955 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14954) "b"
            (Ojs.float_to_js x14955)
    let (get_c : 'tags this -> float) =
      fun (x14957 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14957) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x14959 : 'tags this) ->
        fun (x14960 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14959) "c"
            (Ojs.float_to_js x14960)
    let (get_d : 'tags this -> float) =
      fun (x14962 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14962) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x14964 : 'tags this) ->
        fun (x14965 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14964) "d"
            (Ojs.float_to_js x14965)
    let (get_e : 'tags this -> float) =
      fun (x14967 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14967) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x14969 : 'tags this) ->
        fun (x14970 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14969) "e"
            (Ojs.float_to_js x14970)
    let (get_f : 'tags this -> float) =
      fun (x14972 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14972) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x14974 : 'tags this) ->
        fun (x14975 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14974) "f"
            (Ojs.float_to_js x14975)
    let (get_m11 : 'tags this -> float) =
      fun (x14977 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14977) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x14979 : 'tags this) ->
        fun (x14980 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14979) "m11"
            (Ojs.float_to_js x14980)
    let (get_m12 : 'tags this -> float) =
      fun (x14982 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14982) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x14984 : 'tags this) ->
        fun (x14985 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14984) "m12"
            (Ojs.float_to_js x14985)
    let (get_m13 : 'tags this -> float) =
      fun (x14987 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14987) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x14989 : 'tags this) ->
        fun (x14990 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14989) "m13"
            (Ojs.float_to_js x14990)
    let (get_m14 : 'tags this -> float) =
      fun (x14992 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14992) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x14994 : 'tags this) ->
        fun (x14995 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14994) "m14"
            (Ojs.float_to_js x14995)
    let (get_m21 : 'tags this -> float) =
      fun (x14997 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14997) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x14999 : 'tags this) ->
        fun (x15000 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14999) "m21"
            (Ojs.float_to_js x15000)
    let (get_m22 : 'tags this -> float) =
      fun (x15002 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15002) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x15004 : 'tags this) ->
        fun (x15005 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15004) "m22"
            (Ojs.float_to_js x15005)
    let (get_m23 : 'tags this -> float) =
      fun (x15007 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15007) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x15009 : 'tags this) ->
        fun (x15010 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15009) "m23"
            (Ojs.float_to_js x15010)
    let (get_m24 : 'tags this -> float) =
      fun (x15012 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15012) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x15014 : 'tags this) ->
        fun (x15015 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15014) "m24"
            (Ojs.float_to_js x15015)
    let (get_m31 : 'tags this -> float) =
      fun (x15017 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15017) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x15019 : 'tags this) ->
        fun (x15020 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15019) "m31"
            (Ojs.float_to_js x15020)
    let (get_m32 : 'tags this -> float) =
      fun (x15022 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15022) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x15024 : 'tags this) ->
        fun (x15025 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15024) "m32"
            (Ojs.float_to_js x15025)
    let (get_m33 : 'tags this -> float) =
      fun (x15027 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15027) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x15029 : 'tags this) ->
        fun (x15030 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15029) "m33"
            (Ojs.float_to_js x15030)
    let (get_m34 : 'tags this -> float) =
      fun (x15032 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15032) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x15034 : 'tags this) ->
        fun (x15035 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15034) "m34"
            (Ojs.float_to_js x15035)
    let (get_m41 : 'tags this -> float) =
      fun (x15037 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15037) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x15039 : 'tags this) ->
        fun (x15040 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15039) "m41"
            (Ojs.float_to_js x15040)
    let (get_m42 : 'tags this -> float) =
      fun (x15042 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15042) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x15044 : 'tags this) ->
        fun (x15045 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15044) "m42"
            (Ojs.float_to_js x15045)
    let (get_m43 : 'tags this -> float) =
      fun (x15047 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15047) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x15049 : 'tags this) ->
        fun (x15050 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15049) "m43"
            (Ojs.float_to_js x15050)
    let (get_m44 : 'tags this -> float) =
      fun (x15052 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15052) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x15054 : 'tags this) ->
        fun (x15055 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15054) "m44"
            (Ojs.float_to_js x15055)
    let (invertSelf : 'tags this -> t) =
      fun (x15057 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x15057) "invertSelf" [||])
    let (multiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
      fun (x15062 : 'tags this) ->
        fun ?other:(x15059 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x15064 = this_to_js Obj.magic x15062 in
               Ojs.call (Ojs.get_prop_ascii x15064 "multiplySelf") "apply"
                 [|x15064;((let x15060 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15059 with
                             | Some x15061 ->
                                 ignore
                                   (Ojs.call x15060 "push"
                                      [|(DOMMatrixInit.t_to_js x15061)|])
                             | None -> ());
                            x15060))|])
    let (preMultiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t)
      =
      fun (x15068 : 'tags this) ->
        fun ?other:(x15065 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x15070 = this_to_js Obj.magic x15068 in
               Ojs.call (Ojs.get_prop_ascii x15070 "preMultiplySelf") "apply"
                 [|x15070;((let x15066 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15065 with
                             | Some x15067 ->
                                 ignore
                                   (Ojs.call x15066 "push"
                                      [|(DOMMatrixInit.t_to_js x15067)|])
                             | None -> ());
                            x15066))|])
    let (rotateAxisAngleSelf :
      'tags this ->
        ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t)
      =
      fun (x15080 : 'tags this) ->
        fun ?x:(x15071 : float option) ->
          fun ?y:(x15072 : float option) ->
            fun ?z:(x15073 : float option) ->
              fun ?angle:(x15074 : float option) ->
                fun () ->
                  t_of_js
                    (let x15082 = this_to_js Obj.magic x15080 in
                     Ojs.call
                       (Ojs.get_prop_ascii x15082 "rotateAxisAngleSelf")
                       "apply"
                       [|x15082;((let x15075 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15071 with
                                   | Some x15079 ->
                                       ignore
                                         (Ojs.call x15075 "push"
                                            [|(Ojs.float_to_js x15079)|])
                                   | None -> ());
                                  (match x15072 with
                                   | Some x15078 ->
                                       ignore
                                         (Ojs.call x15075 "push"
                                            [|(Ojs.float_to_js x15078)|])
                                   | None -> ());
                                  (match x15073 with
                                   | Some x15077 ->
                                       ignore
                                         (Ojs.call x15075 "push"
                                            [|(Ojs.float_to_js x15077)|])
                                   | None -> ());
                                  (match x15074 with
                                   | Some x15076 ->
                                       ignore
                                         (Ojs.call x15075 "push"
                                            [|(Ojs.float_to_js x15076)|])
                                   | None -> ());
                                  x15075))|])
    let (rotateFromVectorSelf :
      'tags this -> ?x:float -> ?y:float -> unit -> t) =
      fun (x15088 : 'tags this) ->
        fun ?x:(x15083 : float option) ->
          fun ?y:(x15084 : float option) ->
            fun () ->
              t_of_js
                (let x15090 = this_to_js Obj.magic x15088 in
                 Ojs.call (Ojs.get_prop_ascii x15090 "rotateFromVectorSelf")
                   "apply"
                   [|x15090;((let x15085 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15083 with
                               | Some x15087 ->
                                   ignore
                                     (Ojs.call x15085 "push"
                                        [|(Ojs.float_to_js x15087)|])
                               | None -> ());
                              (match x15084 with
                               | Some x15086 ->
                                   ignore
                                     (Ojs.call x15085 "push"
                                        [|(Ojs.float_to_js x15086)|])
                               | None -> ());
                              x15085))|])
    let (rotateSelf :
      'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t) =
      fun (x15098 : 'tags this) ->
        fun ?rotX:(x15091 : float option) ->
          fun ?rotY:(x15092 : float option) ->
            fun ?rotZ:(x15093 : float option) ->
              fun () ->
                t_of_js
                  (let x15100 = this_to_js Obj.magic x15098 in
                   Ojs.call (Ojs.get_prop_ascii x15100 "rotateSelf") "apply"
                     [|x15100;((let x15094 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15091 with
                                 | Some x15097 ->
                                     ignore
                                       (Ojs.call x15094 "push"
                                          [|(Ojs.float_to_js x15097)|])
                                 | None -> ());
                                (match x15092 with
                                 | Some x15096 ->
                                     ignore
                                       (Ojs.call x15094 "push"
                                          [|(Ojs.float_to_js x15096)|])
                                 | None -> ());
                                (match x15093 with
                                 | Some x15095 ->
                                     ignore
                                       (Ojs.call x15094 "push"
                                          [|(Ojs.float_to_js x15095)|])
                                 | None -> ());
                                x15094))|])
    let (scale3dSelf :
      'tags this ->
        ?scale:float ->
          ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x15110 : 'tags this) ->
        fun ?scale:(x15101 : float option) ->
          fun ?originX:(x15102 : float option) ->
            fun ?originY:(x15103 : float option) ->
              fun ?originZ:(x15104 : float option) ->
                fun () ->
                  t_of_js
                    (let x15112 = this_to_js Obj.magic x15110 in
                     Ojs.call (Ojs.get_prop_ascii x15112 "scale3dSelf")
                       "apply"
                       [|x15112;((let x15105 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15101 with
                                   | Some x15109 ->
                                       ignore
                                         (Ojs.call x15105 "push"
                                            [|(Ojs.float_to_js x15109)|])
                                   | None -> ());
                                  (match x15102 with
                                   | Some x15108 ->
                                       ignore
                                         (Ojs.call x15105 "push"
                                            [|(Ojs.float_to_js x15108)|])
                                   | None -> ());
                                  (match x15103 with
                                   | Some x15107 ->
                                       ignore
                                         (Ojs.call x15105 "push"
                                            [|(Ojs.float_to_js x15107)|])
                                   | None -> ());
                                  (match x15104 with
                                   | Some x15106 ->
                                       ignore
                                         (Ojs.call x15105 "push"
                                            [|(Ojs.float_to_js x15106)|])
                                   | None -> ());
                                  x15105))|])
    let (scaleSelf :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x15126 : 'tags this) ->
        fun ?scaleX:(x15113 : float option) ->
          fun ?scaleY:(x15114 : float option) ->
            fun ?scaleZ:(x15115 : float option) ->
              fun ?originX:(x15116 : float option) ->
                fun ?originY:(x15117 : float option) ->
                  fun ?originZ:(x15118 : float option) ->
                    fun () ->
                      t_of_js
                        (let x15128 = this_to_js Obj.magic x15126 in
                         Ojs.call (Ojs.get_prop_ascii x15128 "scaleSelf")
                           "apply"
                           [|x15128;((let x15119 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x15113 with
                                       | Some x15125 ->
                                           ignore
                                             (Ojs.call x15119 "push"
                                                [|(Ojs.float_to_js x15125)|])
                                       | None -> ());
                                      (match x15114 with
                                       | Some x15124 ->
                                           ignore
                                             (Ojs.call x15119 "push"
                                                [|(Ojs.float_to_js x15124)|])
                                       | None -> ());
                                      (match x15115 with
                                       | Some x15123 ->
                                           ignore
                                             (Ojs.call x15119 "push"
                                                [|(Ojs.float_to_js x15123)|])
                                       | None -> ());
                                      (match x15116 with
                                       | Some x15122 ->
                                           ignore
                                             (Ojs.call x15119 "push"
                                                [|(Ojs.float_to_js x15122)|])
                                       | None -> ());
                                      (match x15117 with
                                       | Some x15121 ->
                                           ignore
                                             (Ojs.call x15119 "push"
                                                [|(Ojs.float_to_js x15121)|])
                                       | None -> ());
                                      (match x15118 with
                                       | Some x15120 ->
                                           ignore
                                             (Ojs.call x15119 "push"
                                                [|(Ojs.float_to_js x15120)|])
                                       | None -> ());
                                      x15119))|])
    let (skewXSelf : 'tags this -> ?sx:float -> unit -> t) =
      fun (x15132 : 'tags this) ->
        fun ?sx:(x15129 : float option) ->
          fun () ->
            t_of_js
              (let x15134 = this_to_js Obj.magic x15132 in
               Ojs.call (Ojs.get_prop_ascii x15134 "skewXSelf") "apply"
                 [|x15134;((let x15130 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15129 with
                             | Some x15131 ->
                                 ignore
                                   (Ojs.call x15130 "push"
                                      [|(Ojs.float_to_js x15131)|])
                             | None -> ());
                            x15130))|])
    let (skewYSelf : 'tags this -> ?sy:float -> unit -> t) =
      fun (x15138 : 'tags this) ->
        fun ?sy:(x15135 : float option) ->
          fun () ->
            t_of_js
              (let x15140 = this_to_js Obj.magic x15138 in
               Ojs.call (Ojs.get_prop_ascii x15140 "skewYSelf") "apply"
                 [|x15140;((let x15136 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15135 with
                             | Some x15137 ->
                                 ignore
                                   (Ojs.call x15136 "push"
                                      [|(Ojs.float_to_js x15137)|])
                             | None -> ());
                            x15136))|])
    let (translateSelf :
      'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t) =
      fun (x15148 : 'tags this) ->
        fun ?tx:(x15141 : float option) ->
          fun ?ty:(x15142 : float option) ->
            fun ?tz:(x15143 : float option) ->
              fun () ->
                t_of_js
                  (let x15150 = this_to_js Obj.magic x15148 in
                   Ojs.call (Ojs.get_prop_ascii x15150 "translateSelf")
                     "apply"
                     [|x15150;((let x15144 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15141 with
                                 | Some x15147 ->
                                     ignore
                                       (Ojs.call x15144 "push"
                                          [|(Ojs.float_to_js x15147)|])
                                 | None -> ());
                                (match x15142 with
                                 | Some x15146 ->
                                     ignore
                                       (Ojs.call x15144 "push"
                                          [|(Ojs.float_to_js x15146)|])
                                 | None -> ());
                                (match x15143 with
                                 | Some x15145 ->
                                     ignore
                                       (Ojs.call x15144 "push"
                                          [|(Ojs.float_to_js x15145)|])
                                 | None -> ());
                                x15144))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "prototype")
    let (create : ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t)
      =
      fun ?init:(x15151 : [ `U1 of string  | `U2 of float list ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
               (let x15152 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x15151 with
                 | Some x15153 ->
                     ignore
                       (Ojs.call x15152 "push"
                          [|((match x15153 with
                              | `U1 x15154 -> Ojs.string_to_js x15154
                              | `U2 x15155 ->
                                  Ojs.list_to_js Ojs.float_to_js x15155))|])
                 | None -> ());
                x15152))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x15157 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x15157)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x15158 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x15158)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x15159 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x15162 = Ojs.get_prop_ascii Ojs.global "DOMMatrix" in
             Ojs.call (Ojs.get_prop_ascii x15162 "fromMatrix") "apply"
               [|x15162;((let x15160 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15159 with
                           | Some x15161 ->
                               ignore
                                 (Ojs.call x15160 "push"
                                    [|(DOMMatrixInit.t_to_js x15161)|])
                           | None -> ());
                          x15160))|])
  end
 and
  DOMMatrixReadOnly:sig
                      type t = [ `DOMMatrixReadOnly ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `DOMMatrixReadOnly ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `DOMMatrixReadOnly ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_a : 'tags this -> float
                      val get_b : 'tags this -> float
                      val get_c : 'tags this -> float
                      val get_d : 'tags this -> float
                      val get_e : 'tags this -> float
                      val get_f : 'tags this -> float
                      val get_is2D : 'tags this -> bool
                      val get_isIdentity : 'tags this -> bool
                      val get_m11 : 'tags this -> float
                      val get_m12 : 'tags this -> float
                      val get_m13 : 'tags this -> float
                      val get_m14 : 'tags this -> float
                      val get_m21 : 'tags this -> float
                      val get_m22 : 'tags this -> float
                      val get_m23 : 'tags this -> float
                      val get_m24 : 'tags this -> float
                      val get_m31 : 'tags this -> float
                      val get_m32 : 'tags this -> float
                      val get_m33 : 'tags this -> float
                      val get_m34 : 'tags this -> float
                      val get_m41 : 'tags this -> float
                      val get_m42 : 'tags this -> float
                      val get_m43 : 'tags this -> float
                      val get_m44 : 'tags this -> float
                      val flipX : 'tags this -> DOMMatrix.t
                      val flipY : 'tags this -> DOMMatrix.t
                      val inverse : 'tags this -> DOMMatrix.t
                      val multiply :
                        'tags this ->
                          ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t
                      val rotate :
                        'tags this ->
                          ?rotX:float ->
                            ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t
                      val rotateAxisAngle :
                        'tags this ->
                          ?x:float ->
                            ?y:float ->
                              ?z:float -> ?angle:float -> unit -> DOMMatrix.t
                      val rotateFromVector :
                        'tags this ->
                          ?x:float -> ?y:float -> unit -> DOMMatrix.t
                      val scale :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float ->
                              ?scaleZ:float ->
                                ?originX:float ->
                                  ?originY:float ->
                                    ?originZ:float -> unit -> DOMMatrix.t
                      val scale3d :
                        'tags this ->
                          ?scale:float ->
                            ?originX:float ->
                              ?originY:float ->
                                ?originZ:float -> unit -> DOMMatrix.t
                      val scaleNonUniform :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float -> unit -> DOMMatrix.t
                      val skewX :
                        'tags this -> ?sx:float -> unit -> DOMMatrix.t
                      val skewY :
                        'tags this -> ?sy:float -> unit -> DOMMatrix.t
                      val toFloat32Array : 'tags this -> Float32Array.t_0
                      val toFloat64Array : 'tags this -> Float64Array.t_0
                      val toJSON : 'tags this -> any
                      val transformPoint :
                        'tags this ->
                          ?point:DOMPointInit.t -> unit -> DOMPoint.t
                      val translate :
                        'tags this ->
                          ?tx:float ->
                            ?ty:float -> ?tz:float -> unit -> DOMMatrix.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        ?init:[ `U1 of string  | `U2 of float list ] ->
                          unit -> t
                      val fromFloat32Array : Float32Array.t_0 -> t
                      val fromFloat64Array : Float64Array.t_0 -> t
                      val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
                    end =
  struct
    type t = [ `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15164 : Ojs.t) -> t_of_js x15164
    and t_0_to_js : t_0 -> Ojs.t = fun (x15163 : t) -> t_to_js x15163
    type tags = [ `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15167 : Ojs.t) -> intf_of_js __tags_of_js x15167
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15165 : __tags intf) -> intf_to_js __tags_to_js x15165
    let (get_a : 'tags this -> float) =
      fun (x15169 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15169) "a")
    let (get_b : 'tags this -> float) =
      fun (x15171 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15171) "b")
    let (get_c : 'tags this -> float) =
      fun (x15173 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15173) "c")
    let (get_d : 'tags this -> float) =
      fun (x15175 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15175) "d")
    let (get_e : 'tags this -> float) =
      fun (x15177 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15177) "e")
    let (get_f : 'tags this -> float) =
      fun (x15179 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15179) "f")
    let (get_is2D : 'tags this -> bool) =
      fun (x15181 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15181) "is2D")
    let (get_isIdentity : 'tags this -> bool) =
      fun (x15183 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15183) "isIdentity")
    let (get_m11 : 'tags this -> float) =
      fun (x15185 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15185) "m11")
    let (get_m12 : 'tags this -> float) =
      fun (x15187 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15187) "m12")
    let (get_m13 : 'tags this -> float) =
      fun (x15189 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15189) "m13")
    let (get_m14 : 'tags this -> float) =
      fun (x15191 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15191) "m14")
    let (get_m21 : 'tags this -> float) =
      fun (x15193 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15193) "m21")
    let (get_m22 : 'tags this -> float) =
      fun (x15195 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15195) "m22")
    let (get_m23 : 'tags this -> float) =
      fun (x15197 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15197) "m23")
    let (get_m24 : 'tags this -> float) =
      fun (x15199 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15199) "m24")
    let (get_m31 : 'tags this -> float) =
      fun (x15201 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15201) "m31")
    let (get_m32 : 'tags this -> float) =
      fun (x15203 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15203) "m32")
    let (get_m33 : 'tags this -> float) =
      fun (x15205 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15205) "m33")
    let (get_m34 : 'tags this -> float) =
      fun (x15207 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15207) "m34")
    let (get_m41 : 'tags this -> float) =
      fun (x15209 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15209) "m41")
    let (get_m42 : 'tags this -> float) =
      fun (x15211 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15211) "m42")
    let (get_m43 : 'tags this -> float) =
      fun (x15213 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15213) "m43")
    let (get_m44 : 'tags this -> float) =
      fun (x15215 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15215) "m44")
    let (flipX : 'tags this -> DOMMatrix.t) =
      fun (x15217 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x15217) "flipX" [||])
    let (flipY : 'tags this -> DOMMatrix.t) =
      fun (x15219 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x15219) "flipY" [||])
    let (inverse : 'tags this -> DOMMatrix.t) =
      fun (x15221 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x15221) "inverse" [||])
    let (multiply :
      'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t) =
      fun (x15226 : 'tags this) ->
        fun ?other:(x15223 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x15228 = this_to_js Obj.magic x15226 in
               Ojs.call (Ojs.get_prop_ascii x15228 "multiply") "apply"
                 [|x15228;((let x15224 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15223 with
                             | Some x15225 ->
                                 ignore
                                   (Ojs.call x15224 "push"
                                      [|(DOMMatrixInit.t_to_js x15225)|])
                             | None -> ());
                            x15224))|])
    let (rotate :
      'tags this ->
        ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t)
      =
      fun (x15236 : 'tags this) ->
        fun ?rotX:(x15229 : float option) ->
          fun ?rotY:(x15230 : float option) ->
            fun ?rotZ:(x15231 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x15238 = this_to_js Obj.magic x15236 in
                   Ojs.call (Ojs.get_prop_ascii x15238 "rotate") "apply"
                     [|x15238;((let x15232 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15229 with
                                 | Some x15235 ->
                                     ignore
                                       (Ojs.call x15232 "push"
                                          [|(Ojs.float_to_js x15235)|])
                                 | None -> ());
                                (match x15230 with
                                 | Some x15234 ->
                                     ignore
                                       (Ojs.call x15232 "push"
                                          [|(Ojs.float_to_js x15234)|])
                                 | None -> ());
                                (match x15231 with
                                 | Some x15233 ->
                                     ignore
                                       (Ojs.call x15232 "push"
                                          [|(Ojs.float_to_js x15233)|])
                                 | None -> ());
                                x15232))|])
    let (rotateAxisAngle :
      'tags this ->
        ?x:float ->
          ?y:float -> ?z:float -> ?angle:float -> unit -> DOMMatrix.t)
      =
      fun (x15248 : 'tags this) ->
        fun ?x:(x15239 : float option) ->
          fun ?y:(x15240 : float option) ->
            fun ?z:(x15241 : float option) ->
              fun ?angle:(x15242 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x15250 = this_to_js Obj.magic x15248 in
                     Ojs.call (Ojs.get_prop_ascii x15250 "rotateAxisAngle")
                       "apply"
                       [|x15250;((let x15243 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15239 with
                                   | Some x15247 ->
                                       ignore
                                         (Ojs.call x15243 "push"
                                            [|(Ojs.float_to_js x15247)|])
                                   | None -> ());
                                  (match x15240 with
                                   | Some x15246 ->
                                       ignore
                                         (Ojs.call x15243 "push"
                                            [|(Ojs.float_to_js x15246)|])
                                   | None -> ());
                                  (match x15241 with
                                   | Some x15245 ->
                                       ignore
                                         (Ojs.call x15243 "push"
                                            [|(Ojs.float_to_js x15245)|])
                                   | None -> ());
                                  (match x15242 with
                                   | Some x15244 ->
                                       ignore
                                         (Ojs.call x15243 "push"
                                            [|(Ojs.float_to_js x15244)|])
                                   | None -> ());
                                  x15243))|])
    let (rotateFromVector :
      'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t) =
      fun (x15256 : 'tags this) ->
        fun ?x:(x15251 : float option) ->
          fun ?y:(x15252 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x15258 = this_to_js Obj.magic x15256 in
                 Ojs.call (Ojs.get_prop_ascii x15258 "rotateFromVector")
                   "apply"
                   [|x15258;((let x15253 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15251 with
                               | Some x15255 ->
                                   ignore
                                     (Ojs.call x15253 "push"
                                        [|(Ojs.float_to_js x15255)|])
                               | None -> ());
                              (match x15252 with
                               | Some x15254 ->
                                   ignore
                                     (Ojs.call x15253 "push"
                                        [|(Ojs.float_to_js x15254)|])
                               | None -> ());
                              x15253))|])
    let (scale :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float ->
                ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x15272 : 'tags this) ->
        fun ?scaleX:(x15259 : float option) ->
          fun ?scaleY:(x15260 : float option) ->
            fun ?scaleZ:(x15261 : float option) ->
              fun ?originX:(x15262 : float option) ->
                fun ?originY:(x15263 : float option) ->
                  fun ?originZ:(x15264 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x15274 = this_to_js Obj.magic x15272 in
                         Ojs.call (Ojs.get_prop_ascii x15274 "scale") "apply"
                           [|x15274;((let x15265 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x15259 with
                                       | Some x15271 ->
                                           ignore
                                             (Ojs.call x15265 "push"
                                                [|(Ojs.float_to_js x15271)|])
                                       | None -> ());
                                      (match x15260 with
                                       | Some x15270 ->
                                           ignore
                                             (Ojs.call x15265 "push"
                                                [|(Ojs.float_to_js x15270)|])
                                       | None -> ());
                                      (match x15261 with
                                       | Some x15269 ->
                                           ignore
                                             (Ojs.call x15265 "push"
                                                [|(Ojs.float_to_js x15269)|])
                                       | None -> ());
                                      (match x15262 with
                                       | Some x15268 ->
                                           ignore
                                             (Ojs.call x15265 "push"
                                                [|(Ojs.float_to_js x15268)|])
                                       | None -> ());
                                      (match x15263 with
                                       | Some x15267 ->
                                           ignore
                                             (Ojs.call x15265 "push"
                                                [|(Ojs.float_to_js x15267)|])
                                       | None -> ());
                                      (match x15264 with
                                       | Some x15266 ->
                                           ignore
                                             (Ojs.call x15265 "push"
                                                [|(Ojs.float_to_js x15266)|])
                                       | None -> ());
                                      x15265))|])
    let (scale3d :
      'tags this ->
        ?scale:float ->
          ?originX:float ->
            ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x15284 : 'tags this) ->
        fun ?scale:(x15275 : float option) ->
          fun ?originX:(x15276 : float option) ->
            fun ?originY:(x15277 : float option) ->
              fun ?originZ:(x15278 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x15286 = this_to_js Obj.magic x15284 in
                     Ojs.call (Ojs.get_prop_ascii x15286 "scale3d") "apply"
                       [|x15286;((let x15279 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x15275 with
                                   | Some x15283 ->
                                       ignore
                                         (Ojs.call x15279 "push"
                                            [|(Ojs.float_to_js x15283)|])
                                   | None -> ());
                                  (match x15276 with
                                   | Some x15282 ->
                                       ignore
                                         (Ojs.call x15279 "push"
                                            [|(Ojs.float_to_js x15282)|])
                                   | None -> ());
                                  (match x15277 with
                                   | Some x15281 ->
                                       ignore
                                         (Ojs.call x15279 "push"
                                            [|(Ojs.float_to_js x15281)|])
                                   | None -> ());
                                  (match x15278 with
                                   | Some x15280 ->
                                       ignore
                                         (Ojs.call x15279 "push"
                                            [|(Ojs.float_to_js x15280)|])
                                   | None -> ());
                                  x15279))|])
    let (scaleNonUniform :
      'tags this -> ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t) =
      fun (x15292 : 'tags this) ->
        fun ?scaleX:(x15287 : float option) ->
          fun ?scaleY:(x15288 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x15294 = this_to_js Obj.magic x15292 in
                 Ojs.call (Ojs.get_prop_ascii x15294 "scaleNonUniform")
                   "apply"
                   [|x15294;((let x15289 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15287 with
                               | Some x15291 ->
                                   ignore
                                     (Ojs.call x15289 "push"
                                        [|(Ojs.float_to_js x15291)|])
                               | None -> ());
                              (match x15288 with
                               | Some x15290 ->
                                   ignore
                                     (Ojs.call x15289 "push"
                                        [|(Ojs.float_to_js x15290)|])
                               | None -> ());
                              x15289))|])
    let (skewX : 'tags this -> ?sx:float -> unit -> DOMMatrix.t) =
      fun (x15298 : 'tags this) ->
        fun ?sx:(x15295 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x15300 = this_to_js Obj.magic x15298 in
               Ojs.call (Ojs.get_prop_ascii x15300 "skewX") "apply"
                 [|x15300;((let x15296 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15295 with
                             | Some x15297 ->
                                 ignore
                                   (Ojs.call x15296 "push"
                                      [|(Ojs.float_to_js x15297)|])
                             | None -> ());
                            x15296))|])
    let (skewY : 'tags this -> ?sy:float -> unit -> DOMMatrix.t) =
      fun (x15304 : 'tags this) ->
        fun ?sy:(x15301 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x15306 = this_to_js Obj.magic x15304 in
               Ojs.call (Ojs.get_prop_ascii x15306 "skewY") "apply"
                 [|x15306;((let x15302 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15301 with
                             | Some x15303 ->
                                 ignore
                                   (Ojs.call x15302 "push"
                                      [|(Ojs.float_to_js x15303)|])
                             | None -> ());
                            x15302))|])
    let (toFloat32Array : 'tags this -> Float32Array.t_0) =
      fun (x15307 : 'tags this) ->
        Float32Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x15307) "toFloat32Array" [||])
    let (toFloat64Array : 'tags this -> Float64Array.t_0) =
      fun (x15309 : 'tags this) ->
        Float64Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x15309) "toFloat64Array" [||])
    let (toJSON : 'tags this -> any) =
      fun (x15311 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x15311) "toJSON" [||])
    let (transformPoint :
      'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t) =
      fun (x15316 : 'tags this) ->
        fun ?point:(x15313 : DOMPointInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x15318 = this_to_js Obj.magic x15316 in
               Ojs.call (Ojs.get_prop_ascii x15318 "transformPoint") "apply"
                 [|x15318;((let x15314 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15313 with
                             | Some x15315 ->
                                 ignore
                                   (Ojs.call x15314 "push"
                                      [|(DOMPointInit.t_to_js x15315)|])
                             | None -> ());
                            x15314))|])
    let (translate :
      'tags this ->
        ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t)
      =
      fun (x15326 : 'tags this) ->
        fun ?tx:(x15319 : float option) ->
          fun ?ty:(x15320 : float option) ->
            fun ?tz:(x15321 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x15328 = this_to_js Obj.magic x15326 in
                   Ojs.call (Ojs.get_prop_ascii x15328 "translate") "apply"
                     [|x15328;((let x15322 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x15319 with
                                 | Some x15325 ->
                                     ignore
                                       (Ojs.call x15322 "push"
                                          [|(Ojs.float_to_js x15325)|])
                                 | None -> ());
                                (match x15320 with
                                 | Some x15324 ->
                                     ignore
                                       (Ojs.call x15322 "push"
                                          [|(Ojs.float_to_js x15324)|])
                                 | None -> ());
                                (match x15321 with
                                 | Some x15323 ->
                                     ignore
                                       (Ojs.call x15322 "push"
                                          [|(Ojs.float_to_js x15323)|])
                                 | None -> ());
                                x15322))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly") "prototype")
    let (create : ?init:[ `U1 of string  | `U2 of float list ] -> unit -> t)
      =
      fun ?init:(x15329 : [ `U1 of string  | `U2 of float list ] option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
               (let x15330 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x15329 with
                 | Some x15331 ->
                     ignore
                       (Ojs.call x15330 "push"
                          [|((match x15331 with
                              | `U1 x15332 -> Ojs.string_to_js x15332
                              | `U2 x15333 ->
                                  Ojs.list_to_js Ojs.float_to_js x15333))|])
                 | None -> ());
                x15330))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x15335 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x15335)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x15336 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x15336)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x15337 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x15340 = Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x15340 "fromMatrix") "apply"
               [|x15340;((let x15338 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x15337 with
                           | Some x15339 ->
                               ignore
                                 (Ojs.call x15338 "push"
                                    [|(DOMMatrixInit.t_to_js x15339)|])
                           | None -> ());
                          x15338))|])
  end
module CustomEventInit =
  struct
    type 'T t = [ `CustomEventInit of 'T  | `EventInit ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15343 : Ojs.t) -> t_of_js __T_of_js x15343
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15341 : __T t) -> t_to_js __T_to_js x15341
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15347 : Ojs.t) -> t_of_js any_of_js x15347
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15345 : any t) -> t_to_js any_to_js x15345
    type 'T tags = [ `CustomEventInit of 'T  | `EventInit ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x15351 : Ojs.t) -> intf_of_js __tags_of_js x15351
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x15349 : __tags intf) -> intf_to_js __tags_to_js x15349
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x15353 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x15353)
             "detail")
    let (set_detail : ('tags, 'T) this -> 'T -> unit) =
      fun (x15356 : ('tags, 'T) this) ->
        fun (x15357 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x15356) "detail"
            (Obj.magic x15357)
    let (create : detail:'T -> unit -> 'T t) =
      fun ~detail:(x15360 : 'T) ->
        fun () ->
          let x15361 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x15361 "detail" (Obj.magic x15360);
          t_of_js Obj.magic x15361
    let cast_from = Obj.magic
  end
module CustomEvent =
  struct
    type 'T t = [ `CustomEvent of 'T  | `Event ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15365 : Ojs.t) -> t_of_js __T_of_js x15365
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15363 : __T t) -> t_to_js __T_to_js x15363
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15369 : Ojs.t) -> t_of_js any_of_js x15369
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15367 : any t) -> t_to_js any_to_js x15367
    type 'T tags = [ `CustomEvent of 'T  | `Event ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (__T_of_js : Ojs.t -> __T) ->
              fun (x15373 : Ojs.t) -> intf_of_js __tags_of_js x15373
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      =
      fun (type __tags) ->
        fun (type __T) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (__T_to_js : __T -> Ojs.t) ->
              fun (x15371 : __tags intf) -> intf_to_js __tags_to_js x15371
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x15375 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x15375)
             "detail")
    let (initCustomEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit)
      =
      fun (x15386 : ('tags, 'T) this) ->
        fun ~type_:(x15378 : string) ->
          fun ?bubbles:(x15379 : bool option) ->
            fun ?cancelable:(x15380 : bool option) ->
              fun ?detail:(x15381 : 'T option) ->
                fun () ->
                  ignore
                    (let x15389 = this_to_js Obj.magic Obj.magic x15386 in
                     Ojs.call (Ojs.get_prop_ascii x15389 "initCustomEvent")
                       "apply"
                       [|x15389;((let x15382 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x15382 "push"
                                       [|(Ojs.string_to_js x15378)|]);
                                  (match x15379 with
                                   | Some x15385 ->
                                       ignore
                                         (Ojs.call x15382 "push"
                                            [|(Ojs.bool_to_js x15385)|])
                                   | None -> ());
                                  (match x15380 with
                                   | Some x15384 ->
                                       ignore
                                         (Ojs.call x15382 "push"
                                            [|(Ojs.bool_to_js x15384)|])
                                   | None -> ());
                                  (match x15381 with
                                   | Some x15383 ->
                                       ignore
                                         (Ojs.call x15382 "push"
                                            [|(Obj.magic x15383)|])
                                   | None -> ());
                                  x15382))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CustomEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t) =
      fun ~type_:(x15390 : string) ->
        fun ?eventInitDict:(x15391 : 'T CustomEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CustomEvent")
                 (let x15392 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x15392 "push" [|(Ojs.string_to_js x15390)|]);
                  (match x15391 with
                   | Some x15393 ->
                       ignore
                         (Ojs.call x15392 "push"
                            [|(CustomEventInit.t_to_js Obj.magic x15393)|])
                   | None -> ());
                  x15392))
  end
module QueuingStrategyInit =
  struct
    type t = [ `QueuingStrategyInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15397 : Ojs.t) -> t_of_js x15397
    and t_0_to_js : t_0 -> Ojs.t = fun (x15396 : t) -> t_to_js x15396
    type tags = [ `QueuingStrategyInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15400 : Ojs.t) -> intf_of_js __tags_of_js x15400
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15398 : __tags intf) -> intf_to_js __tags_to_js x15398
    let (get_highWaterMark : 'tags this -> float) =
      fun (x15402 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15402) "highWaterMark")
    let (set_highWaterMark : 'tags this -> float -> unit) =
      fun (x15404 : 'tags this) ->
        fun (x15405 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15404) "highWaterMark"
            (Ojs.float_to_js x15405)
    let (create : highWaterMark:float -> unit -> t) =
      fun ~highWaterMark:(x15407 : float) ->
        fun () ->
          let x15408 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x15408 "highWaterMark" (Ojs.float_to_js x15407);
          t_of_js x15408
    let cast_from = Obj.magic
  end
module CountQueuingStrategy =
  struct
    type t = [ `CountQueuingStrategy  | `QueuingStrategy of any ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15410 : Ojs.t) -> t_of_js x15410
    and t_0_to_js : t_0 -> Ojs.t = fun (x15409 : t) -> t_to_js x15409
    type tags = [ `CountQueuingStrategy  | `QueuingStrategy of any ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `CountQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15413 : Ojs.t) -> intf_of_js __tags_of_js x15413
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15411 : __tags intf) -> intf_to_js __tags_to_js x15411
    let (get_highWaterMark : 'tags this -> float) =
      fun (x15415 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15415) "highWaterMark")
    let (get_size : 'tags this -> QueuingStrategySize.t_0) =
      fun (x15417 : 'tags this) ->
        QueuingStrategySize.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15417) "size")
    let (create :
      highWaterMark:float -> size:QueuingStrategySize.t_0 -> unit -> t) =
      fun ~highWaterMark:(x15419 : float) ->
        fun ~size:(x15420 : QueuingStrategySize.t_0) ->
          fun () ->
            let x15421 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x15421 "highWaterMark"
              (Ojs.float_to_js x15419);
            Ojs.set_prop_ascii x15421 "size"
              (QueuingStrategySize.t_0_to_js x15420);
            t_of_js x15421
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x15422 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x15422)|])
  end
module Console =
  struct
    type t = [ `Console ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15424 : Ojs.t) -> t_of_js x15424
    and t_0_to_js : t_0 -> Ojs.t = fun (x15423 : t) -> t_to_js x15423
    type tags = [ `Console ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Console ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15427 : Ojs.t) -> intf_of_js __tags_of_js x15427
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15425 : __tags intf) -> intf_to_js __tags_to_js x15425
    let (assert_ :
      'tags this -> ?condition:bool -> data:any list -> unit -> unit) =
      fun (x15434 : 'tags this) ->
        fun ?condition:(x15429 : bool option) ->
          fun ~data:(x15430 : any list) ->
            fun () ->
              ignore
                (let x15436 = this_to_js Obj.magic x15434 in
                 Ojs.call (Ojs.get_prop_ascii x15436 "assert") "apply"
                   [|x15436;((let x15431 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15429 with
                               | Some x15433 ->
                                   ignore
                                     (Ojs.call x15431 "push"
                                        [|(Ojs.bool_to_js x15433)|])
                               | None -> ());
                              List.iter
                                (fun (x15432 : any) ->
                                   ignore
                                     (Ojs.call x15431 "push"
                                        [|(any_to_js x15432)|])) x15430;
                              x15431))|])
    let (clear : 'tags this -> unit) =
      fun (x15437 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15437) "clear" [||])
    let (count : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15442 : 'tags this) ->
        fun ?label:(x15439 : string option) ->
          fun () ->
            ignore
              (let x15444 = this_to_js Obj.magic x15442 in
               Ojs.call (Ojs.get_prop_ascii x15444 "count") "apply"
                 [|x15444;((let x15440 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15439 with
                             | Some x15441 ->
                                 ignore
                                   (Ojs.call x15440 "push"
                                      [|(Ojs.string_to_js x15441)|])
                             | None -> ());
                            x15440))|])
    let (countReset : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15448 : 'tags this) ->
        fun ?label:(x15445 : string option) ->
          fun () ->
            ignore
              (let x15450 = this_to_js Obj.magic x15448 in
               Ojs.call (Ojs.get_prop_ascii x15450 "countReset") "apply"
                 [|x15450;((let x15446 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15445 with
                             | Some x15447 ->
                                 ignore
                                   (Ojs.call x15446 "push"
                                      [|(Ojs.string_to_js x15447)|])
                             | None -> ());
                            x15446))|])
    let (debug : 'tags this -> data:any list -> unit) =
      fun (x15454 : 'tags this) ->
        fun ~data:(x15451 : any list) ->
          ignore
            (let x15456 = this_to_js Obj.magic x15454 in
             Ojs.call (Ojs.get_prop_ascii x15456 "debug") "apply"
               [|x15456;((let x15452 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15453 : any) ->
                               ignore
                                 (Ojs.call x15452 "push"
                                    [|(any_to_js x15453)|])) x15451;
                          x15452))|])
    let (dir : 'tags this -> ?item:any -> ?options:any -> unit -> unit) =
      fun (x15462 : 'tags this) ->
        fun ?item:(x15457 : any option) ->
          fun ?options:(x15458 : any option) ->
            fun () ->
              ignore
                (let x15464 = this_to_js Obj.magic x15462 in
                 Ojs.call (Ojs.get_prop_ascii x15464 "dir") "apply"
                   [|x15464;((let x15459 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15457 with
                               | Some x15461 ->
                                   ignore
                                     (Ojs.call x15459 "push"
                                        [|(any_to_js x15461)|])
                               | None -> ());
                              (match x15458 with
                               | Some x15460 ->
                                   ignore
                                     (Ojs.call x15459 "push"
                                        [|(any_to_js x15460)|])
                               | None -> ());
                              x15459))|])
    let (dirxml : 'tags this -> data:any list -> unit) =
      fun (x15468 : 'tags this) ->
        fun ~data:(x15465 : any list) ->
          ignore
            (let x15470 = this_to_js Obj.magic x15468 in
             Ojs.call (Ojs.get_prop_ascii x15470 "dirxml") "apply"
               [|x15470;((let x15466 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15467 : any) ->
                               ignore
                                 (Ojs.call x15466 "push"
                                    [|(any_to_js x15467)|])) x15465;
                          x15466))|])
    let (error : 'tags this -> data:any list -> unit) =
      fun (x15474 : 'tags this) ->
        fun ~data:(x15471 : any list) ->
          ignore
            (let x15476 = this_to_js Obj.magic x15474 in
             Ojs.call (Ojs.get_prop_ascii x15476 "error") "apply"
               [|x15476;((let x15472 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15473 : any) ->
                               ignore
                                 (Ojs.call x15472 "push"
                                    [|(any_to_js x15473)|])) x15471;
                          x15472))|])
    let (group : 'tags this -> data:any list -> unit) =
      fun (x15480 : 'tags this) ->
        fun ~data:(x15477 : any list) ->
          ignore
            (let x15482 = this_to_js Obj.magic x15480 in
             Ojs.call (Ojs.get_prop_ascii x15482 "group") "apply"
               [|x15482;((let x15478 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15479 : any) ->
                               ignore
                                 (Ojs.call x15478 "push"
                                    [|(any_to_js x15479)|])) x15477;
                          x15478))|])
    let (groupCollapsed : 'tags this -> data:any list -> unit) =
      fun (x15486 : 'tags this) ->
        fun ~data:(x15483 : any list) ->
          ignore
            (let x15488 = this_to_js Obj.magic x15486 in
             Ojs.call (Ojs.get_prop_ascii x15488 "groupCollapsed") "apply"
               [|x15488;((let x15484 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15485 : any) ->
                               ignore
                                 (Ojs.call x15484 "push"
                                    [|(any_to_js x15485)|])) x15483;
                          x15484))|])
    let (groupEnd : 'tags this -> unit) =
      fun (x15489 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15489) "groupEnd" [||])
    let (info : 'tags this -> data:any list -> unit) =
      fun (x15494 : 'tags this) ->
        fun ~data:(x15491 : any list) ->
          ignore
            (let x15496 = this_to_js Obj.magic x15494 in
             Ojs.call (Ojs.get_prop_ascii x15496 "info") "apply"
               [|x15496;((let x15492 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15493 : any) ->
                               ignore
                                 (Ojs.call x15492 "push"
                                    [|(any_to_js x15493)|])) x15491;
                          x15492))|])
    let (log : 'tags this -> data:any list -> unit) =
      fun (x15500 : 'tags this) ->
        fun ~data:(x15497 : any list) ->
          ignore
            (let x15502 = this_to_js Obj.magic x15500 in
             Ojs.call (Ojs.get_prop_ascii x15502 "log") "apply"
               [|x15502;((let x15498 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15499 : any) ->
                               ignore
                                 (Ojs.call x15498 "push"
                                    [|(any_to_js x15499)|])) x15497;
                          x15498))|])
    let (table :
      'tags this ->
        ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun (x15509 : 'tags this) ->
        fun ?tabularData:(x15503 : any option) ->
          fun ?properties:(x15504 : string list option) ->
            fun () ->
              ignore
                (let x15511 = this_to_js Obj.magic x15509 in
                 Ojs.call (Ojs.get_prop_ascii x15511 "table") "apply"
                   [|x15511;((let x15505 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15503 with
                               | Some x15508 ->
                                   ignore
                                     (Ojs.call x15505 "push"
                                        [|(any_to_js x15508)|])
                               | None -> ());
                              (match x15504 with
                               | Some x15506 ->
                                   ignore
                                     (Ojs.call x15505 "push"
                                        [|(Ojs.list_to_js Ojs.string_to_js
                                             x15506)|])
                               | None -> ());
                              x15505))|])
    let (time : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15515 : 'tags this) ->
        fun ?label:(x15512 : string option) ->
          fun () ->
            ignore
              (let x15517 = this_to_js Obj.magic x15515 in
               Ojs.call (Ojs.get_prop_ascii x15517 "time") "apply"
                 [|x15517;((let x15513 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15512 with
                             | Some x15514 ->
                                 ignore
                                   (Ojs.call x15513 "push"
                                      [|(Ojs.string_to_js x15514)|])
                             | None -> ());
                            x15513))|])
    let (timeEnd : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15521 : 'tags this) ->
        fun ?label:(x15518 : string option) ->
          fun () ->
            ignore
              (let x15523 = this_to_js Obj.magic x15521 in
               Ojs.call (Ojs.get_prop_ascii x15523 "timeEnd") "apply"
                 [|x15523;((let x15519 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15518 with
                             | Some x15520 ->
                                 ignore
                                   (Ojs.call x15519 "push"
                                      [|(Ojs.string_to_js x15520)|])
                             | None -> ());
                            x15519))|])
    let (timeLog :
      'tags this -> ?label:string -> data:any list -> unit -> unit) =
      fun (x15529 : 'tags this) ->
        fun ?label:(x15524 : string option) ->
          fun ~data:(x15525 : any list) ->
            fun () ->
              ignore
                (let x15531 = this_to_js Obj.magic x15529 in
                 Ojs.call (Ojs.get_prop_ascii x15531 "timeLog") "apply"
                   [|x15531;((let x15526 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x15524 with
                               | Some x15528 ->
                                   ignore
                                     (Ojs.call x15526 "push"
                                        [|(Ojs.string_to_js x15528)|])
                               | None -> ());
                              List.iter
                                (fun (x15527 : any) ->
                                   ignore
                                     (Ojs.call x15526 "push"
                                        [|(any_to_js x15527)|])) x15525;
                              x15526))|])
    let (timeStamp : 'tags this -> ?label:string -> unit -> unit) =
      fun (x15535 : 'tags this) ->
        fun ?label:(x15532 : string option) ->
          fun () ->
            ignore
              (let x15537 = this_to_js Obj.magic x15535 in
               Ojs.call (Ojs.get_prop_ascii x15537 "timeStamp") "apply"
                 [|x15537;((let x15533 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15532 with
                             | Some x15534 ->
                                 ignore
                                   (Ojs.call x15533 "push"
                                      [|(Ojs.string_to_js x15534)|])
                             | None -> ());
                            x15533))|])
    let (trace : 'tags this -> data:any list -> unit) =
      fun (x15541 : 'tags this) ->
        fun ~data:(x15538 : any list) ->
          ignore
            (let x15543 = this_to_js Obj.magic x15541 in
             Ojs.call (Ojs.get_prop_ascii x15543 "trace") "apply"
               [|x15543;((let x15539 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15540 : any) ->
                               ignore
                                 (Ojs.call x15539 "push"
                                    [|(any_to_js x15540)|])) x15538;
                          x15539))|])
    let (warn : 'tags this -> data:any list -> unit) =
      fun (x15547 : 'tags this) ->
        fun ~data:(x15544 : any list) ->
          ignore
            (let x15549 = this_to_js Obj.magic x15547 in
             Ojs.call (Ojs.get_prop_ascii x15549 "warn") "apply"
               [|x15549;((let x15545 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x15546 : any) ->
                               ignore
                                 (Ojs.call x15545 "push"
                                    [|(any_to_js x15546)|])) x15544;
                          x15545))|])
    let cast_from = Obj.magic
  end
module CanvasPattern =
  struct
    type t = [ `CanvasPattern ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15551 : Ojs.t) -> t_of_js x15551
    and t_0_to_js : t_0 -> Ojs.t = fun (x15550 : t) -> t_to_js x15550
    type tags = [ `CanvasPattern ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15554 : Ojs.t) -> intf_of_js __tags_of_js x15554
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15552 : __tags intf) -> intf_to_js __tags_to_js x15552
    let (setTransform :
      'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x15559 : 'tags this) ->
        fun ?transform:(x15556 : DOMMatrix2DInit.t option) ->
          fun () ->
            ignore
              (let x15561 = this_to_js Obj.magic x15559 in
               Ojs.call (Ojs.get_prop_ascii x15561 "setTransform") "apply"
                 [|x15561;((let x15557 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15556 with
                             | Some x15558 ->
                                 ignore
                                   (Ojs.call x15557 "push"
                                      [|(DOMMatrix2DInit.t_to_js x15558)|])
                             | None -> ());
                            x15557))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasPattern") [||])
  end
module CanvasGradient =
  struct
    type t = [ `CanvasGradient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15563 : Ojs.t) -> t_of_js x15563
    and t_0_to_js : t_0 -> Ojs.t = fun (x15562 : t) -> t_to_js x15562
    type tags = [ `CanvasGradient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15566 : Ojs.t) -> intf_of_js __tags_of_js x15566
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15564 : __tags intf) -> intf_to_js __tags_to_js x15564
    let (addColorStop : 'tags this -> offset:float -> color:string -> unit) =
      fun (x15570 : 'tags this) ->
        fun ~offset:(x15568 : float) ->
          fun ~color:(x15569 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x15570) "addColorStop"
                 [|(Ojs.float_to_js x15568);(Ojs.string_to_js x15569)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CanvasGradient") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasGradient") [||])
  end
module ByteLengthQueuingStrategy =
  struct
    type t =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15573 : Ojs.t) -> t_of_js x15573
    and t_0_to_js : t_0 -> Ojs.t = fun (x15572 : t) -> t_to_js x15572
    type tags =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15576 : Ojs.t) -> intf_of_js __tags_of_js x15576
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15574 : __tags intf) -> intf_to_js __tags_to_js x15574
    let (get_highWaterMark : 'tags this -> float) =
      fun (x15578 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15578) "highWaterMark")
    let (get_size : 'tags this -> ArrayBufferView.t_0 QueuingStrategySize.t)
      =
      fun (x15580 : 'tags this) ->
        QueuingStrategySize.t_of_js ArrayBufferView.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15580) "size")
    let (create :
      highWaterMark:float ->
        size:ArrayBufferView.t_0 QueuingStrategySize.t -> unit -> t)
      =
      fun ~highWaterMark:(x15583 : float) ->
        fun ~size:(x15584 : ArrayBufferView.t_0 QueuingStrategySize.t) ->
          fun () ->
            let x15585 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x15585 "highWaterMark"
              (Ojs.float_to_js x15583);
            Ojs.set_prop_ascii x15585 "size"
              (QueuingStrategySize.t_to_js ArrayBufferView.t_0_to_js x15584);
            t_of_js x15585
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x15587 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x15587)|])
  end
module BroadcastChannelEventMap =
  struct
    type t = [ `BroadcastChannelEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15589 : Ojs.t) -> t_of_js x15589
    and t_0_to_js : t_0 -> Ojs.t = fun (x15588 : t) -> t_to_js x15588
    type tags = [ `BroadcastChannelEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15592 : Ojs.t) -> intf_of_js __tags_of_js x15592
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15590 : __tags intf) -> intf_to_js __tags_to_js x15590
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x15594 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15594) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x15596 : 'tags this) ->
        fun (x15597 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15596) "message"
            (MessageEvent.t_0_to_js x15597)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x15599 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15599) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x15601 : 'tags this) ->
        fun (x15602 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15601) "messageerror"
            (MessageEvent.t_0_to_js x15602)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x15604 : MessageEvent.t_0) ->
        fun ~messageerror:(x15605 : MessageEvent.t_0) ->
          fun () ->
            let x15606 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x15606 "message"
              (MessageEvent.t_0_to_js x15604);
            Ojs.set_prop_ascii x15606 "messageerror"
              (MessageEvent.t_0_to_js x15605);
            t_of_js x15606
    let cast_from = Obj.magic
  end
module BroadcastChannel =
  struct
    type t = [ `BroadcastChannel  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15608 : Ojs.t) -> t_of_js x15608
    and t_0_to_js : t_0 -> Ojs.t = fun (x15607 : t) -> t_to_js x15607
    type tags = [ `BroadcastChannel  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15611 : Ojs.t) -> intf_of_js __tags_of_js x15611
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15609 : __tags intf) -> intf_to_js __tags_to_js x15609
    let (get_name : 'tags this -> string) =
      fun (x15613 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15613) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x15615 : 'tags this) ->
        Ojs.option_of_js
          (fun (x15617 : Ojs.t) ->
             fun ~this:(x15618 : t) ->
               fun ~ev:(x15619 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x15617
                      [|(t_to_js x15618);(MessageEvent.t_0_to_js x15619)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15615) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x15620 : 'tags this) ->
        fun (x15621 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15620) "onmessage"
            (Ojs.option_to_js
               (fun (x15622 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15623 : Ojs.t) ->
                       fun (x15624 : Ojs.t) ->
                         any_to_js
                           (x15622 ~this:(t_of_js x15623)
                              ~ev:(MessageEvent.t_0_of_js x15624)))) x15621)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option) =
      fun (x15626 : 'tags this) ->
        Ojs.option_of_js
          (fun (x15628 : Ojs.t) ->
             fun ~this:(x15629 : t) ->
               fun ~ev:(x15630 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x15628
                      [|(t_to_js x15629);(MessageEvent.t_0_to_js x15630)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15626) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) option -> unit) =
      fun (x15631 : 'tags this) ->
        fun (x15632 : (this:t -> ev:MessageEvent.t_0 -> any) option) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15631) "onmessageerror"
            (Ojs.option_to_js
               (fun (x15633 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15634 : Ojs.t) ->
                       fun (x15635 : Ojs.t) ->
                         any_to_js
                           (x15633 ~this:(t_of_js x15634)
                              ~ev:(MessageEvent.t_0_of_js x15635)))) x15632)
    let (close : 'tags this -> unit) =
      fun (x15637 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15637) "close" [||])
    let (postMessage : 'tags this -> message:any -> unit) =
      fun (x15640 : 'tags this) ->
        fun ~message:(x15639 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x15640) "postMessage"
               [|(any_to_js x15639)|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15651 : 'tags this) ->
        fun ~type_:(x15642 : 'K) ->
          fun ~listener:(x15643 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15644 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15653 = this_to_js Obj.magic x15651 in
                   Ojs.call (Ojs.get_prop_ascii x15653 "addEventListener")
                     "apply"
                     [|x15653;((let x15645 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15645 "push"
                                     [|(Obj.magic x15642)|]);
                                ignore
                                  (Ojs.call x15645 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15649 : Ojs.t) ->
                                             fun (x15650 : Ojs.t) ->
                                               any_to_js
                                                 (x15643
                                                    ~this:(t_of_js x15649)
                                                    ~ev:(any_of_js x15650))))|]);
                                (match x15644 with
                                 | Some x15646 ->
                                     ignore
                                       (Ojs.call x15645 "push"
                                          [|((match x15646 with
                                              | `U1 x15647 ->
                                                  Ojs.bool_to_js x15647
                                              | `U2 x15648 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x15648))|])
                                 | None -> ());
                                x15645))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15661 : 'tags this) ->
        fun ~type_:(x15654 : string) ->
          fun ~listener:(x15655 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15656 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15663 = this_to_js Obj.magic x15661 in
                   Ojs.call (Ojs.get_prop_ascii x15663 "addEventListener")
                     "apply"
                     [|x15663;((let x15657 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15657 "push"
                                     [|(Ojs.string_to_js x15654)|]);
                                ignore
                                  (Ojs.call x15657 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15655)|]);
                                (match x15656 with
                                 | Some x15658 ->
                                     ignore
                                       (Ojs.call x15657 "push"
                                          [|((match x15658 with
                                              | `U1 x15659 ->
                                                  Ojs.bool_to_js x15659
                                              | `U2 x15660 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x15660))|])
                                 | None -> ());
                                x15657))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15673 : 'tags this) ->
        fun ~type_:(x15664 : 'K) ->
          fun ~listener:(x15665 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15666 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15675 = this_to_js Obj.magic x15673 in
                   Ojs.call (Ojs.get_prop_ascii x15675 "removeEventListener")
                     "apply"
                     [|x15675;((let x15667 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15667 "push"
                                     [|(Obj.magic x15664)|]);
                                ignore
                                  (Ojs.call x15667 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15671 : Ojs.t) ->
                                             fun (x15672 : Ojs.t) ->
                                               any_to_js
                                                 (x15665
                                                    ~this:(t_of_js x15671)
                                                    ~ev:(any_of_js x15672))))|]);
                                (match x15666 with
                                 | Some x15668 ->
                                     ignore
                                       (Ojs.call x15667 "push"
                                          [|((match x15668 with
                                              | `U1 x15669 ->
                                                  Ojs.bool_to_js x15669
                                              | `U2 x15670 ->
                                                  EventListenerOptions.t_to_js
                                                    x15670))|])
                                 | None -> ());
                                x15667))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15683 : 'tags this) ->
        fun ~type_:(x15676 : string) ->
          fun ~listener:(x15677 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15678 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15685 = this_to_js Obj.magic x15683 in
                   Ojs.call (Ojs.get_prop_ascii x15685 "removeEventListener")
                     "apply"
                     [|x15685;((let x15679 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15679 "push"
                                     [|(Ojs.string_to_js x15676)|]);
                                ignore
                                  (Ojs.call x15679 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15677)|]);
                                (match x15678 with
                                 | Some x15680 ->
                                     ignore
                                       (Ojs.call x15679 "push"
                                          [|((match x15680 with
                                              | `U1 x15681 ->
                                                  Ojs.bool_to_js x15681
                                              | `U2 x15682 ->
                                                  EventListenerOptions.t_to_js
                                                    x15682))|])
                                 | None -> ());
                                x15679))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BroadcastChannel") "prototype")
    let (create : string -> t) =
      fun (x15686 : string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
             [|(Ojs.string_to_js x15686)|])
  end
module AbortSignalEventMap =
  struct
    type t = [ `AbortSignalEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15688 : Ojs.t) -> t_of_js x15688
    and t_0_to_js : t_0 -> Ojs.t = fun (x15687 : t) -> t_to_js x15687
    type tags = [ `AbortSignalEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15691 : Ojs.t) -> intf_of_js __tags_of_js x15691
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15689 : __tags intf) -> intf_to_js __tags_to_js x15689
    let (get_abort : 'tags this -> Event.t) =
      fun (x15693 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15693) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x15695 : 'tags this) ->
        fun (x15696 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15695) "abort"
            (Event.t_to_js x15696)
    let (create : abort:Event.t -> unit -> t) =
      fun ~abort:(x15698 : Event.t) ->
        fun () ->
          let x15699 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x15699 "abort" (Event.t_to_js x15698);
          t_of_js x15699
    let cast_from = Obj.magic
  end
module AbortController =
  struct
    type t = [ `AbortController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15701 : Ojs.t) -> t_of_js x15701
    and t_0_to_js : t_0 -> Ojs.t = fun (x15700 : t) -> t_to_js x15700
    type tags = [ `AbortController ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
        fun (__tags_of_js : Ojs.t -> __tags) ->
          fun (x15704 : Ojs.t) -> intf_of_js __tags_of_js x15704
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
      fun (type __tags) ->
        fun (__tags_to_js : __tags -> Ojs.t) ->
          fun (x15702 : __tags intf) -> intf_to_js __tags_to_js x15702
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x15706 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15706) "signal")
    let (abort : 'tags this -> ?reason:any -> unit -> unit) =
      fun (x15711 : 'tags this) ->
        fun ?reason:(x15708 : any option) ->
          fun () ->
            ignore
              (let x15713 = this_to_js Obj.magic x15711 in
               Ojs.call (Ojs.get_prop_ascii x15713 "abort") "apply"
                 [|x15713;((let x15709 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15708 with
                             | Some x15710 ->
                                 ignore
                                   (Ojs.call x15709 "push"
                                      [|(any_to_js x15710)|])
                             | None -> ());
                            x15709))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AbortController") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortController") [||])
  end
module CustomEventInit_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T CustomEventInit.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15716 : Ojs.t) -> CustomEventInit.t_of_js __T_of_js x15716
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15714 : __T CustomEventInit.t) ->
            CustomEventInit.t_to_js __T_to_js x15714
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15720 : Ojs.t) -> parent_of_js T.t_of_js x15720
    and t_to_js : t -> Ojs.t =
      fun (x15718 : T.t parent) -> parent_to_js T.t_to_js x15718
    let (get_detail : t -> T.t) =
      fun (x15722 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15722) "detail")
    let (set_detail : t -> T.t -> unit) =
      fun (x15723 : t) ->
        fun (x15724 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x15723) "detail" (T.t_to_js x15724)
  end
module MessageEventInit_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T MessageEventInit.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15727 : Ojs.t) -> MessageEventInit.t_of_js __T_of_js x15727
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15725 : __T MessageEventInit.t) ->
            MessageEventInit.t_to_js __T_to_js x15725
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15731 : Ojs.t) -> parent_of_js T.t_of_js x15731
    and t_to_js : t -> Ojs.t =
      fun (x15729 : T.t parent) -> parent_to_js T.t_to_js x15729
    let (get_data : t -> T.t) =
      fun (x15733 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15733) "data")
    let (set_data : t -> T.t -> unit) =
      fun (x15734 : t) ->
        fun (x15735 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x15734) "data" (T.t_to_js x15735)
    let (get_lastEventId : t -> string) =
      fun (x15736 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15736) "lastEventId")
    let (set_lastEventId : t -> string -> unit) =
      fun (x15737 : t) ->
        fun (x15738 : string) ->
          Ojs.set_prop_ascii (t_to_js x15737) "lastEventId"
            (Ojs.string_to_js x15738)
    let (get_origin : t -> string) =
      fun (x15739 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15739) "origin")
    let (set_origin : t -> string -> unit) =
      fun (x15740 : t) ->
        fun (x15741 : string) ->
          Ojs.set_prop_ascii (t_to_js x15740) "origin"
            (Ojs.string_to_js x15741)
    let (get_ports : t -> MessagePort.t list) =
      fun (x15742 : t) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15742) "ports")
    let (set_ports : t -> MessagePort.t list -> unit) =
      fun (x15744 : t) ->
        fun (x15745 : MessagePort.t list) ->
          Ojs.set_prop_ascii (t_to_js x15744) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x15745)
    let (get_source : t -> MessageEventSource.t option) =
      fun (x15747 : t) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15747) "source")
    let (set_source : t -> MessageEventSource.t option -> unit) =
      fun (x15749 : t) ->
        fun (x15750 : MessageEventSource.t option) ->
          Ojs.set_prop_ascii (t_to_js x15749) "source"
            (Ojs.option_to_js MessageEventSource.t_to_js x15750)
  end
module QueuingStrategy_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T QueuingStrategy.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15754 : Ojs.t) -> QueuingStrategy.t_of_js __T_of_js x15754
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15752 : __T QueuingStrategy.t) ->
            QueuingStrategy.t_to_js __T_to_js x15752
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15758 : Ojs.t) -> parent_of_js T.t_of_js x15758
    and t_to_js : t -> Ojs.t =
      fun (x15756 : T.t parent) -> parent_to_js T.t_to_js x15756
    let (get_highWaterMark : t -> float) =
      fun (x15760 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x15760) "highWaterMark")
    let (set_highWaterMark : t -> float -> unit) =
      fun (x15761 : t) ->
        fun (x15762 : float) ->
          Ojs.set_prop_ascii (t_to_js x15761) "highWaterMark"
            (Ojs.float_to_js x15762)
    let (get_size : t -> T.t QueuingStrategySize.t) =
      fun (x15763 : t) ->
        QueuingStrategySize.t_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15763) "size")
    let (set_size : t -> T.t QueuingStrategySize.t -> unit) =
      fun (x15765 : t) ->
        fun (x15766 : T.t QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (t_to_js x15765) "size"
            (QueuingStrategySize.t_to_js T.t_to_js x15766)
  end
module ReadableStreamDefaultReadValueResult_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T ReadableStreamDefaultReadValueResult.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15770 : Ojs.t) ->
            ReadableStreamDefaultReadValueResult.t_of_js __T_of_js x15770
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15768 : __T ReadableStreamDefaultReadValueResult.t) ->
            ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x15768
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15774 : Ojs.t) -> parent_of_js T.t_of_js x15774
    and t_to_js : t -> Ojs.t =
      fun (x15772 : T.t parent) -> parent_to_js T.t_to_js x15772
    let (get_done : t -> [ `L_b_false ]) =
      fun (x15776 : t) ->
        let x15777 = Ojs.get_prop_ascii (t_to_js x15776) "done" in
        match Ojs.bool_of_js x15777 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : t -> [ `L_b_false ] -> unit) =
      fun (x15778 : t) ->
        fun (x15779 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js x15778) "done"
            (match x15779 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : t -> T.t) =
      fun (x15780 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15780) "value")
    let (set_value : t -> T.t -> unit) =
      fun (x15781 : t) ->
        fun (x15782 : T.t) ->
          Ojs.set_prop_ascii (t_to_js x15781) "value" (T.t_to_js x15782)
  end
module ReadableWritablePair_Make(R:Ojs.T)(W:Ojs.T) =
  struct
    type ('R, 'W) parent = ('R, 'W) ReadableWritablePair.t
    let rec parent_of_js :
      'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) parent =
      fun (type __R) ->
        fun (type __W) ->
          fun (__R_of_js : Ojs.t -> __R) ->
            fun (__W_of_js : Ojs.t -> __W) ->
              fun (x15786 : Ojs.t) ->
                ReadableWritablePair.t_of_js __R_of_js __W_of_js x15786
    and parent_to_js :
      'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) parent -> Ojs.t =
      fun (type __R) ->
        fun (type __W) ->
          fun (__R_to_js : __R -> Ojs.t) ->
            fun (__W_to_js : __W -> Ojs.t) ->
              fun (x15783 : (__R, __W) ReadableWritablePair.t) ->
                ReadableWritablePair.t_to_js __R_to_js __W_to_js x15783
    type t = (R.t, W.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15792 : Ojs.t) -> parent_of_js R.t_of_js W.t_of_js x15792
    and t_to_js : t -> Ojs.t =
      fun (x15789 : (R.t, W.t) parent) ->
        parent_to_js R.t_to_js W.t_to_js x15789
    let (get_readable : t -> R.t ReadableStream.t) =
      fun (x15795 : t) ->
        ReadableStream.t_of_js R.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15795) "readable")
    let (set_readable : t -> R.t ReadableStream.t -> unit) =
      fun (x15797 : t) ->
        fun (x15798 : R.t ReadableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x15797) "readable"
            (ReadableStream.t_to_js R.t_to_js x15798)
    let (get_writable : t -> W.t WritableStream.t) =
      fun (x15800 : t) ->
        WritableStream.t_of_js W.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15800) "writable")
    let (set_writable : t -> W.t WritableStream.t -> unit) =
      fun (x15802 : t) ->
        fun (x15803 : W.t WritableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x15802) "writable"
            (WritableStream.t_to_js W.t_to_js x15803)
  end
module Transformer_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) Transformer.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x15808 : Ojs.t) ->
                Transformer.t_of_js __I_of_js __O_of_js x15808
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x15805 : (__I, __O) Transformer.t) ->
                Transformer.t_to_js __I_to_js __O_to_js x15805
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15814 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x15814
    and t_to_js : t -> Ojs.t =
      fun (x15811 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x15811
    let (get_flush : t -> O.t TransformerFlushCallback.t) =
      fun (x15817 : t) ->
        TransformerFlushCallback.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15817) "flush")
    let (set_flush : t -> O.t TransformerFlushCallback.t -> unit) =
      fun (x15819 : t) ->
        fun (x15820 : O.t TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15819) "flush"
            (TransformerFlushCallback.t_to_js O.t_to_js x15820)
    let (get_readableType : t -> undefined) =
      fun (x15822 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x15822) "readableType")
    let (set_readableType : t -> undefined -> unit) =
      fun (x15823 : t) ->
        fun (x15824 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x15823) "readableType"
            (undefined_to_js x15824)
    let (get_start : t -> O.t TransformerStartCallback.t) =
      fun (x15825 : t) ->
        TransformerStartCallback.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15825) "start")
    let (set_start : t -> O.t TransformerStartCallback.t -> unit) =
      fun (x15827 : t) ->
        fun (x15828 : O.t TransformerStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15827) "start"
            (TransformerStartCallback.t_to_js O.t_to_js x15828)
    let (get_transform : t -> (I.t, O.t) TransformerTransformCallback.t) =
      fun (x15830 : t) ->
        TransformerTransformCallback.t_of_js I.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15830) "transform")
    let (set_transform :
      t -> (I.t, O.t) TransformerTransformCallback.t -> unit) =
      fun (x15833 : t) ->
        fun (x15834 : (I.t, O.t) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15833) "transform"
            (TransformerTransformCallback.t_to_js I.t_to_js O.t_to_js x15834)
    let (get_writableType : t -> undefined) =
      fun (x15837 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x15837) "writableType")
    let (set_writableType : t -> undefined -> unit) =
      fun (x15838 : t) ->
        fun (x15839 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x15838) "writableType"
            (undefined_to_js x15839)
  end
module UnderlyingSink_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W UnderlyingSink.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x15842 : Ojs.t) -> UnderlyingSink.t_of_js __W_of_js x15842
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x15840 : __W UnderlyingSink.t) ->
            UnderlyingSink.t_to_js __W_to_js x15840
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15846 : Ojs.t) -> parent_of_js W.t_of_js x15846
    and t_to_js : t -> Ojs.t =
      fun (x15844 : W.t parent) -> parent_to_js W.t_to_js x15844
    let (get_abort : t -> UnderlyingSinkAbortCallback.t) =
      fun (x15848 : t) ->
        UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15848) "abort")
    let (set_abort : t -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x15849 : t) ->
        fun (x15850 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15849) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x15850)
    let (get_close : t -> UnderlyingSinkCloseCallback.t) =
      fun (x15851 : t) ->
        UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15851) "close")
    let (set_close : t -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x15852 : t) ->
        fun (x15853 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15852) "close"
            (UnderlyingSinkCloseCallback.t_to_js x15853)
    let (get_start : t -> UnderlyingSinkStartCallback.t) =
      fun (x15854 : t) ->
        UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15854) "start")
    let (set_start : t -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x15855 : t) ->
        fun (x15856 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15855) "start"
            (UnderlyingSinkStartCallback.t_to_js x15856)
    let (get_type : t -> undefined) =
      fun (x15857 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x15857) "type")
    let (set_type : t -> undefined -> unit) =
      fun (x15858 : t) ->
        fun (x15859 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x15858) "type" (undefined_to_js x15859)
    let (get_write : t -> W.t UnderlyingSinkWriteCallback.t) =
      fun (x15860 : t) ->
        UnderlyingSinkWriteCallback.t_of_js W.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15860) "write")
    let (set_write : t -> W.t UnderlyingSinkWriteCallback.t -> unit) =
      fun (x15862 : t) ->
        fun (x15863 : W.t UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15862) "write"
            (UnderlyingSinkWriteCallback.t_to_js W.t_to_js x15863)
  end
module UnderlyingSource_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSource.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x15867 : Ojs.t) -> UnderlyingSource.t_of_js __R_of_js x15867
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x15865 : __R UnderlyingSource.t) ->
            UnderlyingSource.t_to_js __R_to_js x15865
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15871 : Ojs.t) -> parent_of_js R.t_of_js x15871
    and t_to_js : t -> Ojs.t =
      fun (x15869 : R.t parent) -> parent_to_js R.t_to_js x15869
    let (get_cancel : t -> UnderlyingSourceCancelCallback.t) =
      fun (x15873 : t) ->
        UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15873) "cancel")
    let (set_cancel : t -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x15874 : t) ->
        fun (x15875 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15874) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x15875)
    let (get_pull : t -> R.t UnderlyingSourcePullCallback.t) =
      fun (x15876 : t) ->
        UnderlyingSourcePullCallback.t_of_js R.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15876) "pull")
    let (set_pull : t -> R.t UnderlyingSourcePullCallback.t -> unit) =
      fun (x15878 : t) ->
        fun (x15879 : R.t UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15878) "pull"
            (UnderlyingSourcePullCallback.t_to_js R.t_to_js x15879)
    let (get_start : t -> R.t UnderlyingSourceStartCallback.t) =
      fun (x15881 : t) ->
        UnderlyingSourceStartCallback.t_of_js R.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15881) "start")
    let (set_start : t -> R.t UnderlyingSourceStartCallback.t -> unit) =
      fun (x15883 : t) ->
        fun (x15884 : R.t UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (t_to_js x15883) "start"
            (UnderlyingSourceStartCallback.t_to_js R.t_to_js x15884)
    let (get_type : t -> undefined) =
      fun (x15886 : t) ->
        undefined_of_js (Ojs.get_prop_ascii (t_to_js x15886) "type")
    let (set_type : t -> undefined -> unit) =
      fun (x15887 : t) ->
        fun (x15888 : undefined) ->
          Ojs.set_prop_ascii (t_to_js x15887) "type" (undefined_to_js x15888)
  end
module CustomEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T CustomEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15891 : Ojs.t) -> CustomEvent.t_of_js __T_of_js x15891
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15889 : __T CustomEvent.t) ->
            CustomEvent.t_to_js __T_to_js x15889
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15895 : Ojs.t) -> parent_of_js T.t_of_js x15895
    and t_to_js : t -> Ojs.t =
      fun (x15893 : T.t parent) -> parent_to_js T.t_to_js x15893
    let (get_detail : t -> T.t) =
      fun (x15897 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15897) "detail")
    let (initCustomEvent :
      t ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:T.t -> unit -> unit)
      =
      fun (x15906 : t) ->
        fun ~type_:(x15898 : string) ->
          fun ?bubbles:(x15899 : bool option) ->
            fun ?cancelable:(x15900 : bool option) ->
              fun ?detail:(x15901 : T.t option) ->
                fun () ->
                  ignore
                    (let x15907 = t_to_js x15906 in
                     Ojs.call (Ojs.get_prop_ascii x15907 "initCustomEvent")
                       "apply"
                       [|x15907;((let x15902 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x15902 "push"
                                       [|(Ojs.string_to_js x15898)|]);
                                  (match x15899 with
                                   | Some x15905 ->
                                       ignore
                                         (Ojs.call x15902 "push"
                                            [|(Ojs.bool_to_js x15905)|])
                                   | None -> ());
                                  (match x15900 with
                                   | Some x15904 ->
                                       ignore
                                         (Ojs.call x15902 "push"
                                            [|(Ojs.bool_to_js x15904)|])
                                   | None -> ());
                                  (match x15901 with
                                   | Some x15903 ->
                                       ignore
                                         (Ojs.call x15902 "push"
                                            [|(T.t_to_js x15903)|])
                                   | None -> ());
                                  x15902))|])
  end
module IDBRequest_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T IDBRequest.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15910 : Ojs.t) -> IDBRequest.t_of_js __T_of_js x15910
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15908 : __T IDBRequest.t) ->
            IDBRequest.t_to_js __T_to_js x15908
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15914 : Ojs.t) -> parent_of_js T.t_of_js x15914
    and t_to_js : t -> Ojs.t =
      fun (x15912 : T.t parent) -> parent_to_js T.t_to_js x15912
    let (get_error : t -> DOMException.t option) =
      fun (x15916 : t) ->
        Ojs.option_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15916) "error")
    let (get_onerror : t -> (this:t -> ev:Event.t -> any) option) =
      fun (x15918 : t) ->
        Ojs.option_of_js
          (fun (x15919 : Ojs.t) ->
             fun ~this:(x15920 : t) ->
               fun ~ev:(x15921 : Event.t) ->
                 any_of_js
                   (Ojs.apply x15919
                      [|(t_to_js x15920);(Event.t_to_js x15921)|]))
          (Ojs.get_prop_ascii (t_to_js x15918) "onerror")
    let (set_onerror : t -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x15922 : t) ->
        fun (x15923 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (t_to_js x15922) "onerror"
            (Ojs.option_to_js
               (fun (x15924 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15925 : Ojs.t) ->
                       fun (x15926 : Ojs.t) ->
                         any_to_js
                           (x15924 ~this:(t_of_js x15925)
                              ~ev:(Event.t_of_js x15926)))) x15923)
    let (get_onsuccess : t -> (this:t -> ev:Event.t -> any) option) =
      fun (x15927 : t) ->
        Ojs.option_of_js
          (fun (x15928 : Ojs.t) ->
             fun ~this:(x15929 : t) ->
               fun ~ev:(x15930 : Event.t) ->
                 any_of_js
                   (Ojs.apply x15928
                      [|(t_to_js x15929);(Event.t_to_js x15930)|]))
          (Ojs.get_prop_ascii (t_to_js x15927) "onsuccess")
    let (set_onsuccess : t -> (this:t -> ev:Event.t -> any) option -> unit) =
      fun (x15931 : t) ->
        fun (x15932 : (this:t -> ev:Event.t -> any) option) ->
          Ojs.set_prop_ascii (t_to_js x15931) "onsuccess"
            (Ojs.option_to_js
               (fun (x15933 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15934 : Ojs.t) ->
                       fun (x15935 : Ojs.t) ->
                         any_to_js
                           (x15933 ~this:(t_of_js x15934)
                              ~ev:(Event.t_of_js x15935)))) x15932)
    let (get_readyState : t -> IDBRequestReadyState.t) =
      fun (x15936 : t) ->
        IDBRequestReadyState.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15936) "readyState")
    let (get_result : t -> T.t) =
      fun (x15937 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x15937) "result")
    let (get_source :
      t -> (IDBCursor.t, IDBIndex.t, IDBObjectStore.t) union3) =
      fun (x15938 : t) ->
        union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
          IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15938) "source")
    let (get_transaction : t -> IDBTransaction.t option) =
      fun (x15942 : t) ->
        Ojs.option_of_js IDBTransaction.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15942) "transaction")
    let (addEventListener :
      t ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15953 : t) ->
        fun ~type_:(x15944 : 'K) ->
          fun ~listener:(x15945 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15946 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15954 = t_to_js x15953 in
                   Ojs.call (Ojs.get_prop_ascii x15954 "addEventListener")
                     "apply"
                     [|x15954;((let x15947 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15947 "push"
                                     [|(Obj.magic x15944)|]);
                                ignore
                                  (Ojs.call x15947 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15951 : Ojs.t) ->
                                             fun (x15952 : Ojs.t) ->
                                               any_to_js
                                                 (x15945
                                                    ~this:(t_of_js x15951)
                                                    ~ev:(any_of_js x15952))))|]);
                                (match x15946 with
                                 | Some x15948 ->
                                     ignore
                                       (Ojs.call x15947 "push"
                                          [|((match x15948 with
                                              | `U1 x15949 ->
                                                  Ojs.bool_to_js x15949
                                              | `U2 x15950 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x15950))|])
                                 | None -> ());
                                x15947))|])
    let (addEventListener' :
      t ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of AddEventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15962 : t) ->
        fun ~type_:(x15955 : string) ->
          fun ~listener:(x15956 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15957 :
                         [ `U1 of bool  | `U2 of AddEventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15963 = t_to_js x15962 in
                   Ojs.call (Ojs.get_prop_ascii x15963 "addEventListener")
                     "apply"
                     [|x15963;((let x15958 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15958 "push"
                                     [|(Ojs.string_to_js x15955)|]);
                                ignore
                                  (Ojs.call x15958 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15956)|]);
                                (match x15957 with
                                 | Some x15959 ->
                                     ignore
                                       (Ojs.call x15958 "push"
                                          [|((match x15959 with
                                              | `U1 x15960 ->
                                                  Ojs.bool_to_js x15960
                                              | `U2 x15961 ->
                                                  AddEventListenerOptions.t_to_js
                                                    x15961))|])
                                 | None -> ());
                                x15958))|])
    let (removeEventListener :
      t ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15973 : t) ->
        fun ~type_:(x15964 : 'K) ->
          fun ~listener:(x15965 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15966 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15974 = t_to_js x15973 in
                   Ojs.call (Ojs.get_prop_ascii x15974 "removeEventListener")
                     "apply"
                     [|x15974;((let x15967 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15967 "push"
                                     [|(Obj.magic x15964)|]);
                                ignore
                                  (Ojs.call x15967 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15971 : Ojs.t) ->
                                             fun (x15972 : Ojs.t) ->
                                               any_to_js
                                                 (x15965
                                                    ~this:(t_of_js x15971)
                                                    ~ev:(any_of_js x15972))))|]);
                                (match x15966 with
                                 | Some x15968 ->
                                     ignore
                                       (Ojs.call x15967 "push"
                                          [|((match x15968 with
                                              | `U1 x15969 ->
                                                  Ojs.bool_to_js x15969
                                              | `U2 x15970 ->
                                                  EventListenerOptions.t_to_js
                                                    x15970))|])
                                 | None -> ());
                                x15967))|])
    let (removeEventListener' :
      t ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:[ `U1 of bool  | `U2 of EventListenerOptions.t ] ->
              unit -> unit)
      =
      fun (x15982 : t) ->
        fun ~type_:(x15975 : string) ->
          fun ~listener:(x15976 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15977 :
                         [ `U1 of bool  | `U2 of EventListenerOptions.t ]
                           option)
              ->
              fun () ->
                ignore
                  (let x15983 = t_to_js x15982 in
                   Ojs.call (Ojs.get_prop_ascii x15983 "removeEventListener")
                     "apply"
                     [|x15983;((let x15978 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15978 "push"
                                     [|(Ojs.string_to_js x15975)|]);
                                ignore
                                  (Ojs.call x15978 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15976)|]);
                                (match x15977 with
                                 | Some x15979 ->
                                     ignore
                                       (Ojs.call x15978 "push"
                                          [|((match x15979 with
                                              | `U1 x15980 ->
                                                  Ojs.bool_to_js x15980
                                              | `U2 x15981 ->
                                                  EventListenerOptions.t_to_js
                                                    x15981))|])
                                 | None -> ());
                                x15978))|])
  end
module MessageEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T MessageEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x15986 : Ojs.t) -> MessageEvent.t_of_js __T_of_js x15986
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x15984 : __T MessageEvent.t) ->
            MessageEvent.t_to_js __T_to_js x15984
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x15990 : Ojs.t) -> parent_of_js T.t_of_js x15990
    and t_to_js : t -> Ojs.t =
      fun (x15988 : T.t parent) -> parent_to_js T.t_to_js x15988
    let (initMessageEvent :
      t ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x16010 : t) ->
        fun ~type_:(x15992 : string) ->
          fun ?bubbles:(x15993 : bool option) ->
            fun ?cancelable:(x15994 : bool option) ->
              fun ?data:(x15995 : any option) ->
                fun ?origin:(x15996 : string option) ->
                  fun ?lastEventId:(x15997 : string option) ->
                    fun ?source:(x15998 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x15999 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x16011 = t_to_js x16010 in
                             Ojs.call
                               (Ojs.get_prop_ascii x16011 "initMessageEvent")
                               "apply"
                               [|x16011;((let x16000 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x16000 "push"
                                               [|(Ojs.string_to_js x15992)|]);
                                          (match x15993 with
                                           | Some x16009 ->
                                               ignore
                                                 (Ojs.call x16000 "push"
                                                    [|(Ojs.bool_to_js x16009)|])
                                           | None -> ());
                                          (match x15994 with
                                           | Some x16008 ->
                                               ignore
                                                 (Ojs.call x16000 "push"
                                                    [|(Ojs.bool_to_js x16008)|])
                                           | None -> ());
                                          (match x15995 with
                                           | Some x16007 ->
                                               ignore
                                                 (Ojs.call x16000 "push"
                                                    [|(any_to_js x16007)|])
                                           | None -> ());
                                          (match x15996 with
                                           | Some x16006 ->
                                               ignore
                                                 (Ojs.call x16000 "push"
                                                    [|(Ojs.string_to_js
                                                         x16006)|])
                                           | None -> ());
                                          (match x15997 with
                                           | Some x16005 ->
                                               ignore
                                                 (Ojs.call x16000 "push"
                                                    [|(Ojs.string_to_js
                                                         x16005)|])
                                           | None -> ());
                                          (match x15998 with
                                           | Some x16003 ->
                                               ignore
                                                 (Ojs.call x16000 "push"
                                                    [|(Ojs.option_to_js
                                                         MessageEventSource.t_to_js
                                                         x16003)|])
                                           | None -> ());
                                          (match x15999 with
                                           | Some x16001 ->
                                               ignore
                                                 (Ojs.call x16000 "push"
                                                    [|(Iterable.t_1_to_js
                                                         MessagePort.t_to_js
                                                         x16001)|])
                                           | None -> ());
                                          x16000))|])
    let (get_data : t -> T.t) =
      fun (x16012 : t) ->
        T.t_of_js (Ojs.get_prop_ascii (t_to_js x16012) "data")
    let (get_lastEventId : t -> string) =
      fun (x16013 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x16013) "lastEventId")
    let (get_origin : t -> string) =
      fun (x16014 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x16014) "origin")
    let (get_ports : t -> MessagePort.t list) =
      fun (x16015 : t) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16015) "ports")
    let (get_source : t -> MessageEventSource.t option) =
      fun (x16017 : t) ->
        Ojs.option_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16017) "source")
    let (initMessageEvent' :
      t ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t option ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x16037 : t) ->
        fun ~type_:(x16019 : string) ->
          fun ?bubbles:(x16020 : bool option) ->
            fun ?cancelable:(x16021 : bool option) ->
              fun ?data:(x16022 : any option) ->
                fun ?origin:(x16023 : string option) ->
                  fun ?lastEventId:(x16024 : string option) ->
                    fun ?source:(x16025 : MessageEventSource.t option option)
                      ->
                      fun ?ports:(x16026 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x16038 = t_to_js x16037 in
                             Ojs.call
                               (Ojs.get_prop_ascii x16038 "initMessageEvent")
                               "apply"
                               [|x16038;((let x16027 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x16027 "push"
                                               [|(Ojs.string_to_js x16019)|]);
                                          (match x16020 with
                                           | Some x16036 ->
                                               ignore
                                                 (Ojs.call x16027 "push"
                                                    [|(Ojs.bool_to_js x16036)|])
                                           | None -> ());
                                          (match x16021 with
                                           | Some x16035 ->
                                               ignore
                                                 (Ojs.call x16027 "push"
                                                    [|(Ojs.bool_to_js x16035)|])
                                           | None -> ());
                                          (match x16022 with
                                           | Some x16034 ->
                                               ignore
                                                 (Ojs.call x16027 "push"
                                                    [|(any_to_js x16034)|])
                                           | None -> ());
                                          (match x16023 with
                                           | Some x16033 ->
                                               ignore
                                                 (Ojs.call x16027 "push"
                                                    [|(Ojs.string_to_js
                                                         x16033)|])
                                           | None -> ());
                                          (match x16024 with
                                           | Some x16032 ->
                                               ignore
                                                 (Ojs.call x16027 "push"
                                                    [|(Ojs.string_to_js
                                                         x16032)|])
                                           | None -> ());
                                          (match x16025 with
                                           | Some x16030 ->
                                               ignore
                                                 (Ojs.call x16027 "push"
                                                    [|(Ojs.option_to_js
                                                         MessageEventSource.t_to_js
                                                         x16030)|])
                                           | None -> ());
                                          (match x16026 with
                                           | Some x16028 ->
                                               ignore
                                                 (Ojs.call x16027 "push"
                                                    [|(Ojs.list_to_js
                                                         MessagePort.t_to_js
                                                         x16028)|])
                                           | None -> ());
                                          x16027))|])
  end
module ProgressEvent_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T ProgressEvent.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16041 : Ojs.t) -> ProgressEvent.t_of_js __T_of_js x16041
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16039 : __T ProgressEvent.t) ->
            ProgressEvent.t_to_js __T_to_js x16039
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16045 : Ojs.t) -> parent_of_js T.t_of_js x16045
    and t_to_js : t -> Ojs.t =
      fun (x16043 : T.t parent) -> parent_to_js T.t_to_js x16043
    let (get_lengthComputable : t -> bool) =
      fun (x16047 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x16047) "lengthComputable")
    let (get_loaded : t -> float) =
      fun (x16048 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x16048) "loaded")
    let (get_target : t -> T.t option) =
      fun (x16049 : t) ->
        Ojs.option_of_js T.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16049) "target")
    let (get_total : t -> float) =
      fun (x16051 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x16051) "total")
  end
module ReadableStream_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStream.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16054 : Ojs.t) -> ReadableStream.t_of_js __R_of_js x16054
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16052 : __R ReadableStream.t) ->
            ReadableStream.t_to_js __R_to_js x16052
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16058 : Ojs.t) -> parent_of_js R.t_of_js x16058
    and t_to_js : t -> Ojs.t =
      fun (x16056 : R.t parent) -> parent_to_js R.t_to_js x16056
    let (get_locked : t -> bool) =
      fun (x16060 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x16060) "locked")
    let (cancel : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x16064 : t) ->
        fun ?reason:(x16061 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16065 = t_to_js x16064 in
               Ojs.call (Ojs.get_prop_ascii x16065 "cancel") "apply"
                 [|x16065;((let x16062 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16061 with
                             | Some x16063 ->
                                 ignore
                                   (Ojs.call x16062 "push"
                                      [|(any_to_js x16063)|])
                             | None -> ());
                            x16062))|])
    let (getReader : t -> R.t ReadableStreamDefaultReader.t) =
      fun (x16067 : t) ->
        ReadableStreamDefaultReader.t_of_js R.t_of_js
          (Ojs.call (t_to_js x16067) "getReader" [||])
    let (pipeThrough :
      t ->
        transform:('T, R.t) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T parent)
      =
      fun (x16075 : t) ->
        fun ~transform:(x16069 : ('T, R.t) ReadableWritablePair.t) ->
          fun ?options:(x16070 : StreamPipeOptions.t option) ->
            fun () ->
              parent_of_js Obj.magic
                (let x16076 = t_to_js x16075 in
                 Ojs.call (Ojs.get_prop_ascii x16076 "pipeThrough") "apply"
                   [|x16076;((let x16071 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x16071 "push"
                                   [|(ReadableWritablePair.t_to_js Obj.magic
                                        R.t_to_js x16069)|]);
                              (match x16070 with
                               | Some x16072 ->
                                   ignore
                                     (Ojs.call x16071 "push"
                                        [|(StreamPipeOptions.t_to_js x16072)|])
                               | None -> ());
                              x16071))|])
    let (pipeTo :
      t ->
        destination:R.t WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x16083 : t) ->
        fun ~destination:(x16078 : R.t WritableStream.t) ->
          fun ?options:(x16079 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x16084 = t_to_js x16083 in
                 Ojs.call (Ojs.get_prop_ascii x16084 "pipeTo") "apply"
                   [|x16084;((let x16080 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x16080 "push"
                                   [|(WritableStream.t_to_js R.t_to_js x16078)|]);
                              (match x16079 with
                               | Some x16081 ->
                                   ignore
                                     (Ojs.call x16080 "push"
                                        [|(StreamPipeOptions.t_to_js x16081)|])
                               | None -> ());
                              x16080))|])
    let (tee : t -> (t * t)) =
      fun (x16086 : t) ->
        let x16087 = Ojs.call (t_to_js x16086) "tee" [||] in
        ((t_of_js (Ojs.array_get x16087 0)),
          (t_of_js (Ojs.array_get x16087 1)))
  end
module ReadableStreamDefaultController_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStreamDefaultController.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16090 : Ojs.t) ->
            ReadableStreamDefaultController.t_of_js __R_of_js x16090
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16088 : __R ReadableStreamDefaultController.t) ->
            ReadableStreamDefaultController.t_to_js __R_to_js x16088
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16094 : Ojs.t) -> parent_of_js R.t_of_js x16094
    and t_to_js : t -> Ojs.t =
      fun (x16092 : R.t parent) -> parent_to_js R.t_to_js x16092
    let (get_desiredSize : t -> float option) =
      fun (x16096 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16096) "desiredSize")
    let (close : t -> unit) =
      fun (x16098 : t) -> ignore (Ojs.call (t_to_js x16098) "close" [||])
    let (enqueue : t -> ?chunk:R.t -> unit -> unit) =
      fun (x16102 : t) ->
        fun ?chunk:(x16099 : R.t option) ->
          fun () ->
            ignore
              (let x16103 = t_to_js x16102 in
               Ojs.call (Ojs.get_prop_ascii x16103 "enqueue") "apply"
                 [|x16103;((let x16100 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16099 with
                             | Some x16101 ->
                                 ignore
                                   (Ojs.call x16100 "push"
                                      [|(R.t_to_js x16101)|])
                             | None -> ());
                            x16100))|])
    let (error : t -> ?e:any -> unit -> unit) =
      fun (x16107 : t) ->
        fun ?e:(x16104 : any option) ->
          fun () ->
            ignore
              (let x16108 = t_to_js x16107 in
               Ojs.call (Ojs.get_prop_ascii x16108 "error") "apply"
                 [|x16108;((let x16105 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16104 with
                             | Some x16106 ->
                                 ignore
                                   (Ojs.call x16105 "push"
                                      [|(any_to_js x16106)|])
                             | None -> ());
                            x16105))|])
  end
module ReadableStreamDefaultReader_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R ReadableStreamDefaultReader.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16111 : Ojs.t) ->
            ReadableStreamDefaultReader.t_of_js __R_of_js x16111
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16109 : __R ReadableStreamDefaultReader.t) ->
            ReadableStreamDefaultReader.t_to_js __R_to_js x16109
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16115 : Ojs.t) -> parent_of_js R.t_of_js x16115
    and t_to_js : t -> Ojs.t =
      fun (x16113 : R.t parent) -> parent_to_js R.t_to_js x16113
    let (read : t -> R.t ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x16117 : t) ->
        Promise.t_1_of_js
          (fun (x16118 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js R.t_of_js x16118)
          (Ojs.call (t_to_js x16117) "read" [||])
    let (releaseLock : t -> unit) =
      fun (x16120 : t) ->
        ignore (Ojs.call (t_to_js x16120) "releaseLock" [||])
  end
module TransformStream_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) TransformStream.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x16124 : Ojs.t) ->
                TransformStream.t_of_js __I_of_js __O_of_js x16124
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x16121 : (__I, __O) TransformStream.t) ->
                TransformStream.t_to_js __I_to_js __O_to_js x16121
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16130 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x16130
    and t_to_js : t -> Ojs.t =
      fun (x16127 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x16127
    let (get_readable : t -> O.t ReadableStream.t) =
      fun (x16133 : t) ->
        ReadableStream.t_of_js O.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16133) "readable")
    let (get_writable : t -> I.t WritableStream.t) =
      fun (x16135 : t) ->
        WritableStream.t_of_js I.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16135) "writable")
  end
module TransformStreamDefaultController_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformStreamDefaultController.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x16139 : Ojs.t) ->
            TransformStreamDefaultController.t_of_js __O_of_js x16139
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x16137 : __O TransformStreamDefaultController.t) ->
            TransformStreamDefaultController.t_to_js __O_to_js x16137
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16143 : Ojs.t) -> parent_of_js O.t_of_js x16143
    and t_to_js : t -> Ojs.t =
      fun (x16141 : O.t parent) -> parent_to_js O.t_to_js x16141
    let (get_desiredSize : t -> float option) =
      fun (x16145 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16145) "desiredSize")
    let (enqueue : t -> ?chunk:O.t -> unit -> unit) =
      fun (x16150 : t) ->
        fun ?chunk:(x16147 : O.t option) ->
          fun () ->
            ignore
              (let x16151 = t_to_js x16150 in
               Ojs.call (Ojs.get_prop_ascii x16151 "enqueue") "apply"
                 [|x16151;((let x16148 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16147 with
                             | Some x16149 ->
                                 ignore
                                   (Ojs.call x16148 "push"
                                      [|(O.t_to_js x16149)|])
                             | None -> ());
                            x16148))|])
    let (error : t -> ?reason:any -> unit -> unit) =
      fun (x16155 : t) ->
        fun ?reason:(x16152 : any option) ->
          fun () ->
            ignore
              (let x16156 = t_to_js x16155 in
               Ojs.call (Ojs.get_prop_ascii x16156 "error") "apply"
                 [|x16156;((let x16153 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16152 with
                             | Some x16154 ->
                                 ignore
                                   (Ojs.call x16153 "push"
                                      [|(any_to_js x16154)|])
                             | None -> ());
                            x16153))|])
    let (terminate : t -> unit) =
      fun (x16157 : t) -> ignore (Ojs.call (t_to_js x16157) "terminate" [||])
  end
module WritableStream_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W WritableStream.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16160 : Ojs.t) -> WritableStream.t_of_js __W_of_js x16160
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16158 : __W WritableStream.t) ->
            WritableStream.t_to_js __W_to_js x16158
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16164 : Ojs.t) -> parent_of_js W.t_of_js x16164
    and t_to_js : t -> Ojs.t =
      fun (x16162 : W.t parent) -> parent_to_js W.t_to_js x16162
    let (get_locked : t -> bool) =
      fun (x16166 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x16166) "locked")
    let (abort : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x16170 : t) ->
        fun ?reason:(x16167 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16171 = t_to_js x16170 in
               Ojs.call (Ojs.get_prop_ascii x16171 "abort") "apply"
                 [|x16171;((let x16168 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16167 with
                             | Some x16169 ->
                                 ignore
                                   (Ojs.call x16168 "push"
                                      [|(any_to_js x16169)|])
                             | None -> ());
                            x16168))|])
    let (close : t -> unit Promise.t_1) =
      fun (x16173 : t) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (t_to_js x16173) "close" [||])
    let (getWriter : t -> W.t WritableStreamDefaultWriter.t) =
      fun (x16175 : t) ->
        WritableStreamDefaultWriter.t_of_js W.t_of_js
          (Ojs.call (t_to_js x16175) "getWriter" [||])
  end
module WritableStreamDefaultWriter_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W WritableStreamDefaultWriter.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16179 : Ojs.t) ->
            WritableStreamDefaultWriter.t_of_js __W_of_js x16179
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16177 : __W WritableStreamDefaultWriter.t) ->
            WritableStreamDefaultWriter.t_to_js __W_to_js x16177
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16183 : Ojs.t) -> parent_of_js W.t_of_js x16183
    and t_to_js : t -> Ojs.t =
      fun (x16181 : W.t parent) -> parent_to_js W.t_to_js x16181
    let (get_closed : t -> undefined Promise.t_1) =
      fun (x16185 : t) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (t_to_js x16185) "closed")
    let (get_desiredSize : t -> float option) =
      fun (x16187 : t) ->
        Ojs.option_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x16187) "desiredSize")
    let (get_ready : t -> undefined Promise.t_1) =
      fun (x16189 : t) ->
        Promise.t_1_of_js undefined_of_js
          (Ojs.get_prop_ascii (t_to_js x16189) "ready")
    let (abort : t -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x16194 : t) ->
        fun ?reason:(x16191 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16195 = t_to_js x16194 in
               Ojs.call (Ojs.get_prop_ascii x16195 "abort") "apply"
                 [|x16195;((let x16192 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16191 with
                             | Some x16193 ->
                                 ignore
                                   (Ojs.call x16192 "push"
                                      [|(any_to_js x16193)|])
                             | None -> ());
                            x16192))|])
    let (close : t -> unit Promise.t_1) =
      fun (x16197 : t) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (t_to_js x16197) "close" [||])
    let (releaseLock : t -> unit) =
      fun (x16199 : t) ->
        ignore (Ojs.call (t_to_js x16199) "releaseLock" [||])
    let (write : t -> ?chunk:W.t -> unit -> unit Promise.t_1) =
      fun (x16203 : t) ->
        fun ?chunk:(x16200 : W.t option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x16204 = t_to_js x16203 in
               Ojs.call (Ojs.get_prop_ascii x16204 "write") "apply"
                 [|x16204;((let x16201 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x16200 with
                             | Some x16202 ->
                                 ignore
                                   (Ojs.call x16201 "push"
                                      [|(W.t_to_js x16202)|])
                             | None -> ());
                            x16201))|])
  end
module QueuingStrategySize_Make(T:Ojs.T) =
  struct
    type 'T parent = 'T QueuingStrategySize.t
    let rec parent_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T parent =
      fun (type __T) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x16208 : Ojs.t) ->
            QueuingStrategySize.t_of_js __T_of_js x16208
    and parent_to_js : 'T . ('T -> Ojs.t) -> 'T parent -> Ojs.t =
      fun (type __T) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x16206 : __T QueuingStrategySize.t) ->
            QueuingStrategySize.t_to_js __T_to_js x16206
    type t = T.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16212 : Ojs.t) -> parent_of_js T.t_of_js x16212
    and t_to_js : t -> Ojs.t =
      fun (x16210 : T.t parent) -> parent_to_js T.t_to_js x16210
    let (apply : t -> chunk:T.t -> float) =
      fun (x16215 : t) ->
        fun ~chunk:(x16214 : T.t) ->
          Ojs.float_of_js (Ojs.apply (t_to_js x16215) [|(T.t_to_js x16214)|])
  end
module TransformerFlushCallback_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformerFlushCallback.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x16218 : Ojs.t) ->
            TransformerFlushCallback.t_of_js __O_of_js x16218
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x16216 : __O TransformerFlushCallback.t) ->
            TransformerFlushCallback.t_to_js __O_to_js x16216
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16222 : Ojs.t) -> parent_of_js O.t_of_js x16222
    and t_to_js : t -> Ojs.t =
      fun (x16220 : O.t parent) -> parent_to_js O.t_to_js x16220
    let (apply :
      t ->
        controller:O.t TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16226 : t) ->
        fun ~controller:(x16224 : O.t TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x16228 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x16228)
            (Ojs.apply (t_to_js x16226)
               [|(TransformStreamDefaultController.t_to_js O.t_to_js x16224)|])
  end
module TransformerStartCallback_Make(O:Ojs.T) =
  struct
    type 'O parent = 'O TransformerStartCallback.t
    let rec parent_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O parent =
      fun (type __O) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x16232 : Ojs.t) ->
            TransformerStartCallback.t_of_js __O_of_js x16232
    and parent_to_js : 'O . ('O -> Ojs.t) -> 'O parent -> Ojs.t =
      fun (type __O) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x16230 : __O TransformerStartCallback.t) ->
            TransformerStartCallback.t_to_js __O_to_js x16230
    type t = O.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16236 : Ojs.t) -> parent_of_js O.t_of_js x16236
    and t_to_js : t -> Ojs.t =
      fun (x16234 : O.t parent) -> parent_to_js O.t_to_js x16234
    let (apply :
      t -> controller:O.t TransformStreamDefaultController.t -> any) =
      fun (x16240 : t) ->
        fun ~controller:(x16238 : O.t TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (t_to_js x16240)
               [|(TransformStreamDefaultController.t_to_js O.t_to_js x16238)|])
  end
module TransformerTransformCallback_Make(I:Ojs.T)(O:Ojs.T) =
  struct
    type ('I, 'O) parent = ('I, 'O) TransformerTransformCallback.t
    let rec parent_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) parent =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (x16244 : Ojs.t) ->
                TransformerTransformCallback.t_of_js __I_of_js __O_of_js
                  x16244
    and parent_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) parent -> Ojs.t =
      fun (type __I) ->
        fun (type __O) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (x16241 : (__I, __O) TransformerTransformCallback.t) ->
                TransformerTransformCallback.t_to_js __I_to_js __O_to_js
                  x16241
    type t = (I.t, O.t) parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16250 : Ojs.t) -> parent_of_js I.t_of_js O.t_of_js x16250
    and t_to_js : t -> Ojs.t =
      fun (x16247 : (I.t, O.t) parent) ->
        parent_to_js I.t_to_js O.t_to_js x16247
    let (apply :
      t ->
        chunk:I.t ->
          controller:O.t TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16256 : t) ->
        fun ~chunk:(x16253 : I.t) ->
          fun ~controller:(x16254 : O.t TransformStreamDefaultController.t)
            ->
            union2_of_js Ojs.unit_of_js
              (fun (x16258 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x16258)
              (Ojs.apply (t_to_js x16256)
                 [|(I.t_to_js x16253);(TransformStreamDefaultController.t_to_js
                                         O.t_to_js x16254)|])
  end
module UnderlyingSinkWriteCallback_Make(W:Ojs.T) =
  struct
    type 'W parent = 'W UnderlyingSinkWriteCallback.t
    let rec parent_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W parent =
      fun (type __W) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x16262 : Ojs.t) ->
            UnderlyingSinkWriteCallback.t_of_js __W_of_js x16262
    and parent_to_js : 'W . ('W -> Ojs.t) -> 'W parent -> Ojs.t =
      fun (type __W) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x16260 : __W UnderlyingSinkWriteCallback.t) ->
            UnderlyingSinkWriteCallback.t_to_js __W_to_js x16260
    type t = W.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16266 : Ojs.t) -> parent_of_js W.t_of_js x16266
    and t_to_js : t -> Ojs.t =
      fun (x16264 : W.t parent) -> parent_to_js W.t_to_js x16264
    let (apply :
      t ->
        chunk:W.t ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16270 : t) ->
        fun ~chunk:(x16268 : W.t) ->
          fun ~controller:(x16269 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x16272 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x16272)
              (Ojs.apply (t_to_js x16270)
                 [|(W.t_to_js x16268);(WritableStreamDefaultController.t_to_js
                                         x16269)|])
  end
module UnderlyingSourcePullCallback_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSourcePullCallback.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16276 : Ojs.t) ->
            UnderlyingSourcePullCallback.t_of_js __R_of_js x16276
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16274 : __R UnderlyingSourcePullCallback.t) ->
            UnderlyingSourcePullCallback.t_to_js __R_to_js x16274
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16280 : Ojs.t) -> parent_of_js R.t_of_js x16280
    and t_to_js : t -> Ojs.t =
      fun (x16278 : R.t parent) -> parent_to_js R.t_to_js x16278
    let (apply :
      t ->
        controller:R.t ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x16284 : t) ->
        fun ~controller:(x16282 : R.t ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x16286 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x16286)
            (Ojs.apply (t_to_js x16284)
               [|(ReadableStreamController.t_to_js R.t_to_js x16282)|])
  end
module UnderlyingSourceStartCallback_Make(R:Ojs.T) =
  struct
    type 'R parent = 'R UnderlyingSourceStartCallback.t
    let rec parent_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R parent =
      fun (type __R) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x16290 : Ojs.t) ->
            UnderlyingSourceStartCallback.t_of_js __R_of_js x16290
    and parent_to_js : 'R . ('R -> Ojs.t) -> 'R parent -> Ojs.t =
      fun (type __R) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x16288 : __R UnderlyingSourceStartCallback.t) ->
            UnderlyingSourceStartCallback.t_to_js __R_to_js x16288
    type t = R.t parent
    let rec t_of_js : Ojs.t -> t =
      fun (x16294 : Ojs.t) -> parent_of_js R.t_of_js x16294
    and t_to_js : t -> Ojs.t =
      fun (x16292 : R.t parent) -> parent_to_js R.t_to_js x16292
    let (apply : t -> controller:R.t ReadableStreamController.t -> any) =
      fun (x16298 : t) ->
        fun ~controller:(x16296 : R.t ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (t_to_js x16298)
               [|(ReadableStreamController.t_to_js R.t_to_js x16296)|])
  end
let (importScripts : string list -> unit) =
  fun (x16299 : string list) ->
    ignore
      (let x16302 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16302 "importScripts") "apply"
         [|x16302;((let x16300 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x16301 : string) ->
                         ignore
                           (Ojs.call x16300 "push"
                              [|(Ojs.string_to_js x16301)|])) x16299;
                    x16300))|])
let (console : unit -> Console.t) =
  fun () -> Console.t_of_js (Ojs.get_prop_ascii Ojs.global "console")
let (name : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "name")
let (onmessage :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16303 : Ojs.t) ->
         fun ~this:(x16304 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16305 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16303
                  [|(DedicatedWorkerGlobalScope.t_to_js x16304);(MessageEvent.t_0_to_js
                                                                   x16305)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessage")
let (onmessageerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16306 : Ojs.t) ->
         fun ~this:(x16307 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16308 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16306
                  [|(DedicatedWorkerGlobalScope.t_to_js x16307);(MessageEvent.t_0_to_js
                                                                   x16308)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessageerror")
let (close : unit -> unit) =
  fun () -> ignore (Ojs.call Ojs.global "close" [||])
let (postMessage : message:any -> transfer:Transferable.t list -> unit) =
  fun ~message:(x16309 : any) ->
    fun ~transfer:(x16310 : Transferable.t list) ->
      ignore
        (Ojs.call Ojs.global "postMessage"
           [|(any_to_js x16309);(Ojs.list_to_js Transferable.t_to_js x16310)|])
let (postMessage' :
  message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit) =
  fun ~message:(x16312 : any) ->
    fun ?options:(x16313 : StructuredSerializeOptions.t option) ->
      fun () ->
        ignore
          (let x16316 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16316 "postMessage") "apply"
             [|x16316;((let x16314 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16314 "push" [|(any_to_js x16312)|]);
                        (match x16313 with
                         | Some x16315 ->
                             ignore
                               (Ojs.call x16314 "push"
                                  [|(StructuredSerializeOptions.t_to_js
                                       x16315)|])
                         | None -> ());
                        x16314))|])
let (dispatchEvent : Event.t -> bool) =
  fun (x16317 : Event.t) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "dispatchEvent" [|(Event.t_to_js x16317)|])
let (location : unit -> WorkerLocation.t) =
  fun () -> WorkerLocation.t_of_js (Ojs.get_prop_ascii Ojs.global "location")
let (navigator : unit -> WorkerNavigator.t) =
  fun () ->
    WorkerNavigator.t_of_js (Ojs.get_prop_ascii Ojs.global "navigator")
let (onerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:ErrorEvent.t -> any) option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16318 : Ojs.t) ->
         fun ~this:(x16319 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16320 : ErrorEvent.t) ->
             any_of_js
               (Ojs.apply x16318
                  [|(DedicatedWorkerGlobalScope.t_to_js x16319);(ErrorEvent.t_to_js
                                                                   x16320)|]))
      (Ojs.get_prop_ascii Ojs.global "onerror")
let (onlanguagechange :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x16321 : Ojs.t) ->
         fun ~this:(x16322 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16323 : Event.t) ->
             any_of_js
               (Ojs.apply x16321
                  [|(DedicatedWorkerGlobalScope.t_to_js x16322);(Event.t_to_js
                                                                   x16323)|]))
      (Ojs.get_prop_ascii Ojs.global "onlanguagechange")
let (onoffline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x16324 : Ojs.t) ->
         fun ~this:(x16325 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16326 : Event.t) ->
             any_of_js
               (Ojs.apply x16324
                  [|(DedicatedWorkerGlobalScope.t_to_js x16325);(Event.t_to_js
                                                                   x16326)|]))
      (Ojs.get_prop_ascii Ojs.global "onoffline")
let (ononline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) option) =
  fun () ->
    Ojs.option_of_js
      (fun (x16327 : Ojs.t) ->
         fun ~this:(x16328 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16329 : Event.t) ->
             any_of_js
               (Ojs.apply x16327
                  [|(DedicatedWorkerGlobalScope.t_to_js x16328);(Event.t_to_js
                                                                   x16329)|]))
      (Ojs.get_prop_ascii Ojs.global "ononline")
let (onrejectionhandled :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16330 : Ojs.t) ->
         fun ~this:(x16331 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16332 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16330
                  [|(DedicatedWorkerGlobalScope.t_to_js x16331);(PromiseRejectionEvent.t_to_js
                                                                   x16332)|]))
      (Ojs.get_prop_ascii Ojs.global "onrejectionhandled")
let (onunhandledrejection :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      option)
  =
  fun () ->
    Ojs.option_of_js
      (fun (x16333 : Ojs.t) ->
         fun ~this:(x16334 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16335 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16333
                  [|(DedicatedWorkerGlobalScope.t_to_js x16334);(PromiseRejectionEvent.t_to_js
                                                                   x16335)|]))
      (Ojs.get_prop_ascii Ojs.global "onunhandledrejection")
let (self : unit -> (WorkerGlobalScope.t, any) intersection2) =
  fun () ->
    intersection2_of_js WorkerGlobalScope.t_of_js any_of_js
      (Ojs.get_prop_ascii Ojs.global "self")
let (importScripts' :
  [ `String of string  | `Other of URL.t ] Primitive.t list -> unit) =
  fun (x16338 : [ `String of string  | `Other of URL.t ] Primitive.t list) ->
    ignore
      (let x16344 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16344 "importScripts") "apply"
         [|x16344;((let x16339 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun
                         (x16340 :
                           [ `String of string  | `Other of URL.t ]
                             Primitive.t)
                         ->
                         ignore
                           (Ojs.call x16339 "push"
                              [|(Primitive.t_to_js
                                   (fun
                                      (x16341 :
                                        [ `String of string 
                                        | `Other of URL.t ])
                                      ->
                                      match x16341 with
                                      | `String x16342 ->
                                          Ojs.string_to_js x16342
                                      | `Other x16343 -> URL.t_to_js x16343)
                                   x16340)|])) x16338;
                    x16339))|])
let (fonts : unit -> FontFaceSet.t) =
  fun () -> FontFaceSet.t_of_js (Ojs.get_prop_ascii Ojs.global "fonts")
let (caches : unit -> CacheStorage.t) =
  fun () -> CacheStorage.t_of_js (Ojs.get_prop_ascii Ojs.global "caches")
let (crossOriginIsolated : unit -> bool) =
  fun () ->
    Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "crossOriginIsolated")
let (crypto : unit -> Crypto.t) =
  fun () -> Crypto.t_of_js (Ojs.get_prop_ascii Ojs.global "crypto")
let (indexedDB : unit -> IDBFactory.t) =
  fun () -> IDBFactory.t_of_js (Ojs.get_prop_ascii Ojs.global "indexedDB")
let (isSecureContext : unit -> bool) =
  fun () -> Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "isSecureContext")
let (origin : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "origin")
let (performance : unit -> Performance.t) =
  fun () -> Performance.t_of_js (Ojs.get_prop_ascii Ojs.global "performance")
let (atob : string -> string) =
  fun (x16345 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "atob" [|(Ojs.string_to_js x16345)|])
let (btoa : string -> string) =
  fun (x16346 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "btoa" [|(Ojs.string_to_js x16346)|])
let (clearInterval : ?id:float -> unit -> unit) =
  fun ?id:(x16347 : float option) ->
    fun () ->
      ignore
        (let x16350 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16350 "clearInterval") "apply"
           [|x16350;((let x16348 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16347 with
                       | Some x16349 ->
                           ignore
                             (Ojs.call x16348 "push"
                                [|(Ojs.float_to_js x16349)|])
                       | None -> ());
                      x16348))|])
let (clearTimeout : ?id:float -> unit -> unit) =
  fun ?id:(x16351 : float option) ->
    fun () ->
      ignore
        (let x16354 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16354 "clearTimeout") "apply"
           [|x16354;((let x16352 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16351 with
                       | Some x16353 ->
                           ignore
                             (Ojs.call x16352 "push"
                                [|(Ojs.float_to_js x16353)|])
                       | None -> ());
                      x16352))|])
let (createImageBitmap :
  image:ImageBitmapSource.t ->
    ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16355 : ImageBitmapSource.t) ->
    fun ?options:(x16356 : ImageBitmapOptions.t option) ->
      fun () ->
        Promise.t_1_of_js ImageBitmap.t_of_js
          (let x16359 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16359 "createImageBitmap") "apply"
             [|x16359;((let x16357 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16357 "push"
                             [|(ImageBitmapSource.t_to_js x16355)|]);
                        (match x16356 with
                         | Some x16358 ->
                             ignore
                               (Ojs.call x16357 "push"
                                  [|(ImageBitmapOptions.t_to_js x16358)|])
                         | None -> ());
                        x16357))|])
let (createImageBitmap' :
  image:ImageBitmapSource.t ->
    sx:float ->
      sy:float ->
        sw:float ->
          sh:float ->
            ?options:ImageBitmapOptions.t ->
              unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16361 : ImageBitmapSource.t) ->
    fun ~sx:(x16362 : float) ->
      fun ~sy:(x16363 : float) ->
        fun ~sw:(x16364 : float) ->
          fun ~sh:(x16365 : float) ->
            fun ?options:(x16366 : ImageBitmapOptions.t option) ->
              fun () ->
                Promise.t_1_of_js ImageBitmap.t_of_js
                  (let x16369 = Ojs.global in
                   Ojs.call (Ojs.get_prop_ascii x16369 "createImageBitmap")
                     "apply"
                     [|x16369;((let x16367 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16367 "push"
                                     [|(ImageBitmapSource.t_to_js x16361)|]);
                                ignore
                                  (Ojs.call x16367 "push"
                                     [|(Ojs.float_to_js x16362)|]);
                                ignore
                                  (Ojs.call x16367 "push"
                                     [|(Ojs.float_to_js x16363)|]);
                                ignore
                                  (Ojs.call x16367 "push"
                                     [|(Ojs.float_to_js x16364)|]);
                                ignore
                                  (Ojs.call x16367 "push"
                                     [|(Ojs.float_to_js x16365)|]);
                                (match x16366 with
                                 | Some x16368 ->
                                     ignore
                                       (Ojs.call x16367 "push"
                                          [|(ImageBitmapOptions.t_to_js
                                               x16368)|])
                                 | None -> ());
                                x16367))|])
let (fetch :
  input:RequestInfo.t ->
    ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
  =
  fun ~input:(x16371 : RequestInfo.t) ->
    fun ?init:(x16372 : RequestInit.t option) ->
      fun () ->
        Promise.t_1_of_js Response.t_of_js
          (let x16375 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16375 "fetch") "apply"
             [|x16375;((let x16373 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16373 "push"
                             [|(RequestInfo.t_to_js x16371)|]);
                        (match x16372 with
                         | Some x16374 ->
                             ignore
                               (Ojs.call x16373 "push"
                                  [|(RequestInit.t_to_js x16374)|])
                         | None -> ());
                        x16373))|])
let (queueMicrotask : VoidFunction.t -> unit) =
  fun (x16377 : VoidFunction.t) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask" [|(VoidFunction.t_to_js x16377)|])
let (reportError : any -> unit) =
  fun (x16378 : any) ->
    ignore (Ojs.call Ojs.global "reportError" [|(any_to_js x16378)|])
let (setInterval :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16379 : TimerHandler.t) ->
    fun ?timeout:(x16380 : float option) ->
      fun ~arguments:(x16381 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16385 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16385 "setInterval") "apply"
               [|x16385;((let x16382 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16382 "push"
                               [|(TimerHandler.t_to_js x16379)|]);
                          (match x16380 with
                           | Some x16384 ->
                               ignore
                                 (Ojs.call x16382 "push"
                                    [|(Ojs.float_to_js x16384)|])
                           | None -> ());
                          List.iter
                            (fun (x16383 : any) ->
                               ignore
                                 (Ojs.call x16382 "push"
                                    [|(any_to_js x16383)|])) x16381;
                          x16382))|])
let (setTimeout :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16386 : TimerHandler.t) ->
    fun ?timeout:(x16387 : float option) ->
      fun ~arguments:(x16388 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16392 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16392 "setTimeout") "apply"
               [|x16392;((let x16389 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16389 "push"
                               [|(TimerHandler.t_to_js x16386)|]);
                          (match x16387 with
                           | Some x16391 ->
                               ignore
                                 (Ojs.call x16389 "push"
                                    [|(Ojs.float_to_js x16391)|])
                           | None -> ());
                          List.iter
                            (fun (x16390 : any) ->
                               ignore
                                 (Ojs.call x16389 "push"
                                    [|(any_to_js x16390)|])) x16388;
                          x16389))|])
let (cancelAnimationFrame : float -> unit) =
  fun (x16393 : float) ->
    ignore
      (Ojs.call Ojs.global "cancelAnimationFrame"
         [|(Ojs.float_to_js x16393)|])
let (requestAnimationFrame : FrameRequestCallback.t -> float) =
  fun (x16394 : FrameRequestCallback.t) ->
    Ojs.float_of_js
      (Ojs.call Ojs.global "requestAnimationFrame"
         [|(FrameRequestCallback.t_to_js x16394)|])
let (addEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:[ `Boolean of bool  | `Other of AddEventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16395 : 'K) ->
    fun
      ~listener:(x16396 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun
        ?options:(x16397 :
                   [ `Boolean of bool 
                   | `Other of AddEventListenerOptions.t ] Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16405 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16405 "addEventListener") "apply"
               [|x16405;((let x16398 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16398 "push" [|(Obj.magic x16395)|]);
                          ignore
                            (Ojs.call x16398 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16403 : Ojs.t) ->
                                       fun (x16404 : Ojs.t) ->
                                         any_to_js
                                           (x16396
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16403)
                                              ~ev:(any_of_js x16404))))|]);
                          (match x16397 with
                           | Some x16399 ->
                               ignore
                                 (Ojs.call x16398 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16400 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  AddEventListenerOptions.t ])
                                            ->
                                            match x16400 with
                                            | `Boolean x16401 ->
                                                Ojs.bool_to_js x16401
                                            | `Other x16402 ->
                                                AddEventListenerOptions.t_to_js
                                                  x16402) x16399)|])
                           | None -> ());
                          x16398))|])
let (addEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:[ `Boolean of bool  | `Other of AddEventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16406 : string) ->
    fun ~listener:(x16407 : EventListenerOrEventListenerObject.t) ->
      fun
        ?options:(x16408 :
                   [ `Boolean of bool 
                   | `Other of AddEventListenerOptions.t ] Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16414 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16414 "addEventListener") "apply"
               [|x16414;((let x16409 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16409 "push"
                               [|(Ojs.string_to_js x16406)|]);
                          ignore
                            (Ojs.call x16409 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16407)|]);
                          (match x16408 with
                           | Some x16410 ->
                               ignore
                                 (Ojs.call x16409 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16411 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  AddEventListenerOptions.t ])
                                            ->
                                            match x16411 with
                                            | `Boolean x16412 ->
                                                Ojs.bool_to_js x16412
                                            | `Other x16413 ->
                                                AddEventListenerOptions.t_to_js
                                                  x16413) x16410)|])
                           | None -> ());
                          x16409))|])
let (removeEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:[ `Boolean of bool  | `Other of EventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16415 : 'K) ->
    fun
      ~listener:(x16416 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun
        ?options:(x16417 :
                   [ `Boolean of bool  | `Other of EventListenerOptions.t ]
                     Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16425 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16425 "removeEventListener")
               "apply"
               [|x16425;((let x16418 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16418 "push" [|(Obj.magic x16415)|]);
                          ignore
                            (Ojs.call x16418 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16423 : Ojs.t) ->
                                       fun (x16424 : Ojs.t) ->
                                         any_to_js
                                           (x16416
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16423)
                                              ~ev:(any_of_js x16424))))|]);
                          (match x16417 with
                           | Some x16419 ->
                               ignore
                                 (Ojs.call x16418 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16420 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  EventListenerOptions.t ])
                                            ->
                                            match x16420 with
                                            | `Boolean x16421 ->
                                                Ojs.bool_to_js x16421
                                            | `Other x16422 ->
                                                EventListenerOptions.t_to_js
                                                  x16422) x16419)|])
                           | None -> ());
                          x16418))|])
let (removeEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:[ `Boolean of bool  | `Other of EventListenerOptions.t ]
        Primitive.t -> unit -> unit)
  =
  fun ~type_:(x16426 : string) ->
    fun ~listener:(x16427 : EventListenerOrEventListenerObject.t) ->
      fun
        ?options:(x16428 :
                   [ `Boolean of bool  | `Other of EventListenerOptions.t ]
                     Primitive.t option)
        ->
        fun () ->
          ignore
            (let x16434 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16434 "removeEventListener")
               "apply"
               [|x16434;((let x16429 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16429 "push"
                               [|(Ojs.string_to_js x16426)|]);
                          ignore
                            (Ojs.call x16429 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16427)|]);
                          (match x16428 with
                           | Some x16430 ->
                               ignore
                                 (Ojs.call x16429 "push"
                                    [|(Primitive.t_to_js
                                         (fun
                                            (x16431 :
                                              [ `Boolean of bool 
                                              | `Other of
                                                  EventListenerOptions.t ])
                                            ->
                                            match x16431 with
                                            | `Boolean x16432 ->
                                                Ojs.bool_to_js x16432
                                            | `Other x16433 ->
                                                EventListenerOptions.t_to_js
                                                  x16433) x16430)|])
                           | None -> ());
                          x16429))|])

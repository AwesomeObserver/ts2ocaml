[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_min
open Ts2ocaml_es
module DOMHighResTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> Ojs.float_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : float) -> Ojs.float_to_js x1
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4 : Ojs.t) -> t_of_js x4
    and t_0_to_js : t_0 -> Ojs.t = fun (x3 : t) -> t_to_js x3
  end
module PerformanceMeasureOptions =
  struct
    type t = [ `PerformanceMeasureOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6 : Ojs.t) -> t_of_js x6
    and t_0_to_js : t_0 -> Ojs.t = fun (x5 : t) -> t_to_js x5
    type tags = [ `PerformanceMeasureOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9 : Ojs.t) -> intf_of_js __tags_of_js x9
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7 : __tags intf) -> intf_to_js __tags_to_js x7
    let (get_detail : 'tags this -> any) =
      fun (x11 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x13 : 'tags this) ->
        fun (x14 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13) "detail"
            (any_to_js x14)
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x16 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16) "duration")
    let (set_duration : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x18 : 'tags this) ->
        fun (x19 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x18) "duration"
            (DOMHighResTimeStamp.t_to_js x19)
    let (get_end : 'tags this -> DOMHighResTimeStamp.t or_string) =
      fun (x21 : 'tags this) ->
        or_string_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x21) "end")
    let (set_end : 'tags this -> DOMHighResTimeStamp.t or_string -> unit) =
      fun (x24 : 'tags this) ->
        fun (x25 : DOMHighResTimeStamp.t or_string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x24) "end"
            (or_string_to_js DOMHighResTimeStamp.t_to_js x25)
    let (get_start : 'tags this -> DOMHighResTimeStamp.t or_string) =
      fun (x28 : 'tags this) ->
        or_string_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x28) "start")
    let (set_start : 'tags this -> DOMHighResTimeStamp.t or_string -> unit) =
      fun (x31 : 'tags this) ->
        fun (x32 : DOMHighResTimeStamp.t or_string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x31) "start"
            (or_string_to_js DOMHighResTimeStamp.t_to_js x32)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface71:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceEntry.t
                         val set_prototype : t -> PerformanceEntry.t -> unit
                         val create : t -> PerformanceEntry.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x36 : Ojs.t) -> x36
    and t_to_js : t -> Ojs.t = fun (x35 : Ojs.t) -> x35
    let (get_prototype : t -> PerformanceEntry.t) =
      fun (x37 : t) ->
        PerformanceEntry.t_of_js
          (Ojs.get_prop_ascii (t_to_js x37) "prototype")
    let (set_prototype : t -> PerformanceEntry.t -> unit) =
      fun (x38 : t) ->
        fun (x39 : PerformanceEntry.t) ->
          Ojs.set_prop_ascii (t_to_js x38) "prototype"
            (PerformanceEntry.t_to_js x39)
    let (create : t -> PerformanceEntry.t) =
      fun (x40 : t) ->
        PerformanceEntry.t_of_js (Ojs.new_obj (t_to_js x40) [||])
  end
 and
  PerformanceEntry:sig
                     type t = [ `PerformanceEntry ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `PerformanceEntry ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `PerformanceEntry ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `PerformanceEntry ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_duration : 'tags this -> DOMHighResTimeStamp.t
                     val get_entryType : 'tags this -> string
                     val get_name : 'tags this -> string
                     val get_startTime : 'tags this -> DOMHighResTimeStamp.t
                     val toJSON : 'tags this -> any
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t = [ `PerformanceEntry ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x42 : Ojs.t) -> t_of_js x42
    and t_0_to_js : t_0 -> Ojs.t = fun (x41 : t) -> t_to_js x41
    type tags = [ `PerformanceEntry ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x45 : Ojs.t) -> intf_of_js __tags_of_js x45
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x43 : __tags intf) -> intf_to_js __tags_to_js x43
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x47 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x47) "duration")
    let (get_entryType : 'tags this -> string) =
      fun (x49 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x49) "entryType")
    let (get_name : 'tags this -> string) =
      fun (x51 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x51) "name")
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x53 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x53) "startTime")
    let (toJSON : 'tags this -> any) =
      fun (x55 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x55) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceEntry") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
             [||])
  end
module rec
  AnonymousInterface73:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceMeasure.t
                         val set_prototype :
                           t -> PerformanceMeasure.t -> unit
                         val create : t -> PerformanceMeasure.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x58 : Ojs.t) -> x58
    and t_to_js : t -> Ojs.t = fun (x57 : Ojs.t) -> x57
    let (get_prototype : t -> PerformanceMeasure.t) =
      fun (x59 : t) ->
        PerformanceMeasure.t_of_js
          (Ojs.get_prop_ascii (t_to_js x59) "prototype")
    let (set_prototype : t -> PerformanceMeasure.t -> unit) =
      fun (x60 : t) ->
        fun (x61 : PerformanceMeasure.t) ->
          Ojs.set_prop_ascii (t_to_js x60) "prototype"
            (PerformanceMeasure.t_to_js x61)
    let (create : t -> PerformanceMeasure.t) =
      fun (x62 : t) ->
        PerformanceMeasure.t_of_js (Ojs.new_obj (t_to_js x62) [||])
  end
 and
  PerformanceMeasure:sig
                       type t =
                         [ `PerformanceEntry  | `PerformanceMeasure ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags =
                         [ `PerformanceEntry  | `PerformanceMeasure ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags =
                           [ `PerformanceEntry  | `PerformanceMeasure ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `PerformanceMeasure ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_detail : 'tags this -> any
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMeasure ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x64 : Ojs.t) -> t_of_js x64
    and t_0_to_js : t_0 -> Ojs.t = fun (x63 : t) -> t_to_js x63
    type tags = [ `PerformanceEntry  | `PerformanceMeasure ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x67 : Ojs.t) -> intf_of_js __tags_of_js x67
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x65 : __tags intf) -> intf_to_js __tags_to_js x65
    let (get_detail : 'tags this -> any) =
      fun (x69 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x69) "detail")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
             [||])
  end
module PerformanceMarkOptions =
  struct
    type t = [ `PerformanceMarkOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x72 : Ojs.t) -> t_of_js x72
    and t_0_to_js : t_0 -> Ojs.t = fun (x71 : t) -> t_to_js x71
    type tags = [ `PerformanceMarkOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x75 : Ojs.t) -> intf_of_js __tags_of_js x75
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x73 : __tags intf) -> intf_to_js __tags_to_js x73
    let (get_detail : 'tags this -> any) =
      fun (x77 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x77) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x79 : 'tags this) ->
        fun (x80 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x79) "detail"
            (any_to_js x80)
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x82 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x82) "startTime")
    let (set_startTime : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x84 : 'tags this) ->
        fun (x85 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x84) "startTime"
            (DOMHighResTimeStamp.t_to_js x85)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface72:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceMark.t
                         val set_prototype : t -> PerformanceMark.t -> unit
                         val create :
                           t ->
                             markName:string ->
                               ?markOptions:PerformanceMarkOptions.t ->
                                 unit -> PerformanceMark.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x88 : Ojs.t) -> x88
    and t_to_js : t -> Ojs.t = fun (x87 : Ojs.t) -> x87
    let (get_prototype : t -> PerformanceMark.t) =
      fun (x89 : t) ->
        PerformanceMark.t_of_js
          (Ojs.get_prop_ascii (t_to_js x89) "prototype")
    let (set_prototype : t -> PerformanceMark.t -> unit) =
      fun (x90 : t) ->
        fun (x91 : PerformanceMark.t) ->
          Ojs.set_prop_ascii (t_to_js x90) "prototype"
            (PerformanceMark.t_to_js x91)
    let (create :
      t ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x96 : t) ->
        fun ~markName:(x92 : string) ->
          fun ?markOptions:(x93 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (Ojs.new_obj_arr (t_to_js x96)
                   (let x94 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore (Ojs.call x94 "push" [|(Ojs.string_to_js x92)|]);
                    (match x93 with
                     | Some x95 ->
                         ignore
                           (Ojs.call x94 "push"
                              [|(PerformanceMarkOptions.t_to_js x95)|])
                     | None -> ());
                    x94))
  end
 and
  PerformanceMark:sig
                    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `PerformanceEntry  | `PerformanceMark ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `PerformanceEntry  | `PerformanceMark ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `PerformanceMark ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_detail : 'tags this -> any
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create :
                      markName:string ->
                        ?markOptions:PerformanceMarkOptions.t -> unit -> t
                  end =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x98 : Ojs.t) -> t_of_js x98
    and t_0_to_js : t_0 -> Ojs.t = fun (x97 : t) -> t_to_js x97
    type tags = [ `PerformanceEntry  | `PerformanceMark ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x101 : Ojs.t) -> intf_of_js __tags_of_js x101
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x99 : __tags intf) -> intf_to_js __tags_to_js x99
    let (get_detail : 'tags this -> any) =
      fun (x103 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x103) "detail")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMark") "prototype")
    let (create :
      markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t)
      =
      fun ~markName:(x105 : string) ->
        fun ?markOptions:(x106 : PerformanceMarkOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
                 (let x107 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x107 "push" [|(Ojs.string_to_js x105)|]);
                  (match x106 with
                   | Some x108 ->
                       ignore
                         (Ojs.call x107 "push"
                            [|(PerformanceMarkOptions.t_to_js x108)|])
                   | None -> ());
                  x107))
  end
module PerformanceEntryList =
  struct
    type t = PerformanceEntry.t list
    let rec t_of_js : Ojs.t -> t =
      fun (x111 : Ojs.t) -> Ojs.list_of_js PerformanceEntry.t_of_js x111
    and t_to_js : t -> Ojs.t =
      fun (x109 : PerformanceEntry.t list) ->
        Ojs.list_to_js PerformanceEntry.t_to_js x109
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x114 : Ojs.t) -> t_of_js x114
    and t_0_to_js : t_0 -> Ojs.t = fun (x113 : t) -> t_to_js x113
  end
module EventInit =
  struct
    type t = [ `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x116 : Ojs.t) -> t_of_js x116
    and t_0_to_js : t_0 -> Ojs.t = fun (x115 : t) -> t_to_js x115
    type tags = [ `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x119 : Ojs.t) -> intf_of_js __tags_of_js x119
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x117 : __tags intf) -> intf_to_js __tags_to_js x117
    let (get_bubbles : 'tags this -> bool) =
      fun (x121 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x121) "bubbles")
    let (set_bubbles : 'tags this -> bool -> unit) =
      fun (x123 : 'tags this) ->
        fun (x124 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x123) "bubbles"
            (Ojs.bool_to_js x124)
    let (get_cancelable : 'tags this -> bool) =
      fun (x126 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x126) "cancelable")
    let (set_cancelable : 'tags this -> bool -> unit) =
      fun (x128 : 'tags this) ->
        fun (x129 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x128) "cancelable"
            (Ojs.bool_to_js x129)
    let (get_composed : 'tags this -> bool) =
      fun (x131 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x131) "composed")
    let (set_composed : 'tags this -> bool -> unit) =
      fun (x133 : 'tags this) ->
        fun (x134 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x133) "composed"
            (Ojs.bool_to_js x134)
    let cast_from = Obj.magic
  end
module EventListenerOptions =
  struct
    type t = [ `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x137 : Ojs.t) -> t_of_js x137
    and t_0_to_js : t_0 -> Ojs.t = fun (x136 : t) -> t_to_js x136
    type tags = [ `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x140 : Ojs.t) -> intf_of_js __tags_of_js x140
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x138 : __tags intf) -> intf_to_js __tags_to_js x138
    let (get_capture : 'tags this -> bool) =
      fun (x142 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x142) "capture")
    let (set_capture : 'tags this -> bool -> unit) =
      fun (x144 : 'tags this) ->
        fun (x145 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x144) "capture"
            (Ojs.bool_to_js x145)
    let cast_from = Obj.magic
  end
module rec
  AbortSignal:sig
                type t = [ `AbortSignal  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `AbortSignal  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `AbortSignal  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `AbortSignal ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_aborted : 'tags this -> bool
                val get_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `AbortSignal  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x148 : Ojs.t) -> t_of_js x148
    and t_0_to_js : t_0 -> Ojs.t = fun (x147 : t) -> t_to_js x147
    type tags = [ `AbortSignal  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x151 : Ojs.t) -> intf_of_js __tags_of_js x151
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x149 : __tags intf) -> intf_to_js __tags_to_js x149
    let (get_aborted : 'tags this -> bool) =
      fun (x153 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x153) "aborted")
    let (get_onabort : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x155 : 'tags this) ->
        or_null_of_js
          (fun (x157 : Ojs.t) ->
             fun ~this:(x158 : t) ->
               fun ~ev:(x159 : Event.t) ->
                 any_of_js
                   (Ojs.apply x157 [|(t_to_js x158);(Event.t_to_js x159)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x155) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x160 : 'tags this) ->
        fun (x161 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x160) "onabort"
            (or_null_to_js
               (fun (x162 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x163 : Ojs.t) ->
                       fun (x164 : Ojs.t) ->
                         any_to_js
                           (x162 ~this:(t_of_js x163)
                              ~ev:(Event.t_of_js x164)))) x161)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x174 : 'tags this) ->
        fun ~type_:(x166 : 'K) ->
          fun ~listener:(x167 : this:t -> ev:any -> any) ->
            fun ?options:(x168 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x176 = this_to_js Obj.magic x174 in
                   Ojs.call (Ojs.get_prop_ascii x176 "addEventListener")
                     "apply"
                     [|x176;((let x169 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x169 "push" [|(Obj.magic x166)|]);
                              ignore
                                (Ojs.call x169 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x172 : Ojs.t) ->
                                           fun (x173 : Ojs.t) ->
                                             any_to_js
                                               (x167 ~this:(t_of_js x172)
                                                  ~ev:(any_of_js x173))))|]);
                              (match x168 with
                               | Some x170 ->
                                   ignore
                                     (Ojs.call x169 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x170)|])
                               | None -> ());
                              x169))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x183 : 'tags this) ->
        fun ~type_:(x177 : string) ->
          fun ~listener:(x178 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x179 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x185 = this_to_js Obj.magic x183 in
                   Ojs.call (Ojs.get_prop_ascii x185 "addEventListener")
                     "apply"
                     [|x185;((let x180 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x180 "push"
                                   [|(Ojs.string_to_js x177)|]);
                              ignore
                                (Ojs.call x180 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x178)|]);
                              (match x179 with
                               | Some x181 ->
                                   ignore
                                     (Ojs.call x180 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x181)|])
                               | None -> ());
                              x180))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x194 : 'tags this) ->
        fun ~type_:(x186 : 'K) ->
          fun ~listener:(x187 : this:t -> ev:any -> any) ->
            fun ?options:(x188 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x196 = this_to_js Obj.magic x194 in
                   Ojs.call (Ojs.get_prop_ascii x196 "removeEventListener")
                     "apply"
                     [|x196;((let x189 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x189 "push" [|(Obj.magic x186)|]);
                              ignore
                                (Ojs.call x189 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x192 : Ojs.t) ->
                                           fun (x193 : Ojs.t) ->
                                             any_to_js
                                               (x187 ~this:(t_of_js x192)
                                                  ~ev:(any_of_js x193))))|]);
                              (match x188 with
                               | Some x190 ->
                                   ignore
                                     (Ojs.call x189 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x190)|])
                               | None -> ());
                              x189))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x203 : 'tags this) ->
        fun ~type_:(x197 : string) ->
          fun ~listener:(x198 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x199 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x205 = this_to_js Obj.magic x203 in
                   Ojs.call (Ojs.get_prop_ascii x205 "removeEventListener")
                     "apply"
                     [|x205;((let x200 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x200 "push"
                                   [|(Ojs.string_to_js x197)|]);
                              ignore
                                (Ojs.call x200 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x198)|]);
                              (match x199 with
                               | Some x201 ->
                                   ignore
                                     (Ojs.call x200 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x201)|])
                               | None -> ());
                              x200))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "AbortSignal")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortSignal") [||])
  end
 and
  AddEventListenerOptions:sig
                            type t =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `AddEventListenerOptions 
                                | `EventListenerOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `AddEventListenerOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_once : 'tags this -> bool
                            val set_once : 'tags this -> bool -> unit
                            val get_passive : 'tags this -> bool
                            val set_passive : 'tags this -> bool -> unit
                            val get_signal : 'tags this -> AbortSignal.t
                            val set_signal :
                              'tags this -> AbortSignal.t -> unit
                            val cast_from : 'tags this -> t
                          end =
  struct
    type t = [ `AddEventListenerOptions  | `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x207 : Ojs.t) -> t_of_js x207
    and t_0_to_js : t_0 -> Ojs.t = fun (x206 : t) -> t_to_js x206
    type tags = [ `AddEventListenerOptions  | `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AddEventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x210 : Ojs.t) -> intf_of_js __tags_of_js x210
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x208 : __tags intf) -> intf_to_js __tags_to_js x208
    let (get_once : 'tags this -> bool) =
      fun (x212 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x212) "once")
    let (set_once : 'tags this -> bool -> unit) =
      fun (x214 : 'tags this) ->
        fun (x215 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x214) "once"
            (Ojs.bool_to_js x215)
    let (get_passive : 'tags this -> bool) =
      fun (x217 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x217) "passive")
    let (set_passive : 'tags this -> bool -> unit) =
      fun (x219 : 'tags this) ->
        fun (x220 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x219) "passive"
            (Ojs.bool_to_js x220)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x222 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x222) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x224 : 'tags this) ->
        fun (x225 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x224) "signal"
            (AbortSignal.t_to_js x225)
    let cast_from = Obj.magic
  end and
       AnonymousInterface1:sig
                             type t = private Ojs.t
                             val t_to_js : t -> Ojs.t
                             val t_of_js : Ojs.t -> t
                             val get_prototype : t -> AbortSignal.t
                             val set_prototype : t -> AbortSignal.t -> unit
                             val create : t -> AbortSignal.t
                           end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x228 : Ojs.t) -> x228
         and t_to_js : t -> Ojs.t = fun (x227 : Ojs.t) -> x227
         let (get_prototype : t -> AbortSignal.t) =
           fun (x229 : t) ->
             AbortSignal.t_of_js
               (Ojs.get_prop_ascii (t_to_js x229) "prototype")
         let (set_prototype : t -> AbortSignal.t -> unit) =
           fun (x230 : t) ->
             fun (x231 : AbortSignal.t) ->
               Ojs.set_prop_ascii (t_to_js x230) "prototype"
                 (AbortSignal.t_to_js x231)
         let (create : t -> AbortSignal.t) =
           fun (x232 : t) ->
             AbortSignal.t_of_js (Ojs.new_obj (t_to_js x232) [||])
       end and
            AnonymousInterface28:sig
                                   type t = private Ojs.t
                                   val t_to_js : t -> Ojs.t
                                   val t_of_js : Ojs.t -> t
                                   val get_prototype : t -> Event.t
                                   val set_prototype : t -> Event.t -> unit
                                   val create :
                                     t ->
                                       type_:string ->
                                         ?eventInitDict:EventInit.t ->
                                           unit -> Event.t
                                   val get_AT_TARGET : t -> float
                                   val get_BUBBLING_PHASE : t -> float
                                   val get_CAPTURING_PHASE : t -> float
                                   val get_NONE : t -> float
                                 end =
            struct
              type t = Ojs.t
              let rec t_of_js : Ojs.t -> t = fun (x234 : Ojs.t) -> x234
              and t_to_js : t -> Ojs.t = fun (x233 : Ojs.t) -> x233
              let (get_prototype : t -> Event.t) =
                fun (x235 : t) ->
                  Event.t_of_js
                    (Ojs.get_prop_ascii (t_to_js x235) "prototype")
              let (set_prototype : t -> Event.t -> unit) =
                fun (x236 : t) ->
                  fun (x237 : Event.t) ->
                    Ojs.set_prop_ascii (t_to_js x236) "prototype"
                      (Event.t_to_js x237)
              let (create :
                t ->
                  type_:string ->
                    ?eventInitDict:EventInit.t -> unit -> Event.t)
                =
                fun (x242 : t) ->
                  fun ~type_:(x238 : string) ->
                    fun ?eventInitDict:(x239 : EventInit.t option) ->
                      fun () ->
                        Event.t_of_js
                          (Ojs.new_obj_arr (t_to_js x242)
                             (let x240 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x240 "push"
                                   [|(Ojs.string_to_js x238)|]);
                              (match x239 with
                               | Some x241 ->
                                   ignore
                                     (Ojs.call x240 "push"
                                        [|(EventInit.t_to_js x241)|])
                               | None -> ());
                              x240))
              let (get_AT_TARGET : t -> float) =
                fun (x243 : t) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (t_to_js x243) "AT_TARGET")
              let (get_BUBBLING_PHASE : t -> float) =
                fun (x244 : t) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (t_to_js x244) "BUBBLING_PHASE")
              let (get_CAPTURING_PHASE : t -> float) =
                fun (x245 : t) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (t_to_js x245) "CAPTURING_PHASE")
              let (get_NONE : t -> float) =
                fun (x246 : t) ->
                  Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x246) "NONE")
            end and
                 AnonymousInterface30:sig
                                        type t = private Ojs.t
                                        val t_to_js : t -> Ojs.t
                                        val t_of_js : Ojs.t -> t
                                        val get_prototype :
                                          t -> EventTarget.t
                                        val set_prototype :
                                          t -> EventTarget.t -> unit
                                        val create : t -> EventTarget.t
                                      end =
                 struct
                   type t = Ojs.t
                   let rec t_of_js : Ojs.t -> t = fun (x248 : Ojs.t) -> x248
                   and t_to_js : t -> Ojs.t = fun (x247 : Ojs.t) -> x247
                   let (get_prototype : t -> EventTarget.t) =
                     fun (x249 : t) ->
                       EventTarget.t_of_js
                         (Ojs.get_prop_ascii (t_to_js x249) "prototype")
                   let (set_prototype : t -> EventTarget.t -> unit) =
                     fun (x250 : t) ->
                       fun (x251 : EventTarget.t) ->
                         Ojs.set_prop_ascii (t_to_js x250) "prototype"
                           (EventTarget.t_to_js x251)
                   let (create : t -> EventTarget.t) =
                     fun (x252 : t) ->
                       EventTarget.t_of_js (Ojs.new_obj (t_to_js x252) [||])
                 end and
                      Event:sig
                              type t = [ `Event ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags = [ `Event ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags = [ `Event ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags = [> `Event ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_bubbles : 'tags this -> bool
                              val get_cancelBubble : 'tags this -> bool
                              val set_cancelBubble :
                                'tags this -> bool -> unit
                              val get_cancelable : 'tags this -> bool
                              val get_composed : 'tags this -> bool
                              val get_currentTarget :
                                'tags this -> EventTarget.t or_null
                              val get_defaultPrevented : 'tags this -> bool
                              val get_eventPhase : 'tags this -> float
                              val get_isTrusted : 'tags this -> bool
                              val get_returnValue : 'tags this -> bool
                              val set_returnValue :
                                'tags this -> bool -> unit
                              val get_srcElement :
                                'tags this -> EventTarget.t or_null
                              val get_target :
                                'tags this -> EventTarget.t or_null
                              val get_timeStamp :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_type : 'tags this -> string
                              val composedPath :
                                'tags this -> EventTarget.t list
                              val initEvent :
                                'tags this ->
                                  type_:string ->
                                    ?bubbles:bool ->
                                      ?cancelable:bool -> unit -> unit
                              val preventDefault : 'tags this -> unit
                              val stopImmediatePropagation :
                                'tags this -> unit
                              val stopPropagation : 'tags this -> unit
                              val get_AT_TARGET : 'tags this -> float
                              val get_BUBBLING_PHASE : 'tags this -> float
                              val get_CAPTURING_PHASE : 'tags this -> float
                              val get_NONE : 'tags this -> float
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create :
                                type_:string ->
                                  ?eventInitDict:EventInit.t -> unit -> t
                              val at_target : unit -> float
                              val bubbling_phase : unit -> float
                              val capturing_phase : unit -> float
                              val none : unit -> float
                            end =
                      struct
                        type t = [ `Event ] intf
                        let rec t_of_js : Ojs.t -> t = Obj.magic
                        and t_to_js : t -> Ojs.t = Obj.magic
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x254 : Ojs.t) -> t_of_js x254
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x253 : t) -> t_to_js x253
                        type tags = [ `Event ]
                        type tags_0 = tags
                        type 'tags this =
                          'tags intf constraint 'tags = [> `Event ]
                        let rec this_of_js :
                          'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                          fun (type __tags) ->
                          fun (__tags_of_js : Ojs.t -> __tags) ->
                            fun (x257 : Ojs.t) ->
                              intf_of_js __tags_of_js x257
                        and this_to_js :
                          'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                          fun (type __tags) ->
                          fun (__tags_to_js : __tags -> Ojs.t) ->
                            fun (x255 : __tags intf) ->
                              intf_to_js __tags_to_js x255
                        let (get_bubbles : 'tags this -> bool) =
                          fun (x259 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x259)
                                 "bubbles")
                        let (get_cancelBubble : 'tags this -> bool) =
                          fun (x261 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x261)
                                 "cancelBubble")
                        let (set_cancelBubble : 'tags this -> bool -> unit) =
                          fun (x263 : 'tags this) ->
                            fun (x264 : bool) ->
                              Ojs.set_prop_ascii (this_to_js Obj.magic x263)
                                "cancelBubble" (Ojs.bool_to_js x264)
                        let (get_cancelable : 'tags this -> bool) =
                          fun (x266 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x266)
                                 "cancelable")
                        let (get_composed : 'tags this -> bool) =
                          fun (x268 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x268)
                                 "composed")
                        let (get_currentTarget :
                          'tags this -> EventTarget.t or_null) =
                          fun (x270 : 'tags this) ->
                            or_null_of_js EventTarget.t_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x270)
                                 "currentTarget")
                        let (get_defaultPrevented : 'tags this -> bool) =
                          fun (x273 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x273)
                                 "defaultPrevented")
                        let (get_eventPhase : 'tags this -> float) =
                          fun (x275 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x275)
                                 "eventPhase")
                        let (get_isTrusted : 'tags this -> bool) =
                          fun (x277 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x277)
                                 "isTrusted")
                        let (get_returnValue : 'tags this -> bool) =
                          fun (x279 : 'tags this) ->
                            Ojs.bool_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x279)
                                 "returnValue")
                        let (set_returnValue : 'tags this -> bool -> unit) =
                          fun (x281 : 'tags this) ->
                            fun (x282 : bool) ->
                              Ojs.set_prop_ascii (this_to_js Obj.magic x281)
                                "returnValue" (Ojs.bool_to_js x282)
                        let (get_srcElement :
                          'tags this -> EventTarget.t or_null) =
                          fun (x284 : 'tags this) ->
                            or_null_of_js EventTarget.t_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x284)
                                 "srcElement")
                        let (get_target :
                          'tags this -> EventTarget.t or_null) =
                          fun (x287 : 'tags this) ->
                            or_null_of_js EventTarget.t_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x287)
                                 "target")
                        let (get_timeStamp :
                          'tags this -> DOMHighResTimeStamp.t) =
                          fun (x290 : 'tags this) ->
                            DOMHighResTimeStamp.t_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x290)
                                 "timeStamp")
                        let (get_type : 'tags this -> string) =
                          fun (x292 : 'tags this) ->
                            Ojs.string_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x292)
                                 "type")
                        let (composedPath : 'tags this -> EventTarget.t list)
                          =
                          fun (x294 : 'tags this) ->
                            Ojs.list_of_js EventTarget.t_of_js
                              (Ojs.call (this_to_js Obj.magic x294)
                                 "composedPath" [||])
                        let (initEvent :
                          'tags this ->
                            type_:string ->
                              ?bubbles:bool ->
                                ?cancelable:bool -> unit -> unit)
                          =
                          fun (x303 : 'tags this) ->
                            fun ~type_:(x297 : string) ->
                              fun ?bubbles:(x298 : bool option) ->
                                fun ?cancelable:(x299 : bool option) ->
                                  fun () ->
                                    ignore
                                      (let x305 = this_to_js Obj.magic x303 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x305 "initEvent")
                                         "apply"
                                         [|x305;((let x300 =
                                                    Ojs.new_obj
                                                      (Ojs.get_prop_ascii
                                                         Ojs.global "Array")
                                                      [||] in
                                                  ignore
                                                    (Ojs.call x300 "push"
                                                       [|(Ojs.string_to_js
                                                            x297)|]);
                                                  (match x298 with
                                                   | Some x302 ->
                                                       ignore
                                                         (Ojs.call x300
                                                            "push"
                                                            [|(Ojs.bool_to_js
                                                                 x302)|])
                                                   | None -> ());
                                                  (match x299 with
                                                   | Some x301 ->
                                                       ignore
                                                         (Ojs.call x300
                                                            "push"
                                                            [|(Ojs.bool_to_js
                                                                 x301)|])
                                                   | None -> ());
                                                  x300))|])
                        let (preventDefault : 'tags this -> unit) =
                          fun (x306 : 'tags this) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x306)
                                 "preventDefault" [||])
                        let (stopImmediatePropagation : 'tags this -> unit) =
                          fun (x308 : 'tags this) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x308)
                                 "stopImmediatePropagation" [||])
                        let (stopPropagation : 'tags this -> unit) =
                          fun (x310 : 'tags this) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x310)
                                 "stopPropagation" [||])
                        let (get_AT_TARGET : 'tags this -> float) =
                          fun (x312 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x312)
                                 "AT_TARGET")
                        let (get_BUBBLING_PHASE : 'tags this -> float) =
                          fun (x314 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x314)
                                 "BUBBLING_PHASE")
                        let (get_CAPTURING_PHASE : 'tags this -> float) =
                          fun (x316 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x316)
                                 "CAPTURING_PHASE")
                        let (get_NONE : 'tags this -> float) =
                          fun (x318 : 'tags this) ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii (this_to_js Obj.magic x318)
                                 "NONE")
                        let cast_from = Obj.magic
                        let (prototype : unit -> t) =
                          fun () ->
                            t_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "prototype")
                        let (create :
                          type_:string ->
                            ?eventInitDict:EventInit.t -> unit -> t)
                          =
                          fun ~type_:(x320 : string) ->
                            fun ?eventInitDict:(x321 : EventInit.t option) ->
                              fun () ->
                                t_of_js
                                  (Ojs.new_obj_arr
                                     (Ojs.get_prop_ascii Ojs.global "Event")
                                     (let x322 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x322 "push"
                                           [|(Ojs.string_to_js x320)|]);
                                      (match x321 with
                                       | Some x323 ->
                                           ignore
                                             (Ojs.call x322 "push"
                                                [|(EventInit.t_to_js x323)|])
                                       | None -> ());
                                      x322))
                        let (at_target : unit -> float) =
                          fun () ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "AT_TARGET")
                        let (bubbling_phase : unit -> float) =
                          fun () ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "BUBBLING_PHASE")
                        let (capturing_phase : unit -> float) =
                          fun () ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "CAPTURING_PHASE")
                        let (none : unit -> float) =
                          fun () ->
                            Ojs.float_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "Event")
                                 "NONE")
                      end and
                           EventListener:sig
                                           type t = [ `EventListener ] intf
                                           type t_0 = t
                                           [@@@js.stop ]
                                           type tags = [ `EventListener ]
                                           type tags_0 = tags
                                           [@@@js.start ]
                                           [@@@js.implem
                                             type tags = [ `EventListener ]
                                             type tags_0 = tags]
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [> `EventListener ]
                                           val t_to_js : t -> Ojs.t
                                           val t_of_js : Ojs.t -> t
                                           val t_0_to_js : t_0 -> Ojs.t
                                           val t_0_of_js : Ojs.t -> t_0
                                           val apply :
                                             'tags this ->
                                               evt:Event.t -> unit
                                           val cast_from : 'tags this -> t
                                         end =
                           struct
                             type t = [ `EventListener ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x325 : Ojs.t) -> t_of_js x325
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x324 : t) -> t_to_js x324
                             type tags = [ `EventListener ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `EventListener ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x328 : Ojs.t) ->
                                   intf_of_js __tags_of_js x328
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x326 : __tags intf) ->
                                   intf_to_js __tags_to_js x326
                             let (apply : 'tags this -> evt:Event.t -> unit)
                               =
                               fun (x331 : 'tags this) ->
                                 fun ~evt:(x330 : Event.t) ->
                                   ignore
                                     (Ojs.apply (this_to_js Obj.magic x331)
                                        [|(Event.t_to_js x330)|])
                             let cast_from = Obj.magic
                           end and
                                EventListenerObject:sig
                                                      type t =
                                                        [
                                                          `EventListenerObject
                                                            ]
                                                          intf
                                                      type t_0 = t
                                                      [@@@js.stop ]
                                                      type tags =
                                                        [
                                                          `EventListenerObject
                                                            ]
                                                      type tags_0 = tags
                                                      [@@@js.start ]
                                                      [@@@js.implem
                                                        type tags =
                                                          [
                                                            `EventListenerObject
                                                              ]
                                                        type tags_0 = tags]
                                                      type 'tags this =
                                                        'tags intf constraint
                                                                    'tags =
                                                                    [>
                                                                    `EventListenerObject
                                                                    ]
                                                      val t_to_js :
                                                        t -> Ojs.t
                                                      val t_of_js :
                                                        Ojs.t -> t
                                                      val t_0_to_js :
                                                        t_0 -> Ojs.t
                                                      val t_0_of_js :
                                                        Ojs.t -> t_0
                                                      val handleEvent :
                                                        'tags this ->
                                                          object_:Event.t ->
                                                            unit
                                                      val cast_from :
                                                        'tags this -> t
                                                    end =
                                struct
                                  type t = [ `EventListenerObject ] intf
                                  let rec t_of_js : Ojs.t -> t = Obj.magic
                                  and t_to_js : t -> Ojs.t = Obj.magic
                                  type t_0 = t
                                  let rec t_0_of_js : Ojs.t -> t_0 =
                                    fun (x334 : Ojs.t) -> t_of_js x334
                                  and t_0_to_js : t_0 -> Ojs.t =
                                    fun (x333 : t) -> t_to_js x333
                                  type tags = [ `EventListenerObject ]
                                  type tags_0 = tags
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `EventListenerObject ]
                                  let rec this_of_js :
                                    'tags .
                                      (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                                    = fun (type __tags) ->
                                    fun (__tags_of_js : Ojs.t -> __tags) ->
                                      fun (x337 : Ojs.t) ->
                                        intf_of_js __tags_of_js x337
                                  and this_to_js :
                                    'tags .
                                      ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                                    = fun (type __tags) ->
                                    fun (__tags_to_js : __tags -> Ojs.t) ->
                                      fun (x335 : __tags intf) ->
                                        intf_to_js __tags_to_js x335
                                  let (handleEvent :
                                    'tags this -> object_:Event.t -> unit) =
                                    fun (x340 : 'tags this) ->
                                      fun ~object_:(x339 : Event.t) ->
                                        ignore
                                          (Ojs.call
                                             (this_to_js Obj.magic x340)
                                             "handleEvent"
                                             [|(Event.t_to_js x339)|])
                                  let cast_from = Obj.magic
                                end and
                                     EventListenerOrEventListenerObject:
                                     sig
                                       type t =
                                         (EventListener.t,
                                           EventListenerObject.t) union2
                                       type t_0 = t
                                       val t_to_js : t -> Ojs.t
                                       val t_of_js : Ojs.t -> t
                                       val t_0_to_js : t_0 -> Ojs.t
                                       val t_0_of_js : Ojs.t -> t_0
                                     end =
                                     struct
                                       type t =
                                         (EventListener.t,
                                           EventListenerObject.t) union2
                                       let rec t_of_js : Ojs.t -> t =
                                         fun (x345 : Ojs.t) ->
                                           union2_of_js EventListener.t_of_js
                                             EventListenerObject.t_of_js x345
                                       and t_to_js : t -> Ojs.t =
                                         fun
                                           (x342 :
                                             (EventListener.t,
                                               EventListenerObject.t) union2)
                                           ->
                                           union2_to_js EventListener.t_to_js
                                             EventListenerObject.t_to_js x342
                                       type t_0 = t
                                       let rec t_0_of_js : Ojs.t -> t_0 =
                                         fun (x349 : Ojs.t) -> t_of_js x349
                                       and t_0_to_js : t_0 -> Ojs.t =
                                         fun (x348 : t) -> t_to_js x348
                                     end and
                                          EventTarget:sig
                                                        type t =
                                                          [ `EventTarget ]
                                                            intf
                                                        type t_0 = t
                                                        [@@@js.stop ]
                                                        type tags =
                                                          [ `EventTarget ]
                                                        type tags_0 = tags
                                                        [@@@js.start ]
                                                        [@@@js.implem
                                                          type tags =
                                                            [ `EventTarget ]
                                                          type tags_0 = tags]
                                                        type 'tags this =
                                                          'tags intf
                                                                    constraint
                                                                    'tags =
                                                                    [>
                                                                    `EventTarget
                                                                    ]
                                                        val t_to_js :
                                                          t -> Ojs.t
                                                        val t_of_js :
                                                          Ojs.t -> t
                                                        val t_0_to_js :
                                                          t_0 -> Ojs.t
                                                        val t_0_of_js :
                                                          Ojs.t -> t_0
                                                        val addEventListener
                                                          :
                                                          'tags this ->
                                                            type_:string ->
                                                              callback:EventListenerOrEventListenerObject.t
                                                                or_null ->
                                                                ?options:AddEventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val dispatchEvent :
                                                          'tags this ->
                                                            event:Event.t ->
                                                              bool
                                                        val
                                                          removeEventListener
                                                          :
                                                          'tags this ->
                                                            type_:string ->
                                                              callback:EventListenerOrEventListenerObject.t
                                                                or_null ->
                                                                ?options:EventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val cast_from :
                                                          'tags this -> t
                                                        val prototype :
                                                          unit -> t
                                                        val create :
                                                          unit -> t
                                                      end =
                                          struct
                                            type t = [ `EventTarget ] intf
                                            let rec t_of_js : Ojs.t -> t =
                                              Obj.magic
                                            and t_to_js : t -> Ojs.t =
                                              Obj.magic
                                            type t_0 = t
                                            let rec t_0_of_js : Ojs.t -> t_0
                                              =
                                              fun (x351 : Ojs.t) ->
                                                t_of_js x351
                                            and t_0_to_js : t_0 -> Ojs.t =
                                              fun (x350 : t) -> t_to_js x350
                                            type tags = [ `EventTarget ]
                                            type tags_0 = tags
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [> `EventTarget ]
                                            let rec this_of_js :
                                              'tags .
                                                (Ojs.t -> 'tags) ->
                                                  Ojs.t -> 'tags this
                                              = fun (type __tags) ->
                                              fun
                                                (__tags_of_js :
                                                  Ojs.t -> __tags)
                                                ->
                                                fun (x354 : Ojs.t) ->
                                                  intf_of_js __tags_of_js
                                                    x354
                                            and this_to_js :
                                              'tags .
                                                ('tags -> Ojs.t) ->
                                                  'tags this -> Ojs.t
                                              = fun (type __tags) ->
                                              fun
                                                (__tags_to_js :
                                                  __tags -> Ojs.t)
                                                ->
                                                fun (x352 : __tags intf) ->
                                                  intf_to_js __tags_to_js
                                                    x352
                                            let (addEventListener :
                                              'tags this ->
                                                type_:string ->
                                                  callback:EventListenerOrEventListenerObject.t
                                                    or_null ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x363 : 'tags this) ->
                                                fun ~type_:(x356 : string) ->
                                                  fun
                                                    ~callback:(x357 :
                                                                EventListenerOrEventListenerObject.t
                                                                  or_null)
                                                    ->
                                                    fun
                                                      ?options:(x358 :
                                                                 AddEventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x365 =
                                                             this_to_js
                                                               Obj.magic x363 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x365
                                                                "addEventListener")
                                                             "apply"
                                                             [|x365;((
                                                               let x359 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x359
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x356)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x359
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x357)|]);
                                                               (match x358
                                                                with
                                                                | Some x360
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x359
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x360)|])
                                                                | None -> ());
                                                               x359))|])
                                            let (dispatchEvent :
                                              'tags this ->
                                                event:Event.t -> bool)
                                              =
                                              fun (x367 : 'tags this) ->
                                                fun ~event:(x366 : Event.t)
                                                  ->
                                                  Ojs.bool_of_js
                                                    (Ojs.call
                                                       (this_to_js Obj.magic
                                                          x367)
                                                       "dispatchEvent"
                                                       [|(Event.t_to_js x366)|])
                                            let (removeEventListener :
                                              'tags this ->
                                                type_:string ->
                                                  callback:EventListenerOrEventListenerObject.t
                                                    or_null ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x376 : 'tags this) ->
                                                fun ~type_:(x369 : string) ->
                                                  fun
                                                    ~callback:(x370 :
                                                                EventListenerOrEventListenerObject.t
                                                                  or_null)
                                                    ->
                                                    fun
                                                      ?options:(x371 :
                                                                 EventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x378 =
                                                             this_to_js
                                                               Obj.magic x376 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x378
                                                                "removeEventListener")
                                                             "apply"
                                                             [|x378;((
                                                               let x372 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x372
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x369)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x372
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x370)|]);
                                                               (match x371
                                                                with
                                                                | Some x373
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x372
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x373)|])
                                                                | None -> ());
                                                               x372))|])
                                            let cast_from = Obj.magic
                                            let (prototype : unit -> t) =
                                              fun () ->
                                                t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global
                                                        "EventTarget")
                                                     "prototype")
                                            let (create : unit -> t) =
                                              fun () ->
                                                t_of_js
                                                  (Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global
                                                        "EventTarget") 
                                                     [||])
                                          end
module rec
  AnonymousInterface70:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Performance.t
                         val set_prototype : t -> Performance.t -> unit
                         val create : t -> Performance.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x380 : Ojs.t) -> x380
    and t_to_js : t -> Ojs.t = fun (x379 : Ojs.t) -> x379
    let (get_prototype : t -> Performance.t) =
      fun (x381 : t) ->
        Performance.t_of_js (Ojs.get_prop_ascii (t_to_js x381) "prototype")
    let (set_prototype : t -> Performance.t -> unit) =
      fun (x382 : t) ->
        fun (x383 : Performance.t) ->
          Ojs.set_prop_ascii (t_to_js x382) "prototype"
            (Performance.t_to_js x383)
    let (create : t -> Performance.t) =
      fun (x384 : t) -> Performance.t_of_js (Ojs.new_obj (t_to_js x384) [||])
  end
 and
  Performance:sig
                type t = [ `EventTarget  | `Performance ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `EventTarget  | `Performance ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `EventTarget  | `Performance ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `Performance ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_onresourcetimingbufferfull :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onresourcetimingbufferfull :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t
                val clearMarks :
                  'tags this -> ?markName:string -> unit -> unit
                val clearMeasures :
                  'tags this -> ?measureName:string -> unit -> unit
                val clearResourceTimings : 'tags this -> unit
                val getEntries : 'tags this -> PerformanceEntryList.t
                val getEntriesByName :
                  'tags this ->
                    name:string ->
                      ?type_:string -> unit -> PerformanceEntryList.t
                val getEntriesByType :
                  'tags this -> type_:string -> PerformanceEntryList.t
                val mark :
                  'tags this ->
                    markName:string ->
                      ?markOptions:PerformanceMarkOptions.t ->
                        unit -> PerformanceMark.t
                val measure :
                  'tags this ->
                    measureName:string ->
                      ?startOrMeasureOptions:PerformanceMeasureOptions.t
                        or_string ->
                        ?endMark:string -> unit -> PerformanceMeasure.t
                val now : 'tags this -> DOMHighResTimeStamp.t
                val setResourceTimingBufferSize :
                  'tags this -> maxSize:float -> unit
                val toJSON : 'tags this -> any
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `EventTarget  | `Performance ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x386 : Ojs.t) -> t_of_js x386
    and t_0_to_js : t_0 -> Ojs.t = fun (x385 : t) -> t_to_js x385
    type tags = [ `EventTarget  | `Performance ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x389 : Ojs.t) -> intf_of_js __tags_of_js x389
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x387 : __tags intf) -> intf_to_js __tags_to_js x387
    let (get_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x391 : 'tags this) ->
        or_null_of_js
          (fun (x393 : Ojs.t) ->
             fun ~this:(x394 : t) ->
               fun ~ev:(x395 : Event.t) ->
                 any_of_js
                   (Ojs.apply x393 [|(t_to_js x394);(Event.t_to_js x395)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x391)
             "onresourcetimingbufferfull")
    let (set_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x396 : 'tags this) ->
        fun (x397 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x396)
            "onresourcetimingbufferfull"
            (or_null_to_js
               (fun (x398 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x399 : Ojs.t) ->
                       fun (x400 : Ojs.t) ->
                         any_to_js
                           (x398 ~this:(t_of_js x399)
                              ~ev:(Event.t_of_js x400)))) x397)
    let (get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x402 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x402) "timeOrigin")
    let (clearMarks : 'tags this -> ?markName:string -> unit -> unit) =
      fun (x407 : 'tags this) ->
        fun ?markName:(x404 : string option) ->
          fun () ->
            ignore
              (let x409 = this_to_js Obj.magic x407 in
               Ojs.call (Ojs.get_prop_ascii x409 "clearMarks") "apply"
                 [|x409;((let x405 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x404 with
                           | Some x406 ->
                               ignore
                                 (Ojs.call x405 "push"
                                    [|(Ojs.string_to_js x406)|])
                           | None -> ());
                          x405))|])
    let (clearMeasures : 'tags this -> ?measureName:string -> unit -> unit) =
      fun (x413 : 'tags this) ->
        fun ?measureName:(x410 : string option) ->
          fun () ->
            ignore
              (let x415 = this_to_js Obj.magic x413 in
               Ojs.call (Ojs.get_prop_ascii x415 "clearMeasures") "apply"
                 [|x415;((let x411 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x410 with
                           | Some x412 ->
                               ignore
                                 (Ojs.call x411 "push"
                                    [|(Ojs.string_to_js x412)|])
                           | None -> ());
                          x411))|])
    let (clearResourceTimings : 'tags this -> unit) =
      fun (x416 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x416) "clearResourceTimings" [||])
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x418 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x418) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x424 : 'tags this) ->
        fun ~name:(x420 : string) ->
          fun ?type_:(x421 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x426 = this_to_js Obj.magic x424 in
                 Ojs.call (Ojs.get_prop_ascii x426 "getEntriesByName")
                   "apply"
                   [|x426;((let x422 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x422 "push"
                                 [|(Ojs.string_to_js x420)|]);
                            (match x421 with
                             | Some x423 ->
                                 ignore
                                   (Ojs.call x422 "push"
                                      [|(Ojs.string_to_js x423)|])
                             | None -> ());
                            x422))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x428 : 'tags this) ->
        fun ~type_:(x427 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x428) "getEntriesByType"
               [|(Ojs.string_to_js x427)|])
    let (mark :
      'tags this ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x434 : 'tags this) ->
        fun ~markName:(x430 : string) ->
          fun ?markOptions:(x431 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (let x436 = this_to_js Obj.magic x434 in
                 Ojs.call (Ojs.get_prop_ascii x436 "mark") "apply"
                   [|x436;((let x432 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x432 "push"
                                 [|(Ojs.string_to_js x430)|]);
                            (match x431 with
                             | Some x433 ->
                                 ignore
                                   (Ojs.call x432 "push"
                                      [|(PerformanceMarkOptions.t_to_js x433)|])
                             | None -> ());
                            x432))|])
    let (measure :
      'tags this ->
        measureName:string ->
          ?startOrMeasureOptions:PerformanceMeasureOptions.t or_string ->
            ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun (x444 : 'tags this) ->
        fun ~measureName:(x437 : string) ->
          fun
            ?startOrMeasureOptions:(x438 :
                                     PerformanceMeasureOptions.t or_string
                                       option)
            ->
            fun ?endMark:(x439 : string option) ->
              fun () ->
                PerformanceMeasure.t_of_js
                  (let x446 = this_to_js Obj.magic x444 in
                   Ojs.call (Ojs.get_prop_ascii x446 "measure") "apply"
                     [|x446;((let x440 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x440 "push"
                                   [|(Ojs.string_to_js x437)|]);
                              (match x438 with
                               | Some x442 ->
                                   ignore
                                     (Ojs.call x440 "push"
                                        [|(or_string_to_js
                                             PerformanceMeasureOptions.t_to_js
                                             x442)|])
                               | None -> ());
                              (match x439 with
                               | Some x441 ->
                                   ignore
                                     (Ojs.call x440 "push"
                                        [|(Ojs.string_to_js x441)|])
                               | None -> ());
                              x440))|])
    let (now : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x447 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (this_to_js Obj.magic x447) "now" [||])
    let (setResourceTimingBufferSize : 'tags this -> maxSize:float -> unit) =
      fun (x450 : 'tags this) ->
        fun ~maxSize:(x449 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x450)
               "setResourceTimingBufferSize" [|(Ojs.float_to_js x449)|])
    let (toJSON : 'tags this -> any) =
      fun (x452 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x452) "toJSON" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x462 : 'tags this) ->
        fun ~type_:(x454 : 'K) ->
          fun ~listener:(x455 : this:t -> ev:any -> any) ->
            fun ?options:(x456 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x464 = this_to_js Obj.magic x462 in
                   Ojs.call (Ojs.get_prop_ascii x464 "addEventListener")
                     "apply"
                     [|x464;((let x457 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x457 "push" [|(Obj.magic x454)|]);
                              ignore
                                (Ojs.call x457 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x460 : Ojs.t) ->
                                           fun (x461 : Ojs.t) ->
                                             any_to_js
                                               (x455 ~this:(t_of_js x460)
                                                  ~ev:(any_of_js x461))))|]);
                              (match x456 with
                               | Some x458 ->
                                   ignore
                                     (Ojs.call x457 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x458)|])
                               | None -> ());
                              x457))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x471 : 'tags this) ->
        fun ~type_:(x465 : string) ->
          fun ~listener:(x466 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x467 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x473 = this_to_js Obj.magic x471 in
                   Ojs.call (Ojs.get_prop_ascii x473 "addEventListener")
                     "apply"
                     [|x473;((let x468 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x468 "push"
                                   [|(Ojs.string_to_js x465)|]);
                              ignore
                                (Ojs.call x468 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x466)|]);
                              (match x467 with
                               | Some x469 ->
                                   ignore
                                     (Ojs.call x468 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x469)|])
                               | None -> ());
                              x468))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x482 : 'tags this) ->
        fun ~type_:(x474 : 'K) ->
          fun ~listener:(x475 : this:t -> ev:any -> any) ->
            fun ?options:(x476 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x484 = this_to_js Obj.magic x482 in
                   Ojs.call (Ojs.get_prop_ascii x484 "removeEventListener")
                     "apply"
                     [|x484;((let x477 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x477 "push" [|(Obj.magic x474)|]);
                              ignore
                                (Ojs.call x477 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x480 : Ojs.t) ->
                                           fun (x481 : Ojs.t) ->
                                             any_to_js
                                               (x475 ~this:(t_of_js x480)
                                                  ~ev:(any_of_js x481))))|]);
                              (match x476 with
                               | Some x478 ->
                                   ignore
                                     (Ojs.call x477 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x478)|])
                               | None -> ());
                              x477))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x491 : 'tags this) ->
        fun ~type_:(x485 : string) ->
          fun ~listener:(x486 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x487 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x493 = this_to_js Obj.magic x491 in
                   Ojs.call (Ojs.get_prop_ascii x493 "removeEventListener")
                     "apply"
                     [|x493;((let x488 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x488 "push"
                                   [|(Ojs.string_to_js x485)|]);
                              ignore
                                (Ojs.call x488 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x486)|]);
                              (match x487 with
                               | Some x489 ->
                                   ignore
                                     (Ojs.call x488 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x489)|])
                               | None -> ());
                              x488))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Performance")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Performance") [||])
  end
module PerformanceStatic =
  struct
    let (onresourcetimingbufferfull :
      unit -> (this:Performance.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x494 : Ojs.t) ->
             fun ~this:(x495 : Performance.t) ->
               fun ~ev:(x496 : Event.t) ->
                 any_of_js
                   (Ojs.apply x494
                      [|(Performance.t_to_js x495);(Event.t_to_js x496)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "onresourcetimingbufferfull")
    let (timeOrigin : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "timeOrigin")
    let (clearMarks : ?markName:string -> unit -> unit) =
      fun ?markName:(x497 : string option) ->
        fun () ->
          ignore
            (let x500 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x500 "clearMarks") "apply"
               [|x500;((let x498 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x497 with
                         | Some x499 ->
                             ignore
                               (Ojs.call x498 "push"
                                  [|(Ojs.string_to_js x499)|])
                         | None -> ());
                        x498))|])
    let (clearMeasures : ?measureName:string -> unit -> unit) =
      fun ?measureName:(x501 : string option) ->
        fun () ->
          ignore
            (let x504 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x504 "clearMeasures") "apply"
               [|x504;((let x502 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x501 with
                         | Some x503 ->
                             ignore
                               (Ojs.call x502 "push"
                                  [|(Ojs.string_to_js x503)|])
                         | None -> ());
                        x502))|])
    let (clearResourceTimings : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "clearResourceTimings" [||])
    let (getEntries : unit -> PerformanceEntryList.t) =
      fun () ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntries" [||])
    let (getEntriesByName :
      name:string -> ?type_:string -> unit -> PerformanceEntryList.t) =
      fun ~name:(x505 : string) ->
        fun ?type_:(x506 : string option) ->
          fun () ->
            PerformanceEntryList.t_of_js
              (let x509 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x509 "getEntriesByName") "apply"
                 [|x509;((let x507 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x507 "push" [|(Ojs.string_to_js x505)|]);
                          (match x506 with
                           | Some x508 ->
                               ignore
                                 (Ojs.call x507 "push"
                                    [|(Ojs.string_to_js x508)|])
                           | None -> ());
                          x507))|])
    let (getEntriesByType : string -> PerformanceEntryList.t) =
      fun (x510 : string) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntriesByType" [|(Ojs.string_to_js x510)|])
    let (mark :
      markName:string ->
        ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun ~markName:(x511 : string) ->
        fun ?markOptions:(x512 : PerformanceMarkOptions.t option) ->
          fun () ->
            PerformanceMark.t_of_js
              (let x515 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x515 "mark") "apply"
                 [|x515;((let x513 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x513 "push" [|(Ojs.string_to_js x511)|]);
                          (match x512 with
                           | Some x514 ->
                               ignore
                                 (Ojs.call x513 "push"
                                    [|(PerformanceMarkOptions.t_to_js x514)|])
                           | None -> ());
                          x513))|])
    let (measure :
      measureName:string ->
        ?startOrMeasureOptions:PerformanceMeasureOptions.t or_string ->
          ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun ~measureName:(x516 : string) ->
        fun
          ?startOrMeasureOptions:(x517 :
                                   PerformanceMeasureOptions.t or_string
                                     option)
          ->
          fun ?endMark:(x518 : string option) ->
            fun () ->
              PerformanceMeasure.t_of_js
                (let x523 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x523 "measure") "apply"
                   [|x523;((let x519 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x519 "push"
                                 [|(Ojs.string_to_js x516)|]);
                            (match x517 with
                             | Some x521 ->
                                 ignore
                                   (Ojs.call x519 "push"
                                      [|(or_string_to_js
                                           PerformanceMeasureOptions.t_to_js
                                           x521)|])
                             | None -> ());
                            (match x518 with
                             | Some x520 ->
                                 ignore
                                   (Ojs.call x519 "push"
                                      [|(Ojs.string_to_js x520)|])
                             | None -> ());
                            x519))|])
    let (now : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "now" [||])
    let (setResourceTimingBufferSize : float -> unit) =
      fun (x524 : float) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "setResourceTimingBufferSize" [|(Ojs.float_to_js x524)|])
    let (toJSON : unit -> any) =
      fun () ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "toJSON"
             [||])
    let (addEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x525 : 'K) ->
        fun ~listener:(x526 : this:Performance.t -> ev:any -> any) ->
          fun ?options:(x527 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x533 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x533 "addEventListener")
                   "apply"
                   [|x533;((let x528 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x528 "push" [|(Obj.magic x525)|]);
                            ignore
                              (Ojs.call x528 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x531 : Ojs.t) ->
                                         fun (x532 : Ojs.t) ->
                                           any_to_js
                                             (x526
                                                ~this:(Performance.t_of_js
                                                         x531)
                                                ~ev:(any_of_js x532))))|]);
                            (match x527 with
                             | Some x529 ->
                                 ignore
                                   (Ojs.call x528 "push"
                                      [|(or_boolean_to_js
                                           AddEventListenerOptions.t_to_js
                                           x529)|])
                             | None -> ());
                            x528))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x534 : string) ->
        fun ~listener:(x535 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x536 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x540 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x540 "addEventListener")
                   "apply"
                   [|x540;((let x537 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x537 "push"
                                 [|(Ojs.string_to_js x534)|]);
                            ignore
                              (Ojs.call x537 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x535)|]);
                            (match x536 with
                             | Some x538 ->
                                 ignore
                                   (Ojs.call x537 "push"
                                      [|(or_boolean_to_js
                                           AddEventListenerOptions.t_to_js
                                           x538)|])
                             | None -> ());
                            x537))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x541 : 'K) ->
        fun ~listener:(x542 : this:Performance.t -> ev:any -> any) ->
          fun ?options:(x543 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x549 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x549 "removeEventListener")
                   "apply"
                   [|x549;((let x544 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x544 "push" [|(Obj.magic x541)|]);
                            ignore
                              (Ojs.call x544 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x547 : Ojs.t) ->
                                         fun (x548 : Ojs.t) ->
                                           any_to_js
                                             (x542
                                                ~this:(Performance.t_of_js
                                                         x547)
                                                ~ev:(any_of_js x548))))|]);
                            (match x543 with
                             | Some x545 ->
                                 ignore
                                   (Ojs.call x544 "push"
                                      [|(or_boolean_to_js
                                           EventListenerOptions.t_to_js x545)|])
                             | None -> ());
                            x544))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x550 : string) ->
        fun ~listener:(x551 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x552 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x556 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x556 "removeEventListener")
                   "apply"
                   [|x556;((let x553 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x553 "push"
                                 [|(Ojs.string_to_js x550)|]);
                            ignore
                              (Ojs.call x553 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x551)|]);
                            (match x552 with
                             | Some x554 ->
                                 ignore
                                   (Ojs.call x553 "push"
                                      [|(or_boolean_to_js
                                           EventListenerOptions.t_to_js x554)|])
                             | None -> ());
                            x553))|])
  end
module StorageEstimate =
  struct
    type t = [ `StorageEstimate ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x558 : Ojs.t) -> t_of_js x558
    and t_0_to_js : t_0 -> Ojs.t = fun (x557 : t) -> t_to_js x557
    type tags = [ `StorageEstimate ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x561 : Ojs.t) -> intf_of_js __tags_of_js x561
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x559 : __tags intf) -> intf_to_js __tags_to_js x559
    let (get_quota : 'tags this -> float) =
      fun (x563 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x563) "quota")
    let (set_quota : 'tags this -> float -> unit) =
      fun (x565 : 'tags this) ->
        fun (x566 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x565) "quota"
            (Ojs.float_to_js x566)
    let (get_usage : 'tags this -> float) =
      fun (x568 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x568) "usage")
    let (set_usage : 'tags this -> float -> unit) =
      fun (x570 : 'tags this) ->
        fun (x571 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x570) "usage"
            (Ojs.float_to_js x571)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface99:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> StorageManager.t
                         val set_prototype : t -> StorageManager.t -> unit
                         val create : t -> StorageManager.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x574 : Ojs.t) -> x574
    and t_to_js : t -> Ojs.t = fun (x573 : Ojs.t) -> x573
    let (get_prototype : t -> StorageManager.t) =
      fun (x575 : t) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (t_to_js x575) "prototype")
    let (set_prototype : t -> StorageManager.t -> unit) =
      fun (x576 : t) ->
        fun (x577 : StorageManager.t) ->
          Ojs.set_prop_ascii (t_to_js x576) "prototype"
            (StorageManager.t_to_js x577)
    let (create : t -> StorageManager.t) =
      fun (x578 : t) ->
        StorageManager.t_of_js (Ojs.new_obj (t_to_js x578) [||])
  end
 and
  StorageManager:sig
                   type t = [ `StorageManager ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `StorageManager ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `StorageManager ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `StorageManager ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val estimate : 'tags this -> StorageEstimate.t Promise.t_1
                   val persisted : 'tags this -> bool Promise.t_1
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `StorageManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x580 : Ojs.t) -> t_of_js x580
    and t_0_to_js : t_0 -> Ojs.t = fun (x579 : t) -> t_to_js x579
    type tags = [ `StorageManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x583 : Ojs.t) -> intf_of_js __tags_of_js x583
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x581 : __tags intf) -> intf_to_js __tags_to_js x581
    let (estimate : 'tags this -> StorageEstimate.t Promise.t_1) =
      fun (x585 : 'tags this) ->
        Promise.t_1_of_js StorageEstimate.t_of_js
          (Ojs.call (this_to_js Obj.magic x585) "estimate" [||])
    let (persisted : 'tags this -> bool Promise.t_1) =
      fun (x588 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x588) "persisted" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "StorageManager") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "StorageManager") [||])
  end
module NavigatorStorage =
  struct
    type t = [ `NavigatorStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x592 : Ojs.t) -> t_of_js x592
    and t_0_to_js : t_0 -> Ojs.t = fun (x591 : t) -> t_to_js x591
    type tags = [ `NavigatorStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x595 : Ojs.t) -> intf_of_js __tags_of_js x595
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x593 : __tags intf) -> intf_to_js __tags_to_js x593
    let (get_storage : 'tags this -> StorageManager.t) =
      fun (x597 : 'tags this) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x597) "storage")
    let cast_from = Obj.magic
  end
module NavigatorOnLine =
  struct
    type t = [ `NavigatorOnLine ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x600 : Ojs.t) -> t_of_js x600
    and t_0_to_js : t_0 -> Ojs.t = fun (x599 : t) -> t_to_js x599
    type tags = [ `NavigatorOnLine ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x603 : Ojs.t) -> intf_of_js __tags_of_js x603
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x601 : __tags intf) -> intf_to_js __tags_to_js x601
    let (get_onLine : 'tags this -> bool) =
      fun (x605 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x605) "onLine")
    let cast_from = Obj.magic
  end
module ConnectionType =
  struct
    type t =
      [ `L_s46_bluetooth  | `L_s47_cellular  | `L_s68_ethernet 
      | `L_s117_mixed  | `L_s129_none  | `L_s143_other  | `L_s197_unknown 
      | `L_s208_wifi ]
    let rec t_of_js : Ojs.t -> t =
      fun (x608 : Ojs.t) ->
        let x609 = x608 in
        match Ojs.string_of_js x609 with
        | "bluetooth" -> `L_s46_bluetooth
        | "cellular" -> `L_s47_cellular
        | "ethernet" -> `L_s68_ethernet
        | "mixed" -> `L_s117_mixed
        | "none" -> `L_s129_none
        | "other" -> `L_s143_other
        | "unknown" -> `L_s197_unknown
        | "wifi" -> `L_s208_wifi
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x607 :
          [ `L_s46_bluetooth  | `L_s47_cellular  | `L_s68_ethernet 
          | `L_s117_mixed  | `L_s129_none  | `L_s143_other 
          | `L_s197_unknown  | `L_s208_wifi ])
        ->
        match x607 with
        | `L_s46_bluetooth -> Ojs.string_to_js "bluetooth"
        | `L_s47_cellular -> Ojs.string_to_js "cellular"
        | `L_s68_ethernet -> Ojs.string_to_js "ethernet"
        | `L_s117_mixed -> Ojs.string_to_js "mixed"
        | `L_s129_none -> Ojs.string_to_js "none"
        | `L_s143_other -> Ojs.string_to_js "other"
        | `L_s197_unknown -> Ojs.string_to_js "unknown"
        | `L_s208_wifi -> Ojs.string_to_js "wifi"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x611 : Ojs.t) -> t_of_js x611
    and t_0_to_js : t_0 -> Ojs.t = fun (x610 : t) -> t_to_js x610
  end
module rec
  AnonymousInterface66:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> NetworkInformation.t
                         val set_prototype :
                           t -> NetworkInformation.t -> unit
                         val create : t -> NetworkInformation.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x613 : Ojs.t) -> x613
    and t_to_js : t -> Ojs.t = fun (x612 : Ojs.t) -> x612
    let (get_prototype : t -> NetworkInformation.t) =
      fun (x614 : t) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x614) "prototype")
    let (set_prototype : t -> NetworkInformation.t -> unit) =
      fun (x615 : t) ->
        fun (x616 : NetworkInformation.t) ->
          Ojs.set_prop_ascii (t_to_js x615) "prototype"
            (NetworkInformation.t_to_js x616)
    let (create : t -> NetworkInformation.t) =
      fun (x617 : t) ->
        NetworkInformation.t_of_js (Ojs.new_obj (t_to_js x617) [||])
  end
 and
  NetworkInformation:sig
                       type t = [ `EventTarget  | `NetworkInformation ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `EventTarget  | `NetworkInformation ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `EventTarget  | `NetworkInformation ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `NetworkInformation ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_type : 'tags this -> ConnectionType.t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
  struct
    type t = [ `EventTarget  | `NetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x619 : Ojs.t) -> t_of_js x619
    and t_0_to_js : t_0 -> Ojs.t = fun (x618 : t) -> t_to_js x618
    type tags = [ `EventTarget  | `NetworkInformation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x622 : Ojs.t) -> intf_of_js __tags_of_js x622
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x620 : __tags intf) -> intf_to_js __tags_to_js x620
    let (get_type : 'tags this -> ConnectionType.t) =
      fun (x624 : 'tags this) ->
        ConnectionType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x624) "type")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NetworkInformation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
             [||])
  end
module NavigatorNetworkInformation =
  struct
    type t = [ `NavigatorNetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x627 : Ojs.t) -> t_of_js x627
    and t_0_to_js : t_0 -> Ojs.t = fun (x626 : t) -> t_to_js x626
    type tags = [ `NavigatorNetworkInformation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorNetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x630 : Ojs.t) -> intf_of_js __tags_of_js x630
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x628 : __tags intf) -> intf_to_js __tags_to_js x628
    let (get_connection : 'tags this -> NetworkInformation.t) =
      fun (x632 : 'tags this) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x632) "connection")
    let cast_from = Obj.magic
  end
module NavigatorLanguage =
  struct
    type t = [ `NavigatorLanguage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x635 : Ojs.t) -> t_of_js x635
    and t_0_to_js : t_0 -> Ojs.t = fun (x634 : t) -> t_to_js x634
    type tags = [ `NavigatorLanguage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x638 : Ojs.t) -> intf_of_js __tags_of_js x638
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x636 : __tags intf) -> intf_to_js __tags_to_js x636
    let (get_language : 'tags this -> string) =
      fun (x640 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x640) "language")
    let (get_languages : 'tags this -> string list) =
      fun (x642 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x642) "languages")
    let cast_from = Obj.magic
  end
module NavigatorID =
  struct
    type t = [ `NavigatorID ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x646 : Ojs.t) -> t_of_js x646
    and t_0_to_js : t_0 -> Ojs.t = fun (x645 : t) -> t_to_js x645
    type tags = [ `NavigatorID ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x649 : Ojs.t) -> intf_of_js __tags_of_js x649
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x647 : __tags intf) -> intf_to_js __tags_to_js x647
    let (get_appCodeName : 'tags this -> string) =
      fun (x651 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x651) "appCodeName")
    let (get_appName : 'tags this -> string) =
      fun (x653 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x653) "appName")
    let (get_appVersion : 'tags this -> string) =
      fun (x655 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x655) "appVersion")
    let (get_platform : 'tags this -> string) =
      fun (x657 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x657) "platform")
    let (get_product : 'tags this -> string) =
      fun (x659 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x659) "product")
    let (get_userAgent : 'tags this -> string) =
      fun (x661 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x661) "userAgent")
    let cast_from = Obj.magic
  end
module NavigatorConcurrentHardware =
  struct
    type t = [ `NavigatorConcurrentHardware ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x664 : Ojs.t) -> t_of_js x664
    and t_0_to_js : t_0 -> Ojs.t = fun (x663 : t) -> t_to_js x663
    type tags = [ `NavigatorConcurrentHardware ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x667 : Ojs.t) -> intf_of_js __tags_of_js x667
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x665 : __tags intf) -> intf_to_js __tags_to_js x665
    let (get_hardwareConcurrency : 'tags this -> float) =
      fun (x669 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x669)
             "hardwareConcurrency")
    let cast_from = Obj.magic
  end
module MediaEncodingType =
  struct
    type t = [ `L_s166_record  | `L_s207_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x672 : Ojs.t) ->
        let x673 = x672 in
        match Ojs.string_of_js x673 with
        | "record" -> `L_s166_record
        | "webrtc" -> `L_s207_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x671 : [ `L_s166_record  | `L_s207_webrtc ]) ->
        match x671 with
        | `L_s166_record -> Ojs.string_to_js "record"
        | `L_s207_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x675 : Ojs.t) -> t_of_js x675
    and t_0_to_js : t_0 -> Ojs.t = fun (x674 : t) -> t_to_js x674
  end
module TransferFunction =
  struct
    type t = [ `L_s87_hlg  | `L_s152_pq  | `L_s184_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x677 : Ojs.t) ->
        let x678 = x677 in
        match Ojs.string_of_js x678 with
        | "hlg" -> `L_s87_hlg
        | "pq" -> `L_s152_pq
        | "srgb" -> `L_s184_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x676 : [ `L_s87_hlg  | `L_s152_pq  | `L_s184_srgb ]) ->
        match x676 with
        | `L_s87_hlg -> Ojs.string_to_js "hlg"
        | `L_s152_pq -> Ojs.string_to_js "pq"
        | `L_s184_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x680 : Ojs.t) -> t_of_js x680
    and t_0_to_js : t_0 -> Ojs.t = fun (x679 : t) -> t_to_js x679
  end
module HdrMetadataType =
  struct
    type t =
      [ `L_s180_smpteSt2086  | `L_s181_smpteSt2094_10 
      | `L_s182_smpteSt2094_40 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x682 : Ojs.t) ->
        let x683 = x682 in
        match Ojs.string_of_js x683 with
        | "smpteSt2086" -> `L_s180_smpteSt2086
        | "smpteSt2094-10" -> `L_s181_smpteSt2094_10
        | "smpteSt2094-40" -> `L_s182_smpteSt2094_40
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x681 :
          [ `L_s180_smpteSt2086  | `L_s181_smpteSt2094_10 
          | `L_s182_smpteSt2094_40 ])
        ->
        match x681 with
        | `L_s180_smpteSt2086 -> Ojs.string_to_js "smpteSt2086"
        | `L_s181_smpteSt2094_10 -> Ojs.string_to_js "smpteSt2094-10"
        | `L_s182_smpteSt2094_40 -> Ojs.string_to_js "smpteSt2094-40"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x685 : Ojs.t) -> t_of_js x685
    and t_0_to_js : t_0 -> Ojs.t = fun (x684 : t) -> t_to_js x684
  end
module ColorGamut =
  struct
    type t = [ `L_s145_p3  | `L_s165_rec2020  | `L_s184_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x687 : Ojs.t) ->
        let x688 = x687 in
        match Ojs.string_of_js x688 with
        | "p3" -> `L_s145_p3
        | "rec2020" -> `L_s165_rec2020
        | "srgb" -> `L_s184_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x686 : [ `L_s145_p3  | `L_s165_rec2020  | `L_s184_srgb ]) ->
        match x686 with
        | `L_s145_p3 -> Ojs.string_to_js "p3"
        | `L_s165_rec2020 -> Ojs.string_to_js "rec2020"
        | `L_s184_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x690 : Ojs.t) -> t_of_js x690
    and t_0_to_js : t_0 -> Ojs.t = fun (x689 : t) -> t_to_js x689
  end
module VideoConfiguration =
  struct
    type t = [ `VideoConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x692 : Ojs.t) -> t_of_js x692
    and t_0_to_js : t_0 -> Ojs.t = fun (x691 : t) -> t_to_js x691
    type tags = [ `VideoConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x695 : Ojs.t) -> intf_of_js __tags_of_js x695
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x693 : __tags intf) -> intf_to_js __tags_to_js x693
    let (get_bitrate : 'tags this -> float) =
      fun (x697 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x697) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x699 : 'tags this) ->
        fun (x700 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x699) "bitrate"
            (Ojs.float_to_js x700)
    let (get_colorGamut : 'tags this -> ColorGamut.t) =
      fun (x702 : 'tags this) ->
        ColorGamut.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x702) "colorGamut")
    let (set_colorGamut : 'tags this -> ColorGamut.t -> unit) =
      fun (x704 : 'tags this) ->
        fun (x705 : ColorGamut.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x704) "colorGamut"
            (ColorGamut.t_to_js x705)
    let (get_contentType : 'tags this -> string) =
      fun (x707 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x707) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x709 : 'tags this) ->
        fun (x710 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x709) "contentType"
            (Ojs.string_to_js x710)
    let (get_framerate : 'tags this -> float) =
      fun (x712 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x712) "framerate")
    let (set_framerate : 'tags this -> float -> unit) =
      fun (x714 : 'tags this) ->
        fun (x715 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x714) "framerate"
            (Ojs.float_to_js x715)
    let (get_hdrMetadataType : 'tags this -> HdrMetadataType.t) =
      fun (x717 : 'tags this) ->
        HdrMetadataType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x717) "hdrMetadataType")
    let (set_hdrMetadataType : 'tags this -> HdrMetadataType.t -> unit) =
      fun (x719 : 'tags this) ->
        fun (x720 : HdrMetadataType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x719) "hdrMetadataType"
            (HdrMetadataType.t_to_js x720)
    let (get_height : 'tags this -> float) =
      fun (x722 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x722) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x724 : 'tags this) ->
        fun (x725 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x724) "height"
            (Ojs.float_to_js x725)
    let (get_scalabilityMode : 'tags this -> string) =
      fun (x727 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x727) "scalabilityMode")
    let (set_scalabilityMode : 'tags this -> string -> unit) =
      fun (x729 : 'tags this) ->
        fun (x730 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x729) "scalabilityMode"
            (Ojs.string_to_js x730)
    let (get_transferFunction : 'tags this -> TransferFunction.t) =
      fun (x732 : 'tags this) ->
        TransferFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x732) "transferFunction")
    let (set_transferFunction : 'tags this -> TransferFunction.t -> unit) =
      fun (x734 : 'tags this) ->
        fun (x735 : TransferFunction.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x734) "transferFunction"
            (TransferFunction.t_to_js x735)
    let (get_width : 'tags this -> float) =
      fun (x737 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x737) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x739 : 'tags this) ->
        fun (x740 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x739) "width"
            (Ojs.float_to_js x740)
    let cast_from = Obj.magic
  end
module AudioConfiguration =
  struct
    type t = [ `AudioConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x743 : Ojs.t) -> t_of_js x743
    and t_0_to_js : t_0 -> Ojs.t = fun (x742 : t) -> t_to_js x742
    type tags = [ `AudioConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x746 : Ojs.t) -> intf_of_js __tags_of_js x746
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x744 : __tags intf) -> intf_to_js __tags_to_js x744
    let (get_bitrate : 'tags this -> float) =
      fun (x748 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x748) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x750 : 'tags this) ->
        fun (x751 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x750) "bitrate"
            (Ojs.float_to_js x751)
    let (get_channels : 'tags this -> string) =
      fun (x753 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x753) "channels")
    let (set_channels : 'tags this -> string -> unit) =
      fun (x755 : 'tags this) ->
        fun (x756 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x755) "channels"
            (Ojs.string_to_js x756)
    let (get_contentType : 'tags this -> string) =
      fun (x758 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x758) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x760 : 'tags this) ->
        fun (x761 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x760) "contentType"
            (Ojs.string_to_js x761)
    let (get_samplerate : 'tags this -> float) =
      fun (x763 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x763) "samplerate")
    let (set_samplerate : 'tags this -> float -> unit) =
      fun (x765 : 'tags this) ->
        fun (x766 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x765) "samplerate"
            (Ojs.float_to_js x766)
    let (get_spatialRendering : 'tags this -> bool) =
      fun (x768 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x768) "spatialRendering")
    let (set_spatialRendering : 'tags this -> bool -> unit) =
      fun (x770 : 'tags this) ->
        fun (x771 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x770) "spatialRendering"
            (Ojs.bool_to_js x771)
    let cast_from = Obj.magic
  end
module MediaConfiguration =
  struct
    type t = [ `MediaConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x774 : Ojs.t) -> t_of_js x774
    and t_0_to_js : t_0 -> Ojs.t = fun (x773 : t) -> t_to_js x773
    type tags = [ `MediaConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x777 : Ojs.t) -> intf_of_js __tags_of_js x777
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x775 : __tags intf) -> intf_to_js __tags_to_js x775
    let (get_audio : 'tags this -> AudioConfiguration.t) =
      fun (x779 : 'tags this) ->
        AudioConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x779) "audio")
    let (set_audio : 'tags this -> AudioConfiguration.t -> unit) =
      fun (x781 : 'tags this) ->
        fun (x782 : AudioConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x781) "audio"
            (AudioConfiguration.t_to_js x782)
    let (get_video : 'tags this -> VideoConfiguration.t) =
      fun (x784 : 'tags this) ->
        VideoConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x784) "video")
    let (set_video : 'tags this -> VideoConfiguration.t -> unit) =
      fun (x786 : 'tags this) ->
        fun (x787 : VideoConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x786) "video"
            (VideoConfiguration.t_to_js x787)
    let cast_from = Obj.magic
  end
module MediaEncodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaEncodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x790 : Ojs.t) -> t_of_js x790
    and t_0_to_js : t_0 -> Ojs.t = fun (x789 : t) -> t_to_js x789
    type tags = [ `MediaConfiguration  | `MediaEncodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x793 : Ojs.t) -> intf_of_js __tags_of_js x793
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x791 : __tags intf) -> intf_to_js __tags_to_js x791
    let (get_type : 'tags this -> MediaEncodingType.t) =
      fun (x795 : 'tags this) ->
        MediaEncodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x795) "type")
    let (set_type : 'tags this -> MediaEncodingType.t -> unit) =
      fun (x797 : 'tags this) ->
        fun (x798 : MediaEncodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x797) "type"
            (MediaEncodingType.t_to_js x798)
    let cast_from = Obj.magic
  end
module MediaCapabilitiesInfo =
  struct
    type t = [ `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x801 : Ojs.t) -> t_of_js x801
    and t_0_to_js : t_0 -> Ojs.t = fun (x800 : t) -> t_to_js x800
    type tags = [ `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x804 : Ojs.t) -> intf_of_js __tags_of_js x804
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x802 : __tags intf) -> intf_to_js __tags_to_js x802
    let (get_powerEfficient : 'tags this -> bool) =
      fun (x806 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x806) "powerEfficient")
    let (set_powerEfficient : 'tags this -> bool -> unit) =
      fun (x808 : 'tags this) ->
        fun (x809 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x808) "powerEfficient"
            (Ojs.bool_to_js x809)
    let (get_smooth : 'tags this -> bool) =
      fun (x811 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x811) "smooth")
    let (set_smooth : 'tags this -> bool -> unit) =
      fun (x813 : 'tags this) ->
        fun (x814 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x813) "smooth"
            (Ojs.bool_to_js x814)
    let (get_supported : 'tags this -> bool) =
      fun (x816 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x816) "supported")
    let (set_supported : 'tags this -> bool -> unit) =
      fun (x818 : 'tags this) ->
        fun (x819 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x818) "supported"
            (Ojs.bool_to_js x819)
    let cast_from = Obj.magic
  end
module MediaCapabilitiesEncodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x822 : Ojs.t) -> t_of_js x822
    and t_0_to_js : t_0 -> Ojs.t = fun (x821 : t) -> t_to_js x821
    type tags = [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x825 : Ojs.t) -> intf_of_js __tags_of_js x825
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x823 : __tags intf) -> intf_to_js __tags_to_js x823
    let (get_configuration : 'tags this -> MediaEncodingConfiguration.t) =
      fun (x827 : 'tags this) ->
        MediaEncodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x827) "configuration")
    let (set_configuration :
      'tags this -> MediaEncodingConfiguration.t -> unit) =
      fun (x829 : 'tags this) ->
        fun (x830 : MediaEncodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x829) "configuration"
            (MediaEncodingConfiguration.t_to_js x830)
    let cast_from = Obj.magic
  end
module MediaDecodingType =
  struct
    type t = [ `L_s73_file  | `L_s112_media_source  | `L_s207_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x833 : Ojs.t) ->
        let x834 = x833 in
        match Ojs.string_of_js x834 with
        | "file" -> `L_s73_file
        | "media-source" -> `L_s112_media_source
        | "webrtc" -> `L_s207_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x832 : [ `L_s73_file  | `L_s112_media_source  | `L_s207_webrtc ])
        ->
        match x832 with
        | `L_s73_file -> Ojs.string_to_js "file"
        | `L_s112_media_source -> Ojs.string_to_js "media-source"
        | `L_s207_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x836 : Ojs.t) -> t_of_js x836
    and t_0_to_js : t_0 -> Ojs.t = fun (x835 : t) -> t_to_js x835
  end
module MediaDecodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaDecodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x838 : Ojs.t) -> t_of_js x838
    and t_0_to_js : t_0 -> Ojs.t = fun (x837 : t) -> t_to_js x837
    type tags = [ `MediaConfiguration  | `MediaDecodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x841 : Ojs.t) -> intf_of_js __tags_of_js x841
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x839 : __tags intf) -> intf_to_js __tags_to_js x839
    let (get_type : 'tags this -> MediaDecodingType.t) =
      fun (x843 : 'tags this) ->
        MediaDecodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x843) "type")
    let (set_type : 'tags this -> MediaDecodingType.t -> unit) =
      fun (x845 : 'tags this) ->
        fun (x846 : MediaDecodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x845) "type"
            (MediaDecodingType.t_to_js x846)
    let cast_from = Obj.magic
  end
module MediaCapabilitiesDecodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x849 : Ojs.t) -> t_of_js x849
    and t_0_to_js : t_0 -> Ojs.t = fun (x848 : t) -> t_to_js x848
    type tags = [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x852 : Ojs.t) -> intf_of_js __tags_of_js x852
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x850 : __tags intf) -> intf_to_js __tags_to_js x850
    let (get_configuration : 'tags this -> MediaDecodingConfiguration.t) =
      fun (x854 : 'tags this) ->
        MediaDecodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x854) "configuration")
    let (set_configuration :
      'tags this -> MediaDecodingConfiguration.t -> unit) =
      fun (x856 : 'tags this) ->
        fun (x857 : MediaDecodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x856) "configuration"
            (MediaDecodingConfiguration.t_to_js x857)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface60:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> MediaCapabilities.t
                         val set_prototype : t -> MediaCapabilities.t -> unit
                         val create : t -> MediaCapabilities.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x860 : Ojs.t) -> x860
    and t_to_js : t -> Ojs.t = fun (x859 : Ojs.t) -> x859
    let (get_prototype : t -> MediaCapabilities.t) =
      fun (x861 : t) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (t_to_js x861) "prototype")
    let (set_prototype : t -> MediaCapabilities.t -> unit) =
      fun (x862 : t) ->
        fun (x863 : MediaCapabilities.t) ->
          Ojs.set_prop_ascii (t_to_js x862) "prototype"
            (MediaCapabilities.t_to_js x863)
    let (create : t -> MediaCapabilities.t) =
      fun (x864 : t) ->
        MediaCapabilities.t_of_js (Ojs.new_obj (t_to_js x864) [||])
  end
 and
  MediaCapabilities:sig
                      type t = [ `MediaCapabilities ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `MediaCapabilities ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `MediaCapabilities ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `MediaCapabilities ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val decodingInfo :
                        'tags this ->
                          configuration:MediaDecodingConfiguration.t ->
                            MediaCapabilitiesDecodingInfo.t Promise.t_1
                      val encodingInfo :
                        'tags this ->
                          configuration:MediaEncodingConfiguration.t ->
                            MediaCapabilitiesEncodingInfo.t Promise.t_1
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : unit -> t
                    end =
  struct
    type t = [ `MediaCapabilities ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x866 : Ojs.t) -> t_of_js x866
    and t_0_to_js : t_0 -> Ojs.t = fun (x865 : t) -> t_to_js x865
    type tags = [ `MediaCapabilities ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x869 : Ojs.t) -> intf_of_js __tags_of_js x869
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x867 : __tags intf) -> intf_to_js __tags_to_js x867
    let (decodingInfo :
      'tags this ->
        configuration:MediaDecodingConfiguration.t ->
          MediaCapabilitiesDecodingInfo.t Promise.t_1)
      =
      fun (x872 : 'tags this) ->
        fun ~configuration:(x871 : MediaDecodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesDecodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x872) "decodingInfo"
               [|(MediaDecodingConfiguration.t_to_js x871)|])
    let (encodingInfo :
      'tags this ->
        configuration:MediaEncodingConfiguration.t ->
          MediaCapabilitiesEncodingInfo.t Promise.t_1)
      =
      fun (x876 : 'tags this) ->
        fun ~configuration:(x875 : MediaEncodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesEncodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x876) "encodingInfo"
               [|(MediaEncodingConfiguration.t_to_js x875)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MediaCapabilities") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
             [||])
  end
module NavigatorStatic =
  struct
    let (mediaCapabilities : unit -> MediaCapabilities.t) =
      fun () ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "navigator")
             "mediaCapabilities")
  end
module LocationStatic =
  struct
    let (hash : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hash")
    let (host : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "host")
    let (hostname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hostname")
    let (href : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "href")
    let (toString : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "location") "toString"
             [||])
    let (origin : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "origin")
    let (pathname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "pathname")
    let (port : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "port")
    let (protocol : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "protocol")
    let (search : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "search")
  end
module IDBVersionChangeEventInit =
  struct
    type t = [ `EventInit  | `IDBVersionChangeEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x880 : Ojs.t) -> t_of_js x880
    and t_0_to_js : t_0 -> Ojs.t = fun (x879 : t) -> t_to_js x879
    type tags = [ `EventInit  | `IDBVersionChangeEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x883 : Ojs.t) -> intf_of_js __tags_of_js x883
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x881 : __tags intf) -> intf_to_js __tags_to_js x881
    let (get_newVersion : 'tags this -> float or_null) =
      fun (x885 : 'tags this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x885) "newVersion")
    let (set_newVersion : 'tags this -> float or_null -> unit) =
      fun (x888 : 'tags this) ->
        fun (x889 : float or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x888) "newVersion"
            (or_null_to_js Ojs.float_to_js x889)
    let (get_oldVersion : 'tags this -> float) =
      fun (x892 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x892) "oldVersion")
    let (set_oldVersion : 'tags this -> float -> unit) =
      fun (x894 : 'tags this) ->
        fun (x895 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x894) "oldVersion"
            (Ojs.float_to_js x895)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface54:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBVersionChangeEvent.t
                         val set_prototype :
                           t -> IDBVersionChangeEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:IDBVersionChangeEventInit.t ->
                                 unit -> IDBVersionChangeEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x898 : Ojs.t) -> x898
    and t_to_js : t -> Ojs.t = fun (x897 : Ojs.t) -> x897
    let (get_prototype : t -> IDBVersionChangeEvent.t) =
      fun (x899 : t) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x899) "prototype")
    let (set_prototype : t -> IDBVersionChangeEvent.t -> unit) =
      fun (x900 : t) ->
        fun (x901 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x900) "prototype"
            (IDBVersionChangeEvent.t_to_js x901)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:IDBVersionChangeEventInit.t ->
            unit -> IDBVersionChangeEvent.t)
      =
      fun (x906 : t) ->
        fun ~type_:(x902 : string) ->
          fun ?eventInitDict:(x903 : IDBVersionChangeEventInit.t option) ->
            fun () ->
              IDBVersionChangeEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x906)
                   (let x904 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore (Ojs.call x904 "push" [|(Ojs.string_to_js x902)|]);
                    (match x903 with
                     | Some x905 ->
                         ignore
                           (Ojs.call x904 "push"
                              [|(IDBVersionChangeEventInit.t_to_js x905)|])
                     | None -> ());
                    x904))
  end
 and
  IDBVersionChangeEvent:sig
                          type t = [ `Event  | `IDBVersionChangeEvent ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `Event  | `IDBVersionChangeEvent ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `Event  | `IDBVersionChangeEvent ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags =
                                        [> `IDBVersionChangeEvent ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_newVersion : 'tags this -> float or_null
                          val get_oldVersion : 'tags this -> float
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create :
                            type_:string ->
                              ?eventInitDict:IDBVersionChangeEventInit.t ->
                                unit -> t
                        end =
  struct
    type t = [ `Event  | `IDBVersionChangeEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x908 : Ojs.t) -> t_of_js x908
    and t_0_to_js : t_0 -> Ojs.t = fun (x907 : t) -> t_to_js x907
    type tags = [ `Event  | `IDBVersionChangeEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x911 : Ojs.t) -> intf_of_js __tags_of_js x911
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x909 : __tags intf) -> intf_to_js __tags_to_js x909
    let (get_newVersion : 'tags this -> float or_null) =
      fun (x913 : 'tags this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x913) "newVersion")
    let (get_oldVersion : 'tags this -> float) =
      fun (x916 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x916) "oldVersion")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t)
      =
      fun ~type_:(x918 : string) ->
        fun ?eventInitDict:(x919 : IDBVersionChangeEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
                 (let x920 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x920 "push" [|(Ojs.string_to_js x918)|]);
                  (match x919 with
                   | Some x921 ->
                       ignore
                         (Ojs.call x920 "push"
                            [|(IDBVersionChangeEventInit.t_to_js x921)|])
                   | None -> ());
                  x920))
  end
module IDBObjectStoreParameters =
  struct
    type t = [ `IDBObjectStoreParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x923 : Ojs.t) -> t_of_js x923
    and t_0_to_js : t_0 -> Ojs.t = fun (x922 : t) -> t_to_js x922
    type tags = [ `IDBObjectStoreParameters ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x926 : Ojs.t) -> intf_of_js __tags_of_js x926
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x924 : __tags intf) -> intf_to_js __tags_to_js x924
    let (get_autoIncrement : 'tags this -> bool) =
      fun (x928 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x928) "autoIncrement")
    let (set_autoIncrement : 'tags this -> bool -> unit) =
      fun (x930 : 'tags this) ->
        fun (x931 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x930) "autoIncrement"
            (Ojs.bool_to_js x931)
    let (get_keyPath : 'tags this -> string list or_string or_null) =
      fun (x933 : 'tags this) ->
        or_null_of_js
          (fun (x935 : Ojs.t) ->
             or_string_of_js
               (fun (x936 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x936)
               x935)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x933) "keyPath")
    let (set_keyPath : 'tags this -> string list or_string or_null -> unit) =
      fun (x938 : 'tags this) ->
        fun (x939 : string list or_string or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x938) "keyPath"
            (or_null_to_js
               (fun (x940 : string list or_string) ->
                  or_string_to_js
                    (fun (x941 : string list) ->
                       Ojs.list_to_js Ojs.string_to_js x941) x940) x939)
    let cast_from = Obj.magic
  end
module IDBIndexParameters =
  struct
    type t = [ `IDBIndexParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x945 : Ojs.t) -> t_of_js x945
    and t_0_to_js : t_0 -> Ojs.t = fun (x944 : t) -> t_to_js x944
    type tags = [ `IDBIndexParameters ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x948 : Ojs.t) -> intf_of_js __tags_of_js x948
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x946 : __tags intf) -> intf_to_js __tags_to_js x946
    let (get_multiEntry : 'tags this -> bool) =
      fun (x950 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x950) "multiEntry")
    let (set_multiEntry : 'tags this -> bool -> unit) =
      fun (x952 : 'tags this) ->
        fun (x953 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x952) "multiEntry"
            (Ojs.bool_to_js x953)
    let (get_unique : 'tags this -> bool) =
      fun (x955 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x955) "unique")
    let (set_unique : 'tags this -> bool -> unit) =
      fun (x957 : 'tags this) ->
        fun (x958 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x957) "unique"
            (Ojs.bool_to_js x958)
    let cast_from = Obj.magic
  end
module BufferSource =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x963 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x963
    and t_to_js : t -> Ojs.t =
      fun (x960 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x960
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x967 : Ojs.t) -> t_of_js x967
    and t_0_to_js : t_0 -> Ojs.t = fun (x966 : t) -> t_to_js x966
  end
module IDBValidKey =
  struct
    type t =
      ((BufferSource.t, Date.t_0) union2, t) or_array or_string or_number
    let rec t_of_js : Ojs.t -> t =
      fun (x975 : Ojs.t) ->
        or_number_of_js
          (fun (x976 : Ojs.t) ->
             or_string_of_js
               (fun (x977 : Ojs.t) ->
                  or_array_of_js
                    (fun (x978 : Ojs.t) ->
                       union2_of_js BufferSource.t_of_js Date.t_0_of_js x978)
                    t_of_js x977) x976) x975
    and t_to_js : t -> Ojs.t =
      fun
        (x968 :
          ((BufferSource.t, Date.t_0) union2, t) or_array or_string or_number)
        ->
        or_number_to_js
          (fun
             (x969 :
               ((BufferSource.t, Date.t_0) union2, t) or_array or_string)
             ->
             or_string_to_js
               (fun (x970 : ((BufferSource.t, Date.t_0) union2, t) or_array)
                  ->
                  or_array_to_js
                    (fun (x971 : (BufferSource.t, Date.t_0) union2) ->
                       union2_to_js BufferSource.t_to_js Date.t_0_to_js x971)
                    t_to_js x970) x969) x968
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x983 : Ojs.t) -> t_of_js x983
    and t_0_to_js : t_0 -> Ojs.t = fun (x982 : t) -> t_to_js x982
  end
module IDBTransactionMode =
  struct
    type t =
      [ `L_s162_readonly  | `L_s163_readwrite  | `L_s204_versionchange ]
    let rec t_of_js : Ojs.t -> t =
      fun (x985 : Ojs.t) ->
        let x986 = x985 in
        match Ojs.string_of_js x986 with
        | "readonly" -> `L_s162_readonly
        | "readwrite" -> `L_s163_readwrite
        | "versionchange" -> `L_s204_versionchange
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x984 :
          [ `L_s162_readonly  | `L_s163_readwrite  | `L_s204_versionchange ])
        ->
        match x984 with
        | `L_s162_readonly -> Ojs.string_to_js "readonly"
        | `L_s163_readwrite -> Ojs.string_to_js "readwrite"
        | `L_s204_versionchange -> Ojs.string_to_js "versionchange"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x988 : Ojs.t) -> t_of_js x988
    and t_0_to_js : t_0 -> Ojs.t = fun (x987 : t) -> t_to_js x987
  end
module IDBRequestReadyState =
  struct
    type t = [ `L_s63_done  | `L_s148_pending ]
    let rec t_of_js : Ojs.t -> t =
      fun (x990 : Ojs.t) ->
        let x991 = x990 in
        match Ojs.string_of_js x991 with
        | "done" -> `L_s63_done
        | "pending" -> `L_s148_pending
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x989 : [ `L_s63_done  | `L_s148_pending ]) ->
        match x989 with
        | `L_s63_done -> Ojs.string_to_js "done"
        | `L_s148_pending -> Ojs.string_to_js "pending"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x993 : Ojs.t) -> t_of_js x993
    and t_0_to_js : t_0 -> Ojs.t = fun (x992 : t) -> t_to_js x992
  end
module rec
  AnonymousInterface17:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMException.t
                         val set_prototype : t -> DOMException.t -> unit
                         val create :
                           t ->
                             ?message:string ->
                               ?name:string -> unit -> DOMException.t
                         val get_ABORT_ERR : t -> float
                         val get_DATA_CLONE_ERR : t -> float
                         val get_DOMSTRING_SIZE_ERR : t -> float
                         val get_HIERARCHY_REQUEST_ERR : t -> float
                         val get_INDEX_SIZE_ERR : t -> float
                         val get_INUSE_ATTRIBUTE_ERR : t -> float
                         val get_INVALID_ACCESS_ERR : t -> float
                         val get_INVALID_CHARACTER_ERR : t -> float
                         val get_INVALID_MODIFICATION_ERR : t -> float
                         val get_INVALID_NODE_TYPE_ERR : t -> float
                         val get_INVALID_STATE_ERR : t -> float
                         val get_NAMESPACE_ERR : t -> float
                         val get_NETWORK_ERR : t -> float
                         val get_NOT_FOUND_ERR : t -> float
                         val get_NOT_SUPPORTED_ERR : t -> float
                         val get_NO_DATA_ALLOWED_ERR : t -> float
                         val get_NO_MODIFICATION_ALLOWED_ERR : t -> float
                         val get_QUOTA_EXCEEDED_ERR : t -> float
                         val get_SECURITY_ERR : t -> float
                         val get_SYNTAX_ERR : t -> float
                         val get_TIMEOUT_ERR : t -> float
                         val get_TYPE_MISMATCH_ERR : t -> float
                         val get_URL_MISMATCH_ERR : t -> float
                         val get_VALIDATION_ERR : t -> float
                         val get_WRONG_DOCUMENT_ERR : t -> float
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x995 : Ojs.t) -> x995
    and t_to_js : t -> Ojs.t = fun (x994 : Ojs.t) -> x994
    let (get_prototype : t -> DOMException.t) =
      fun (x996 : t) ->
        DOMException.t_of_js (Ojs.get_prop_ascii (t_to_js x996) "prototype")
    let (set_prototype : t -> DOMException.t -> unit) =
      fun (x997 : t) ->
        fun (x998 : DOMException.t) ->
          Ojs.set_prop_ascii (t_to_js x997) "prototype"
            (DOMException.t_to_js x998)
    let (create :
      t -> ?message:string -> ?name:string -> unit -> DOMException.t) =
      fun (x1004 : t) ->
        fun ?message:(x999 : string option) ->
          fun ?name:(x1000 : string option) ->
            fun () ->
              DOMException.t_of_js
                (Ojs.new_obj_arr (t_to_js x1004)
                   (let x1001 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x999 with
                     | Some x1003 ->
                         ignore
                           (Ojs.call x1001 "push"
                              [|(Ojs.string_to_js x1003)|])
                     | None -> ());
                    (match x1000 with
                     | Some x1002 ->
                         ignore
                           (Ojs.call x1001 "push"
                              [|(Ojs.string_to_js x1002)|])
                     | None -> ());
                    x1001))
    let (get_ABORT_ERR : t -> float) =
      fun (x1005 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1005) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : t -> float) =
      fun (x1006 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1006) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : t -> float) =
      fun (x1007 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1007) "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : t -> float) =
      fun (x1008 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1008) "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : t -> float) =
      fun (x1009 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1009) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : t -> float) =
      fun (x1010 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1010) "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : t -> float) =
      fun (x1011 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1011) "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : t -> float) =
      fun (x1012 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1012) "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : t -> float) =
      fun (x1013 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1013) "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : t -> float) =
      fun (x1014 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1014) "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : t -> float) =
      fun (x1015 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1015) "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : t -> float) =
      fun (x1016 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1016) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : t -> float) =
      fun (x1017 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1017) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : t -> float) =
      fun (x1018 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1018) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : t -> float) =
      fun (x1019 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1019) "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : t -> float) =
      fun (x1020 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1020) "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : t -> float) =
      fun (x1021 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1021) "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : t -> float) =
      fun (x1022 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1022) "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : t -> float) =
      fun (x1023 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1023) "SECURITY_ERR")
    let (get_SYNTAX_ERR : t -> float) =
      fun (x1024 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1024) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : t -> float) =
      fun (x1025 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1025) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : t -> float) =
      fun (x1026 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1026) "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : t -> float) =
      fun (x1027 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1027) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : t -> float) =
      fun (x1028 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1028) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : t -> float) =
      fun (x1029 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x1029) "WRONG_DOCUMENT_ERR")
  end
 and
  DOMException:sig
                 type t = [ `DOMException ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `DOMException ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `DOMException ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `DOMException ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_code : 'tags this -> float
                 val get_message : 'tags this -> string
                 val get_name : 'tags this -> string
                 val get_ABORT_ERR : 'tags this -> float
                 val get_DATA_CLONE_ERR : 'tags this -> float
                 val get_DOMSTRING_SIZE_ERR : 'tags this -> float
                 val get_HIERARCHY_REQUEST_ERR : 'tags this -> float
                 val get_INDEX_SIZE_ERR : 'tags this -> float
                 val get_INUSE_ATTRIBUTE_ERR : 'tags this -> float
                 val get_INVALID_ACCESS_ERR : 'tags this -> float
                 val get_INVALID_CHARACTER_ERR : 'tags this -> float
                 val get_INVALID_MODIFICATION_ERR : 'tags this -> float
                 val get_INVALID_NODE_TYPE_ERR : 'tags this -> float
                 val get_INVALID_STATE_ERR : 'tags this -> float
                 val get_NAMESPACE_ERR : 'tags this -> float
                 val get_NETWORK_ERR : 'tags this -> float
                 val get_NOT_FOUND_ERR : 'tags this -> float
                 val get_NOT_SUPPORTED_ERR : 'tags this -> float
                 val get_NO_DATA_ALLOWED_ERR : 'tags this -> float
                 val get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float
                 val get_QUOTA_EXCEEDED_ERR : 'tags this -> float
                 val get_SECURITY_ERR : 'tags this -> float
                 val get_SYNTAX_ERR : 'tags this -> float
                 val get_TIMEOUT_ERR : 'tags this -> float
                 val get_TYPE_MISMATCH_ERR : 'tags this -> float
                 val get_URL_MISMATCH_ERR : 'tags this -> float
                 val get_VALIDATION_ERR : 'tags this -> float
                 val get_WRONG_DOCUMENT_ERR : 'tags this -> float
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : ?message:string -> ?name:string -> unit -> t
                 val abort_err : unit -> float
                 val data_clone_err : unit -> float
                 val domstring_size_err : unit -> float
                 val hierarchy_request_err : unit -> float
                 val index_size_err : unit -> float
                 val inuse_attribute_err : unit -> float
                 val invalid_access_err : unit -> float
                 val invalid_character_err : unit -> float
                 val invalid_modification_err : unit -> float
                 val invalid_node_type_err : unit -> float
                 val invalid_state_err : unit -> float
                 val namespace_err : unit -> float
                 val network_err : unit -> float
                 val not_found_err : unit -> float
                 val not_supported_err : unit -> float
                 val no_data_allowed_err : unit -> float
                 val no_modification_allowed_err : unit -> float
                 val quota_exceeded_err : unit -> float
                 val security_err : unit -> float
                 val syntax_err : unit -> float
                 val timeout_err : unit -> float
                 val type_mismatch_err : unit -> float
                 val url_mismatch_err : unit -> float
                 val validation_err : unit -> float
                 val wrong_document_err : unit -> float
               end =
  struct
    type t = [ `DOMException ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1031 : Ojs.t) -> t_of_js x1031
    and t_0_to_js : t_0 -> Ojs.t = fun (x1030 : t) -> t_to_js x1030
    type tags = [ `DOMException ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1034 : Ojs.t) -> intf_of_js __tags_of_js x1034
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1032 : __tags intf) -> intf_to_js __tags_to_js x1032
    let (get_code : 'tags this -> float) =
      fun (x1036 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1036) "code")
    let (get_message : 'tags this -> string) =
      fun (x1038 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1038) "message")
    let (get_name : 'tags this -> string) =
      fun (x1040 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1040) "name")
    let (get_ABORT_ERR : 'tags this -> float) =
      fun (x1042 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1042) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : 'tags this -> float) =
      fun (x1044 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1044) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : 'tags this -> float) =
      fun (x1046 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1046)
             "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : 'tags this -> float) =
      fun (x1048 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1048)
             "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : 'tags this -> float) =
      fun (x1050 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1050) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : 'tags this -> float) =
      fun (x1052 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1052)
             "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : 'tags this -> float) =
      fun (x1054 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1054)
             "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : 'tags this -> float) =
      fun (x1056 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1056)
             "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : 'tags this -> float) =
      fun (x1058 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1058)
             "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : 'tags this -> float) =
      fun (x1060 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1060)
             "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : 'tags this -> float) =
      fun (x1062 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1062)
             "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : 'tags this -> float) =
      fun (x1064 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1064) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : 'tags this -> float) =
      fun (x1066 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1066) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : 'tags this -> float) =
      fun (x1068 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1068) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : 'tags this -> float) =
      fun (x1070 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1070)
             "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : 'tags this -> float) =
      fun (x1072 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1072)
             "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float) =
      fun (x1074 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1074)
             "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : 'tags this -> float) =
      fun (x1076 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1076)
             "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : 'tags this -> float) =
      fun (x1078 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1078) "SECURITY_ERR")
    let (get_SYNTAX_ERR : 'tags this -> float) =
      fun (x1080 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1080) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : 'tags this -> float) =
      fun (x1082 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1082) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : 'tags this -> float) =
      fun (x1084 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1084)
             "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : 'tags this -> float) =
      fun (x1086 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1086) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : 'tags this -> float) =
      fun (x1088 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1088) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : 'tags this -> float) =
      fun (x1090 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1090)
             "WRONG_DOCUMENT_ERR")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "prototype")
    let (create : ?message:string -> ?name:string -> unit -> t) =
      fun ?message:(x1092 : string option) ->
        fun ?name:(x1093 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMException")
                 (let x1094 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1092 with
                   | Some x1096 ->
                       ignore
                         (Ojs.call x1094 "push" [|(Ojs.string_to_js x1096)|])
                   | None -> ());
                  (match x1093 with
                   | Some x1095 ->
                       ignore
                         (Ojs.call x1094 "push" [|(Ojs.string_to_js x1095)|])
                   | None -> ());
                  x1094))
    let (abort_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "ABORT_ERR")
    let (data_clone_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DATA_CLONE_ERR")
    let (domstring_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DOMSTRING_SIZE_ERR")
    let (hierarchy_request_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "HIERARCHY_REQUEST_ERR")
    let (index_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INDEX_SIZE_ERR")
    let (inuse_attribute_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INUSE_ATTRIBUTE_ERR")
    let (invalid_access_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_ACCESS_ERR")
    let (invalid_character_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_CHARACTER_ERR")
    let (invalid_modification_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_MODIFICATION_ERR")
    let (invalid_node_type_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_NODE_TYPE_ERR")
    let (invalid_state_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_STATE_ERR")
    let (namespace_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NAMESPACE_ERR")
    let (network_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NETWORK_ERR")
    let (not_found_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_FOUND_ERR")
    let (not_supported_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_SUPPORTED_ERR")
    let (no_data_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_DATA_ALLOWED_ERR")
    let (no_modification_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_MODIFICATION_ALLOWED_ERR")
    let (quota_exceeded_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "QUOTA_EXCEEDED_ERR")
    let (security_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SECURITY_ERR")
    let (syntax_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SYNTAX_ERR")
    let (timeout_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TIMEOUT_ERR")
    let (type_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TYPE_MISMATCH_ERR")
    let (url_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "URL_MISMATCH_ERR")
    let (validation_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "VALIDATION_ERR")
    let (wrong_document_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "WRONG_DOCUMENT_ERR")
  end
module rec
  AnonymousInterface49:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBKeyRange.t
                         val set_prototype : t -> IDBKeyRange.t -> unit
                         val create : t -> IDBKeyRange.t
                         val bound :
                           t ->
                             lower:any ->
                               upper:any ->
                                 ?lowerOpen:bool ->
                                   ?upperOpen:bool -> unit -> IDBKeyRange.t
                         val lowerBound :
                           t ->
                             lower:any ->
                               ?open_:bool -> unit -> IDBKeyRange.t
                         val only : t -> value:any -> IDBKeyRange.t
                         val upperBound :
                           t ->
                             upper:any ->
                               ?open_:bool -> unit -> IDBKeyRange.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1098 : Ojs.t) -> x1098
    and t_to_js : t -> Ojs.t = fun (x1097 : Ojs.t) -> x1097
    let (get_prototype : t -> IDBKeyRange.t) =
      fun (x1099 : t) ->
        IDBKeyRange.t_of_js (Ojs.get_prop_ascii (t_to_js x1099) "prototype")
    let (set_prototype : t -> IDBKeyRange.t -> unit) =
      fun (x1100 : t) ->
        fun (x1101 : IDBKeyRange.t) ->
          Ojs.set_prop_ascii (t_to_js x1100) "prototype"
            (IDBKeyRange.t_to_js x1101)
    let (create : t -> IDBKeyRange.t) =
      fun (x1102 : t) ->
        IDBKeyRange.t_of_js (Ojs.new_obj (t_to_js x1102) [||])
    let (bound :
      t ->
        lower:any ->
          upper:any ->
            ?lowerOpen:bool -> ?upperOpen:bool -> unit -> IDBKeyRange.t)
      =
      fun (x1110 : t) ->
        fun ~lower:(x1103 : any) ->
          fun ~upper:(x1104 : any) ->
            fun ?lowerOpen:(x1105 : bool option) ->
              fun ?upperOpen:(x1106 : bool option) ->
                fun () ->
                  IDBKeyRange.t_of_js
                    (let x1111 = t_to_js x1110 in
                     Ojs.call (Ojs.get_prop_ascii x1111 "bound") "apply"
                       [|x1111;((let x1107 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1107 "push"
                                      [|(any_to_js x1103)|]);
                                 ignore
                                   (Ojs.call x1107 "push"
                                      [|(any_to_js x1104)|]);
                                 (match x1105 with
                                  | Some x1109 ->
                                      ignore
                                        (Ojs.call x1107 "push"
                                           [|(Ojs.bool_to_js x1109)|])
                                  | None -> ());
                                 (match x1106 with
                                  | Some x1108 ->
                                      ignore
                                        (Ojs.call x1107 "push"
                                           [|(Ojs.bool_to_js x1108)|])
                                  | None -> ());
                                 x1107))|])
    let (lowerBound : t -> lower:any -> ?open_:bool -> unit -> IDBKeyRange.t)
      =
      fun (x1116 : t) ->
        fun ~lower:(x1112 : any) ->
          fun ?open_:(x1113 : bool option) ->
            fun () ->
              IDBKeyRange.t_of_js
                (let x1117 = t_to_js x1116 in
                 Ojs.call (Ojs.get_prop_ascii x1117 "lowerBound") "apply"
                   [|x1117;((let x1114 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1114 "push" [|(any_to_js x1112)|]);
                             (match x1113 with
                              | Some x1115 ->
                                  ignore
                                    (Ojs.call x1114 "push"
                                       [|(Ojs.bool_to_js x1115)|])
                              | None -> ());
                             x1114))|])
    let (only : t -> value:any -> IDBKeyRange.t) =
      fun (x1119 : t) ->
        fun ~value:(x1118 : any) ->
          IDBKeyRange.t_of_js
            (Ojs.call (t_to_js x1119) "only" [|(any_to_js x1118)|])
    let (upperBound : t -> upper:any -> ?open_:bool -> unit -> IDBKeyRange.t)
      =
      fun (x1124 : t) ->
        fun ~upper:(x1120 : any) ->
          fun ?open_:(x1121 : bool option) ->
            fun () ->
              IDBKeyRange.t_of_js
                (let x1125 = t_to_js x1124 in
                 Ojs.call (Ojs.get_prop_ascii x1125 "upperBound") "apply"
                   [|x1125;((let x1122 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1122 "push" [|(any_to_js x1120)|]);
                             (match x1121 with
                              | Some x1123 ->
                                  ignore
                                    (Ojs.call x1122 "push"
                                       [|(Ojs.bool_to_js x1123)|])
                              | None -> ());
                             x1122))|])
  end
 and
  IDBKeyRange:sig
                type t = [ `IDBKeyRange ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `IDBKeyRange ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `IDBKeyRange ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `IDBKeyRange ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_lower : 'tags this -> any
                val get_lowerOpen : 'tags this -> bool
                val get_upper : 'tags this -> any
                val get_upperOpen : 'tags this -> bool
                val includes : 'tags this -> key:any -> bool
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
                val bound :
                  lower:any ->
                    upper:any ->
                      ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t
                val lowerBound : lower:any -> ?open_:bool -> unit -> t
                val only : any -> t
                val upperBound : upper:any -> ?open_:bool -> unit -> t
              end =
  struct
    type t = [ `IDBKeyRange ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1127 : Ojs.t) -> t_of_js x1127
    and t_0_to_js : t_0 -> Ojs.t = fun (x1126 : t) -> t_to_js x1126
    type tags = [ `IDBKeyRange ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1130 : Ojs.t) -> intf_of_js __tags_of_js x1130
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1128 : __tags intf) -> intf_to_js __tags_to_js x1128
    let (get_lower : 'tags this -> any) =
      fun (x1132 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1132) "lower")
    let (get_lowerOpen : 'tags this -> bool) =
      fun (x1134 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1134) "lowerOpen")
    let (get_upper : 'tags this -> any) =
      fun (x1136 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1136) "upper")
    let (get_upperOpen : 'tags this -> bool) =
      fun (x1138 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1138) "upperOpen")
    let (includes : 'tags this -> key:any -> bool) =
      fun (x1141 : 'tags this) ->
        fun ~key:(x1140 : any) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1141) "includes"
               [|(any_to_js x1140)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") [||])
    let (bound :
      lower:any ->
        upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t)
      =
      fun ~lower:(x1143 : any) ->
        fun ~upper:(x1144 : any) ->
          fun ?lowerOpen:(x1145 : bool option) ->
            fun ?upperOpen:(x1146 : bool option) ->
              fun () ->
                t_of_js
                  (let x1150 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
                   Ojs.call (Ojs.get_prop_ascii x1150 "bound") "apply"
                     [|x1150;((let x1147 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1147 "push" [|(any_to_js x1143)|]);
                               ignore
                                 (Ojs.call x1147 "push" [|(any_to_js x1144)|]);
                               (match x1145 with
                                | Some x1149 ->
                                    ignore
                                      (Ojs.call x1147 "push"
                                         [|(Ojs.bool_to_js x1149)|])
                                | None -> ());
                               (match x1146 with
                                | Some x1148 ->
                                    ignore
                                      (Ojs.call x1147 "push"
                                         [|(Ojs.bool_to_js x1148)|])
                                | None -> ());
                               x1147))|])
    let (lowerBound : lower:any -> ?open_:bool -> unit -> t) =
      fun ~lower:(x1151 : any) ->
        fun ?open_:(x1152 : bool option) ->
          fun () ->
            t_of_js
              (let x1155 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1155 "lowerBound") "apply"
                 [|x1155;((let x1153 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1153 "push" [|(any_to_js x1151)|]);
                           (match x1152 with
                            | Some x1154 ->
                                ignore
                                  (Ojs.call x1153 "push"
                                     [|(Ojs.bool_to_js x1154)|])
                            | None -> ());
                           x1153))|])
    let (only : any -> t) =
      fun (x1156 : any) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") "only"
             [|(any_to_js x1156)|])
    let (upperBound : upper:any -> ?open_:bool -> unit -> t) =
      fun ~upper:(x1157 : any) ->
        fun ?open_:(x1158 : bool option) ->
          fun () ->
            t_of_js
              (let x1161 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1161 "upperBound") "apply"
                 [|x1161;((let x1159 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1159 "push" [|(any_to_js x1157)|]);
                           (match x1158 with
                            | Some x1160 ->
                                ignore
                                  (Ojs.call x1159 "push"
                                     [|(Ojs.bool_to_js x1160)|])
                            | None -> ());
                           x1159))|])
  end
module IDBCursorDirection =
  struct
    type t =
      [ `L_s122_next  | `L_s123_nextunique  | `L_s154_prev 
      | `L_s155_prevunique ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1163 : Ojs.t) ->
        let x1164 = x1163 in
        match Ojs.string_of_js x1164 with
        | "next" -> `L_s122_next
        | "nextunique" -> `L_s123_nextunique
        | "prev" -> `L_s154_prev
        | "prevunique" -> `L_s155_prevunique
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1162 :
          [ `L_s122_next  | `L_s123_nextunique  | `L_s154_prev 
          | `L_s155_prevunique ])
        ->
        match x1162 with
        | `L_s122_next -> Ojs.string_to_js "next"
        | `L_s123_nextunique -> Ojs.string_to_js "nextunique"
        | `L_s154_prev -> Ojs.string_to_js "prev"
        | `L_s155_prevunique -> Ojs.string_to_js "prevunique"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1166 : Ojs.t) -> t_of_js x1166
    and t_0_to_js : t_0 -> Ojs.t = fun (x1165 : t) -> t_to_js x1165
  end
module rec
  AnonymousInterface25:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMStringList.t
                         val set_prototype : t -> DOMStringList.t -> unit
                         val create : t -> DOMStringList.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1168 : Ojs.t) -> x1168
    and t_to_js : t -> Ojs.t = fun (x1167 : Ojs.t) -> x1167
    let (get_prototype : t -> DOMStringList.t) =
      fun (x1169 : t) ->
        DOMStringList.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1169) "prototype")
    let (set_prototype : t -> DOMStringList.t -> unit) =
      fun (x1170 : t) ->
        fun (x1171 : DOMStringList.t) ->
          Ojs.set_prop_ascii (t_to_js x1170) "prototype"
            (DOMStringList.t_to_js x1171)
    let (create : t -> DOMStringList.t) =
      fun (x1172 : t) ->
        DOMStringList.t_of_js (Ojs.new_obj (t_to_js x1172) [||])
  end
 and
  DOMStringList:sig
                  type t =
                    [ `DOMStringList  | string ArrayLike.tags_1
                    | string IterableIterator.tags_1] intf
                  type t_0 = t
                  [@@@js.stop ]
                  type tags =
                    [ `DOMStringList  | string ArrayLike.tags_1
                    | string IterableIterator.tags_1]
                  type tags_0 = tags
                  [@@@js.start ]
                  [@@@js.implem
                    type tags =
                      [ `DOMStringList  | string ArrayLike.tags_1
                      | string IterableIterator.tags_1]
                    type tags_0 = tags]
                  type 'tags this =
                    'tags intf constraint 'tags = [> `DOMStringList ]
                  val t_to_js : t -> Ojs.t
                  val t_of_js : Ojs.t -> t
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                  val get_length : 'tags this -> float
                  val contains : 'tags this -> string:string -> bool
                  val item : 'tags this -> index:float -> string or_null
                  val get : 'tags this -> float -> string
                  val set : 'tags this -> float -> string -> unit
                  val cast_from : 'tags this -> t
                  val prototype : unit -> t
                  val create : unit -> t
                end =
  struct
    type t =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1174 : Ojs.t) -> t_of_js x1174
    and t_0_to_js : t_0 -> Ojs.t = fun (x1173 : t) -> t_to_js x1173
    type tags =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1177 : Ojs.t) -> intf_of_js __tags_of_js x1177
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1175 : __tags intf) -> intf_to_js __tags_to_js x1175
    let (get_length : 'tags this -> float) =
      fun (x1179 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1179) "length")
    let (contains : 'tags this -> string:string -> bool) =
      fun (x1182 : 'tags this) ->
        fun ~string:(x1181 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1182) "contains"
               [|(Ojs.string_to_js x1181)|])
    let (item : 'tags this -> index:float -> string or_null) =
      fun (x1185 : 'tags this) ->
        fun ~index:(x1184 : float) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x1185) "item"
               [|(Ojs.float_to_js x1184)|])
    let (get : 'tags this -> float -> string) =
      fun (x1188 : 'tags this) ->
        fun (x1190 : float) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x1188)
               (Ojs.float_to_js x1190))
    let (set : 'tags this -> float -> string -> unit) =
      fun (x1191 : 'tags this) ->
        fun (x1193 : float) ->
          fun (x1194 : string) ->
            Ojs.set_prop (this_to_js Obj.magic x1191) (Ojs.float_to_js x1193)
              (Ojs.string_to_js x1194)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMStringList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "DOMStringList") [||])
  end
module rec
  AnonymousInterface44:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBCursor.t
                         val set_prototype : t -> IDBCursor.t -> unit
                         val create : t -> IDBCursor.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1196 : Ojs.t) -> x1196
    and t_to_js : t -> Ojs.t = fun (x1195 : Ojs.t) -> x1195
    let (get_prototype : t -> IDBCursor.t) =
      fun (x1197 : t) ->
        IDBCursor.t_of_js (Ojs.get_prop_ascii (t_to_js x1197) "prototype")
    let (set_prototype : t -> IDBCursor.t -> unit) =
      fun (x1198 : t) ->
        fun (x1199 : IDBCursor.t) ->
          Ojs.set_prop_ascii (t_to_js x1198) "prototype"
            (IDBCursor.t_to_js x1199)
    let (create : t -> IDBCursor.t) =
      fun (x1200 : t) -> IDBCursor.t_of_js (Ojs.new_obj (t_to_js x1200) [||])
  end
 and
  AnonymousInterface45:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBCursorWithValue.t
                         val set_prototype :
                           t -> IDBCursorWithValue.t -> unit
                         val create : t -> IDBCursorWithValue.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1202 : Ojs.t) -> x1202
    and t_to_js : t -> Ojs.t = fun (x1201 : Ojs.t) -> x1201
    let (get_prototype : t -> IDBCursorWithValue.t) =
      fun (x1203 : t) ->
        IDBCursorWithValue.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1203) "prototype")
    let (set_prototype : t -> IDBCursorWithValue.t -> unit) =
      fun (x1204 : t) ->
        fun (x1205 : IDBCursorWithValue.t) ->
          Ojs.set_prop_ascii (t_to_js x1204) "prototype"
            (IDBCursorWithValue.t_to_js x1205)
    let (create : t -> IDBCursorWithValue.t) =
      fun (x1206 : t) ->
        IDBCursorWithValue.t_of_js (Ojs.new_obj (t_to_js x1206) [||])
  end and
       AnonymousInterface46:sig
                              type t = private Ojs.t
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val get_prototype : t -> IDBDatabase.t
                              val set_prototype : t -> IDBDatabase.t -> unit
                              val create : t -> IDBDatabase.t
                            end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x1208 : Ojs.t) -> x1208
         and t_to_js : t -> Ojs.t = fun (x1207 : Ojs.t) -> x1207
         let (get_prototype : t -> IDBDatabase.t) =
           fun (x1209 : t) ->
             IDBDatabase.t_of_js
               (Ojs.get_prop_ascii (t_to_js x1209) "prototype")
         let (set_prototype : t -> IDBDatabase.t -> unit) =
           fun (x1210 : t) ->
             fun (x1211 : IDBDatabase.t) ->
               Ojs.set_prop_ascii (t_to_js x1210) "prototype"
                 (IDBDatabase.t_to_js x1211)
         let (create : t -> IDBDatabase.t) =
           fun (x1212 : t) ->
             IDBDatabase.t_of_js (Ojs.new_obj (t_to_js x1212) [||])
       end and
            AnonymousInterface48:sig
                                   type t = private Ojs.t
                                   val t_to_js : t -> Ojs.t
                                   val t_of_js : Ojs.t -> t
                                   val get_prototype : t -> IDBIndex.t
                                   val set_prototype :
                                     t -> IDBIndex.t -> unit
                                   val create : t -> IDBIndex.t
                                 end =
            struct
              type t = Ojs.t
              let rec t_of_js : Ojs.t -> t = fun (x1214 : Ojs.t) -> x1214
              and t_to_js : t -> Ojs.t = fun (x1213 : Ojs.t) -> x1213
              let (get_prototype : t -> IDBIndex.t) =
                fun (x1215 : t) ->
                  IDBIndex.t_of_js
                    (Ojs.get_prop_ascii (t_to_js x1215) "prototype")
              let (set_prototype : t -> IDBIndex.t -> unit) =
                fun (x1216 : t) ->
                  fun (x1217 : IDBIndex.t) ->
                    Ojs.set_prop_ascii (t_to_js x1216) "prototype"
                      (IDBIndex.t_to_js x1217)
              let (create : t -> IDBIndex.t) =
                fun (x1218 : t) ->
                  IDBIndex.t_of_js (Ojs.new_obj (t_to_js x1218) [||])
            end and
                 AnonymousInterface50:sig
                                        type t = private Ojs.t
                                        val t_to_js : t -> Ojs.t
                                        val t_of_js : Ojs.t -> t
                                        val get_prototype :
                                          t -> IDBObjectStore.t
                                        val set_prototype :
                                          t -> IDBObjectStore.t -> unit
                                        val create : t -> IDBObjectStore.t
                                      end =
                 struct
                   type t = Ojs.t
                   let rec t_of_js : Ojs.t -> t =
                     fun (x1220 : Ojs.t) -> x1220
                   and t_to_js : t -> Ojs.t = fun (x1219 : Ojs.t) -> x1219
                   let (get_prototype : t -> IDBObjectStore.t) =
                     fun (x1221 : t) ->
                       IDBObjectStore.t_of_js
                         (Ojs.get_prop_ascii (t_to_js x1221) "prototype")
                   let (set_prototype : t -> IDBObjectStore.t -> unit) =
                     fun (x1222 : t) ->
                       fun (x1223 : IDBObjectStore.t) ->
                         Ojs.set_prop_ascii (t_to_js x1222) "prototype"
                           (IDBObjectStore.t_to_js x1223)
                   let (create : t -> IDBObjectStore.t) =
                     fun (x1224 : t) ->
                       IDBObjectStore.t_of_js
                         (Ojs.new_obj (t_to_js x1224) [||])
                 end and
                      AnonymousInterface52:sig
                                             type t = private Ojs.t
                                             val t_to_js : t -> Ojs.t
                                             val t_of_js : Ojs.t -> t
                                             val get_prototype :
                                               t -> IDBRequest.t_0
                                             val set_prototype :
                                               t -> IDBRequest.t_0 -> unit
                                             val create : t -> IDBRequest.t_0
                                           end =
                      struct
                        type t = Ojs.t
                        let rec t_of_js : Ojs.t -> t =
                          fun (x1226 : Ojs.t) -> x1226
                        and t_to_js : t -> Ojs.t =
                          fun (x1225 : Ojs.t) -> x1225
                        let (get_prototype : t -> IDBRequest.t_0) =
                          fun (x1227 : t) ->
                            IDBRequest.t_0_of_js
                              (Ojs.get_prop_ascii (t_to_js x1227) "prototype")
                        let (set_prototype : t -> IDBRequest.t_0 -> unit) =
                          fun (x1228 : t) ->
                            fun (x1229 : IDBRequest.t_0) ->
                              Ojs.set_prop_ascii (t_to_js x1228) "prototype"
                                (IDBRequest.t_0_to_js x1229)
                        let (create : t -> IDBRequest.t_0) =
                          fun (x1230 : t) ->
                            IDBRequest.t_0_of_js
                              (Ojs.new_obj (t_to_js x1230) [||])
                      end and
                           AnonymousInterface53:sig
                                                  type t = private Ojs.t
                                                  val t_to_js : t -> Ojs.t
                                                  val t_of_js : Ojs.t -> t
                                                  val get_prototype :
                                                    t -> IDBTransaction.t
                                                  val set_prototype :
                                                    t ->
                                                      IDBTransaction.t ->
                                                        unit
                                                  val create :
                                                    t -> IDBTransaction.t
                                                end =
                           struct
                             type t = Ojs.t
                             let rec t_of_js : Ojs.t -> t =
                               fun (x1232 : Ojs.t) -> x1232
                             and t_to_js : t -> Ojs.t =
                               fun (x1231 : Ojs.t) -> x1231
                             let (get_prototype : t -> IDBTransaction.t) =
                               fun (x1233 : t) ->
                                 IDBTransaction.t_of_js
                                   (Ojs.get_prop_ascii (t_to_js x1233)
                                      "prototype")
                             let (set_prototype :
                               t -> IDBTransaction.t -> unit) =
                               fun (x1234 : t) ->
                                 fun (x1235 : IDBTransaction.t) ->
                                   Ojs.set_prop_ascii (t_to_js x1234)
                                     "prototype"
                                     (IDBTransaction.t_to_js x1235)
                             let (create : t -> IDBTransaction.t) =
                               fun (x1236 : t) ->
                                 IDBTransaction.t_of_js
                                   (Ojs.new_obj (t_to_js x1236) [||])
                           end and
                                IDBCursor:sig
                                            type t = [ `IDBCursor ] intf
                                            type t_0 = t
                                            [@@@js.stop ]
                                            type tags = [ `IDBCursor ]
                                            type tags_0 = tags
                                            [@@@js.start ]
                                            [@@@js.implem
                                              type tags = [ `IDBCursor ]
                                              type tags_0 = tags]
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [> `IDBCursor ]
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val t_0_to_js : t_0 -> Ojs.t
                                            val t_0_of_js : Ojs.t -> t_0
                                            val get_direction :
                                              'tags this ->
                                                IDBCursorDirection.t
                                            val get_key :
                                              'tags this -> IDBValidKey.t
                                            val get_primaryKey :
                                              'tags this -> IDBValidKey.t
                                            val get_request :
                                              'tags this -> IDBRequest.t_0
                                            val get_source :
                                              'tags this ->
                                                (IDBIndex.t,
                                                  IDBObjectStore.t) union2
                                            val advance :
                                              'tags this ->
                                                count:float -> unit
                                            val continue :
                                              'tags this ->
                                                ?key:IDBValidKey.t ->
                                                  unit -> unit
                                            val continuePrimaryKey :
                                              'tags this ->
                                                key:IDBValidKey.t ->
                                                  primaryKey:IDBValidKey.t ->
                                                    unit
                                            val delete :
                                              'tags this ->
                                                never or_undefined
                                                  IDBRequest.t
                                            val update :
                                              'tags this ->
                                                value:any ->
                                                  IDBValidKey.t IDBRequest.t
                                            val cast_from : 'tags this -> t
                                            val prototype : unit -> t
                                            val create : unit -> t
                                          end =
                                struct
                                  type t = [ `IDBCursor ] intf
                                  let rec t_of_js : Ojs.t -> t = Obj.magic
                                  and t_to_js : t -> Ojs.t = Obj.magic
                                  type t_0 = t
                                  let rec t_0_of_js : Ojs.t -> t_0 =
                                    fun (x1238 : Ojs.t) -> t_of_js x1238
                                  and t_0_to_js : t_0 -> Ojs.t =
                                    fun (x1237 : t) -> t_to_js x1237
                                  type tags = [ `IDBCursor ]
                                  type tags_0 = tags
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `IDBCursor ]
                                  let rec this_of_js :
                                    'tags .
                                      (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                                    = fun (type __tags) ->
                                    fun (__tags_of_js : Ojs.t -> __tags) ->
                                      fun (x1241 : Ojs.t) ->
                                        intf_of_js __tags_of_js x1241
                                  and this_to_js :
                                    'tags .
                                      ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                                    = fun (type __tags) ->
                                    fun (__tags_to_js : __tags -> Ojs.t) ->
                                      fun (x1239 : __tags intf) ->
                                        intf_to_js __tags_to_js x1239
                                  let (get_direction :
                                    'tags this -> IDBCursorDirection.t) =
                                    fun (x1243 : 'tags this) ->
                                      IDBCursorDirection.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1243)
                                           "direction")
                                  let (get_key : 'tags this -> IDBValidKey.t)
                                    =
                                    fun (x1245 : 'tags this) ->
                                      IDBValidKey.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1245) "key")
                                  let (get_primaryKey :
                                    'tags this -> IDBValidKey.t) =
                                    fun (x1247 : 'tags this) ->
                                      IDBValidKey.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1247)
                                           "primaryKey")
                                  let (get_request :
                                    'tags this -> IDBRequest.t_0) =
                                    fun (x1249 : 'tags this) ->
                                      IDBRequest.t_0_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1249)
                                           "request")
                                  let (get_source :
                                    'tags this ->
                                      (IDBIndex.t, IDBObjectStore.t) union2)
                                    =
                                    fun (x1251 : 'tags this) ->
                                      union2_of_js IDBIndex.t_of_js
                                        IDBObjectStore.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x1251)
                                           "source")
                                  let (advance :
                                    'tags this -> count:float -> unit) =
                                    fun (x1256 : 'tags this) ->
                                      fun ~count:(x1255 : float) ->
                                        ignore
                                          (Ojs.call
                                             (this_to_js Obj.magic x1256)
                                             "advance"
                                             [|(Ojs.float_to_js x1255)|])
                                  let (continue :
                                    'tags this ->
                                      ?key:IDBValidKey.t -> unit -> unit)
                                    =
                                    fun (x1261 : 'tags this) ->
                                      fun ?key:(x1258 : IDBValidKey.t option)
                                        ->
                                        fun () ->
                                          ignore
                                            (let x1263 =
                                               this_to_js Obj.magic x1261 in
                                             Ojs.call
                                               (Ojs.get_prop_ascii x1263
                                                  "continue") "apply"
                                               [|x1263;((let x1259 =
                                                           Ojs.new_obj
                                                             (Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Array") 
                                                             [||] in
                                                         (match x1258 with
                                                          | Some x1260 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x1259
                                                                   "push"
                                                                   [|(
                                                                    IDBValidKey.t_to_js
                                                                    x1260)|])
                                                          | None -> ());
                                                         x1259))|])
                                  let (continuePrimaryKey :
                                    'tags this ->
                                      key:IDBValidKey.t ->
                                        primaryKey:IDBValidKey.t -> unit)
                                    =
                                    fun (x1266 : 'tags this) ->
                                      fun ~key:(x1264 : IDBValidKey.t) ->
                                        fun
                                          ~primaryKey:(x1265 : IDBValidKey.t)
                                          ->
                                          ignore
                                            (Ojs.call
                                               (this_to_js Obj.magic x1266)
                                               "continuePrimaryKey"
                                               [|(IDBValidKey.t_to_js x1264);(
                                                 IDBValidKey.t_to_js x1265)|])
                                  let (delete :
                                    'tags this ->
                                      never or_undefined IDBRequest.t)
                                    =
                                    fun (x1268 : 'tags this) ->
                                      IDBRequest.t_of_js
                                        (fun (x1270 : Ojs.t) ->
                                           or_undefined_of_js never_of_js
                                             x1270)
                                        (Ojs.call
                                           (this_to_js Obj.magic x1268)
                                           "delete" [||])
                                  let (update :
                                    'tags this ->
                                      value:any -> IDBValidKey.t IDBRequest.t)
                                    =
                                    fun (x1273 : 'tags this) ->
                                      fun ~value:(x1272 : any) ->
                                        IDBRequest.t_of_js
                                          IDBValidKey.t_of_js
                                          (Ojs.call
                                             (this_to_js Obj.magic x1273)
                                             "update" [|(any_to_js x1272)|])
                                  let cast_from = Obj.magic
                                  let (prototype : unit -> t) =
                                    fun () ->
                                      t_of_js
                                        (Ojs.get_prop_ascii
                                           (Ojs.get_prop_ascii Ojs.global
                                              "IDBCursor") "prototype")
                                  let (create : unit -> t) =
                                    fun () ->
                                      t_of_js
                                        (Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "IDBCursor") [||])
                                end and
                                     IDBCursorWithValue:sig
                                                          type t =
                                                            [ `IDBCursor 
                                                            | `IDBCursorWithValue
                                                                ]
                                                              intf
                                                          type t_0 = t
                                                          [@@@js.stop ]
                                                          type tags =
                                                            [ `IDBCursor 
                                                            | `IDBCursorWithValue
                                                                ]
                                                          type tags_0 = tags
                                                          [@@@js.start ]
                                                          [@@@js.implem
                                                            type tags =
                                                              [ `IDBCursor 
                                                              | `IDBCursorWithValue
                                                                  ]
                                                            type tags_0 =
                                                              tags]
                                                          type 'tags this =
                                                            'tags intf
                                                             constraint 
                                                              'tags =
                                                              [>
                                                                `IDBCursorWithValue
                                                                  ]
                                                          val t_to_js :
                                                            t -> Ojs.t
                                                          val t_of_js :
                                                            Ojs.t -> t
                                                          val t_0_to_js :
                                                            t_0 -> Ojs.t
                                                          val t_0_of_js :
                                                            Ojs.t -> t_0
                                                          val get_value :
                                                            'tags this -> any
                                                          val cast_from :
                                                            'tags this -> t
                                                          val prototype :
                                                            unit -> t
                                                          val create :
                                                            unit -> t
                                                        end =
                                     struct
                                       type t =
                                         [ `IDBCursor 
                                         | `IDBCursorWithValue ] intf
                                       let rec t_of_js : Ojs.t -> t =
                                         Obj.magic
                                       and t_to_js : t -> Ojs.t = Obj.magic
                                       type t_0 = t
                                       let rec t_0_of_js : Ojs.t -> t_0 =
                                         fun (x1277 : Ojs.t) -> t_of_js x1277
                                       and t_0_to_js : t_0 -> Ojs.t =
                                         fun (x1276 : t) -> t_to_js x1276
                                       type tags =
                                         [ `IDBCursor 
                                         | `IDBCursorWithValue ]
                                       type tags_0 = tags
                                       type 'tags this =
                                         'tags intf constraint 'tags =
                                                     [> `IDBCursorWithValue ]
                                       let rec this_of_js :
                                         'tags .
                                           (Ojs.t -> 'tags) ->
                                             Ojs.t -> 'tags this
                                         = fun (type __tags) ->
                                         fun (__tags_of_js : Ojs.t -> __tags)
                                           ->
                                           fun (x1280 : Ojs.t) ->
                                             intf_of_js __tags_of_js x1280
                                       and this_to_js :
                                         'tags .
                                           ('tags -> Ojs.t) ->
                                             'tags this -> Ojs.t
                                         = fun (type __tags) ->
                                         fun (__tags_to_js : __tags -> Ojs.t)
                                           ->
                                           fun (x1278 : __tags intf) ->
                                             intf_to_js __tags_to_js x1278
                                       let (get_value : 'tags this -> any) =
                                         fun (x1282 : 'tags this) ->
                                           any_of_js
                                             (Ojs.get_prop_ascii
                                                (this_to_js Obj.magic x1282)
                                                "value")
                                       let cast_from = Obj.magic
                                       let (prototype : unit -> t) =
                                         fun () ->
                                           t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global
                                                   "IDBCursorWithValue")
                                                "prototype")
                                       let (create : unit -> t) =
                                         fun () ->
                                           t_of_js
                                             (Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global
                                                   "IDBCursorWithValue") 
                                                [||])
                                     end and
                                          IDBDatabase:sig
                                                        type t =
                                                          [ `EventTarget 
                                                          | `IDBDatabase ]
                                                            intf
                                                        type t_0 = t
                                                        [@@@js.stop ]
                                                        type tags =
                                                          [ `EventTarget 
                                                          | `IDBDatabase ]
                                                        type tags_0 = tags
                                                        [@@@js.start ]
                                                        [@@@js.implem
                                                          type tags =
                                                            [ `EventTarget 
                                                            | `IDBDatabase ]
                                                          type tags_0 = tags]
                                                        type 'tags this =
                                                          'tags intf
                                                                    constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBDatabase
                                                                    ]
                                                        val t_to_js :
                                                          t -> Ojs.t
                                                        val t_of_js :
                                                          Ojs.t -> t
                                                        val t_0_to_js :
                                                          t_0 -> Ojs.t
                                                        val t_0_of_js :
                                                          Ojs.t -> t_0
                                                        val get_name :
                                                          'tags this ->
                                                            string
                                                        val
                                                          get_objectStoreNames
                                                          :
                                                          'tags this ->
                                                            DOMStringList.t
                                                        val get_onabort :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null
                                                        val set_onabort :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null -> 
                                                              unit
                                                        val get_onclose :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null
                                                        val set_onclose :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null -> 
                                                              unit
                                                        val get_onerror :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null
                                                        val set_onerror :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:Event.t ->
                                                                 any)
                                                              or_null -> 
                                                              unit
                                                        val
                                                          get_onversionchange
                                                          :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:IDBVersionChangeEvent.t
                                                                 -> any)
                                                              or_null
                                                        val
                                                          set_onversionchange
                                                          :
                                                          'tags this ->
                                                            (this:t ->
                                                               ev:IDBVersionChangeEvent.t
                                                                 -> any)
                                                              or_null -> 
                                                              unit
                                                        val get_version :
                                                          'tags this -> float
                                                        val close :
                                                          'tags this -> unit
                                                        val createObjectStore
                                                          :
                                                          'tags this ->
                                                            name:string ->
                                                              ?options:IDBObjectStoreParameters.t
                                                                ->
                                                                unit ->
                                                                  IDBObjectStore.t
                                                        val deleteObjectStore
                                                          :
                                                          'tags this ->
                                                            name:string ->
                                                              unit
                                                        val transaction :
                                                          'tags this ->
                                                            storeNames:string
                                                              list or_string
                                                              ->
                                                              ?mode:IDBTransactionMode.t
                                                                ->
                                                                unit ->
                                                                  IDBTransaction.t
                                                        val addEventListener
                                                          :
                                                          'tags this ->
                                                            type_:'K ->
                                                              listener:(
                                                                this:t ->
                                                                  ev:any ->
                                                                    any)
                                                                ->
                                                                ?options:AddEventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val addEventListener'
                                                          :
                                                          'tags this ->
                                                            type_:string ->
                                                              listener:EventListenerOrEventListenerObject.t
                                                                ->
                                                                ?options:AddEventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val
                                                          removeEventListener
                                                          :
                                                          'tags this ->
                                                            type_:'K ->
                                                              listener:(
                                                                this:t ->
                                                                  ev:any ->
                                                                    any)
                                                                ->
                                                                ?options:EventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val
                                                          removeEventListener'
                                                          :
                                                          'tags this ->
                                                            type_:string ->
                                                              listener:EventListenerOrEventListenerObject.t
                                                                ->
                                                                ?options:EventListenerOptions.t
                                                                  or_boolean
                                                                  ->
                                                                  unit ->
                                                                    unit
                                                        val transaction' :
                                                          'tags this ->
                                                            storeNames:string
                                                              Iterable.t_1
                                                              or_string ->
                                                              ?mode:IDBTransactionMode.t
                                                                ->
                                                                unit ->
                                                                  IDBTransaction.t
                                                        val cast_from :
                                                          'tags this -> t
                                                        val prototype :
                                                          unit -> t
                                                        val create :
                                                          unit -> t
                                                      end =
                                          struct
                                            type t =
                                              [ `EventTarget 
                                              | `IDBDatabase ] intf
                                            let rec t_of_js : Ojs.t -> t =
                                              Obj.magic
                                            and t_to_js : t -> Ojs.t =
                                              Obj.magic
                                            type t_0 = t
                                            let rec t_0_of_js : Ojs.t -> t_0
                                              =
                                              fun (x1285 : Ojs.t) ->
                                                t_of_js x1285
                                            and t_0_to_js : t_0 -> Ojs.t =
                                              fun (x1284 : t) ->
                                                t_to_js x1284
                                            type tags =
                                              [ `EventTarget 
                                              | `IDBDatabase ]
                                            type tags_0 = tags
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [> `IDBDatabase ]
                                            let rec this_of_js :
                                              'tags .
                                                (Ojs.t -> 'tags) ->
                                                  Ojs.t -> 'tags this
                                              = fun (type __tags) ->
                                              fun
                                                (__tags_of_js :
                                                  Ojs.t -> __tags)
                                                ->
                                                fun (x1288 : Ojs.t) ->
                                                  intf_of_js __tags_of_js
                                                    x1288
                                            and this_to_js :
                                              'tags .
                                                ('tags -> Ojs.t) ->
                                                  'tags this -> Ojs.t
                                              = fun (type __tags) ->
                                              fun
                                                (__tags_to_js :
                                                  __tags -> Ojs.t)
                                                ->
                                                fun (x1286 : __tags intf) ->
                                                  intf_to_js __tags_to_js
                                                    x1286
                                            let (get_name :
                                              'tags this -> string) =
                                              fun (x1290 : 'tags this) ->
                                                Ojs.string_of_js
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1290) "name")
                                            let (get_objectStoreNames :
                                              'tags this -> DOMStringList.t)
                                              =
                                              fun (x1292 : 'tags this) ->
                                                DOMStringList.t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1292)
                                                     "objectStoreNames")
                                            let (get_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null)
                                              =
                                              fun (x1294 : 'tags this) ->
                                                or_null_of_js
                                                  (fun (x1296 : Ojs.t) ->
                                                     fun ~this:(x1297 : t) ->
                                                       fun
                                                         ~ev:(x1298 :
                                                               Event.t)
                                                         ->
                                                         any_of_js
                                                           (Ojs.apply x1296
                                                              [|(t_to_js
                                                                   x1297);(
                                                                Event.t_to_js
                                                                  x1298)|]))
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1294) "onabort")
                                            let (set_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit)
                                              =
                                              fun (x1299 : 'tags this) ->
                                                fun
                                                  (x1300 :
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null)
                                                  ->
                                                  Ojs.set_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x1299) "onabort"
                                                    (or_null_to_js
                                                       (fun
                                                          (x1301 :
                                                            this:t ->
                                                              ev:Event.t ->
                                                                any)
                                                          ->
                                                          Ojs.fun_to_js 2
                                                            (fun
                                                               (x1302 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1303 :
                                                                   Ojs.t)
                                                                 ->
                                                                 any_to_js
                                                                   (x1301
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1302)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1303))))
                                                       x1300)
                                            let (get_onclose :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null)
                                              =
                                              fun (x1305 : 'tags this) ->
                                                or_null_of_js
                                                  (fun (x1307 : Ojs.t) ->
                                                     fun ~this:(x1308 : t) ->
                                                       fun
                                                         ~ev:(x1309 :
                                                               Event.t)
                                                         ->
                                                         any_of_js
                                                           (Ojs.apply x1307
                                                              [|(t_to_js
                                                                   x1308);(
                                                                Event.t_to_js
                                                                  x1309)|]))
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1305) "onclose")
                                            let (set_onclose :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit)
                                              =
                                              fun (x1310 : 'tags this) ->
                                                fun
                                                  (x1311 :
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null)
                                                  ->
                                                  Ojs.set_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x1310) "onclose"
                                                    (or_null_to_js
                                                       (fun
                                                          (x1312 :
                                                            this:t ->
                                                              ev:Event.t ->
                                                                any)
                                                          ->
                                                          Ojs.fun_to_js 2
                                                            (fun
                                                               (x1313 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1314 :
                                                                   Ojs.t)
                                                                 ->
                                                                 any_to_js
                                                                   (x1312
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1313)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1314))))
                                                       x1311)
                                            let (get_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null)
                                              =
                                              fun (x1316 : 'tags this) ->
                                                or_null_of_js
                                                  (fun (x1318 : Ojs.t) ->
                                                     fun ~this:(x1319 : t) ->
                                                       fun
                                                         ~ev:(x1320 :
                                                               Event.t)
                                                         ->
                                                         any_of_js
                                                           (Ojs.apply x1318
                                                              [|(t_to_js
                                                                   x1319);(
                                                                Event.t_to_js
                                                                  x1320)|]))
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1316) "onerror")
                                            let (set_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit)
                                              =
                                              fun (x1321 : 'tags this) ->
                                                fun
                                                  (x1322 :
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null)
                                                  ->
                                                  Ojs.set_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x1321) "onerror"
                                                    (or_null_to_js
                                                       (fun
                                                          (x1323 :
                                                            this:t ->
                                                              ev:Event.t ->
                                                                any)
                                                          ->
                                                          Ojs.fun_to_js 2
                                                            (fun
                                                               (x1324 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1325 :
                                                                   Ojs.t)
                                                                 ->
                                                                 any_to_js
                                                                   (x1323
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1324)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1325))))
                                                       x1322)
                                            let (get_onversionchange :
                                              'tags this ->
                                                (this:t ->
                                                   ev:IDBVersionChangeEvent.t
                                                     -> any)
                                                  or_null)
                                              =
                                              fun (x1327 : 'tags this) ->
                                                or_null_of_js
                                                  (fun (x1329 : Ojs.t) ->
                                                     fun ~this:(x1330 : t) ->
                                                       fun
                                                         ~ev:(x1331 :
                                                               IDBVersionChangeEvent.t)
                                                         ->
                                                         any_of_js
                                                           (Ojs.apply x1329
                                                              [|(t_to_js
                                                                   x1330);(
                                                                IDBVersionChangeEvent.t_to_js
                                                                  x1331)|]))
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1327)
                                                     "onversionchange")
                                            let (set_onversionchange :
                                              'tags this ->
                                                (this:t ->
                                                   ev:IDBVersionChangeEvent.t
                                                     -> any)
                                                  or_null -> unit)
                                              =
                                              fun (x1332 : 'tags this) ->
                                                fun
                                                  (x1333 :
                                                    (this:t ->
                                                       ev:IDBVersionChangeEvent.t
                                                         -> any)
                                                      or_null)
                                                  ->
                                                  Ojs.set_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x1332)
                                                    "onversionchange"
                                                    (or_null_to_js
                                                       (fun
                                                          (x1334 :
                                                            this:t ->
                                                              ev:IDBVersionChangeEvent.t
                                                                -> any)
                                                          ->
                                                          Ojs.fun_to_js 2
                                                            (fun
                                                               (x1335 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1336 :
                                                                   Ojs.t)
                                                                 ->
                                                                 any_to_js
                                                                   (x1334
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1335)
                                                                    ~ev:(
                                                                    IDBVersionChangeEvent.t_of_js
                                                                    x1336))))
                                                       x1333)
                                            let (get_version :
                                              'tags this -> float) =
                                              fun (x1338 : 'tags this) ->
                                                Ojs.float_of_js
                                                  (Ojs.get_prop_ascii
                                                     (this_to_js Obj.magic
                                                        x1338) "version")
                                            let (close : 'tags this -> unit)
                                              =
                                              fun (x1340 : 'tags this) ->
                                                ignore
                                                  (Ojs.call
                                                     (this_to_js Obj.magic
                                                        x1340) "close" 
                                                     [||])
                                            let (createObjectStore :
                                              'tags this ->
                                                name:string ->
                                                  ?options:IDBObjectStoreParameters.t
                                                    ->
                                                    unit -> IDBObjectStore.t)
                                              =
                                              fun (x1346 : 'tags this) ->
                                                fun ~name:(x1342 : string) ->
                                                  fun
                                                    ?options:(x1343 :
                                                               IDBObjectStoreParameters.t
                                                                 option)
                                                    ->
                                                    fun () ->
                                                      IDBObjectStore.t_of_js
                                                        (let x1348 =
                                                           this_to_js
                                                             Obj.magic x1346 in
                                                         Ojs.call
                                                           (Ojs.get_prop_ascii
                                                              x1348
                                                              "createObjectStore")
                                                           "apply"
                                                           [|x1348;((
                                                             let x1344 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x1344
                                                                  "push"
                                                                  [|(
                                                                    Ojs.string_to_js
                                                                    x1342)|]);
                                                             (match x1343
                                                              with
                                                              | Some x1345 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x1344
                                                                    "push"
                                                                    [|(
                                                                    IDBObjectStoreParameters.t_to_js
                                                                    x1345)|])
                                                              | None -> ());
                                                             x1344))|])
                                            let (deleteObjectStore :
                                              'tags this ->
                                                name:string -> unit)
                                              =
                                              fun (x1350 : 'tags this) ->
                                                fun ~name:(x1349 : string) ->
                                                  ignore
                                                    (Ojs.call
                                                       (this_to_js Obj.magic
                                                          x1350)
                                                       "deleteObjectStore"
                                                       [|(Ojs.string_to_js
                                                            x1349)|])
                                            let (transaction :
                                              'tags this ->
                                                storeNames:string list
                                                  or_string ->
                                                  ?mode:IDBTransactionMode.t
                                                    ->
                                                    unit -> IDBTransaction.t)
                                              =
                                              fun (x1358 : 'tags this) ->
                                                fun
                                                  ~storeNames:(x1352 :
                                                                string list
                                                                  or_string)
                                                  ->
                                                  fun
                                                    ?mode:(x1353 :
                                                            IDBTransactionMode.t
                                                              option)
                                                    ->
                                                    fun () ->
                                                      IDBTransaction.t_of_js
                                                        (let x1360 =
                                                           this_to_js
                                                             Obj.magic x1358 in
                                                         Ojs.call
                                                           (Ojs.get_prop_ascii
                                                              x1360
                                                              "transaction")
                                                           "apply"
                                                           [|x1360;((
                                                             let x1354 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x1354
                                                                  "push"
                                                                  [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1356 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1356)
                                                                    x1352)|]);
                                                             (match x1353
                                                              with
                                                              | Some x1355 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x1354
                                                                    "push"
                                                                    [|(
                                                                    IDBTransactionMode.t_to_js
                                                                    x1355)|])
                                                              | None -> ());
                                                             x1354))|])
                                            let (addEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x1369 : 'tags this) ->
                                                fun ~type_:(x1361 : 'K) ->
                                                  fun
                                                    ~listener:(x1362 :
                                                                this:t ->
                                                                  ev:any ->
                                                                    any)
                                                    ->
                                                    fun
                                                      ?options:(x1363 :
                                                                 AddEventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x1371 =
                                                             this_to_js
                                                               Obj.magic
                                                               x1369 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x1371
                                                                "addEventListener")
                                                             "apply"
                                                             [|x1371;((
                                                               let x1364 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x1364
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1361)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x1364
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1367 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1368 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1362
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1367)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1368))))|]);
                                                               (match x1363
                                                                with
                                                                | Some x1365
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1364
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1365)|])
                                                                | None -> ());
                                                               x1364))|])
                                            let (addEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x1378 : 'tags this) ->
                                                fun ~type_:(x1372 : string)
                                                  ->
                                                  fun
                                                    ~listener:(x1373 :
                                                                EventListenerOrEventListenerObject.t)
                                                    ->
                                                    fun
                                                      ?options:(x1374 :
                                                                 AddEventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x1380 =
                                                             this_to_js
                                                               Obj.magic
                                                               x1378 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x1380
                                                                "addEventListener")
                                                             "apply"
                                                             [|x1380;((
                                                               let x1375 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x1375
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1372)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x1375
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1373)|]);
                                                               (match x1374
                                                                with
                                                                | Some x1376
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1375
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1376)|])
                                                                | None -> ());
                                                               x1375))|])
                                            let (removeEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x1389 : 'tags this) ->
                                                fun ~type_:(x1381 : 'K) ->
                                                  fun
                                                    ~listener:(x1382 :
                                                                this:t ->
                                                                  ev:any ->
                                                                    any)
                                                    ->
                                                    fun
                                                      ?options:(x1383 :
                                                                 EventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x1391 =
                                                             this_to_js
                                                               Obj.magic
                                                               x1389 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x1391
                                                                "removeEventListener")
                                                             "apply"
                                                             [|x1391;((
                                                               let x1384 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x1384
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1381)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x1384
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1387 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1388 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1382
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1387)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1388))))|]);
                                                               (match x1383
                                                                with
                                                                | Some x1385
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1384
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1385)|])
                                                                | None -> ());
                                                               x1384))|])
                                            let (removeEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit)
                                              =
                                              fun (x1398 : 'tags this) ->
                                                fun ~type_:(x1392 : string)
                                                  ->
                                                  fun
                                                    ~listener:(x1393 :
                                                                EventListenerOrEventListenerObject.t)
                                                    ->
                                                    fun
                                                      ?options:(x1394 :
                                                                 EventListenerOptions.t
                                                                   or_boolean
                                                                   option)
                                                      ->
                                                      fun () ->
                                                        ignore
                                                          (let x1400 =
                                                             this_to_js
                                                               Obj.magic
                                                               x1398 in
                                                           Ojs.call
                                                             (Ojs.get_prop_ascii
                                                                x1400
                                                                "removeEventListener")
                                                             "apply"
                                                             [|x1400;((
                                                               let x1395 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x1395
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1392)|]);
                                                               ignore
                                                                 (Ojs.call
                                                                    x1395
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1393)|]);
                                                               (match x1394
                                                                with
                                                                | Some x1396
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1395
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1396)|])
                                                                | None -> ());
                                                               x1395))|])
                                            let (transaction' :
                                              'tags this ->
                                                storeNames:string
                                                  Iterable.t_1 or_string ->
                                                  ?mode:IDBTransactionMode.t
                                                    ->
                                                    unit -> IDBTransaction.t)
                                              =
                                              fun (x1407 : 'tags this) ->
                                                fun
                                                  ~storeNames:(x1401 :
                                                                string
                                                                  Iterable.t_1
                                                                  or_string)
                                                  ->
                                                  fun
                                                    ?mode:(x1402 :
                                                            IDBTransactionMode.t
                                                              option)
                                                    ->
                                                    fun () ->
                                                      IDBTransaction.t_of_js
                                                        (let x1409 =
                                                           this_to_js
                                                             Obj.magic x1407 in
                                                         Ojs.call
                                                           (Ojs.get_prop_ascii
                                                              x1409
                                                              "transaction")
                                                           "apply"
                                                           [|x1409;((
                                                             let x1403 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x1403
                                                                  "push"
                                                                  [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1405 :
                                                                    string
                                                                    Iterable.t_1)
                                                                    ->
                                                                    Iterable.t_1_to_js
                                                                    Ojs.string_to_js
                                                                    x1405)
                                                                    x1401)|]);
                                                             (match x1402
                                                              with
                                                              | Some x1404 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x1403
                                                                    "push"
                                                                    [|(
                                                                    IDBTransactionMode.t_to_js
                                                                    x1404)|])
                                                              | None -> ());
                                                             x1403))|])
                                            let cast_from = Obj.magic
                                            let (prototype : unit -> t) =
                                              fun () ->
                                                t_of_js
                                                  (Ojs.get_prop_ascii
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global
                                                        "IDBDatabase")
                                                     "prototype")
                                            let (create : unit -> t) =
                                              fun () ->
                                                t_of_js
                                                  (Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global
                                                        "IDBDatabase") 
                                                     [||])
                                          end and
                                               IDBIndex:sig
                                                          type t =
                                                            [ `IDBIndex ]
                                                              intf
                                                          type t_0 = t
                                                          [@@@js.stop ]
                                                          type tags =
                                                            [ `IDBIndex ]
                                                          type tags_0 = tags
                                                          [@@@js.start ]
                                                          [@@@js.implem
                                                            type tags =
                                                              [ `IDBIndex ]
                                                            type tags_0 =
                                                              tags]
                                                          type 'tags this =
                                                            'tags intf
                                                             constraint 
                                                              'tags =
                                                              [> `IDBIndex ]
                                                          val t_to_js :
                                                            t -> Ojs.t
                                                          val t_of_js :
                                                            Ojs.t -> t
                                                          val t_0_to_js :
                                                            t_0 -> Ojs.t
                                                          val t_0_of_js :
                                                            Ojs.t -> t_0
                                                          val get_keyPath :
                                                            'tags this ->
                                                              string list
                                                                or_string
                                                          val get_multiEntry
                                                            :
                                                            'tags this ->
                                                              bool
                                                          val get_name :
                                                            'tags this ->
                                                              string
                                                          val set_name :
                                                            'tags this ->
                                                              string -> unit
                                                          val get_objectStore
                                                            :
                                                            'tags this ->
                                                              IDBObjectStore.t
                                                          val get_unique :
                                                            'tags this ->
                                                              bool
                                                          val count :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2 ->
                                                                unit ->
                                                                  float
                                                                    IDBRequest.t
                                                          val get_ :
                                                            'tags this ->
                                                              query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2 ->
                                                                any
                                                                  IDBRequest.t
                                                          val getAll :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2
                                                                or_null ->
                                                                ?count:float
                                                                  ->
                                                                  unit ->
                                                                    any list
                                                                    IDBRequest.t
                                                          val getAllKeys :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2
                                                                or_null ->
                                                                ?count:float
                                                                  ->
                                                                  unit ->
                                                                    IDBValidKey.t
                                                                    list
                                                                    IDBRequest.t
                                                          val getKey :
                                                            'tags this ->
                                                              query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2 ->
                                                                IDBValidKey.t
                                                                  or_undefined
                                                                  IDBRequest.t
                                                          val openCursor :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2
                                                                or_null ->
                                                                ?direction:IDBCursorDirection.t
                                                                  ->
                                                                  unit ->
                                                                    IDBCursorWithValue.t
                                                                    or_null
                                                                    IDBRequest.t
                                                          val openKeyCursor :
                                                            'tags this ->
                                                              ?query:(
                                                                IDBKeyRange.t,
                                                                IDBValidKey.t)
                                                                union2
                                                                or_null ->
                                                                ?direction:IDBCursorDirection.t
                                                                  ->
                                                                  unit ->
                                                                    IDBCursor.t
                                                                    or_null
                                                                    IDBRequest.t
                                                          val cast_from :
                                                            'tags this -> t
                                                          val prototype :
                                                            unit -> t
                                                          val create :
                                                            unit -> t
                                                        end =
                                               struct
                                                 type t = [ `IDBIndex ] intf
                                                 let rec t_of_js : Ojs.t -> t
                                                   = Obj.magic
                                                 and t_to_js : t -> Ojs.t =
                                                   Obj.magic
                                                 type t_0 = t
                                                 let rec t_0_of_js :
                                                   Ojs.t -> t_0 =
                                                   fun (x1411 : Ojs.t) ->
                                                     t_of_js x1411
                                                 and t_0_to_js : t_0 -> Ojs.t
                                                   =
                                                   fun (x1410 : t) ->
                                                     t_to_js x1410
                                                 type tags = [ `IDBIndex ]
                                                 type tags_0 = tags
                                                 type 'tags this =
                                                   'tags intf constraint
                                                               'tags =
                                                               [> `IDBIndex ]
                                                 let rec this_of_js :
                                                   'tags .
                                                     (Ojs.t -> 'tags) ->
                                                       Ojs.t -> 'tags this
                                                   = fun (type __tags) ->
                                                   fun
                                                     (__tags_of_js :
                                                       Ojs.t -> __tags)
                                                     ->
                                                     fun (x1414 : Ojs.t) ->
                                                       intf_of_js
                                                         __tags_of_js x1414
                                                 and this_to_js :
                                                   'tags .
                                                     ('tags -> Ojs.t) ->
                                                       'tags this -> Ojs.t
                                                   = fun (type __tags) ->
                                                   fun
                                                     (__tags_to_js :
                                                       __tags -> Ojs.t)
                                                     ->
                                                     fun
                                                       (x1412 : __tags intf)
                                                       ->
                                                       intf_to_js
                                                         __tags_to_js x1412
                                                 let (get_keyPath :
                                                   'tags this ->
                                                     string list or_string)
                                                   =
                                                   fun (x1416 : 'tags this)
                                                     ->
                                                     or_string_of_js
                                                       (fun (x1418 : Ojs.t)
                                                          ->
                                                          Ojs.list_of_js
                                                            Ojs.string_of_js
                                                            x1418)
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1416)
                                                          "keyPath")
                                                 let (get_multiEntry :
                                                   'tags this -> bool) =
                                                   fun (x1420 : 'tags this)
                                                     ->
                                                     Ojs.bool_of_js
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1420)
                                                          "multiEntry")
                                                 let (get_name :
                                                   'tags this -> string) =
                                                   fun (x1422 : 'tags this)
                                                     ->
                                                     Ojs.string_of_js
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1422)
                                                          "name")
                                                 let (set_name :
                                                   'tags this ->
                                                     string -> unit)
                                                   =
                                                   fun (x1424 : 'tags this)
                                                     ->
                                                     fun (x1425 : string) ->
                                                       Ojs.set_prop_ascii
                                                         (this_to_js
                                                            Obj.magic x1424)
                                                         "name"
                                                         (Ojs.string_to_js
                                                            x1425)
                                                 let (get_objectStore :
                                                   'tags this ->
                                                     IDBObjectStore.t)
                                                   =
                                                   fun (x1427 : 'tags this)
                                                     ->
                                                     IDBObjectStore.t_of_js
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1427)
                                                          "objectStore")
                                                 let (get_unique :
                                                   'tags this -> bool) =
                                                   fun (x1429 : 'tags this)
                                                     ->
                                                     Ojs.bool_of_js
                                                       (Ojs.get_prop_ascii
                                                          (this_to_js
                                                             Obj.magic x1429)
                                                          "unique")
                                                 let (count :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       ->
                                                       unit ->
                                                         float IDBRequest.t)
                                                   =
                                                   fun (x1436 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1431 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  option)
                                                       ->
                                                       fun () ->
                                                         IDBRequest.t_of_js
                                                           Ojs.float_of_js
                                                           (let x1438 =
                                                              this_to_js
                                                                Obj.magic
                                                                x1436 in
                                                            Ojs.call
                                                              (Ojs.get_prop_ascii
                                                                 x1438
                                                                 "count")
                                                              "apply"
                                                              [|x1438;((
                                                                let x1432 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                (match x1431
                                                                 with
                                                                 | Some x1433
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1432
                                                                    "push"
                                                                    [|(
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1433)|])
                                                                 | None -> ());
                                                                x1432))|])
                                                 let (get_ :
                                                   'tags this ->
                                                     query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       -> any IDBRequest.t)
                                                   =
                                                   fun (x1443 : 'tags this)
                                                     ->
                                                     fun
                                                       ~query:(x1440 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                       ->
                                                       IDBRequest.t_of_js
                                                         any_of_js
                                                         (Ojs.call
                                                            (this_to_js
                                                               Obj.magic
                                                               x1443) "get"
                                                            [|(union2_to_js
                                                                 IDBKeyRange.t_to_js
                                                                 IDBValidKey.t_to_js
                                                                 x1440)|])
                                                 let (getAll :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       or_null ->
                                                       ?count:float ->
                                                         unit ->
                                                           any list
                                                             IDBRequest.t)
                                                   =
                                                   fun (x1454 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1446 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  or_null
                                                                  option)
                                                       ->
                                                       fun
                                                         ?count:(x1447 :
                                                                  float
                                                                    option)
                                                         ->
                                                         fun () ->
                                                           IDBRequest.t_of_js
                                                             (fun
                                                                (x1457 :
                                                                  Ojs.t)
                                                                ->
                                                                Ojs.list_of_js
                                                                  any_of_js
                                                                  x1457)
                                                             (let x1456 =
                                                                this_to_js
                                                                  Obj.magic
                                                                  x1454 in
                                                              Ojs.call
                                                                (Ojs.get_prop_ascii
                                                                   x1456
                                                                   "getAll")
                                                                "apply"
                                                                [|x1456;((
                                                                  let x1448 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  (match x1446
                                                                   with
                                                                   | 
                                                                   Some x1450
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1448
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1451 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1451)
                                                                    x1450)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1447
                                                                   with
                                                                   | 
                                                                   Some x1449
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1448
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1449)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1448))|])
                                                 let (getAllKeys :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       or_null ->
                                                       ?count:float ->
                                                         unit ->
                                                           IDBValidKey.t list
                                                             IDBRequest.t)
                                                   =
                                                   fun (x1467 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1459 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  or_null
                                                                  option)
                                                       ->
                                                       fun
                                                         ?count:(x1460 :
                                                                  float
                                                                    option)
                                                         ->
                                                         fun () ->
                                                           IDBRequest.t_of_js
                                                             (fun
                                                                (x1470 :
                                                                  Ojs.t)
                                                                ->
                                                                Ojs.list_of_js
                                                                  IDBValidKey.t_of_js
                                                                  x1470)
                                                             (let x1469 =
                                                                this_to_js
                                                                  Obj.magic
                                                                  x1467 in
                                                              Ojs.call
                                                                (Ojs.get_prop_ascii
                                                                   x1469
                                                                   "getAllKeys")
                                                                "apply"
                                                                [|x1469;((
                                                                  let x1461 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  (match x1459
                                                                   with
                                                                   | 
                                                                   Some x1463
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1461
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1464 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1464)
                                                                    x1463)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1460
                                                                   with
                                                                   | 
                                                                   Some x1462
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1461
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1462)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1461))|])
                                                 let (getKey :
                                                   'tags this ->
                                                     query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       ->
                                                       IDBValidKey.t
                                                         or_undefined
                                                         IDBRequest.t)
                                                   =
                                                   fun (x1475 : 'tags this)
                                                     ->
                                                     fun
                                                       ~query:(x1472 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                       ->
                                                       IDBRequest.t_of_js
                                                         (fun (x1477 : Ojs.t)
                                                            ->
                                                            or_undefined_of_js
                                                              IDBValidKey.t_of_js
                                                              x1477)
                                                         (Ojs.call
                                                            (this_to_js
                                                               Obj.magic
                                                               x1475)
                                                            "getKey"
                                                            [|(union2_to_js
                                                                 IDBKeyRange.t_to_js
                                                                 IDBValidKey.t_to_js
                                                                 x1472)|])
                                                 let (openCursor :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       or_null ->
                                                       ?direction:IDBCursorDirection.t
                                                         ->
                                                         unit ->
                                                           IDBCursorWithValue.t
                                                             or_null
                                                             IDBRequest.t)
                                                   =
                                                   fun (x1487 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1479 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  or_null
                                                                  option)
                                                       ->
                                                       fun
                                                         ?direction:(x1480 :
                                                                    IDBCursorDirection.t
                                                                    option)
                                                         ->
                                                         fun () ->
                                                           IDBRequest.t_of_js
                                                             (fun
                                                                (x1490 :
                                                                  Ojs.t)
                                                                ->
                                                                or_null_of_js
                                                                  IDBCursorWithValue.t_of_js
                                                                  x1490)
                                                             (let x1489 =
                                                                this_to_js
                                                                  Obj.magic
                                                                  x1487 in
                                                              Ojs.call
                                                                (Ojs.get_prop_ascii
                                                                   x1489
                                                                   "openCursor")
                                                                "apply"
                                                                [|x1489;((
                                                                  let x1481 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  (match x1479
                                                                   with
                                                                   | 
                                                                   Some x1483
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1481
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1484 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1484)
                                                                    x1483)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1480
                                                                   with
                                                                   | 
                                                                   Some x1482
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1481
                                                                    "push"
                                                                    [|(
                                                                    IDBCursorDirection.t_to_js
                                                                    x1482)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1481))|])
                                                 let (openKeyCursor :
                                                   'tags this ->
                                                     ?query:(IDBKeyRange.t,
                                                       IDBValidKey.t) union2
                                                       or_null ->
                                                       ?direction:IDBCursorDirection.t
                                                         ->
                                                         unit ->
                                                           IDBCursor.t
                                                             or_null
                                                             IDBRequest.t)
                                                   =
                                                   fun (x1500 : 'tags this)
                                                     ->
                                                     fun
                                                       ?query:(x1492 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2
                                                                  or_null
                                                                  option)
                                                       ->
                                                       fun
                                                         ?direction:(x1493 :
                                                                    IDBCursorDirection.t
                                                                    option)
                                                         ->
                                                         fun () ->
                                                           IDBRequest.t_of_js
                                                             (fun
                                                                (x1503 :
                                                                  Ojs.t)
                                                                ->
                                                                or_null_of_js
                                                                  IDBCursor.t_of_js
                                                                  x1503)
                                                             (let x1502 =
                                                                this_to_js
                                                                  Obj.magic
                                                                  x1500 in
                                                              Ojs.call
                                                                (Ojs.get_prop_ascii
                                                                   x1502
                                                                   "openKeyCursor")
                                                                "apply"
                                                                [|x1502;((
                                                                  let x1494 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                  (match x1492
                                                                   with
                                                                   | 
                                                                   Some x1496
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1494
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1497 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1497)
                                                                    x1496)|])
                                                                   | 
                                                                   None -> ());
                                                                  (match x1493
                                                                   with
                                                                   | 
                                                                   Some x1495
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1494
                                                                    "push"
                                                                    [|(
                                                                    IDBCursorDirection.t_to_js
                                                                    x1495)|])
                                                                   | 
                                                                   None -> ());
                                                                  x1494))|])
                                                 let cast_from = Obj.magic
                                                 let (prototype : unit -> t)
                                                   =
                                                   fun () ->
                                                     t_of_js
                                                       (Ojs.get_prop_ascii
                                                          (Ojs.get_prop_ascii
                                                             Ojs.global
                                                             "IDBIndex")
                                                          "prototype")
                                                 let (create : unit -> t) =
                                                   fun () ->
                                                     t_of_js
                                                       (Ojs.new_obj
                                                          (Ojs.get_prop_ascii
                                                             Ojs.global
                                                             "IDBIndex") 
                                                          [||])
                                               end and
                                                    IDBObjectStore:sig
                                                                    type t =
                                                                    [
                                                                    `IDBObjectStore
                                                                    ] intf
                                                                    type t_0 =
                                                                    t
                                                                    [@@@js.stop
                                                                    ]
                                                                    type tags =
                                                                    [
                                                                    `IDBObjectStore
                                                                    ]
                                                                    type tags_0 =
                                                                    tags
                                                                    [@@@js.start
                                                                    ]
                                                                    [@@@js.implem
                                                                    type tags =
                                                                    [
                                                                    `IDBObjectStore
                                                                    ]
                                                                    type tags_0 =
                                                                    tags]
                                                                    type 
                                                                    'tags this =
                                                                    'tags
                                                                    intf
                                                                    
                                                                    constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBObjectStore
                                                                    ]
                                                                    val
                                                                    t_to_js :
                                                                    t ->
                                                                    Ojs.t
                                                                    val
                                                                    t_of_js :
                                                                    Ojs.t ->
                                                                    t
                                                                    val
                                                                    t_0_to_js
                                                                    :
                                                                    t_0 ->
                                                                    Ojs.t
                                                                    val
                                                                    t_0_of_js
                                                                    :
                                                                    Ojs.t ->
                                                                    t_0
                                                                    val
                                                                    get_autoIncrement
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    bool
                                                                    val
                                                                    get_indexNames
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    DOMStringList.t
                                                                    val
                                                                    get_keyPath
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    string
                                                                    list
                                                                    or_string
                                                                    val
                                                                    get_name
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    string
                                                                    val
                                                                    set_name
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    string ->
                                                                    unit
                                                                    val
                                                                    get_transaction
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    IDBTransaction.t
                                                                    val add :
                                                                    'tags
                                                                    this ->
                                                                    value:any
                                                                    ->
                                                                    ?key:IDBValidKey.t
                                                                    ->
                                                                    unit ->
                                                                    IDBValidKey.t
                                                                    IDBRequest.t
                                                                    val clear
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    never
                                                                    or_undefined
                                                                    IDBRequest.t
                                                                    val count
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2 ->
                                                                    unit ->
                                                                    float
                                                                    IDBRequest.t
                                                                    val
                                                                    createIndex
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    name:string
                                                                    ->
                                                                    keyPath:string
                                                                    list
                                                                    or_string
                                                                    ->
                                                                    ?options:IDBIndexParameters.t
                                                                    ->
                                                                    unit ->
                                                                    IDBIndex.t
                                                                    val
                                                                    delete :
                                                                    'tags
                                                                    this ->
                                                                    query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2 ->
                                                                    never
                                                                    or_undefined
                                                                    IDBRequest.t
                                                                    val
                                                                    deleteIndex
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    name:string
                                                                    -> 
                                                                    unit
                                                                    val get_
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2 ->
                                                                    any
                                                                    IDBRequest.t
                                                                    val
                                                                    getAll :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    ->
                                                                    ?count:float
                                                                    ->
                                                                    unit ->
                                                                    any list
                                                                    IDBRequest.t
                                                                    val
                                                                    getAllKeys
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    ->
                                                                    ?count:float
                                                                    ->
                                                                    unit ->
                                                                    IDBValidKey.t
                                                                    list
                                                                    IDBRequest.t
                                                                    val
                                                                    getKey :
                                                                    'tags
                                                                    this ->
                                                                    query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2 ->
                                                                    IDBValidKey.t
                                                                    or_undefined
                                                                    IDBRequest.t
                                                                    val index
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    name:string
                                                                    ->
                                                                    IDBIndex.t
                                                                    val
                                                                    openCursor
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    ->
                                                                    ?direction:IDBCursorDirection.t
                                                                    ->
                                                                    unit ->
                                                                    IDBCursorWithValue.t
                                                                    or_null
                                                                    IDBRequest.t
                                                                    val
                                                                    openKeyCursor
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    ?query:(
                                                                    IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    ->
                                                                    ?direction:IDBCursorDirection.t
                                                                    ->
                                                                    unit ->
                                                                    IDBCursor.t
                                                                    or_null
                                                                    IDBRequest.t
                                                                    val put :
                                                                    'tags
                                                                    this ->
                                                                    value:any
                                                                    ->
                                                                    ?key:IDBValidKey.t
                                                                    ->
                                                                    unit ->
                                                                    IDBValidKey.t
                                                                    IDBRequest.t
                                                                    val
                                                                    createIndex'
                                                                    :
                                                                    'tags
                                                                    this ->
                                                                    name:string
                                                                    ->
                                                                    keyPath:string
                                                                    Iterable.t_1
                                                                    or_string
                                                                    ->
                                                                    ?options:IDBIndexParameters.t
                                                                    ->
                                                                    unit ->
                                                                    IDBIndex.t
                                                                    val
                                                                    cast_from
                                                                    :
                                                                    'tags
                                                                    this -> 
                                                                    t
                                                                    val
                                                                    prototype
                                                                    :
                                                                    unit -> t
                                                                    val
                                                                    create :
                                                                    unit -> t
                                                                   end =
                                                    struct
                                                      type t =
                                                        [ `IDBObjectStore ]
                                                          intf
                                                      let rec t_of_js :
                                                        Ojs.t -> t =
                                                        Obj.magic
                                                      and t_to_js :
                                                        t -> Ojs.t =
                                                        Obj.magic
                                                      type t_0 = t
                                                      let rec t_0_of_js :
                                                        Ojs.t -> t_0 =
                                                        fun (x1506 : Ojs.t)
                                                          -> t_of_js x1506
                                                      and t_0_to_js :
                                                        t_0 -> Ojs.t =
                                                        fun (x1505 : t) ->
                                                          t_to_js x1505
                                                      type tags =
                                                        [ `IDBObjectStore ]
                                                      type tags_0 = tags
                                                      type 'tags this =
                                                        'tags intf constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBObjectStore
                                                                    ]
                                                      let rec this_of_js :
                                                        'tags .
                                                          (Ojs.t -> 'tags) ->
                                                            Ojs.t ->
                                                              'tags this
                                                        = fun (type __tags)
                                                        ->
                                                        fun
                                                          (__tags_of_js :
                                                            Ojs.t -> __tags)
                                                          ->
                                                          fun (x1509 : Ojs.t)
                                                            ->
                                                            intf_of_js
                                                              __tags_of_js
                                                              x1509
                                                      and this_to_js :
                                                        'tags .
                                                          ('tags -> Ojs.t) ->
                                                            'tags this ->
                                                              Ojs.t
                                                        = fun (type __tags)
                                                        ->
                                                        fun
                                                          (__tags_to_js :
                                                            __tags -> Ojs.t)
                                                          ->
                                                          fun
                                                            (x1507 :
                                                              __tags intf)
                                                            ->
                                                            intf_to_js
                                                              __tags_to_js
                                                              x1507
                                                      let (get_autoIncrement
                                                        : 'tags this -> bool)
                                                        =
                                                        fun
                                                          (x1511 :
                                                            'tags this)
                                                          ->
                                                          Ojs.bool_of_js
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1511)
                                                               "autoIncrement")
                                                      let (get_indexNames :
                                                        'tags this ->
                                                          DOMStringList.t)
                                                        =
                                                        fun
                                                          (x1513 :
                                                            'tags this)
                                                          ->
                                                          DOMStringList.t_of_js
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1513)
                                                               "indexNames")
                                                      let (get_keyPath :
                                                        'tags this ->
                                                          string list
                                                            or_string)
                                                        =
                                                        fun
                                                          (x1515 :
                                                            'tags this)
                                                          ->
                                                          or_string_of_js
                                                            (fun
                                                               (x1517 :
                                                                 Ojs.t)
                                                               ->
                                                               Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x1517)
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1515)
                                                               "keyPath")
                                                      let (get_name :
                                                        'tags this -> string)
                                                        =
                                                        fun
                                                          (x1519 :
                                                            'tags this)
                                                          ->
                                                          Ojs.string_of_js
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1519)
                                                               "name")
                                                      let (set_name :
                                                        'tags this ->
                                                          string -> unit)
                                                        =
                                                        fun
                                                          (x1521 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            (x1522 : string)
                                                            ->
                                                            Ojs.set_prop_ascii
                                                              (this_to_js
                                                                 Obj.magic
                                                                 x1521)
                                                              "name"
                                                              (Ojs.string_to_js
                                                                 x1522)
                                                      let (get_transaction :
                                                        'tags this ->
                                                          IDBTransaction.t)
                                                        =
                                                        fun
                                                          (x1524 :
                                                            'tags this)
                                                          ->
                                                          IDBTransaction.t_of_js
                                                            (Ojs.get_prop_ascii
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1524)
                                                               "transaction")
                                                      let (add :
                                                        'tags this ->
                                                          value:any ->
                                                            ?key:IDBValidKey.t
                                                              ->
                                                              unit ->
                                                                IDBValidKey.t
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1530 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~value:(x1526 :
                                                                    any)
                                                            ->
                                                            fun
                                                              ?key:(x1527 :
                                                                    IDBValidKey.t
                                                                    option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  IDBValidKey.t_of_js
                                                                  (let x1532
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1530 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1532
                                                                    "add")
                                                                    "apply"
                                                                    [|x1532;((
                                                                    let x1528
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1528
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x1526)|]);
                                                                    (
                                                                    match x1527
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1529 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1528
                                                                    "push"
                                                                    [|(
                                                                    IDBValidKey.t_to_js
                                                                    x1529)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1528))|])
                                                      let (clear :
                                                        'tags this ->
                                                          never or_undefined
                                                            IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1534 :
                                                            'tags this)
                                                          ->
                                                          IDBRequest.t_of_js
                                                            (fun
                                                               (x1536 :
                                                                 Ojs.t)
                                                               ->
                                                               or_undefined_of_js
                                                                 never_of_js
                                                                 x1536)
                                                            (Ojs.call
                                                               (this_to_js
                                                                  Obj.magic
                                                                  x1534)
                                                               "clear" 
                                                               [||])
                                                      let (count :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 ->
                                                            unit ->
                                                              float
                                                                IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1543 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1538 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    option)
                                                            ->
                                                            fun () ->
                                                              IDBRequest.t_of_js
                                                                Ojs.float_of_js
                                                                (let x1545 =
                                                                   this_to_js
                                                                    Obj.magic
                                                                    x1543 in
                                                                 Ojs.call
                                                                   (Ojs.get_prop_ascii
                                                                    x1545
                                                                    "count")
                                                                   "apply"
                                                                   [|x1545;((
                                                                    let x1539
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1538
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1540 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1539
                                                                    "push"
                                                                    [|(
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1540)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1539))|])
                                                      let (createIndex :
                                                        'tags this ->
                                                          name:string ->
                                                            keyPath:string
                                                              list or_string
                                                              ->
                                                              ?options:IDBIndexParameters.t
                                                                ->
                                                                unit ->
                                                                  IDBIndex.t)
                                                        =
                                                        fun
                                                          (x1554 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~name:(x1547 :
                                                                    string)
                                                            ->
                                                            fun
                                                              ~keyPath:
                                                              (x1548 :
                                                                string list
                                                                  or_string)
                                                              ->
                                                              fun
                                                                ?options:
                                                                (x1549 :
                                                                  IDBIndexParameters.t
                                                                    option)
                                                                ->
                                                                fun () ->
                                                                  IDBIndex.t_of_js
                                                                    (
                                                                    let x1556
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1554 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1556
                                                                    "createIndex")
                                                                    "apply"
                                                                    [|x1556;((
                                                                    let x1550
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1550
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1547)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1550
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1552 :
                                                                    string
                                                                    list) ->
                                                                    Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1552)
                                                                    x1548)|]);
                                                                    (
                                                                    match x1549
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1551 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1550
                                                                    "push"
                                                                    [|(
                                                                    IDBIndexParameters.t_to_js
                                                                    x1551)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1550))|])
                                                      let (delete :
                                                        'tags this ->
                                                          query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 ->
                                                            never
                                                              or_undefined
                                                              IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1560 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~query:(x1557 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                            ->
                                                            IDBRequest.t_of_js
                                                              (fun
                                                                 (x1562 :
                                                                   Ojs.t)
                                                                 ->
                                                                 or_undefined_of_js
                                                                   never_of_js
                                                                   x1562)
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1560)
                                                                 "delete"
                                                                 [|(union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1557)|])
                                                      let (deleteIndex :
                                                        'tags this ->
                                                          name:string -> unit)
                                                        =
                                                        fun
                                                          (x1565 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~name:(x1564 :
                                                                    string)
                                                            ->
                                                            ignore
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1565)
                                                                 "deleteIndex"
                                                                 [|(Ojs.string_to_js
                                                                    x1564)|])
                                                      let (get_ :
                                                        'tags this ->
                                                          query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 ->
                                                            any IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1570 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~query:(x1567 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                            ->
                                                            IDBRequest.t_of_js
                                                              any_of_js
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1570)
                                                                 "get"
                                                                 [|(union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1567)|])
                                                      let (getAll :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 or_null ->
                                                            ?count:float ->
                                                              unit ->
                                                                any list
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1581 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1573 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    option)
                                                            ->
                                                            fun
                                                              ?count:
                                                              (x1574 :
                                                                float option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  (fun
                                                                    (x1584 :
                                                                    Ojs.t) ->
                                                                    Ojs.list_of_js
                                                                    any_of_js
                                                                    x1584)
                                                                  (let x1583
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1581 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1583
                                                                    "getAll")
                                                                    "apply"
                                                                    [|x1583;((
                                                                    let x1575
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1573
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1577 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1575
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1578 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1578)
                                                                    x1577)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1574
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1576 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1575
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1576)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1575))|])
                                                      let (getAllKeys :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 or_null ->
                                                            ?count:float ->
                                                              unit ->
                                                                IDBValidKey.t
                                                                  list
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1594 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1586 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    option)
                                                            ->
                                                            fun
                                                              ?count:
                                                              (x1587 :
                                                                float option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  (fun
                                                                    (x1597 :
                                                                    Ojs.t) ->
                                                                    Ojs.list_of_js
                                                                    IDBValidKey.t_of_js
                                                                    x1597)
                                                                  (let x1596
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1594 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1596
                                                                    "getAllKeys")
                                                                    "apply"
                                                                    [|x1596;((
                                                                    let x1588
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1586
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1590 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1588
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1591 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1591)
                                                                    x1590)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1587
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1589 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1588
                                                                    "push"
                                                                    [|(
                                                                    Ojs.float_to_js
                                                                    x1589)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1588))|])
                                                      let (getKey :
                                                        'tags this ->
                                                          query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 ->
                                                            IDBValidKey.t
                                                              or_undefined
                                                              IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1602 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~query:(x1599 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                            ->
                                                            IDBRequest.t_of_js
                                                              (fun
                                                                 (x1604 :
                                                                   Ojs.t)
                                                                 ->
                                                                 or_undefined_of_js
                                                                   IDBValidKey.t_of_js
                                                                   x1604)
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1602)
                                                                 "getKey"
                                                                 [|(union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1599)|])
                                                      let (index :
                                                        'tags this ->
                                                          name:string ->
                                                            IDBIndex.t)
                                                        =
                                                        fun
                                                          (x1607 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~name:(x1606 :
                                                                    string)
                                                            ->
                                                            IDBIndex.t_of_js
                                                              (Ojs.call
                                                                 (this_to_js
                                                                    Obj.magic
                                                                    x1607)
                                                                 "index"
                                                                 [|(Ojs.string_to_js
                                                                    x1606)|])
                                                      let (openCursor :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 or_null ->
                                                            ?direction:IDBCursorDirection.t
                                                              ->
                                                              unit ->
                                                                IDBCursorWithValue.t
                                                                  or_null
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1617 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1609 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    option)
                                                            ->
                                                            fun
                                                              ?direction:
                                                              (x1610 :
                                                                IDBCursorDirection.t
                                                                  option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  (fun
                                                                    (x1620 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    IDBCursorWithValue.t_of_js
                                                                    x1620)
                                                                  (let x1619
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1617 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1619
                                                                    "openCursor")
                                                                    "apply"
                                                                    [|x1619;((
                                                                    let x1611
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1609
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1613 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1611
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1614 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1614)
                                                                    x1613)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1610
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1612 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1611
                                                                    "push"
                                                                    [|(
                                                                    IDBCursorDirection.t_to_js
                                                                    x1612)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1611))|])
                                                      let (openKeyCursor :
                                                        'tags this ->
                                                          ?query:(IDBKeyRange.t,
                                                            IDBValidKey.t)
                                                            union2 or_null ->
                                                            ?direction:IDBCursorDirection.t
                                                              ->
                                                              unit ->
                                                                IDBCursor.t
                                                                  or_null
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1630 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ?query:(x1622 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2
                                                                    or_null
                                                                    option)
                                                            ->
                                                            fun
                                                              ?direction:
                                                              (x1623 :
                                                                IDBCursorDirection.t
                                                                  option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  (fun
                                                                    (x1633 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    IDBCursor.t_of_js
                                                                    x1633)
                                                                  (let x1632
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1630 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1632
                                                                    "openKeyCursor")
                                                                    "apply"
                                                                    [|x1632;((
                                                                    let x1624
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x1622
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1626 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1624
                                                                    "push"
                                                                    [|(
                                                                    or_null_to_js
                                                                    (fun
                                                                    (x1627 :
                                                                    (IDBKeyRange.t,
                                                                    IDBValidKey.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    IDBKeyRange.t_to_js
                                                                    IDBValidKey.t_to_js
                                                                    x1627)
                                                                    x1626)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    (
                                                                    match x1623
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1625 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1624
                                                                    "push"
                                                                    [|(
                                                                    IDBCursorDirection.t_to_js
                                                                    x1625)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1624))|])
                                                      let (put :
                                                        'tags this ->
                                                          value:any ->
                                                            ?key:IDBValidKey.t
                                                              ->
                                                              unit ->
                                                                IDBValidKey.t
                                                                  IDBRequest.t)
                                                        =
                                                        fun
                                                          (x1639 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~value:(x1635 :
                                                                    any)
                                                            ->
                                                            fun
                                                              ?key:(x1636 :
                                                                    IDBValidKey.t
                                                                    option)
                                                              ->
                                                              fun () ->
                                                                IDBRequest.t_of_js
                                                                  IDBValidKey.t_of_js
                                                                  (let x1641
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1639 in
                                                                   Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1641
                                                                    "put")
                                                                    "apply"
                                                                    [|x1641;((
                                                                    let x1637
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1637
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x1635)|]);
                                                                    (
                                                                    match x1636
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1638 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1637
                                                                    "push"
                                                                    [|(
                                                                    IDBValidKey.t_to_js
                                                                    x1638)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1637))|])
                                                      let (createIndex' :
                                                        'tags this ->
                                                          name:string ->
                                                            keyPath:string
                                                              Iterable.t_1
                                                              or_string ->
                                                              ?options:IDBIndexParameters.t
                                                                ->
                                                                unit ->
                                                                  IDBIndex.t)
                                                        =
                                                        fun
                                                          (x1650 :
                                                            'tags this)
                                                          ->
                                                          fun
                                                            ~name:(x1643 :
                                                                    string)
                                                            ->
                                                            fun
                                                              ~keyPath:
                                                              (x1644 :
                                                                string
                                                                  Iterable.t_1
                                                                  or_string)
                                                              ->
                                                              fun
                                                                ?options:
                                                                (x1645 :
                                                                  IDBIndexParameters.t
                                                                    option)
                                                                ->
                                                                fun () ->
                                                                  IDBIndex.t_of_js
                                                                    (
                                                                    let x1652
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1650 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1652
                                                                    "createIndex")
                                                                    "apply"
                                                                    [|x1652;((
                                                                    let x1646
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1646
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1643)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1646
                                                                    "push"
                                                                    [|(
                                                                    or_string_to_js
                                                                    (fun
                                                                    (x1648 :
                                                                    string
                                                                    Iterable.t_1)
                                                                    ->
                                                                    Iterable.t_1_to_js
                                                                    Ojs.string_to_js
                                                                    x1648)
                                                                    x1644)|]);
                                                                    (
                                                                    match x1645
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1647 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1646
                                                                    "push"
                                                                    [|(
                                                                    IDBIndexParameters.t_to_js
                                                                    x1647)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1646))|])
                                                      let cast_from =
                                                        Obj.magic
                                                      let (prototype :
                                                        unit -> t) =
                                                        fun () ->
                                                          t_of_js
                                                            (Ojs.get_prop_ascii
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "IDBObjectStore")
                                                               "prototype")
                                                      let (create :
                                                        unit -> t) =
                                                        fun () ->
                                                          t_of_js
                                                            (Ojs.new_obj
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "IDBObjectStore")
                                                               [||])
                                                    end and
                                                         IDBRequest:sig
                                                                    type 
                                                                    'T t =
                                                                    [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBRequest
                                                                    of 
                                                                    'T ] intf
                                                                    type 
                                                                    'T t_1 =
                                                                    'T t
                                                                    type t_0 =
                                                                    any t
                                                                    [@@@js.stop
                                                                    ]
                                                                    type 
                                                                    'T tags =
                                                                    [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBRequest
                                                                    of 
                                                                    'T ]
                                                                    type 
                                                                    'T tags_1 =
                                                                    'T tags
                                                                    type tags_0 =
                                                                    any tags
                                                                    [@@@js.start
                                                                    ]
                                                                    [@@@js.implem
                                                                    type 
                                                                    'T tags =
                                                                    [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBRequest
                                                                    of 
                                                                    'T ]
                                                                    type 
                                                                    'T tags_1 =
                                                                    'T tags
                                                                    type tags_0 =
                                                                    any tags]
                                                                    type (
                                                                    'tags,
                                                                    'T) this =
                                                                    'tags
                                                                    intf
                                                                    
                                                                    constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBRequest
                                                                    of 
                                                                    'T ]
                                                                    val
                                                                    t_to_js :
                                                                    ('T ->
                                                                    Ojs.t) ->
                                                                    'T t ->
                                                                    Ojs.t
                                                                    val
                                                                    t_of_js :
                                                                    (Ojs.t ->
                                                                    'T) ->
                                                                    Ojs.t ->
                                                                    'T t
                                                                    val
                                                                    t_1_to_js
                                                                    :
                                                                    ('T ->
                                                                    Ojs.t) ->
                                                                    'T t_1 ->
                                                                    Ojs.t
                                                                    val
                                                                    t_1_of_js
                                                                    :
                                                                    (Ojs.t ->
                                                                    'T) ->
                                                                    Ojs.t ->
                                                                    'T t_1
                                                                    val
                                                                    t_0_to_js
                                                                    :
                                                                    t_0 ->
                                                                    Ojs.t
                                                                    val
                                                                    t_0_of_js
                                                                    :
                                                                    Ojs.t ->
                                                                    t_0
                                                                    val
                                                                    get_error
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    DOMException.t
                                                                    or_null
                                                                    val
                                                                    get_onerror
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (this:'T
                                                                    t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    val
                                                                    set_onerror
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (this:'T
                                                                    t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                    val
                                                                    get_onsuccess
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (this:'T
                                                                    t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    val
                                                                    set_onsuccess
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (this:'T
                                                                    t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                    val
                                                                    get_readyState
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    IDBRequestReadyState.t
                                                                    val
                                                                    get_result
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    -> 
                                                                    'T
                                                                    val
                                                                    get_source
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    (IDBCursor.t,
                                                                    IDBIndex.t,
                                                                    IDBObjectStore.t)
                                                                    union3
                                                                    val
                                                                    get_transaction
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    IDBTransaction.t
                                                                    or_null
                                                                    val
                                                                    addEventListener
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                    val
                                                                    addEventListener'
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                    val
                                                                    removeEventListener
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                    val
                                                                    removeEventListener'
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                    val
                                                                    cast_from
                                                                    :
                                                                    ('tags,
                                                                    'T) this
                                                                    -> 
                                                                    'T t
                                                                    val
                                                                    prototype
                                                                    :
                                                                    unit ->
                                                                    t_0
                                                                    val
                                                                    create :
                                                                    unit ->
                                                                    t_0
                                                                    end =
                                                         struct
                                                           type 'T t =
                                                             [ `EventTarget 
                                                             | `IDBRequest of
                                                                 'T ]
                                                               intf
                                                           let rec t_of_js :
                                                             'T .
                                                               (Ojs.t -> 'T)
                                                                 ->
                                                                 Ojs.t ->
                                                                   'T t
                                                             =
                                                             fun _T ->
                                                               Obj.magic
                                                           and t_to_js :
                                                             'T .
                                                               ('T -> Ojs.t)
                                                                 ->
                                                                 'T t ->
                                                                   Ojs.t
                                                             =
                                                             fun _T ->
                                                               Obj.magic
                                                           type 'T t_1 = 'T t
                                                           let rec t_1_of_js
                                                             :
                                                             'T .
                                                               (Ojs.t -> 'T)
                                                                 ->
                                                                 Ojs.t ->
                                                                   'T t_1
                                                             = fun (type __T)
                                                             ->
                                                             fun
                                                               (__T_of_js :
                                                                 Ojs.t -> __T)
                                                               ->
                                                               fun
                                                                 (x1655 :
                                                                   Ojs.t)
                                                                 ->
                                                                 t_of_js
                                                                   __T_of_js
                                                                   x1655
                                                           and t_1_to_js :
                                                             'T .
                                                               ('T -> Ojs.t)
                                                                 ->
                                                                 'T t_1 ->
                                                                   Ojs.t
                                                             = fun (type __T)
                                                             ->
                                                             fun
                                                               (__T_to_js :
                                                                 __T -> Ojs.t)
                                                               ->
                                                               fun
                                                                 (x1653 :
                                                                   __T t)
                                                                 ->
                                                                 t_to_js
                                                                   __T_to_js
                                                                   x1653
                                                           type t_0 = any t
                                                           let rec t_0_of_js
                                                             : Ojs.t -> t_0 =
                                                             fun
                                                               (x1659 :
                                                                 Ojs.t)
                                                               ->
                                                               t_of_js
                                                                 any_of_js
                                                                 x1659
                                                           and t_0_to_js :
                                                             t_0 -> Ojs.t =
                                                             fun
                                                               (x1657 :
                                                                 any t)
                                                               ->
                                                               t_to_js
                                                                 any_to_js
                                                                 x1657
                                                           type 'T tags =
                                                             [ `EventTarget 
                                                             | `IDBRequest of
                                                                 'T ]
                                                           type 'T tags_1 =
                                                             'T tags
                                                           type tags_0 =
                                                             any tags
                                                           type ('tags,
                                                             'T) this =
                                                             'tags intf
                                                              constraint
                                                               'tags =
                                                               [>
                                                                 `IDBRequest
                                                                   of 
                                                                   'T ]
                                                           let rec this_of_js
                                                             :
                                                             'tags 'T .
                                                               (Ojs.t ->
                                                                  'tags)
                                                                 ->
                                                                 (Ojs.t -> 'T)
                                                                   ->
                                                                   Ojs.t ->
                                                                    ('tags,
                                                                    'T) this
                                                             = fun (type
                                                             __tags) -> fun
                                                             (type __T) ->
                                                             fun
                                                               (__tags_of_js
                                                                 :
                                                                 Ojs.t ->
                                                                   __tags)
                                                               ->
                                                               fun
                                                                 (__T_of_js :
                                                                   Ojs.t ->
                                                                    __T)
                                                                 ->
                                                                 fun
                                                                   (x1663 :
                                                                    Ojs.t)
                                                                   ->
                                                                   intf_of_js
                                                                    __tags_of_js
                                                                    x1663
                                                           and this_to_js :
                                                             'tags 'T .
                                                               ('tags ->
                                                                  Ojs.t)
                                                                 ->
                                                                 ('T -> Ojs.t)
                                                                   ->
                                                                   ('tags,
                                                                    'T) this
                                                                    -> 
                                                                    Ojs.t
                                                             = fun (type
                                                             __tags) -> fun
                                                             (type __T) ->
                                                             fun
                                                               (__tags_to_js
                                                                 :
                                                                 __tags ->
                                                                   Ojs.t)
                                                               ->
                                                               fun
                                                                 (__T_to_js :
                                                                   __T ->
                                                                    Ojs.t)
                                                                 ->
                                                                 fun
                                                                   (x1661 :
                                                                    __tags
                                                                    intf)
                                                                   ->
                                                                   intf_to_js
                                                                    __tags_to_js
                                                                    x1661
                                                           let (get_error :
                                                             ('tags, 
                                                               'T) this ->
                                                               DOMException.t
                                                                 or_null)
                                                             =
                                                             fun
                                                               (x1665 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               or_null_of_js
                                                                 DOMException.t_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1665)
                                                                    "error")
                                                           let (get_onerror :
                                                             ('tags, 
                                                               'T) this ->
                                                               (this:'T t ->
                                                                  ev:Event.t
                                                                    -> 
                                                                    any)
                                                                 or_null)
                                                             =
                                                             fun
                                                               (x1669 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               or_null_of_js
                                                                 (fun
                                                                    (x1672 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1673 :
                                                                    'T t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1675 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1672
                                                                    [|(
                                                                    t_to_js
                                                                    Obj.magic
                                                                    x1673);(
                                                                    Event.t_to_js
                                                                    x1675)|]))
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1669)
                                                                    "onerror")
                                                           let (set_onerror :
                                                             ('tags, 
                                                               'T) this ->
                                                               (this:'T t ->
                                                                  ev:Event.t
                                                                    -> 
                                                                    any)
                                                                 or_null ->
                                                                 unit)
                                                             =
                                                             fun
                                                               (x1676 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 (x1677 :
                                                                   (this:'T t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                 ->
                                                                 Ojs.set_prop_ascii
                                                                   (this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1676)
                                                                   "onerror"
                                                                   (or_null_to_js
                                                                    (fun
                                                                    (x1678 :
                                                                    this:'T t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1679 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1681 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1678
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1679)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1681))))
                                                                    x1677)
                                                           let (get_onsuccess
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               (this:'T t ->
                                                                  ev:Event.t
                                                                    -> 
                                                                    any)
                                                                 or_null)
                                                             =
                                                             fun
                                                               (x1684 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               or_null_of_js
                                                                 (fun
                                                                    (x1687 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1688 :
                                                                    'T t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1690 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1687
                                                                    [|(
                                                                    t_to_js
                                                                    Obj.magic
                                                                    x1688);(
                                                                    Event.t_to_js
                                                                    x1690)|]))
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1684)
                                                                    "onsuccess")
                                                           let (set_onsuccess
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               (this:'T t ->
                                                                  ev:Event.t
                                                                    -> 
                                                                    any)
                                                                 or_null ->
                                                                 unit)
                                                             =
                                                             fun
                                                               (x1691 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 (x1692 :
                                                                   (this:'T t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                 ->
                                                                 Ojs.set_prop_ascii
                                                                   (this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1691)
                                                                   "onsuccess"
                                                                   (or_null_to_js
                                                                    (fun
                                                                    (x1693 :
                                                                    this:'T t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1694 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1696 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1693
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1694)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1696))))
                                                                    x1692)
                                                           let (get_readyState
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               IDBRequestReadyState.t)
                                                             =
                                                             fun
                                                               (x1699 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               IDBRequestReadyState.t_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1699)
                                                                    "readyState")
                                                           let (get_result :
                                                             ('tags, 
                                                               'T) this -> 
                                                               'T)
                                                             =
                                                             fun
                                                               (x1702 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               Obj.magic
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1702)
                                                                    "result")
                                                           let (get_source :
                                                             ('tags, 
                                                               'T) this ->
                                                               (IDBCursor.t,
                                                                 IDBIndex.t,
                                                                 IDBObjectStore.t)
                                                                 union3)
                                                             =
                                                             fun
                                                               (x1705 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               union3_of_js
                                                                 IDBCursor.t_of_js
                                                                 IDBIndex.t_of_js
                                                                 IDBObjectStore.t_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1705)
                                                                    "source")
                                                           let (get_transaction
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               IDBTransaction.t
                                                                 or_null)
                                                             =
                                                             fun
                                                               (x1711 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               or_null_of_js
                                                                 IDBTransaction.t_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1711)
                                                                    "transaction")
                                                           let (addEventListener
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               type_:'K ->
                                                                 listener:(
                                                                   this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any)
                                                                   ->
                                                                   ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                             =
                                                             fun
                                                               (x1724 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 ~type_:
                                                                 (x1715 : 
                                                                   'K)
                                                                 ->
                                                                 fun
                                                                   ~listener:
                                                                   (x1716 :
                                                                    this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any)
                                                                   ->
                                                                   fun
                                                                    ?options:
                                                                    (x1717 :
                                                                    AddEventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1727
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1724 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1727
                                                                    "addEventListener")
                                                                    "apply"
                                                                    [|x1727;((
                                                                    let x1718
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1718
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1715)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1718
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1721 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1723 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1716
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1721)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1723))))|]);
                                                                    (
                                                                    match x1717
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1719 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1718
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1719)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1718))|])
                                                           let (addEventListener'
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               type_:string
                                                                 ->
                                                                 listener:EventListenerOrEventListenerObject.t
                                                                   ->
                                                                   ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                             =
                                                             fun
                                                               (x1734 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 ~type_:
                                                                 (x1728 :
                                                                   string)
                                                                 ->
                                                                 fun
                                                                   ~listener:
                                                                   (x1729 :
                                                                    EventListenerOrEventListenerObject.t)
                                                                   ->
                                                                   fun
                                                                    ?options:
                                                                    (x1730 :
                                                                    AddEventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1737
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1734 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1737
                                                                    "addEventListener")
                                                                    "apply"
                                                                    [|x1737;((
                                                                    let x1731
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1731
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1728)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1731
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1729)|]);
                                                                    (
                                                                    match x1730
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1732 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1731
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1732)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1731))|])
                                                           let (removeEventListener
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               type_:'K ->
                                                                 listener:(
                                                                   this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any)
                                                                   ->
                                                                   ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                             =
                                                             fun
                                                               (x1747 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 ~type_:
                                                                 (x1738 : 
                                                                   'K)
                                                                 ->
                                                                 fun
                                                                   ~listener:
                                                                   (x1739 :
                                                                    this:'T t
                                                                    ->
                                                                    ev:any ->
                                                                    any)
                                                                   ->
                                                                   fun
                                                                    ?options:
                                                                    (x1740 :
                                                                    EventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1750
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1747 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1750
                                                                    "removeEventListener")
                                                                    "apply"
                                                                    [|x1750;((
                                                                    let x1741
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1741
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1738)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1741
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1744 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1746 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1739
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1744)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1746))))|]);
                                                                    (
                                                                    match x1740
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1742 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1741
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1742)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1741))|])
                                                           let (removeEventListener'
                                                             :
                                                             ('tags, 
                                                               'T) this ->
                                                               type_:string
                                                                 ->
                                                                 listener:EventListenerOrEventListenerObject.t
                                                                   ->
                                                                   ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                             =
                                                             fun
                                                               (x1757 :
                                                                 ('tags, 
                                                                   'T) this)
                                                               ->
                                                               fun
                                                                 ~type_:
                                                                 (x1751 :
                                                                   string)
                                                                 ->
                                                                 fun
                                                                   ~listener:
                                                                   (x1752 :
                                                                    EventListenerOrEventListenerObject.t)
                                                                   ->
                                                                   fun
                                                                    ?options:
                                                                    (x1753 :
                                                                    EventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1760
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    Obj.magic
                                                                    x1757 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1760
                                                                    "removeEventListener")
                                                                    "apply"
                                                                    [|x1760;((
                                                                    let x1754
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1754
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1751)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1754
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1752)|]);
                                                                    (
                                                                    match x1753
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1755 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1754
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1755)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1754))|])
                                                           let cast_from =
                                                             Obj.magic
                                                           let (prototype :
                                                             unit -> t_0) =
                                                             fun () ->
                                                               t_0_of_js
                                                                 (Ojs.get_prop_ascii
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "IDBRequest")
                                                                    "prototype")
                                                           let (create :
                                                             unit -> t_0) =
                                                             fun () ->
                                                               t_0_of_js
                                                                 (Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "IDBRequest")
                                                                    [||])
                                                         end and
                                                              IDBTransaction:
                                                              sig
                                                                type t =
                                                                  [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ] intf
                                                                type t_0 = t
                                                                [@@@js.stop ]
                                                                type tags =
                                                                  [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ]
                                                                type tags_0 =
                                                                  tags
                                                                [@@@js.start
                                                                  ]
                                                                [@@@js.implem
                                                                  type tags =
                                                                    [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ]
                                                                  type tags_0 =
                                                                    tags]
                                                                type 
                                                                  'tags this =
                                                                  'tags intf
                                                                   constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBTransaction
                                                                    ]
                                                                val t_to_js :
                                                                  t -> Ojs.t
                                                                val t_of_js :
                                                                  Ojs.t -> t
                                                                val t_0_to_js
                                                                  :
                                                                  t_0 ->
                                                                    Ojs.t
                                                                val t_0_of_js
                                                                  :
                                                                  Ojs.t ->
                                                                    t_0
                                                                val get_db :
                                                                  'tags this
                                                                    ->
                                                                    IDBDatabase.t
                                                                val get_error
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    DOMException.t
                                                                    or_null
                                                                val get_mode
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    IDBTransactionMode.t
                                                                val
                                                                  get_objectStoreNames
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    DOMStringList.t
                                                                val
                                                                  get_onabort
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                val
                                                                  set_onabort
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                val
                                                                  get_oncomplete
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                val
                                                                  set_oncomplete
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                val
                                                                  get_onerror
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                val
                                                                  set_onerror
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit
                                                                val abort :
                                                                  'tags this
                                                                    -> 
                                                                    unit
                                                                val commit :
                                                                  'tags this
                                                                    -> 
                                                                    unit
                                                                val
                                                                  objectStore
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    name:string
                                                                    ->
                                                                    IDBObjectStore.t
                                                                val
                                                                  addEventListener
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                val
                                                                  addEventListener'
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                val
                                                                  removeEventListener
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                val
                                                                  removeEventListener'
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit
                                                                val cast_from
                                                                  :
                                                                  'tags this
                                                                    -> 
                                                                    t
                                                                val prototype
                                                                  : unit -> t
                                                                val create :
                                                                  unit -> t
                                                              end =
                                                              struct
                                                                type t =
                                                                  [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ] intf
                                                                let rec t_of_js
                                                                  :
                                                                  Ojs.t -> t
                                                                  = Obj.magic
                                                                and t_to_js :
                                                                  t -> Ojs.t
                                                                  = Obj.magic
                                                                type t_0 = t
                                                                let rec t_0_of_js
                                                                  :
                                                                  Ojs.t ->
                                                                    t_0
                                                                  =
                                                                  fun
                                                                    (x1762 :
                                                                    Ojs.t) ->
                                                                    t_of_js
                                                                    x1762
                                                                and t_0_to_js
                                                                  :
                                                                  t_0 ->
                                                                    Ojs.t
                                                                  =
                                                                  fun
                                                                    (x1761 :
                                                                    t) ->
                                                                    t_to_js
                                                                    x1761
                                                                type tags =
                                                                  [
                                                                    `EventTarget
                                                                     | 
                                                                    `IDBTransaction
                                                                    ]
                                                                type tags_0 =
                                                                  tags
                                                                type 
                                                                  'tags this =
                                                                  'tags intf
                                                                   constraint
                                                                    'tags =
                                                                    [>
                                                                    `IDBTransaction
                                                                    ]
                                                                let rec this_of_js
                                                                  :
                                                                  'tags .
                                                                    (Ojs.t ->
                                                                    'tags) ->
                                                                    Ojs.t ->
                                                                    'tags
                                                                    this
                                                                  = fun (type
                                                                  __tags) ->
                                                                  fun
                                                                    (__tags_of_js
                                                                    :
                                                                    Ojs.t ->
                                                                    __tags)
                                                                    ->
                                                                    fun
                                                                    (x1765 :
                                                                    Ojs.t) ->
                                                                    intf_of_js
                                                                    __tags_of_js
                                                                    x1765
                                                                and this_to_js
                                                                  :
                                                                  'tags .
                                                                    ('tags ->
                                                                    Ojs.t) ->
                                                                    'tags
                                                                    this ->
                                                                    Ojs.t
                                                                  = fun (type
                                                                  __tags) ->
                                                                  fun
                                                                    (__tags_to_js
                                                                    :
                                                                    __tags ->
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1763 :
                                                                    __tags
                                                                    intf) ->
                                                                    intf_to_js
                                                                    __tags_to_js
                                                                    x1763
                                                                let (get_db :
                                                                  'tags this
                                                                    ->
                                                                    IDBDatabase.t)
                                                                  =
                                                                  fun
                                                                    (x1767 :
                                                                    'tags
                                                                    this) ->
                                                                    IDBDatabase.t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1767)
                                                                    "db")
                                                                let (get_error
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    DOMException.t
                                                                    or_null)
                                                                  =
                                                                  fun
                                                                    (x1769 :
                                                                    'tags
                                                                    this) ->
                                                                    or_null_of_js
                                                                    DOMException.t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1769)
                                                                    "error")
                                                                let (get_mode
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    IDBTransactionMode.t)
                                                                  =
                                                                  fun
                                                                    (x1772 :
                                                                    'tags
                                                                    this) ->
                                                                    IDBTransactionMode.t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1772)
                                                                    "mode")
                                                                let (get_objectStoreNames
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    DOMStringList.t)
                                                                  =
                                                                  fun
                                                                    (x1774 :
                                                                    'tags
                                                                    this) ->
                                                                    DOMStringList.t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1774)
                                                                    "objectStoreNames")
                                                                let (get_onabort
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                  =
                                                                  fun
                                                                    (x1776 :
                                                                    'tags
                                                                    this) ->
                                                                    or_null_of_js
                                                                    (fun
                                                                    (x1778 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1779 :
                                                                    t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1780 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1778
                                                                    [|(
                                                                    t_to_js
                                                                    x1779);(
                                                                    Event.t_to_js
                                                                    x1780)|]))
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1776)
                                                                    "onabort")
                                                                let (set_onabort
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1781 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    (x1782 :
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                    ->
                                                                    Ojs.set_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1781)
                                                                    "onabort"
                                                                    (or_null_to_js
                                                                    (fun
                                                                    (x1783 :
                                                                    this:t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1784 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1785 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1783
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1784)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1785))))
                                                                    x1782)
                                                                let (get_oncomplete
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                  =
                                                                  fun
                                                                    (x1787 :
                                                                    'tags
                                                                    this) ->
                                                                    or_null_of_js
                                                                    (fun
                                                                    (x1789 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1790 :
                                                                    t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1791 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1789
                                                                    [|(
                                                                    t_to_js
                                                                    x1790);(
                                                                    Event.t_to_js
                                                                    x1791)|]))
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1787)
                                                                    "oncomplete")
                                                                let (set_oncomplete
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1792 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    (x1793 :
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                    ->
                                                                    Ojs.set_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1792)
                                                                    "oncomplete"
                                                                    (or_null_to_js
                                                                    (fun
                                                                    (x1794 :
                                                                    this:t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1795 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1796 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1794
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1795)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1796))))
                                                                    x1793)
                                                                let (get_onerror
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                  =
                                                                  fun
                                                                    (x1798 :
                                                                    'tags
                                                                    this) ->
                                                                    or_null_of_js
                                                                    (fun
                                                                    (x1800 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    ~this:
                                                                    (x1801 :
                                                                    t) ->
                                                                    fun
                                                                    ~ev:
                                                                    (x1802 :
                                                                    Event.t)
                                                                    ->
                                                                    any_of_js
                                                                    (Ojs.apply
                                                                    x1800
                                                                    [|(
                                                                    t_to_js
                                                                    x1801);(
                                                                    Event.t_to_js
                                                                    x1802)|]))
                                                                    (Ojs.get_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1798)
                                                                    "onerror")
                                                                let (set_onerror
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1803 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    (x1804 :
                                                                    (this:t
                                                                    ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any)
                                                                    or_null)
                                                                    ->
                                                                    Ojs.set_prop_ascii
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1803)
                                                                    "onerror"
                                                                    (or_null_to_js
                                                                    (fun
                                                                    (x1805 :
                                                                    this:t ->
                                                                    ev:Event.t
                                                                    -> 
                                                                    any) ->
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1806 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1807 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1805
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1806)
                                                                    ~ev:(
                                                                    Event.t_of_js
                                                                    x1807))))
                                                                    x1804)
                                                                let (abort :
                                                                  'tags this
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1809 :
                                                                    'tags
                                                                    this) ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1809)
                                                                    "abort"
                                                                    [||])
                                                                let (commit :
                                                                  'tags this
                                                                    -> 
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1811 :
                                                                    'tags
                                                                    this) ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1811)
                                                                    "commit"
                                                                    [||])
                                                                let (objectStore
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    name:string
                                                                    ->
                                                                    IDBObjectStore.t)
                                                                  =
                                                                  fun
                                                                    (x1814 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~name:
                                                                    (x1813 :
                                                                    string)
                                                                    ->
                                                                    IDBObjectStore.t_of_js
                                                                    (Ojs.call
                                                                    (this_to_js
                                                                    Obj.magic
                                                                    x1814)
                                                                    "objectStore"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1813)|])
                                                                let (addEventListener
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1824 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~type_:
                                                                    (x1816 :
                                                                    'K) ->
                                                                    fun
                                                                    ~listener:
                                                                    (x1817 :
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    fun
                                                                    ?options:
                                                                    (x1818 :
                                                                    AddEventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1826
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1824 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1826
                                                                    "addEventListener")
                                                                    "apply"
                                                                    [|x1826;((
                                                                    let x1819
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1819
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1816)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1819
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1822 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1823 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1817
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1822)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1823))))|]);
                                                                    (
                                                                    match x1818
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1820 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1819
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1820)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1819))|])
                                                                let (addEventListener'
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:AddEventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1833 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~type_:
                                                                    (x1827 :
                                                                    string)
                                                                    ->
                                                                    fun
                                                                    ~listener:
                                                                    (x1828 :
                                                                    EventListenerOrEventListenerObject.t)
                                                                    ->
                                                                    fun
                                                                    ?options:
                                                                    (x1829 :
                                                                    AddEventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1835
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1833 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1835
                                                                    "addEventListener")
                                                                    "apply"
                                                                    [|x1835;((
                                                                    let x1830
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1830
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1827)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1830
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1828)|]);
                                                                    (
                                                                    match x1829
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1831 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1830
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1831)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1830))|])
                                                                let (removeEventListener
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:'K
                                                                    ->
                                                                    listener:(
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1844 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~type_:
                                                                    (x1836 :
                                                                    'K) ->
                                                                    fun
                                                                    ~listener:
                                                                    (x1837 :
                                                                    this:t ->
                                                                    ev:any ->
                                                                    any) ->
                                                                    fun
                                                                    ?options:
                                                                    (x1838 :
                                                                    EventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1846
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1844 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1846
                                                                    "removeEventListener")
                                                                    "apply"
                                                                    [|x1846;((
                                                                    let x1839
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1839
                                                                    "push"
                                                                    [|(
                                                                    Obj.magic
                                                                    x1836)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1839
                                                                    "push"
                                                                    [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1842 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1843 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1837
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1842)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1843))))|]);
                                                                    (
                                                                    match x1838
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1840 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1839
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1840)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1839))|])
                                                                let (removeEventListener'
                                                                  :
                                                                  'tags this
                                                                    ->
                                                                    type_:string
                                                                    ->
                                                                    listener:EventListenerOrEventListenerObject.t
                                                                    ->
                                                                    ?options:EventListenerOptions.t
                                                                    or_boolean
                                                                    ->
                                                                    unit ->
                                                                    unit)
                                                                  =
                                                                  fun
                                                                    (x1853 :
                                                                    'tags
                                                                    this) ->
                                                                    fun
                                                                    ~type_:
                                                                    (x1847 :
                                                                    string)
                                                                    ->
                                                                    fun
                                                                    ~listener:
                                                                    (x1848 :
                                                                    EventListenerOrEventListenerObject.t)
                                                                    ->
                                                                    fun
                                                                    ?options:
                                                                    (x1849 :
                                                                    EventListenerOptions.t
                                                                    or_boolean
                                                                    option)
                                                                    ->
                                                                    fun () ->
                                                                    ignore
                                                                    (let x1855
                                                                    =
                                                                    this_to_js
                                                                    Obj.magic
                                                                    x1853 in
                                                                    Ojs.call
                                                                    (Ojs.get_prop_ascii
                                                                    x1855
                                                                    "removeEventListener")
                                                                    "apply"
                                                                    [|x1855;((
                                                                    let x1850
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1850
                                                                    "push"
                                                                    [|(
                                                                    Ojs.string_to_js
                                                                    x1847)|]);
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1850
                                                                    "push"
                                                                    [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x1848)|]);
                                                                    (
                                                                    match x1849
                                                                    with
                                                                    | 
                                                                    Some
                                                                    x1851 ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x1850
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1851)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x1850))|])
                                                                let cast_from
                                                                  = Obj.magic
                                                                let (prototype
                                                                  :
                                                                  unit -> t)
                                                                  =
                                                                  fun () ->
                                                                    t_of_js
                                                                    (Ojs.get_prop_ascii
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "IDBTransaction")
                                                                    "prototype")
                                                                let (create :
                                                                  unit -> t)
                                                                  =
                                                                  fun () ->
                                                                    t_of_js
                                                                    (Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "IDBTransaction")
                                                                    [||])
                                                              end
module rec
  AnonymousInterface51:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBOpenDBRequest.t
                         val set_prototype : t -> IDBOpenDBRequest.t -> unit
                         val create : t -> IDBOpenDBRequest.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1857 : Ojs.t) -> x1857
    and t_to_js : t -> Ojs.t = fun (x1856 : Ojs.t) -> x1856
    let (get_prototype : t -> IDBOpenDBRequest.t) =
      fun (x1858 : t) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1858) "prototype")
    let (set_prototype : t -> IDBOpenDBRequest.t -> unit) =
      fun (x1859 : t) ->
        fun (x1860 : IDBOpenDBRequest.t) ->
          Ojs.set_prop_ascii (t_to_js x1859) "prototype"
            (IDBOpenDBRequest.t_to_js x1860)
    let (create : t -> IDBOpenDBRequest.t) =
      fun (x1861 : t) ->
        IDBOpenDBRequest.t_of_js (Ojs.new_obj (t_to_js x1861) [||])
  end
 and
  IDBOpenDBRequest:sig
                     type t =
                       [ `EventTarget  | `IDBOpenDBRequest 
                       | `IDBRequest of IDBDatabase.t ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags =
                       [ `EventTarget  | `IDBOpenDBRequest 
                       | `IDBRequest of IDBDatabase.t ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags =
                         [ `EventTarget  | `IDBOpenDBRequest 
                         | `IDBRequest of IDBDatabase.t ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_onblocked :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onblocked :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_onupgradeneeded :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any)
                           or_null
                     val set_onupgradeneeded :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any)
                           or_null -> unit
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1863 : Ojs.t) -> t_of_js x1863
    and t_0_to_js : t_0 -> Ojs.t = fun (x1862 : t) -> t_to_js x1862
    type tags =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1866 : Ojs.t) -> intf_of_js __tags_of_js x1866
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1864 : __tags intf) -> intf_to_js __tags_to_js x1864
    let (get_onblocked : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x1868 : 'tags this) ->
        or_null_of_js
          (fun (x1870 : Ojs.t) ->
             fun ~this:(x1871 : t) ->
               fun ~ev:(x1872 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1870 [|(t_to_js x1871);(Event.t_to_js x1872)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1868) "onblocked")
    let (set_onblocked :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x1873 : 'tags this) ->
        fun (x1874 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1873) "onblocked"
            (or_null_to_js
               (fun (x1875 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1876 : Ojs.t) ->
                       fun (x1877 : Ojs.t) ->
                         any_to_js
                           (x1875 ~this:(t_of_js x1876)
                              ~ev:(Event.t_of_js x1877)))) x1874)
    let (get_onupgradeneeded :
      'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null) =
      fun (x1879 : 'tags this) ->
        or_null_of_js
          (fun (x1881 : Ojs.t) ->
             fun ~this:(x1882 : t) ->
               fun ~ev:(x1883 : IDBVersionChangeEvent.t) ->
                 any_of_js
                   (Ojs.apply x1881
                      [|(t_to_js x1882);(IDBVersionChangeEvent.t_to_js x1883)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1879) "onupgradeneeded")
    let (set_onupgradeneeded :
      'tags this ->
        (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null -> unit)
      =
      fun (x1884 : 'tags this) ->
        fun (x1885 : (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1884) "onupgradeneeded"
            (or_null_to_js
               (fun (x1886 : this:t -> ev:IDBVersionChangeEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1887 : Ojs.t) ->
                       fun (x1888 : Ojs.t) ->
                         any_to_js
                           (x1886 ~this:(t_of_js x1887)
                              ~ev:(IDBVersionChangeEvent.t_of_js x1888))))
               x1885)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1898 : 'tags this) ->
        fun ~type_:(x1890 : 'K) ->
          fun ~listener:(x1891 : this:t -> ev:any -> any) ->
            fun
              ?options:(x1892 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1900 = this_to_js Obj.magic x1898 in
                   Ojs.call (Ojs.get_prop_ascii x1900 "addEventListener")
                     "apply"
                     [|x1900;((let x1893 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1893 "push" [|(Obj.magic x1890)|]);
                               ignore
                                 (Ojs.call x1893 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1896 : Ojs.t) ->
                                            fun (x1897 : Ojs.t) ->
                                              any_to_js
                                                (x1891 ~this:(t_of_js x1896)
                                                   ~ev:(any_of_js x1897))))|]);
                               (match x1892 with
                                | Some x1894 ->
                                    ignore
                                      (Ojs.call x1893 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1894)|])
                                | None -> ());
                               x1893))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1907 : 'tags this) ->
        fun ~type_:(x1901 : string) ->
          fun ~listener:(x1902 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x1903 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1909 = this_to_js Obj.magic x1907 in
                   Ojs.call (Ojs.get_prop_ascii x1909 "addEventListener")
                     "apply"
                     [|x1909;((let x1904 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1904 "push"
                                    [|(Ojs.string_to_js x1901)|]);
                               ignore
                                 (Ojs.call x1904 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1902)|]);
                               (match x1903 with
                                | Some x1905 ->
                                    ignore
                                      (Ojs.call x1904 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1905)|])
                                | None -> ());
                               x1904))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1918 : 'tags this) ->
        fun ~type_:(x1910 : 'K) ->
          fun ~listener:(x1911 : this:t -> ev:any -> any) ->
            fun ?options:(x1912 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1920 = this_to_js Obj.magic x1918 in
                   Ojs.call (Ojs.get_prop_ascii x1920 "removeEventListener")
                     "apply"
                     [|x1920;((let x1913 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1913 "push" [|(Obj.magic x1910)|]);
                               ignore
                                 (Ojs.call x1913 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1916 : Ojs.t) ->
                                            fun (x1917 : Ojs.t) ->
                                              any_to_js
                                                (x1911 ~this:(t_of_js x1916)
                                                   ~ev:(any_of_js x1917))))|]);
                               (match x1912 with
                                | Some x1914 ->
                                    ignore
                                      (Ojs.call x1913 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1914)|])
                                | None -> ());
                               x1913))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1927 : 'tags this) ->
        fun ~type_:(x1921 : string) ->
          fun ~listener:(x1922 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x1923 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1929 = this_to_js Obj.magic x1927 in
                   Ojs.call (Ojs.get_prop_ascii x1929 "removeEventListener")
                     "apply"
                     [|x1929;((let x1924 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1924 "push"
                                    [|(Ojs.string_to_js x1921)|]);
                               ignore
                                 (Ojs.call x1924 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1922)|]);
                               (match x1923 with
                                | Some x1925 ->
                                    ignore
                                      (Ojs.call x1924 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1925)|])
                                | None -> ());
                               x1924))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
             [||])
  end
module IDBDatabaseInfo =
  struct
    type t = [ `IDBDatabaseInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1931 : Ojs.t) -> t_of_js x1931
    and t_0_to_js : t_0 -> Ojs.t = fun (x1930 : t) -> t_to_js x1930
    type tags = [ `IDBDatabaseInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1934 : Ojs.t) -> intf_of_js __tags_of_js x1934
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1932 : __tags intf) -> intf_to_js __tags_to_js x1932
    let (get_name : 'tags this -> string) =
      fun (x1936 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1936) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x1938 : 'tags this) ->
        fun (x1939 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1938) "name"
            (Ojs.string_to_js x1939)
    let (get_version : 'tags this -> float) =
      fun (x1941 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1941) "version")
    let (set_version : 'tags this -> float -> unit) =
      fun (x1943 : 'tags this) ->
        fun (x1944 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1943) "version"
            (Ojs.float_to_js x1944)
    let cast_from = Obj.magic
  end
module IndexedDBStatic =
  struct
    let (cmp : first:any -> second:any -> float) =
      fun ~first:(x1946 : any) ->
        fun ~second:(x1947 : any) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "cmp"
               [|(any_to_js x1946);(any_to_js x1947)|])
    let (databases : unit -> IDBDatabaseInfo.t list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x1948 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x1948)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "databases"
             [||])
    let (deleteDatabase : string -> IDBOpenDBRequest.t) =
      fun (x1950 : string) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB")
             "deleteDatabase" [|(Ojs.string_to_js x1950)|])
    let (open_ : name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun ~name:(x1951 : string) ->
        fun ?version:(x1952 : float option) ->
          fun () ->
            IDBOpenDBRequest.t_of_js
              (let x1955 = Ojs.get_prop_ascii Ojs.global "indexedDB" in
               Ojs.call (Ojs.get_prop_ascii x1955 "open") "apply"
                 [|x1955;((let x1953 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1953 "push"
                                [|(Ojs.string_to_js x1951)|]);
                           (match x1952 with
                            | Some x1954 ->
                                ignore
                                  (Ojs.call x1953 "push"
                                     [|(Ojs.float_to_js x1954)|])
                            | None -> ());
                           x1953))|])
  end
module FontFaceSetLoadStatus =
  struct
    type t = [ `L_s101_loaded  | `L_s103_loading ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1957 : Ojs.t) ->
        let x1958 = x1957 in
        match Ojs.string_of_js x1958 with
        | "loaded" -> `L_s101_loaded
        | "loading" -> `L_s103_loading
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1956 : [ `L_s101_loaded  | `L_s103_loading ]) ->
        match x1956 with
        | `L_s101_loaded -> Ojs.string_to_js "loaded"
        | `L_s103_loading -> Ojs.string_to_js "loading"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1960 : Ojs.t) -> t_of_js x1960
    and t_0_to_js : t_0 -> Ojs.t = fun (x1959 : t) -> t_to_js x1959
  end
module FontFaceLoadStatus =
  struct
    type t =
      [ `L_s67_error  | `L_s101_loaded  | `L_s103_loading 
      | `L_s198_unloaded ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1962 : Ojs.t) ->
        let x1963 = x1962 in
        match Ojs.string_of_js x1963 with
        | "error" -> `L_s67_error
        | "loaded" -> `L_s101_loaded
        | "loading" -> `L_s103_loading
        | "unloaded" -> `L_s198_unloaded
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1961 :
          [ `L_s67_error  | `L_s101_loaded  | `L_s103_loading 
          | `L_s198_unloaded ])
        ->
        match x1961 with
        | `L_s67_error -> Ojs.string_to_js "error"
        | `L_s101_loaded -> Ojs.string_to_js "loaded"
        | `L_s103_loading -> Ojs.string_to_js "loading"
        | `L_s198_unloaded -> Ojs.string_to_js "unloaded"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1965 : Ojs.t) -> t_of_js x1965
    and t_0_to_js : t_0 -> Ojs.t = fun (x1964 : t) -> t_to_js x1964
  end
module FontFaceDescriptors =
  struct
    type t = [ `FontFaceDescriptors ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1967 : Ojs.t) -> t_of_js x1967
    and t_0_to_js : t_0 -> Ojs.t = fun (x1966 : t) -> t_to_js x1966
    type tags = [ `FontFaceDescriptors ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1970 : Ojs.t) -> intf_of_js __tags_of_js x1970
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1968 : __tags intf) -> intf_to_js __tags_to_js x1968
    let (get_display : 'tags this -> string) =
      fun (x1972 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1972) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x1974 : 'tags this) ->
        fun (x1975 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1974) "display"
            (Ojs.string_to_js x1975)
    let (get_featureSettings : 'tags this -> string) =
      fun (x1977 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1977) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x1979 : 'tags this) ->
        fun (x1980 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1979) "featureSettings"
            (Ojs.string_to_js x1980)
    let (get_stretch : 'tags this -> string) =
      fun (x1982 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1982) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x1984 : 'tags this) ->
        fun (x1985 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1984) "stretch"
            (Ojs.string_to_js x1985)
    let (get_style : 'tags this -> string) =
      fun (x1987 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1987) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x1989 : 'tags this) ->
        fun (x1990 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1989) "style"
            (Ojs.string_to_js x1990)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x1992 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1992) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x1994 : 'tags this) ->
        fun (x1995 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1994) "unicodeRange"
            (Ojs.string_to_js x1995)
    let (get_variant : 'tags this -> string) =
      fun (x1997 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1997) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x1999 : 'tags this) ->
        fun (x2000 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1999) "variant"
            (Ojs.string_to_js x2000)
    let (get_weight : 'tags this -> string) =
      fun (x2002 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2002) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2004 : 'tags this) ->
        fun (x2005 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2004) "weight"
            (Ojs.string_to_js x2005)
    let cast_from = Obj.magic
  end
module BinaryData =
  struct
    type t = (ArrayBuffer.t_0, ArrayBufferView.t_0) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x2010 : Ojs.t) ->
        union2_of_js ArrayBuffer.t_0_of_js ArrayBufferView.t_0_of_js x2010
    and t_to_js : t -> Ojs.t =
      fun (x2007 : (ArrayBuffer.t_0, ArrayBufferView.t_0) union2) ->
        union2_to_js ArrayBuffer.t_0_to_js ArrayBufferView.t_0_to_js x2007
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2014 : Ojs.t) -> t_of_js x2014
    and t_0_to_js : t_0 -> Ojs.t = fun (x2013 : t) -> t_to_js x2013
  end
module rec
  AnonymousInterface38:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FontFace.t
                         val set_prototype : t -> FontFace.t -> unit
                         val create :
                           t ->
                             family:string ->
                               source:BinaryData.t or_string ->
                                 ?descriptors:FontFaceDescriptors.t ->
                                   unit -> FontFace.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2016 : Ojs.t) -> x2016
    and t_to_js : t -> Ojs.t = fun (x2015 : Ojs.t) -> x2015
    let (get_prototype : t -> FontFace.t) =
      fun (x2017 : t) ->
        FontFace.t_of_js (Ojs.get_prop_ascii (t_to_js x2017) "prototype")
    let (set_prototype : t -> FontFace.t -> unit) =
      fun (x2018 : t) ->
        fun (x2019 : FontFace.t) ->
          Ojs.set_prop_ascii (t_to_js x2018) "prototype"
            (FontFace.t_to_js x2019)
    let (create :
      t ->
        family:string ->
          source:BinaryData.t or_string ->
            ?descriptors:FontFaceDescriptors.t -> unit -> FontFace.t)
      =
      fun (x2026 : t) ->
        fun ~family:(x2020 : string) ->
          fun ~source:(x2021 : BinaryData.t or_string) ->
            fun ?descriptors:(x2022 : FontFaceDescriptors.t option) ->
              fun () ->
                FontFace.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2026)
                     (let x2023 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2023 "push" [|(Ojs.string_to_js x2020)|]);
                      ignore
                        (Ojs.call x2023 "push"
                           [|(or_string_to_js BinaryData.t_to_js x2021)|]);
                      (match x2022 with
                       | Some x2024 ->
                           ignore
                             (Ojs.call x2023 "push"
                                [|(FontFaceDescriptors.t_to_js x2024)|])
                       | None -> ());
                      x2023))
  end
 and
  FontFace:sig
             type t = [ `FontFace ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `FontFace ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem type tags = [ `FontFace ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_ascentOverride : 'tags this -> string
             val set_ascentOverride : 'tags this -> string -> unit
             val get_descentOverride : 'tags this -> string
             val set_descentOverride : 'tags this -> string -> unit
             val get_display : 'tags this -> string
             val set_display : 'tags this -> string -> unit
             val get_family : 'tags this -> string
             val set_family : 'tags this -> string -> unit
             val get_featureSettings : 'tags this -> string
             val set_featureSettings : 'tags this -> string -> unit
             val get_lineGapOverride : 'tags this -> string
             val set_lineGapOverride : 'tags this -> string -> unit
             val get_loaded : 'tags this -> t Promise.t_1
             val get_status : 'tags this -> FontFaceLoadStatus.t
             val get_stretch : 'tags this -> string
             val set_stretch : 'tags this -> string -> unit
             val get_style : 'tags this -> string
             val set_style : 'tags this -> string -> unit
             val get_unicodeRange : 'tags this -> string
             val set_unicodeRange : 'tags this -> string -> unit
             val get_variant : 'tags this -> string
             val set_variant : 'tags this -> string -> unit
             val get_variationSettings : 'tags this -> string
             val set_variationSettings : 'tags this -> string -> unit
             val get_weight : 'tags this -> string
             val set_weight : 'tags this -> string -> unit
             val load : 'tags this -> t Promise.t_1
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create :
               family:string ->
                 source:BinaryData.t or_string ->
                   ?descriptors:FontFaceDescriptors.t -> unit -> t
           end =
  struct
    type t = [ `FontFace ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2028 : Ojs.t) -> t_of_js x2028
    and t_0_to_js : t_0 -> Ojs.t = fun (x2027 : t) -> t_to_js x2027
    type tags = [ `FontFace ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2031 : Ojs.t) -> intf_of_js __tags_of_js x2031
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2029 : __tags intf) -> intf_to_js __tags_to_js x2029
    let (get_ascentOverride : 'tags this -> string) =
      fun (x2033 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2033) "ascentOverride")
    let (set_ascentOverride : 'tags this -> string -> unit) =
      fun (x2035 : 'tags this) ->
        fun (x2036 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2035) "ascentOverride"
            (Ojs.string_to_js x2036)
    let (get_descentOverride : 'tags this -> string) =
      fun (x2038 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2038) "descentOverride")
    let (set_descentOverride : 'tags this -> string -> unit) =
      fun (x2040 : 'tags this) ->
        fun (x2041 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2040) "descentOverride"
            (Ojs.string_to_js x2041)
    let (get_display : 'tags this -> string) =
      fun (x2043 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2043) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x2045 : 'tags this) ->
        fun (x2046 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2045) "display"
            (Ojs.string_to_js x2046)
    let (get_family : 'tags this -> string) =
      fun (x2048 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2048) "family")
    let (set_family : 'tags this -> string -> unit) =
      fun (x2050 : 'tags this) ->
        fun (x2051 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2050) "family"
            (Ojs.string_to_js x2051)
    let (get_featureSettings : 'tags this -> string) =
      fun (x2053 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2053) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x2055 : 'tags this) ->
        fun (x2056 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2055) "featureSettings"
            (Ojs.string_to_js x2056)
    let (get_lineGapOverride : 'tags this -> string) =
      fun (x2058 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2058) "lineGapOverride")
    let (set_lineGapOverride : 'tags this -> string -> unit) =
      fun (x2060 : 'tags this) ->
        fun (x2061 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2060) "lineGapOverride"
            (Ojs.string_to_js x2061)
    let (get_loaded : 'tags this -> t Promise.t_1) =
      fun (x2063 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2063) "loaded")
    let (get_status : 'tags this -> FontFaceLoadStatus.t) =
      fun (x2066 : 'tags this) ->
        FontFaceLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2066) "status")
    let (get_stretch : 'tags this -> string) =
      fun (x2068 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2068) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x2070 : 'tags this) ->
        fun (x2071 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2070) "stretch"
            (Ojs.string_to_js x2071)
    let (get_style : 'tags this -> string) =
      fun (x2073 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2073) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x2075 : 'tags this) ->
        fun (x2076 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2075) "style"
            (Ojs.string_to_js x2076)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x2078 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2078) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x2080 : 'tags this) ->
        fun (x2081 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2080) "unicodeRange"
            (Ojs.string_to_js x2081)
    let (get_variant : 'tags this -> string) =
      fun (x2083 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2083) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x2085 : 'tags this) ->
        fun (x2086 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2085) "variant"
            (Ojs.string_to_js x2086)
    let (get_variationSettings : 'tags this -> string) =
      fun (x2088 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2088)
             "variationSettings")
    let (set_variationSettings : 'tags this -> string -> unit) =
      fun (x2090 : 'tags this) ->
        fun (x2091 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2090) "variationSettings"
            (Ojs.string_to_js x2091)
    let (get_weight : 'tags this -> string) =
      fun (x2093 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2093) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2095 : 'tags this) ->
        fun (x2096 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2095) "weight"
            (Ojs.string_to_js x2096)
    let (load : 'tags this -> t Promise.t_1) =
      fun (x2098 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x2098) "load" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFace")
             "prototype")
    let (create :
      family:string ->
        source:BinaryData.t or_string ->
          ?descriptors:FontFaceDescriptors.t -> unit -> t)
      =
      fun ~family:(x2101 : string) ->
        fun ~source:(x2102 : BinaryData.t or_string) ->
          fun ?descriptors:(x2103 : FontFaceDescriptors.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "FontFace")
                   (let x2104 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2104 "push" [|(Ojs.string_to_js x2101)|]);
                    ignore
                      (Ojs.call x2104 "push"
                         [|(or_string_to_js BinaryData.t_to_js x2102)|]);
                    (match x2103 with
                     | Some x2105 ->
                         ignore
                           (Ojs.call x2104 "push"
                              [|(FontFaceDescriptors.t_to_js x2105)|])
                     | None -> ());
                    x2104))
  end
module rec
  AnonymousInterface39:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FontFaceSet.t
                         val set_prototype : t -> FontFaceSet.t -> unit
                         val create :
                           t -> initialFaces:FontFace.t list -> FontFaceSet.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2108 : Ojs.t) -> x2108
    and t_to_js : t -> Ojs.t = fun (x2107 : Ojs.t) -> x2107
    let (get_prototype : t -> FontFaceSet.t) =
      fun (x2109 : t) ->
        FontFaceSet.t_of_js (Ojs.get_prop_ascii (t_to_js x2109) "prototype")
    let (set_prototype : t -> FontFaceSet.t -> unit) =
      fun (x2110 : t) ->
        fun (x2111 : FontFaceSet.t) ->
          Ojs.set_prop_ascii (t_to_js x2110) "prototype"
            (FontFaceSet.t_to_js x2111)
    let (create : t -> initialFaces:FontFace.t list -> FontFaceSet.t) =
      fun (x2114 : t) ->
        fun ~initialFaces:(x2112 : FontFace.t list) ->
          FontFaceSet.t_of_js
            (Ojs.new_obj (t_to_js x2114)
               [|(Ojs.list_to_js FontFace.t_to_js x2112)|])
  end
 and
  FontFaceSet:sig
                type t =
                  [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1]
                    intf
                type t_0 = t
                [@@@js.stop ]
                type tags =
                  [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags =
                    [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `FontFaceSet ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_onloading :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onloading :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_onloadingdone :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onloadingdone :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_onloadingerror :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onloadingerror :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_ready : 'tags this -> t Promise.t_1
                val get_status : 'tags this -> FontFaceSetLoadStatus.t
                val check :
                  'tags this -> font:string -> ?text:string -> unit -> bool
                val load :
                  'tags this ->
                    font:string ->
                      ?text:string -> unit -> FontFace.t list Promise.t_1
                val forEach :
                  'tags this ->
                    callbackfn:(value:FontFace.t ->
                                  key:FontFace.t -> parent:t -> unit)
                      -> ?thisArg:any -> unit -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : FontFace.t list -> t
              end =
  struct
    type t = [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2116 : Ojs.t) -> t_of_js x2116
    and t_0_to_js : t_0 -> Ojs.t = fun (x2115 : t) -> t_to_js x2115
    type tags = [ `EventTarget  | `FontFaceSet  | FontFace.t Set.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2119 : Ojs.t) -> intf_of_js __tags_of_js x2119
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2117 : __tags intf) -> intf_to_js __tags_to_js x2117
    let (get_onloading : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x2121 : 'tags this) ->
        or_null_of_js
          (fun (x2123 : Ojs.t) ->
             fun ~this:(x2124 : t) ->
               fun ~ev:(x2125 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2123 [|(t_to_js x2124);(Event.t_to_js x2125)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2121) "onloading")
    let (set_onloading :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x2126 : 'tags this) ->
        fun (x2127 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2126) "onloading"
            (or_null_to_js
               (fun (x2128 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2129 : Ojs.t) ->
                       fun (x2130 : Ojs.t) ->
                         any_to_js
                           (x2128 ~this:(t_of_js x2129)
                              ~ev:(Event.t_of_js x2130)))) x2127)
    let (get_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x2132 : 'tags this) ->
        or_null_of_js
          (fun (x2134 : Ojs.t) ->
             fun ~this:(x2135 : t) ->
               fun ~ev:(x2136 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2134 [|(t_to_js x2135);(Event.t_to_js x2136)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2132) "onloadingdone")
    let (set_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x2137 : 'tags this) ->
        fun (x2138 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2137) "onloadingdone"
            (or_null_to_js
               (fun (x2139 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2140 : Ojs.t) ->
                       fun (x2141 : Ojs.t) ->
                         any_to_js
                           (x2139 ~this:(t_of_js x2140)
                              ~ev:(Event.t_of_js x2141)))) x2138)
    let (get_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x2143 : 'tags this) ->
        or_null_of_js
          (fun (x2145 : Ojs.t) ->
             fun ~this:(x2146 : t) ->
               fun ~ev:(x2147 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2145 [|(t_to_js x2146);(Event.t_to_js x2147)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2143) "onloadingerror")
    let (set_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x2148 : 'tags this) ->
        fun (x2149 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2148) "onloadingerror"
            (or_null_to_js
               (fun (x2150 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2151 : Ojs.t) ->
                       fun (x2152 : Ojs.t) ->
                         any_to_js
                           (x2150 ~this:(t_of_js x2151)
                              ~ev:(Event.t_of_js x2152)))) x2149)
    let (get_ready : 'tags this -> t Promise.t_1) =
      fun (x2154 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2154) "ready")
    let (get_status : 'tags this -> FontFaceSetLoadStatus.t) =
      fun (x2157 : 'tags this) ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2157) "status")
    let (check : 'tags this -> font:string -> ?text:string -> unit -> bool) =
      fun (x2163 : 'tags this) ->
        fun ~font:(x2159 : string) ->
          fun ?text:(x2160 : string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2165 = this_to_js Obj.magic x2163 in
                 Ojs.call (Ojs.get_prop_ascii x2165 "check") "apply"
                   [|x2165;((let x2161 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2161 "push"
                                  [|(Ojs.string_to_js x2159)|]);
                             (match x2160 with
                              | Some x2162 ->
                                  ignore
                                    (Ojs.call x2161 "push"
                                       [|(Ojs.string_to_js x2162)|])
                              | None -> ());
                             x2161))|])
    let (load :
      'tags this ->
        font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1)
      =
      fun (x2170 : 'tags this) ->
        fun ~font:(x2166 : string) ->
          fun ?text:(x2167 : string option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x2173 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2173)
                (let x2172 = this_to_js Obj.magic x2170 in
                 Ojs.call (Ojs.get_prop_ascii x2172 "load") "apply"
                   [|x2172;((let x2168 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2168 "push"
                                  [|(Ojs.string_to_js x2166)|]);
                             (match x2167 with
                              | Some x2169 ->
                                  ignore
                                    (Ojs.call x2168 "push"
                                       [|(Ojs.string_to_js x2169)|])
                              | None -> ());
                             x2168))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x2182 : 'tags this) ->
        fun
          ~callbackfn:(x2175 :
                        value:FontFace.t ->
                          key:FontFace.t -> parent:t -> unit)
          ->
          fun ?thisArg:(x2176 : any option) ->
            fun () ->
              ignore
                (let x2184 = this_to_js Obj.magic x2182 in
                 Ojs.call (Ojs.get_prop_ascii x2184 "forEach") "apply"
                   [|x2184;((let x2177 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2177 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2179 : Ojs.t) ->
                                          fun (x2180 : Ojs.t) ->
                                            fun (x2181 : Ojs.t) ->
                                              x2175
                                                ~value:(FontFace.t_of_js
                                                          x2179)
                                                ~key:(FontFace.t_of_js x2180)
                                                ~parent:(t_of_js x2181)))|]);
                             (match x2176 with
                              | Some x2178 ->
                                  ignore
                                    (Ojs.call x2177 "push"
                                       [|(any_to_js x2178)|])
                              | None -> ());
                             x2177))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2193 : 'tags this) ->
        fun ~type_:(x2185 : 'K) ->
          fun ~listener:(x2186 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2187 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2195 = this_to_js Obj.magic x2193 in
                   Ojs.call (Ojs.get_prop_ascii x2195 "addEventListener")
                     "apply"
                     [|x2195;((let x2188 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2188 "push" [|(Obj.magic x2185)|]);
                               ignore
                                 (Ojs.call x2188 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2191 : Ojs.t) ->
                                            fun (x2192 : Ojs.t) ->
                                              any_to_js
                                                (x2186 ~this:(t_of_js x2191)
                                                   ~ev:(any_of_js x2192))))|]);
                               (match x2187 with
                                | Some x2189 ->
                                    ignore
                                      (Ojs.call x2188 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x2189)|])
                                | None -> ());
                               x2188))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2202 : 'tags this) ->
        fun ~type_:(x2196 : string) ->
          fun ~listener:(x2197 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2198 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2204 = this_to_js Obj.magic x2202 in
                   Ojs.call (Ojs.get_prop_ascii x2204 "addEventListener")
                     "apply"
                     [|x2204;((let x2199 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2199 "push"
                                    [|(Ojs.string_to_js x2196)|]);
                               ignore
                                 (Ojs.call x2199 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2197)|]);
                               (match x2198 with
                                | Some x2200 ->
                                    ignore
                                      (Ojs.call x2199 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x2200)|])
                                | None -> ());
                               x2199))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2213 : 'tags this) ->
        fun ~type_:(x2205 : 'K) ->
          fun ~listener:(x2206 : this:t -> ev:any -> any) ->
            fun ?options:(x2207 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2215 = this_to_js Obj.magic x2213 in
                   Ojs.call (Ojs.get_prop_ascii x2215 "removeEventListener")
                     "apply"
                     [|x2215;((let x2208 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2208 "push" [|(Obj.magic x2205)|]);
                               ignore
                                 (Ojs.call x2208 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2211 : Ojs.t) ->
                                            fun (x2212 : Ojs.t) ->
                                              any_to_js
                                                (x2206 ~this:(t_of_js x2211)
                                                   ~ev:(any_of_js x2212))))|]);
                               (match x2207 with
                                | Some x2209 ->
                                    ignore
                                      (Ojs.call x2208 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x2209)|])
                                | None -> ());
                               x2208))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2222 : 'tags this) ->
        fun ~type_:(x2216 : string) ->
          fun ~listener:(x2217 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x2218 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2224 = this_to_js Obj.magic x2222 in
                   Ojs.call (Ojs.get_prop_ascii x2224 "removeEventListener")
                     "apply"
                     [|x2224;((let x2219 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2219 "push"
                                    [|(Ojs.string_to_js x2216)|]);
                               ignore
                                 (Ojs.call x2219 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2217)|]);
                               (match x2218 with
                                | Some x2220 ->
                                    ignore
                                      (Ojs.call x2219 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x2220)|])
                                | None -> ());
                               x2219))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             "prototype")
    let (create : FontFace.t list -> t) =
      fun (x2225 : FontFace.t list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             [|(Ojs.list_to_js FontFace.t_to_js x2225)|])
  end
module FontsStatic =
  struct
    let (onloading :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x2227 : Ojs.t) ->
             fun ~this:(x2228 : FontFaceSet.t) ->
               fun ~ev:(x2229 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2227
                      [|(FontFaceSet.t_to_js x2228);(Event.t_to_js x2229)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloading")
    let (onloadingdone :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x2230 : Ojs.t) ->
             fun ~this:(x2231 : FontFaceSet.t) ->
               fun ~ev:(x2232 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2230
                      [|(FontFaceSet.t_to_js x2231);(Event.t_to_js x2232)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingdone")
    let (onloadingerror :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x2233 : Ojs.t) ->
             fun ~this:(x2234 : FontFaceSet.t) ->
               fun ~ev:(x2235 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2233
                      [|(FontFaceSet.t_to_js x2234);(Event.t_to_js x2235)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingerror")
    let (ready : unit -> FontFaceSet.t Promise.t_1) =
      fun () ->
        Promise.t_1_of_js FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts") "ready")
    let (status : unit -> FontFaceSetLoadStatus.t) =
      fun () ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "status")
    let (check : font:string -> ?text:string -> unit -> bool) =
      fun ~font:(x2237 : string) ->
        fun ?text:(x2238 : string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x2241 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2241 "check") "apply"
                 [|x2241;((let x2239 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2239 "push"
                                [|(Ojs.string_to_js x2237)|]);
                           (match x2238 with
                            | Some x2240 ->
                                ignore
                                  (Ojs.call x2239 "push"
                                     [|(Ojs.string_to_js x2240)|])
                            | None -> ());
                           x2239))|])
    let (load :
      font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1) =
      fun ~font:(x2242 : string) ->
        fun ?text:(x2243 : string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x2247 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2247)
              (let x2246 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2246 "load") "apply"
                 [|x2246;((let x2244 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2244 "push"
                                [|(Ojs.string_to_js x2242)|]);
                           (match x2243 with
                            | Some x2245 ->
                                ignore
                                  (Ojs.call x2244 "push"
                                     [|(Ojs.string_to_js x2245)|])
                            | None -> ());
                           x2244))|])
    let (forEach :
      callbackfn:(value:FontFace.t ->
                    key:FontFace.t -> parent:FontFaceSet.t -> unit)
        -> ?thisArg:any -> unit -> unit)
      =
      fun
        ~callbackfn:(x2249 :
                      value:FontFace.t ->
                        key:FontFace.t -> parent:FontFaceSet.t -> unit)
        ->
        fun ?thisArg:(x2250 : any option) ->
          fun () ->
            ignore
              (let x2256 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2256 "forEach") "apply"
                 [|x2256;((let x2251 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2251 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x2253 : Ojs.t) ->
                                        fun (x2254 : Ojs.t) ->
                                          fun (x2255 : Ojs.t) ->
                                            x2249
                                              ~value:(FontFace.t_of_js x2253)
                                              ~key:(FontFace.t_of_js x2254)
                                              ~parent:(FontFaceSet.t_of_js
                                                         x2255)))|]);
                           (match x2250 with
                            | Some x2252 ->
                                ignore
                                  (Ojs.call x2251 "push"
                                     [|(any_to_js x2252)|])
                            | None -> ());
                           x2251))|])
    let (addEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2257 : 'K) ->
        fun ~listener:(x2258 : this:FontFaceSet.t -> ev:any -> any) ->
          fun ?options:(x2259 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x2265 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2265 "addEventListener")
                   "apply"
                   [|x2265;((let x2260 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2260 "push" [|(Obj.magic x2257)|]);
                             ignore
                               (Ojs.call x2260 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2263 : Ojs.t) ->
                                          fun (x2264 : Ojs.t) ->
                                            any_to_js
                                              (x2258
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2263)
                                                 ~ev:(any_of_js x2264))))|]);
                             (match x2259 with
                              | Some x2261 ->
                                  ignore
                                    (Ojs.call x2260 "push"
                                       [|(or_boolean_to_js
                                            AddEventListenerOptions.t_to_js
                                            x2261)|])
                              | None -> ());
                             x2260))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2266 : string) ->
        fun ~listener:(x2267 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x2268 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x2272 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2272 "addEventListener")
                   "apply"
                   [|x2272;((let x2269 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2269 "push"
                                  [|(Ojs.string_to_js x2266)|]);
                             ignore
                               (Ojs.call x2269 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2267)|]);
                             (match x2268 with
                              | Some x2270 ->
                                  ignore
                                    (Ojs.call x2269 "push"
                                       [|(or_boolean_to_js
                                            AddEventListenerOptions.t_to_js
                                            x2270)|])
                              | None -> ());
                             x2269))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2273 : 'K) ->
        fun ~listener:(x2274 : this:FontFaceSet.t -> ev:any -> any) ->
          fun ?options:(x2275 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x2281 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2281 "removeEventListener")
                   "apply"
                   [|x2281;((let x2276 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2276 "push" [|(Obj.magic x2273)|]);
                             ignore
                               (Ojs.call x2276 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2279 : Ojs.t) ->
                                          fun (x2280 : Ojs.t) ->
                                            any_to_js
                                              (x2274
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2279)
                                                 ~ev:(any_of_js x2280))))|]);
                             (match x2275 with
                              | Some x2277 ->
                                  ignore
                                    (Ojs.call x2276 "push"
                                       [|(or_boolean_to_js
                                            EventListenerOptions.t_to_js
                                            x2277)|])
                              | None -> ());
                             x2276))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2282 : string) ->
        fun ~listener:(x2283 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x2284 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x2288 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2288 "removeEventListener")
                   "apply"
                   [|x2288;((let x2285 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2285 "push"
                                  [|(Ojs.string_to_js x2282)|]);
                             ignore
                               (Ojs.call x2285 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2283)|]);
                             (match x2284 with
                              | Some x2286 ->
                                  ignore
                                    (Ojs.call x2285 "push"
                                       [|(or_boolean_to_js
                                            EventListenerOptions.t_to_js
                                            x2286)|])
                              | None -> ());
                             x2285))|])
  end
module Algorithm =
  struct
    type t = [ `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2290 : Ojs.t) -> t_of_js x2290
    and t_0_to_js : t_0 -> Ojs.t = fun (x2289 : t) -> t_to_js x2289
    type tags = [ `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2293 : Ojs.t) -> intf_of_js __tags_of_js x2293
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2291 : __tags intf) -> intf_to_js __tags_to_js x2291
    let (get_name : 'tags this -> string) =
      fun (x2295 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2295) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2297 : 'tags this) ->
        fun (x2298 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2297) "name"
            (Ojs.string_to_js x2298)
    let cast_from = Obj.magic
  end
module RsaPssParams =
  struct
    type t = [ `Algorithm  | `RsaPssParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2301 : Ojs.t) -> t_of_js x2301
    and t_0_to_js : t_0 -> Ojs.t = fun (x2300 : t) -> t_to_js x2300
    type tags = [ `Algorithm  | `RsaPssParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2304 : Ojs.t) -> intf_of_js __tags_of_js x2304
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2302 : __tags intf) -> intf_to_js __tags_to_js x2302
    let (get_saltLength : 'tags this -> float) =
      fun (x2306 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2306) "saltLength")
    let (set_saltLength : 'tags this -> float -> unit) =
      fun (x2308 : 'tags this) ->
        fun (x2309 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2308) "saltLength"
            (Ojs.float_to_js x2309)
    let cast_from = Obj.magic
  end
module RsaOaepParams =
  struct
    type t = [ `Algorithm  | `RsaOaepParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2312 : Ojs.t) -> t_of_js x2312
    and t_0_to_js : t_0 -> Ojs.t = fun (x2311 : t) -> t_to_js x2311
    type tags = [ `Algorithm  | `RsaOaepParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2315 : Ojs.t) -> intf_of_js __tags_of_js x2315
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2313 : __tags intf) -> intf_to_js __tags_to_js x2313
    let (get_label : 'tags this -> BufferSource.t) =
      fun (x2317 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2317) "label")
    let (set_label : 'tags this -> BufferSource.t -> unit) =
      fun (x2319 : 'tags this) ->
        fun (x2320 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2319) "label"
            (BufferSource.t_to_js x2320)
    let cast_from = Obj.magic
  end
module BigInteger =
  struct
    type t = Uint8Array.t_0
    let rec t_of_js : Ojs.t -> t =
      fun (x2323 : Ojs.t) -> Uint8Array.t_0_of_js x2323
    and t_to_js : t -> Ojs.t =
      fun (x2322 : Uint8Array.t_0) -> Uint8Array.t_0_to_js x2322
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2325 : Ojs.t) -> t_of_js x2325
    and t_0_to_js : t_0 -> Ojs.t = fun (x2324 : t) -> t_to_js x2324
  end
module RsaKeyGenParams =
  struct
    type t = [ `Algorithm  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2327 : Ojs.t) -> t_of_js x2327
    and t_0_to_js : t_0 -> Ojs.t = fun (x2326 : t) -> t_to_js x2326
    type tags = [ `Algorithm  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2330 : Ojs.t) -> intf_of_js __tags_of_js x2330
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2328 : __tags intf) -> intf_to_js __tags_to_js x2328
    let (get_modulusLength : 'tags this -> float) =
      fun (x2332 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2332) "modulusLength")
    let (set_modulusLength : 'tags this -> float -> unit) =
      fun (x2334 : 'tags this) ->
        fun (x2335 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2334) "modulusLength"
            (Ojs.float_to_js x2335)
    let (get_publicExponent : 'tags this -> BigInteger.t) =
      fun (x2337 : 'tags this) ->
        BigInteger.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2337) "publicExponent")
    let (set_publicExponent : 'tags this -> BigInteger.t -> unit) =
      fun (x2339 : 'tags this) ->
        fun (x2340 : BigInteger.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2339) "publicExponent"
            (BigInteger.t_to_js x2340)
    let cast_from = Obj.magic
  end
module AlgorithmIdentifier =
  struct
    type t = Algorithm.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x2344 : Ojs.t) -> or_string_of_js Algorithm.t_of_js x2344
    and t_to_js : t -> Ojs.t =
      fun (x2342 : Algorithm.t or_string) ->
        or_string_to_js Algorithm.t_to_js x2342
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2347 : Ojs.t) -> t_of_js x2347
    and t_0_to_js : t_0 -> Ojs.t = fun (x2346 : t) -> t_to_js x2346
  end
module HashAlgorithmIdentifier =
  struct
    type t = AlgorithmIdentifier.t
    let rec t_of_js : Ojs.t -> t =
      fun (x2349 : Ojs.t) -> AlgorithmIdentifier.t_of_js x2349
    and t_to_js : t -> Ojs.t =
      fun (x2348 : AlgorithmIdentifier.t) ->
        AlgorithmIdentifier.t_to_js x2348
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2351 : Ojs.t) -> t_of_js x2351
    and t_0_to_js : t_0 -> Ojs.t = fun (x2350 : t) -> t_to_js x2350
  end
module RsaHashedKeyGenParams =
  struct
    type t =
      [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2353 : Ojs.t) -> t_of_js x2353
    and t_0_to_js : t_0 -> Ojs.t = fun (x2352 : t) -> t_to_js x2352
    type tags = [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2356 : Ojs.t) -> intf_of_js __tags_of_js x2356
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2354 : __tags intf) -> intf_to_js __tags_to_js x2354
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2358 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2358) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2360 : 'tags this) ->
        fun (x2361 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2360) "hash"
            (HashAlgorithmIdentifier.t_to_js x2361)
    let cast_from = Obj.magic
  end
module RsaHashedImportParams =
  struct
    type t = [ `Algorithm  | `RsaHashedImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2364 : Ojs.t) -> t_of_js x2364
    and t_0_to_js : t_0 -> Ojs.t = fun (x2363 : t) -> t_to_js x2363
    type tags = [ `Algorithm  | `RsaHashedImportParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2367 : Ojs.t) -> intf_of_js __tags_of_js x2367
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2365 : __tags intf) -> intf_to_js __tags_to_js x2365
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2369 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2369) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2371 : 'tags this) ->
        fun (x2372 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2371) "hash"
            (HashAlgorithmIdentifier.t_to_js x2372)
    let cast_from = Obj.magic
  end
module Pbkdf2Params =
  struct
    type t = [ `Algorithm  | `Pbkdf2Params ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2375 : Ojs.t) -> t_of_js x2375
    and t_0_to_js : t_0 -> Ojs.t = fun (x2374 : t) -> t_to_js x2374
    type tags = [ `Algorithm  | `Pbkdf2Params ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2378 : Ojs.t) -> intf_of_js __tags_of_js x2378
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2376 : __tags intf) -> intf_to_js __tags_to_js x2376
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2380 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2380) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2382 : 'tags this) ->
        fun (x2383 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2382) "hash"
            (HashAlgorithmIdentifier.t_to_js x2383)
    let (get_iterations : 'tags this -> float) =
      fun (x2385 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2385) "iterations")
    let (set_iterations : 'tags this -> float -> unit) =
      fun (x2387 : 'tags this) ->
        fun (x2388 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2387) "iterations"
            (Ojs.float_to_js x2388)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2390 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2390) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2392 : 'tags this) ->
        fun (x2393 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2392) "salt"
            (BufferSource.t_to_js x2393)
    let cast_from = Obj.magic
  end
module KeyFormat =
  struct
    type t = [ `L_s98_jwk  | `L_s151_pkcs8  | `L_s161_raw  | `L_s183_spki ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2396 : Ojs.t) ->
        let x2397 = x2396 in
        match Ojs.string_of_js x2397 with
        | "jwk" -> `L_s98_jwk
        | "pkcs8" -> `L_s151_pkcs8
        | "raw" -> `L_s161_raw
        | "spki" -> `L_s183_spki
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2395 :
          [ `L_s98_jwk  | `L_s151_pkcs8  | `L_s161_raw  | `L_s183_spki ])
        ->
        match x2395 with
        | `L_s98_jwk -> Ojs.string_to_js "jwk"
        | `L_s151_pkcs8 -> Ojs.string_to_js "pkcs8"
        | `L_s161_raw -> Ojs.string_to_js "raw"
        | `L_s183_spki -> Ojs.string_to_js "spki"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2399 : Ojs.t) -> t_of_js x2399
    and t_0_to_js : t_0 -> Ojs.t = fun (x2398 : t) -> t_to_js x2398
  end
module RsaOtherPrimesInfo =
  struct
    type t = [ `RsaOtherPrimesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2401 : Ojs.t) -> t_of_js x2401
    and t_0_to_js : t_0 -> Ojs.t = fun (x2400 : t) -> t_to_js x2400
    type tags = [ `RsaOtherPrimesInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2404 : Ojs.t) -> intf_of_js __tags_of_js x2404
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2402 : __tags intf) -> intf_to_js __tags_to_js x2402
    let (get_d : 'tags this -> string) =
      fun (x2406 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2406) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2408 : 'tags this) ->
        fun (x2409 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2408) "d"
            (Ojs.string_to_js x2409)
    let (get_r : 'tags this -> string) =
      fun (x2411 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2411) "r")
    let (set_r : 'tags this -> string -> unit) =
      fun (x2413 : 'tags this) ->
        fun (x2414 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2413) "r"
            (Ojs.string_to_js x2414)
    let (get_t : 'tags this -> string) =
      fun (x2416 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2416) "t")
    let (set_t : 'tags this -> string -> unit) =
      fun (x2418 : 'tags this) ->
        fun (x2419 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2418) "t"
            (Ojs.string_to_js x2419)
    let cast_from = Obj.magic
  end
module JsonWebKey =
  struct
    type t = [ `JsonWebKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2422 : Ojs.t) -> t_of_js x2422
    and t_0_to_js : t_0 -> Ojs.t = fun (x2421 : t) -> t_to_js x2421
    type tags = [ `JsonWebKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2425 : Ojs.t) -> intf_of_js __tags_of_js x2425
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2423 : __tags intf) -> intf_to_js __tags_to_js x2423
    let (get_alg : 'tags this -> string) =
      fun (x2427 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2427) "alg")
    let (set_alg : 'tags this -> string -> unit) =
      fun (x2429 : 'tags this) ->
        fun (x2430 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2429) "alg"
            (Ojs.string_to_js x2430)
    let (get_crv : 'tags this -> string) =
      fun (x2432 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2432) "crv")
    let (set_crv : 'tags this -> string -> unit) =
      fun (x2434 : 'tags this) ->
        fun (x2435 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2434) "crv"
            (Ojs.string_to_js x2435)
    let (get_d : 'tags this -> string) =
      fun (x2437 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2437) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2439 : 'tags this) ->
        fun (x2440 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2439) "d"
            (Ojs.string_to_js x2440)
    let (get_dp : 'tags this -> string) =
      fun (x2442 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2442) "dp")
    let (set_dp : 'tags this -> string -> unit) =
      fun (x2444 : 'tags this) ->
        fun (x2445 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2444) "dp"
            (Ojs.string_to_js x2445)
    let (get_dq : 'tags this -> string) =
      fun (x2447 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2447) "dq")
    let (set_dq : 'tags this -> string -> unit) =
      fun (x2449 : 'tags this) ->
        fun (x2450 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2449) "dq"
            (Ojs.string_to_js x2450)
    let (get_e : 'tags this -> string) =
      fun (x2452 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2452) "e")
    let (set_e : 'tags this -> string -> unit) =
      fun (x2454 : 'tags this) ->
        fun (x2455 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2454) "e"
            (Ojs.string_to_js x2455)
    let (get_ext : 'tags this -> bool) =
      fun (x2457 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2457) "ext")
    let (set_ext : 'tags this -> bool -> unit) =
      fun (x2459 : 'tags this) ->
        fun (x2460 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2459) "ext"
            (Ojs.bool_to_js x2460)
    let (get_k : 'tags this -> string) =
      fun (x2462 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2462) "k")
    let (set_k : 'tags this -> string -> unit) =
      fun (x2464 : 'tags this) ->
        fun (x2465 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2464) "k"
            (Ojs.string_to_js x2465)
    let (get_key_ops : 'tags this -> string list) =
      fun (x2467 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2467) "key_ops")
    let (set_key_ops : 'tags this -> string list -> unit) =
      fun (x2470 : 'tags this) ->
        fun (x2471 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2470) "key_ops"
            (Ojs.list_to_js Ojs.string_to_js x2471)
    let (get_kty : 'tags this -> string) =
      fun (x2474 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2474) "kty")
    let (set_kty : 'tags this -> string -> unit) =
      fun (x2476 : 'tags this) ->
        fun (x2477 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2476) "kty"
            (Ojs.string_to_js x2477)
    let (get_n : 'tags this -> string) =
      fun (x2479 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2479) "n")
    let (set_n : 'tags this -> string -> unit) =
      fun (x2481 : 'tags this) ->
        fun (x2482 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2481) "n"
            (Ojs.string_to_js x2482)
    let (get_oth : 'tags this -> RsaOtherPrimesInfo.t list) =
      fun (x2484 : 'tags this) ->
        Ojs.list_of_js RsaOtherPrimesInfo.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2484) "oth")
    let (set_oth : 'tags this -> RsaOtherPrimesInfo.t list -> unit) =
      fun (x2487 : 'tags this) ->
        fun (x2488 : RsaOtherPrimesInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2487) "oth"
            (Ojs.list_to_js RsaOtherPrimesInfo.t_to_js x2488)
    let (get_p : 'tags this -> string) =
      fun (x2491 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2491) "p")
    let (set_p : 'tags this -> string -> unit) =
      fun (x2493 : 'tags this) ->
        fun (x2494 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2493) "p"
            (Ojs.string_to_js x2494)
    let (get_q : 'tags this -> string) =
      fun (x2496 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2496) "q")
    let (set_q : 'tags this -> string -> unit) =
      fun (x2498 : 'tags this) ->
        fun (x2499 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2498) "q"
            (Ojs.string_to_js x2499)
    let (get_qi : 'tags this -> string) =
      fun (x2501 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2501) "qi")
    let (set_qi : 'tags this -> string -> unit) =
      fun (x2503 : 'tags this) ->
        fun (x2504 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2503) "qi"
            (Ojs.string_to_js x2504)
    let (get_use : 'tags this -> string) =
      fun (x2506 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2506) "use")
    let (set_use : 'tags this -> string -> unit) =
      fun (x2508 : 'tags this) ->
        fun (x2509 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2508) "use"
            (Ojs.string_to_js x2509)
    let (get_x : 'tags this -> string) =
      fun (x2511 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2511) "x")
    let (set_x : 'tags this -> string -> unit) =
      fun (x2513 : 'tags this) ->
        fun (x2514 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2513) "x"
            (Ojs.string_to_js x2514)
    let (get_y : 'tags this -> string) =
      fun (x2516 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2516) "y")
    let (set_y : 'tags this -> string -> unit) =
      fun (x2518 : 'tags this) ->
        fun (x2519 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2518) "y"
            (Ojs.string_to_js x2519)
    let cast_from = Obj.magic
  end
module HmacKeyGenParams =
  struct
    type t = [ `Algorithm  | `HmacKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2522 : Ojs.t) -> t_of_js x2522
    and t_0_to_js : t_0 -> Ojs.t = fun (x2521 : t) -> t_to_js x2521
    type tags = [ `Algorithm  | `HmacKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2525 : Ojs.t) -> intf_of_js __tags_of_js x2525
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2523 : __tags intf) -> intf_to_js __tags_to_js x2523
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2527 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2527) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2529 : 'tags this) ->
        fun (x2530 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2529) "hash"
            (HashAlgorithmIdentifier.t_to_js x2530)
    let (get_length : 'tags this -> float) =
      fun (x2532 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2532) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2534 : 'tags this) ->
        fun (x2535 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2534) "length"
            (Ojs.float_to_js x2535)
    let cast_from = Obj.magic
  end
module HmacImportParams =
  struct
    type t = [ `Algorithm  | `HmacImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2538 : Ojs.t) -> t_of_js x2538
    and t_0_to_js : t_0 -> Ojs.t = fun (x2537 : t) -> t_to_js x2537
    type tags = [ `Algorithm  | `HmacImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2541 : Ojs.t) -> intf_of_js __tags_of_js x2541
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2539 : __tags intf) -> intf_to_js __tags_to_js x2539
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2543 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2543) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2545 : 'tags this) ->
        fun (x2546 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2545) "hash"
            (HashAlgorithmIdentifier.t_to_js x2546)
    let (get_length : 'tags this -> float) =
      fun (x2548 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2548) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2550 : 'tags this) ->
        fun (x2551 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2550) "length"
            (Ojs.float_to_js x2551)
    let cast_from = Obj.magic
  end
module HkdfParams =
  struct
    type t = [ `Algorithm  | `HkdfParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2554 : Ojs.t) -> t_of_js x2554
    and t_0_to_js : t_0 -> Ojs.t = fun (x2553 : t) -> t_to_js x2553
    type tags = [ `Algorithm  | `HkdfParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2557 : Ojs.t) -> intf_of_js __tags_of_js x2557
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2555 : __tags intf) -> intf_to_js __tags_to_js x2555
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2559 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2559) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2561 : 'tags this) ->
        fun (x2562 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2561) "hash"
            (HashAlgorithmIdentifier.t_to_js x2562)
    let (get_info : 'tags this -> BufferSource.t) =
      fun (x2564 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2564) "info")
    let (set_info : 'tags this -> BufferSource.t -> unit) =
      fun (x2566 : 'tags this) ->
        fun (x2567 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2566) "info"
            (BufferSource.t_to_js x2567)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2569 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2569) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2571 : 'tags this) ->
        fun (x2572 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2571) "salt"
            (BufferSource.t_to_js x2572)
    let cast_from = Obj.magic
  end
module EcdsaParams =
  struct
    type t = [ `Algorithm  | `EcdsaParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2575 : Ojs.t) -> t_of_js x2575
    and t_0_to_js : t_0 -> Ojs.t = fun (x2574 : t) -> t_to_js x2574
    type tags = [ `Algorithm  | `EcdsaParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2578 : Ojs.t) -> intf_of_js __tags_of_js x2578
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2576 : __tags intf) -> intf_to_js __tags_to_js x2576
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2580 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2580) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2582 : 'tags this) ->
        fun (x2583 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2582) "hash"
            (HashAlgorithmIdentifier.t_to_js x2583)
    let cast_from = Obj.magic
  end
module KeyUsage =
  struct
    type t =
      [ `L_s56_decrypt  | `L_s59_deriveBits  | `L_s60_deriveKey 
      | `L_s65_encrypt  | `L_s179_sign  | `L_s200_unwrapKey 
      | `L_s203_verify  | `L_s211_wrapKey ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2586 : Ojs.t) ->
        let x2587 = x2586 in
        match Ojs.string_of_js x2587 with
        | "decrypt" -> `L_s56_decrypt
        | "deriveBits" -> `L_s59_deriveBits
        | "deriveKey" -> `L_s60_deriveKey
        | "encrypt" -> `L_s65_encrypt
        | "sign" -> `L_s179_sign
        | "unwrapKey" -> `L_s200_unwrapKey
        | "verify" -> `L_s203_verify
        | "wrapKey" -> `L_s211_wrapKey
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2585 :
          [ `L_s56_decrypt  | `L_s59_deriveBits  | `L_s60_deriveKey 
          | `L_s65_encrypt  | `L_s179_sign  | `L_s200_unwrapKey 
          | `L_s203_verify  | `L_s211_wrapKey ])
        ->
        match x2585 with
        | `L_s56_decrypt -> Ojs.string_to_js "decrypt"
        | `L_s59_deriveBits -> Ojs.string_to_js "deriveBits"
        | `L_s60_deriveKey -> Ojs.string_to_js "deriveKey"
        | `L_s65_encrypt -> Ojs.string_to_js "encrypt"
        | `L_s179_sign -> Ojs.string_to_js "sign"
        | `L_s200_unwrapKey -> Ojs.string_to_js "unwrapKey"
        | `L_s203_verify -> Ojs.string_to_js "verify"
        | `L_s211_wrapKey -> Ojs.string_to_js "wrapKey"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2589 : Ojs.t) -> t_of_js x2589
    and t_0_to_js : t_0 -> Ojs.t = fun (x2588 : t) -> t_to_js x2588
  end
module KeyType =
  struct
    type t = [ `L_s156_private  | `L_s159_public  | `L_s176_secret ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2591 : Ojs.t) ->
        let x2592 = x2591 in
        match Ojs.string_of_js x2592 with
        | "private" -> `L_s156_private
        | "public" -> `L_s159_public
        | "secret" -> `L_s176_secret
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x2590 : [ `L_s156_private  | `L_s159_public  | `L_s176_secret ])
        ->
        match x2590 with
        | `L_s156_private -> Ojs.string_to_js "private"
        | `L_s159_public -> Ojs.string_to_js "public"
        | `L_s176_secret -> Ojs.string_to_js "secret"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2594 : Ojs.t) -> t_of_js x2594
    and t_0_to_js : t_0 -> Ojs.t = fun (x2593 : t) -> t_to_js x2593
  end
module KeyAlgorithm =
  struct
    type t = [ `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2596 : Ojs.t) -> t_of_js x2596
    and t_0_to_js : t_0 -> Ojs.t = fun (x2595 : t) -> t_to_js x2595
    type tags = [ `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2599 : Ojs.t) -> intf_of_js __tags_of_js x2599
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2597 : __tags intf) -> intf_to_js __tags_to_js x2597
    let (get_name : 'tags this -> string) =
      fun (x2601 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2601) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2603 : 'tags this) ->
        fun (x2604 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2603) "name"
            (Ojs.string_to_js x2604)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface15:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> CryptoKey.t
                         val set_prototype : t -> CryptoKey.t -> unit
                         val create : t -> CryptoKey.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2607 : Ojs.t) -> x2607
    and t_to_js : t -> Ojs.t = fun (x2606 : Ojs.t) -> x2606
    let (get_prototype : t -> CryptoKey.t) =
      fun (x2608 : t) ->
        CryptoKey.t_of_js (Ojs.get_prop_ascii (t_to_js x2608) "prototype")
    let (set_prototype : t -> CryptoKey.t -> unit) =
      fun (x2609 : t) ->
        fun (x2610 : CryptoKey.t) ->
          Ojs.set_prop_ascii (t_to_js x2609) "prototype"
            (CryptoKey.t_to_js x2610)
    let (create : t -> CryptoKey.t) =
      fun (x2611 : t) -> CryptoKey.t_of_js (Ojs.new_obj (t_to_js x2611) [||])
  end
 and
  CryptoKey:sig
              type t = [ `CryptoKey ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `CryptoKey ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `CryptoKey ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_algorithm : 'tags this -> KeyAlgorithm.t
              val get_extractable : 'tags this -> bool
              val get_type : 'tags this -> KeyType.t
              val get_usages : 'tags this -> KeyUsage.t list
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `CryptoKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2613 : Ojs.t) -> t_of_js x2613
    and t_0_to_js : t_0 -> Ojs.t = fun (x2612 : t) -> t_to_js x2612
    type tags = [ `CryptoKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2616 : Ojs.t) -> intf_of_js __tags_of_js x2616
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2614 : __tags intf) -> intf_to_js __tags_to_js x2614
    let (get_algorithm : 'tags this -> KeyAlgorithm.t) =
      fun (x2618 : 'tags this) ->
        KeyAlgorithm.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2618) "algorithm")
    let (get_extractable : 'tags this -> bool) =
      fun (x2620 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2620) "extractable")
    let (get_type : 'tags this -> KeyType.t) =
      fun (x2622 : 'tags this) ->
        KeyType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2622) "type")
    let (get_usages : 'tags this -> KeyUsage.t list) =
      fun (x2624 : 'tags this) ->
        Ojs.list_of_js KeyUsage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2624) "usages")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CryptoKey")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CryptoKey") [||])
  end
module EcdhKeyDeriveParams =
  struct
    type t = [ `Algorithm  | `EcdhKeyDeriveParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2628 : Ojs.t) -> t_of_js x2628
    and t_0_to_js : t_0 -> Ojs.t = fun (x2627 : t) -> t_to_js x2627
    type tags = [ `Algorithm  | `EcdhKeyDeriveParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2631 : Ojs.t) -> intf_of_js __tags_of_js x2631
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2629 : __tags intf) -> intf_to_js __tags_to_js x2629
    let (get_public : 'tags this -> CryptoKey.t) =
      fun (x2633 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2633) "public")
    let (set_public : 'tags this -> CryptoKey.t -> unit) =
      fun (x2635 : 'tags this) ->
        fun (x2636 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2635) "public"
            (CryptoKey.t_to_js x2636)
    let cast_from = Obj.magic
  end
module NamedCurve =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x2639 : Ojs.t) -> Ojs.string_of_js x2639
    and t_to_js : t -> Ojs.t = fun (x2638 : string) -> Ojs.string_to_js x2638
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2641 : Ojs.t) -> t_of_js x2641
    and t_0_to_js : t_0 -> Ojs.t = fun (x2640 : t) -> t_to_js x2640
  end
module EcKeyImportParams =
  struct
    type t = [ `Algorithm  | `EcKeyImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2643 : Ojs.t) -> t_of_js x2643
    and t_0_to_js : t_0 -> Ojs.t = fun (x2642 : t) -> t_to_js x2642
    type tags = [ `Algorithm  | `EcKeyImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2646 : Ojs.t) -> intf_of_js __tags_of_js x2646
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2644 : __tags intf) -> intf_to_js __tags_to_js x2644
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2648 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2648) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2650 : 'tags this) ->
        fun (x2651 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2650) "namedCurve"
            (NamedCurve.t_to_js x2651)
    let cast_from = Obj.magic
  end
module EcKeyGenParams =
  struct
    type t = [ `Algorithm  | `EcKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2654 : Ojs.t) -> t_of_js x2654
    and t_0_to_js : t_0 -> Ojs.t = fun (x2653 : t) -> t_to_js x2653
    type tags = [ `Algorithm  | `EcKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2657 : Ojs.t) -> intf_of_js __tags_of_js x2657
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2655 : __tags intf) -> intf_to_js __tags_to_js x2655
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2659 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2659) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2661 : 'tags this) ->
        fun (x2662 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2661) "namedCurve"
            (NamedCurve.t_to_js x2662)
    let cast_from = Obj.magic
  end
module CryptoKeyPair =
  struct
    type t = [ `CryptoKeyPair ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2665 : Ojs.t) -> t_of_js x2665
    and t_0_to_js : t_0 -> Ojs.t = fun (x2664 : t) -> t_to_js x2664
    type tags = [ `CryptoKeyPair ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2668 : Ojs.t) -> intf_of_js __tags_of_js x2668
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2666 : __tags intf) -> intf_to_js __tags_to_js x2666
    let (get_privateKey : 'tags this -> CryptoKey.t) =
      fun (x2670 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2670) "privateKey")
    let (set_privateKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2672 : 'tags this) ->
        fun (x2673 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2672) "privateKey"
            (CryptoKey.t_to_js x2673)
    let (get_publicKey : 'tags this -> CryptoKey.t) =
      fun (x2675 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2675) "publicKey")
    let (set_publicKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2677 : 'tags this) ->
        fun (x2678 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2677) "publicKey"
            (CryptoKey.t_to_js x2678)
    let cast_from = Obj.magic
  end
module AesKeyGenParams =
  struct
    type t = [ `AesKeyGenParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2681 : Ojs.t) -> t_of_js x2681
    and t_0_to_js : t_0 -> Ojs.t = fun (x2680 : t) -> t_to_js x2680
    type tags = [ `AesKeyGenParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2684 : Ojs.t) -> intf_of_js __tags_of_js x2684
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2682 : __tags intf) -> intf_to_js __tags_to_js x2682
    let (get_length : 'tags this -> float) =
      fun (x2686 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2686) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2688 : 'tags this) ->
        fun (x2689 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2688) "length"
            (Ojs.float_to_js x2689)
    let cast_from = Obj.magic
  end
module AesKeyAlgorithm =
  struct
    type t = [ `AesKeyAlgorithm  | `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2692 : Ojs.t) -> t_of_js x2692
    and t_0_to_js : t_0 -> Ojs.t = fun (x2691 : t) -> t_to_js x2691
    type tags = [ `AesKeyAlgorithm  | `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2695 : Ojs.t) -> intf_of_js __tags_of_js x2695
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2693 : __tags intf) -> intf_to_js __tags_to_js x2693
    let (get_length : 'tags this -> float) =
      fun (x2697 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2697) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2699 : 'tags this) ->
        fun (x2700 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2699) "length"
            (Ojs.float_to_js x2700)
    let cast_from = Obj.magic
  end
module AesGcmParams =
  struct
    type t = [ `AesGcmParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2703 : Ojs.t) -> t_of_js x2703
    and t_0_to_js : t_0 -> Ojs.t = fun (x2702 : t) -> t_to_js x2702
    type tags = [ `AesGcmParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2706 : Ojs.t) -> intf_of_js __tags_of_js x2706
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2704 : __tags intf) -> intf_to_js __tags_to_js x2704
    let (get_additionalData : 'tags this -> BufferSource.t) =
      fun (x2708 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2708) "additionalData")
    let (set_additionalData : 'tags this -> BufferSource.t -> unit) =
      fun (x2710 : 'tags this) ->
        fun (x2711 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2710) "additionalData"
            (BufferSource.t_to_js x2711)
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2713 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2713) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2715 : 'tags this) ->
        fun (x2716 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2715) "iv"
            (BufferSource.t_to_js x2716)
    let (get_tagLength : 'tags this -> float) =
      fun (x2718 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2718) "tagLength")
    let (set_tagLength : 'tags this -> float -> unit) =
      fun (x2720 : 'tags this) ->
        fun (x2721 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2720) "tagLength"
            (Ojs.float_to_js x2721)
    let cast_from = Obj.magic
  end
module AesDerivedKeyParams =
  struct
    type t = [ `AesDerivedKeyParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2724 : Ojs.t) -> t_of_js x2724
    and t_0_to_js : t_0 -> Ojs.t = fun (x2723 : t) -> t_to_js x2723
    type tags = [ `AesDerivedKeyParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2727 : Ojs.t) -> intf_of_js __tags_of_js x2727
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2725 : __tags intf) -> intf_to_js __tags_to_js x2725
    let (get_length : 'tags this -> float) =
      fun (x2729 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2729) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2731 : 'tags this) ->
        fun (x2732 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2731) "length"
            (Ojs.float_to_js x2732)
    let cast_from = Obj.magic
  end
module AesCtrParams =
  struct
    type t = [ `AesCtrParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2735 : Ojs.t) -> t_of_js x2735
    and t_0_to_js : t_0 -> Ojs.t = fun (x2734 : t) -> t_to_js x2734
    type tags = [ `AesCtrParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2738 : Ojs.t) -> intf_of_js __tags_of_js x2738
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2736 : __tags intf) -> intf_to_js __tags_to_js x2736
    let (get_counter : 'tags this -> BufferSource.t) =
      fun (x2740 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2740) "counter")
    let (set_counter : 'tags this -> BufferSource.t -> unit) =
      fun (x2742 : 'tags this) ->
        fun (x2743 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2742) "counter"
            (BufferSource.t_to_js x2743)
    let (get_length : 'tags this -> float) =
      fun (x2745 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2745) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2747 : 'tags this) ->
        fun (x2748 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2747) "length"
            (Ojs.float_to_js x2748)
    let cast_from = Obj.magic
  end
module AesCbcParams =
  struct
    type t = [ `AesCbcParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2751 : Ojs.t) -> t_of_js x2751
    and t_0_to_js : t_0 -> Ojs.t = fun (x2750 : t) -> t_to_js x2750
    type tags = [ `AesCbcParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2754 : Ojs.t) -> intf_of_js __tags_of_js x2754
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2752 : __tags intf) -> intf_to_js __tags_to_js x2752
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2756 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2756) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2758 : 'tags this) ->
        fun (x2759 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2758) "iv"
            (BufferSource.t_to_js x2759)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface100:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> SubtleCrypto.t
                          val set_prototype : t -> SubtleCrypto.t -> unit
                          val create : t -> SubtleCrypto.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2762 : Ojs.t) -> x2762
    and t_to_js : t -> Ojs.t = fun (x2761 : Ojs.t) -> x2761
    let (get_prototype : t -> SubtleCrypto.t) =
      fun (x2763 : t) ->
        SubtleCrypto.t_of_js (Ojs.get_prop_ascii (t_to_js x2763) "prototype")
    let (set_prototype : t -> SubtleCrypto.t -> unit) =
      fun (x2764 : t) ->
        fun (x2765 : SubtleCrypto.t) ->
          Ojs.set_prop_ascii (t_to_js x2764) "prototype"
            (SubtleCrypto.t_to_js x2765)
    let (create : t -> SubtleCrypto.t) =
      fun (x2766 : t) ->
        SubtleCrypto.t_of_js (Ojs.new_obj (t_to_js x2766) [||])
  end
 and
  SubtleCrypto:sig
                 type t = [ `SubtleCrypto ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `SubtleCrypto ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `SubtleCrypto ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `SubtleCrypto ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val decrypt :
                   'tags this ->
                     algorithm:(AesCbcParams.t, AesCtrParams.t,
                       AesGcmParams.t, AlgorithmIdentifier.t,
                       RsaOaepParams.t) union5 ->
                       key:CryptoKey.t ->
                         data:BufferSource.t -> any Promise.t_1
                 val deriveBits :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                       HkdfParams.t, Pbkdf2Params.t) union4 ->
                       baseKey:CryptoKey.t ->
                         length:float -> ArrayBuffer.t_0 Promise.t_1
                 val deriveKey :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                       HkdfParams.t, Pbkdf2Params.t) union4 ->
                       baseKey:CryptoKey.t ->
                         derivedKeyType:(AesDerivedKeyParams.t,
                           AlgorithmIdentifier.t, HkdfParams.t,
                           HmacImportParams.t, Pbkdf2Params.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t list ->
                               CryptoKey.t Promise.t_1
                 val digest :
                   'tags this ->
                     algorithm:AlgorithmIdentifier.t ->
                       data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1
                 val encrypt :
                   'tags this ->
                     algorithm:(AesCbcParams.t, AesCtrParams.t,
                       AesGcmParams.t, AlgorithmIdentifier.t,
                       RsaOaepParams.t) union5 ->
                       key:CryptoKey.t ->
                         data:BufferSource.t -> any Promise.t_1
                 val exportKey :
                   'tags this ->
                     format:[ `L_s98_jwk ] ->
                       key:CryptoKey.t -> JsonWebKey.t Promise.t_1
                 val exportKey' :
                   'tags this ->
                     format:(KeyFormat.t, [ `L_s98_jwk ]) Exclude.t_2 ->
                       key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1
                 val generateKey :
                   'tags this ->
                     algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t)
                       union2 ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list ->
                           CryptoKeyPair.t Promise.t_1
                 val generateKey' :
                   'tags this ->
                     algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t,
                       Pbkdf2Params.t) union3 ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1
                 val generateKey'' :
                   'tags this ->
                     algorithm:AlgorithmIdentifier.t ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list ->
                           (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1
                 val importKey :
                   'tags this ->
                     format:[ `L_s98_jwk ] ->
                       keyData:JsonWebKey.t ->
                         algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                           EcKeyImportParams.t, HmacImportParams.t,
                           RsaHashedImportParams.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t list ->
                               CryptoKey.t Promise.t_1
                 val importKey' :
                   'tags this ->
                     format:(KeyFormat.t, [ `L_s98_jwk ]) Exclude.t_2 ->
                       keyData:BufferSource.t ->
                         algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                           EcKeyImportParams.t, HmacImportParams.t,
                           RsaHashedImportParams.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t list ->
                               CryptoKey.t Promise.t_1
                 val sign :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdsaParams.t,
                       RsaPssParams.t) union3 ->
                       key:CryptoKey.t ->
                         data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1
                 val unwrapKey :
                   'tags this ->
                     format:KeyFormat.t ->
                       wrappedKey:BufferSource.t ->
                         unwrappingKey:CryptoKey.t ->
                           unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                             AesGcmParams.t, AlgorithmIdentifier.t,
                             RsaOaepParams.t) union5 ->
                             unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                               AlgorithmIdentifier.t, EcKeyImportParams.t,
                               HmacImportParams.t, RsaHashedImportParams.t)
                               union5 ->
                               extractable:bool ->
                                 keyUsages:KeyUsage.t list ->
                                   CryptoKey.t Promise.t_1
                 val verify :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdsaParams.t,
                       RsaPssParams.t) union3 ->
                       key:CryptoKey.t ->
                         signature:BufferSource.t ->
                           data:BufferSource.t -> bool Promise.t_1
                 val wrapKey :
                   'tags this ->
                     format:KeyFormat.t ->
                       key:CryptoKey.t ->
                         wrappingKey:CryptoKey.t ->
                           wrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                             AesGcmParams.t, AlgorithmIdentifier.t,
                             RsaOaepParams.t) union5 ->
                             ArrayBuffer.t_0 Promise.t_1
                 val deriveKey' :
                   'tags this ->
                     algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                       HkdfParams.t, Pbkdf2Params.t) union4 ->
                       baseKey:CryptoKey.t ->
                         derivedKeyType:(AesDerivedKeyParams.t,
                           AlgorithmIdentifier.t, HkdfParams.t,
                           HmacImportParams.t, Pbkdf2Params.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t Iterable.t_1 ->
                               CryptoKey.t Promise.t_1
                 val generateKey''' :
                   'tags this ->
                     algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t)
                       union2 ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list ->
                           CryptoKeyPair.t Promise.t_1
                 val generateKey'''' :
                   'tags this ->
                     algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t,
                       Pbkdf2Params.t) union3 ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1
                 val generateKey''''' :
                   'tags this ->
                     algorithm:AlgorithmIdentifier.t ->
                       extractable:bool ->
                         keyUsages:KeyUsage.t Iterable.t_1 ->
                           (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1
                 val importKey'' :
                   'tags this ->
                     format:[ `L_s98_jwk ] ->
                       keyData:JsonWebKey.t ->
                         algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                           EcKeyImportParams.t, HmacImportParams.t,
                           RsaHashedImportParams.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t list ->
                               CryptoKey.t Promise.t_1
                 val importKey''' :
                   'tags this ->
                     format:(KeyFormat.t, [ `L_s98_jwk ]) Exclude.t_2 ->
                       keyData:BufferSource.t ->
                         algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                           EcKeyImportParams.t, HmacImportParams.t,
                           RsaHashedImportParams.t) union5 ->
                           extractable:bool ->
                             keyUsages:KeyUsage.t Iterable.t_1 ->
                               CryptoKey.t Promise.t_1
                 val unwrapKey' :
                   'tags this ->
                     format:KeyFormat.t ->
                       wrappedKey:BufferSource.t ->
                         unwrappingKey:CryptoKey.t ->
                           unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                             AesGcmParams.t, AlgorithmIdentifier.t,
                             RsaOaepParams.t) union5 ->
                             unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                               AlgorithmIdentifier.t, EcKeyImportParams.t,
                               HmacImportParams.t, RsaHashedImportParams.t)
                               union5 ->
                               extractable:bool ->
                                 keyUsages:KeyUsage.t Iterable.t_1 ->
                                   CryptoKey.t Promise.t_1
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `SubtleCrypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2768 : Ojs.t) -> t_of_js x2768
    and t_0_to_js : t_0 -> Ojs.t = fun (x2767 : t) -> t_to_js x2767
    type tags = [ `SubtleCrypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2771 : Ojs.t) -> intf_of_js __tags_of_js x2771
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2769 : __tags intf) -> intf_to_js __tags_to_js x2769
    let (decrypt :
      'tags this ->
        algorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
          AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
          key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2781 : 'tags this) ->
        fun
          ~algorithm:(x2773 :
                       (AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                         AlgorithmIdentifier.t, RsaOaepParams.t) union5)
          ->
          fun ~key:(x2779 : CryptoKey.t) ->
            fun ~data:(x2780 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2781) "decrypt"
                   [|(union5_to_js AesCbcParams.t_to_js AesCtrParams.t_to_js
                        AesGcmParams.t_to_js AlgorithmIdentifier.t_to_js
                        RsaOaepParams.t_to_js x2773);(CryptoKey.t_to_js x2779);(
                     BufferSource.t_to_js x2780)|])
    let (deriveBits :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2791 : 'tags this) ->
        fun
          ~algorithm:(x2784 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2789 : CryptoKey.t) ->
            fun ~length:(x2790 : float) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x2791) "deriveBits"
                   [|(union4_to_js AlgorithmIdentifier.t_to_js
                        EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                        Pbkdf2Params.t_to_js x2784);(CryptoKey.t_to_js x2789);(
                     Ojs.float_to_js x2790)|])
    let (deriveKey :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t ->
            derivedKeyType:(AesDerivedKeyParams.t, AlgorithmIdentifier.t,
              HkdfParams.t, HmacImportParams.t, Pbkdf2Params.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2809 : 'tags this) ->
        fun
          ~algorithm:(x2794 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2799 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2800 :
                                (AesDerivedKeyParams.t,
                                  AlgorithmIdentifier.t, HkdfParams.t,
                                  HmacImportParams.t, Pbkdf2Params.t) union5)
              ->
              fun ~extractable:(x2806 : bool) ->
                fun ~keyUsages:(x2807 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2809) "deriveKey"
                       [|(union4_to_js AlgorithmIdentifier.t_to_js
                            EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                            Pbkdf2Params.t_to_js x2794);(CryptoKey.t_to_js
                                                           x2799);(union5_to_js
                                                                    AesDerivedKeyParams.t_to_js
                                                                    AlgorithmIdentifier.t_to_js
                                                                    HkdfParams.t_to_js
                                                                    HmacImportParams.t_to_js
                                                                    Pbkdf2Params.t_to_js
                                                                    x2800);(
                         Ojs.bool_to_js x2806);(Ojs.list_to_js
                                                  KeyUsage.t_to_js x2807)|])
    let (digest :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2814 : 'tags this) ->
        fun ~algorithm:(x2812 : AlgorithmIdentifier.t) ->
          fun ~data:(x2813 : BufferSource.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2814) "digest"
                 [|(AlgorithmIdentifier.t_to_js x2812);(BufferSource.t_to_js
                                                          x2813)|])
    let (encrypt :
      'tags this ->
        algorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
          AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
          key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2825 : 'tags this) ->
        fun
          ~algorithm:(x2817 :
                       (AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                         AlgorithmIdentifier.t, RsaOaepParams.t) union5)
          ->
          fun ~key:(x2823 : CryptoKey.t) ->
            fun ~data:(x2824 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2825) "encrypt"
                   [|(union5_to_js AesCbcParams.t_to_js AesCtrParams.t_to_js
                        AesGcmParams.t_to_js AlgorithmIdentifier.t_to_js
                        RsaOaepParams.t_to_js x2817);(CryptoKey.t_to_js x2823);(
                     BufferSource.t_to_js x2824)|])
    let (exportKey :
      'tags this ->
        format:[ `L_s98_jwk ] -> key:CryptoKey.t -> JsonWebKey.t Promise.t_1)
      =
      fun (x2830 : 'tags this) ->
        fun ~format:(x2828 : [ `L_s98_jwk ]) ->
          fun ~key:(x2829 : CryptoKey.t) ->
            Promise.t_1_of_js JsonWebKey.t_of_js
              (Ojs.call (this_to_js Obj.magic x2830) "exportKey"
                 [|((match x2828 with | `L_s98_jwk -> Ojs.string_to_js "jwk"));(
                   CryptoKey.t_to_js x2829)|])
    let (exportKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s98_jwk ]) Exclude.t_2 ->
          key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2837 : 'tags this) ->
        fun ~format:(x2833 : (KeyFormat.t, [ `L_s98_jwk ]) Exclude.t_2) ->
          fun ~key:(x2836 : CryptoKey.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2837) "exportKey"
                 [|(Exclude.t_2_to_js KeyFormat.t_to_js
                      (fun (x2835 : [ `L_s98_jwk ]) ->
                         match x2835 with
                         | `L_s98_jwk -> Ojs.string_to_js "jwk") x2833);(
                   CryptoKey.t_to_js x2836)|])
    let (generateKey :
      'tags this ->
        algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2846 : 'tags this) ->
        fun
          ~algorithm:(x2840 :
                       (EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2)
          ->
          fun ~extractable:(x2843 : bool) ->
            fun ~keyUsages:(x2844 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2846) "generateKey"
                   [|(union2_to_js EcKeyGenParams.t_to_js
                        RsaHashedKeyGenParams.t_to_js x2840);(Ojs.bool_to_js
                                                                x2843);(
                     Ojs.list_to_js KeyUsage.t_to_js x2844)|])
    let (generateKey' :
      'tags this ->
        algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t, Pbkdf2Params.t)
          union3 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2856 : 'tags this) ->
        fun
          ~algorithm:(x2849 :
                       (AesKeyGenParams.t, HmacKeyGenParams.t,
                         Pbkdf2Params.t) union3)
          ->
          fun ~extractable:(x2853 : bool) ->
            fun ~keyUsages:(x2854 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2856) "generateKey"
                   [|(union3_to_js AesKeyGenParams.t_to_js
                        HmacKeyGenParams.t_to_js Pbkdf2Params.t_to_js x2849);(
                     Ojs.bool_to_js x2853);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2854)|])
    let (generateKey'' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t list ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x2863 : 'tags this) ->
        fun ~algorithm:(x2859 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2860 : bool) ->
            fun ~keyUsages:(x2861 : KeyUsage.t list) ->
              Promise.t_1_of_js
                (fun (x2865 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x2865)
                (Ojs.call (this_to_js Obj.magic x2863) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2859);(Ojs.bool_to_js
                                                            x2860);(Ojs.list_to_js
                                                                    KeyUsage.t_to_js
                                                                    x2861)|])
    let (importKey :
      'tags this ->
        format:[ `L_s98_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2879 : 'tags this) ->
        fun ~format:(x2868 : [ `L_s98_jwk ]) ->
          fun ~keyData:(x2869 : JsonWebKey.t) ->
            fun
              ~algorithm:(x2870 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2876 : bool) ->
                fun ~keyUsages:(x2877 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2879) "importKey"
                       [|((match x2868 with
                           | `L_s98_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x2869);(union5_to_js
                                                      AesKeyAlgorithm.t_to_js
                                                      AlgorithmIdentifier.t_to_js
                                                      EcKeyImportParams.t_to_js
                                                      HmacImportParams.t_to_js
                                                      RsaHashedImportParams.t_to_js
                                                      x2870);(Ojs.bool_to_js
                                                                x2876);(
                         Ojs.list_to_js KeyUsage.t_to_js x2877)|])
    let (importKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s98_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2895 : 'tags this) ->
        fun ~format:(x2882 : (KeyFormat.t, [ `L_s98_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x2885 : BufferSource.t) ->
            fun
              ~algorithm:(x2886 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2892 : bool) ->
                fun ~keyUsages:(x2893 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2895) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x2884 : [ `L_s98_jwk ]) ->
                               match x2884 with
                               | `L_s98_jwk -> Ojs.string_to_js "jwk") x2882);(
                         BufferSource.t_to_js x2885);(union5_to_js
                                                        AesKeyAlgorithm.t_to_js
                                                        AlgorithmIdentifier.t_to_js
                                                        EcKeyImportParams.t_to_js
                                                        HmacImportParams.t_to_js
                                                        RsaHashedImportParams.t_to_js
                                                        x2886);(Ojs.bool_to_js
                                                                  x2892);(
                         Ojs.list_to_js KeyUsage.t_to_js x2893)|])
    let (sign :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
          union3 ->
          key:CryptoKey.t ->
            data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2904 : 'tags this) ->
        fun
          ~algorithm:(x2898 :
                       (AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
                         union3)
          ->
          fun ~key:(x2902 : CryptoKey.t) ->
            fun ~data:(x2903 : BufferSource.t) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x2904) "sign"
                   [|(union3_to_js AlgorithmIdentifier.t_to_js
                        EcdsaParams.t_to_js RsaPssParams.t_to_js x2898);(
                     CryptoKey.t_to_js x2902);(BufferSource.t_to_js x2903)|])
    let (unwrapKey :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                AesGcmParams.t, AlgorithmIdentifier.t, RsaOaepParams.t)
                union5 ->
                unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                  AlgorithmIdentifier.t, EcKeyImportParams.t,
                  HmacImportParams.t, RsaHashedImportParams.t) union5 ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2925 : 'tags this) ->
        fun ~format:(x2907 : KeyFormat.t) ->
          fun ~wrappedKey:(x2908 : BufferSource.t) ->
            fun ~unwrappingKey:(x2909 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x2910 :
                                   (AesCbcParams.t, AesCtrParams.t,
                                     AesGcmParams.t, AlgorithmIdentifier.t,
                                     RsaOaepParams.t) union5)
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x2916 :
                                           (AesKeyAlgorithm.t,
                                             AlgorithmIdentifier.t,
                                             EcKeyImportParams.t,
                                             HmacImportParams.t,
                                             RsaHashedImportParams.t) union5)
                  ->
                  fun ~extractable:(x2922 : bool) ->
                    fun ~keyUsages:(x2923 : KeyUsage.t list) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x2925) "unwrapKey"
                           [|(KeyFormat.t_to_js x2907);(BufferSource.t_to_js
                                                          x2908);(CryptoKey.t_to_js
                                                                    x2909);(
                             union5_to_js AesCbcParams.t_to_js
                               AesCtrParams.t_to_js AesGcmParams.t_to_js
                               AlgorithmIdentifier.t_to_js
                               RsaOaepParams.t_to_js x2910);(union5_to_js
                                                               AesKeyAlgorithm.t_to_js
                                                               AlgorithmIdentifier.t_to_js
                                                               EcKeyImportParams.t_to_js
                                                               HmacImportParams.t_to_js
                                                               RsaHashedImportParams.t_to_js
                                                               x2916);(
                             Ojs.bool_to_js x2922);(Ojs.list_to_js
                                                      KeyUsage.t_to_js x2923)|])
    let (verify :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
          union3 ->
          key:CryptoKey.t ->
            signature:BufferSource.t ->
              data:BufferSource.t -> bool Promise.t_1)
      =
      fun (x2935 : 'tags this) ->
        fun
          ~algorithm:(x2928 :
                       (AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
                         union3)
          ->
          fun ~key:(x2932 : CryptoKey.t) ->
            fun ~signature:(x2933 : BufferSource.t) ->
              fun ~data:(x2934 : BufferSource.t) ->
                Promise.t_1_of_js Ojs.bool_of_js
                  (Ojs.call (this_to_js Obj.magic x2935) "verify"
                     [|(union3_to_js AlgorithmIdentifier.t_to_js
                          EcdsaParams.t_to_js RsaPssParams.t_to_js x2928);(
                       CryptoKey.t_to_js x2932);(BufferSource.t_to_js x2933);(
                       BufferSource.t_to_js x2934)|])
    let (wrapKey :
      'tags this ->
        format:KeyFormat.t ->
          key:CryptoKey.t ->
            wrappingKey:CryptoKey.t ->
              wrapAlgorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
                ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2947 : 'tags this) ->
        fun ~format:(x2938 : KeyFormat.t) ->
          fun ~key:(x2939 : CryptoKey.t) ->
            fun ~wrappingKey:(x2940 : CryptoKey.t) ->
              fun
                ~wrapAlgorithm:(x2941 :
                                 (AesCbcParams.t, AesCtrParams.t,
                                   AesGcmParams.t, AlgorithmIdentifier.t,
                                   RsaOaepParams.t) union5)
                ->
                Promise.t_1_of_js ArrayBuffer.t_0_of_js
                  (Ojs.call (this_to_js Obj.magic x2947) "wrapKey"
                     [|(KeyFormat.t_to_js x2938);(CryptoKey.t_to_js x2939);(
                       CryptoKey.t_to_js x2940);(union5_to_js
                                                   AesCbcParams.t_to_js
                                                   AesCtrParams.t_to_js
                                                   AesGcmParams.t_to_js
                                                   AlgorithmIdentifier.t_to_js
                                                   RsaOaepParams.t_to_js
                                                   x2941)|])
    let (deriveKey' :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t ->
            derivedKeyType:(AesDerivedKeyParams.t, AlgorithmIdentifier.t,
              HkdfParams.t, HmacImportParams.t, Pbkdf2Params.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x2965 : 'tags this) ->
        fun
          ~algorithm:(x2950 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2955 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2956 :
                                (AesDerivedKeyParams.t,
                                  AlgorithmIdentifier.t, HkdfParams.t,
                                  HmacImportParams.t, Pbkdf2Params.t) union5)
              ->
              fun ~extractable:(x2962 : bool) ->
                fun ~keyUsages:(x2963 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2965) "deriveKey"
                       [|(union4_to_js AlgorithmIdentifier.t_to_js
                            EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                            Pbkdf2Params.t_to_js x2950);(CryptoKey.t_to_js
                                                           x2955);(union5_to_js
                                                                    AesDerivedKeyParams.t_to_js
                                                                    AlgorithmIdentifier.t_to_js
                                                                    HkdfParams.t_to_js
                                                                    HmacImportParams.t_to_js
                                                                    Pbkdf2Params.t_to_js
                                                                    x2956);(
                         Ojs.bool_to_js x2962);(Iterable.t_1_to_js
                                                  KeyUsage.t_to_js x2963)|])
    let (generateKey''' :
      'tags this ->
        algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2974 : 'tags this) ->
        fun
          ~algorithm:(x2968 :
                       (EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2)
          ->
          fun ~extractable:(x2971 : bool) ->
            fun ~keyUsages:(x2972 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2974) "generateKey"
                   [|(union2_to_js EcKeyGenParams.t_to_js
                        RsaHashedKeyGenParams.t_to_js x2968);(Ojs.bool_to_js
                                                                x2971);(
                     Ojs.list_to_js KeyUsage.t_to_js x2972)|])
    let (generateKey'''' :
      'tags this ->
        algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t, Pbkdf2Params.t)
          union3 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2984 : 'tags this) ->
        fun
          ~algorithm:(x2977 :
                       (AesKeyGenParams.t, HmacKeyGenParams.t,
                         Pbkdf2Params.t) union3)
          ->
          fun ~extractable:(x2981 : bool) ->
            fun ~keyUsages:(x2982 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2984) "generateKey"
                   [|(union3_to_js AesKeyGenParams.t_to_js
                        HmacKeyGenParams.t_to_js Pbkdf2Params.t_to_js x2977);(
                     Ojs.bool_to_js x2981);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2982)|])
    let (generateKey''''' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t Iterable.t_1 ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x2991 : 'tags this) ->
        fun ~algorithm:(x2987 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2988 : bool) ->
            fun ~keyUsages:(x2989 : KeyUsage.t Iterable.t_1) ->
              Promise.t_1_of_js
                (fun (x2993 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x2993)
                (Ojs.call (this_to_js Obj.magic x2991) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2987);(Ojs.bool_to_js
                                                            x2988);(Iterable.t_1_to_js
                                                                    KeyUsage.t_to_js
                                                                    x2989)|])
    let (importKey'' :
      'tags this ->
        format:[ `L_s98_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x3007 : 'tags this) ->
        fun ~format:(x2996 : [ `L_s98_jwk ]) ->
          fun ~keyData:(x2997 : JsonWebKey.t) ->
            fun
              ~algorithm:(x2998 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x3004 : bool) ->
                fun ~keyUsages:(x3005 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3007) "importKey"
                       [|((match x2996 with
                           | `L_s98_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x2997);(union5_to_js
                                                      AesKeyAlgorithm.t_to_js
                                                      AlgorithmIdentifier.t_to_js
                                                      EcKeyImportParams.t_to_js
                                                      HmacImportParams.t_to_js
                                                      RsaHashedImportParams.t_to_js
                                                      x2998);(Ojs.bool_to_js
                                                                x3004);(
                         Ojs.list_to_js KeyUsage.t_to_js x3005)|])
    let (importKey''' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s98_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x3023 : 'tags this) ->
        fun ~format:(x3010 : (KeyFormat.t, [ `L_s98_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x3013 : BufferSource.t) ->
            fun
              ~algorithm:(x3014 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x3020 : bool) ->
                fun ~keyUsages:(x3021 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3023) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x3012 : [ `L_s98_jwk ]) ->
                               match x3012 with
                               | `L_s98_jwk -> Ojs.string_to_js "jwk") x3010);(
                         BufferSource.t_to_js x3013);(union5_to_js
                                                        AesKeyAlgorithm.t_to_js
                                                        AlgorithmIdentifier.t_to_js
                                                        EcKeyImportParams.t_to_js
                                                        HmacImportParams.t_to_js
                                                        RsaHashedImportParams.t_to_js
                                                        x3014);(Ojs.bool_to_js
                                                                  x3020);(
                         Iterable.t_1_to_js KeyUsage.t_to_js x3021)|])
    let (unwrapKey' :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                AesGcmParams.t, AlgorithmIdentifier.t, RsaOaepParams.t)
                union5 ->
                unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                  AlgorithmIdentifier.t, EcKeyImportParams.t,
                  HmacImportParams.t, RsaHashedImportParams.t) union5 ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t Iterable.t_1 ->
                      CryptoKey.t Promise.t_1)
      =
      fun (x3044 : 'tags this) ->
        fun ~format:(x3026 : KeyFormat.t) ->
          fun ~wrappedKey:(x3027 : BufferSource.t) ->
            fun ~unwrappingKey:(x3028 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x3029 :
                                   (AesCbcParams.t, AesCtrParams.t,
                                     AesGcmParams.t, AlgorithmIdentifier.t,
                                     RsaOaepParams.t) union5)
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x3035 :
                                           (AesKeyAlgorithm.t,
                                             AlgorithmIdentifier.t,
                                             EcKeyImportParams.t,
                                             HmacImportParams.t,
                                             RsaHashedImportParams.t) union5)
                  ->
                  fun ~extractable:(x3041 : bool) ->
                    fun ~keyUsages:(x3042 : KeyUsage.t Iterable.t_1) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x3044) "unwrapKey"
                           [|(KeyFormat.t_to_js x3026);(BufferSource.t_to_js
                                                          x3027);(CryptoKey.t_to_js
                                                                    x3028);(
                             union5_to_js AesCbcParams.t_to_js
                               AesCtrParams.t_to_js AesGcmParams.t_to_js
                               AlgorithmIdentifier.t_to_js
                               RsaOaepParams.t_to_js x3029);(union5_to_js
                                                               AesKeyAlgorithm.t_to_js
                                                               AlgorithmIdentifier.t_to_js
                                                               EcKeyImportParams.t_to_js
                                                               HmacImportParams.t_to_js
                                                               RsaHashedImportParams.t_to_js
                                                               x3035);(
                             Ojs.bool_to_js x3041);(Iterable.t_1_to_js
                                                      KeyUsage.t_to_js x3042)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SubtleCrypto") [||])
  end
module CryptoStatic =
  struct
    let (subtle : unit -> SubtleCrypto.t) =
      fun () ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "crypto")
             "subtle")
    let (getRandomValues : 'T -> 'T) =
      fun (x3047 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto")
             "getRandomValues" [|(Obj.magic x3047)|])
  end
module ConsoleStatic =
  struct
    let (assert_ : ?condition:bool -> data:any list -> unit -> unit) =
      fun ?condition:(x3048 : bool option) ->
        fun ~data:(x3049 : any list) ->
          fun () ->
            ignore
              (let x3053 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3053 "assert") "apply"
                 [|x3053;((let x3050 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3048 with
                            | Some x3052 ->
                                ignore
                                  (Ojs.call x3050 "push"
                                     [|(Ojs.bool_to_js x3052)|])
                            | None -> ());
                           List.iter
                             (fun (x3051 : any) ->
                                ignore
                                  (Ojs.call x3050 "push"
                                     [|(any_to_js x3051)|])) x3049;
                           x3050))|])
    let (clear : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "clear" [||])
    let (count : ?label:string -> unit -> unit) =
      fun ?label:(x3054 : string option) ->
        fun () ->
          ignore
            (let x3057 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3057 "count") "apply"
               [|x3057;((let x3055 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3054 with
                          | Some x3056 ->
                              ignore
                                (Ojs.call x3055 "push"
                                   [|(Ojs.string_to_js x3056)|])
                          | None -> ());
                         x3055))|])
    let (countReset : ?label:string -> unit -> unit) =
      fun ?label:(x3058 : string option) ->
        fun () ->
          ignore
            (let x3061 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3061 "countReset") "apply"
               [|x3061;((let x3059 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3058 with
                          | Some x3060 ->
                              ignore
                                (Ojs.call x3059 "push"
                                   [|(Ojs.string_to_js x3060)|])
                          | None -> ());
                         x3059))|])
    let (debug : any list -> unit) =
      fun (x3062 : any list) ->
        ignore
          (let x3065 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3065 "debug") "apply"
             [|x3065;((let x3063 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3064 : any) ->
                            ignore
                              (Ojs.call x3063 "push" [|(any_to_js x3064)|]))
                         x3062;
                       x3063))|])
    let (dir : ?item:any -> ?options:any -> unit -> unit) =
      fun ?item:(x3066 : any option) ->
        fun ?options:(x3067 : any option) ->
          fun () ->
            ignore
              (let x3071 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3071 "dir") "apply"
                 [|x3071;((let x3068 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3066 with
                            | Some x3070 ->
                                ignore
                                  (Ojs.call x3068 "push"
                                     [|(any_to_js x3070)|])
                            | None -> ());
                           (match x3067 with
                            | Some x3069 ->
                                ignore
                                  (Ojs.call x3068 "push"
                                     [|(any_to_js x3069)|])
                            | None -> ());
                           x3068))|])
    let (dirxml : any list -> unit) =
      fun (x3072 : any list) ->
        ignore
          (let x3075 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3075 "dirxml") "apply"
             [|x3075;((let x3073 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3074 : any) ->
                            ignore
                              (Ojs.call x3073 "push" [|(any_to_js x3074)|]))
                         x3072;
                       x3073))|])
    let (error : any list -> unit) =
      fun (x3076 : any list) ->
        ignore
          (let x3079 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3079 "error") "apply"
             [|x3079;((let x3077 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3078 : any) ->
                            ignore
                              (Ojs.call x3077 "push" [|(any_to_js x3078)|]))
                         x3076;
                       x3077))|])
    let (group : any list -> unit) =
      fun (x3080 : any list) ->
        ignore
          (let x3083 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3083 "group") "apply"
             [|x3083;((let x3081 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3082 : any) ->
                            ignore
                              (Ojs.call x3081 "push" [|(any_to_js x3082)|]))
                         x3080;
                       x3081))|])
    let (groupCollapsed : any list -> unit) =
      fun (x3084 : any list) ->
        ignore
          (let x3087 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3087 "groupCollapsed") "apply"
             [|x3087;((let x3085 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3086 : any) ->
                            ignore
                              (Ojs.call x3085 "push" [|(any_to_js x3086)|]))
                         x3084;
                       x3085))|])
    let (groupEnd : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "groupEnd" [||])
    let (info : any list -> unit) =
      fun (x3088 : any list) ->
        ignore
          (let x3091 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3091 "info") "apply"
             [|x3091;((let x3089 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3090 : any) ->
                            ignore
                              (Ojs.call x3089 "push" [|(any_to_js x3090)|]))
                         x3088;
                       x3089))|])
    let (log : any list -> unit) =
      fun (x3092 : any list) ->
        ignore
          (let x3095 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3095 "log") "apply"
             [|x3095;((let x3093 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3094 : any) ->
                            ignore
                              (Ojs.call x3093 "push" [|(any_to_js x3094)|]))
                         x3092;
                       x3093))|])
    let (table : ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun ?tabularData:(x3096 : any option) ->
        fun ?properties:(x3097 : string list option) ->
          fun () ->
            ignore
              (let x3102 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3102 "table") "apply"
                 [|x3102;((let x3098 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3096 with
                            | Some x3101 ->
                                ignore
                                  (Ojs.call x3098 "push"
                                     [|(any_to_js x3101)|])
                            | None -> ());
                           (match x3097 with
                            | Some x3099 ->
                                ignore
                                  (Ojs.call x3098 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x3099)|])
                            | None -> ());
                           x3098))|])
    let (time : ?label:string -> unit -> unit) =
      fun ?label:(x3103 : string option) ->
        fun () ->
          ignore
            (let x3106 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3106 "time") "apply"
               [|x3106;((let x3104 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3103 with
                          | Some x3105 ->
                              ignore
                                (Ojs.call x3104 "push"
                                   [|(Ojs.string_to_js x3105)|])
                          | None -> ());
                         x3104))|])
    let (timeEnd : ?label:string -> unit -> unit) =
      fun ?label:(x3107 : string option) ->
        fun () ->
          ignore
            (let x3110 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3110 "timeEnd") "apply"
               [|x3110;((let x3108 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3107 with
                          | Some x3109 ->
                              ignore
                                (Ojs.call x3108 "push"
                                   [|(Ojs.string_to_js x3109)|])
                          | None -> ());
                         x3108))|])
    let (timeLog : ?label:string -> data:any list -> unit -> unit) =
      fun ?label:(x3111 : string option) ->
        fun ~data:(x3112 : any list) ->
          fun () ->
            ignore
              (let x3116 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3116 "timeLog") "apply"
                 [|x3116;((let x3113 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3111 with
                            | Some x3115 ->
                                ignore
                                  (Ojs.call x3113 "push"
                                     [|(Ojs.string_to_js x3115)|])
                            | None -> ());
                           List.iter
                             (fun (x3114 : any) ->
                                ignore
                                  (Ojs.call x3113 "push"
                                     [|(any_to_js x3114)|])) x3112;
                           x3113))|])
    let (timeStamp : ?label:string -> unit -> unit) =
      fun ?label:(x3117 : string option) ->
        fun () ->
          ignore
            (let x3120 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3120 "timeStamp") "apply"
               [|x3120;((let x3118 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3117 with
                          | Some x3119 ->
                              ignore
                                (Ojs.call x3118 "push"
                                   [|(Ojs.string_to_js x3119)|])
                          | None -> ());
                         x3118))|])
    let (trace : any list -> unit) =
      fun (x3121 : any list) ->
        ignore
          (let x3124 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3124 "trace") "apply"
             [|x3124;((let x3122 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3123 : any) ->
                            ignore
                              (Ojs.call x3122 "push" [|(any_to_js x3123)|]))
                         x3121;
                       x3122))|])
    let (warn : any list -> unit) =
      fun (x3125 : any list) ->
        ignore
          (let x3128 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3128 "warn") "apply"
             [|x3128;((let x3126 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3127 : any) ->
                            ignore
                              (Ojs.call x3126 "push" [|(any_to_js x3127)|]))
                         x3125;
                       x3126))|])
  end
module CacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3130 : Ojs.t) -> t_of_js x3130
    and t_0_to_js : t_0 -> Ojs.t = fun (x3129 : t) -> t_to_js x3129
    type tags = [ `CacheQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3133 : Ojs.t) -> intf_of_js __tags_of_js x3133
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3131 : __tags intf) -> intf_to_js __tags_to_js x3131
    let (get_ignoreMethod : 'tags this -> bool) =
      fun (x3135 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3135) "ignoreMethod")
    let (set_ignoreMethod : 'tags this -> bool -> unit) =
      fun (x3137 : 'tags this) ->
        fun (x3138 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3137) "ignoreMethod"
            (Ojs.bool_to_js x3138)
    let (get_ignoreSearch : 'tags this -> bool) =
      fun (x3140 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3140) "ignoreSearch")
    let (set_ignoreSearch : 'tags this -> bool -> unit) =
      fun (x3142 : 'tags this) ->
        fun (x3143 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3142) "ignoreSearch"
            (Ojs.bool_to_js x3143)
    let (get_ignoreVary : 'tags this -> bool) =
      fun (x3145 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3145) "ignoreVary")
    let (set_ignoreVary : 'tags this -> bool -> unit) =
      fun (x3147 : 'tags this) ->
        fun (x3148 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3147) "ignoreVary"
            (Ojs.bool_to_js x3148)
    let cast_from = Obj.magic
  end
module MultiCacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions  | `MultiCacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3151 : Ojs.t) -> t_of_js x3151
    and t_0_to_js : t_0 -> Ojs.t = fun (x3150 : t) -> t_to_js x3150
    type tags = [ `CacheQueryOptions  | `MultiCacheQueryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3154 : Ojs.t) -> intf_of_js __tags_of_js x3154
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3152 : __tags intf) -> intf_to_js __tags_to_js x3152
    let (get_cacheName : 'tags this -> string) =
      fun (x3156 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3156) "cacheName")
    let (set_cacheName : 'tags this -> string -> unit) =
      fun (x3158 : 'tags this) ->
        fun (x3159 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3158) "cacheName"
            (Ojs.string_to_js x3159)
    let cast_from = Obj.magic
  end
module RequestDestination =
  struct
    type t =
      [ `L_s0  | `L_s38_audio  | `L_s39_audioworklet  | `L_s62_document 
      | `L_s64_embed  | `L_s76_font  | `L_s78_frame  | `L_s90_iframe 
      | `L_s91_image  | `L_s110_manifest  | `L_s133_object 
      | `L_s146_paintworklet  | `L_s170_report  | `L_s175_script 
      | `L_s177_sharedworker  | `L_s188_style  | `L_s194_track 
      | `L_s205_video  | `L_s210_worker  | `L_s212_xslt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3162 : Ojs.t) ->
        let x3163 = x3162 in
        match Ojs.string_of_js x3163 with
        | "" -> `L_s0
        | "audio" -> `L_s38_audio
        | "audioworklet" -> `L_s39_audioworklet
        | "document" -> `L_s62_document
        | "embed" -> `L_s64_embed
        | "font" -> `L_s76_font
        | "frame" -> `L_s78_frame
        | "iframe" -> `L_s90_iframe
        | "image" -> `L_s91_image
        | "manifest" -> `L_s110_manifest
        | "object" -> `L_s133_object
        | "paintworklet" -> `L_s146_paintworklet
        | "report" -> `L_s170_report
        | "script" -> `L_s175_script
        | "sharedworker" -> `L_s177_sharedworker
        | "style" -> `L_s188_style
        | "track" -> `L_s194_track
        | "video" -> `L_s205_video
        | "worker" -> `L_s210_worker
        | "xslt" -> `L_s212_xslt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3161 :
          [ `L_s0  | `L_s38_audio  | `L_s39_audioworklet  | `L_s62_document 
          | `L_s64_embed  | `L_s76_font  | `L_s78_frame  | `L_s90_iframe 
          | `L_s91_image  | `L_s110_manifest  | `L_s133_object 
          | `L_s146_paintworklet  | `L_s170_report  | `L_s175_script 
          | `L_s177_sharedworker  | `L_s188_style  | `L_s194_track 
          | `L_s205_video  | `L_s210_worker  | `L_s212_xslt ])
        ->
        match x3161 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s38_audio -> Ojs.string_to_js "audio"
        | `L_s39_audioworklet -> Ojs.string_to_js "audioworklet"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s64_embed -> Ojs.string_to_js "embed"
        | `L_s76_font -> Ojs.string_to_js "font"
        | `L_s78_frame -> Ojs.string_to_js "frame"
        | `L_s90_iframe -> Ojs.string_to_js "iframe"
        | `L_s91_image -> Ojs.string_to_js "image"
        | `L_s110_manifest -> Ojs.string_to_js "manifest"
        | `L_s133_object -> Ojs.string_to_js "object"
        | `L_s146_paintworklet -> Ojs.string_to_js "paintworklet"
        | `L_s170_report -> Ojs.string_to_js "report"
        | `L_s175_script -> Ojs.string_to_js "script"
        | `L_s177_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s188_style -> Ojs.string_to_js "style"
        | `L_s194_track -> Ojs.string_to_js "track"
        | `L_s205_video -> Ojs.string_to_js "video"
        | `L_s210_worker -> Ojs.string_to_js "worker"
        | `L_s212_xslt -> Ojs.string_to_js "xslt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3165 : Ojs.t) -> t_of_js x3165
    and t_0_to_js : t_0 -> Ojs.t = fun (x3164 : t) -> t_to_js x3164
  end
module RequestRedirect =
  struct
    type t = [ `L_s67_error  | `L_s75_follow  | `L_s111_manual ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3167 : Ojs.t) ->
        let x3168 = x3167 in
        match Ojs.string_of_js x3168 with
        | "error" -> `L_s67_error
        | "follow" -> `L_s75_follow
        | "manual" -> `L_s111_manual
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3166 : [ `L_s67_error  | `L_s75_follow  | `L_s111_manual ]) ->
        match x3166 with
        | `L_s67_error -> Ojs.string_to_js "error"
        | `L_s75_follow -> Ojs.string_to_js "follow"
        | `L_s111_manual -> Ojs.string_to_js "manual"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3170 : Ojs.t) -> t_of_js x3170
    and t_0_to_js : t_0 -> Ojs.t = fun (x3169 : t) -> t_to_js x3169
  end
module RequestMode =
  struct
    type t =
      [ `L_s55_cors  | `L_s120_navigate  | `L_s125_no_cors 
      | `L_s173_same_origin ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3172 : Ojs.t) ->
        let x3173 = x3172 in
        match Ojs.string_of_js x3173 with
        | "cors" -> `L_s55_cors
        | "navigate" -> `L_s120_navigate
        | "no-cors" -> `L_s125_no_cors
        | "same-origin" -> `L_s173_same_origin
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3171 :
          [ `L_s55_cors  | `L_s120_navigate  | `L_s125_no_cors 
          | `L_s173_same_origin ])
        ->
        match x3171 with
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s120_navigate -> Ojs.string_to_js "navigate"
        | `L_s125_no_cors -> Ojs.string_to_js "no-cors"
        | `L_s173_same_origin -> Ojs.string_to_js "same-origin"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3175 : Ojs.t) -> t_of_js x3175
    and t_0_to_js : t_0 -> Ojs.t = fun (x3174 : t) -> t_to_js x3174
  end
module RequestCache =
  struct
    type t =
      [ `L_s57_default  | `L_s77_force_cache  | `L_s124_no_cache 
      | `L_s128_no_store  | `L_s137_only_if_cached  | `L_s169_reload ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3177 : Ojs.t) ->
        let x3178 = x3177 in
        match Ojs.string_of_js x3178 with
        | "default" -> `L_s57_default
        | "force-cache" -> `L_s77_force_cache
        | "no-cache" -> `L_s124_no_cache
        | "no-store" -> `L_s128_no_store
        | "only-if-cached" -> `L_s137_only_if_cached
        | "reload" -> `L_s169_reload
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3176 :
          [ `L_s57_default  | `L_s77_force_cache  | `L_s124_no_cache 
          | `L_s128_no_store  | `L_s137_only_if_cached  | `L_s169_reload ])
        ->
        match x3176 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s77_force_cache -> Ojs.string_to_js "force-cache"
        | `L_s124_no_cache -> Ojs.string_to_js "no-cache"
        | `L_s128_no_store -> Ojs.string_to_js "no-store"
        | `L_s137_only_if_cached -> Ojs.string_to_js "only-if-cached"
        | `L_s169_reload -> Ojs.string_to_js "reload"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3180 : Ojs.t) -> t_of_js x3180
    and t_0_to_js : t_0 -> Ojs.t = fun (x3179 : t) -> t_to_js x3179
  end
module ReferrerPolicy =
  struct
    type t =
      [ `L_s0  | `L_s126_no_referrer  | `L_s127_no_referrer_when_downgrade 
      | `L_s141_origin  | `L_s142_origin_when_cross_origin 
      | `L_s173_same_origin  | `L_s186_strict_origin 
      | `L_s187_strict_origin_when_cross_origin  | `L_s199_unsafe_url ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3182 : Ojs.t) ->
        let x3183 = x3182 in
        match Ojs.string_of_js x3183 with
        | "" -> `L_s0
        | "no-referrer" -> `L_s126_no_referrer
        | "no-referrer-when-downgrade" -> `L_s127_no_referrer_when_downgrade
        | "origin" -> `L_s141_origin
        | "origin-when-cross-origin" -> `L_s142_origin_when_cross_origin
        | "same-origin" -> `L_s173_same_origin
        | "strict-origin" -> `L_s186_strict_origin
        | "strict-origin-when-cross-origin" ->
            `L_s187_strict_origin_when_cross_origin
        | "unsafe-url" -> `L_s199_unsafe_url
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3181 :
          [ `L_s0  | `L_s126_no_referrer 
          | `L_s127_no_referrer_when_downgrade  | `L_s141_origin 
          | `L_s142_origin_when_cross_origin  | `L_s173_same_origin 
          | `L_s186_strict_origin  | `L_s187_strict_origin_when_cross_origin 
          | `L_s199_unsafe_url ])
        ->
        match x3181 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s126_no_referrer -> Ojs.string_to_js "no-referrer"
        | `L_s127_no_referrer_when_downgrade ->
            Ojs.string_to_js "no-referrer-when-downgrade"
        | `L_s141_origin -> Ojs.string_to_js "origin"
        | `L_s142_origin_when_cross_origin ->
            Ojs.string_to_js "origin-when-cross-origin"
        | `L_s173_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s186_strict_origin -> Ojs.string_to_js "strict-origin"
        | `L_s187_strict_origin_when_cross_origin ->
            Ojs.string_to_js "strict-origin-when-cross-origin"
        | `L_s199_unsafe_url -> Ojs.string_to_js "unsafe-url"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3185 : Ojs.t) -> t_of_js x3185
    and t_0_to_js : t_0 -> Ojs.t = fun (x3184 : t) -> t_to_js x3184
  end
module RequestCredentials =
  struct
    type t = [ `L_s93_include  | `L_s135_omit  | `L_s173_same_origin ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3187 : Ojs.t) ->
        let x3188 = x3187 in
        match Ojs.string_of_js x3188 with
        | "include" -> `L_s93_include
        | "omit" -> `L_s135_omit
        | "same-origin" -> `L_s173_same_origin
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3186 : [ `L_s93_include  | `L_s135_omit  | `L_s173_same_origin ])
        ->
        match x3186 with
        | `L_s93_include -> Ojs.string_to_js "include"
        | `L_s135_omit -> Ojs.string_to_js "omit"
        | `L_s173_same_origin -> Ojs.string_to_js "same-origin"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3190 : Ojs.t) -> t_of_js x3190
    and t_0_to_js : t_0 -> Ojs.t = fun (x3189 : t) -> t_to_js x3189
  end
module rec
  AnonymousInterface43:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Headers.t
                         val set_prototype : t -> Headers.t -> unit
                         val create :
                           t -> ?init:HeadersInit.t -> unit -> Headers.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3192 : Ojs.t) -> x3192
    and t_to_js : t -> Ojs.t = fun (x3191 : Ojs.t) -> x3191
    let (get_prototype : t -> Headers.t) =
      fun (x3193 : t) ->
        Headers.t_of_js (Ojs.get_prop_ascii (t_to_js x3193) "prototype")
    let (set_prototype : t -> Headers.t -> unit) =
      fun (x3194 : t) ->
        fun (x3195 : Headers.t) ->
          Ojs.set_prop_ascii (t_to_js x3194) "prototype"
            (Headers.t_to_js x3195)
    let (create : t -> ?init:HeadersInit.t -> unit -> Headers.t) =
      fun (x3199 : t) ->
        fun ?init:(x3196 : HeadersInit.t option) ->
          fun () ->
            Headers.t_of_js
              (Ojs.new_obj_arr (t_to_js x3199)
                 (let x3197 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3196 with
                   | Some x3198 ->
                       ignore
                         (Ojs.call x3197 "push"
                            [|(HeadersInit.t_to_js x3198)|])
                   | None -> ());
                  x3197))
  end
 and
  Headers:sig
            type t =
              [ `Headers  | (string * string) IterableIterator.tags_1] intf
            type t_0 = t
            [@@@js.stop ]
            type tags =
              [ `Headers  | (string * string) IterableIterator.tags_1]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags =
                [ `Headers  | (string * string) IterableIterator.tags_1]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val append : 'tags this -> name:string -> value:string -> unit
            val delete : 'tags this -> name:string -> unit
            val get_ : 'tags this -> name:string -> string or_null
            val has : 'tags this -> name:string -> bool
            val set_ : 'tags this -> name:string -> value:string -> unit
            val forEach :
              'tags this ->
                callbackfn:(value:string -> key:string -> parent:t -> unit)
                  -> ?thisArg:any -> unit -> unit
            val entries :
              'tags this -> (string * string) IterableIterator.t_1
            val keys : 'tags this -> string IterableIterator.t_1
            val values : 'tags this -> string IterableIterator.t_1
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : ?init:HeadersInit.t -> unit -> t
          end =
  struct
    type t = [ `Headers  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3201 : Ojs.t) -> t_of_js x3201
    and t_0_to_js : t_0 -> Ojs.t = fun (x3200 : t) -> t_to_js x3200
    type tags = [ `Headers  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3204 : Ojs.t) -> intf_of_js __tags_of_js x3204
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3202 : __tags intf) -> intf_to_js __tags_to_js x3202
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x3208 : 'tags this) ->
        fun ~name:(x3206 : string) ->
          fun ~value:(x3207 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3208) "append"
                 [|(Ojs.string_to_js x3206);(Ojs.string_to_js x3207)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x3211 : 'tags this) ->
        fun ~name:(x3210 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x3211) "delete"
               [|(Ojs.string_to_js x3210)|])
    let (get_ : 'tags this -> name:string -> string or_null) =
      fun (x3214 : 'tags this) ->
        fun ~name:(x3213 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3214) "get"
               [|(Ojs.string_to_js x3213)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x3218 : 'tags this) ->
        fun ~name:(x3217 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x3218) "has"
               [|(Ojs.string_to_js x3217)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x3222 : 'tags this) ->
        fun ~name:(x3220 : string) ->
          fun ~value:(x3221 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3222) "set"
                 [|(Ojs.string_to_js x3220);(Ojs.string_to_js x3221)|])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3231 : 'tags this) ->
        fun
          ~callbackfn:(x3224 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x3225 : any option) ->
            fun () ->
              ignore
                (let x3233 = this_to_js Obj.magic x3231 in
                 Ojs.call (Ojs.get_prop_ascii x3233 "forEach") "apply"
                   [|x3233;((let x3226 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3226 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3228 : Ojs.t) ->
                                          fun (x3229 : Ojs.t) ->
                                            fun (x3230 : Ojs.t) ->
                                              x3224
                                                ~value:(Ojs.string_of_js
                                                          x3228)
                                                ~key:(Ojs.string_of_js x3229)
                                                ~parent:(t_of_js x3230)))|]);
                             (match x3225 with
                              | Some x3227 ->
                                  ignore
                                    (Ojs.call x3226 "push"
                                       [|(any_to_js x3227)|])
                              | None -> ());
                             x3226))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x3234 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x3236 : Ojs.t) ->
             let x3237 = x3236 in
             ((Ojs.string_of_js (Ojs.array_get x3237 0)),
               (Ojs.string_of_js (Ojs.array_get x3237 1))))
          (Ojs.call (this_to_js Obj.magic x3234) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x3238 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3238) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x3241 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3241) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Headers")
             "prototype")
    let (create : ?init:HeadersInit.t -> unit -> t) =
      fun ?init:(x3244 : HeadersInit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Headers")
               (let x3245 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3244 with
                 | Some x3246 ->
                     ignore
                       (Ojs.call x3245 "push" [|(HeadersInit.t_to_js x3246)|])
                 | None -> ());
                x3245))
  end and
       HeadersInit:sig
                     type t =
                       ((Headers.t, (string, string) Record.t_2) union2,
                         string list) or_array
                     type t_0 = t
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                   end =
       struct
         type t =
           ((Headers.t, (string, string) Record.t_2) union2, string list)
             or_array
         let rec t_of_js : Ojs.t -> t =
           fun (x3255 : Ojs.t) ->
             or_array_of_js
               (fun (x3256 : Ojs.t) ->
                  union2_of_js Headers.t_of_js
                    (fun (x3258 : Ojs.t) ->
                       Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js
                         x3258) x3256)
               (fun (x3261 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x3261)
               x3255
         and t_to_js : t -> Ojs.t =
           fun
             (x3247 :
               ((Headers.t, (string, string) Record.t_2) union2, string list)
                 or_array)
             ->
             or_array_to_js
               (fun (x3248 : (Headers.t, (string, string) Record.t_2) union2)
                  ->
                  union2_to_js Headers.t_to_js
                    (fun (x3250 : (string, string) Record.t_2) ->
                       Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js
                         x3250) x3248)
               (fun (x3253 : string list) ->
                  Ojs.list_to_js Ojs.string_to_js x3253) x3247
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x3264 : Ojs.t) -> t_of_js x3264
         and t_0_to_js : t_0 -> Ojs.t = fun (x3263 : t) -> t_to_js x3263
       end
module EndingType =
  struct
    type t = [ `L_s119_native  | `L_s195_transparent ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3266 : Ojs.t) ->
        let x3267 = x3266 in
        match Ojs.string_of_js x3267 with
        | "native" -> `L_s119_native
        | "transparent" -> `L_s195_transparent
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3265 : [ `L_s119_native  | `L_s195_transparent ]) ->
        match x3265 with
        | `L_s119_native -> Ojs.string_to_js "native"
        | `L_s195_transparent -> Ojs.string_to_js "transparent"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3269 : Ojs.t) -> t_of_js x3269
    and t_0_to_js : t_0 -> Ojs.t = fun (x3268 : t) -> t_to_js x3268
  end
module BlobPropertyBag =
  struct
    type t = [ `BlobPropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3271 : Ojs.t) -> t_of_js x3271
    and t_0_to_js : t_0 -> Ojs.t = fun (x3270 : t) -> t_to_js x3270
    type tags = [ `BlobPropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3274 : Ojs.t) -> intf_of_js __tags_of_js x3274
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3272 : __tags intf) -> intf_to_js __tags_to_js x3272
    let (get_endings : 'tags this -> EndingType.t) =
      fun (x3276 : 'tags this) ->
        EndingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3276) "endings")
    let (set_endings : 'tags this -> EndingType.t -> unit) =
      fun (x3278 : 'tags this) ->
        fun (x3279 : EndingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3278) "endings"
            (EndingType.t_to_js x3279)
    let (get_type : 'tags this -> string) =
      fun (x3281 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3281) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x3283 : 'tags this) ->
        fun (x3284 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3283) "type"
            (Ojs.string_to_js x3284)
    let cast_from = Obj.magic
  end
module FilePropertyBag =
  struct
    type t = [ `BlobPropertyBag  | `FilePropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3287 : Ojs.t) -> t_of_js x3287
    and t_0_to_js : t_0 -> Ojs.t = fun (x3286 : t) -> t_to_js x3286
    type tags = [ `BlobPropertyBag  | `FilePropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3290 : Ojs.t) -> intf_of_js __tags_of_js x3290
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3288 : __tags intf) -> intf_to_js __tags_to_js x3288
    let (get_lastModified : 'tags this -> float) =
      fun (x3292 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3292) "lastModified")
    let (set_lastModified : 'tags this -> float -> unit) =
      fun (x3294 : 'tags this) ->
        fun (x3295 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3294) "lastModified"
            (Ojs.float_to_js x3295)
    let cast_from = Obj.magic
  end
module StreamPipeOptions =
  struct
    type t = [ `StreamPipeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3298 : Ojs.t) -> t_of_js x3298
    and t_0_to_js : t_0 -> Ojs.t = fun (x3297 : t) -> t_to_js x3297
    type tags = [ `StreamPipeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3301 : Ojs.t) -> intf_of_js __tags_of_js x3301
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3299 : __tags intf) -> intf_to_js __tags_to_js x3299
    let (get_preventAbort : 'tags this -> bool) =
      fun (x3303 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3303) "preventAbort")
    let (set_preventAbort : 'tags this -> bool -> unit) =
      fun (x3305 : 'tags this) ->
        fun (x3306 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3305) "preventAbort"
            (Ojs.bool_to_js x3306)
    let (get_preventCancel : 'tags this -> bool) =
      fun (x3308 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3308) "preventCancel")
    let (set_preventCancel : 'tags this -> bool -> unit) =
      fun (x3310 : 'tags this) ->
        fun (x3311 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3310) "preventCancel"
            (Ojs.bool_to_js x3311)
    let (get_preventClose : 'tags this -> bool) =
      fun (x3313 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3313) "preventClose")
    let (set_preventClose : 'tags this -> bool -> unit) =
      fun (x3315 : 'tags this) ->
        fun (x3316 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3315) "preventClose"
            (Ojs.bool_to_js x3316)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x3318 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3318) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x3320 : 'tags this) ->
        fun (x3321 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3320) "signal"
            (AbortSignal.t_to_js x3321)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface135:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> WritableStreamDefaultController.t
                          val set_prototype :
                            t -> WritableStreamDefaultController.t -> unit
                          val create : t -> WritableStreamDefaultController.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3324 : Ojs.t) -> x3324
    and t_to_js : t -> Ojs.t = fun (x3323 : Ojs.t) -> x3323
    let (get_prototype : t -> WritableStreamDefaultController.t) =
      fun (x3325 : t) ->
        WritableStreamDefaultController.t_of_js
          (Ojs.get_prop_ascii (t_to_js x3325) "prototype")
    let (set_prototype : t -> WritableStreamDefaultController.t -> unit) =
      fun (x3326 : t) ->
        fun (x3327 : WritableStreamDefaultController.t) ->
          Ojs.set_prop_ascii (t_to_js x3326) "prototype"
            (WritableStreamDefaultController.t_to_js x3327)
    let (create : t -> WritableStreamDefaultController.t) =
      fun (x3328 : t) ->
        WritableStreamDefaultController.t_of_js
          (Ojs.new_obj (t_to_js x3328) [||])
  end
 and
  WritableStreamDefaultController:sig
                                    type t =
                                      [ `WritableStreamDefaultController ]
                                        intf
                                    type t_0 = t
                                    [@@@js.stop ]
                                    type tags =
                                      [ `WritableStreamDefaultController ]
                                    type tags_0 = tags
                                    [@@@js.start ]
                                    [@@@js.implem
                                      type tags =
                                        [ `WritableStreamDefaultController ]
                                      type tags_0 = tags]
                                    type 'tags this =
                                      'tags intf constraint 'tags =
                                                  [>
                                                    `WritableStreamDefaultController
                                                      ]
                                    val t_to_js : t -> Ojs.t
                                    val t_of_js : Ojs.t -> t
                                    val t_0_to_js : t_0 -> Ojs.t
                                    val t_0_of_js : Ojs.t -> t_0
                                    val error :
                                      'tags this -> ?e:any -> unit -> unit
                                    val cast_from : 'tags this -> t
                                    val prototype : unit -> t
                                    val create : unit -> t
                                  end =
  struct
    type t = [ `WritableStreamDefaultController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3330 : Ojs.t) -> t_of_js x3330
    and t_0_to_js : t_0 -> Ojs.t = fun (x3329 : t) -> t_to_js x3329
    type tags = [ `WritableStreamDefaultController ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3333 : Ojs.t) -> intf_of_js __tags_of_js x3333
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3331 : __tags intf) -> intf_to_js __tags_to_js x3331
    let (error : 'tags this -> ?e:any -> unit -> unit) =
      fun (x3338 : 'tags this) ->
        fun ?e:(x3335 : any option) ->
          fun () ->
            ignore
              (let x3340 = this_to_js Obj.magic x3338 in
               Ojs.call (Ojs.get_prop_ascii x3340 "error") "apply"
                 [|x3340;((let x3336 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3335 with
                            | Some x3337 ->
                                ignore
                                  (Ojs.call x3336 "push"
                                     [|(any_to_js x3337)|])
                            | None -> ());
                           x3336))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             [||])
  end
module UnderlyingSinkWriteCallback =
  struct
    type 'W t = [ `UnderlyingSinkWriteCallback of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3343 : Ojs.t) -> t_of_js __W_of_js x3343
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3341 : __W t) -> t_to_js __W_to_js x3341
    type 'W tags = [ `UnderlyingSinkWriteCallback of 'W ]
    type 'W tags_1 = 'W tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3347 : Ojs.t) -> intf_of_js __tags_of_js x3347
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3345 : __tags intf) -> intf_to_js __tags_to_js x3345
    let (apply :
      ('tags, 'W) this ->
        chunk:'W ->
          controller:WritableStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3351 : ('tags, 'W) this) ->
        fun ~chunk:(x3349 : 'W) ->
          fun ~controller:(x3350 : WritableStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3355 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x3355)
              (Ojs.apply (this_to_js Obj.magic Obj.magic x3351)
                 [|(Obj.magic x3349);(WritableStreamDefaultController.t_to_js
                                        x3350)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkStartCallback =
  struct
    type t = [ `UnderlyingSinkStartCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3358 : Ojs.t) -> t_of_js x3358
    and t_0_to_js : t_0 -> Ojs.t = fun (x3357 : t) -> t_to_js x3357
    type tags = [ `UnderlyingSinkStartCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3361 : Ojs.t) -> intf_of_js __tags_of_js x3361
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3359 : __tags intf) -> intf_to_js __tags_to_js x3359
    let (apply :
      'tags this -> controller:WritableStreamDefaultController.t -> any) =
      fun (x3364 : 'tags this) ->
        fun ~controller:(x3363 : WritableStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x3364)
               [|(WritableStreamDefaultController.t_to_js x3363)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkCloseCallback =
  struct
    type t = [ `UnderlyingSinkCloseCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3367 : Ojs.t) -> t_of_js x3367
    and t_0_to_js : t_0 -> Ojs.t = fun (x3366 : t) -> t_to_js x3366
    type tags = [ `UnderlyingSinkCloseCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3370 : Ojs.t) -> intf_of_js __tags_of_js x3370
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3368 : __tags intf) -> intf_to_js __tags_to_js x3368
    let (apply : 'tags this -> (unit, unit PromiseLike.t_1) union2) =
      fun (x3372 : 'tags this) ->
        union2_of_js Ojs.unit_of_js
          (fun (x3375 : Ojs.t) -> PromiseLike.t_1_of_js Ojs.unit_of_js x3375)
          (Ojs.apply (this_to_js Obj.magic x3372) [||])
    let cast_from = Obj.magic
  end
module UnderlyingSinkAbortCallback =
  struct
    type t = [ `UnderlyingSinkAbortCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3378 : Ojs.t) -> t_of_js x3378
    and t_0_to_js : t_0 -> Ojs.t = fun (x3377 : t) -> t_to_js x3377
    type tags = [ `UnderlyingSinkAbortCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3381 : Ojs.t) -> intf_of_js __tags_of_js x3381
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3379 : __tags intf) -> intf_to_js __tags_to_js x3379
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3386 : 'tags this) ->
        fun ?reason:(x3383 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x3389 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x3389)
              (Ojs.call (this_to_js Obj.magic x3386) "apply"
                 [|Ojs.null;((let x3384 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3383 with
                               | Some x3385 ->
                                   ignore
                                     (Ojs.call x3384 "push"
                                        [|(any_to_js x3385)|])
                               | None -> ());
                              x3384))|])
    let cast_from = Obj.magic
  end
module UnderlyingSink =
  struct
    type 'W t = [ `UnderlyingSink of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3393 : Ojs.t) -> t_of_js __W_of_js x3393
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3391 : __W t) -> t_to_js __W_to_js x3391
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3397 : Ojs.t) -> t_of_js any_of_js x3397
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3395 : any t) -> t_to_js any_to_js x3395
    type 'W tags = [ `UnderlyingSink of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3401 : Ojs.t) -> intf_of_js __tags_of_js x3401
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3399 : __tags intf) -> intf_to_js __tags_to_js x3399
    let (get_abort : ('tags, 'W) this -> UnderlyingSinkAbortCallback.t) =
      fun (x3403 : ('tags, 'W) this) ->
        UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3403) "abort")
    let (set_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x3406 : ('tags, 'W) this) ->
        fun (x3407 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3406) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x3407)
    let (get_close : ('tags, 'W) this -> UnderlyingSinkCloseCallback.t) =
      fun (x3410 : ('tags, 'W) this) ->
        UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3410) "close")
    let (set_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x3413 : ('tags, 'W) this) ->
        fun (x3414 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3413) "close"
            (UnderlyingSinkCloseCallback.t_to_js x3414)
    let (get_start : ('tags, 'W) this -> UnderlyingSinkStartCallback.t) =
      fun (x3417 : ('tags, 'W) this) ->
        UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3417) "start")
    let (set_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x3420 : ('tags, 'W) this) ->
        fun (x3421 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3420) "start"
            (UnderlyingSinkStartCallback.t_to_js x3421)
    let (get_type : ('tags, 'W) this -> never or_undefined) =
      fun (x3424 : ('tags, 'W) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3424) "type")
    let (set_type : ('tags, 'W) this -> never or_undefined -> unit) =
      fun (x3428 : ('tags, 'W) this) ->
        fun (x3429 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3428) "type"
            (or_undefined_to_js never_to_js x3429)
    let (get_write : ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t) =
      fun (x3433 : ('tags, 'W) this) ->
        UnderlyingSinkWriteCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3433) "write")
    let (set_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit) =
      fun (x3437 : ('tags, 'W) this) ->
        fun (x3438 : 'W UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3437) "write"
            (UnderlyingSinkWriteCallback.t_to_js Obj.magic x3438)
    let cast_from = Obj.magic
  end
module QueuingStrategySize =
  struct
    type 'T t = [ `QueuingStrategySize of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3444 : Ojs.t) -> t_of_js __T_of_js x3444
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3442 : __T t) -> t_to_js __T_to_js x3442
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3448 : Ojs.t) -> t_of_js any_of_js x3448
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3446 : any t) -> t_to_js any_to_js x3446
    type 'T tags = [ `QueuingStrategySize of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3452 : Ojs.t) -> intf_of_js __tags_of_js x3452
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3450 : __tags intf) -> intf_to_js __tags_to_js x3450
    let (apply : ('tags, 'T) this -> ?chunk:'T -> unit -> float) =
      fun (x3457 : ('tags, 'T) this) ->
        fun ?chunk:(x3454 : 'T option) ->
          fun () ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic Obj.magic x3457) "apply"
                 [|Ojs.null;((let x3455 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3454 with
                               | Some x3456 ->
                                   ignore
                                     (Ojs.call x3455 "push"
                                        [|(Obj.magic x3456)|])
                               | None -> ());
                              x3455))|])
    let cast_from = Obj.magic
  end
module QueuingStrategy =
  struct
    type 'T t = [ `QueuingStrategy of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3462 : Ojs.t) -> t_of_js __T_of_js x3462
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3460 : __T t) -> t_to_js __T_to_js x3460
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3466 : Ojs.t) -> t_of_js any_of_js x3466
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3464 : any t) -> t_to_js any_to_js x3464
    type 'T tags = [ `QueuingStrategy of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3470 : Ojs.t) -> intf_of_js __tags_of_js x3470
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3468 : __tags intf) -> intf_to_js __tags_to_js x3468
    let (get_highWaterMark : ('tags, 'T) this -> float) =
      fun (x3472 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3472)
             "highWaterMark")
    let (set_highWaterMark : ('tags, 'T) this -> float -> unit) =
      fun (x3475 : ('tags, 'T) this) ->
        fun (x3476 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3475)
            "highWaterMark" (Ojs.float_to_js x3476)
    let (get_size : ('tags, 'T) this -> 'T QueuingStrategySize.t) =
      fun (x3479 : ('tags, 'T) this) ->
        QueuingStrategySize.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3479) "size")
    let (set_size : ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit) =
      fun (x3483 : ('tags, 'T) this) ->
        fun (x3484 : 'T QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3483) "size"
            (QueuingStrategySize.t_to_js Obj.magic x3484)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface134:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WritableStream.t_0
                          val set_prototype : t -> WritableStream.t_0 -> unit
                          val create :
                            t ->
                              ?underlyingSink:'W UnderlyingSink.t ->
                                ?strategy:'W QueuingStrategy.t ->
                                  unit -> 'W WritableStream.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3489 : Ojs.t) -> x3489
    and t_to_js : t -> Ojs.t = fun (x3488 : Ojs.t) -> x3488
    let (get_prototype : t -> WritableStream.t_0) =
      fun (x3490 : t) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3490) "prototype")
    let (set_prototype : t -> WritableStream.t_0 -> unit) =
      fun (x3491 : t) ->
        fun (x3492 : WritableStream.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3491) "prototype"
            (WritableStream.t_0_to_js x3492)
    let (create :
      t ->
        ?underlyingSink:'W UnderlyingSink.t ->
          ?strategy:'W QueuingStrategy.t -> unit -> 'W WritableStream.t)
      =
      fun (x3500 : t) ->
        fun ?underlyingSink:(x3493 : 'W UnderlyingSink.t option) ->
          fun ?strategy:(x3494 : 'W QueuingStrategy.t option) ->
            fun () ->
              WritableStream.t_of_js Obj.magic
                (Ojs.new_obj_arr (t_to_js x3500)
                   (let x3495 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3493 with
                     | Some x3498 ->
                         ignore
                           (Ojs.call x3495 "push"
                              [|(UnderlyingSink.t_to_js Obj.magic x3498)|])
                     | None -> ());
                    (match x3494 with
                     | Some x3496 ->
                         ignore
                           (Ojs.call x3495 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x3496)|])
                     | None -> ());
                    x3495))
  end
 and
  AnonymousInterface136:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> WritableStreamDefaultWriter.t_0
                          val set_prototype :
                            t -> WritableStreamDefaultWriter.t_0 -> unit
                          val create :
                            t ->
                              stream:'W WritableStream.t ->
                                'W WritableStreamDefaultWriter.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3503 : Ojs.t) -> x3503
    and t_to_js : t -> Ojs.t = fun (x3502 : Ojs.t) -> x3502
    let (get_prototype : t -> WritableStreamDefaultWriter.t_0) =
      fun (x3504 : t) ->
        WritableStreamDefaultWriter.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3504) "prototype")
    let (set_prototype : t -> WritableStreamDefaultWriter.t_0 -> unit) =
      fun (x3505 : t) ->
        fun (x3506 : WritableStreamDefaultWriter.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3505) "prototype"
            (WritableStreamDefaultWriter.t_0_to_js x3506)
    let (create :
      t -> stream:'W WritableStream.t -> 'W WritableStreamDefaultWriter.t) =
      fun (x3509 : t) ->
        fun ~stream:(x3507 : 'W WritableStream.t) ->
          WritableStreamDefaultWriter.t_of_js Obj.magic
            (Ojs.new_obj (t_to_js x3509)
               [|(WritableStream.t_to_js Obj.magic x3507)|])
  end and
       WritableStream:sig
                        type 'W t = [ `WritableStream of 'W ] intf
                        type 'W t_1 = 'W t
                        type t_0 = any t
                        [@@@js.stop ]
                        type 'W tags = [ `WritableStream of 'W ]
                        type 'W tags_1 = 'W tags
                        type tags_0 = any tags
                        [@@@js.start ]
                        [@@@js.implem
                          type 'W tags = [ `WritableStream of 'W ]
                          type 'W tags_1 = 'W tags
                          type tags_0 = any tags]
                        type ('tags, 'W) this =
                          'tags intf constraint 'tags =
                                      [> `WritableStream of 'W ]
                        val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                        val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                        val t_1_to_js : ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                        val t_1_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val get_locked : ('tags, 'W) this -> bool
                        val abort :
                          ('tags, 'W) this ->
                            ?reason:any -> unit -> unit Promise.t_1
                        val close : ('tags, 'W) this -> unit Promise.t_1
                        val getWriter :
                          ('tags, 'W) this ->
                            'W WritableStreamDefaultWriter.t
                        val cast_from : ('tags, 'W) this -> 'W t
                        val prototype : unit -> t_0
                        val create :
                          ?underlyingSink:'W UnderlyingSink.t ->
                            ?strategy:'W QueuingStrategy.t -> unit -> 'W t
                      end =
       struct
         type 'W t = [ `WritableStream of 'W ] intf
         let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
           fun _W -> Obj.magic
         and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t =
           fun _W -> Obj.magic
         type 'W t_1 = 'W t
         let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun
           (type __W) ->
           fun (__W_of_js : Ojs.t -> __W) ->
             fun (x3513 : Ojs.t) -> t_of_js __W_of_js x3513
         and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type
           __W) ->
           fun (__W_to_js : __W -> Ojs.t) ->
             fun (x3511 : __W t) -> t_to_js __W_to_js x3511
         type t_0 = any t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x3517 : Ojs.t) -> t_of_js any_of_js x3517
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x3515 : any t) -> t_to_js any_to_js x3515
         type 'W tags = [ `WritableStream of 'W ]
         type 'W tags_1 = 'W tags
         type tags_0 = any tags
         type ('tags, 'W) this =
           'tags intf constraint 'tags = [> `WritableStream of 'W ]
         let rec this_of_js :
           'tags 'W .
             (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
           = fun (type __tags) -> fun (type __W) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (__W_of_js : Ojs.t -> __W) ->
               fun (x3521 : Ojs.t) -> intf_of_js __tags_of_js x3521
         and this_to_js :
           'tags 'W .
             ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
           = fun (type __tags) -> fun (type __W) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (__W_to_js : __W -> Ojs.t) ->
               fun (x3519 : __tags intf) -> intf_to_js __tags_to_js x3519
         let (get_locked : ('tags, 'W) this -> bool) =
           fun (x3523 : ('tags, 'W) this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3523)
                  "locked")
         let (abort :
           ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1) =
           fun (x3529 : ('tags, 'W) this) ->
             fun ?reason:(x3526 : any option) ->
               fun () ->
                 Promise.t_1_of_js Ojs.unit_of_js
                   (let x3532 = this_to_js Obj.magic Obj.magic x3529 in
                    Ojs.call (Ojs.get_prop_ascii x3532 "abort") "apply"
                      [|x3532;((let x3527 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x3526 with
                                 | Some x3528 ->
                                     ignore
                                       (Ojs.call x3527 "push"
                                          [|(any_to_js x3528)|])
                                 | None -> ());
                                x3527))|])
         let (close : ('tags, 'W) this -> unit Promise.t_1) =
           fun (x3534 : ('tags, 'W) this) ->
             Promise.t_1_of_js Ojs.unit_of_js
               (Ojs.call (this_to_js Obj.magic Obj.magic x3534) "close" [||])
         let (getWriter :
           ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t) =
           fun (x3538 : ('tags, 'W) this) ->
             WritableStreamDefaultWriter.t_of_js Obj.magic
               (Ojs.call (this_to_js Obj.magic Obj.magic x3538) "getWriter"
                  [||])
         let cast_from = Obj.magic
         let (prototype : unit -> t_0) =
           fun () ->
             t_0_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "WritableStream")
                  "prototype")
         let (create :
           ?underlyingSink:'W UnderlyingSink.t ->
             ?strategy:'W QueuingStrategy.t -> unit -> 'W t)
           =
           fun ?underlyingSink:(x3542 : 'W UnderlyingSink.t option) ->
             fun ?strategy:(x3543 : 'W QueuingStrategy.t option) ->
               fun () ->
                 t_of_js Obj.magic
                   (Ojs.new_obj_arr
                      (Ojs.get_prop_ascii Ojs.global "WritableStream")
                      (let x3544 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       (match x3542 with
                        | Some x3547 ->
                            ignore
                              (Ojs.call x3544 "push"
                                 [|(UnderlyingSink.t_to_js Obj.magic x3547)|])
                        | None -> ());
                       (match x3543 with
                        | Some x3545 ->
                            ignore
                              (Ojs.call x3544 "push"
                                 [|(QueuingStrategy.t_to_js Obj.magic x3545)|])
                        | None -> ());
                       x3544))
       end and
            WritableStreamDefaultWriter:sig
                                          type 'W t =
                                            [
                                              `WritableStreamDefaultWriter of
                                                'W ]
                                              intf
                                          type 'W t_1 = 'W t
                                          type t_0 = any t
                                          [@@@js.stop ]
                                          type 'W tags =
                                            [
                                              `WritableStreamDefaultWriter of
                                                'W ]
                                          type 'W tags_1 = 'W tags
                                          type tags_0 = any tags
                                          [@@@js.start ]
                                          [@@@js.implem
                                            type 'W tags =
                                              [
                                                `WritableStreamDefaultWriter
                                                  of 'W ]
                                            type 'W tags_1 = 'W tags
                                            type tags_0 = any tags]
                                          type ('tags, 'W) this =
                                            'tags intf constraint 'tags =
                                                        [>
                                                          `WritableStreamDefaultWriter
                                                            of 'W ]
                                          val t_to_js :
                                            ('W -> Ojs.t) -> 'W t -> Ojs.t
                                          val t_of_js :
                                            (Ojs.t -> 'W) -> Ojs.t -> 'W t
                                          val t_1_to_js :
                                            ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                                          val t_1_of_js :
                                            (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                                          val t_0_to_js : t_0 -> Ojs.t
                                          val t_0_of_js : Ojs.t -> t_0
                                          val get_closed :
                                            ('tags, 'W) this ->
                                              never or_undefined Promise.t_1
                                          val get_desiredSize :
                                            ('tags, 'W) this -> float or_null
                                          val get_ready :
                                            ('tags, 'W) this ->
                                              never or_undefined Promise.t_1
                                          val abort :
                                            ('tags, 'W) this ->
                                              ?reason:any ->
                                                unit -> unit Promise.t_1
                                          val close :
                                            ('tags, 'W) this ->
                                              unit Promise.t_1
                                          val releaseLock :
                                            ('tags, 'W) this -> unit
                                          val write :
                                            ('tags, 'W) this ->
                                              ?chunk:'W ->
                                                unit -> unit Promise.t_1
                                          val cast_from :
                                            ('tags, 'W) this -> 'W t
                                          val prototype : unit -> t_0
                                          val create :
                                            'W WritableStream.t -> 'W t
                                        end =
            struct
              type 'W t = [ `WritableStreamDefaultWriter of 'W ] intf
              let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
                fun _W -> Obj.magic
              and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t =
                fun _W -> Obj.magic
              type 'W t_1 = 'W t
              let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun
                (type __W) ->
                fun (__W_of_js : Ojs.t -> __W) ->
                  fun (x3552 : Ojs.t) -> t_of_js __W_of_js x3552
              and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun
                (type __W) ->
                fun (__W_to_js : __W -> Ojs.t) ->
                  fun (x3550 : __W t) -> t_to_js __W_to_js x3550
              type t_0 = any t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x3556 : Ojs.t) -> t_of_js any_of_js x3556
              and t_0_to_js : t_0 -> Ojs.t =
                fun (x3554 : any t) -> t_to_js any_to_js x3554
              type 'W tags = [ `WritableStreamDefaultWriter of 'W ]
              type 'W tags_1 = 'W tags
              type tags_0 = any tags
              type ('tags, 'W) this =
                'tags intf constraint 'tags =
                            [> `WritableStreamDefaultWriter of 'W ]
              let rec this_of_js :
                'tags 'W .
                  (Ojs.t -> 'tags) ->
                    (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
                = fun (type __tags) -> fun (type __W) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (__W_of_js : Ojs.t -> __W) ->
                    fun (x3560 : Ojs.t) -> intf_of_js __tags_of_js x3560
              and this_to_js :
                'tags 'W .
                  ('tags -> Ojs.t) ->
                    ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
                = fun (type __tags) -> fun (type __W) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (__W_to_js : __W -> Ojs.t) ->
                    fun (x3558 : __tags intf) ->
                      intf_to_js __tags_to_js x3558
              let (get_closed :
                ('tags, 'W) this -> never or_undefined Promise.t_1) =
                fun (x3562 : ('tags, 'W) this) ->
                  Promise.t_1_of_js
                    (fun (x3565 : Ojs.t) ->
                       or_undefined_of_js never_of_js x3565)
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x3562) "closed")
              let (get_desiredSize : ('tags, 'W) this -> float or_null) =
                fun (x3567 : ('tags, 'W) this) ->
                  or_null_of_js Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x3567) "desiredSize")
              let (get_ready :
                ('tags, 'W) this -> never or_undefined Promise.t_1) =
                fun (x3571 : ('tags, 'W) this) ->
                  Promise.t_1_of_js
                    (fun (x3574 : Ojs.t) ->
                       or_undefined_of_js never_of_js x3574)
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x3571) "ready")
              let (abort :
                ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
                =
                fun (x3579 : ('tags, 'W) this) ->
                  fun ?reason:(x3576 : any option) ->
                    fun () ->
                      Promise.t_1_of_js Ojs.unit_of_js
                        (let x3582 = this_to_js Obj.magic Obj.magic x3579 in
                         Ojs.call (Ojs.get_prop_ascii x3582 "abort") "apply"
                           [|x3582;((let x3577 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x3576 with
                                      | Some x3578 ->
                                          ignore
                                            (Ojs.call x3577 "push"
                                               [|(any_to_js x3578)|])
                                      | None -> ());
                                     x3577))|])
              let (close : ('tags, 'W) this -> unit Promise.t_1) =
                fun (x3584 : ('tags, 'W) this) ->
                  Promise.t_1_of_js Ojs.unit_of_js
                    (Ojs.call (this_to_js Obj.magic Obj.magic x3584) "close"
                       [||])
              let (releaseLock : ('tags, 'W) this -> unit) =
                fun (x3588 : ('tags, 'W) this) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic Obj.magic x3588)
                       "releaseLock" [||])
              let (write :
                ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t_1) =
                fun (x3594 : ('tags, 'W) this) ->
                  fun ?chunk:(x3591 : 'W option) ->
                    fun () ->
                      Promise.t_1_of_js Ojs.unit_of_js
                        (let x3597 = this_to_js Obj.magic Obj.magic x3594 in
                         Ojs.call (Ojs.get_prop_ascii x3597 "write") "apply"
                           [|x3597;((let x3592 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x3591 with
                                      | Some x3593 ->
                                          ignore
                                            (Ojs.call x3592 "push"
                                               [|(Obj.magic x3593)|])
                                      | None -> ());
                                     x3592))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t_0) =
                fun () ->
                  t_0_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "WritableStreamDefaultWriter") "prototype")
              let (create : 'W WritableStream.t -> 'W t) =
                fun (x3599 : 'W WritableStream.t) ->
                  t_of_js Obj.magic
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global
                          "WritableStreamDefaultWriter")
                       [|(WritableStream.t_to_js Obj.magic x3599)|])
            end
module ReadableStreamGenericReader =
  struct
    type t = [ `ReadableStreamGenericReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3603 : Ojs.t) -> t_of_js x3603
    and t_0_to_js : t_0 -> Ojs.t = fun (x3602 : t) -> t_to_js x3602
    type tags = [ `ReadableStreamGenericReader ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3606 : Ojs.t) -> intf_of_js __tags_of_js x3606
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3604 : __tags intf) -> intf_to_js __tags_to_js x3604
    let (get_closed : 'tags this -> never or_undefined Promise.t_1) =
      fun (x3608 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x3610 : Ojs.t) -> or_undefined_of_js never_of_js x3610)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3608) "closed")
    let (cancel : 'tags this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x3615 : 'tags this) ->
        fun ?reason:(x3612 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3617 = this_to_js Obj.magic x3615 in
               Ojs.call (Ojs.get_prop_ascii x3617 "cancel") "apply"
                 [|x3617;((let x3613 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3612 with
                            | Some x3614 ->
                                ignore
                                  (Ojs.call x3613 "push"
                                     [|(any_to_js x3614)|])
                            | None -> ());
                           x3613))|])
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadValueResult =
  struct
    type 'T t = [ `ReadableStreamDefaultReadValueResult of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3621 : Ojs.t) -> t_of_js __T_of_js x3621
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3619 : __T t) -> t_to_js __T_to_js x3619
    type 'T tags = [ `ReadableStreamDefaultReadValueResult of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultReadValueResult of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3625 : Ojs.t) -> intf_of_js __tags_of_js x3625
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3623 : __tags intf) -> intf_to_js __tags_to_js x3623
    let (get_done : ('tags, 'T) this -> [ `L_b_false ]) =
      fun (x3627 : ('tags, 'T) this) ->
        let x3630 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3627) "done" in
        match Ojs.bool_of_js x3630 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : ('tags, 'T) this -> [ `L_b_false ] -> unit) =
      fun (x3631 : ('tags, 'T) this) ->
        fun (x3632 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3631) "done"
            (match x3632 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x3635 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3635) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x3638 : ('tags, 'T) this) ->
        fun (x3639 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3638) "value"
            (Obj.magic x3639)
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadDoneResult =
  struct
    type t = [ `ReadableStreamDefaultReadDoneResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3643 : Ojs.t) -> t_of_js x3643
    and t_0_to_js : t_0 -> Ojs.t = fun (x3642 : t) -> t_to_js x3642
    type tags = [ `ReadableStreamDefaultReadDoneResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReadDoneResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3646 : Ojs.t) -> intf_of_js __tags_of_js x3646
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3644 : __tags intf) -> intf_to_js __tags_to_js x3644
    let (get_done : 'tags this -> [ `L_b_true ]) =
      fun (x3648 : 'tags this) ->
        let x3650 = Ojs.get_prop_ascii (this_to_js Obj.magic x3648) "done" in
        match Ojs.bool_of_js x3650 with
        | true -> `L_b_true
        | _ -> assert false
    let (set_done : 'tags this -> [ `L_b_true ] -> unit) =
      fun (x3651 : 'tags this) ->
        fun (x3652 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3651) "done"
            (match x3652 with | `L_b_true -> Ojs.bool_to_js true)
    let (get_value : 'tags this -> never or_undefined) =
      fun (x3654 : 'tags this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3654) "value")
    let (set_value : 'tags this -> never or_undefined -> unit) =
      fun (x3657 : 'tags this) ->
        fun (x3658 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3657) "value"
            (or_undefined_to_js never_to_js x3658)
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadResult =
  struct
    type 'T t =
      [ `U_b_false of 'T ReadableStreamDefaultReadValueResult.t 
      | `U_b_true of ReadableStreamDefaultReadDoneResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3665 : Ojs.t) ->
          let x3666 = x3665 in
          match Ojs.bool_of_js (Ojs.get_prop_ascii x3666 "done") with
          | false ->
              `U_b_false
                (ReadableStreamDefaultReadValueResult.t_of_js __T_of_js x3666)
          | true ->
              `U_b_true (ReadableStreamDefaultReadDoneResult.t_of_js x3666)
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun
          (x3661 :
            [ `U_b_false of __T ReadableStreamDefaultReadValueResult.t 
            | `U_b_true of ReadableStreamDefaultReadDoneResult.t ])
          ->
          match x3661 with
          | `U_b_false x3662 ->
              ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x3662
          | `U_b_true x3664 ->
              ReadableStreamDefaultReadDoneResult.t_to_js x3664
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3670 : Ojs.t) -> t_of_js __T_of_js x3670
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3668 : __T t) -> t_to_js __T_to_js x3668
  end
module rec
  AnonymousInterface88:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> ReadableStreamDefaultController.t_0
                         val set_prototype :
                           t -> ReadableStreamDefaultController.t_0 -> unit
                         val create :
                           t -> ReadableStreamDefaultController.t_0
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3673 : Ojs.t) -> x3673
    and t_to_js : t -> Ojs.t = fun (x3672 : Ojs.t) -> x3672
    let (get_prototype : t -> ReadableStreamDefaultController.t_0) =
      fun (x3674 : t) ->
        ReadableStreamDefaultController.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3674) "prototype")
    let (set_prototype : t -> ReadableStreamDefaultController.t_0 -> unit) =
      fun (x3675 : t) ->
        fun (x3676 : ReadableStreamDefaultController.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3675) "prototype"
            (ReadableStreamDefaultController.t_0_to_js x3676)
    let (create : t -> ReadableStreamDefaultController.t_0) =
      fun (x3677 : t) ->
        ReadableStreamDefaultController.t_0_of_js
          (Ojs.new_obj (t_to_js x3677) [||])
  end
 and
  ReadableStreamDefaultController:sig
                                    type 'R t =
                                      [
                                        `ReadableStreamDefaultController of
                                          'R ]
                                        intf
                                    type 'R t_1 = 'R t
                                    type t_0 = any t
                                    [@@@js.stop ]
                                    type 'R tags =
                                      [
                                        `ReadableStreamDefaultController of
                                          'R ]
                                    type 'R tags_1 = 'R tags
                                    type tags_0 = any tags
                                    [@@@js.start ]
                                    [@@@js.implem
                                      type 'R tags =
                                        [
                                          `ReadableStreamDefaultController of
                                            'R ]
                                      type 'R tags_1 = 'R tags
                                      type tags_0 = any tags]
                                    type ('tags, 'R) this =
                                      'tags intf constraint 'tags =
                                                  [>
                                                    `ReadableStreamDefaultController
                                                      of 'R ]
                                    val t_to_js :
                                      ('R -> Ojs.t) -> 'R t -> Ojs.t
                                    val t_of_js :
                                      (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                    val t_1_to_js :
                                      ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                    val t_1_of_js :
                                      (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                    val t_0_to_js : t_0 -> Ojs.t
                                    val t_0_of_js : Ojs.t -> t_0
                                    val get_desiredSize :
                                      ('tags, 'R) this -> float or_null
                                    val close : ('tags, 'R) this -> unit
                                    val enqueue :
                                      ('tags, 'R) this ->
                                        ?chunk:'R -> unit -> unit
                                    val error :
                                      ('tags, 'R) this ->
                                        ?e:any -> unit -> unit
                                    val cast_from : ('tags, 'R) this -> 'R t
                                    val prototype : unit -> t_0
                                    val create : unit -> t_0
                                  end =
  struct
    type 'R t = [ `ReadableStreamDefaultController of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3680 : Ojs.t) -> t_of_js __R_of_js x3680
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3678 : __R t) -> t_to_js __R_to_js x3678
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3684 : Ojs.t) -> t_of_js any_of_js x3684
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3682 : any t) -> t_to_js any_to_js x3682
    type 'R tags = [ `ReadableStreamDefaultController of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultController of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3688 : Ojs.t) -> intf_of_js __tags_of_js x3688
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3686 : __tags intf) -> intf_to_js __tags_to_js x3686
    let (get_desiredSize : ('tags, 'R) this -> float or_null) =
      fun (x3690 : ('tags, 'R) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3690)
             "desiredSize")
    let (close : ('tags, 'R) this -> unit) =
      fun (x3694 : ('tags, 'R) this) ->
        ignore (Ojs.call (this_to_js Obj.magic Obj.magic x3694) "close" [||])
    let (enqueue : ('tags, 'R) this -> ?chunk:'R -> unit -> unit) =
      fun (x3700 : ('tags, 'R) this) ->
        fun ?chunk:(x3697 : 'R option) ->
          fun () ->
            ignore
              (let x3703 = this_to_js Obj.magic Obj.magic x3700 in
               Ojs.call (Ojs.get_prop_ascii x3703 "enqueue") "apply"
                 [|x3703;((let x3698 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3697 with
                            | Some x3699 ->
                                ignore
                                  (Ojs.call x3698 "push"
                                     [|(Obj.magic x3699)|])
                            | None -> ());
                           x3698))|])
    let (error : ('tags, 'R) this -> ?e:any -> unit -> unit) =
      fun (x3707 : ('tags, 'R) this) ->
        fun ?e:(x3704 : any option) ->
          fun () ->
            ignore
              (let x3710 = this_to_js Obj.magic Obj.magic x3707 in
               Ojs.call (Ojs.get_prop_ascii x3710 "error") "apply"
                 [|x3710;((let x3705 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3704 with
                            | Some x3706 ->
                                ignore
                                  (Ojs.call x3705 "push"
                                     [|(any_to_js x3706)|])
                            | None -> ());
                           x3705))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             [||])
  end
module ReadableStreamController =
  struct
    type 'T t = 'T ReadableStreamDefaultController.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3713 : Ojs.t) ->
          ReadableStreamDefaultController.t_of_js __T_of_js x3713
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3711 : __T ReadableStreamDefaultController.t) ->
          ReadableStreamDefaultController.t_to_js __T_to_js x3711
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3717 : Ojs.t) -> t_of_js __T_of_js x3717
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3715 : __T t) -> t_to_js __T_to_js x3715
  end
module UnderlyingSourceStartCallback =
  struct
    type 'R t = [ `UnderlyingSourceStartCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3721 : Ojs.t) -> t_of_js __R_of_js x3721
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3719 : __R t) -> t_to_js __R_to_js x3719
    type 'R tags = [ `UnderlyingSourceStartCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3725 : Ojs.t) -> intf_of_js __tags_of_js x3725
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3723 : __tags intf) -> intf_to_js __tags_to_js x3723
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any) =
      fun (x3729 : ('tags, 'R) this) ->
        fun ~controller:(x3727 : 'R ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3729)
               [|(ReadableStreamController.t_to_js Obj.magic x3727)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourcePullCallback =
  struct
    type 'R t = [ `UnderlyingSourcePullCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3734 : Ojs.t) -> t_of_js __R_of_js x3734
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3732 : __R t) -> t_to_js __R_to_js x3732
    type 'R tags = [ `UnderlyingSourcePullCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3738 : Ojs.t) -> intf_of_js __tags_of_js x3738
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3736 : __tags intf) -> intf_to_js __tags_to_js x3736
    let (apply :
      ('tags, 'R) this ->
        controller:'R ReadableStreamController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3742 : ('tags, 'R) this) ->
        fun ~controller:(x3740 : 'R ReadableStreamController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x3746 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x3746)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3742)
               [|(ReadableStreamController.t_to_js Obj.magic x3740)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourceCancelCallback =
  struct
    type t = [ `UnderlyingSourceCancelCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3749 : Ojs.t) -> t_of_js x3749
    and t_0_to_js : t_0 -> Ojs.t = fun (x3748 : t) -> t_to_js x3748
    type tags = [ `UnderlyingSourceCancelCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3752 : Ojs.t) -> intf_of_js __tags_of_js x3752
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3750 : __tags intf) -> intf_to_js __tags_to_js x3750
    let (apply :
      'tags this ->
        ?reason:any -> unit -> (unit, unit PromiseLike.t_1) union2)
      =
      fun (x3757 : 'tags this) ->
        fun ?reason:(x3754 : any option) ->
          fun () ->
            union2_of_js Ojs.unit_of_js
              (fun (x3760 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x3760)
              (Ojs.call (this_to_js Obj.magic x3757) "apply"
                 [|Ojs.null;((let x3755 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3754 with
                               | Some x3756 ->
                                   ignore
                                     (Ojs.call x3755 "push"
                                        [|(any_to_js x3756)|])
                               | None -> ());
                              x3755))|])
    let cast_from = Obj.magic
  end
module UnderlyingSource =
  struct
    type 'R t = [ `UnderlyingSource of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3764 : Ojs.t) -> t_of_js __R_of_js x3764
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3762 : __R t) -> t_to_js __R_to_js x3762
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3768 : Ojs.t) -> t_of_js any_of_js x3768
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3766 : any t) -> t_to_js any_to_js x3766
    type 'R tags = [ `UnderlyingSource of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3772 : Ojs.t) -> intf_of_js __tags_of_js x3772
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3770 : __tags intf) -> intf_to_js __tags_to_js x3770
    let (get_cancel : ('tags, 'R) this -> UnderlyingSourceCancelCallback.t) =
      fun (x3774 : ('tags, 'R) this) ->
        UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3774) "cancel")
    let (set_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x3777 : ('tags, 'R) this) ->
        fun (x3778 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3777) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x3778)
    let (get_pull : ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t) =
      fun (x3781 : ('tags, 'R) this) ->
        UnderlyingSourcePullCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3781) "pull")
    let (set_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit) =
      fun (x3785 : ('tags, 'R) this) ->
        fun (x3786 : 'R UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3785) "pull"
            (UnderlyingSourcePullCallback.t_to_js Obj.magic x3786)
    let (get_start : ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t)
      =
      fun (x3790 : ('tags, 'R) this) ->
        UnderlyingSourceStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3790) "start")
    let (set_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit) =
      fun (x3794 : ('tags, 'R) this) ->
        fun (x3795 : 'R UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3794) "start"
            (UnderlyingSourceStartCallback.t_to_js Obj.magic x3795)
    let (get_type : ('tags, 'R) this -> never or_undefined) =
      fun (x3799 : ('tags, 'R) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3799) "type")
    let (set_type : ('tags, 'R) this -> never or_undefined -> unit) =
      fun (x3803 : ('tags, 'R) this) ->
        fun (x3804 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3803) "type"
            (or_undefined_to_js never_to_js x3804)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface87:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ReadableStream.t_0
                         val set_prototype : t -> ReadableStream.t_0 -> unit
                         val create :
                           t ->
                             ?underlyingSource:'R UnderlyingSource.t ->
                               ?strategy:'R QueuingStrategy.t ->
                                 unit -> 'R ReadableStream.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3809 : Ojs.t) -> x3809
    and t_to_js : t -> Ojs.t = fun (x3808 : Ojs.t) -> x3808
    let (get_prototype : t -> ReadableStream.t_0) =
      fun (x3810 : t) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3810) "prototype")
    let (set_prototype : t -> ReadableStream.t_0 -> unit) =
      fun (x3811 : t) ->
        fun (x3812 : ReadableStream.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3811) "prototype"
            (ReadableStream.t_0_to_js x3812)
    let (create :
      t ->
        ?underlyingSource:'R UnderlyingSource.t ->
          ?strategy:'R QueuingStrategy.t -> unit -> 'R ReadableStream.t)
      =
      fun (x3820 : t) ->
        fun ?underlyingSource:(x3813 : 'R UnderlyingSource.t option) ->
          fun ?strategy:(x3814 : 'R QueuingStrategy.t option) ->
            fun () ->
              ReadableStream.t_of_js Obj.magic
                (Ojs.new_obj_arr (t_to_js x3820)
                   (let x3815 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3813 with
                     | Some x3818 ->
                         ignore
                           (Ojs.call x3815 "push"
                              [|(UnderlyingSource.t_to_js Obj.magic x3818)|])
                     | None -> ());
                    (match x3814 with
                     | Some x3816 ->
                         ignore
                           (Ojs.call x3815 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x3816)|])
                     | None -> ());
                    x3815))
  end
 and
  AnonymousInterface89:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> ReadableStreamDefaultReader.t_0
                         val set_prototype :
                           t -> ReadableStreamDefaultReader.t_0 -> unit
                         val create :
                           t ->
                             stream:'R ReadableStream.t ->
                               'R ReadableStreamDefaultReader.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3823 : Ojs.t) -> x3823
    and t_to_js : t -> Ojs.t = fun (x3822 : Ojs.t) -> x3822
    let (get_prototype : t -> ReadableStreamDefaultReader.t_0) =
      fun (x3824 : t) ->
        ReadableStreamDefaultReader.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x3824) "prototype")
    let (set_prototype : t -> ReadableStreamDefaultReader.t_0 -> unit) =
      fun (x3825 : t) ->
        fun (x3826 : ReadableStreamDefaultReader.t_0) ->
          Ojs.set_prop_ascii (t_to_js x3825) "prototype"
            (ReadableStreamDefaultReader.t_0_to_js x3826)
    let (create :
      t -> stream:'R ReadableStream.t -> 'R ReadableStreamDefaultReader.t) =
      fun (x3829 : t) ->
        fun ~stream:(x3827 : 'R ReadableStream.t) ->
          ReadableStreamDefaultReader.t_of_js Obj.magic
            (Ojs.new_obj (t_to_js x3829)
               [|(ReadableStream.t_to_js Obj.magic x3827)|])
  end and
       ReadableStream:sig
                        type 'R t =
                          [ `ReadableStream of 'R 
                          | any IterableIterator.tags_1] intf
                        type 'R t_1 = 'R t
                        type t_0 = any t
                        [@@@js.stop ]
                        type 'R tags =
                          [ `ReadableStream of 'R 
                          | any IterableIterator.tags_1]
                        type 'R tags_1 = 'R tags
                        type tags_0 = any tags
                        [@@@js.start ]
                        [@@@js.implem
                          type 'R tags =
                            [ `ReadableStream of 'R 
                            | any IterableIterator.tags_1]
                          type 'R tags_1 = 'R tags
                          type tags_0 = any tags]
                        type ('tags, 'R) this =
                          'tags intf constraint 'tags =
                                      [> `ReadableStream of 'R ]
                        val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                        val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                        val t_1_to_js : ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                        val t_1_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val get_locked : ('tags, 'R) this -> bool
                        val cancel :
                          ('tags, 'R) this ->
                            ?reason:any -> unit -> unit Promise.t_1
                        val getReader :
                          ('tags, 'R) this ->
                            'R ReadableStreamDefaultReader.t
                        val pipeThrough :
                          ('tags, 'R) this ->
                            transform:('T, 'R) ReadableWritablePair.t ->
                              ?options:StreamPipeOptions.t -> unit -> 'T t
                        val pipeTo :
                          ('tags, 'R) this ->
                            destination:'R WritableStream.t ->
                              ?options:StreamPipeOptions.t ->
                                unit -> unit Promise.t_1
                        val tee : ('tags, 'R) this -> ('R t * 'R t)
                        val forEach :
                          ('tags, 'R) this ->
                            callbackfn:(value:any ->
                                          key:float -> parent:'R t -> unit)
                              -> ?thisArg:any -> unit -> unit
                        val entries :
                          ('tags, 'R) this ->
                            (float * any) IterableIterator.t_1
                        val keys :
                          ('tags, 'R) this -> float IterableIterator.t_1
                        val values :
                          ('tags, 'R) this -> any IterableIterator.t_1
                        val cast_from : ('tags, 'R) this -> 'R t
                        val prototype : unit -> t_0
                        val create :
                          ?underlyingSource:'R UnderlyingSource.t ->
                            ?strategy:'R QueuingStrategy.t -> unit -> 'R t
                      end =
       struct
         type 'R t =
           [ `ReadableStream of 'R  | any IterableIterator.tags_1] intf
         let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
           fun _R -> Obj.magic
         and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t =
           fun _R -> Obj.magic
         type 'R t_1 = 'R t
         let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun
           (type __R) ->
           fun (__R_of_js : Ojs.t -> __R) ->
             fun (x3833 : Ojs.t) -> t_of_js __R_of_js x3833
         and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type
           __R) ->
           fun (__R_to_js : __R -> Ojs.t) ->
             fun (x3831 : __R t) -> t_to_js __R_to_js x3831
         type t_0 = any t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x3837 : Ojs.t) -> t_of_js any_of_js x3837
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x3835 : any t) -> t_to_js any_to_js x3835
         type 'R tags =
           [ `ReadableStream of 'R  | any IterableIterator.tags_1]
         type 'R tags_1 = 'R tags
         type tags_0 = any tags
         type ('tags, 'R) this =
           'tags intf constraint 'tags = [> `ReadableStream of 'R ]
         let rec this_of_js :
           'tags 'R .
             (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
           = fun (type __tags) -> fun (type __R) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (__R_of_js : Ojs.t -> __R) ->
               fun (x3841 : Ojs.t) -> intf_of_js __tags_of_js x3841
         and this_to_js :
           'tags 'R .
             ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
           = fun (type __tags) -> fun (type __R) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (__R_to_js : __R -> Ojs.t) ->
               fun (x3839 : __tags intf) -> intf_to_js __tags_to_js x3839
         let (get_locked : ('tags, 'R) this -> bool) =
           fun (x3843 : ('tags, 'R) this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3843)
                  "locked")
         let (cancel :
           ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t_1) =
           fun (x3849 : ('tags, 'R) this) ->
             fun ?reason:(x3846 : any option) ->
               fun () ->
                 Promise.t_1_of_js Ojs.unit_of_js
                   (let x3852 = this_to_js Obj.magic Obj.magic x3849 in
                    Ojs.call (Ojs.get_prop_ascii x3852 "cancel") "apply"
                      [|x3852;((let x3847 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x3846 with
                                 | Some x3848 ->
                                     ignore
                                       (Ojs.call x3847 "push"
                                          [|(any_to_js x3848)|])
                                 | None -> ());
                                x3847))|])
         let (getReader :
           ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t) =
           fun (x3854 : ('tags, 'R) this) ->
             ReadableStreamDefaultReader.t_of_js Obj.magic
               (Ojs.call (this_to_js Obj.magic Obj.magic x3854) "getReader"
                  [||])
         let (pipeThrough :
           ('tags, 'R) this ->
             transform:('T, 'R) ReadableWritablePair.t ->
               ?options:StreamPipeOptions.t -> unit -> 'T t)
           =
           fun (x3864 : ('tags, 'R) this) ->
             fun ~transform:(x3858 : ('T, 'R) ReadableWritablePair.t) ->
               fun ?options:(x3859 : StreamPipeOptions.t option) ->
                 fun () ->
                   t_of_js Obj.magic
                     (let x3867 = this_to_js Obj.magic Obj.magic x3864 in
                      Ojs.call (Ojs.get_prop_ascii x3867 "pipeThrough")
                        "apply"
                        [|x3867;((let x3860 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x3860 "push"
                                       [|(ReadableWritablePair.t_to_js
                                            Obj.magic Obj.magic x3858)|]);
                                  (match x3859 with
                                   | Some x3861 ->
                                       ignore
                                         (Ojs.call x3860 "push"
                                            [|(StreamPipeOptions.t_to_js
                                                 x3861)|])
                                   | None -> ());
                                  x3860))|])
         let (pipeTo :
           ('tags, 'R) this ->
             destination:'R WritableStream.t ->
               ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
           =
           fun (x3874 : ('tags, 'R) this) ->
             fun ~destination:(x3869 : 'R WritableStream.t) ->
               fun ?options:(x3870 : StreamPipeOptions.t option) ->
                 fun () ->
                   Promise.t_1_of_js Ojs.unit_of_js
                     (let x3877 = this_to_js Obj.magic Obj.magic x3874 in
                      Ojs.call (Ojs.get_prop_ascii x3877 "pipeTo") "apply"
                        [|x3877;((let x3871 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x3871 "push"
                                       [|(WritableStream.t_to_js Obj.magic
                                            x3869)|]);
                                  (match x3870 with
                                   | Some x3872 ->
                                       ignore
                                         (Ojs.call x3871 "push"
                                            [|(StreamPipeOptions.t_to_js
                                                 x3872)|])
                                   | None -> ());
                                  x3871))|])
         let (tee : ('tags, 'R) this -> ('R t * 'R t)) =
           fun (x3879 : ('tags, 'R) this) ->
             let x3882 =
               Ojs.call (this_to_js Obj.magic Obj.magic x3879) "tee" [||] in
             ((t_of_js Obj.magic (Ojs.array_get x3882 0)),
               (t_of_js Obj.magic (Ojs.array_get x3882 1)))
         let (forEach :
           ('tags, 'R) this ->
             callbackfn:(value:any -> key:float -> parent:'R t -> unit) ->
               ?thisArg:any -> unit -> unit)
           =
           fun (x3893 : ('tags, 'R) this) ->
             fun
               ~callbackfn:(x3885 :
                             value:any -> key:float -> parent:'R t -> unit)
               ->
               fun ?thisArg:(x3886 : any option) ->
                 fun () ->
                   ignore
                     (let x3896 = this_to_js Obj.magic Obj.magic x3893 in
                      Ojs.call (Ojs.get_prop_ascii x3896 "forEach") "apply"
                        [|x3896;((let x3887 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x3887 "push"
                                       [|(Ojs.fun_to_js 3
                                            (fun (x3889 : Ojs.t) ->
                                               fun (x3890 : Ojs.t) ->
                                                 fun (x3891 : Ojs.t) ->
                                                   x3885
                                                     ~value:(any_of_js x3889)
                                                     ~key:(Ojs.float_of_js
                                                             x3890)
                                                     ~parent:(t_of_js
                                                                Obj.magic
                                                                x3891)))|]);
                                  (match x3886 with
                                   | Some x3888 ->
                                       ignore
                                         (Ojs.call x3887 "push"
                                            [|(any_to_js x3888)|])
                                   | None -> ());
                                  x3887))|])
         let (entries :
           ('tags, 'R) this -> (float * any) IterableIterator.t_1) =
           fun (x3897 : ('tags, 'R) this) ->
             IterableIterator.t_1_of_js
               (fun (x3900 : Ojs.t) ->
                  let x3901 = x3900 in
                  ((Ojs.float_of_js (Ojs.array_get x3901 0)),
                    (any_of_js (Ojs.array_get x3901 1))))
               (Ojs.call (this_to_js Obj.magic Obj.magic x3897) "entries"
                  [||])
         let (keys : ('tags, 'R) this -> float IterableIterator.t_1) =
           fun (x3902 : ('tags, 'R) this) ->
             IterableIterator.t_1_of_js Ojs.float_of_js
               (Ojs.call (this_to_js Obj.magic Obj.magic x3902) "keys" [||])
         let (values : ('tags, 'R) this -> any IterableIterator.t_1) =
           fun (x3906 : ('tags, 'R) this) ->
             IterableIterator.t_1_of_js any_of_js
               (Ojs.call (this_to_js Obj.magic Obj.magic x3906) "values" [||])
         let cast_from = Obj.magic
         let (prototype : unit -> t_0) =
           fun () ->
             t_0_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                  "prototype")
         let (create :
           ?underlyingSource:'R UnderlyingSource.t ->
             ?strategy:'R QueuingStrategy.t -> unit -> 'R t)
           =
           fun ?underlyingSource:(x3910 : 'R UnderlyingSource.t option) ->
             fun ?strategy:(x3911 : 'R QueuingStrategy.t option) ->
               fun () ->
                 t_of_js Obj.magic
                   (Ojs.new_obj_arr
                      (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                      (let x3912 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       (match x3910 with
                        | Some x3915 ->
                            ignore
                              (Ojs.call x3912 "push"
                                 [|(UnderlyingSource.t_to_js Obj.magic x3915)|])
                        | None -> ());
                       (match x3911 with
                        | Some x3913 ->
                            ignore
                              (Ojs.call x3912 "push"
                                 [|(QueuingStrategy.t_to_js Obj.magic x3913)|])
                        | None -> ());
                       x3912))
       end and
            ReadableStreamDefaultReader:sig
                                          type 'R t =
                                            [
                                              `ReadableStreamDefaultReader of
                                                'R 
                                            | `ReadableStreamGenericReader ]
                                              intf
                                          type 'R t_1 = 'R t
                                          type t_0 = any t
                                          [@@@js.stop ]
                                          type 'R tags =
                                            [
                                              `ReadableStreamDefaultReader of
                                                'R 
                                            | `ReadableStreamGenericReader ]
                                          type 'R tags_1 = 'R tags
                                          type tags_0 = any tags
                                          [@@@js.start ]
                                          [@@@js.implem
                                            type 'R tags =
                                              [
                                                `ReadableStreamDefaultReader
                                                  of 'R 
                                              | `ReadableStreamGenericReader ]
                                            type 'R tags_1 = 'R tags
                                            type tags_0 = any tags]
                                          type ('tags, 'R) this =
                                            'tags intf constraint 'tags =
                                                        [>
                                                          `ReadableStreamDefaultReader
                                                            of 'R ]
                                          val t_to_js :
                                            ('R -> Ojs.t) -> 'R t -> Ojs.t
                                          val t_of_js :
                                            (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                          val t_1_to_js :
                                            ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                          val t_1_of_js :
                                            (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                          val t_0_to_js : t_0 -> Ojs.t
                                          val t_0_of_js : Ojs.t -> t_0
                                          val read :
                                            ('tags, 'R) this ->
                                              'R
                                                ReadableStreamDefaultReadResult.t
                                                Promise.t_1
                                          val releaseLock :
                                            ('tags, 'R) this -> unit
                                          val cast_from :
                                            ('tags, 'R) this -> 'R t
                                          val prototype : unit -> t_0
                                          val create :
                                            'R ReadableStream.t -> 'R t
                                        end =
            struct
              type 'R t =
                [ `ReadableStreamDefaultReader of 'R 
                | `ReadableStreamGenericReader ] intf
              let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
                fun _R -> Obj.magic
              and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t =
                fun _R -> Obj.magic
              type 'R t_1 = 'R t
              let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun
                (type __R) ->
                fun (__R_of_js : Ojs.t -> __R) ->
                  fun (x3920 : Ojs.t) -> t_of_js __R_of_js x3920
              and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun
                (type __R) ->
                fun (__R_to_js : __R -> Ojs.t) ->
                  fun (x3918 : __R t) -> t_to_js __R_to_js x3918
              type t_0 = any t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x3924 : Ojs.t) -> t_of_js any_of_js x3924
              and t_0_to_js : t_0 -> Ojs.t =
                fun (x3922 : any t) -> t_to_js any_to_js x3922
              type 'R tags =
                [ `ReadableStreamDefaultReader of 'R 
                | `ReadableStreamGenericReader ]
              type 'R tags_1 = 'R tags
              type tags_0 = any tags
              type ('tags, 'R) this =
                'tags intf constraint 'tags =
                            [> `ReadableStreamDefaultReader of 'R ]
              let rec this_of_js :
                'tags 'R .
                  (Ojs.t -> 'tags) ->
                    (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
                = fun (type __tags) -> fun (type __R) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (__R_of_js : Ojs.t -> __R) ->
                    fun (x3928 : Ojs.t) -> intf_of_js __tags_of_js x3928
              and this_to_js :
                'tags 'R .
                  ('tags -> Ojs.t) ->
                    ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
                = fun (type __tags) -> fun (type __R) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (__R_to_js : __R -> Ojs.t) ->
                    fun (x3926 : __tags intf) ->
                      intf_to_js __tags_to_js x3926
              let (read :
                ('tags, 'R) this ->
                  'R ReadableStreamDefaultReadResult.t Promise.t_1)
                =
                fun (x3930 : ('tags, 'R) this) ->
                  Promise.t_1_of_js
                    (fun (x3933 : Ojs.t) ->
                       ReadableStreamDefaultReadResult.t_of_js Obj.magic
                         x3933)
                    (Ojs.call (this_to_js Obj.magic Obj.magic x3930) "read"
                       [||])
              let (releaseLock : ('tags, 'R) this -> unit) =
                fun (x3935 : ('tags, 'R) this) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic Obj.magic x3935)
                       "releaseLock" [||])
              let cast_from = Obj.magic
              let (prototype : unit -> t_0) =
                fun () ->
                  t_0_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "ReadableStreamDefaultReader") "prototype")
              let (create : 'R ReadableStream.t -> 'R t) =
                fun (x3938 : 'R ReadableStream.t) ->
                  t_of_js Obj.magic
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global
                          "ReadableStreamDefaultReader")
                       [|(ReadableStream.t_to_js Obj.magic x3938)|])
            end and
                 ReadableWritablePair:sig
                                        type ('R, 'W) t =
                                          [
                                            `ReadableWritablePair of
                                              ('R * 'W) ]
                                            intf
                                        type ('R, 'W) t_2 = ('R, 'W) t
                                        type 'R t_1 = ('R, any) t
                                        type t_0 = (any, any) t
                                        [@@@js.stop ]
                                        type ('R, 'W) tags =
                                          [
                                            `ReadableWritablePair of
                                              ('R * 'W) ]
                                        type ('R, 'W) tags_2 = ('R, 'W) tags
                                        type 'R tags_1 = ('R, any) tags
                                        type tags_0 = (any, any) tags
                                        [@@@js.start ]
                                        [@@@js.implem
                                          type ('R, 'W) tags =
                                            [
                                              `ReadableWritablePair of
                                                ('R * 'W) ]
                                          type ('R, 'W) tags_2 =
                                            ('R, 'W) tags
                                          type 'R tags_1 = ('R, any) tags
                                          type tags_0 = (any, any) tags]
                                        type ('tags, 'R, 'W) this =
                                          'tags intf constraint 'tags =
                                                      [>
                                                        `ReadableWritablePair
                                                          of ('R * 'W) ]
                                        val t_to_js :
                                          ('R -> Ojs.t) ->
                                            ('W -> Ojs.t) ->
                                              ('R, 'W) t -> Ojs.t
                                        val t_of_js :
                                          (Ojs.t -> 'R) ->
                                            (Ojs.t -> 'W) ->
                                              Ojs.t -> ('R, 'W) t
                                        val t_2_to_js :
                                          ('R -> Ojs.t) ->
                                            ('W -> Ojs.t) ->
                                              ('R, 'W) t_2 -> Ojs.t
                                        val t_2_of_js :
                                          (Ojs.t -> 'R) ->
                                            (Ojs.t -> 'W) ->
                                              Ojs.t -> ('R, 'W) t_2
                                        val t_1_to_js :
                                          ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                        val t_1_of_js :
                                          (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                        val t_0_to_js : t_0 -> Ojs.t
                                        val t_0_of_js : Ojs.t -> t_0
                                        val get_readable :
                                          ('tags, 'R, 'W) this ->
                                            'R ReadableStream.t
                                        val set_readable :
                                          ('tags, 'R, 'W) this ->
                                            'R ReadableStream.t -> unit
                                        val get_writable :
                                          ('tags, 'R, 'W) this ->
                                            'W WritableStream.t
                                        val set_writable :
                                          ('tags, 'R, 'W) this ->
                                            'W WritableStream.t -> unit
                                        val cast_from :
                                          ('tags, 'R, 'W) this -> ('R, 'W) t
                                      end =
                 struct
                   type ('R, 'W) t =
                     [ `ReadableWritablePair of ('R * 'W) ] intf
                   let rec t_of_js :
                     'R 'W .
                       (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
                     = fun _R -> fun _W -> Obj.magic
                   and t_to_js :
                     'R 'W .
                       ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
                     = fun _R -> fun _W -> Obj.magic
                   type ('R, 'W) t_2 = ('R, 'W) t
                   let rec t_2_of_js :
                     'R 'W .
                       (Ojs.t -> 'R) ->
                         (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2
                     = fun (type __R) -> fun (type __W) ->
                     fun (__R_of_js : Ojs.t -> __R) ->
                       fun (__W_of_js : Ojs.t -> __W) ->
                         fun (x3944 : Ojs.t) ->
                           t_of_js __R_of_js __W_of_js x3944
                   and t_2_to_js :
                     'R 'W .
                       ('R -> Ojs.t) ->
                         ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t
                     = fun (type __R) -> fun (type __W) ->
                     fun (__R_to_js : __R -> Ojs.t) ->
                       fun (__W_to_js : __W -> Ojs.t) ->
                         fun (x3941 : (__R, __W) t) ->
                           t_to_js __R_to_js __W_to_js x3941
                   type 'R t_1 = ('R, any) t
                   let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                     = fun (type __R) ->
                     fun (__R_of_js : Ojs.t -> __R) ->
                       fun (x3950 : Ojs.t) ->
                         t_of_js __R_of_js any_of_js x3950
                   and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t =
                     fun (type __R) ->
                     fun (__R_to_js : __R -> Ojs.t) ->
                       fun (x3947 : (__R, any) t) ->
                         t_to_js __R_to_js any_to_js x3947
                   type t_0 = (any, any) t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x3956 : Ojs.t) -> t_of_js any_of_js any_of_js x3956
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x3953 : (any, any) t) ->
                       t_to_js any_to_js any_to_js x3953
                   type ('R, 'W) tags =
                     [ `ReadableWritablePair of ('R * 'W) ]
                   type ('R, 'W) tags_2 = ('R, 'W) tags
                   type 'R tags_1 = ('R, any) tags
                   type tags_0 = (any, any) tags
                   type ('tags, 'R, 'W) this =
                     'tags intf constraint 'tags =
                                 [> `ReadableWritablePair of ('R * 'W) ]
                   let rec this_of_js :
                     'tags 'R 'W .
                       (Ojs.t -> 'tags) ->
                         (Ojs.t -> 'R) ->
                           (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'R, 'W) this
                     = fun (type __tags) -> fun (type __R) -> fun (type __W)
                     ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (__R_of_js : Ojs.t -> __R) ->
                         fun (__W_of_js : Ojs.t -> __W) ->
                           fun (x3961 : Ojs.t) ->
                             intf_of_js __tags_of_js x3961
                   and this_to_js :
                     'tags 'R 'W .
                       ('tags -> Ojs.t) ->
                         ('R -> Ojs.t) ->
                           ('W -> Ojs.t) -> ('tags, 'R, 'W) this -> Ojs.t
                     = fun (type __tags) -> fun (type __R) -> fun (type __W)
                     ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (__R_to_js : __R -> Ojs.t) ->
                         fun (__W_to_js : __W -> Ojs.t) ->
                           fun (x3959 : __tags intf) ->
                             intf_to_js __tags_to_js x3959
                   let (get_readable :
                     ('tags, 'R, 'W) this -> 'R ReadableStream.t) =
                     fun (x3963 : ('tags, 'R, 'W) this) ->
                       ReadableStream.t_of_js Obj.magic
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic Obj.magic x3963)
                            "readable")
                   let (set_readable :
                     ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit) =
                     fun (x3968 : ('tags, 'R, 'W) this) ->
                       fun (x3969 : 'R ReadableStream.t) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic Obj.magic x3968)
                           "readable"
                           (ReadableStream.t_to_js Obj.magic x3969)
                   let (get_writable :
                     ('tags, 'R, 'W) this -> 'W WritableStream.t) =
                     fun (x3974 : ('tags, 'R, 'W) this) ->
                       WritableStream.t_of_js Obj.magic
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic Obj.magic x3974)
                            "writable")
                   let (set_writable :
                     ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit) =
                     fun (x3979 : ('tags, 'R, 'W) this) ->
                       fun (x3980 : 'W WritableStream.t) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic Obj.magic x3979)
                           "writable"
                           (WritableStream.t_to_js Obj.magic x3980)
                   let cast_from = Obj.magic
                 end
module rec
  AnonymousInterface2:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> Blob.t
                        val set_prototype : t -> Blob.t -> unit
                        val create :
                          t ->
                            ?blobParts:BlobPart.t list ->
                              ?options:BlobPropertyBag.t -> unit -> Blob.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3986 : Ojs.t) -> x3986
    and t_to_js : t -> Ojs.t = fun (x3985 : Ojs.t) -> x3985
    let (get_prototype : t -> Blob.t) =
      fun (x3987 : t) ->
        Blob.t_of_js (Ojs.get_prop_ascii (t_to_js x3987) "prototype")
    let (set_prototype : t -> Blob.t -> unit) =
      fun (x3988 : t) ->
        fun (x3989 : Blob.t) ->
          Ojs.set_prop_ascii (t_to_js x3988) "prototype" (Blob.t_to_js x3989)
    let (create :
      t ->
        ?blobParts:BlobPart.t list ->
          ?options:BlobPropertyBag.t -> unit -> Blob.t)
      =
      fun (x3996 : t) ->
        fun ?blobParts:(x3990 : BlobPart.t list option) ->
          fun ?options:(x3991 : BlobPropertyBag.t option) ->
            fun () ->
              Blob.t_of_js
                (Ojs.new_obj_arr (t_to_js x3996)
                   (let x3992 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3990 with
                     | Some x3994 ->
                         ignore
                           (Ojs.call x3992 "push"
                              [|(Ojs.list_to_js BlobPart.t_to_js x3994)|])
                     | None -> ());
                    (match x3991 with
                     | Some x3993 ->
                         ignore
                           (Ojs.call x3992 "push"
                              [|(BlobPropertyBag.t_to_js x3993)|])
                     | None -> ());
                    x3992))
  end
 and
  Blob:sig
         type t = [ `Blob ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_size : 'tags this -> float
         val get_type : 'tags this -> string
         val arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1
         val slice :
           'tags this ->
             ?start:float -> ?end_:float -> ?contentType:string -> unit -> t
         val stream : 'tags this -> ReadableStream.t_0
         val text : 'tags this -> string Promise.t_1
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           ?blobParts:BlobPart.t list ->
             ?options:BlobPropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3998 : Ojs.t) -> t_of_js x3998
    and t_0_to_js : t_0 -> Ojs.t = fun (x3997 : t) -> t_to_js x3997
    type tags = [ `Blob ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4001 : Ojs.t) -> intf_of_js __tags_of_js x4001
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3999 : __tags intf) -> intf_to_js __tags_to_js x3999
    let (get_size : 'tags this -> float) =
      fun (x4003 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4003) "size")
    let (get_type : 'tags this -> string) =
      fun (x4005 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4005) "type")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x4007 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x4007) "arrayBuffer" [||])
    let (slice :
      'tags this ->
        ?start:float -> ?end_:float -> ?contentType:string -> unit -> t)
      =
      fun (x4017 : 'tags this) ->
        fun ?start:(x4010 : float option) ->
          fun ?end_:(x4011 : float option) ->
            fun ?contentType:(x4012 : string option) ->
              fun () ->
                t_of_js
                  (let x4019 = this_to_js Obj.magic x4017 in
                   Ojs.call (Ojs.get_prop_ascii x4019 "slice") "apply"
                     [|x4019;((let x4013 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4010 with
                                | Some x4016 ->
                                    ignore
                                      (Ojs.call x4013 "push"
                                         [|(Ojs.float_to_js x4016)|])
                                | None -> ());
                               (match x4011 with
                                | Some x4015 ->
                                    ignore
                                      (Ojs.call x4013 "push"
                                         [|(Ojs.float_to_js x4015)|])
                                | None -> ());
                               (match x4012 with
                                | Some x4014 ->
                                    ignore
                                      (Ojs.call x4013 "push"
                                         [|(Ojs.string_to_js x4014)|])
                                | None -> ());
                               x4013))|])
    let (stream : 'tags this -> ReadableStream.t_0) =
      fun (x4020 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x4020) "stream" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x4022 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4022) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Blob")
             "prototype")
    let (create :
      ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t)
      =
      fun ?blobParts:(x4025 : BlobPart.t list option) ->
        fun ?options:(x4026 : BlobPropertyBag.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Blob")
                 (let x4027 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4025 with
                   | Some x4029 ->
                       ignore
                         (Ojs.call x4027 "push"
                            [|(Ojs.list_to_js BlobPart.t_to_js x4029)|])
                   | None -> ());
                  (match x4026 with
                   | Some x4028 ->
                       ignore
                         (Ojs.call x4027 "push"
                            [|(BlobPropertyBag.t_to_js x4028)|])
                   | None -> ());
                  x4027))
  end and
       BlobPart:sig
                  type t = (Blob.t, BufferSource.t) union2 or_string
                  type t_0 = t
                  val t_to_js : t -> Ojs.t
                  val t_of_js : Ojs.t -> t
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                end =
       struct
         type t = (Blob.t, BufferSource.t) union2 or_string
         let rec t_of_js : Ojs.t -> t =
           fun (x4035 : Ojs.t) ->
             or_string_of_js
               (fun (x4036 : Ojs.t) ->
                  union2_of_js Blob.t_of_js BufferSource.t_of_js x4036) x4035
         and t_to_js : t -> Ojs.t =
           fun (x4031 : (Blob.t, BufferSource.t) union2 or_string) ->
             or_string_to_js
               (fun (x4032 : (Blob.t, BufferSource.t) union2) ->
                  union2_to_js Blob.t_to_js BufferSource.t_to_js x4032) x4031
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x4040 : Ojs.t) -> t_of_js x4040
         and t_0_to_js : t_0 -> Ojs.t = fun (x4039 : t) -> t_to_js x4039
       end
module rec
  AnonymousInterface34:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> File.t
                         val set_prototype : t -> File.t -> unit
                         val create :
                           t ->
                             fileBits:BlobPart.t list ->
                               fileName:string ->
                                 ?options:FilePropertyBag.t -> unit -> File.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4042 : Ojs.t) -> x4042
    and t_to_js : t -> Ojs.t = fun (x4041 : Ojs.t) -> x4041
    let (get_prototype : t -> File.t) =
      fun (x4043 : t) ->
        File.t_of_js (Ojs.get_prop_ascii (t_to_js x4043) "prototype")
    let (set_prototype : t -> File.t -> unit) =
      fun (x4044 : t) ->
        fun (x4045 : File.t) ->
          Ojs.set_prop_ascii (t_to_js x4044) "prototype" (File.t_to_js x4045)
    let (create :
      t ->
        fileBits:BlobPart.t list ->
          fileName:string -> ?options:FilePropertyBag.t -> unit -> File.t)
      =
      fun (x4052 : t) ->
        fun ~fileBits:(x4046 : BlobPart.t list) ->
          fun ~fileName:(x4047 : string) ->
            fun ?options:(x4048 : FilePropertyBag.t option) ->
              fun () ->
                File.t_of_js
                  (Ojs.new_obj_arr (t_to_js x4052)
                     (let x4049 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4049 "push"
                           [|(Ojs.list_to_js BlobPart.t_to_js x4046)|]);
                      ignore
                        (Ojs.call x4049 "push" [|(Ojs.string_to_js x4047)|]);
                      (match x4048 with
                       | Some x4050 ->
                           ignore
                             (Ojs.call x4049 "push"
                                [|(FilePropertyBag.t_to_js x4050)|])
                       | None -> ());
                      x4049))
  end
 and
  File:sig
         type t = [ `Blob  | `File ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob  | `File ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob  | `File ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `File ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_lastModified : 'tags this -> float
         val get_name : 'tags this -> string
         val get_webkitRelativePath : 'tags this -> string
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           fileBits:BlobPart.t list ->
             fileName:string -> ?options:FilePropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob  | `File ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4054 : Ojs.t) -> t_of_js x4054
    and t_0_to_js : t_0 -> Ojs.t = fun (x4053 : t) -> t_to_js x4053
    type tags = [ `Blob  | `File ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `File ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4057 : Ojs.t) -> intf_of_js __tags_of_js x4057
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4055 : __tags intf) -> intf_to_js __tags_to_js x4055
    let (get_lastModified : 'tags this -> float) =
      fun (x4059 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4059) "lastModified")
    let (get_name : 'tags this -> string) =
      fun (x4061 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4061) "name")
    let (get_webkitRelativePath : 'tags this -> string) =
      fun (x4063 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4063)
             "webkitRelativePath")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "File")
             "prototype")
    let (create :
      fileBits:BlobPart.t list ->
        fileName:string -> ?options:FilePropertyBag.t -> unit -> t)
      =
      fun ~fileBits:(x4065 : BlobPart.t list) ->
        fun ~fileName:(x4066 : string) ->
          fun ?options:(x4067 : FilePropertyBag.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "File")
                   (let x4068 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4068 "push"
                         [|(Ojs.list_to_js BlobPart.t_to_js x4065)|]);
                    ignore
                      (Ojs.call x4068 "push" [|(Ojs.string_to_js x4066)|]);
                    (match x4067 with
                     | Some x4069 ->
                         ignore
                           (Ojs.call x4068 "push"
                              [|(FilePropertyBag.t_to_js x4069)|])
                     | None -> ());
                    x4068))
  end
module FormDataEntryValue =
  struct
    type t = File.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x4073 : Ojs.t) -> or_string_of_js File.t_of_js x4073
    and t_to_js : t -> Ojs.t =
      fun (x4071 : File.t or_string) -> or_string_to_js File.t_to_js x4071
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4076 : Ojs.t) -> t_of_js x4076
    and t_0_to_js : t_0 -> Ojs.t = fun (x4075 : t) -> t_to_js x4075
  end
module rec
  AnonymousInterface41:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FormData.t
                         val set_prototype : t -> FormData.t -> unit
                         val create : t -> FormData.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4078 : Ojs.t) -> x4078
    and t_to_js : t -> Ojs.t = fun (x4077 : Ojs.t) -> x4077
    let (get_prototype : t -> FormData.t) =
      fun (x4079 : t) ->
        FormData.t_of_js (Ojs.get_prop_ascii (t_to_js x4079) "prototype")
    let (set_prototype : t -> FormData.t -> unit) =
      fun (x4080 : t) ->
        fun (x4081 : FormData.t) ->
          Ojs.set_prop_ascii (t_to_js x4080) "prototype"
            (FormData.t_to_js x4081)
    let (create : t -> FormData.t) =
      fun (x4082 : t) -> FormData.t_of_js (Ojs.new_obj (t_to_js x4082) [||])
  end
 and
  FormData:sig
             type t =
               [ `FormData 
               | (string * FormDataEntryValue.t) IterableIterator.tags_1]
                 intf
             type t_0 = t
             [@@@js.stop ]
             type tags =
               [ `FormData 
               | (string * FormDataEntryValue.t) IterableIterator.tags_1]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags =
                 [ `FormData 
                 | (string * FormDataEntryValue.t) IterableIterator.tags_1]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val append :
               'tags this ->
                 name:string ->
                   value:Blob.t or_string -> ?fileName:string -> unit -> unit
             val delete : 'tags this -> name:string -> unit
             val get_ :
               'tags this -> name:string -> FormDataEntryValue.t or_null
             val getAll :
               'tags this -> name:string -> FormDataEntryValue.t list
             val has : 'tags this -> name:string -> bool
             val set_ :
               'tags this ->
                 name:string ->
                   value:Blob.t or_string -> ?fileName:string -> unit -> unit
             val forEach :
               'tags this ->
                 callbackfn:(value:FormDataEntryValue.t ->
                               key:string -> parent:t -> unit)
                   -> ?thisArg:any -> unit -> unit
             val entries :
               'tags this ->
                 (string * FormDataEntryValue.t) IterableIterator.t_1
             val keys : 'tags this -> string IterableIterator.t_1
             val values :
               'tags this -> FormDataEntryValue.t IterableIterator.t_1
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create : unit -> t
           end =
  struct
    type t =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4084 : Ojs.t) -> t_of_js x4084
    and t_0_to_js : t_0 -> Ojs.t = fun (x4083 : t) -> t_to_js x4083
    type tags =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4087 : Ojs.t) -> intf_of_js __tags_of_js x4087
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4085 : __tags intf) -> intf_to_js __tags_to_js x4085
    let (append :
      'tags this ->
        name:string ->
          value:Blob.t or_string -> ?fileName:string -> unit -> unit)
      =
      fun (x4095 : 'tags this) ->
        fun ~name:(x4089 : string) ->
          fun ~value:(x4090 : Blob.t or_string) ->
            fun ?fileName:(x4091 : string option) ->
              fun () ->
                ignore
                  (let x4097 = this_to_js Obj.magic x4095 in
                   Ojs.call (Ojs.get_prop_ascii x4097 "append") "apply"
                     [|x4097;((let x4092 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4092 "push"
                                    [|(Ojs.string_to_js x4089)|]);
                               ignore
                                 (Ojs.call x4092 "push"
                                    [|(or_string_to_js Blob.t_to_js x4090)|]);
                               (match x4091 with
                                | Some x4093 ->
                                    ignore
                                      (Ojs.call x4092 "push"
                                         [|(Ojs.string_to_js x4093)|])
                                | None -> ());
                               x4092))|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4099 : 'tags this) ->
        fun ~name:(x4098 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4099) "delete"
               [|(Ojs.string_to_js x4098)|])
    let (get_ : 'tags this -> name:string -> FormDataEntryValue.t or_null) =
      fun (x4102 : 'tags this) ->
        fun ~name:(x4101 : string) ->
          or_null_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4102) "get"
               [|(Ojs.string_to_js x4101)|])
    let (getAll : 'tags this -> name:string -> FormDataEntryValue.t list) =
      fun (x4106 : 'tags this) ->
        fun ~name:(x4105 : string) ->
          Ojs.list_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4106) "getAll"
               [|(Ojs.string_to_js x4105)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4110 : 'tags this) ->
        fun ~name:(x4109 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4110) "has"
               [|(Ojs.string_to_js x4109)|])
    let (set_ :
      'tags this ->
        name:string ->
          value:Blob.t or_string -> ?fileName:string -> unit -> unit)
      =
      fun (x4118 : 'tags this) ->
        fun ~name:(x4112 : string) ->
          fun ~value:(x4113 : Blob.t or_string) ->
            fun ?fileName:(x4114 : string option) ->
              fun () ->
                ignore
                  (let x4120 = this_to_js Obj.magic x4118 in
                   Ojs.call (Ojs.get_prop_ascii x4120 "set") "apply"
                     [|x4120;((let x4115 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4115 "push"
                                    [|(Ojs.string_to_js x4112)|]);
                               ignore
                                 (Ojs.call x4115 "push"
                                    [|(or_string_to_js Blob.t_to_js x4113)|]);
                               (match x4114 with
                                | Some x4116 ->
                                    ignore
                                      (Ojs.call x4115 "push"
                                         [|(Ojs.string_to_js x4116)|])
                                | None -> ());
                               x4115))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FormDataEntryValue.t ->
                      key:string -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x4128 : 'tags this) ->
        fun
          ~callbackfn:(x4121 :
                        value:FormDataEntryValue.t ->
                          key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4122 : any option) ->
            fun () ->
              ignore
                (let x4130 = this_to_js Obj.magic x4128 in
                 Ojs.call (Ojs.get_prop_ascii x4130 "forEach") "apply"
                   [|x4130;((let x4123 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4123 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4125 : Ojs.t) ->
                                          fun (x4126 : Ojs.t) ->
                                            fun (x4127 : Ojs.t) ->
                                              x4121
                                                ~value:(FormDataEntryValue.t_of_js
                                                          x4125)
                                                ~key:(Ojs.string_of_js x4126)
                                                ~parent:(t_of_js x4127)))|]);
                             (match x4122 with
                              | Some x4124 ->
                                  ignore
                                    (Ojs.call x4123 "push"
                                       [|(any_to_js x4124)|])
                              | None -> ());
                             x4123))|])
    let (entries :
      'tags this -> (string * FormDataEntryValue.t) IterableIterator.t_1) =
      fun (x4131 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4133 : Ojs.t) ->
             let x4134 = x4133 in
             ((Ojs.string_of_js (Ojs.array_get x4134 0)),
               (FormDataEntryValue.t_of_js (Ojs.array_get x4134 1))))
          (Ojs.call (this_to_js Obj.magic x4131) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4135 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4135) "keys" [||])
    let (values : 'tags this -> FormDataEntryValue.t IterableIterator.t_1) =
      fun (x4138 : 'tags this) ->
        IterableIterator.t_1_of_js FormDataEntryValue.t_of_js
          (Ojs.call (this_to_js Obj.magic x4138) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FormData")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FormData") [||])
  end
module rec
  AnonymousInterface110:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> URLSearchParams.t
                          val set_prototype : t -> URLSearchParams.t -> unit
                          val create :
                            t ->
                              ?init:((URLSearchParams.t,
                                       (string, string) Record.t_2) union2,
                                string list) or_array or_string ->
                                unit -> URLSearchParams.t
                          val toString : t -> string
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4142 : Ojs.t) -> x4142
    and t_to_js : t -> Ojs.t = fun (x4141 : Ojs.t) -> x4141
    let (get_prototype : t -> URLSearchParams.t) =
      fun (x4143 : t) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (t_to_js x4143) "prototype")
    let (set_prototype : t -> URLSearchParams.t -> unit) =
      fun (x4144 : t) ->
        fun (x4145 : URLSearchParams.t) ->
          Ojs.set_prop_ascii (t_to_js x4144) "prototype"
            (URLSearchParams.t_to_js x4145)
    let (create :
      t ->
        ?init:((URLSearchParams.t, (string, string) Record.t_2) union2,
          string list) or_array or_string -> unit -> URLSearchParams.t)
      =
      fun (x4157 : t) ->
        fun
          ?init:(x4146 :
                  ((URLSearchParams.t, (string, string) Record.t_2) union2,
                    string list) or_array or_string option)
          ->
          fun () ->
            URLSearchParams.t_of_js
              (Ojs.new_obj_arr (t_to_js x4157)
                 (let x4147 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4146 with
                   | Some x4148 ->
                       ignore
                         (Ojs.call x4147 "push"
                            [|(or_string_to_js
                                 (fun
                                    (x4149 :
                                      ((URLSearchParams.t,
                                         (string, string) Record.t_2) union2,
                                        string list) or_array)
                                    ->
                                    or_array_to_js
                                      (fun
                                         (x4150 :
                                           (URLSearchParams.t,
                                             (string, string) Record.t_2)
                                             union2)
                                         ->
                                         union2_to_js URLSearchParams.t_to_js
                                           (fun
                                              (x4152 :
                                                (string, string) Record.t_2)
                                              ->
                                              Record.t_2_to_js
                                                Ojs.string_to_js
                                                Ojs.string_to_js x4152) x4150)
                                      (fun (x4155 : string list) ->
                                         Ojs.list_to_js Ojs.string_to_js
                                           x4155) x4149) x4148)|])
                   | None -> ());
                  x4147))
    let (toString : t -> string) =
      fun (x4158 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x4158) "toString" [||])
  end
 and
  URLSearchParams:sig
                    type t =
                      [ `URLSearchParams 
                      | (string * string) IterableIterator.tags_1] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags =
                      [ `URLSearchParams 
                      | (string * string) IterableIterator.tags_1]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags =
                        [ `URLSearchParams 
                        | (string * string) IterableIterator.tags_1]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `URLSearchParams ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val append :
                      'tags this -> name:string -> value:string -> unit
                    val delete : 'tags this -> name:string -> unit
                    val get_ : 'tags this -> name:string -> string or_null
                    val getAll : 'tags this -> name:string -> string list
                    val has : 'tags this -> name:string -> bool
                    val set_ :
                      'tags this -> name:string -> value:string -> unit
                    val sort : 'tags this -> unit
                    val toString : 'tags this -> string
                    val forEach :
                      'tags this ->
                        callbackfn:(value:string ->
                                      key:string -> parent:t -> unit)
                          -> ?thisArg:any -> unit -> unit
                    val entries :
                      'tags this -> (string * string) IterableIterator.t_1
                    val keys : 'tags this -> string IterableIterator.t_1
                    val values : 'tags this -> string IterableIterator.t_1
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create :
                      ?init:((t, (string, string) Record.t_2) union2,
                        string list) or_array or_string -> unit -> t
                    val toString' : unit -> string
                  end =
  struct
    type t =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4160 : Ojs.t) -> t_of_js x4160
    and t_0_to_js : t_0 -> Ojs.t = fun (x4159 : t) -> t_to_js x4159
    type tags =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4163 : Ojs.t) -> intf_of_js __tags_of_js x4163
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4161 : __tags intf) -> intf_to_js __tags_to_js x4161
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x4167 : 'tags this) ->
        fun ~name:(x4165 : string) ->
          fun ~value:(x4166 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4167) "append"
                 [|(Ojs.string_to_js x4165);(Ojs.string_to_js x4166)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4170 : 'tags this) ->
        fun ~name:(x4169 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4170) "delete"
               [|(Ojs.string_to_js x4169)|])
    let (get_ : 'tags this -> name:string -> string or_null) =
      fun (x4173 : 'tags this) ->
        fun ~name:(x4172 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4173) "get"
               [|(Ojs.string_to_js x4172)|])
    let (getAll : 'tags this -> name:string -> string list) =
      fun (x4177 : 'tags this) ->
        fun ~name:(x4176 : string) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4177) "getAll"
               [|(Ojs.string_to_js x4176)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4181 : 'tags this) ->
        fun ~name:(x4180 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4181) "has"
               [|(Ojs.string_to_js x4180)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x4185 : 'tags this) ->
        fun ~name:(x4183 : string) ->
          fun ~value:(x4184 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4185) "set"
                 [|(Ojs.string_to_js x4183);(Ojs.string_to_js x4184)|])
    let (sort : 'tags this -> unit) =
      fun (x4187 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4187) "sort" [||])
    let (toString : 'tags this -> string) =
      fun (x4189 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4189) "toString" [||])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4198 : 'tags this) ->
        fun
          ~callbackfn:(x4191 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4192 : any option) ->
            fun () ->
              ignore
                (let x4200 = this_to_js Obj.magic x4198 in
                 Ojs.call (Ojs.get_prop_ascii x4200 "forEach") "apply"
                   [|x4200;((let x4193 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4193 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4195 : Ojs.t) ->
                                          fun (x4196 : Ojs.t) ->
                                            fun (x4197 : Ojs.t) ->
                                              x4191
                                                ~value:(Ojs.string_of_js
                                                          x4195)
                                                ~key:(Ojs.string_of_js x4196)
                                                ~parent:(t_of_js x4197)))|]);
                             (match x4192 with
                              | Some x4194 ->
                                  ignore
                                    (Ojs.call x4193 "push"
                                       [|(any_to_js x4194)|])
                              | None -> ());
                             x4193))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4201 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4203 : Ojs.t) ->
             let x4204 = x4203 in
             ((Ojs.string_of_js (Ojs.array_get x4204 0)),
               (Ojs.string_of_js (Ojs.array_get x4204 1))))
          (Ojs.call (this_to_js Obj.magic x4201) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4205 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4205) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4208 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4208) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "URLSearchParams") "prototype")
    let (create :
      ?init:((t, (string, string) Record.t_2) union2, string list) or_array
        or_string -> unit -> t)
      =
      fun
        ?init:(x4211 :
                ((t, (string, string) Record.t_2) union2, string list)
                  or_array or_string option)
        ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
               (let x4212 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4211 with
                 | Some x4213 ->
                     ignore
                       (Ojs.call x4212 "push"
                          [|(or_string_to_js
                               (fun
                                  (x4214 :
                                    ((t, (string, string) Record.t_2) union2,
                                      string list) or_array)
                                  ->
                                  or_array_to_js
                                    (fun
                                       (x4215 :
                                         (t, (string, string) Record.t_2)
                                           union2)
                                       ->
                                       union2_to_js t_to_js
                                         (fun
                                            (x4217 :
                                              (string, string) Record.t_2)
                                            ->
                                            Record.t_2_to_js Ojs.string_to_js
                                              Ojs.string_to_js x4217) x4215)
                                    (fun (x4220 : string list) ->
                                       Ojs.list_to_js Ojs.string_to_js x4220)
                                    x4214) x4213)|])
                 | None -> ());
                x4212))
    let (toString' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
             "toString" [||])
  end
module XMLHttpRequestBodyInit =
  struct
    type t =
      (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4
        or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x4228 : Ojs.t) ->
        or_string_of_js
          (fun (x4229 : Ojs.t) ->
             union4_of_js Blob.t_of_js BufferSource.t_of_js FormData.t_of_js
               URLSearchParams.t_of_js x4229) x4228
    and t_to_js : t -> Ojs.t =
      fun
        (x4222 :
          (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4
            or_string)
        ->
        or_string_to_js
          (fun
             (x4223 :
               (Blob.t, BufferSource.t, FormData.t, URLSearchParams.t) union4)
             ->
             union4_to_js Blob.t_to_js BufferSource.t_to_js FormData.t_to_js
               URLSearchParams.t_to_js x4223) x4222
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4235 : Ojs.t) -> t_of_js x4235
    and t_0_to_js : t_0 -> Ojs.t = fun (x4234 : t) -> t_to_js x4234
  end
module BodyInit =
  struct
    type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x4239 : Ojs.t) ->
        union2_of_js ReadableStream.t_0_of_js XMLHttpRequestBodyInit.t_of_js
          x4239
    and t_to_js : t -> Ojs.t =
      fun (x4236 : (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2) ->
        union2_to_js ReadableStream.t_0_to_js XMLHttpRequestBodyInit.t_to_js
          x4236
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4243 : Ojs.t) -> t_of_js x4243
    and t_0_to_js : t_0 -> Ojs.t = fun (x4242 : t) -> t_to_js x4242
  end
module RequestInit =
  struct
    type t = [ `RequestInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4245 : Ojs.t) -> t_of_js x4245
    and t_0_to_js : t_0 -> Ojs.t = fun (x4244 : t) -> t_to_js x4244
    type tags = [ `RequestInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4248 : Ojs.t) -> intf_of_js __tags_of_js x4248
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4246 : __tags intf) -> intf_to_js __tags_to_js x4246
    let (get_body : 'tags this -> BodyInit.t or_null) =
      fun (x4250 : 'tags this) ->
        or_null_of_js BodyInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4250) "body")
    let (set_body : 'tags this -> BodyInit.t or_null -> unit) =
      fun (x4253 : 'tags this) ->
        fun (x4254 : BodyInit.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4253) "body"
            (or_null_to_js BodyInit.t_to_js x4254)
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4257 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4257) "cache")
    let (set_cache : 'tags this -> RequestCache.t -> unit) =
      fun (x4259 : 'tags this) ->
        fun (x4260 : RequestCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4259) "cache"
            (RequestCache.t_to_js x4260)
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4262 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4262) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x4264 : 'tags this) ->
        fun (x4265 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4264) "credentials"
            (RequestCredentials.t_to_js x4265)
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4267 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4267) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4269 : 'tags this) ->
        fun (x4270 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4269) "headers"
            (HeadersInit.t_to_js x4270)
    let (get_integrity : 'tags this -> string) =
      fun (x4272 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4272) "integrity")
    let (set_integrity : 'tags this -> string -> unit) =
      fun (x4274 : 'tags this) ->
        fun (x4275 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4274) "integrity"
            (Ojs.string_to_js x4275)
    let (get_keepalive : 'tags this -> bool) =
      fun (x4277 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4277) "keepalive")
    let (set_keepalive : 'tags this -> bool -> unit) =
      fun (x4279 : 'tags this) ->
        fun (x4280 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4279) "keepalive"
            (Ojs.bool_to_js x4280)
    let (get_method : 'tags this -> string) =
      fun (x4282 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4282) "method")
    let (set_method : 'tags this -> string -> unit) =
      fun (x4284 : 'tags this) ->
        fun (x4285 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4284) "method"
            (Ojs.string_to_js x4285)
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4287 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4287) "mode")
    let (set_mode : 'tags this -> RequestMode.t -> unit) =
      fun (x4289 : 'tags this) ->
        fun (x4290 : RequestMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4289) "mode"
            (RequestMode.t_to_js x4290)
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4292 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4292) "redirect")
    let (set_redirect : 'tags this -> RequestRedirect.t -> unit) =
      fun (x4294 : 'tags this) ->
        fun (x4295 : RequestRedirect.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4294) "redirect"
            (RequestRedirect.t_to_js x4295)
    let (get_referrer : 'tags this -> string) =
      fun (x4297 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4297) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x4299 : 'tags this) ->
        fun (x4300 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4299) "referrer"
            (Ojs.string_to_js x4300)
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4302 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4302) "referrerPolicy")
    let (set_referrerPolicy : 'tags this -> ReferrerPolicy.t -> unit) =
      fun (x4304 : 'tags this) ->
        fun (x4305 : ReferrerPolicy.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4304) "referrerPolicy"
            (ReferrerPolicy.t_to_js x4305)
    let (get_signal : 'tags this -> AbortSignal.t or_null) =
      fun (x4307 : 'tags this) ->
        or_null_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4307) "signal")
    let (set_signal : 'tags this -> AbortSignal.t or_null -> unit) =
      fun (x4310 : 'tags this) ->
        fun (x4311 : AbortSignal.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4310) "signal"
            (or_null_to_js AbortSignal.t_to_js x4311)
    let (get_window : 'tags this -> any) =
      fun (x4314 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4314) "window")
    let (set_window : 'tags this -> any -> unit) =
      fun (x4316 : 'tags this) ->
        fun (x4317 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4316) "window"
            (any_to_js x4317)
    let cast_from = Obj.magic
  end
module Body =
  struct
    type t = [ `Body ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4320 : Ojs.t) -> t_of_js x4320
    and t_0_to_js : t_0 -> Ojs.t = fun (x4319 : t) -> t_to_js x4319
    type tags = [ `Body ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Body ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4323 : Ojs.t) -> intf_of_js __tags_of_js x4323
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4321 : __tags intf) -> intf_to_js __tags_to_js x4321
    let (get_body : 'tags this -> Uint8Array.t_0 ReadableStream.t or_null) =
      fun (x4325 : 'tags this) ->
        or_null_of_js
          (fun (x4327 : Ojs.t) ->
             ReadableStream.t_of_js Uint8Array.t_0_of_js x4327)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4325) "body")
    let (get_bodyUsed : 'tags this -> bool) =
      fun (x4329 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4329) "bodyUsed")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x4331 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x4331) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t Promise.t_1) =
      fun (x4334 : 'tags this) ->
        Promise.t_1_of_js Blob.t_of_js
          (Ojs.call (this_to_js Obj.magic x4334) "blob" [||])
    let (formData : 'tags this -> FormData.t Promise.t_1) =
      fun (x4337 : 'tags this) ->
        Promise.t_1_of_js FormData.t_of_js
          (Ojs.call (this_to_js Obj.magic x4337) "formData" [||])
    let (json : 'tags this -> any Promise.t_1) =
      fun (x4340 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.call (this_to_js Obj.magic x4340) "json" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x4343 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4343) "text" [||])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface90:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Request.t
                         val set_prototype : t -> Request.t -> unit
                         val create :
                           t ->
                             input:RequestInfo.t ->
                               ?init:RequestInit.t -> unit -> Request.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4347 : Ojs.t) -> x4347
    and t_to_js : t -> Ojs.t = fun (x4346 : Ojs.t) -> x4346
    let (get_prototype : t -> Request.t) =
      fun (x4348 : t) ->
        Request.t_of_js (Ojs.get_prop_ascii (t_to_js x4348) "prototype")
    let (set_prototype : t -> Request.t -> unit) =
      fun (x4349 : t) ->
        fun (x4350 : Request.t) ->
          Ojs.set_prop_ascii (t_to_js x4349) "prototype"
            (Request.t_to_js x4350)
    let (create :
      t -> input:RequestInfo.t -> ?init:RequestInit.t -> unit -> Request.t) =
      fun (x4355 : t) ->
        fun ~input:(x4351 : RequestInfo.t) ->
          fun ?init:(x4352 : RequestInit.t option) ->
            fun () ->
              Request.t_of_js
                (Ojs.new_obj_arr (t_to_js x4355)
                   (let x4353 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4353 "push" [|(RequestInfo.t_to_js x4351)|]);
                    (match x4352 with
                     | Some x4354 ->
                         ignore
                           (Ojs.call x4353 "push"
                              [|(RequestInit.t_to_js x4354)|])
                     | None -> ());
                    x4353))
  end
 and
  Request:sig
            type t = [ `Body  | `Request ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Body  | `Request ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `Body  | `Request ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Request ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_cache : 'tags this -> RequestCache.t
            val get_credentials : 'tags this -> RequestCredentials.t
            val get_destination : 'tags this -> RequestDestination.t
            val get_headers : 'tags this -> Headers.t
            val get_integrity : 'tags this -> string
            val get_keepalive : 'tags this -> bool
            val get_method : 'tags this -> string
            val get_mode : 'tags this -> RequestMode.t
            val get_redirect : 'tags this -> RequestRedirect.t
            val get_referrer : 'tags this -> string
            val get_referrerPolicy : 'tags this -> ReferrerPolicy.t
            val get_signal : 'tags this -> AbortSignal.t
            val get_url : 'tags this -> string
            val clone : 'tags this -> t
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t
          end =
  struct
    type t = [ `Body  | `Request ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4357 : Ojs.t) -> t_of_js x4357
    and t_0_to_js : t_0 -> Ojs.t = fun (x4356 : t) -> t_to_js x4356
    type tags = [ `Body  | `Request ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Request ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4360 : Ojs.t) -> intf_of_js __tags_of_js x4360
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4358 : __tags intf) -> intf_to_js __tags_to_js x4358
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4362 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4362) "cache")
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4364 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4364) "credentials")
    let (get_destination : 'tags this -> RequestDestination.t) =
      fun (x4366 : 'tags this) ->
        RequestDestination.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4366) "destination")
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4368 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4368) "headers")
    let (get_integrity : 'tags this -> string) =
      fun (x4370 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4370) "integrity")
    let (get_keepalive : 'tags this -> bool) =
      fun (x4372 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4372) "keepalive")
    let (get_method : 'tags this -> string) =
      fun (x4374 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4374) "method")
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4376 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4376) "mode")
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4378 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4378) "redirect")
    let (get_referrer : 'tags this -> string) =
      fun (x4380 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4380) "referrer")
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4382 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4382) "referrerPolicy")
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x4384 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4384) "signal")
    let (get_url : 'tags this -> string) =
      fun (x4386 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4386) "url")
    let (clone : 'tags this -> t) =
      fun (x4388 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4388) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Request")
             "prototype")
    let (create : input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t) =
      fun ~input:(x4390 : RequestInfo.t) ->
        fun ?init:(x4391 : RequestInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Request")
                 (let x4392 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4392 "push" [|(RequestInfo.t_to_js x4390)|]);
                  (match x4391 with
                   | Some x4393 ->
                       ignore
                         (Ojs.call x4392 "push"
                            [|(RequestInit.t_to_js x4393)|])
                   | None -> ());
                  x4392))
  end and
       RequestInfo:sig
                     type t = Request.t or_string
                     type t_0 = t
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                   end =
       struct
         type t = Request.t or_string
         let rec t_of_js : Ojs.t -> t =
           fun (x4396 : Ojs.t) -> or_string_of_js Request.t_of_js x4396
         and t_to_js : t -> Ojs.t =
           fun (x4394 : Request.t or_string) ->
             or_string_to_js Request.t_to_js x4394
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x4399 : Ojs.t) -> t_of_js x4399
         and t_0_to_js : t_0 -> Ojs.t = fun (x4398 : t) -> t_to_js x4398
       end
module ResponseType =
  struct
    type t =
      [ `L_s43_basic  | `L_s55_cors  | `L_s57_default  | `L_s67_error 
      | `L_s138_opaque  | `L_s139_opaqueredirect ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4401 : Ojs.t) ->
        let x4402 = x4401 in
        match Ojs.string_of_js x4402 with
        | "basic" -> `L_s43_basic
        | "cors" -> `L_s55_cors
        | "default" -> `L_s57_default
        | "error" -> `L_s67_error
        | "opaque" -> `L_s138_opaque
        | "opaqueredirect" -> `L_s139_opaqueredirect
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4400 :
          [ `L_s43_basic  | `L_s55_cors  | `L_s57_default  | `L_s67_error 
          | `L_s138_opaque  | `L_s139_opaqueredirect ])
        ->
        match x4400 with
        | `L_s43_basic -> Ojs.string_to_js "basic"
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s67_error -> Ojs.string_to_js "error"
        | `L_s138_opaque -> Ojs.string_to_js "opaque"
        | `L_s139_opaqueredirect -> Ojs.string_to_js "opaqueredirect"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4404 : Ojs.t) -> t_of_js x4404
    and t_0_to_js : t_0 -> Ojs.t = fun (x4403 : t) -> t_to_js x4403
  end
module ResponseInit =
  struct
    type t = [ `ResponseInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4406 : Ojs.t) -> t_of_js x4406
    and t_0_to_js : t_0 -> Ojs.t = fun (x4405 : t) -> t_to_js x4405
    type tags = [ `ResponseInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4409 : Ojs.t) -> intf_of_js __tags_of_js x4409
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4407 : __tags intf) -> intf_to_js __tags_to_js x4407
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4411 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4411) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4413 : 'tags this) ->
        fun (x4414 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4413) "headers"
            (HeadersInit.t_to_js x4414)
    let (get_status : 'tags this -> float) =
      fun (x4416 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4416) "status")
    let (set_status : 'tags this -> float -> unit) =
      fun (x4418 : 'tags this) ->
        fun (x4419 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4418) "status"
            (Ojs.float_to_js x4419)
    let (get_statusText : 'tags this -> string) =
      fun (x4421 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4421) "statusText")
    let (set_statusText : 'tags this -> string -> unit) =
      fun (x4423 : 'tags this) ->
        fun (x4424 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4423) "statusText"
            (Ojs.string_to_js x4424)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface109:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> URL.t
                          val set_prototype : t -> URL.t -> unit
                          val create :
                            t ->
                              url:URL.t or_string ->
                                ?base:URL.t or_string -> unit -> URL.t
                          val createObjectURL : t -> object_:any -> string
                          val revokeObjectURL : t -> url:string -> unit
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4427 : Ojs.t) -> x4427
    and t_to_js : t -> Ojs.t = fun (x4426 : Ojs.t) -> x4426
    let (get_prototype : t -> URL.t) =
      fun (x4428 : t) ->
        URL.t_of_js (Ojs.get_prop_ascii (t_to_js x4428) "prototype")
    let (set_prototype : t -> URL.t -> unit) =
      fun (x4429 : t) ->
        fun (x4430 : URL.t) ->
          Ojs.set_prop_ascii (t_to_js x4429) "prototype" (URL.t_to_js x4430)
    let (create :
      t -> url:URL.t or_string -> ?base:URL.t or_string -> unit -> URL.t) =
      fun (x4437 : t) ->
        fun ~url:(x4431 : URL.t or_string) ->
          fun ?base:(x4432 : URL.t or_string option) ->
            fun () ->
              URL.t_of_js
                (Ojs.new_obj_arr (t_to_js x4437)
                   (let x4433 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4433 "push"
                         [|(or_string_to_js URL.t_to_js x4431)|]);
                    (match x4432 with
                     | Some x4434 ->
                         ignore
                           (Ojs.call x4433 "push"
                              [|(or_string_to_js URL.t_to_js x4434)|])
                     | None -> ());
                    x4433))
    let (createObjectURL : t -> object_:any -> string) =
      fun (x4439 : t) ->
        fun ~object_:(x4438 : any) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x4439) "createObjectURL" [|(any_to_js x4438)|])
    let (revokeObjectURL : t -> url:string -> unit) =
      fun (x4441 : t) ->
        fun ~url:(x4440 : string) ->
          ignore
            (Ojs.call (t_to_js x4441) "revokeObjectURL"
               [|(Ojs.string_to_js x4440)|])
  end
 and
  URL:sig
        type t = [ `URL ] intf
        type t_0 = t
        [@@@js.stop ]
        type tags = [ `URL ]
        type tags_0 = tags
        [@@@js.start ]
        [@@@js.implem type tags = [ `URL ]
          type tags_0 = tags]
        type 'tags this = 'tags intf constraint 'tags = [> `URL ]
        val t_to_js : t -> Ojs.t
        val t_of_js : Ojs.t -> t
        val t_0_to_js : t_0 -> Ojs.t
        val t_0_of_js : Ojs.t -> t_0
        val get_hash : 'tags this -> string
        val set_hash : 'tags this -> string -> unit
        val get_host : 'tags this -> string
        val set_host : 'tags this -> string -> unit
        val get_hostname : 'tags this -> string
        val set_hostname : 'tags this -> string -> unit
        val get_href : 'tags this -> string
        val set_href : 'tags this -> string -> unit
        val toString : 'tags this -> string
        val get_origin : 'tags this -> string
        val get_password : 'tags this -> string
        val set_password : 'tags this -> string -> unit
        val get_pathname : 'tags this -> string
        val set_pathname : 'tags this -> string -> unit
        val get_port : 'tags this -> string
        val set_port : 'tags this -> string -> unit
        val get_protocol : 'tags this -> string
        val set_protocol : 'tags this -> string -> unit
        val get_search : 'tags this -> string
        val set_search : 'tags this -> string -> unit
        val get_searchParams : 'tags this -> URLSearchParams.t
        val get_username : 'tags this -> string
        val set_username : 'tags this -> string -> unit
        val toJSON : 'tags this -> string
        val cast_from : 'tags this -> t
        val prototype : unit -> t
        val create : url:t or_string -> ?base:t or_string -> unit -> t
        val createObjectURL : any -> string
        val revokeObjectURL : string -> unit
      end =
  struct
    type t = [ `URL ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4443 : Ojs.t) -> t_of_js x4443
    and t_0_to_js : t_0 -> Ojs.t = fun (x4442 : t) -> t_to_js x4442
    type tags = [ `URL ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URL ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4446 : Ojs.t) -> intf_of_js __tags_of_js x4446
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4444 : __tags intf) -> intf_to_js __tags_to_js x4444
    let (get_hash : 'tags this -> string) =
      fun (x4448 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4448) "hash")
    let (set_hash : 'tags this -> string -> unit) =
      fun (x4450 : 'tags this) ->
        fun (x4451 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4450) "hash"
            (Ojs.string_to_js x4451)
    let (get_host : 'tags this -> string) =
      fun (x4453 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4453) "host")
    let (set_host : 'tags this -> string -> unit) =
      fun (x4455 : 'tags this) ->
        fun (x4456 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4455) "host"
            (Ojs.string_to_js x4456)
    let (get_hostname : 'tags this -> string) =
      fun (x4458 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4458) "hostname")
    let (set_hostname : 'tags this -> string -> unit) =
      fun (x4460 : 'tags this) ->
        fun (x4461 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4460) "hostname"
            (Ojs.string_to_js x4461)
    let (get_href : 'tags this -> string) =
      fun (x4463 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4463) "href")
    let (set_href : 'tags this -> string -> unit) =
      fun (x4465 : 'tags this) ->
        fun (x4466 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4465) "href"
            (Ojs.string_to_js x4466)
    let (toString : 'tags this -> string) =
      fun (x4468 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4468) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x4470 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4470) "origin")
    let (get_password : 'tags this -> string) =
      fun (x4472 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4472) "password")
    let (set_password : 'tags this -> string -> unit) =
      fun (x4474 : 'tags this) ->
        fun (x4475 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4474) "password"
            (Ojs.string_to_js x4475)
    let (get_pathname : 'tags this -> string) =
      fun (x4477 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4477) "pathname")
    let (set_pathname : 'tags this -> string -> unit) =
      fun (x4479 : 'tags this) ->
        fun (x4480 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4479) "pathname"
            (Ojs.string_to_js x4480)
    let (get_port : 'tags this -> string) =
      fun (x4482 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4482) "port")
    let (set_port : 'tags this -> string -> unit) =
      fun (x4484 : 'tags this) ->
        fun (x4485 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4484) "port"
            (Ojs.string_to_js x4485)
    let (get_protocol : 'tags this -> string) =
      fun (x4487 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4487) "protocol")
    let (set_protocol : 'tags this -> string -> unit) =
      fun (x4489 : 'tags this) ->
        fun (x4490 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4489) "protocol"
            (Ojs.string_to_js x4490)
    let (get_search : 'tags this -> string) =
      fun (x4492 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4492) "search")
    let (set_search : 'tags this -> string -> unit) =
      fun (x4494 : 'tags this) ->
        fun (x4495 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4494) "search"
            (Ojs.string_to_js x4495)
    let (get_searchParams : 'tags this -> URLSearchParams.t) =
      fun (x4497 : 'tags this) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4497) "searchParams")
    let (get_username : 'tags this -> string) =
      fun (x4499 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4499) "username")
    let (set_username : 'tags this -> string -> unit) =
      fun (x4501 : 'tags this) ->
        fun (x4502 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4501) "username"
            (Ojs.string_to_js x4502)
    let (toJSON : 'tags this -> string) =
      fun (x4504 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4504) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "URL")
             "prototype")
    let (create : url:t or_string -> ?base:t or_string -> unit -> t) =
      fun ~url:(x4506 : t or_string) ->
        fun ?base:(x4507 : t or_string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URL")
                 (let x4508 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4508 "push"
                       [|(or_string_to_js t_to_js x4506)|]);
                  (match x4507 with
                   | Some x4509 ->
                       ignore
                         (Ojs.call x4508 "push"
                            [|(or_string_to_js t_to_js x4509)|])
                   | None -> ());
                  x4508))
    let (createObjectURL : any -> string) =
      fun (x4512 : any) ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "createObjectURL"
             [|(any_to_js x4512)|])
    let (revokeObjectURL : string -> unit) =
      fun (x4513 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "revokeObjectURL"
             [|(Ojs.string_to_js x4513)|])
  end
module rec
  AnonymousInterface91:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Response.t
                         val set_prototype : t -> Response.t -> unit
                         val create :
                           t ->
                             ?body:BodyInit.t or_null ->
                               ?init:ResponseInit.t -> unit -> Response.t
                         val error : t -> Response.t
                         val redirect :
                           t ->
                             url:URL.t or_string ->
                               ?status:float -> unit -> Response.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4515 : Ojs.t) -> x4515
    and t_to_js : t -> Ojs.t = fun (x4514 : Ojs.t) -> x4514
    let (get_prototype : t -> Response.t) =
      fun (x4516 : t) ->
        Response.t_of_js (Ojs.get_prop_ascii (t_to_js x4516) "prototype")
    let (set_prototype : t -> Response.t -> unit) =
      fun (x4517 : t) ->
        fun (x4518 : Response.t) ->
          Ojs.set_prop_ascii (t_to_js x4517) "prototype"
            (Response.t_to_js x4518)
    let (create :
      t ->
        ?body:BodyInit.t or_null ->
          ?init:ResponseInit.t -> unit -> Response.t)
      =
      fun (x4525 : t) ->
        fun ?body:(x4519 : BodyInit.t or_null option) ->
          fun ?init:(x4520 : ResponseInit.t option) ->
            fun () ->
              Response.t_of_js
                (Ojs.new_obj_arr (t_to_js x4525)
                   (let x4521 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x4519 with
                     | Some x4523 ->
                         ignore
                           (Ojs.call x4521 "push"
                              [|(or_null_to_js BodyInit.t_to_js x4523)|])
                     | None -> ());
                    (match x4520 with
                     | Some x4522 ->
                         ignore
                           (Ojs.call x4521 "push"
                              [|(ResponseInit.t_to_js x4522)|])
                     | None -> ());
                    x4521))
    let (error : t -> Response.t) =
      fun (x4526 : t) ->
        Response.t_of_js (Ojs.call (t_to_js x4526) "error" [||])
    let (redirect :
      t -> url:URL.t or_string -> ?status:float -> unit -> Response.t) =
      fun (x4532 : t) ->
        fun ~url:(x4527 : URL.t or_string) ->
          fun ?status:(x4528 : float option) ->
            fun () ->
              Response.t_of_js
                (let x4533 = t_to_js x4532 in
                 Ojs.call (Ojs.get_prop_ascii x4533 "redirect") "apply"
                   [|x4533;((let x4529 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4529 "push"
                                  [|(or_string_to_js URL.t_to_js x4527)|]);
                             (match x4528 with
                              | Some x4530 ->
                                  ignore
                                    (Ojs.call x4529 "push"
                                       [|(Ojs.float_to_js x4530)|])
                              | None -> ());
                             x4529))|])
  end
 and
  Response:sig
             type t = [ `Body  | `Response ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `Body  | `Response ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags = [ `Body  | `Response ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `Response ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_headers : 'tags this -> Headers.t
             val get_ok : 'tags this -> bool
             val get_redirected : 'tags this -> bool
             val get_status : 'tags this -> float
             val get_statusText : 'tags this -> string
             val get_type : 'tags this -> ResponseType.t
             val get_url : 'tags this -> string
             val clone : 'tags this -> t
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create :
               ?body:BodyInit.t or_null -> ?init:ResponseInit.t -> unit -> t
             val error : unit -> t
             val redirect : url:URL.t or_string -> ?status:float -> unit -> t
           end =
  struct
    type t = [ `Body  | `Response ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4535 : Ojs.t) -> t_of_js x4535
    and t_0_to_js : t_0 -> Ojs.t = fun (x4534 : t) -> t_to_js x4534
    type tags = [ `Body  | `Response ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Response ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4538 : Ojs.t) -> intf_of_js __tags_of_js x4538
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4536 : __tags intf) -> intf_to_js __tags_to_js x4536
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4540 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4540) "headers")
    let (get_ok : 'tags this -> bool) =
      fun (x4542 : 'tags this) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4542) "ok")
    let (get_redirected : 'tags this -> bool) =
      fun (x4544 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4544) "redirected")
    let (get_status : 'tags this -> float) =
      fun (x4546 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4546) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4548 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4548) "statusText")
    let (get_type : 'tags this -> ResponseType.t) =
      fun (x4550 : 'tags this) ->
        ResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4550) "type")
    let (get_url : 'tags this -> string) =
      fun (x4552 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4552) "url")
    let (clone : 'tags this -> t) =
      fun (x4554 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4554) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Response")
             "prototype")
    let (create :
      ?body:BodyInit.t or_null -> ?init:ResponseInit.t -> unit -> t) =
      fun ?body:(x4556 : BodyInit.t or_null option) ->
        fun ?init:(x4557 : ResponseInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Response")
                 (let x4558 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4556 with
                   | Some x4560 ->
                       ignore
                         (Ojs.call x4558 "push"
                            [|(or_null_to_js BodyInit.t_to_js x4560)|])
                   | None -> ());
                  (match x4557 with
                   | Some x4559 ->
                       ignore
                         (Ojs.call x4558 "push"
                            [|(ResponseInit.t_to_js x4559)|])
                   | None -> ());
                  x4558))
    let (error : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Response") "error" [||])
    let (redirect : url:URL.t or_string -> ?status:float -> unit -> t) =
      fun ~url:(x4562 : URL.t or_string) ->
        fun ?status:(x4563 : float option) ->
          fun () ->
            t_of_js
              (let x4567 = Ojs.get_prop_ascii Ojs.global "Response" in
               Ojs.call (Ojs.get_prop_ascii x4567 "redirect") "apply"
                 [|x4567;((let x4564 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4564 "push"
                                [|(or_string_to_js URL.t_to_js x4562)|]);
                           (match x4563 with
                            | Some x4565 ->
                                ignore
                                  (Ojs.call x4564 "push"
                                     [|(Ojs.float_to_js x4565)|])
                            | None -> ());
                           x4564))|])
  end
module rec
  AnonymousInterface5:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> Cache.t
                        val set_prototype : t -> Cache.t -> unit
                        val create : t -> Cache.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4569 : Ojs.t) -> x4569
    and t_to_js : t -> Ojs.t = fun (x4568 : Ojs.t) -> x4568
    let (get_prototype : t -> Cache.t) =
      fun (x4570 : t) ->
        Cache.t_of_js (Ojs.get_prop_ascii (t_to_js x4570) "prototype")
    let (set_prototype : t -> Cache.t -> unit) =
      fun (x4571 : t) ->
        fun (x4572 : Cache.t) ->
          Ojs.set_prop_ascii (t_to_js x4571) "prototype"
            (Cache.t_to_js x4572)
    let (create : t -> Cache.t) =
      fun (x4573 : t) -> Cache.t_of_js (Ojs.new_obj (t_to_js x4573) [||])
  end
 and
  Cache:sig
          type t = [ `Cache ] intf
          type t_0 = t
          [@@@js.stop ]
          type tags = [ `Cache ]
          type tags_0 = tags
          [@@@js.start ]
          [@@@js.implem type tags = [ `Cache ]
            type tags_0 = tags]
          type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
          val t_to_js : t -> Ojs.t
          val t_of_js : Ojs.t -> t
          val t_0_to_js : t_0 -> Ojs.t
          val t_0_of_js : Ojs.t -> t_0
          val add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1
          val addAll :
            'tags this -> requests:RequestInfo.t list -> unit Promise.t_1
          val delete :
            'tags this ->
              request:RequestInfo.t ->
                ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1
          val keys :
            'tags this ->
              ?request:RequestInfo.t ->
                ?options:CacheQueryOptions.t ->
                  unit -> Request.t list Promise.t_1
          val match_ :
            'tags this ->
              request:RequestInfo.t ->
                ?options:CacheQueryOptions.t ->
                  unit -> Response.t or_undefined Promise.t_1
          val matchAll :
            'tags this ->
              ?request:RequestInfo.t ->
                ?options:CacheQueryOptions.t ->
                  unit -> Response.t list Promise.t_1
          val put :
            'tags this ->
              request:RequestInfo.t ->
                response:Response.t -> unit Promise.t_1
          val addAll' :
            'tags this ->
              requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1
          val cast_from : 'tags this -> t
          val prototype : unit -> t
          val create : unit -> t
        end =
  struct
    type t = [ `Cache ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4575 : Ojs.t) -> t_of_js x4575
    and t_0_to_js : t_0 -> Ojs.t = fun (x4574 : t) -> t_to_js x4574
    type tags = [ `Cache ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4578 : Ojs.t) -> intf_of_js __tags_of_js x4578
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4576 : __tags intf) -> intf_to_js __tags_to_js x4576
    let (add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1) =
      fun (x4581 : 'tags this) ->
        fun ~request:(x4580 : RequestInfo.t) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4581) "add"
               [|(RequestInfo.t_to_js x4580)|])
    let (addAll :
      'tags this -> requests:RequestInfo.t list -> unit Promise.t_1) =
      fun (x4586 : 'tags this) ->
        fun ~requests:(x4584 : RequestInfo.t list) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4586) "addAll"
               [|(Ojs.list_to_js RequestInfo.t_to_js x4584)|])
    let (delete :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1)
      =
      fun (x4593 : 'tags this) ->
        fun ~request:(x4589 : RequestInfo.t) ->
          fun ?options:(x4590 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.bool_of_js
                (let x4595 = this_to_js Obj.magic x4593 in
                 Ojs.call (Ojs.get_prop_ascii x4595 "delete") "apply"
                   [|x4595;((let x4591 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4591 "push"
                                  [|(RequestInfo.t_to_js x4589)|]);
                             (match x4590 with
                              | Some x4592 ->
                                  ignore
                                    (Ojs.call x4591 "push"
                                       [|(CacheQueryOptions.t_to_js x4592)|])
                              | None -> ());
                             x4591))|])
    let (keys :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t_1)
      =
      fun (x4602 : 'tags this) ->
        fun ?request:(x4597 : RequestInfo.t option) ->
          fun ?options:(x4598 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4605 : Ojs.t) -> Ojs.list_of_js Request.t_of_js x4605)
                (let x4604 = this_to_js Obj.magic x4602 in
                 Ojs.call (Ojs.get_prop_ascii x4604 "keys") "apply"
                   [|x4604;((let x4599 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4597 with
                              | Some x4601 ->
                                  ignore
                                    (Ojs.call x4599 "push"
                                       [|(RequestInfo.t_to_js x4601)|])
                              | None -> ());
                             (match x4598 with
                              | Some x4600 ->
                                  ignore
                                    (Ojs.call x4599 "push"
                                       [|(CacheQueryOptions.t_to_js x4600)|])
                              | None -> ());
                             x4599))|])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t ->
            unit -> Response.t or_undefined Promise.t_1)
      =
      fun (x4611 : 'tags this) ->
        fun ~request:(x4607 : RequestInfo.t) ->
          fun ?options:(x4608 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4614 : Ojs.t) ->
                   or_undefined_of_js Response.t_of_js x4614)
                (let x4613 = this_to_js Obj.magic x4611 in
                 Ojs.call (Ojs.get_prop_ascii x4613 "match") "apply"
                   [|x4613;((let x4609 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4609 "push"
                                  [|(RequestInfo.t_to_js x4607)|]);
                             (match x4608 with
                              | Some x4610 ->
                                  ignore
                                    (Ojs.call x4609 "push"
                                       [|(CacheQueryOptions.t_to_js x4610)|])
                              | None -> ());
                             x4609))|])
    let (matchAll :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t_1)
      =
      fun (x4621 : 'tags this) ->
        fun ?request:(x4616 : RequestInfo.t option) ->
          fun ?options:(x4617 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4624 : Ojs.t) -> Ojs.list_of_js Response.t_of_js x4624)
                (let x4623 = this_to_js Obj.magic x4621 in
                 Ojs.call (Ojs.get_prop_ascii x4623 "matchAll") "apply"
                   [|x4623;((let x4618 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4616 with
                              | Some x4620 ->
                                  ignore
                                    (Ojs.call x4618 "push"
                                       [|(RequestInfo.t_to_js x4620)|])
                              | None -> ());
                             (match x4617 with
                              | Some x4619 ->
                                  ignore
                                    (Ojs.call x4618 "push"
                                       [|(CacheQueryOptions.t_to_js x4619)|])
                              | None -> ());
                             x4618))|])
    let (put :
      'tags this ->
        request:RequestInfo.t -> response:Response.t -> unit Promise.t_1)
      =
      fun (x4628 : 'tags this) ->
        fun ~request:(x4626 : RequestInfo.t) ->
          fun ~response:(x4627 : Response.t) ->
            Promise.t_1_of_js Ojs.unit_of_js
              (Ojs.call (this_to_js Obj.magic x4628) "put"
                 [|(RequestInfo.t_to_js x4626);(Response.t_to_js x4627)|])
    let (addAll' :
      'tags this -> requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1)
      =
      fun (x4633 : 'tags this) ->
        fun ~requests:(x4631 : RequestInfo.t Iterable.t_1) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4633) "addAll"
               [|(Iterable.t_1_to_js RequestInfo.t_to_js x4631)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Cache")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Cache") [||])
  end
module CachesStatic =
  struct
    let (delete : string -> bool Promise.t_1) =
      fun (x4636 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "delete"
             [|(Ojs.string_to_js x4636)|])
    let (has : string -> bool Promise.t_1) =
      fun (x4638 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "has"
             [|(Ojs.string_to_js x4638)|])
    let (keys : unit -> string list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x4640 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4640)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "keys" [||])
    let (match_ :
      request:RequestInfo.t ->
        ?options:MultiCacheQueryOptions.t ->
          unit -> Response.t or_undefined Promise.t_1)
      =
      fun ~request:(x4642 : RequestInfo.t) ->
        fun ?options:(x4643 : MultiCacheQueryOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x4647 : Ojs.t) ->
                 or_undefined_of_js Response.t_of_js x4647)
              (let x4646 = Ojs.get_prop_ascii Ojs.global "caches" in
               Ojs.call (Ojs.get_prop_ascii x4646 "match") "apply"
                 [|x4646;((let x4644 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4644 "push"
                                [|(RequestInfo.t_to_js x4642)|]);
                           (match x4643 with
                            | Some x4645 ->
                                ignore
                                  (Ojs.call x4644 "push"
                                     [|(MultiCacheQueryOptions.t_to_js x4645)|])
                            | None -> ());
                           x4644))|])
    let (open_ : string -> Cache.t Promise.t_1) =
      fun (x4649 : string) ->
        Promise.t_1_of_js Cache.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "open"
             [|(Ojs.string_to_js x4649)|])
  end
module XMLHttpRequestResponseType =
  struct
    type t =
      [ `L_s0  | `L_s37_arraybuffer  | `L_s44_blob  | `L_s62_document 
      | `L_s97_json  | `L_s191_text ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4652 : Ojs.t) ->
        let x4653 = x4652 in
        match Ojs.string_of_js x4653 with
        | "" -> `L_s0
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | "document" -> `L_s62_document
        | "json" -> `L_s97_json
        | "text" -> `L_s191_text
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4651 :
          [ `L_s0  | `L_s37_arraybuffer  | `L_s44_blob  | `L_s62_document 
          | `L_s97_json  | `L_s191_text ])
        ->
        match x4651 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s97_json -> Ojs.string_to_js "json"
        | `L_s191_text -> Ojs.string_to_js "text"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4655 : Ojs.t) -> t_of_js x4655
    and t_0_to_js : t_0 -> Ojs.t = fun (x4654 : t) -> t_to_js x4654
  end
module ProgressEventInit =
  struct
    type t = [ `EventInit  | `ProgressEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4657 : Ojs.t) -> t_of_js x4657
    and t_0_to_js : t_0 -> Ojs.t = fun (x4656 : t) -> t_to_js x4656
    type tags = [ `EventInit  | `ProgressEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4660 : Ojs.t) -> intf_of_js __tags_of_js x4660
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4658 : __tags intf) -> intf_to_js __tags_to_js x4658
    let (get_lengthComputable : 'tags this -> bool) =
      fun (x4662 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4662) "lengthComputable")
    let (set_lengthComputable : 'tags this -> bool -> unit) =
      fun (x4664 : 'tags this) ->
        fun (x4665 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4664) "lengthComputable"
            (Ojs.bool_to_js x4665)
    let (get_loaded : 'tags this -> float) =
      fun (x4667 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4667) "loaded")
    let (set_loaded : 'tags this -> float -> unit) =
      fun (x4669 : 'tags this) ->
        fun (x4670 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4669) "loaded"
            (Ojs.float_to_js x4670)
    let (get_total : 'tags this -> float) =
      fun (x4672 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4672) "total")
    let (set_total : 'tags this -> float -> unit) =
      fun (x4674 : 'tags this) ->
        fun (x4675 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4674) "total"
            (Ojs.float_to_js x4675)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface80:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ProgressEvent.t_0
                         val set_prototype : t -> ProgressEvent.t_0 -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:ProgressEventInit.t ->
                                 unit -> ProgressEvent.t_0
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4678 : Ojs.t) -> x4678
    and t_to_js : t -> Ojs.t = fun (x4677 : Ojs.t) -> x4677
    let (get_prototype : t -> ProgressEvent.t_0) =
      fun (x4679 : t) ->
        ProgressEvent.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x4679) "prototype")
    let (set_prototype : t -> ProgressEvent.t_0 -> unit) =
      fun (x4680 : t) ->
        fun (x4681 : ProgressEvent.t_0) ->
          Ojs.set_prop_ascii (t_to_js x4680) "prototype"
            (ProgressEvent.t_0_to_js x4681)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:ProgressEventInit.t -> unit -> ProgressEvent.t_0)
      =
      fun (x4686 : t) ->
        fun ~type_:(x4682 : string) ->
          fun ?eventInitDict:(x4683 : ProgressEventInit.t option) ->
            fun () ->
              ProgressEvent.t_0_of_js
                (Ojs.new_obj_arr (t_to_js x4686)
                   (let x4684 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4684 "push" [|(Ojs.string_to_js x4682)|]);
                    (match x4683 with
                     | Some x4685 ->
                         ignore
                           (Ojs.call x4684 "push"
                              [|(ProgressEventInit.t_to_js x4685)|])
                     | None -> ());
                    x4684))
  end
 and
  ProgressEvent:sig
                  type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
                  type 'T t_1 = 'T t
                  type t_0 = EventTarget.t t
                  [@@@js.stop ]
                  type 'T tags = [ `Event  | `ProgressEvent of 'T ]
                  type 'T tags_1 = 'T tags
                  type tags_0 = EventTarget.t tags
                  [@@@js.start ]
                  [@@@js.implem
                    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
                    type 'T tags_1 = 'T tags
                    type tags_0 = EventTarget.t tags]
                  type ('tags, 'T) this =
                    'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
                  val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                  val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                  val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                  val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                  val get_lengthComputable : ('tags, 'T) this -> bool
                  val get_loaded : ('tags, 'T) this -> float
                  val get_target : ('tags, 'T) this -> 'T or_null
                  val get_total : ('tags, 'T) this -> float
                  val cast_from : ('tags, 'T) this -> 'T t
                  val prototype : unit -> t_0
                  val create :
                    type_:string ->
                      ?eventInitDict:ProgressEventInit.t -> unit -> t_0
                end =
  struct
    type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4689 : Ojs.t) -> t_of_js __T_of_js x4689
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4687 : __T t) -> t_to_js __T_to_js x4687
    type t_0 = EventTarget.t t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4693 : Ojs.t) -> t_of_js EventTarget.t_of_js x4693
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4691 : EventTarget.t t) -> t_to_js EventTarget.t_to_js x4691
    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = EventTarget.t tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4697 : Ojs.t) -> intf_of_js __tags_of_js x4697
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4695 : __tags intf) -> intf_to_js __tags_to_js x4695
    let (get_lengthComputable : ('tags, 'T) this -> bool) =
      fun (x4699 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4699)
             "lengthComputable")
    let (get_loaded : ('tags, 'T) this -> float) =
      fun (x4702 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4702) "loaded")
    let (get_target : ('tags, 'T) this -> 'T or_null) =
      fun (x4705 : ('tags, 'T) this) ->
        or_null_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4705) "target")
    let (get_total : ('tags, 'T) this -> float) =
      fun (x4709 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4709) "total")
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0) =
      fun ~type_:(x4712 : string) ->
        fun ?eventInitDict:(x4713 : ProgressEventInit.t option) ->
          fun () ->
            t_0_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
                 (let x4714 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4714 "push" [|(Ojs.string_to_js x4712)|]);
                  (match x4713 with
                   | Some x4715 ->
                       ignore
                         (Ojs.call x4714 "push"
                            [|(ProgressEventInit.t_to_js x4715)|])
                   | None -> ());
                  x4714))
  end
module rec
  AnonymousInterface137:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> XMLHttpRequest.t
                          val set_prototype : t -> XMLHttpRequest.t -> unit
                          val create : t -> XMLHttpRequest.t
                          val get_DONE : t -> float
                          val get_HEADERS_RECEIVED : t -> float
                          val get_LOADING : t -> float
                          val get_OPENED : t -> float
                          val get_UNSENT : t -> float
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4717 : Ojs.t) -> x4717
    and t_to_js : t -> Ojs.t = fun (x4716 : Ojs.t) -> x4716
    let (get_prototype : t -> XMLHttpRequest.t) =
      fun (x4718 : t) ->
        XMLHttpRequest.t_of_js
          (Ojs.get_prop_ascii (t_to_js x4718) "prototype")
    let (set_prototype : t -> XMLHttpRequest.t -> unit) =
      fun (x4719 : t) ->
        fun (x4720 : XMLHttpRequest.t) ->
          Ojs.set_prop_ascii (t_to_js x4719) "prototype"
            (XMLHttpRequest.t_to_js x4720)
    let (create : t -> XMLHttpRequest.t) =
      fun (x4721 : t) ->
        XMLHttpRequest.t_of_js (Ojs.new_obj (t_to_js x4721) [||])
    let (get_DONE : t -> float) =
      fun (x4722 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4722) "DONE")
    let (get_HEADERS_RECEIVED : t -> float) =
      fun (x4723 : t) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x4723) "HEADERS_RECEIVED")
    let (get_LOADING : t -> float) =
      fun (x4724 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4724) "LOADING")
    let (get_OPENED : t -> float) =
      fun (x4725 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4725) "OPENED")
    let (get_UNSENT : t -> float) =
      fun (x4726 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x4726) "UNSENT")
  end
 and
  AnonymousInterface138:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> XMLHttpRequestEventTarget.t
                          val set_prototype :
                            t -> XMLHttpRequestEventTarget.t -> unit
                          val create : t -> XMLHttpRequestEventTarget.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4728 : Ojs.t) -> x4728
    and t_to_js : t -> Ojs.t = fun (x4727 : Ojs.t) -> x4727
    let (get_prototype : t -> XMLHttpRequestEventTarget.t) =
      fun (x4729 : t) ->
        XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (t_to_js x4729) "prototype")
    let (set_prototype : t -> XMLHttpRequestEventTarget.t -> unit) =
      fun (x4730 : t) ->
        fun (x4731 : XMLHttpRequestEventTarget.t) ->
          Ojs.set_prop_ascii (t_to_js x4730) "prototype"
            (XMLHttpRequestEventTarget.t_to_js x4731)
    let (create : t -> XMLHttpRequestEventTarget.t) =
      fun (x4732 : t) ->
        XMLHttpRequestEventTarget.t_of_js (Ojs.new_obj (t_to_js x4732) [||])
  end and
       AnonymousInterface139:sig
                               type t = private Ojs.t
                               val t_to_js : t -> Ojs.t
                               val t_of_js : Ojs.t -> t
                               val get_prototype :
                                 t -> XMLHttpRequestUpload.t
                               val set_prototype :
                                 t -> XMLHttpRequestUpload.t -> unit
                               val create : t -> XMLHttpRequestUpload.t
                             end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x4734 : Ojs.t) -> x4734
         and t_to_js : t -> Ojs.t = fun (x4733 : Ojs.t) -> x4733
         let (get_prototype : t -> XMLHttpRequestUpload.t) =
           fun (x4735 : t) ->
             XMLHttpRequestUpload.t_of_js
               (Ojs.get_prop_ascii (t_to_js x4735) "prototype")
         let (set_prototype : t -> XMLHttpRequestUpload.t -> unit) =
           fun (x4736 : t) ->
             fun (x4737 : XMLHttpRequestUpload.t) ->
               Ojs.set_prop_ascii (t_to_js x4736) "prototype"
                 (XMLHttpRequestUpload.t_to_js x4737)
         let (create : t -> XMLHttpRequestUpload.t) =
           fun (x4738 : t) ->
             XMLHttpRequestUpload.t_of_js (Ojs.new_obj (t_to_js x4738) [||])
       end and
            XMLHttpRequest:sig
                             type t =
                               [ `EventTarget  | `XMLHttpRequest 
                               | `XMLHttpRequestEventTarget ] intf
                             type t_0 = t
                             [@@@js.stop ]
                             type tags =
                               [ `EventTarget  | `XMLHttpRequest 
                               | `XMLHttpRequestEventTarget ]
                             type tags_0 = tags
                             [@@@js.start ]
                             [@@@js.implem
                               type tags =
                                 [ `EventTarget  | `XMLHttpRequest 
                                 | `XMLHttpRequestEventTarget ]
                               type tags_0 = tags]
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `XMLHttpRequest ]
                             val t_to_js : t -> Ojs.t
                             val t_of_js : Ojs.t -> t
                             val t_0_to_js : t_0 -> Ojs.t
                             val t_0_of_js : Ojs.t -> t_0
                             val get_onreadystatechange :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null
                             val set_onreadystatechange :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null ->
                                   unit
                             val get_readyState : 'tags this -> float
                             val get_response : 'tags this -> any
                             val get_responseText : 'tags this -> string
                             val get_responseType :
                               'tags this -> XMLHttpRequestResponseType.t
                             val set_responseType :
                               'tags this ->
                                 XMLHttpRequestResponseType.t -> unit
                             val get_responseURL : 'tags this -> string
                             val get_status : 'tags this -> float
                             val get_statusText : 'tags this -> string
                             val get_timeout : 'tags this -> float
                             val set_timeout : 'tags this -> float -> unit
                             val get_upload :
                               'tags this -> XMLHttpRequestUpload.t
                             val get_withCredentials : 'tags this -> bool
                             val set_withCredentials :
                               'tags this -> bool -> unit
                             val abort : 'tags this -> unit
                             val getAllResponseHeaders : 'tags this -> string
                             val getResponseHeader :
                               'tags this -> name:string -> string or_null
                             val open_ :
                               'tags this ->
                                 method_:string ->
                                   url:URL.t or_string -> unit
                             val open_' :
                               'tags this ->
                                 method_:string ->
                                   url:URL.t or_string ->
                                     async:bool ->
                                       ?username:string or_null ->
                                         ?password:string or_null ->
                                           unit -> unit
                             val overrideMimeType :
                               'tags this -> mime:string -> unit
                             val send :
                               'tags this ->
                                 ?body:XMLHttpRequestBodyInit.t or_null ->
                                   unit -> unit
                             val setRequestHeader :
                               'tags this ->
                                 name:string -> value:string -> unit
                             val get_DONE : 'tags this -> float
                             val get_HEADERS_RECEIVED : 'tags this -> float
                             val get_LOADING : 'tags this -> float
                             val get_OPENED : 'tags this -> float
                             val get_UNSENT : 'tags this -> float
                             val addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val cast_from : 'tags this -> t
                             val prototype : unit -> t
                             val create : unit -> t
                             val done_ : unit -> float
                             val headers_received : unit -> float
                             val loading : unit -> float
                             val opened : unit -> float
                             val unsent : unit -> float
                           end =
            struct
              type t =
                [ `EventTarget  | `XMLHttpRequest 
                | `XMLHttpRequestEventTarget ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x4740 : Ojs.t) -> t_of_js x4740
              and t_0_to_js : t_0 -> Ojs.t = fun (x4739 : t) -> t_to_js x4739
              type tags =
                [ `EventTarget  | `XMLHttpRequest 
                | `XMLHttpRequestEventTarget ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `XMLHttpRequest ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x4743 : Ojs.t) -> intf_of_js __tags_of_js x4743
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x4741 : __tags intf) -> intf_to_js __tags_to_js x4741
              let (get_onreadystatechange :
                'tags this -> (this:t -> ev:Event.t -> any) or_null) =
                fun (x4745 : 'tags this) ->
                  or_null_of_js
                    (fun (x4747 : Ojs.t) ->
                       fun ~this:(x4748 : t) ->
                         fun ~ev:(x4749 : Event.t) ->
                           any_of_js
                             (Ojs.apply x4747
                                [|(t_to_js x4748);(Event.t_to_js x4749)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4745)
                       "onreadystatechange")
              let (set_onreadystatechange :
                'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit)
                =
                fun (x4750 : 'tags this) ->
                  fun (x4751 : (this:t -> ev:Event.t -> any) or_null) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4750)
                      "onreadystatechange"
                      (or_null_to_js
                         (fun (x4752 : this:t -> ev:Event.t -> any) ->
                            Ojs.fun_to_js 2
                              (fun (x4753 : Ojs.t) ->
                                 fun (x4754 : Ojs.t) ->
                                   any_to_js
                                     (x4752 ~this:(t_of_js x4753)
                                        ~ev:(Event.t_of_js x4754)))) x4751)
              let (get_readyState : 'tags this -> float) =
                fun (x4756 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4756)
                       "readyState")
              let (get_response : 'tags this -> any) =
                fun (x4758 : 'tags this) ->
                  any_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4758)
                       "response")
              let (get_responseText : 'tags this -> string) =
                fun (x4760 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4760)
                       "responseText")
              let (get_responseType :
                'tags this -> XMLHttpRequestResponseType.t) =
                fun (x4762 : 'tags this) ->
                  XMLHttpRequestResponseType.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4762)
                       "responseType")
              let (set_responseType :
                'tags this -> XMLHttpRequestResponseType.t -> unit) =
                fun (x4764 : 'tags this) ->
                  fun (x4765 : XMLHttpRequestResponseType.t) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4764)
                      "responseType"
                      (XMLHttpRequestResponseType.t_to_js x4765)
              let (get_responseURL : 'tags this -> string) =
                fun (x4767 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4767)
                       "responseURL")
              let (get_status : 'tags this -> float) =
                fun (x4769 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4769) "status")
              let (get_statusText : 'tags this -> string) =
                fun (x4771 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4771)
                       "statusText")
              let (get_timeout : 'tags this -> float) =
                fun (x4773 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4773)
                       "timeout")
              let (set_timeout : 'tags this -> float -> unit) =
                fun (x4775 : 'tags this) ->
                  fun (x4776 : float) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4775) "timeout"
                      (Ojs.float_to_js x4776)
              let (get_upload : 'tags this -> XMLHttpRequestUpload.t) =
                fun (x4778 : 'tags this) ->
                  XMLHttpRequestUpload.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4778) "upload")
              let (get_withCredentials : 'tags this -> bool) =
                fun (x4780 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4780)
                       "withCredentials")
              let (set_withCredentials : 'tags this -> bool -> unit) =
                fun (x4782 : 'tags this) ->
                  fun (x4783 : bool) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4782)
                      "withCredentials" (Ojs.bool_to_js x4783)
              let (abort : 'tags this -> unit) =
                fun (x4785 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x4785) "abort" [||])
              let (getAllResponseHeaders : 'tags this -> string) =
                fun (x4787 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.call (this_to_js Obj.magic x4787)
                       "getAllResponseHeaders" [||])
              let (getResponseHeader :
                'tags this -> name:string -> string or_null) =
                fun (x4790 : 'tags this) ->
                  fun ~name:(x4789 : string) ->
                    or_null_of_js Ojs.string_of_js
                      (Ojs.call (this_to_js Obj.magic x4790)
                         "getResponseHeader" [|(Ojs.string_to_js x4789)|])
              let (open_ :
                'tags this -> method_:string -> url:URL.t or_string -> unit)
                =
                fun (x4796 : 'tags this) ->
                  fun ~method_:(x4793 : string) ->
                    fun ~url:(x4794 : URL.t or_string) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x4796) "open"
                           [|(Ojs.string_to_js x4793);(or_string_to_js
                                                         URL.t_to_js x4794)|])
              let (open_' :
                'tags this ->
                  method_:string ->
                    url:URL.t or_string ->
                      async:bool ->
                        ?username:string or_null ->
                          ?password:string or_null -> unit -> unit)
                =
                fun (x4809 : 'tags this) ->
                  fun ~method_:(x4798 : string) ->
                    fun ~url:(x4799 : URL.t or_string) ->
                      fun ~async:(x4800 : bool) ->
                        fun ?username:(x4801 : string or_null option) ->
                          fun ?password:(x4802 : string or_null option) ->
                            fun () ->
                              ignore
                                (let x4811 = this_to_js Obj.magic x4809 in
                                 Ojs.call (Ojs.get_prop_ascii x4811 "open")
                                   "apply"
                                   [|x4811;((let x4803 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x4803 "push"
                                                  [|(Ojs.string_to_js x4798)|]);
                                             ignore
                                               (Ojs.call x4803 "push"
                                                  [|(or_string_to_js
                                                       URL.t_to_js x4799)|]);
                                             ignore
                                               (Ojs.call x4803 "push"
                                                  [|(Ojs.bool_to_js x4800)|]);
                                             (match x4801 with
                                              | Some x4806 ->
                                                  ignore
                                                    (Ojs.call x4803 "push"
                                                       [|(or_null_to_js
                                                            Ojs.string_to_js
                                                            x4806)|])
                                              | None -> ());
                                             (match x4802 with
                                              | Some x4804 ->
                                                  ignore
                                                    (Ojs.call x4803 "push"
                                                       [|(or_null_to_js
                                                            Ojs.string_to_js
                                                            x4804)|])
                                              | None -> ());
                                             x4803))|])
              let (overrideMimeType : 'tags this -> mime:string -> unit) =
                fun (x4813 : 'tags this) ->
                  fun ~mime:(x4812 : string) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x4813)
                         "overrideMimeType" [|(Ojs.string_to_js x4812)|])
              let (send :
                'tags this ->
                  ?body:XMLHttpRequestBodyInit.t or_null -> unit -> unit)
                =
                fun (x4819 : 'tags this) ->
                  fun ?body:(x4815 : XMLHttpRequestBodyInit.t or_null option)
                    ->
                    fun () ->
                      ignore
                        (let x4821 = this_to_js Obj.magic x4819 in
                         Ojs.call (Ojs.get_prop_ascii x4821 "send") "apply"
                           [|x4821;((let x4816 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x4815 with
                                      | Some x4817 ->
                                          ignore
                                            (Ojs.call x4816 "push"
                                               [|(or_null_to_js
                                                    XMLHttpRequestBodyInit.t_to_js
                                                    x4817)|])
                                      | None -> ());
                                     x4816))|])
              let (setRequestHeader :
                'tags this -> name:string -> value:string -> unit) =
                fun (x4824 : 'tags this) ->
                  fun ~name:(x4822 : string) ->
                    fun ~value:(x4823 : string) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x4824)
                           "setRequestHeader"
                           [|(Ojs.string_to_js x4822);(Ojs.string_to_js x4823)|])
              let (get_DONE : 'tags this -> float) =
                fun (x4826 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4826) "DONE")
              let (get_HEADERS_RECEIVED : 'tags this -> float) =
                fun (x4828 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4828)
                       "HEADERS_RECEIVED")
              let (get_LOADING : 'tags this -> float) =
                fun (x4830 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4830)
                       "LOADING")
              let (get_OPENED : 'tags this -> float) =
                fun (x4832 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4832) "OPENED")
              let (get_UNSENT : 'tags this -> float) =
                fun (x4834 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4834) "UNSENT")
              let (addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4844 : 'tags this) ->
                  fun ~type_:(x4836 : 'K) ->
                    fun ~listener:(x4837 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x4838 :
                                   AddEventListenerOptions.t or_boolean
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x4846 = this_to_js Obj.magic x4844 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4846 "addEventListener")
                               "apply"
                               [|x4846;((let x4839 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4839 "push"
                                              [|(Obj.magic x4836)|]);
                                         ignore
                                           (Ojs.call x4839 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x4842 : Ojs.t) ->
                                                      fun (x4843 : Ojs.t) ->
                                                        any_to_js
                                                          (x4837
                                                             ~this:(t_of_js
                                                                    x4842)
                                                             ~ev:(any_of_js
                                                                    x4843))))|]);
                                         (match x4838 with
                                          | Some x4840 ->
                                              ignore
                                                (Ojs.call x4839 "push"
                                                   [|(or_boolean_to_js
                                                        AddEventListenerOptions.t_to_js
                                                        x4840)|])
                                          | None -> ());
                                         x4839))|])
              let (addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4853 : 'tags this) ->
                  fun ~type_:(x4847 : string) ->
                    fun
                      ~listener:(x4848 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x4849 :
                                   AddEventListenerOptions.t or_boolean
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x4855 = this_to_js Obj.magic x4853 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4855 "addEventListener")
                               "apply"
                               [|x4855;((let x4850 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4850 "push"
                                              [|(Ojs.string_to_js x4847)|]);
                                         ignore
                                           (Ojs.call x4850 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x4848)|]);
                                         (match x4849 with
                                          | Some x4851 ->
                                              ignore
                                                (Ojs.call x4850 "push"
                                                   [|(or_boolean_to_js
                                                        AddEventListenerOptions.t_to_js
                                                        x4851)|])
                                          | None -> ());
                                         x4850))|])
              let (removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4864 : 'tags this) ->
                  fun ~type_:(x4856 : 'K) ->
                    fun ~listener:(x4857 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x4858 :
                                   EventListenerOptions.t or_boolean option)
                        ->
                        fun () ->
                          ignore
                            (let x4866 = this_to_js Obj.magic x4864 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4866
                                  "removeEventListener") "apply"
                               [|x4866;((let x4859 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4859 "push"
                                              [|(Obj.magic x4856)|]);
                                         ignore
                                           (Ojs.call x4859 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x4862 : Ojs.t) ->
                                                      fun (x4863 : Ojs.t) ->
                                                        any_to_js
                                                          (x4857
                                                             ~this:(t_of_js
                                                                    x4862)
                                                             ~ev:(any_of_js
                                                                    x4863))))|]);
                                         (match x4858 with
                                          | Some x4860 ->
                                              ignore
                                                (Ojs.call x4859 "push"
                                                   [|(or_boolean_to_js
                                                        EventListenerOptions.t_to_js
                                                        x4860)|])
                                          | None -> ());
                                         x4859))|])
              let (removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4873 : 'tags this) ->
                  fun ~type_:(x4867 : string) ->
                    fun
                      ~listener:(x4868 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x4869 :
                                   EventListenerOptions.t or_boolean option)
                        ->
                        fun () ->
                          ignore
                            (let x4875 = this_to_js Obj.magic x4873 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4875
                                  "removeEventListener") "apply"
                               [|x4875;((let x4870 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4870 "push"
                                              [|(Ojs.string_to_js x4867)|]);
                                         ignore
                                           (Ojs.call x4870 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x4868)|]);
                                         (match x4869 with
                                          | Some x4871 ->
                                              ignore
                                                (Ojs.call x4870 "push"
                                                   [|(or_boolean_to_js
                                                        EventListenerOptions.t_to_js
                                                        x4871)|])
                                          | None -> ());
                                         x4870))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") 
                       [||])
              let (done_ : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "DONE")
              let (headers_received : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "HEADERS_RECEIVED")
              let (loading : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "LOADING")
              let (opened : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "OPENED")
              let (unsent : unit -> float) =
                fun () ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
                       "UNSENT")
            end and
                 XMLHttpRequestEventTarget:sig
                                             type t =
                                               [ `EventTarget 
                                               | `XMLHttpRequestEventTarget ]
                                                 intf
                                             type t_0 = t
                                             [@@@js.stop ]
                                             type tags =
                                               [ `EventTarget 
                                               | `XMLHttpRequestEventTarget ]
                                             type tags_0 = tags
                                             [@@@js.start ]
                                             [@@@js.implem
                                               type tags =
                                                 [ `EventTarget 
                                                 | `XMLHttpRequestEventTarget ]
                                               type tags_0 = tags]
                                             type 'tags this =
                                               'tags intf constraint 
                                                           'tags =
                                                           [>
                                                             `XMLHttpRequestEventTarget
                                                               ]
                                             val t_to_js : t -> Ojs.t
                                             val t_of_js : Ojs.t -> t
                                             val t_0_to_js : t_0 -> Ojs.t
                                             val t_0_of_js : Ojs.t -> t_0
                                             val get_onabort :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onabort :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onerror :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onerror :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onload :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onload :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onloadend :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onloadend :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onloadstart :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onloadstart :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_onprogress :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_onprogress :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val get_ontimeout :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null
                                             val set_ontimeout :
                                               'tags this ->
                                                 (this:XMLHttpRequest.t ->
                                                    ev:ProgressEvent.t_0 ->
                                                      any)
                                                   or_null -> unit
                                             val addEventListener :
                                               'tags this ->
                                                 type_:'K ->
                                                   listener:(this:t ->
                                                               ev:any -> any)
                                                     ->
                                                     ?options:AddEventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val addEventListener' :
                                               'tags this ->
                                                 type_:string ->
                                                   listener:EventListenerOrEventListenerObject.t
                                                     ->
                                                     ?options:AddEventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val removeEventListener :
                                               'tags this ->
                                                 type_:'K ->
                                                   listener:(this:t ->
                                                               ev:any -> any)
                                                     ->
                                                     ?options:EventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val removeEventListener' :
                                               'tags this ->
                                                 type_:string ->
                                                   listener:EventListenerOrEventListenerObject.t
                                                     ->
                                                     ?options:EventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val cast_from : 'tags this -> t
                                             val prototype : unit -> t
                                             val create : unit -> t
                                           end =
                 struct
                   type t =
                     [ `EventTarget  | `XMLHttpRequestEventTarget ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x4877 : Ojs.t) -> t_of_js x4877
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x4876 : t) -> t_to_js x4876
                   type tags = [ `EventTarget  | `XMLHttpRequestEventTarget ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags =
                                 [> `XMLHttpRequestEventTarget ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x4880 : Ojs.t) -> intf_of_js __tags_of_js x4880
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x4878 : __tags intf) ->
                         intf_to_js __tags_to_js x4878
                   let (get_onabort :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4882 : 'tags this) ->
                       or_null_of_js
                         (fun (x4884 : Ojs.t) ->
                            fun ~this:(x4885 : XMLHttpRequest.t) ->
                              fun ~ev:(x4886 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4884
                                     [|(XMLHttpRequest.t_to_js x4885);(
                                       ProgressEvent.t_0_to_js x4886)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4882)
                            "onabort")
                   let (set_onabort :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4887 : 'tags this) ->
                       fun
                         (x4888 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4887)
                           "onabort"
                           (or_null_to_js
                              (fun
                                 (x4889 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4890 : Ojs.t) ->
                                      fun (x4891 : Ojs.t) ->
                                        any_to_js
                                          (x4889
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4890)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4891)))) x4888)
                   let (get_onerror :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4893 : 'tags this) ->
                       or_null_of_js
                         (fun (x4895 : Ojs.t) ->
                            fun ~this:(x4896 : XMLHttpRequest.t) ->
                              fun ~ev:(x4897 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4895
                                     [|(XMLHttpRequest.t_to_js x4896);(
                                       ProgressEvent.t_0_to_js x4897)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4893)
                            "onerror")
                   let (set_onerror :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4898 : 'tags this) ->
                       fun
                         (x4899 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4898)
                           "onerror"
                           (or_null_to_js
                              (fun
                                 (x4900 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4901 : Ojs.t) ->
                                      fun (x4902 : Ojs.t) ->
                                        any_to_js
                                          (x4900
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4901)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4902)))) x4899)
                   let (get_onload :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4904 : 'tags this) ->
                       or_null_of_js
                         (fun (x4906 : Ojs.t) ->
                            fun ~this:(x4907 : XMLHttpRequest.t) ->
                              fun ~ev:(x4908 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4906
                                     [|(XMLHttpRequest.t_to_js x4907);(
                                       ProgressEvent.t_0_to_js x4908)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4904)
                            "onload")
                   let (set_onload :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4909 : 'tags this) ->
                       fun
                         (x4910 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4909)
                           "onload"
                           (or_null_to_js
                              (fun
                                 (x4911 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4912 : Ojs.t) ->
                                      fun (x4913 : Ojs.t) ->
                                        any_to_js
                                          (x4911
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4912)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4913)))) x4910)
                   let (get_onloadend :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4915 : 'tags this) ->
                       or_null_of_js
                         (fun (x4917 : Ojs.t) ->
                            fun ~this:(x4918 : XMLHttpRequest.t) ->
                              fun ~ev:(x4919 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4917
                                     [|(XMLHttpRequest.t_to_js x4918);(
                                       ProgressEvent.t_0_to_js x4919)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4915)
                            "onloadend")
                   let (set_onloadend :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4920 : 'tags this) ->
                       fun
                         (x4921 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4920)
                           "onloadend"
                           (or_null_to_js
                              (fun
                                 (x4922 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4923 : Ojs.t) ->
                                      fun (x4924 : Ojs.t) ->
                                        any_to_js
                                          (x4922
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4923)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4924)))) x4921)
                   let (get_onloadstart :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4926 : 'tags this) ->
                       or_null_of_js
                         (fun (x4928 : Ojs.t) ->
                            fun ~this:(x4929 : XMLHttpRequest.t) ->
                              fun ~ev:(x4930 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4928
                                     [|(XMLHttpRequest.t_to_js x4929);(
                                       ProgressEvent.t_0_to_js x4930)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4926)
                            "onloadstart")
                   let (set_onloadstart :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4931 : 'tags this) ->
                       fun
                         (x4932 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4931)
                           "onloadstart"
                           (or_null_to_js
                              (fun
                                 (x4933 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4934 : Ojs.t) ->
                                      fun (x4935 : Ojs.t) ->
                                        any_to_js
                                          (x4933
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4934)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4935)))) x4932)
                   let (get_onprogress :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4937 : 'tags this) ->
                       or_null_of_js
                         (fun (x4939 : Ojs.t) ->
                            fun ~this:(x4940 : XMLHttpRequest.t) ->
                              fun ~ev:(x4941 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4939
                                     [|(XMLHttpRequest.t_to_js x4940);(
                                       ProgressEvent.t_0_to_js x4941)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4937)
                            "onprogress")
                   let (set_onprogress :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4942 : 'tags this) ->
                       fun
                         (x4943 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4942)
                           "onprogress"
                           (or_null_to_js
                              (fun
                                 (x4944 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4945 : Ojs.t) ->
                                      fun (x4946 : Ojs.t) ->
                                        any_to_js
                                          (x4944
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4945)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4946)))) x4943)
                   let (get_ontimeout :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null)
                     =
                     fun (x4948 : 'tags this) ->
                       or_null_of_js
                         (fun (x4950 : Ojs.t) ->
                            fun ~this:(x4951 : XMLHttpRequest.t) ->
                              fun ~ev:(x4952 : ProgressEvent.t_0) ->
                                any_of_js
                                  (Ojs.apply x4950
                                     [|(XMLHttpRequest.t_to_js x4951);(
                                       ProgressEvent.t_0_to_js x4952)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4948)
                            "ontimeout")
                   let (set_ontimeout :
                     'tags this ->
                       (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                         or_null -> unit)
                     =
                     fun (x4953 : 'tags this) ->
                       fun
                         (x4954 :
                           (this:XMLHttpRequest.t ->
                              ev:ProgressEvent.t_0 -> any)
                             or_null)
                         ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4953)
                           "ontimeout"
                           (or_null_to_js
                              (fun
                                 (x4955 :
                                   this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                 ->
                                 Ojs.fun_to_js 2
                                   (fun (x4956 : Ojs.t) ->
                                      fun (x4957 : Ojs.t) ->
                                        any_to_js
                                          (x4955
                                             ~this:(XMLHttpRequest.t_of_js
                                                      x4956)
                                             ~ev:(ProgressEvent.t_0_of_js
                                                    x4957)))) x4954)
                   let (addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x4967 : 'tags this) ->
                       fun ~type_:(x4959 : 'K) ->
                         fun ~listener:(x4960 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x4961 :
                                        AddEventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x4969 = this_to_js Obj.magic x4967 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x4969
                                       "addEventListener") "apply"
                                    [|x4969;((let x4962 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x4962 "push"
                                                   [|(Obj.magic x4959)|]);
                                              ignore
                                                (Ojs.call x4962 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x4965 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x4966 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x4960
                                                                  ~this:(
                                                                  t_of_js
                                                                    x4965)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x4966))))|]);
                                              (match x4961 with
                                               | Some x4963 ->
                                                   ignore
                                                     (Ojs.call x4962 "push"
                                                        [|(or_boolean_to_js
                                                             AddEventListenerOptions.t_to_js
                                                             x4963)|])
                                               | None -> ());
                                              x4962))|])
                   let (addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x4976 : 'tags this) ->
                       fun ~type_:(x4970 : string) ->
                         fun
                           ~listener:(x4971 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x4972 :
                                        AddEventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x4978 = this_to_js Obj.magic x4976 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x4978
                                       "addEventListener") "apply"
                                    [|x4978;((let x4973 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x4973 "push"
                                                   [|(Ojs.string_to_js x4970)|]);
                                              ignore
                                                (Ojs.call x4973 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x4971)|]);
                                              (match x4972 with
                                               | Some x4974 ->
                                                   ignore
                                                     (Ojs.call x4973 "push"
                                                        [|(or_boolean_to_js
                                                             AddEventListenerOptions.t_to_js
                                                             x4974)|])
                                               | None -> ());
                                              x4973))|])
                   let (removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x4987 : 'tags this) ->
                       fun ~type_:(x4979 : 'K) ->
                         fun ~listener:(x4980 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x4981 :
                                        EventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x4989 = this_to_js Obj.magic x4987 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x4989
                                       "removeEventListener") "apply"
                                    [|x4989;((let x4982 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x4982 "push"
                                                   [|(Obj.magic x4979)|]);
                                              ignore
                                                (Ojs.call x4982 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x4985 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x4986 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x4980
                                                                  ~this:(
                                                                  t_of_js
                                                                    x4985)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x4986))))|]);
                                              (match x4981 with
                                               | Some x4983 ->
                                                   ignore
                                                     (Ojs.call x4982 "push"
                                                        [|(or_boolean_to_js
                                                             EventListenerOptions.t_to_js
                                                             x4983)|])
                                               | None -> ());
                                              x4982))|])
                   let (removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x4996 : 'tags this) ->
                       fun ~type_:(x4990 : string) ->
                         fun
                           ~listener:(x4991 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x4992 :
                                        EventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x4998 = this_to_js Obj.magic x4996 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x4998
                                       "removeEventListener") "apply"
                                    [|x4998;((let x4993 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x4993 "push"
                                                   [|(Ojs.string_to_js x4990)|]);
                                              ignore
                                                (Ojs.call x4993 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x4991)|]);
                                              (match x4992 with
                                               | Some x4994 ->
                                                   ignore
                                                     (Ojs.call x4993 "push"
                                                        [|(or_boolean_to_js
                                                             EventListenerOptions.t_to_js
                                                             x4994)|])
                                               | None -> ());
                                              x4993))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "XMLHttpRequestEventTarget") "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global
                               "XMLHttpRequestEventTarget") [||])
                 end and
                      XMLHttpRequestUpload:sig
                                             type t =
                                               [ `EventTarget 
                                               | `XMLHttpRequestEventTarget 
                                               | `XMLHttpRequestUpload ] intf
                                             type t_0 = t
                                             [@@@js.stop ]
                                             type tags =
                                               [ `EventTarget 
                                               | `XMLHttpRequestEventTarget 
                                               | `XMLHttpRequestUpload ]
                                             type tags_0 = tags
                                             [@@@js.start ]
                                             [@@@js.implem
                                               type tags =
                                                 [ `EventTarget 
                                                 | `XMLHttpRequestEventTarget 
                                                 | `XMLHttpRequestUpload ]
                                               type tags_0 = tags]
                                             type 'tags this =
                                               'tags intf constraint 
                                                           'tags =
                                                           [>
                                                             `XMLHttpRequestUpload
                                                               ]
                                             val t_to_js : t -> Ojs.t
                                             val t_of_js : Ojs.t -> t
                                             val t_0_to_js : t_0 -> Ojs.t
                                             val t_0_of_js : Ojs.t -> t_0
                                             val addEventListener :
                                               'tags this ->
                                                 type_:'K ->
                                                   listener:(this:t ->
                                                               ev:any -> any)
                                                     ->
                                                     ?options:AddEventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val addEventListener' :
                                               'tags this ->
                                                 type_:string ->
                                                   listener:EventListenerOrEventListenerObject.t
                                                     ->
                                                     ?options:AddEventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val removeEventListener :
                                               'tags this ->
                                                 type_:'K ->
                                                   listener:(this:t ->
                                                               ev:any -> any)
                                                     ->
                                                     ?options:EventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val removeEventListener' :
                                               'tags this ->
                                                 type_:string ->
                                                   listener:EventListenerOrEventListenerObject.t
                                                     ->
                                                     ?options:EventListenerOptions.t
                                                       or_boolean ->
                                                       unit -> unit
                                             val cast_from : 'tags this -> t
                                             val prototype : unit -> t
                                             val create : unit -> t
                                           end =
                      struct
                        type t =
                          [ `EventTarget  | `XMLHttpRequestEventTarget 
                          | `XMLHttpRequestUpload ] intf
                        let rec t_of_js : Ojs.t -> t = Obj.magic
                        and t_to_js : t -> Ojs.t = Obj.magic
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x5000 : Ojs.t) -> t_of_js x5000
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x4999 : t) -> t_to_js x4999
                        type tags =
                          [ `EventTarget  | `XMLHttpRequestEventTarget 
                          | `XMLHttpRequestUpload ]
                        type tags_0 = tags
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `XMLHttpRequestUpload ]
                        let rec this_of_js :
                          'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
                          fun (type __tags) ->
                          fun (__tags_of_js : Ojs.t -> __tags) ->
                            fun (x5003 : Ojs.t) ->
                              intf_of_js __tags_of_js x5003
                        and this_to_js :
                          'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
                          fun (type __tags) ->
                          fun (__tags_to_js : __tags -> Ojs.t) ->
                            fun (x5001 : __tags intf) ->
                              intf_to_js __tags_to_js x5001
                        let (addEventListener :
                          'tags this ->
                            type_:'K ->
                              listener:(this:t -> ev:any -> any) ->
                                ?options:AddEventListenerOptions.t or_boolean
                                  -> unit -> unit)
                          =
                          fun (x5013 : 'tags this) ->
                            fun ~type_:(x5005 : 'K) ->
                              fun ~listener:(x5006 : this:t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x5007 :
                                             AddEventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5015 = this_to_js Obj.magic x5013 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5015
                                            "addEventListener") "apply"
                                         [|x5015;((let x5008 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5008 "push"
                                                        [|(Obj.magic x5005)|]);
                                                   ignore
                                                     (Ojs.call x5008 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x5011 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x5012 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x5006
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5011)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5012))))|]);
                                                   (match x5007 with
                                                    | Some x5009 ->
                                                        ignore
                                                          (Ojs.call x5008
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  AddEventListenerOptions.t_to_js
                                                                  x5009)|])
                                                    | None -> ());
                                                   x5008))|])
                        let (addEventListener' :
                          'tags this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:AddEventListenerOptions.t or_boolean
                                  -> unit -> unit)
                          =
                          fun (x5022 : 'tags this) ->
                            fun ~type_:(x5016 : string) ->
                              fun
                                ~listener:(x5017 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x5018 :
                                             AddEventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5024 = this_to_js Obj.magic x5022 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5024
                                            "addEventListener") "apply"
                                         [|x5024;((let x5019 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5019 "push"
                                                        [|(Ojs.string_to_js
                                                             x5016)|]);
                                                   ignore
                                                     (Ojs.call x5019 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x5017)|]);
                                                   (match x5018 with
                                                    | Some x5020 ->
                                                        ignore
                                                          (Ojs.call x5019
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  AddEventListenerOptions.t_to_js
                                                                  x5020)|])
                                                    | None -> ());
                                                   x5019))|])
                        let (removeEventListener :
                          'tags this ->
                            type_:'K ->
                              listener:(this:t -> ev:any -> any) ->
                                ?options:EventListenerOptions.t or_boolean ->
                                  unit -> unit)
                          =
                          fun (x5033 : 'tags this) ->
                            fun ~type_:(x5025 : 'K) ->
                              fun ~listener:(x5026 : this:t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x5027 :
                                             EventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5035 = this_to_js Obj.magic x5033 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5035
                                            "removeEventListener") "apply"
                                         [|x5035;((let x5028 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5028 "push"
                                                        [|(Obj.magic x5025)|]);
                                                   ignore
                                                     (Ojs.call x5028 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x5031 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x5032 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x5026
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5031)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5032))))|]);
                                                   (match x5027 with
                                                    | Some x5029 ->
                                                        ignore
                                                          (Ojs.call x5028
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  EventListenerOptions.t_to_js
                                                                  x5029)|])
                                                    | None -> ());
                                                   x5028))|])
                        let (removeEventListener' :
                          'tags this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:EventListenerOptions.t or_boolean ->
                                  unit -> unit)
                          =
                          fun (x5042 : 'tags this) ->
                            fun ~type_:(x5036 : string) ->
                              fun
                                ~listener:(x5037 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x5038 :
                                             EventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5044 = this_to_js Obj.magic x5042 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5044
                                            "removeEventListener") "apply"
                                         [|x5044;((let x5039 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5039 "push"
                                                        [|(Ojs.string_to_js
                                                             x5036)|]);
                                                   ignore
                                                     (Ojs.call x5039 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x5037)|]);
                                                   (match x5038 with
                                                    | Some x5040 ->
                                                        ignore
                                                          (Ojs.call x5039
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  EventListenerOptions.t_to_js
                                                                  x5040)|])
                                                    | None -> ());
                                                   x5039))|])
                        let cast_from = Obj.magic
                        let (prototype : unit -> t) =
                          fun () ->
                            t_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "XMLHttpRequestUpload") "prototype")
                        let (create : unit -> t) =
                          fun () ->
                            t_of_js
                              (Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global
                                    "XMLHttpRequestUpload") [||])
                      end
module XMLHttpRequestEventTargetEventMap =
  struct
    type t = [ `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5046 : Ojs.t) -> t_of_js x5046
    and t_0_to_js : t_0 -> Ojs.t = fun (x5045 : t) -> t_to_js x5045
    type tags = [ `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5049 : Ojs.t) -> intf_of_js __tags_of_js x5049
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5047 : __tags intf) -> intf_to_js __tags_to_js x5047
    let (get_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5051 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5051) "abort")
    let (set_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5054 : 'tags this) ->
        fun (x5055 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5054) "abort"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5055)
    let (get_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5058 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5058) "error")
    let (set_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5061 : 'tags this) ->
        fun (x5062 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5061) "error"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5062)
    let (get_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5065 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5065) "load")
    let (set_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5068 : 'tags this) ->
        fun (x5069 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5068) "load"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5069)
    let (get_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5072 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5072) "loadend")
    let (set_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5075 : 'tags this) ->
        fun (x5076 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5075) "loadend"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5076)
    let (get_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5079 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5079) "loadstart")
    let (set_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5082 : 'tags this) ->
        fun (x5083 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5082) "loadstart"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5083)
    let (get_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5086 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5086) "progress")
    let (set_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5089 : 'tags this) ->
        fun (x5090 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5089) "progress"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5090)
    let (get_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x5093 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5093) "timeout")
    let (set_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x5096 : 'tags this) ->
        fun (x5097 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5096) "timeout"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x5097)
    let cast_from = Obj.magic
  end
module XMLHttpRequestEventMap =
  struct
    type t =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5101 : Ojs.t) -> t_of_js x5101
    and t_0_to_js : t_0 -> Ojs.t = fun (x5100 : t) -> t_to_js x5100
    type tags =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5104 : Ojs.t) -> intf_of_js __tags_of_js x5104
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5102 : __tags intf) -> intf_to_js __tags_to_js x5102
    let (get_readystatechange : 'tags this -> Event.t) =
      fun (x5106 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5106) "readystatechange")
    let (set_readystatechange : 'tags this -> Event.t -> unit) =
      fun (x5108 : 'tags this) ->
        fun (x5109 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5108) "readystatechange"
            (Event.t_to_js x5109)
    let cast_from = Obj.magic
  end
module ServiceWorkerState =
  struct
    type t =
      [ `L_s33_activated  | `L_s34_activating  | `L_s95_installed 
      | `L_s96_installing  | `L_s147_parsed  | `L_s167_redundant ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5112 : Ojs.t) ->
        let x5113 = x5112 in
        match Ojs.string_of_js x5113 with
        | "activated" -> `L_s33_activated
        | "activating" -> `L_s34_activating
        | "installed" -> `L_s95_installed
        | "installing" -> `L_s96_installing
        | "parsed" -> `L_s147_parsed
        | "redundant" -> `L_s167_redundant
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x5111 :
          [ `L_s33_activated  | `L_s34_activating  | `L_s95_installed 
          | `L_s96_installing  | `L_s147_parsed  | `L_s167_redundant ])
        ->
        match x5111 with
        | `L_s33_activated -> Ojs.string_to_js "activated"
        | `L_s34_activating -> Ojs.string_to_js "activating"
        | `L_s95_installed -> Ojs.string_to_js "installed"
        | `L_s96_installing -> Ojs.string_to_js "installing"
        | `L_s147_parsed -> Ojs.string_to_js "parsed"
        | `L_s167_redundant -> Ojs.string_to_js "redundant"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5115 : Ojs.t) -> t_of_js x5115
    and t_0_to_js : t_0 -> Ojs.t = fun (x5114 : t) -> t_to_js x5114
  end
module rec
  AnonymousInterface55:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ImageBitmap.t
                         val set_prototype : t -> ImageBitmap.t -> unit
                         val create : t -> ImageBitmap.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5117 : Ojs.t) -> x5117
    and t_to_js : t -> Ojs.t = fun (x5116 : Ojs.t) -> x5116
    let (get_prototype : t -> ImageBitmap.t) =
      fun (x5118 : t) ->
        ImageBitmap.t_of_js (Ojs.get_prop_ascii (t_to_js x5118) "prototype")
    let (set_prototype : t -> ImageBitmap.t -> unit) =
      fun (x5119 : t) ->
        fun (x5120 : ImageBitmap.t) ->
          Ojs.set_prop_ascii (t_to_js x5119) "prototype"
            (ImageBitmap.t_to_js x5120)
    let (create : t -> ImageBitmap.t) =
      fun (x5121 : t) ->
        ImageBitmap.t_of_js (Ojs.new_obj (t_to_js x5121) [||])
  end
 and
  ImageBitmap:sig
                type t = [ `ImageBitmap ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `ImageBitmap ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `ImageBitmap ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `ImageBitmap ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_height : 'tags this -> float
                val get_width : 'tags this -> float
                val close : 'tags this -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `ImageBitmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5123 : Ojs.t) -> t_of_js x5123
    and t_0_to_js : t_0 -> Ojs.t = fun (x5122 : t) -> t_to_js x5122
    type tags = [ `ImageBitmap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5126 : Ojs.t) -> intf_of_js __tags_of_js x5126
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5124 : __tags intf) -> intf_to_js __tags_to_js x5124
    let (get_height : 'tags this -> float) =
      fun (x5128 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5128) "height")
    let (get_width : 'tags this -> float) =
      fun (x5130 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5130) "width")
    let (close : 'tags this -> unit) =
      fun (x5132 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5132) "close" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ImageBitmap") [||])
  end
module PostMessageOptions =
  struct
    type t = [ `PostMessageOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5135 : Ojs.t) -> t_of_js x5135
    and t_0_to_js : t_0 -> Ojs.t = fun (x5134 : t) -> t_to_js x5134
    type tags = [ `PostMessageOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PostMessageOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5138 : Ojs.t) -> intf_of_js __tags_of_js x5138
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5136 : __tags intf) -> intf_to_js __tags_to_js x5136
    let (get_transfer : 'tags this -> any list) =
      fun (x5140 : 'tags this) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5140) "transfer")
    let (set_transfer : 'tags this -> any list -> unit) =
      fun (x5143 : 'tags this) ->
        fun (x5144 : any list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5143) "transfer"
            (Ojs.list_to_js any_to_js x5144)
    let cast_from = Obj.magic
  end
module ErrorEventInit =
  struct
    type t = [ `ErrorEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5148 : Ojs.t) -> t_of_js x5148
    and t_0_to_js : t_0 -> Ojs.t = fun (x5147 : t) -> t_to_js x5147
    type tags = [ `ErrorEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5151 : Ojs.t) -> intf_of_js __tags_of_js x5151
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5149 : __tags intf) -> intf_to_js __tags_to_js x5149
    let (get_colno : 'tags this -> float) =
      fun (x5153 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5153) "colno")
    let (set_colno : 'tags this -> float -> unit) =
      fun (x5155 : 'tags this) ->
        fun (x5156 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5155) "colno"
            (Ojs.float_to_js x5156)
    let (get_error : 'tags this -> any) =
      fun (x5158 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5158) "error")
    let (set_error : 'tags this -> any -> unit) =
      fun (x5160 : 'tags this) ->
        fun (x5161 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5160) "error"
            (any_to_js x5161)
    let (get_filename : 'tags this -> string) =
      fun (x5163 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5163) "filename")
    let (set_filename : 'tags this -> string -> unit) =
      fun (x5165 : 'tags this) ->
        fun (x5166 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5165) "filename"
            (Ojs.string_to_js x5166)
    let (get_lineno : 'tags this -> float) =
      fun (x5168 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5168) "lineno")
    let (set_lineno : 'tags this -> float -> unit) =
      fun (x5170 : 'tags this) ->
        fun (x5171 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5170) "lineno"
            (Ojs.float_to_js x5171)
    let (get_message : 'tags this -> string) =
      fun (x5173 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5173) "message")
    let (set_message : 'tags this -> string -> unit) =
      fun (x5175 : 'tags this) ->
        fun (x5176 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5175) "message"
            (Ojs.string_to_js x5176)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface27:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ErrorEvent.t
                         val set_prototype : t -> ErrorEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:ErrorEventInit.t ->
                                 unit -> ErrorEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5179 : Ojs.t) -> x5179
    and t_to_js : t -> Ojs.t = fun (x5178 : Ojs.t) -> x5178
    let (get_prototype : t -> ErrorEvent.t) =
      fun (x5180 : t) ->
        ErrorEvent.t_of_js (Ojs.get_prop_ascii (t_to_js x5180) "prototype")
    let (set_prototype : t -> ErrorEvent.t -> unit) =
      fun (x5181 : t) ->
        fun (x5182 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5181) "prototype"
            (ErrorEvent.t_to_js x5182)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:ErrorEventInit.t -> unit -> ErrorEvent.t)
      =
      fun (x5187 : t) ->
        fun ~type_:(x5183 : string) ->
          fun ?eventInitDict:(x5184 : ErrorEventInit.t option) ->
            fun () ->
              ErrorEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x5187)
                   (let x5185 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5185 "push" [|(Ojs.string_to_js x5183)|]);
                    (match x5184 with
                     | Some x5186 ->
                         ignore
                           (Ojs.call x5185 "push"
                              [|(ErrorEventInit.t_to_js x5186)|])
                     | None -> ());
                    x5185))
  end
 and
  ErrorEvent:sig
               type t = [ `ErrorEvent  | `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `ErrorEvent  | `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem
                 type tags = [ `ErrorEvent  | `Event ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `ErrorEvent ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_colno : 'tags this -> float
               val get_error : 'tags this -> any
               val get_filename : 'tags this -> string
               val get_lineno : 'tags this -> float
               val get_message : 'tags this -> string
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t
             end =
  struct
    type t = [ `ErrorEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5189 : Ojs.t) -> t_of_js x5189
    and t_0_to_js : t_0 -> Ojs.t = fun (x5188 : t) -> t_to_js x5188
    type tags = [ `ErrorEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5192 : Ojs.t) -> intf_of_js __tags_of_js x5192
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5190 : __tags intf) -> intf_to_js __tags_to_js x5190
    let (get_colno : 'tags this -> float) =
      fun (x5194 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5194) "colno")
    let (get_error : 'tags this -> any) =
      fun (x5196 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5196) "error")
    let (get_filename : 'tags this -> string) =
      fun (x5198 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5198) "filename")
    let (get_lineno : 'tags this -> float) =
      fun (x5200 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5200) "lineno")
    let (get_message : 'tags this -> string) =
      fun (x5202 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5202) "message")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t) =
      fun ~type_:(x5204 : string) ->
        fun ?eventInitDict:(x5205 : ErrorEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
                 (let x5206 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5206 "push" [|(Ojs.string_to_js x5204)|]);
                  (match x5205 with
                   | Some x5207 ->
                       ignore
                         (Ojs.call x5206 "push"
                            [|(ErrorEventInit.t_to_js x5207)|])
                   | None -> ());
                  x5206))
  end
module AbstractWorker =
  struct
    type t = [ `AbstractWorker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5209 : Ojs.t) -> t_of_js x5209
    and t_0_to_js : t_0 -> Ojs.t = fun (x5208 : t) -> t_to_js x5208
    type tags = [ `AbstractWorker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5212 : Ojs.t) -> intf_of_js __tags_of_js x5212
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5210 : __tags intf) -> intf_to_js __tags_to_js x5210
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null) =
      fun (x5214 : 'tags this) ->
        or_null_of_js
          (fun (x5216 : Ojs.t) ->
             fun ~this:(x5217 : t) ->
               fun ~ev:(x5218 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x5216
                      [|(t_to_js x5217);(ErrorEvent.t_to_js x5218)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5214) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null -> unit) =
      fun (x5219 : 'tags this) ->
        fun (x5220 : (this:t -> ev:ErrorEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5219) "onerror"
            (or_null_to_js
               (fun (x5221 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5222 : Ojs.t) ->
                       fun (x5223 : Ojs.t) ->
                         any_to_js
                           (x5221 ~this:(t_of_js x5222)
                              ~ev:(ErrorEvent.t_of_js x5223)))) x5220)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5233 : 'tags this) ->
        fun ~type_:(x5225 : 'K) ->
          fun ~listener:(x5226 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5227 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5235 = this_to_js Obj.magic x5233 in
                   Ojs.call (Ojs.get_prop_ascii x5235 "addEventListener")
                     "apply"
                     [|x5235;((let x5228 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5228 "push" [|(Obj.magic x5225)|]);
                               ignore
                                 (Ojs.call x5228 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5231 : Ojs.t) ->
                                            fun (x5232 : Ojs.t) ->
                                              any_to_js
                                                (x5226 ~this:(t_of_js x5231)
                                                   ~ev:(any_of_js x5232))))|]);
                               (match x5227 with
                                | Some x5229 ->
                                    ignore
                                      (Ojs.call x5228 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5229)|])
                                | None -> ());
                               x5228))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5242 : 'tags this) ->
        fun ~type_:(x5236 : string) ->
          fun ~listener:(x5237 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5238 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5244 = this_to_js Obj.magic x5242 in
                   Ojs.call (Ojs.get_prop_ascii x5244 "addEventListener")
                     "apply"
                     [|x5244;((let x5239 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5239 "push"
                                    [|(Ojs.string_to_js x5236)|]);
                               ignore
                                 (Ojs.call x5239 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5237)|]);
                               (match x5238 with
                                | Some x5240 ->
                                    ignore
                                      (Ojs.call x5239 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5240)|])
                                | None -> ());
                               x5239))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5253 : 'tags this) ->
        fun ~type_:(x5245 : 'K) ->
          fun ~listener:(x5246 : this:t -> ev:any -> any) ->
            fun ?options:(x5247 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5255 = this_to_js Obj.magic x5253 in
                   Ojs.call (Ojs.get_prop_ascii x5255 "removeEventListener")
                     "apply"
                     [|x5255;((let x5248 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5248 "push" [|(Obj.magic x5245)|]);
                               ignore
                                 (Ojs.call x5248 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5251 : Ojs.t) ->
                                            fun (x5252 : Ojs.t) ->
                                              any_to_js
                                                (x5246 ~this:(t_of_js x5251)
                                                   ~ev:(any_of_js x5252))))|]);
                               (match x5247 with
                                | Some x5249 ->
                                    ignore
                                      (Ojs.call x5248 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5249)|])
                                | None -> ());
                               x5248))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5262 : 'tags this) ->
        fun ~type_:(x5256 : string) ->
          fun ~listener:(x5257 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x5258 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5264 = this_to_js Obj.magic x5262 in
                   Ojs.call (Ojs.get_prop_ascii x5264 "removeEventListener")
                     "apply"
                     [|x5264;((let x5259 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5259 "push"
                                    [|(Ojs.string_to_js x5256)|]);
                               ignore
                                 (Ojs.call x5259 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5257)|]);
                               (match x5258 with
                                | Some x5260 ->
                                    ignore
                                      (Ojs.call x5259 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5260)|])
                                | None -> ());
                               x5259))|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface63:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> MessageEvent.t_0
                         val set_prototype : t -> MessageEvent.t_0 -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:'T MessageEventInit.t ->
                                 unit -> 'T MessageEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5266 : Ojs.t) -> x5266
    and t_to_js : t -> Ojs.t = fun (x5265 : Ojs.t) -> x5265
    let (get_prototype : t -> MessageEvent.t_0) =
      fun (x5267 : t) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x5267) "prototype")
    let (set_prototype : t -> MessageEvent.t_0 -> unit) =
      fun (x5268 : t) ->
        fun (x5269 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (t_to_js x5268) "prototype"
            (MessageEvent.t_0_to_js x5269)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:'T MessageEventInit.t -> unit -> 'T MessageEvent.t)
      =
      fun (x5275 : t) ->
        fun ~type_:(x5270 : string) ->
          fun ?eventInitDict:(x5271 : 'T MessageEventInit.t option) ->
            fun () ->
              MessageEvent.t_of_js Obj.magic
                (Ojs.new_obj_arr (t_to_js x5275)
                   (let x5272 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5272 "push" [|(Ojs.string_to_js x5270)|]);
                    (match x5271 with
                     | Some x5273 ->
                         ignore
                           (Ojs.call x5272 "push"
                              [|(MessageEventInit.t_to_js Obj.magic x5273)|])
                     | None -> ());
                    x5272))
  end
 and
  AnonymousInterface64:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> MessagePort.t
                         val set_prototype : t -> MessagePort.t -> unit
                         val create : t -> MessagePort.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5278 : Ojs.t) -> x5278
    and t_to_js : t -> Ojs.t = fun (x5277 : Ojs.t) -> x5277
    let (get_prototype : t -> MessagePort.t) =
      fun (x5279 : t) ->
        MessagePort.t_of_js (Ojs.get_prop_ascii (t_to_js x5279) "prototype")
    let (set_prototype : t -> MessagePort.t -> unit) =
      fun (x5280 : t) ->
        fun (x5281 : MessagePort.t) ->
          Ojs.set_prop_ascii (t_to_js x5280) "prototype"
            (MessagePort.t_to_js x5281)
    let (create : t -> MessagePort.t) =
      fun (x5282 : t) ->
        MessagePort.t_of_js (Ojs.new_obj (t_to_js x5282) [||])
  end and
       AnonymousInterface94:sig
                              type t = private Ojs.t
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val get_prototype : t -> ServiceWorker.t
                              val set_prototype :
                                t -> ServiceWorker.t -> unit
                              val create : t -> ServiceWorker.t
                            end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x5284 : Ojs.t) -> x5284
         and t_to_js : t -> Ojs.t = fun (x5283 : Ojs.t) -> x5283
         let (get_prototype : t -> ServiceWorker.t) =
           fun (x5285 : t) ->
             ServiceWorker.t_of_js
               (Ojs.get_prop_ascii (t_to_js x5285) "prototype")
         let (set_prototype : t -> ServiceWorker.t -> unit) =
           fun (x5286 : t) ->
             fun (x5287 : ServiceWorker.t) ->
               Ojs.set_prop_ascii (t_to_js x5286) "prototype"
                 (ServiceWorker.t_to_js x5287)
         let (create : t -> ServiceWorker.t) =
           fun (x5288 : t) ->
             ServiceWorker.t_of_js (Ojs.new_obj (t_to_js x5288) [||])
       end and
            MessageEvent:sig
                           type 'T t = [ `Event  | `MessageEvent of 'T ] intf
                           type 'T t_1 = 'T t
                           type t_0 = any t
                           [@@@js.stop ]
                           type 'T tags = [ `Event  | `MessageEvent of 'T ]
                           type 'T tags_1 = 'T tags
                           type tags_0 = any tags
                           [@@@js.start ]
                           [@@@js.implem
                             type 'T tags = [ `Event  | `MessageEvent of 'T ]
                             type 'T tags_1 = 'T tags
                             type tags_0 = any tags]
                           type ('tags, 'T) this =
                             'tags intf constraint 'tags =
                                         [> `MessageEvent of 'T ]
                           val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                           val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                           val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                           val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val get_data : ('tags, 'T) this -> 'T
                           val get_lastEventId : ('tags, 'T) this -> string
                           val get_origin : ('tags, 'T) this -> string
                           val get_ports :
                             ('tags, 'T) this -> MessagePort.t list
                           val get_source :
                             ('tags, 'T) this -> MessageEventSource.t or_null
                           val initMessageEvent :
                             ('tags, 'T) this ->
                               type_:string ->
                                 ?bubbles:bool ->
                                   ?cancelable:bool ->
                                     ?data:any ->
                                       ?origin:string ->
                                         ?lastEventId:string ->
                                           ?source:MessageEventSource.t
                                             or_null ->
                                             ?ports:MessagePort.t list ->
                                               unit -> unit
                           val initMessageEvent' :
                             ('tags, 'T) this ->
                               type_:string ->
                                 ?bubbles:bool ->
                                   ?cancelable:bool ->
                                     ?data:any ->
                                       ?origin:string ->
                                         ?lastEventId:string ->
                                           ?source:MessageEventSource.t
                                             or_null ->
                                             ?ports:MessagePort.t
                                               Iterable.t_1 -> unit -> unit
                           val cast_from : ('tags, 'T) this -> 'T t
                           val prototype : unit -> t_0
                           val create :
                             type_:string ->
                               ?eventInitDict:'T MessageEventInit.t ->
                                 unit -> 'T t
                         end =
            struct
              type 'T t = [ `Event  | `MessageEvent of 'T ] intf
              let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
                fun _T -> Obj.magic
              and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                fun _T -> Obj.magic
              type 'T t_1 = 'T t
              let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun
                (type __T) ->
                fun (__T_of_js : Ojs.t -> __T) ->
                  fun (x5291 : Ojs.t) -> t_of_js __T_of_js x5291
              and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun
                (type __T) ->
                fun (__T_to_js : __T -> Ojs.t) ->
                  fun (x5289 : __T t) -> t_to_js __T_to_js x5289
              type t_0 = any t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x5295 : Ojs.t) -> t_of_js any_of_js x5295
              and t_0_to_js : t_0 -> Ojs.t =
                fun (x5293 : any t) -> t_to_js any_to_js x5293
              type 'T tags = [ `Event  | `MessageEvent of 'T ]
              type 'T tags_1 = 'T tags
              type tags_0 = any tags
              type ('tags, 'T) this =
                'tags intf constraint 'tags = [> `MessageEvent of 'T ]
              let rec this_of_js :
                'tags 'T .
                  (Ojs.t -> 'tags) ->
                    (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                = fun (type __tags) -> fun (type __T) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (__T_of_js : Ojs.t -> __T) ->
                    fun (x5299 : Ojs.t) -> intf_of_js __tags_of_js x5299
              and this_to_js :
                'tags 'T .
                  ('tags -> Ojs.t) ->
                    ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                = fun (type __tags) -> fun (type __T) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (__T_to_js : __T -> Ojs.t) ->
                    fun (x5297 : __tags intf) ->
                      intf_to_js __tags_to_js x5297
              let (get_data : ('tags, 'T) this -> 'T) =
                fun (x5301 : ('tags, 'T) this) ->
                  Obj.magic
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5301) "data")
              let (get_lastEventId : ('tags, 'T) this -> string) =
                fun (x5304 : ('tags, 'T) this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5304) "lastEventId")
              let (get_origin : ('tags, 'T) this -> string) =
                fun (x5307 : ('tags, 'T) this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5307) "origin")
              let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
                fun (x5310 : ('tags, 'T) this) ->
                  Ojs.list_of_js MessagePort.t_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5310) "ports")
              let (get_source :
                ('tags, 'T) this -> MessageEventSource.t or_null) =
                fun (x5314 : ('tags, 'T) this) ->
                  or_null_of_js MessageEventSource.t_of_js
                    (Ojs.get_prop_ascii
                       (this_to_js Obj.magic Obj.magic x5314) "source")
              let (initMessageEvent :
                ('tags, 'T) this ->
                  type_:string ->
                    ?bubbles:bool ->
                      ?cancelable:bool ->
                        ?data:any ->
                          ?origin:string ->
                            ?lastEventId:string ->
                              ?source:MessageEventSource.t or_null ->
                                ?ports:MessagePort.t list -> unit -> unit)
                =
                fun (x5336 : ('tags, 'T) this) ->
                  fun ~type_:(x5318 : string) ->
                    fun ?bubbles:(x5319 : bool option) ->
                      fun ?cancelable:(x5320 : bool option) ->
                        fun ?data:(x5321 : any option) ->
                          fun ?origin:(x5322 : string option) ->
                            fun ?lastEventId:(x5323 : string option) ->
                              fun
                                ?source:(x5324 :
                                          MessageEventSource.t or_null option)
                                ->
                                fun
                                  ?ports:(x5325 : MessagePort.t list option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5339 =
                                         this_to_js Obj.magic Obj.magic x5336 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5339
                                            "initMessageEvent") "apply"
                                         [|x5339;((let x5326 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5326 "push"
                                                        [|(Ojs.string_to_js
                                                             x5318)|]);
                                                   (match x5319 with
                                                    | Some x5335 ->
                                                        ignore
                                                          (Ojs.call x5326
                                                             "push"
                                                             [|(Ojs.bool_to_js
                                                                  x5335)|])
                                                    | None -> ());
                                                   (match x5320 with
                                                    | Some x5334 ->
                                                        ignore
                                                          (Ojs.call x5326
                                                             "push"
                                                             [|(Ojs.bool_to_js
                                                                  x5334)|])
                                                    | None -> ());
                                                   (match x5321 with
                                                    | Some x5333 ->
                                                        ignore
                                                          (Ojs.call x5326
                                                             "push"
                                                             [|(any_to_js
                                                                  x5333)|])
                                                    | None -> ());
                                                   (match x5322 with
                                                    | Some x5332 ->
                                                        ignore
                                                          (Ojs.call x5326
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5332)|])
                                                    | None -> ());
                                                   (match x5323 with
                                                    | Some x5331 ->
                                                        ignore
                                                          (Ojs.call x5326
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5331)|])
                                                    | None -> ());
                                                   (match x5324 with
                                                    | Some x5329 ->
                                                        ignore
                                                          (Ojs.call x5326
                                                             "push"
                                                             [|(or_null_to_js
                                                                  MessageEventSource.t_to_js
                                                                  x5329)|])
                                                    | None -> ());
                                                   (match x5325 with
                                                    | Some x5327 ->
                                                        ignore
                                                          (Ojs.call x5326
                                                             "push"
                                                             [|(Ojs.list_to_js
                                                                  MessagePort.t_to_js
                                                                  x5327)|])
                                                    | None -> ());
                                                   x5326))|])
              let (initMessageEvent' :
                ('tags, 'T) this ->
                  type_:string ->
                    ?bubbles:bool ->
                      ?cancelable:bool ->
                        ?data:any ->
                          ?origin:string ->
                            ?lastEventId:string ->
                              ?source:MessageEventSource.t or_null ->
                                ?ports:MessagePort.t Iterable.t_1 ->
                                  unit -> unit)
                =
                fun (x5358 : ('tags, 'T) this) ->
                  fun ~type_:(x5340 : string) ->
                    fun ?bubbles:(x5341 : bool option) ->
                      fun ?cancelable:(x5342 : bool option) ->
                        fun ?data:(x5343 : any option) ->
                          fun ?origin:(x5344 : string option) ->
                            fun ?lastEventId:(x5345 : string option) ->
                              fun
                                ?source:(x5346 :
                                          MessageEventSource.t or_null option)
                                ->
                                fun
                                  ?ports:(x5347 :
                                           MessagePort.t Iterable.t_1 option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x5361 =
                                         this_to_js Obj.magic Obj.magic x5358 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x5361
                                            "initMessageEvent") "apply"
                                         [|x5361;((let x5348 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x5348 "push"
                                                        [|(Ojs.string_to_js
                                                             x5340)|]);
                                                   (match x5341 with
                                                    | Some x5357 ->
                                                        ignore
                                                          (Ojs.call x5348
                                                             "push"
                                                             [|(Ojs.bool_to_js
                                                                  x5357)|])
                                                    | None -> ());
                                                   (match x5342 with
                                                    | Some x5356 ->
                                                        ignore
                                                          (Ojs.call x5348
                                                             "push"
                                                             [|(Ojs.bool_to_js
                                                                  x5356)|])
                                                    | None -> ());
                                                   (match x5343 with
                                                    | Some x5355 ->
                                                        ignore
                                                          (Ojs.call x5348
                                                             "push"
                                                             [|(any_to_js
                                                                  x5355)|])
                                                    | None -> ());
                                                   (match x5344 with
                                                    | Some x5354 ->
                                                        ignore
                                                          (Ojs.call x5348
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5354)|])
                                                    | None -> ());
                                                   (match x5345 with
                                                    | Some x5353 ->
                                                        ignore
                                                          (Ojs.call x5348
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5353)|])
                                                    | None -> ());
                                                   (match x5346 with
                                                    | Some x5351 ->
                                                        ignore
                                                          (Ojs.call x5348
                                                             "push"
                                                             [|(or_null_to_js
                                                                  MessageEventSource.t_to_js
                                                                  x5351)|])
                                                    | None -> ());
                                                   (match x5347 with
                                                    | Some x5349 ->
                                                        ignore
                                                          (Ojs.call x5348
                                                             "push"
                                                             [|(Iterable.t_1_to_js
                                                                  MessagePort.t_to_js
                                                                  x5349)|])
                                                    | None -> ());
                                                   x5348))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t_0) =
                fun () ->
                  t_0_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                       "prototype")
              let (create :
                type_:string ->
                  ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t)
                =
                fun ~type_:(x5362 : string) ->
                  fun ?eventInitDict:(x5363 : 'T MessageEventInit.t option)
                    ->
                    fun () ->
                      t_of_js Obj.magic
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                           (let x5364 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x5364 "push"
                                 [|(Ojs.string_to_js x5362)|]);
                            (match x5363 with
                             | Some x5365 ->
                                 ignore
                                   (Ojs.call x5364 "push"
                                      [|(MessageEventInit.t_to_js Obj.magic
                                           x5365)|])
                             | None -> ());
                            x5364))
            end and
                 MessageEventInit:sig
                                    type 'T t =
                                      [ `EventInit 
                                      | `MessageEventInit of 'T ] intf
                                    type 'T t_1 = 'T t
                                    type t_0 = any t
                                    [@@@js.stop ]
                                    type 'T tags =
                                      [ `EventInit 
                                      | `MessageEventInit of 'T ]
                                    type 'T tags_1 = 'T tags
                                    type tags_0 = any tags
                                    [@@@js.start ]
                                    [@@@js.implem
                                      type 'T tags =
                                        [ `EventInit 
                                        | `MessageEventInit of 'T ]
                                      type 'T tags_1 = 'T tags
                                      type tags_0 = any tags]
                                    type ('tags, 'T) this =
                                      'tags intf constraint 'tags =
                                                  [>
                                                    `MessageEventInit of 'T ]
                                    val t_to_js :
                                      ('T -> Ojs.t) -> 'T t -> Ojs.t
                                    val t_of_js :
                                      (Ojs.t -> 'T) -> Ojs.t -> 'T t
                                    val t_1_to_js :
                                      ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                                    val t_1_of_js :
                                      (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                                    val t_0_to_js : t_0 -> Ojs.t
                                    val t_0_of_js : Ojs.t -> t_0
                                    val get_data : ('tags, 'T) this -> 'T
                                    val set_data :
                                      ('tags, 'T) this -> 'T -> unit
                                    val get_lastEventId :
                                      ('tags, 'T) this -> string
                                    val set_lastEventId :
                                      ('tags, 'T) this -> string -> unit
                                    val get_origin :
                                      ('tags, 'T) this -> string
                                    val set_origin :
                                      ('tags, 'T) this -> string -> unit
                                    val get_ports :
                                      ('tags, 'T) this -> MessagePort.t list
                                    val set_ports :
                                      ('tags, 'T) this ->
                                        MessagePort.t list -> unit
                                    val get_source :
                                      ('tags, 'T) this ->
                                        MessageEventSource.t or_null
                                    val set_source :
                                      ('tags, 'T) this ->
                                        MessageEventSource.t or_null -> unit
                                    val cast_from : ('tags, 'T) this -> 'T t
                                  end =
                 struct
                   type 'T t = [ `EventInit  | `MessageEventInit of 'T ] intf
                   let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
                     fun _T -> Obj.magic
                   and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                     fun _T -> Obj.magic
                   type 'T t_1 = 'T t
                   let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                     = fun (type __T) ->
                     fun (__T_of_js : Ojs.t -> __T) ->
                       fun (x5370 : Ojs.t) -> t_of_js __T_of_js x5370
                   and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t =
                     fun (type __T) ->
                     fun (__T_to_js : __T -> Ojs.t) ->
                       fun (x5368 : __T t) -> t_to_js __T_to_js x5368
                   type t_0 = any t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x5374 : Ojs.t) -> t_of_js any_of_js x5374
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x5372 : any t) -> t_to_js any_to_js x5372
                   type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
                   type 'T tags_1 = 'T tags
                   type tags_0 = any tags
                   type ('tags, 'T) this =
                     'tags intf constraint 'tags =
                                 [> `MessageEventInit of 'T ]
                   let rec this_of_js :
                     'tags 'T .
                       (Ojs.t -> 'tags) ->
                         (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                     = fun (type __tags) -> fun (type __T) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (__T_of_js : Ojs.t -> __T) ->
                         fun (x5378 : Ojs.t) -> intf_of_js __tags_of_js x5378
                   and this_to_js :
                     'tags 'T .
                       ('tags -> Ojs.t) ->
                         ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                     = fun (type __tags) -> fun (type __T) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (__T_to_js : __T -> Ojs.t) ->
                         fun (x5376 : __tags intf) ->
                           intf_to_js __tags_to_js x5376
                   let (get_data : ('tags, 'T) this -> 'T) =
                     fun (x5380 : ('tags, 'T) this) ->
                       Obj.magic
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5380) "data")
                   let (set_data : ('tags, 'T) this -> 'T -> unit) =
                     fun (x5383 : ('tags, 'T) this) ->
                       fun (x5384 : 'T) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5383) "data"
                           (Obj.magic x5384)
                   let (get_lastEventId : ('tags, 'T) this -> string) =
                     fun (x5387 : ('tags, 'T) this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5387)
                            "lastEventId")
                   let (set_lastEventId : ('tags, 'T) this -> string -> unit)
                     =
                     fun (x5390 : ('tags, 'T) this) ->
                       fun (x5391 : string) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5390)
                           "lastEventId" (Ojs.string_to_js x5391)
                   let (get_origin : ('tags, 'T) this -> string) =
                     fun (x5394 : ('tags, 'T) this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5394) "origin")
                   let (set_origin : ('tags, 'T) this -> string -> unit) =
                     fun (x5397 : ('tags, 'T) this) ->
                       fun (x5398 : string) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5397) "origin"
                           (Ojs.string_to_js x5398)
                   let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
                     fun (x5401 : ('tags, 'T) this) ->
                       Ojs.list_of_js MessagePort.t_of_js
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5401) "ports")
                   let (set_ports :
                     ('tags, 'T) this -> MessagePort.t list -> unit) =
                     fun (x5405 : ('tags, 'T) this) ->
                       fun (x5406 : MessagePort.t list) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5405) "ports"
                           (Ojs.list_to_js MessagePort.t_to_js x5406)
                   let (get_source :
                     ('tags, 'T) this -> MessageEventSource.t or_null) =
                     fun (x5410 : ('tags, 'T) this) ->
                       or_null_of_js MessageEventSource.t_of_js
                         (Ojs.get_prop_ascii
                            (this_to_js Obj.magic Obj.magic x5410) "source")
                   let (set_source :
                     ('tags, 'T) this -> MessageEventSource.t or_null -> unit)
                     =
                     fun (x5414 : ('tags, 'T) this) ->
                       fun (x5415 : MessageEventSource.t or_null) ->
                         Ojs.set_prop_ascii
                           (this_to_js Obj.magic Obj.magic x5414) "source"
                           (or_null_to_js MessageEventSource.t_to_js x5415)
                   let cast_from = Obj.magic
                 end and
                      MessageEventSource:sig
                                           type t =
                                             (MessagePort.t, ServiceWorker.t)
                                               union2
                                           type t_0 = t
                                           val t_to_js : t -> Ojs.t
                                           val t_of_js : Ojs.t -> t
                                           val t_0_to_js : t_0 -> Ojs.t
                                           val t_0_of_js : Ojs.t -> t_0
                                         end =
                      struct
                        type t = (MessagePort.t, ServiceWorker.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x5422 : Ojs.t) ->
                            union2_of_js MessagePort.t_of_js
                              ServiceWorker.t_of_js x5422
                        and t_to_js : t -> Ojs.t =
                          fun
                            (x5419 : (MessagePort.t, ServiceWorker.t) union2)
                            ->
                            union2_to_js MessagePort.t_to_js
                              ServiceWorker.t_to_js x5419
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x5426 : Ojs.t) -> t_of_js x5426
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x5425 : t) -> t_to_js x5425
                      end and
                           MessagePort:sig
                                         type t =
                                           [ `EventTarget  | `MessagePort ]
                                             intf
                                         type t_0 = t
                                         [@@@js.stop ]
                                         type tags =
                                           [ `EventTarget  | `MessagePort ]
                                         type tags_0 = tags
                                         [@@@js.start ]
                                         [@@@js.implem
                                           type tags =
                                             [ `EventTarget  | `MessagePort ]
                                           type tags_0 = tags]
                                         type 'tags this =
                                           'tags intf constraint 'tags =
                                                       [> `MessagePort ]
                                         val t_to_js : t -> Ojs.t
                                         val t_of_js : Ojs.t -> t
                                         val t_0_to_js : t_0 -> Ojs.t
                                         val t_0_of_js : Ojs.t -> t_0
                                         val get_onmessage :
                                           'tags this ->
                                             (this:t ->
                                                ev:MessageEvent.t_0 -> any)
                                               or_null
                                         val set_onmessage :
                                           'tags this ->
                                             (this:t ->
                                                ev:MessageEvent.t_0 -> any)
                                               or_null -> unit
                                         val get_onmessageerror :
                                           'tags this ->
                                             (this:t ->
                                                ev:MessageEvent.t_0 -> any)
                                               or_null
                                         val set_onmessageerror :
                                           'tags this ->
                                             (this:t ->
                                                ev:MessageEvent.t_0 -> any)
                                               or_null -> unit
                                         val close : 'tags this -> unit
                                         val postMessage :
                                           'tags this ->
                                             message:any ->
                                               transfer:Transferable.t list
                                                 -> unit
                                         val postMessage' :
                                           'tags this ->
                                             message:any ->
                                               ?options:PostMessageOptions.t
                                                 -> unit -> unit
                                         val start : 'tags this -> unit
                                         val addEventListener :
                                           'tags this ->
                                             type_:'K ->
                                               listener:(this:t ->
                                                           ev:any -> any)
                                                 ->
                                                 ?options:AddEventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val addEventListener' :
                                           'tags this ->
                                             type_:string ->
                                               listener:EventListenerOrEventListenerObject.t
                                                 ->
                                                 ?options:AddEventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val removeEventListener :
                                           'tags this ->
                                             type_:'K ->
                                               listener:(this:t ->
                                                           ev:any -> any)
                                                 ->
                                                 ?options:EventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val removeEventListener' :
                                           'tags this ->
                                             type_:string ->
                                               listener:EventListenerOrEventListenerObject.t
                                                 ->
                                                 ?options:EventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val cast_from : 'tags this -> t
                                         val prototype : unit -> t
                                         val create : unit -> t
                                       end =
                           struct
                             type t = [ `EventTarget  | `MessagePort ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x5428 : Ojs.t) -> t_of_js x5428
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x5427 : t) -> t_to_js x5427
                             type tags = [ `EventTarget  | `MessagePort ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `MessagePort ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x5431 : Ojs.t) ->
                                   intf_of_js __tags_of_js x5431
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x5429 : __tags intf) ->
                                   intf_to_js __tags_to_js x5429
                             let (get_onmessage :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null)
                               =
                               fun (x5433 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x5435 : Ojs.t) ->
                                      fun ~this:(x5436 : t) ->
                                        fun ~ev:(x5437 : MessageEvent.t_0) ->
                                          any_of_js
                                            (Ojs.apply x5435
                                               [|(t_to_js x5436);(MessageEvent.t_0_to_js
                                                                    x5437)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x5433)
                                      "onmessage")
                             let (set_onmessage :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null -> unit)
                               =
                               fun (x5438 : 'tags this) ->
                                 fun
                                   (x5439 :
                                     (this:t -> ev:MessageEvent.t_0 -> any)
                                       or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x5438) "onmessage"
                                     (or_null_to_js
                                        (fun
                                           (x5440 :
                                             this:t ->
                                               ev:MessageEvent.t_0 -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x5441 : Ojs.t) ->
                                                fun (x5442 : Ojs.t) ->
                                                  any_to_js
                                                    (x5440
                                                       ~this:(t_of_js x5441)
                                                       ~ev:(MessageEvent.t_0_of_js
                                                              x5442)))) x5439)
                             let (get_onmessageerror :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null)
                               =
                               fun (x5444 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x5446 : Ojs.t) ->
                                      fun ~this:(x5447 : t) ->
                                        fun ~ev:(x5448 : MessageEvent.t_0) ->
                                          any_of_js
                                            (Ojs.apply x5446
                                               [|(t_to_js x5447);(MessageEvent.t_0_to_js
                                                                    x5448)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x5444)
                                      "onmessageerror")
                             let (set_onmessageerror :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null -> unit)
                               =
                               fun (x5449 : 'tags this) ->
                                 fun
                                   (x5450 :
                                     (this:t -> ev:MessageEvent.t_0 -> any)
                                       or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x5449)
                                     "onmessageerror"
                                     (or_null_to_js
                                        (fun
                                           (x5451 :
                                             this:t ->
                                               ev:MessageEvent.t_0 -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x5452 : Ojs.t) ->
                                                fun (x5453 : Ojs.t) ->
                                                  any_to_js
                                                    (x5451
                                                       ~this:(t_of_js x5452)
                                                       ~ev:(MessageEvent.t_0_of_js
                                                              x5453)))) x5450)
                             let (close : 'tags this -> unit) =
                               fun (x5455 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x5455)
                                      "close" [||])
                             let (postMessage :
                               'tags this ->
                                 message:any ->
                                   transfer:Transferable.t list -> unit)
                               =
                               fun (x5460 : 'tags this) ->
                                 fun ~message:(x5457 : any) ->
                                   fun
                                     ~transfer:(x5458 : Transferable.t list)
                                     ->
                                     ignore
                                       (Ojs.call (this_to_js Obj.magic x5460)
                                          "postMessage"
                                          [|(any_to_js x5457);(Ojs.list_to_js
                                                                 Transferable.t_to_js
                                                                 x5458)|])
                             let (postMessage' :
                               'tags this ->
                                 message:any ->
                                   ?options:PostMessageOptions.t ->
                                     unit -> unit)
                               =
                               fun (x5466 : 'tags this) ->
                                 fun ~message:(x5462 : any) ->
                                   fun
                                     ?options:(x5463 :
                                                PostMessageOptions.t option)
                                     ->
                                     fun () ->
                                       ignore
                                         (let x5468 =
                                            this_to_js Obj.magic x5466 in
                                          Ojs.call
                                            (Ojs.get_prop_ascii x5468
                                               "postMessage") "apply"
                                            [|x5468;((let x5464 =
                                                        Ojs.new_obj
                                                          (Ojs.get_prop_ascii
                                                             Ojs.global
                                                             "Array") 
                                                          [||] in
                                                      ignore
                                                        (Ojs.call x5464
                                                           "push"
                                                           [|(any_to_js x5462)|]);
                                                      (match x5463 with
                                                       | Some x5465 ->
                                                           ignore
                                                             (Ojs.call x5464
                                                                "push"
                                                                [|(PostMessageOptions.t_to_js
                                                                    x5465)|])
                                                       | None -> ());
                                                      x5464))|])
                             let (start : 'tags this -> unit) =
                               fun (x5469 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x5469)
                                      "start" [||])
                             let (addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x5479 : 'tags this) ->
                                 fun ~type_:(x5471 : 'K) ->
                                   fun
                                     ~listener:(x5472 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x5473 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x5481 =
                                              this_to_js Obj.magic x5479 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x5481
                                                 "addEventListener") "apply"
                                              [|x5481;((let x5474 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x5474
                                                             "push"
                                                             [|(Obj.magic
                                                                  x5471)|]);
                                                        ignore
                                                          (Ojs.call x5474
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x5477 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x5478 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x5472
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5477)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5478))))|]);
                                                        (match x5473 with
                                                         | Some x5475 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x5474
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x5475)|])
                                                         | None -> ());
                                                        x5474))|])
                             let (addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x5488 : 'tags this) ->
                                 fun ~type_:(x5482 : string) ->
                                   fun
                                     ~listener:(x5483 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x5484 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x5490 =
                                              this_to_js Obj.magic x5488 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x5490
                                                 "addEventListener") "apply"
                                              [|x5490;((let x5485 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x5485
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5482)|]);
                                                        ignore
                                                          (Ojs.call x5485
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x5483)|]);
                                                        (match x5484 with
                                                         | Some x5486 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x5485
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x5486)|])
                                                         | None -> ());
                                                        x5485))|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x5499 : 'tags this) ->
                                 fun ~type_:(x5491 : 'K) ->
                                   fun
                                     ~listener:(x5492 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x5493 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x5501 =
                                              this_to_js Obj.magic x5499 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x5501
                                                 "removeEventListener")
                                              "apply"
                                              [|x5501;((let x5494 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x5494
                                                             "push"
                                                             [|(Obj.magic
                                                                  x5491)|]);
                                                        ignore
                                                          (Ojs.call x5494
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x5497 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x5498 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x5492
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5497)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5498))))|]);
                                                        (match x5493 with
                                                         | Some x5495 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x5494
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x5495)|])
                                                         | None -> ());
                                                        x5494))|])
                             let (removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x5508 : 'tags this) ->
                                 fun ~type_:(x5502 : string) ->
                                   fun
                                     ~listener:(x5503 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x5504 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x5510 =
                                              this_to_js Obj.magic x5508 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x5510
                                                 "removeEventListener")
                                              "apply"
                                              [|x5510;((let x5505 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x5505
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x5502)|]);
                                                        ignore
                                                          (Ojs.call x5505
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x5503)|]);
                                                        (match x5504 with
                                                         | Some x5506 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x5505
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x5506)|])
                                                         | None -> ());
                                                        x5505))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "MessagePort") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "MessagePort") [||])
                           end and
                                ServiceWorker:sig
                                                type t =
                                                  [ `AbstractWorker 
                                                  | `EventTarget 
                                                  | `ServiceWorker ] intf
                                                type t_0 = t
                                                [@@@js.stop ]
                                                type tags =
                                                  [ `AbstractWorker 
                                                  | `EventTarget 
                                                  | `ServiceWorker ]
                                                type tags_0 = tags
                                                [@@@js.start ]
                                                [@@@js.implem
                                                  type tags =
                                                    [ `AbstractWorker 
                                                    | `EventTarget 
                                                    | `ServiceWorker ]
                                                  type tags_0 = tags]
                                                type 'tags this =
                                                  'tags intf constraint 
                                                              'tags =
                                                              [>
                                                                `ServiceWorker
                                                                  ]
                                                val t_to_js : t -> Ojs.t
                                                val t_of_js : Ojs.t -> t
                                                val t_0_to_js : t_0 -> Ojs.t
                                                val t_0_of_js : Ojs.t -> t_0
                                                val get_onstatechange :
                                                  'tags this ->
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null
                                                val set_onstatechange :
                                                  'tags this ->
                                                    (this:t ->
                                                       ev:Event.t -> any)
                                                      or_null -> unit
                                                val get_scriptURL :
                                                  'tags this -> string
                                                val get_state :
                                                  'tags this ->
                                                    ServiceWorkerState.t
                                                val postMessage :
                                                  'tags this ->
                                                    message:any ->
                                                      transfer:Transferable.t
                                                        list -> unit
                                                val postMessage' :
                                                  'tags this ->
                                                    message:any ->
                                                      ?options:PostMessageOptions.t
                                                        -> unit -> unit
                                                val addEventListener :
                                                  'tags this ->
                                                    type_:'K ->
                                                      listener:(this:t ->
                                                                  ev:any ->
                                                                    any)
                                                        ->
                                                        ?options:AddEventListenerOptions.t
                                                          or_boolean ->
                                                          unit -> unit
                                                val addEventListener' :
                                                  'tags this ->
                                                    type_:string ->
                                                      listener:EventListenerOrEventListenerObject.t
                                                        ->
                                                        ?options:AddEventListenerOptions.t
                                                          or_boolean ->
                                                          unit -> unit
                                                val removeEventListener :
                                                  'tags this ->
                                                    type_:'K ->
                                                      listener:(this:t ->
                                                                  ev:any ->
                                                                    any)
                                                        ->
                                                        ?options:EventListenerOptions.t
                                                          or_boolean ->
                                                          unit -> unit
                                                val removeEventListener' :
                                                  'tags this ->
                                                    type_:string ->
                                                      listener:EventListenerOrEventListenerObject.t
                                                        ->
                                                        ?options:EventListenerOptions.t
                                                          or_boolean ->
                                                          unit -> unit
                                                val cast_from :
                                                  'tags this -> t
                                                val prototype : unit -> t
                                                val create : unit -> t
                                              end =
                                struct
                                  type t =
                                    [ `AbstractWorker  | `EventTarget 
                                    | `ServiceWorker ] intf
                                  let rec t_of_js : Ojs.t -> t = Obj.magic
                                  and t_to_js : t -> Ojs.t = Obj.magic
                                  type t_0 = t
                                  let rec t_0_of_js : Ojs.t -> t_0 =
                                    fun (x5512 : Ojs.t) -> t_of_js x5512
                                  and t_0_to_js : t_0 -> Ojs.t =
                                    fun (x5511 : t) -> t_to_js x5511
                                  type tags =
                                    [ `AbstractWorker  | `EventTarget 
                                    | `ServiceWorker ]
                                  type tags_0 = tags
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `ServiceWorker ]
                                  let rec this_of_js :
                                    'tags .
                                      (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                                    = fun (type __tags) ->
                                    fun (__tags_of_js : Ojs.t -> __tags) ->
                                      fun (x5515 : Ojs.t) ->
                                        intf_of_js __tags_of_js x5515
                                  and this_to_js :
                                    'tags .
                                      ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                                    = fun (type __tags) ->
                                    fun (__tags_to_js : __tags -> Ojs.t) ->
                                      fun (x5513 : __tags intf) ->
                                        intf_to_js __tags_to_js x5513
                                  let (get_onstatechange :
                                    'tags this ->
                                      (this:t -> ev:Event.t -> any) or_null)
                                    =
                                    fun (x5517 : 'tags this) ->
                                      or_null_of_js
                                        (fun (x5519 : Ojs.t) ->
                                           fun ~this:(x5520 : t) ->
                                             fun ~ev:(x5521 : Event.t) ->
                                               any_of_js
                                                 (Ojs.apply x5519
                                                    [|(t_to_js x5520);(
                                                      Event.t_to_js x5521)|]))
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x5517)
                                           "onstatechange")
                                  let (set_onstatechange :
                                    'tags this ->
                                      (this:t -> ev:Event.t -> any) or_null
                                        -> unit)
                                    =
                                    fun (x5522 : 'tags this) ->
                                      fun
                                        (x5523 :
                                          (this:t -> ev:Event.t -> any)
                                            or_null)
                                        ->
                                        Ojs.set_prop_ascii
                                          (this_to_js Obj.magic x5522)
                                          "onstatechange"
                                          (or_null_to_js
                                             (fun
                                                (x5524 :
                                                  this:t -> ev:Event.t -> any)
                                                ->
                                                Ojs.fun_to_js 2
                                                  (fun (x5525 : Ojs.t) ->
                                                     fun (x5526 : Ojs.t) ->
                                                       any_to_js
                                                         (x5524
                                                            ~this:(t_of_js
                                                                    x5525)
                                                            ~ev:(Event.t_of_js
                                                                   x5526))))
                                             x5523)
                                  let (get_scriptURL : 'tags this -> string)
                                    =
                                    fun (x5528 : 'tags this) ->
                                      Ojs.string_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x5528)
                                           "scriptURL")
                                  let (get_state :
                                    'tags this -> ServiceWorkerState.t) =
                                    fun (x5530 : 'tags this) ->
                                      ServiceWorkerState.t_of_js
                                        (Ojs.get_prop_ascii
                                           (this_to_js Obj.magic x5530)
                                           "state")
                                  let (postMessage :
                                    'tags this ->
                                      message:any ->
                                        transfer:Transferable.t list -> unit)
                                    =
                                    fun (x5535 : 'tags this) ->
                                      fun ~message:(x5532 : any) ->
                                        fun
                                          ~transfer:(x5533 :
                                                      Transferable.t list)
                                          ->
                                          ignore
                                            (Ojs.call
                                               (this_to_js Obj.magic x5535)
                                               "postMessage"
                                               [|(any_to_js x5532);(Ojs.list_to_js
                                                                    Transferable.t_to_js
                                                                    x5533)|])
                                  let (postMessage' :
                                    'tags this ->
                                      message:any ->
                                        ?options:PostMessageOptions.t ->
                                          unit -> unit)
                                    =
                                    fun (x5541 : 'tags this) ->
                                      fun ~message:(x5537 : any) ->
                                        fun
                                          ?options:(x5538 :
                                                     PostMessageOptions.t
                                                       option)
                                          ->
                                          fun () ->
                                            ignore
                                              (let x5543 =
                                                 this_to_js Obj.magic x5541 in
                                               Ojs.call
                                                 (Ojs.get_prop_ascii x5543
                                                    "postMessage") "apply"
                                                 [|x5543;((let x5539 =
                                                             Ojs.new_obj
                                                               (Ojs.get_prop_ascii
                                                                  Ojs.global
                                                                  "Array")
                                                               [||] in
                                                           ignore
                                                             (Ojs.call x5539
                                                                "push"
                                                                [|(any_to_js
                                                                    x5537)|]);
                                                           (match x5538 with
                                                            | Some x5540 ->
                                                                ignore
                                                                  (Ojs.call
                                                                    x5539
                                                                    "push"
                                                                    [|(
                                                                    PostMessageOptions.t_to_js
                                                                    x5540)|])
                                                            | None -> ());
                                                           x5539))|])
                                  let (addEventListener :
                                    'tags this ->
                                      type_:'K ->
                                        listener:(this:t -> ev:any -> any) ->
                                          ?options:AddEventListenerOptions.t
                                            or_boolean -> unit -> unit)
                                    =
                                    fun (x5552 : 'tags this) ->
                                      fun ~type_:(x5544 : 'K) ->
                                        fun
                                          ~listener:(x5545 :
                                                      this:t -> ev:any -> any)
                                          ->
                                          fun
                                            ?options:(x5546 :
                                                       AddEventListenerOptions.t
                                                         or_boolean option)
                                            ->
                                            fun () ->
                                              ignore
                                                (let x5554 =
                                                   this_to_js Obj.magic x5552 in
                                                 Ojs.call
                                                   (Ojs.get_prop_ascii x5554
                                                      "addEventListener")
                                                   "apply"
                                                   [|x5554;((let x5547 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x5547
                                                                  "push"
                                                                  [|(
                                                                    Obj.magic
                                                                    x5544)|]);
                                                             ignore
                                                               (Ojs.call
                                                                  x5547
                                                                  "push"
                                                                  [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x5550 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x5551 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x5545
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5550)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5551))))|]);
                                                             (match x5546
                                                              with
                                                              | Some x5548 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x5547
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x5548)|])
                                                              | None -> ());
                                                             x5547))|])
                                  let (addEventListener' :
                                    'tags this ->
                                      type_:string ->
                                        listener:EventListenerOrEventListenerObject.t
                                          ->
                                          ?options:AddEventListenerOptions.t
                                            or_boolean -> unit -> unit)
                                    =
                                    fun (x5561 : 'tags this) ->
                                      fun ~type_:(x5555 : string) ->
                                        fun
                                          ~listener:(x5556 :
                                                      EventListenerOrEventListenerObject.t)
                                          ->
                                          fun
                                            ?options:(x5557 :
                                                       AddEventListenerOptions.t
                                                         or_boolean option)
                                            ->
                                            fun () ->
                                              ignore
                                                (let x5563 =
                                                   this_to_js Obj.magic x5561 in
                                                 Ojs.call
                                                   (Ojs.get_prop_ascii x5563
                                                      "addEventListener")
                                                   "apply"
                                                   [|x5563;((let x5558 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x5558
                                                                  "push"
                                                                  [|(
                                                                    Ojs.string_to_js
                                                                    x5555)|]);
                                                             ignore
                                                               (Ojs.call
                                                                  x5558
                                                                  "push"
                                                                  [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x5556)|]);
                                                             (match x5557
                                                              with
                                                              | Some x5559 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x5558
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x5559)|])
                                                              | None -> ());
                                                             x5558))|])
                                  let (removeEventListener :
                                    'tags this ->
                                      type_:'K ->
                                        listener:(this:t -> ev:any -> any) ->
                                          ?options:EventListenerOptions.t
                                            or_boolean -> unit -> unit)
                                    =
                                    fun (x5572 : 'tags this) ->
                                      fun ~type_:(x5564 : 'K) ->
                                        fun
                                          ~listener:(x5565 :
                                                      this:t -> ev:any -> any)
                                          ->
                                          fun
                                            ?options:(x5566 :
                                                       EventListenerOptions.t
                                                         or_boolean option)
                                            ->
                                            fun () ->
                                              ignore
                                                (let x5574 =
                                                   this_to_js Obj.magic x5572 in
                                                 Ojs.call
                                                   (Ojs.get_prop_ascii x5574
                                                      "removeEventListener")
                                                   "apply"
                                                   [|x5574;((let x5567 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x5567
                                                                  "push"
                                                                  [|(
                                                                    Obj.magic
                                                                    x5564)|]);
                                                             ignore
                                                               (Ojs.call
                                                                  x5567
                                                                  "push"
                                                                  [|(
                                                                    Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x5570 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x5571 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x5565
                                                                    ~this:(
                                                                    t_of_js
                                                                    x5570)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x5571))))|]);
                                                             (match x5566
                                                              with
                                                              | Some x5568 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x5567
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x5568)|])
                                                              | None -> ());
                                                             x5567))|])
                                  let (removeEventListener' :
                                    'tags this ->
                                      type_:string ->
                                        listener:EventListenerOrEventListenerObject.t
                                          ->
                                          ?options:EventListenerOptions.t
                                            or_boolean -> unit -> unit)
                                    =
                                    fun (x5581 : 'tags this) ->
                                      fun ~type_:(x5575 : string) ->
                                        fun
                                          ~listener:(x5576 :
                                                      EventListenerOrEventListenerObject.t)
                                          ->
                                          fun
                                            ?options:(x5577 :
                                                       EventListenerOptions.t
                                                         or_boolean option)
                                            ->
                                            fun () ->
                                              ignore
                                                (let x5583 =
                                                   this_to_js Obj.magic x5581 in
                                                 Ojs.call
                                                   (Ojs.get_prop_ascii x5583
                                                      "removeEventListener")
                                                   "apply"
                                                   [|x5583;((let x5578 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             ignore
                                                               (Ojs.call
                                                                  x5578
                                                                  "push"
                                                                  [|(
                                                                    Ojs.string_to_js
                                                                    x5575)|]);
                                                             ignore
                                                               (Ojs.call
                                                                  x5578
                                                                  "push"
                                                                  [|(
                                                                    EventListenerOrEventListenerObject.t_to_js
                                                                    x5576)|]);
                                                             (match x5577
                                                              with
                                                              | Some x5579 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x5578
                                                                    "push"
                                                                    [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x5579)|])
                                                              | None -> ());
                                                             x5578))|])
                                  let cast_from = Obj.magic
                                  let (prototype : unit -> t) =
                                    fun () ->
                                      t_of_js
                                        (Ojs.get_prop_ascii
                                           (Ojs.get_prop_ascii Ojs.global
                                              "ServiceWorker") "prototype")
                                  let (create : unit -> t) =
                                    fun () ->
                                      t_of_js
                                        (Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "ServiceWorker") [||])
                                end and
                                     Transferable:sig
                                                    type t =
                                                      (ArrayBuffer.t_0,
                                                        ImageBitmap.t,
                                                        MessagePort.t) union3
                                                    type t_0 = t
                                                    val t_to_js : t -> Ojs.t
                                                    val t_of_js : Ojs.t -> t
                                                    val t_0_to_js :
                                                      t_0 -> Ojs.t
                                                    val t_0_of_js :
                                                      Ojs.t -> t_0
                                                  end =
                                     struct
                                       type t =
                                         (ArrayBuffer.t_0, ImageBitmap.t,
                                           MessagePort.t) union3
                                       let rec t_of_js : Ojs.t -> t =
                                         fun (x5588 : Ojs.t) ->
                                           union3_of_js ArrayBuffer.t_0_of_js
                                             ImageBitmap.t_of_js
                                             MessagePort.t_of_js x5588
                                       and t_to_js : t -> Ojs.t =
                                         fun
                                           (x5584 :
                                             (ArrayBuffer.t_0, ImageBitmap.t,
                                               MessagePort.t) union3)
                                           ->
                                           union3_to_js ArrayBuffer.t_0_to_js
                                             ImageBitmap.t_to_js
                                             MessagePort.t_to_js x5584
                                       type t_0 = t
                                       let rec t_0_of_js : Ojs.t -> t_0 =
                                         fun (x5593 : Ojs.t) -> t_of_js x5593
                                       and t_0_to_js : t_0 -> Ojs.t =
                                         fun (x5592 : t) -> t_to_js x5592
                                     end
module AbstractWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5595 : Ojs.t) -> t_of_js x5595
    and t_0_to_js : t_0 -> Ojs.t = fun (x5594 : t) -> t_to_js x5594
    type tags = [ `AbstractWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5598 : Ojs.t) -> intf_of_js __tags_of_js x5598
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5596 : __tags intf) -> intf_to_js __tags_to_js x5596
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5600 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5600) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5602 : 'tags this) ->
        fun (x5603 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5602) "error"
            (ErrorEvent.t_to_js x5603)
    let cast_from = Obj.magic
  end
module WorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `WorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5606 : Ojs.t) -> t_of_js x5606
    and t_0_to_js : t_0 -> Ojs.t = fun (x5605 : t) -> t_to_js x5605
    type tags = [ `AbstractWorkerEventMap  | `WorkerEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5609 : Ojs.t) -> intf_of_js __tags_of_js x5609
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5607 : __tags intf) -> intf_to_js __tags_to_js x5607
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5611 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5611) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5613 : 'tags this) ->
        fun (x5614 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5613) "message"
            (MessageEvent.t_0_to_js x5614)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x5616 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5616) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5618 : 'tags this) ->
        fun (x5619 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5618) "messageerror"
            (MessageEvent.t_0_to_js x5619)
    let cast_from = Obj.magic
  end
module CloseEventInit =
  struct
    type t = [ `CloseEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5622 : Ojs.t) -> t_of_js x5622
    and t_0_to_js : t_0 -> Ojs.t = fun (x5621 : t) -> t_to_js x5621
    type tags = [ `CloseEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5625 : Ojs.t) -> intf_of_js __tags_of_js x5625
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5623 : __tags intf) -> intf_to_js __tags_to_js x5623
    let (get_code : 'tags this -> float) =
      fun (x5627 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5627) "code")
    let (set_code : 'tags this -> float -> unit) =
      fun (x5629 : 'tags this) ->
        fun (x5630 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5629) "code"
            (Ojs.float_to_js x5630)
    let (get_reason : 'tags this -> string) =
      fun (x5632 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5632) "reason")
    let (set_reason : 'tags this -> string -> unit) =
      fun (x5634 : 'tags this) ->
        fun (x5635 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5634) "reason"
            (Ojs.string_to_js x5635)
    let (get_wasClean : 'tags this -> bool) =
      fun (x5637 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5637) "wasClean")
    let (set_wasClean : 'tags this -> bool -> unit) =
      fun (x5639 : 'tags this) ->
        fun (x5640 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5639) "wasClean"
            (Ojs.bool_to_js x5640)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface11:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> CloseEvent.t
                         val set_prototype : t -> CloseEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:CloseEventInit.t ->
                                 unit -> CloseEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5643 : Ojs.t) -> x5643
    and t_to_js : t -> Ojs.t = fun (x5642 : Ojs.t) -> x5642
    let (get_prototype : t -> CloseEvent.t) =
      fun (x5644 : t) ->
        CloseEvent.t_of_js (Ojs.get_prop_ascii (t_to_js x5644) "prototype")
    let (set_prototype : t -> CloseEvent.t -> unit) =
      fun (x5645 : t) ->
        fun (x5646 : CloseEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5645) "prototype"
            (CloseEvent.t_to_js x5646)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:CloseEventInit.t -> unit -> CloseEvent.t)
      =
      fun (x5651 : t) ->
        fun ~type_:(x5647 : string) ->
          fun ?eventInitDict:(x5648 : CloseEventInit.t option) ->
            fun () ->
              CloseEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x5651)
                   (let x5649 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5649 "push" [|(Ojs.string_to_js x5647)|]);
                    (match x5648 with
                     | Some x5650 ->
                         ignore
                           (Ojs.call x5649 "push"
                              [|(CloseEventInit.t_to_js x5650)|])
                     | None -> ());
                    x5649))
  end
 and
  CloseEvent:sig
               type t = [ `CloseEvent  | `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `CloseEvent  | `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem
                 type tags = [ `CloseEvent  | `Event ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `CloseEvent ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_code : 'tags this -> float
               val get_reason : 'tags this -> string
               val get_wasClean : 'tags this -> bool
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t
             end =
  struct
    type t = [ `CloseEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5653 : Ojs.t) -> t_of_js x5653
    and t_0_to_js : t_0 -> Ojs.t = fun (x5652 : t) -> t_to_js x5652
    type tags = [ `CloseEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5656 : Ojs.t) -> intf_of_js __tags_of_js x5656
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5654 : __tags intf) -> intf_to_js __tags_to_js x5654
    let (get_code : 'tags this -> float) =
      fun (x5658 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5658) "code")
    let (get_reason : 'tags this -> string) =
      fun (x5660 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5660) "reason")
    let (get_wasClean : 'tags this -> bool) =
      fun (x5662 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5662) "wasClean")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CloseEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t) =
      fun ~type_:(x5664 : string) ->
        fun ?eventInitDict:(x5665 : CloseEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CloseEvent")
                 (let x5666 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5666 "push" [|(Ojs.string_to_js x5664)|]);
                  (match x5665 with
                   | Some x5667 ->
                       ignore
                         (Ojs.call x5666 "push"
                            [|(CloseEventInit.t_to_js x5667)|])
                   | None -> ());
                  x5666))
  end
module WebSocketEventMap =
  struct
    type t = [ `WebSocketEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5669 : Ojs.t) -> t_of_js x5669
    and t_0_to_js : t_0 -> Ojs.t = fun (x5668 : t) -> t_to_js x5668
    type tags = [ `WebSocketEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5672 : Ojs.t) -> intf_of_js __tags_of_js x5672
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5670 : __tags intf) -> intf_to_js __tags_to_js x5670
    let (get_close : 'tags this -> CloseEvent.t) =
      fun (x5674 : 'tags this) ->
        CloseEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5674) "close")
    let (set_close : 'tags this -> CloseEvent.t -> unit) =
      fun (x5676 : 'tags this) ->
        fun (x5677 : CloseEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5676) "close"
            (CloseEvent.t_to_js x5677)
    let (get_error : 'tags this -> Event.t) =
      fun (x5679 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5679) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x5681 : 'tags this) ->
        fun (x5682 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5681) "error"
            (Event.t_to_js x5682)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5684 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5684) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5686 : 'tags this) ->
        fun (x5687 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5686) "message"
            (MessageEvent.t_0_to_js x5687)
    let (get_open : 'tags this -> Event.t) =
      fun (x5689 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5689) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x5691 : 'tags this) ->
        fun (x5692 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5691) "open"
            (Event.t_to_js x5692)
    let cast_from = Obj.magic
  end
module PromiseRejectionEventInit =
  struct
    type t = [ `EventInit  | `PromiseRejectionEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5695 : Ojs.t) -> t_of_js x5695
    and t_0_to_js : t_0 -> Ojs.t = fun (x5694 : t) -> t_to_js x5694
    type tags = [ `EventInit  | `PromiseRejectionEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5698 : Ojs.t) -> intf_of_js __tags_of_js x5698
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5696 : __tags intf) -> intf_to_js __tags_to_js x5696
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x5700 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5700) "promise")
    let (set_promise : 'tags this -> any Promise.t_1 -> unit) =
      fun (x5703 : 'tags this) ->
        fun (x5704 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5703) "promise"
            (Promise.t_1_to_js any_to_js x5704)
    let (get_reason : 'tags this -> any) =
      fun (x5707 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5707) "reason")
    let (set_reason : 'tags this -> any -> unit) =
      fun (x5709 : 'tags this) ->
        fun (x5710 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5709) "reason"
            (any_to_js x5710)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface81:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PromiseRejectionEvent.t
                         val set_prototype :
                           t -> PromiseRejectionEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               eventInitDict:PromiseRejectionEventInit.t ->
                                 PromiseRejectionEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5713 : Ojs.t) -> x5713
    and t_to_js : t -> Ojs.t = fun (x5712 : Ojs.t) -> x5712
    let (get_prototype : t -> PromiseRejectionEvent.t) =
      fun (x5714 : t) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x5714) "prototype")
    let (set_prototype : t -> PromiseRejectionEvent.t -> unit) =
      fun (x5715 : t) ->
        fun (x5716 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5715) "prototype"
            (PromiseRejectionEvent.t_to_js x5716)
    let (create :
      t ->
        type_:string ->
          eventInitDict:PromiseRejectionEventInit.t ->
            PromiseRejectionEvent.t)
      =
      fun (x5719 : t) ->
        fun ~type_:(x5717 : string) ->
          fun ~eventInitDict:(x5718 : PromiseRejectionEventInit.t) ->
            PromiseRejectionEvent.t_of_js
              (Ojs.new_obj (t_to_js x5719)
                 [|(Ojs.string_to_js x5717);(PromiseRejectionEventInit.t_to_js
                                               x5718)|])
  end
 and
  PromiseRejectionEvent:sig
                          type t = [ `Event  | `PromiseRejectionEvent ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `Event  | `PromiseRejectionEvent ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `Event  | `PromiseRejectionEvent ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags =
                                        [> `PromiseRejectionEvent ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_promise : 'tags this -> any Promise.t_1
                          val get_reason : 'tags this -> any
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create :
                            type_:string ->
                              eventInitDict:PromiseRejectionEventInit.t -> t
                        end =
  struct
    type t = [ `Event  | `PromiseRejectionEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5721 : Ojs.t) -> t_of_js x5721
    and t_0_to_js : t_0 -> Ojs.t = fun (x5720 : t) -> t_to_js x5720
    type tags = [ `Event  | `PromiseRejectionEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5724 : Ojs.t) -> intf_of_js __tags_of_js x5724
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5722 : __tags intf) -> intf_to_js __tags_to_js x5722
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x5726 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5726) "promise")
    let (get_reason : 'tags this -> any) =
      fun (x5729 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5729) "reason")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
             "prototype")
    let (create :
      type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t) =
      fun ~type_:(x5731 : string) ->
        fun ~eventInitDict:(x5732 : PromiseRejectionEventInit.t) ->
          t_of_js
            (Ojs.new_obj
               (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
               [|(Ojs.string_to_js x5731);(PromiseRejectionEventInit.t_to_js
                                             x5732)|])
  end
module WorkerGlobalScopeEventMap =
  struct
    type t = [ `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5734 : Ojs.t) -> t_of_js x5734
    and t_0_to_js : t_0 -> Ojs.t = fun (x5733 : t) -> t_to_js x5733
    type tags = [ `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5737 : Ojs.t) -> intf_of_js __tags_of_js x5737
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5735 : __tags intf) -> intf_to_js __tags_to_js x5735
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5739 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5739) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5741 : 'tags this) ->
        fun (x5742 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5741) "error"
            (ErrorEvent.t_to_js x5742)
    let (get_languagechange : 'tags this -> Event.t) =
      fun (x5744 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5744) "languagechange")
    let (set_languagechange : 'tags this -> Event.t -> unit) =
      fun (x5746 : 'tags this) ->
        fun (x5747 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5746) "languagechange"
            (Event.t_to_js x5747)
    let (get_offline : 'tags this -> Event.t) =
      fun (x5749 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5749) "offline")
    let (set_offline : 'tags this -> Event.t -> unit) =
      fun (x5751 : 'tags this) ->
        fun (x5752 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5751) "offline"
            (Event.t_to_js x5752)
    let (get_online : 'tags this -> Event.t) =
      fun (x5754 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5754) "online")
    let (set_online : 'tags this -> Event.t -> unit) =
      fun (x5756 : 'tags this) ->
        fun (x5757 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5756) "online"
            (Event.t_to_js x5757)
    let (get_rejectionhandled : 'tags this -> PromiseRejectionEvent.t) =
      fun (x5759 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5759) "rejectionhandled")
    let (set_rejectionhandled :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x5761 : 'tags this) ->
        fun (x5762 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5761) "rejectionhandled"
            (PromiseRejectionEvent.t_to_js x5762)
    let (get_unhandledrejection : 'tags this -> PromiseRejectionEvent.t) =
      fun (x5764 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5764)
             "unhandledrejection")
    let (set_unhandledrejection :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x5766 : 'tags this) ->
        fun (x5767 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5766)
            "unhandledrejection" (PromiseRejectionEvent.t_to_js x5767)
    let cast_from = Obj.magic
  end
module SharedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5770 : Ojs.t) -> t_of_js x5770
    and t_0_to_js : t_0 -> Ojs.t = fun (x5769 : t) -> t_to_js x5769
    type tags =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5773 : Ojs.t) -> intf_of_js __tags_of_js x5773
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5771 : __tags intf) -> intf_to_js __tags_to_js x5771
    let (get_connect : 'tags this -> MessageEvent.t_0) =
      fun (x5775 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5775) "connect")
    let (set_connect : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5777 : 'tags this) ->
        fun (x5778 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5777) "connect"
            (MessageEvent.t_0_to_js x5778)
    let cast_from = Obj.magic
  end
module ServiceWorkerRegistrationEventMap =
  struct
    type t = [ `ServiceWorkerRegistrationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5781 : Ojs.t) -> t_of_js x5781
    and t_0_to_js : t_0 -> Ojs.t = fun (x5780 : t) -> t_to_js x5780
    type tags = [ `ServiceWorkerRegistrationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5784 : Ojs.t) -> intf_of_js __tags_of_js x5784
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5782 : __tags intf) -> intf_to_js __tags_to_js x5782
    let (get_updatefound : 'tags this -> Event.t) =
      fun (x5786 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5786) "updatefound")
    let (set_updatefound : 'tags this -> Event.t -> unit) =
      fun (x5788 : 'tags this) ->
        fun (x5789 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5788) "updatefound"
            (Event.t_to_js x5789)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface84:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushMessageData.t
                         val set_prototype : t -> PushMessageData.t -> unit
                         val create : t -> PushMessageData.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5792 : Ojs.t) -> x5792
    and t_to_js : t -> Ojs.t = fun (x5791 : Ojs.t) -> x5791
    let (get_prototype : t -> PushMessageData.t) =
      fun (x5793 : t) ->
        PushMessageData.t_of_js
          (Ojs.get_prop_ascii (t_to_js x5793) "prototype")
    let (set_prototype : t -> PushMessageData.t -> unit) =
      fun (x5794 : t) ->
        fun (x5795 : PushMessageData.t) ->
          Ojs.set_prop_ascii (t_to_js x5794) "prototype"
            (PushMessageData.t_to_js x5795)
    let (create : t -> PushMessageData.t) =
      fun (x5796 : t) ->
        PushMessageData.t_of_js (Ojs.new_obj (t_to_js x5796) [||])
  end
 and
  PushMessageData:sig
                    type t = [ `PushMessageData ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `PushMessageData ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `PushMessageData ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `PushMessageData ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val arrayBuffer : 'tags this -> ArrayBuffer.t_0
                    val blob : 'tags this -> Blob.t
                    val json : 'tags this -> any
                    val text : 'tags this -> string
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create : unit -> t
                  end =
  struct
    type t = [ `PushMessageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5798 : Ojs.t) -> t_of_js x5798
    and t_0_to_js : t_0 -> Ojs.t = fun (x5797 : t) -> t_to_js x5797
    type tags = [ `PushMessageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushMessageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5801 : Ojs.t) -> intf_of_js __tags_of_js x5801
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5799 : __tags intf) -> intf_to_js __tags_to_js x5799
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0) =
      fun (x5803 : 'tags this) ->
        ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x5803) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t) =
      fun (x5805 : 'tags this) ->
        Blob.t_of_js (Ojs.call (this_to_js Obj.magic x5805) "blob" [||])
    let (json : 'tags this -> any) =
      fun (x5807 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x5807) "json" [||])
    let (text : 'tags this -> string) =
      fun (x5809 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x5809) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushMessageData") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushMessageData") [||])
  end
module PushMessageDataInit =
  struct
    type t = BufferSource.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x5813 : Ojs.t) -> or_string_of_js BufferSource.t_of_js x5813
    and t_to_js : t -> Ojs.t =
      fun (x5811 : BufferSource.t or_string) ->
        or_string_to_js BufferSource.t_to_js x5811
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5816 : Ojs.t) -> t_of_js x5816
    and t_0_to_js : t_0 -> Ojs.t = fun (x5815 : t) -> t_to_js x5815
  end
module ExtendableEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5818 : Ojs.t) -> t_of_js x5818
    and t_0_to_js : t_0 -> Ojs.t = fun (x5817 : t) -> t_to_js x5817
    type tags = [ `EventInit  | `ExtendableEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5821 : Ojs.t) -> intf_of_js __tags_of_js x5821
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5819 : __tags intf) -> intf_to_js __tags_to_js x5819
    let cast_from = Obj.magic
  end
module PushEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5824 : Ojs.t) -> t_of_js x5824
    and t_0_to_js : t_0 -> Ojs.t = fun (x5823 : t) -> t_to_js x5823
    type tags = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5827 : Ojs.t) -> intf_of_js __tags_of_js x5827
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5825 : __tags intf) -> intf_to_js __tags_to_js x5825
    let (get_data : 'tags this -> PushMessageDataInit.t) =
      fun (x5829 : 'tags this) ->
        PushMessageDataInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5829) "data")
    let (set_data : 'tags this -> PushMessageDataInit.t -> unit) =
      fun (x5831 : 'tags this) ->
        fun (x5832 : PushMessageDataInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5831) "data"
            (PushMessageDataInit.t_to_js x5832)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface31:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ExtendableEvent.t
                         val set_prototype : t -> ExtendableEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:ExtendableEventInit.t ->
                                 unit -> ExtendableEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5835 : Ojs.t) -> x5835
    and t_to_js : t -> Ojs.t = fun (x5834 : Ojs.t) -> x5834
    let (get_prototype : t -> ExtendableEvent.t) =
      fun (x5836 : t) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x5836) "prototype")
    let (set_prototype : t -> ExtendableEvent.t -> unit) =
      fun (x5837 : t) ->
        fun (x5838 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5837) "prototype"
            (ExtendableEvent.t_to_js x5838)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:ExtendableEventInit.t -> unit -> ExtendableEvent.t)
      =
      fun (x5843 : t) ->
        fun ~type_:(x5839 : string) ->
          fun ?eventInitDict:(x5840 : ExtendableEventInit.t option) ->
            fun () ->
              ExtendableEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x5843)
                   (let x5841 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5841 "push" [|(Ojs.string_to_js x5839)|]);
                    (match x5840 with
                     | Some x5842 ->
                         ignore
                           (Ojs.call x5841 "push"
                              [|(ExtendableEventInit.t_to_js x5842)|])
                     | None -> ());
                    x5841))
  end
 and
  ExtendableEvent:sig
                    type t = [ `Event  | `ExtendableEvent ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `Event  | `ExtendableEvent ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `Event  | `ExtendableEvent ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `ExtendableEvent ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val waitUntil : 'tags this -> f:any -> unit
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create :
                      type_:string ->
                        ?eventInitDict:ExtendableEventInit.t -> unit -> t
                  end =
  struct
    type t = [ `Event  | `ExtendableEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5845 : Ojs.t) -> t_of_js x5845
    and t_0_to_js : t_0 -> Ojs.t = fun (x5844 : t) -> t_to_js x5844
    type tags = [ `Event  | `ExtendableEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5848 : Ojs.t) -> intf_of_js __tags_of_js x5848
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5846 : __tags intf) -> intf_to_js __tags_to_js x5846
    let (waitUntil : 'tags this -> f:any -> unit) =
      fun (x5851 : 'tags this) ->
        fun ~f:(x5850 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5851) "waitUntil"
               [|(any_to_js x5850)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableEvent") "prototype")
    let (create :
      type_:string -> ?eventInitDict:ExtendableEventInit.t -> unit -> t) =
      fun ~type_:(x5853 : string) ->
        fun ?eventInitDict:(x5854 : ExtendableEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
                 (let x5855 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5855 "push" [|(Ojs.string_to_js x5853)|]);
                  (match x5854 with
                   | Some x5856 ->
                       ignore
                         (Ojs.call x5855 "push"
                            [|(ExtendableEventInit.t_to_js x5856)|])
                   | None -> ());
                  x5855))
  end
module rec
  AnonymousInterface82:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushEvent.t
                         val set_prototype : t -> PushEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:PushEventInit.t ->
                                 unit -> PushEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5858 : Ojs.t) -> x5858
    and t_to_js : t -> Ojs.t = fun (x5857 : Ojs.t) -> x5857
    let (get_prototype : t -> PushEvent.t) =
      fun (x5859 : t) ->
        PushEvent.t_of_js (Ojs.get_prop_ascii (t_to_js x5859) "prototype")
    let (set_prototype : t -> PushEvent.t -> unit) =
      fun (x5860 : t) ->
        fun (x5861 : PushEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x5860) "prototype"
            (PushEvent.t_to_js x5861)
    let (create :
      t ->
        type_:string -> ?eventInitDict:PushEventInit.t -> unit -> PushEvent.t)
      =
      fun (x5866 : t) ->
        fun ~type_:(x5862 : string) ->
          fun ?eventInitDict:(x5863 : PushEventInit.t option) ->
            fun () ->
              PushEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x5866)
                   (let x5864 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5864 "push" [|(Ojs.string_to_js x5862)|]);
                    (match x5863 with
                     | Some x5865 ->
                         ignore
                           (Ojs.call x5864 "push"
                              [|(PushEventInit.t_to_js x5865)|])
                     | None -> ());
                    x5864))
  end
 and
  PushEvent:sig
              type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_data : 'tags this -> PushMessageData.t or_null
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t
            end =
  struct
    type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5868 : Ojs.t) -> t_of_js x5868
    and t_0_to_js : t_0 -> Ojs.t = fun (x5867 : t) -> t_to_js x5867
    type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5871 : Ojs.t) -> intf_of_js __tags_of_js x5871
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5869 : __tags intf) -> intf_to_js __tags_to_js x5869
    let (get_data : 'tags this -> PushMessageData.t or_null) =
      fun (x5873 : 'tags this) ->
        or_null_of_js PushMessageData.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5873) "data")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t) =
      fun ~type_:(x5876 : string) ->
        fun ?eventInitDict:(x5877 : PushEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "PushEvent")
                 (let x5878 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5878 "push" [|(Ojs.string_to_js x5876)|]);
                  (match x5877 with
                   | Some x5879 ->
                       ignore
                         (Ojs.call x5878 "push"
                            [|(PushEventInit.t_to_js x5879)|])
                   | None -> ());
                  x5878))
  end
module NotificationPermission =
  struct
    type t = [ `L_s57_default  | `L_s58_denied  | `L_s83_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5881 : Ojs.t) ->
        let x5882 = x5881 in
        match Ojs.string_of_js x5882 with
        | "default" -> `L_s57_default
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s83_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5880 : [ `L_s57_default  | `L_s58_denied  | `L_s83_granted ]) ->
        match x5880 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s83_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5884 : Ojs.t) -> t_of_js x5884
    and t_0_to_js : t_0 -> Ojs.t = fun (x5883 : t) -> t_to_js x5883
  end
module VibratePattern =
  struct
    type t = float list or_number
    let rec t_of_js : Ojs.t -> t =
      fun (x5888 : Ojs.t) ->
        or_number_of_js
          (fun (x5889 : Ojs.t) -> Ojs.list_of_js Ojs.float_of_js x5889) x5888
    and t_to_js : t -> Ojs.t =
      fun (x5885 : float list or_number) ->
        or_number_to_js
          (fun (x5886 : float list) -> Ojs.list_to_js Ojs.float_to_js x5886)
          x5885
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5892 : Ojs.t) -> t_of_js x5892
    and t_0_to_js : t_0 -> Ojs.t = fun (x5891 : t) -> t_to_js x5891
  end
module NotificationAction =
  struct
    type t = [ `NotificationAction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5894 : Ojs.t) -> t_of_js x5894
    and t_0_to_js : t_0 -> Ojs.t = fun (x5893 : t) -> t_to_js x5893
    type tags = [ `NotificationAction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationAction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5897 : Ojs.t) -> intf_of_js __tags_of_js x5897
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5895 : __tags intf) -> intf_to_js __tags_to_js x5895
    let (get_action : 'tags this -> string) =
      fun (x5899 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5899) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x5901 : 'tags this) ->
        fun (x5902 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5901) "action"
            (Ojs.string_to_js x5902)
    let (get_icon : 'tags this -> string) =
      fun (x5904 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5904) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x5906 : 'tags this) ->
        fun (x5907 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5906) "icon"
            (Ojs.string_to_js x5907)
    let (get_title : 'tags this -> string) =
      fun (x5909 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5909) "title")
    let (set_title : 'tags this -> string -> unit) =
      fun (x5911 : 'tags this) ->
        fun (x5912 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5911) "title"
            (Ojs.string_to_js x5912)
    let cast_from = Obj.magic
  end
module DOMTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5915 : Ojs.t) -> Ojs.float_of_js x5915
    and t_to_js : t -> Ojs.t = fun (x5914 : float) -> Ojs.float_to_js x5914
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5917 : Ojs.t) -> t_of_js x5917
    and t_0_to_js : t_0 -> Ojs.t = fun (x5916 : t) -> t_to_js x5916
  end
module NotificationDirection =
  struct
    type t = [ `L_s41_auto  | `L_s109_ltr  | `L_s172_rtl ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5919 : Ojs.t) ->
        let x5920 = x5919 in
        match Ojs.string_of_js x5920 with
        | "auto" -> `L_s41_auto
        | "ltr" -> `L_s109_ltr
        | "rtl" -> `L_s172_rtl
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5918 : [ `L_s41_auto  | `L_s109_ltr  | `L_s172_rtl ]) ->
        match x5918 with
        | `L_s41_auto -> Ojs.string_to_js "auto"
        | `L_s109_ltr -> Ojs.string_to_js "ltr"
        | `L_s172_rtl -> Ojs.string_to_js "rtl"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5922 : Ojs.t) -> t_of_js x5922
    and t_0_to_js : t_0 -> Ojs.t = fun (x5921 : t) -> t_to_js x5921
  end
module NotificationOptions =
  struct
    type t = [ `NotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5924 : Ojs.t) -> t_of_js x5924
    and t_0_to_js : t_0 -> Ojs.t = fun (x5923 : t) -> t_to_js x5923
    type tags = [ `NotificationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5927 : Ojs.t) -> intf_of_js __tags_of_js x5927
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5925 : __tags intf) -> intf_to_js __tags_to_js x5925
    let (get_actions : 'tags this -> NotificationAction.t list) =
      fun (x5929 : 'tags this) ->
        Ojs.list_of_js NotificationAction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5929) "actions")
    let (set_actions : 'tags this -> NotificationAction.t list -> unit) =
      fun (x5932 : 'tags this) ->
        fun (x5933 : NotificationAction.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5932) "actions"
            (Ojs.list_to_js NotificationAction.t_to_js x5933)
    let (get_badge : 'tags this -> string) =
      fun (x5936 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5936) "badge")
    let (set_badge : 'tags this -> string -> unit) =
      fun (x5938 : 'tags this) ->
        fun (x5939 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5938) "badge"
            (Ojs.string_to_js x5939)
    let (get_body : 'tags this -> string) =
      fun (x5941 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5941) "body")
    let (set_body : 'tags this -> string -> unit) =
      fun (x5943 : 'tags this) ->
        fun (x5944 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5943) "body"
            (Ojs.string_to_js x5944)
    let (get_data : 'tags this -> any) =
      fun (x5946 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5946) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x5948 : 'tags this) ->
        fun (x5949 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5948) "data"
            (any_to_js x5949)
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x5951 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5951) "dir")
    let (set_dir : 'tags this -> NotificationDirection.t -> unit) =
      fun (x5953 : 'tags this) ->
        fun (x5954 : NotificationDirection.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5953) "dir"
            (NotificationDirection.t_to_js x5954)
    let (get_icon : 'tags this -> string) =
      fun (x5956 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5956) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x5958 : 'tags this) ->
        fun (x5959 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5958) "icon"
            (Ojs.string_to_js x5959)
    let (get_image : 'tags this -> string) =
      fun (x5961 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5961) "image")
    let (set_image : 'tags this -> string -> unit) =
      fun (x5963 : 'tags this) ->
        fun (x5964 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5963) "image"
            (Ojs.string_to_js x5964)
    let (get_lang : 'tags this -> string) =
      fun (x5966 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5966) "lang")
    let (set_lang : 'tags this -> string -> unit) =
      fun (x5968 : 'tags this) ->
        fun (x5969 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5968) "lang"
            (Ojs.string_to_js x5969)
    let (get_renotify : 'tags this -> bool) =
      fun (x5971 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5971) "renotify")
    let (set_renotify : 'tags this -> bool -> unit) =
      fun (x5973 : 'tags this) ->
        fun (x5974 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5973) "renotify"
            (Ojs.bool_to_js x5974)
    let (get_requireInteraction : 'tags this -> bool) =
      fun (x5976 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5976)
             "requireInteraction")
    let (set_requireInteraction : 'tags this -> bool -> unit) =
      fun (x5978 : 'tags this) ->
        fun (x5979 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5978)
            "requireInteraction" (Ojs.bool_to_js x5979)
    let (get_silent : 'tags this -> bool) =
      fun (x5981 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5981) "silent")
    let (set_silent : 'tags this -> bool -> unit) =
      fun (x5983 : 'tags this) ->
        fun (x5984 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5983) "silent"
            (Ojs.bool_to_js x5984)
    let (get_tag : 'tags this -> string) =
      fun (x5986 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5986) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x5988 : 'tags this) ->
        fun (x5989 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5988) "tag"
            (Ojs.string_to_js x5989)
    let (get_timestamp : 'tags this -> DOMTimeStamp.t) =
      fun (x5991 : 'tags this) ->
        DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5991) "timestamp")
    let (set_timestamp : 'tags this -> DOMTimeStamp.t -> unit) =
      fun (x5993 : 'tags this) ->
        fun (x5994 : DOMTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5993) "timestamp"
            (DOMTimeStamp.t_to_js x5994)
    let (get_vibrate : 'tags this -> VibratePattern.t) =
      fun (x5996 : 'tags this) ->
        VibratePattern.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5996) "vibrate")
    let (set_vibrate : 'tags this -> VibratePattern.t -> unit) =
      fun (x5998 : 'tags this) ->
        fun (x5999 : VibratePattern.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5998) "vibrate"
            (VibratePattern.t_to_js x5999)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface67:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Notification.t
                         val set_prototype : t -> Notification.t -> unit
                         val create :
                           t ->
                             title:string ->
                               ?options:NotificationOptions.t ->
                                 unit -> Notification.t
                         val get_permission : t -> NotificationPermission.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6002 : Ojs.t) -> x6002
    and t_to_js : t -> Ojs.t = fun (x6001 : Ojs.t) -> x6001
    let (get_prototype : t -> Notification.t) =
      fun (x6003 : t) ->
        Notification.t_of_js (Ojs.get_prop_ascii (t_to_js x6003) "prototype")
    let (set_prototype : t -> Notification.t -> unit) =
      fun (x6004 : t) ->
        fun (x6005 : Notification.t) ->
          Ojs.set_prop_ascii (t_to_js x6004) "prototype"
            (Notification.t_to_js x6005)
    let (create :
      t ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> Notification.t)
      =
      fun (x6010 : t) ->
        fun ~title:(x6006 : string) ->
          fun ?options:(x6007 : NotificationOptions.t option) ->
            fun () ->
              Notification.t_of_js
                (Ojs.new_obj_arr (t_to_js x6010)
                   (let x6008 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x6008 "push" [|(Ojs.string_to_js x6006)|]);
                    (match x6007 with
                     | Some x6009 ->
                         ignore
                           (Ojs.call x6008 "push"
                              [|(NotificationOptions.t_to_js x6009)|])
                     | None -> ());
                    x6008))
    let (get_permission : t -> NotificationPermission.t) =
      fun (x6011 : t) ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (t_to_js x6011) "permission")
  end
 and
  Notification:sig
                 type t = [ `EventTarget  | `Notification ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `EventTarget  | `Notification ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `EventTarget  | `Notification ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `Notification ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_body : 'tags this -> string
                 val get_data : 'tags this -> any
                 val get_dir : 'tags this -> NotificationDirection.t
                 val get_icon : 'tags this -> string
                 val get_lang : 'tags this -> string
                 val get_onclick :
                   'tags this -> (this:t -> ev:Event.t -> any) or_null
                 val set_onclick :
                   'tags this ->
                     (this:t -> ev:Event.t -> any) or_null -> unit
                 val get_onclose :
                   'tags this -> (this:t -> ev:Event.t -> any) or_null
                 val set_onclose :
                   'tags this ->
                     (this:t -> ev:Event.t -> any) or_null -> unit
                 val get_onerror :
                   'tags this -> (this:t -> ev:Event.t -> any) or_null
                 val set_onerror :
                   'tags this ->
                     (this:t -> ev:Event.t -> any) or_null -> unit
                 val get_onshow :
                   'tags this -> (this:t -> ev:Event.t -> any) or_null
                 val set_onshow :
                   'tags this ->
                     (this:t -> ev:Event.t -> any) or_null -> unit
                 val get_tag : 'tags this -> string
                 val get_title : 'tags this -> string
                 val close : 'tags this -> unit
                 val addEventListener :
                   'tags this ->
                     type_:'K ->
                       listener:(this:t -> ev:any -> any) ->
                         ?options:AddEventListenerOptions.t or_boolean ->
                           unit -> unit
                 val addEventListener' :
                   'tags this ->
                     type_:string ->
                       listener:EventListenerOrEventListenerObject.t ->
                         ?options:AddEventListenerOptions.t or_boolean ->
                           unit -> unit
                 val removeEventListener :
                   'tags this ->
                     type_:'K ->
                       listener:(this:t -> ev:any -> any) ->
                         ?options:EventListenerOptions.t or_boolean ->
                           unit -> unit
                 val removeEventListener' :
                   'tags this ->
                     type_:string ->
                       listener:EventListenerOrEventListenerObject.t ->
                         ?options:EventListenerOptions.t or_boolean ->
                           unit -> unit
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create :
                   title:string ->
                     ?options:NotificationOptions.t -> unit -> t
                 val permission : unit -> NotificationPermission.t
               end =
  struct
    type t = [ `EventTarget  | `Notification ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6013 : Ojs.t) -> t_of_js x6013
    and t_0_to_js : t_0 -> Ojs.t = fun (x6012 : t) -> t_to_js x6012
    type tags = [ `EventTarget  | `Notification ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6016 : Ojs.t) -> intf_of_js __tags_of_js x6016
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6014 : __tags intf) -> intf_to_js __tags_to_js x6014
    let (get_body : 'tags this -> string) =
      fun (x6018 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6018) "body")
    let (get_data : 'tags this -> any) =
      fun (x6020 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x6020) "data")
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x6022 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6022) "dir")
    let (get_icon : 'tags this -> string) =
      fun (x6024 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6024) "icon")
    let (get_lang : 'tags this -> string) =
      fun (x6026 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6026) "lang")
    let (get_onclick : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x6028 : 'tags this) ->
        or_null_of_js
          (fun (x6030 : Ojs.t) ->
             fun ~this:(x6031 : t) ->
               fun ~ev:(x6032 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6030 [|(t_to_js x6031);(Event.t_to_js x6032)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6028) "onclick")
    let (set_onclick :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x6033 : 'tags this) ->
        fun (x6034 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6033) "onclick"
            (or_null_to_js
               (fun (x6035 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6036 : Ojs.t) ->
                       fun (x6037 : Ojs.t) ->
                         any_to_js
                           (x6035 ~this:(t_of_js x6036)
                              ~ev:(Event.t_of_js x6037)))) x6034)
    let (get_onclose : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x6039 : 'tags this) ->
        or_null_of_js
          (fun (x6041 : Ojs.t) ->
             fun ~this:(x6042 : t) ->
               fun ~ev:(x6043 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6041 [|(t_to_js x6042);(Event.t_to_js x6043)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6039) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x6044 : 'tags this) ->
        fun (x6045 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6044) "onclose"
            (or_null_to_js
               (fun (x6046 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6047 : Ojs.t) ->
                       fun (x6048 : Ojs.t) ->
                         any_to_js
                           (x6046 ~this:(t_of_js x6047)
                              ~ev:(Event.t_of_js x6048)))) x6045)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x6050 : 'tags this) ->
        or_null_of_js
          (fun (x6052 : Ojs.t) ->
             fun ~this:(x6053 : t) ->
               fun ~ev:(x6054 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6052 [|(t_to_js x6053);(Event.t_to_js x6054)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6050) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x6055 : 'tags this) ->
        fun (x6056 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6055) "onerror"
            (or_null_to_js
               (fun (x6057 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6058 : Ojs.t) ->
                       fun (x6059 : Ojs.t) ->
                         any_to_js
                           (x6057 ~this:(t_of_js x6058)
                              ~ev:(Event.t_of_js x6059)))) x6056)
    let (get_onshow : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x6061 : 'tags this) ->
        or_null_of_js
          (fun (x6063 : Ojs.t) ->
             fun ~this:(x6064 : t) ->
               fun ~ev:(x6065 : Event.t) ->
                 any_of_js
                   (Ojs.apply x6063 [|(t_to_js x6064);(Event.t_to_js x6065)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6061) "onshow")
    let (set_onshow :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x6066 : 'tags this) ->
        fun (x6067 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6066) "onshow"
            (or_null_to_js
               (fun (x6068 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6069 : Ojs.t) ->
                       fun (x6070 : Ojs.t) ->
                         any_to_js
                           (x6068 ~this:(t_of_js x6069)
                              ~ev:(Event.t_of_js x6070)))) x6067)
    let (get_tag : 'tags this -> string) =
      fun (x6072 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6072) "tag")
    let (get_title : 'tags this -> string) =
      fun (x6074 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6074) "title")
    let (close : 'tags this -> unit) =
      fun (x6076 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6076) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6086 : 'tags this) ->
        fun ~type_:(x6078 : 'K) ->
          fun ~listener:(x6079 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6080 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6088 = this_to_js Obj.magic x6086 in
                   Ojs.call (Ojs.get_prop_ascii x6088 "addEventListener")
                     "apply"
                     [|x6088;((let x6081 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6081 "push" [|(Obj.magic x6078)|]);
                               ignore
                                 (Ojs.call x6081 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6084 : Ojs.t) ->
                                            fun (x6085 : Ojs.t) ->
                                              any_to_js
                                                (x6079 ~this:(t_of_js x6084)
                                                   ~ev:(any_of_js x6085))))|]);
                               (match x6080 with
                                | Some x6082 ->
                                    ignore
                                      (Ojs.call x6081 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x6082)|])
                                | None -> ());
                               x6081))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6095 : 'tags this) ->
        fun ~type_:(x6089 : string) ->
          fun ~listener:(x6090 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6091 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6097 = this_to_js Obj.magic x6095 in
                   Ojs.call (Ojs.get_prop_ascii x6097 "addEventListener")
                     "apply"
                     [|x6097;((let x6092 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6092 "push"
                                    [|(Ojs.string_to_js x6089)|]);
                               ignore
                                 (Ojs.call x6092 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6090)|]);
                               (match x6091 with
                                | Some x6093 ->
                                    ignore
                                      (Ojs.call x6092 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x6093)|])
                                | None -> ());
                               x6092))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6106 : 'tags this) ->
        fun ~type_:(x6098 : 'K) ->
          fun ~listener:(x6099 : this:t -> ev:any -> any) ->
            fun ?options:(x6100 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6108 = this_to_js Obj.magic x6106 in
                   Ojs.call (Ojs.get_prop_ascii x6108 "removeEventListener")
                     "apply"
                     [|x6108;((let x6101 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6101 "push" [|(Obj.magic x6098)|]);
                               ignore
                                 (Ojs.call x6101 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6104 : Ojs.t) ->
                                            fun (x6105 : Ojs.t) ->
                                              any_to_js
                                                (x6099 ~this:(t_of_js x6104)
                                                   ~ev:(any_of_js x6105))))|]);
                               (match x6100 with
                                | Some x6102 ->
                                    ignore
                                      (Ojs.call x6101 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x6102)|])
                                | None -> ());
                               x6101))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6115 : 'tags this) ->
        fun ~type_:(x6109 : string) ->
          fun ~listener:(x6110 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x6111 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6117 = this_to_js Obj.magic x6115 in
                   Ojs.call (Ojs.get_prop_ascii x6117 "removeEventListener")
                     "apply"
                     [|x6117;((let x6112 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6112 "push"
                                    [|(Ojs.string_to_js x6109)|]);
                               ignore
                                 (Ojs.call x6112 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6110)|]);
                               (match x6111 with
                                | Some x6113 ->
                                    ignore
                                      (Ojs.call x6112 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x6113)|])
                                | None -> ());
                               x6112))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "prototype")
    let (create :
      title:string -> ?options:NotificationOptions.t -> unit -> t) =
      fun ~title:(x6118 : string) ->
        fun ?options:(x6119 : NotificationOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Notification")
                 (let x6120 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x6120 "push" [|(Ojs.string_to_js x6118)|]);
                  (match x6119 with
                   | Some x6121 ->
                       ignore
                         (Ojs.call x6120 "push"
                            [|(NotificationOptions.t_to_js x6121)|])
                   | None -> ());
                  x6120))
    let (permission : unit -> NotificationPermission.t) =
      fun () ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "permission")
  end
module NotificationEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6123 : Ojs.t) -> t_of_js x6123
    and t_0_to_js : t_0 -> Ojs.t = fun (x6122 : t) -> t_to_js x6122
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6126 : Ojs.t) -> intf_of_js __tags_of_js x6126
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6124 : __tags intf) -> intf_to_js __tags_to_js x6124
    let (get_action : 'tags this -> string) =
      fun (x6128 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6128) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x6130 : 'tags this) ->
        fun (x6131 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6130) "action"
            (Ojs.string_to_js x6131)
    let (get_notification : 'tags this -> Notification.t) =
      fun (x6133 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6133) "notification")
    let (set_notification : 'tags this -> Notification.t -> unit) =
      fun (x6135 : 'tags this) ->
        fun (x6136 : Notification.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6135) "notification"
            (Notification.t_to_js x6136)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface68:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> NotificationEvent.t
                         val set_prototype : t -> NotificationEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               eventInitDict:NotificationEventInit.t ->
                                 NotificationEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6139 : Ojs.t) -> x6139
    and t_to_js : t -> Ojs.t = fun (x6138 : Ojs.t) -> x6138
    let (get_prototype : t -> NotificationEvent.t) =
      fun (x6140 : t) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x6140) "prototype")
    let (set_prototype : t -> NotificationEvent.t -> unit) =
      fun (x6141 : t) ->
        fun (x6142 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x6141) "prototype"
            (NotificationEvent.t_to_js x6142)
    let (create :
      t ->
        type_:string ->
          eventInitDict:NotificationEventInit.t -> NotificationEvent.t)
      =
      fun (x6145 : t) ->
        fun ~type_:(x6143 : string) ->
          fun ~eventInitDict:(x6144 : NotificationEventInit.t) ->
            NotificationEvent.t_of_js
              (Ojs.new_obj (t_to_js x6145)
                 [|(Ojs.string_to_js x6143);(NotificationEventInit.t_to_js
                                               x6144)|])
  end
 and
  NotificationEvent:sig
                      type t =
                        [ `Event  | `ExtendableEvent  | `NotificationEvent ]
                          intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags =
                        [ `Event  | `ExtendableEvent  | `NotificationEvent ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags =
                          [ `Event  | `ExtendableEvent 
                          | `NotificationEvent ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `NotificationEvent ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_action : 'tags this -> string
                      val get_notification : 'tags this -> Notification.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        type_:string ->
                          eventInitDict:NotificationEventInit.t -> t
                    end =
  struct
    type t = [ `Event  | `ExtendableEvent  | `NotificationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6147 : Ojs.t) -> t_of_js x6147
    and t_0_to_js : t_0 -> Ojs.t = fun (x6146 : t) -> t_to_js x6146
    type tags = [ `Event  | `ExtendableEvent  | `NotificationEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6150 : Ojs.t) -> intf_of_js __tags_of_js x6150
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6148 : __tags intf) -> intf_to_js __tags_to_js x6148
    let (get_action : 'tags this -> string) =
      fun (x6152 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6152) "action")
    let (get_notification : 'tags this -> Notification.t) =
      fun (x6154 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6154) "notification")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NotificationEvent") "prototype")
    let (create : type_:string -> eventInitDict:NotificationEventInit.t -> t)
      =
      fun ~type_:(x6156 : string) ->
        fun ~eventInitDict:(x6157 : NotificationEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
               [|(Ojs.string_to_js x6156);(NotificationEventInit.t_to_js
                                             x6157)|])
  end
module FetchEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6159 : Ojs.t) -> t_of_js x6159
    and t_0_to_js : t_0 -> Ojs.t = fun (x6158 : t) -> t_to_js x6158
    type tags = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6162 : Ojs.t) -> intf_of_js __tags_of_js x6162
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6160 : __tags intf) -> intf_to_js __tags_to_js x6160
    let (get_clientId : 'tags this -> string) =
      fun (x6164 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6164) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x6166 : 'tags this) ->
        fun (x6167 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6166) "clientId"
            (Ojs.string_to_js x6167)
    let (get_handled : 'tags this -> never or_undefined Promise.t_1) =
      fun (x6169 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x6171 : Ojs.t) -> or_undefined_of_js never_of_js x6171)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6169) "handled")
    let (set_handled : 'tags this -> never or_undefined Promise.t_1 -> unit)
      =
      fun (x6173 : 'tags this) ->
        fun (x6174 : never or_undefined Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6173) "handled"
            (Promise.t_1_to_js
               (fun (x6175 : never or_undefined) ->
                  or_undefined_to_js never_to_js x6175) x6174)
    let (get_preloadResponse : 'tags this -> any Promise.t_1) =
      fun (x6178 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6178) "preloadResponse")
    let (set_preloadResponse : 'tags this -> any Promise.t_1 -> unit) =
      fun (x6181 : 'tags this) ->
        fun (x6182 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6181) "preloadResponse"
            (Promise.t_1_to_js any_to_js x6182)
    let (get_replacesClientId : 'tags this -> string) =
      fun (x6185 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6185) "replacesClientId")
    let (set_replacesClientId : 'tags this -> string -> unit) =
      fun (x6187 : 'tags this) ->
        fun (x6188 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6187) "replacesClientId"
            (Ojs.string_to_js x6188)
    let (get_request : 'tags this -> Request.t) =
      fun (x6190 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6190) "request")
    let (set_request : 'tags this -> Request.t -> unit) =
      fun (x6192 : 'tags this) ->
        fun (x6193 : Request.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6192) "request"
            (Request.t_to_js x6193)
    let (get_resultingClientId : 'tags this -> string) =
      fun (x6195 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6195)
             "resultingClientId")
    let (set_resultingClientId : 'tags this -> string -> unit) =
      fun (x6197 : 'tags this) ->
        fun (x6198 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6197) "resultingClientId"
            (Ojs.string_to_js x6198)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface33:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FetchEvent.t
                         val set_prototype : t -> FetchEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               eventInitDict:FetchEventInit.t -> FetchEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6201 : Ojs.t) -> x6201
    and t_to_js : t -> Ojs.t = fun (x6200 : Ojs.t) -> x6200
    let (get_prototype : t -> FetchEvent.t) =
      fun (x6202 : t) ->
        FetchEvent.t_of_js (Ojs.get_prop_ascii (t_to_js x6202) "prototype")
    let (set_prototype : t -> FetchEvent.t -> unit) =
      fun (x6203 : t) ->
        fun (x6204 : FetchEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x6203) "prototype"
            (FetchEvent.t_to_js x6204)
    let (create :
      t -> type_:string -> eventInitDict:FetchEventInit.t -> FetchEvent.t) =
      fun (x6207 : t) ->
        fun ~type_:(x6205 : string) ->
          fun ~eventInitDict:(x6206 : FetchEventInit.t) ->
            FetchEvent.t_of_js
              (Ojs.new_obj (t_to_js x6207)
                 [|(Ojs.string_to_js x6205);(FetchEventInit.t_to_js x6206)|])
  end
 and
  FetchEvent:sig
               type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem
                 type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `FetchEvent ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_clientId : 'tags this -> string
               val get_handled : 'tags this -> never or_undefined Promise.t_1
               val get_request : 'tags this -> Request.t
               val get_resultingClientId : 'tags this -> string
               val respondWith :
                 'tags this ->
                   r:(Response.t, Response.t PromiseLike.t_1) union2 -> unit
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> eventInitDict:FetchEventInit.t -> t
             end =
  struct
    type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6209 : Ojs.t) -> t_of_js x6209
    and t_0_to_js : t_0 -> Ojs.t = fun (x6208 : t) -> t_to_js x6208
    type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6212 : Ojs.t) -> intf_of_js __tags_of_js x6212
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6210 : __tags intf) -> intf_to_js __tags_to_js x6210
    let (get_clientId : 'tags this -> string) =
      fun (x6214 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6214) "clientId")
    let (get_handled : 'tags this -> never or_undefined Promise.t_1) =
      fun (x6216 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x6218 : Ojs.t) -> or_undefined_of_js never_of_js x6218)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6216) "handled")
    let (get_request : 'tags this -> Request.t) =
      fun (x6220 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6220) "request")
    let (get_resultingClientId : 'tags this -> string) =
      fun (x6222 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6222)
             "resultingClientId")
    let (respondWith :
      'tags this -> r:(Response.t, Response.t PromiseLike.t_1) union2 -> unit)
      =
      fun (x6228 : 'tags this) ->
        fun ~r:(x6224 : (Response.t, Response.t PromiseLike.t_1) union2) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6228) "respondWith"
               [|(union2_to_js Response.t_to_js
                    (fun (x6226 : Response.t PromiseLike.t_1) ->
                       PromiseLike.t_1_to_js Response.t_to_js x6226) x6224)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FetchEvent")
             "prototype")
    let (create : type_:string -> eventInitDict:FetchEventInit.t -> t) =
      fun ~type_:(x6230 : string) ->
        fun ~eventInitDict:(x6231 : FetchEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FetchEvent")
               [|(Ojs.string_to_js x6230);(FetchEventInit.t_to_js x6231)|])
  end
module FrameType =
  struct
    type t =
      [ `L_s42_auxiliary  | `L_s121_nested  | `L_s129_none 
      | `L_s193_top_level ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6233 : Ojs.t) ->
        let x6234 = x6233 in
        match Ojs.string_of_js x6234 with
        | "auxiliary" -> `L_s42_auxiliary
        | "nested" -> `L_s121_nested
        | "none" -> `L_s129_none
        | "top-level" -> `L_s193_top_level
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x6232 :
          [ `L_s42_auxiliary  | `L_s121_nested  | `L_s129_none 
          | `L_s193_top_level ])
        ->
        match x6232 with
        | `L_s42_auxiliary -> Ojs.string_to_js "auxiliary"
        | `L_s121_nested -> Ojs.string_to_js "nested"
        | `L_s129_none -> Ojs.string_to_js "none"
        | `L_s193_top_level -> Ojs.string_to_js "top-level"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6236 : Ojs.t) -> t_of_js x6236
    and t_0_to_js : t_0 -> Ojs.t = fun (x6235 : t) -> t_to_js x6235
  end
module ClientTypes =
  struct
    type t =
      [ `L_s35_all  | `L_s177_sharedworker  | `L_s209_window 
      | `L_s210_worker ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6238 : Ojs.t) ->
        let x6239 = x6238 in
        match Ojs.string_of_js x6239 with
        | "all" -> `L_s35_all
        | "sharedworker" -> `L_s177_sharedworker
        | "window" -> `L_s209_window
        | "worker" -> `L_s210_worker
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x6237 :
          [ `L_s35_all  | `L_s177_sharedworker  | `L_s209_window 
          | `L_s210_worker ])
        ->
        match x6237 with
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s177_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s209_window -> Ojs.string_to_js "window"
        | `L_s210_worker -> Ojs.string_to_js "worker"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6241 : Ojs.t) -> t_of_js x6241
    and t_0_to_js : t_0 -> Ojs.t = fun (x6240 : t) -> t_to_js x6240
  end
module rec
  AnonymousInterface9:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> Client.t
                        val set_prototype : t -> Client.t -> unit
                        val create : t -> Client.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6243 : Ojs.t) -> x6243
    and t_to_js : t -> Ojs.t = fun (x6242 : Ojs.t) -> x6242
    let (get_prototype : t -> Client.t) =
      fun (x6244 : t) ->
        Client.t_of_js (Ojs.get_prop_ascii (t_to_js x6244) "prototype")
    let (set_prototype : t -> Client.t -> unit) =
      fun (x6245 : t) ->
        fun (x6246 : Client.t) ->
          Ojs.set_prop_ascii (t_to_js x6245) "prototype"
            (Client.t_to_js x6246)
    let (create : t -> Client.t) =
      fun (x6247 : t) -> Client.t_of_js (Ojs.new_obj (t_to_js x6247) [||])
  end
 and
  Client:sig
           type t = [ `Client ] intf
           type t_0 = t
           [@@@js.stop ]
           type tags = [ `Client ]
           type tags_0 = tags
           [@@@js.start ]
           [@@@js.implem type tags = [ `Client ]
             type tags_0 = tags]
           type 'tags this = 'tags intf constraint 'tags = [> `Client ]
           val t_to_js : t -> Ojs.t
           val t_of_js : Ojs.t -> t
           val t_0_to_js : t_0 -> Ojs.t
           val t_0_of_js : Ojs.t -> t_0
           val get_frameType : 'tags this -> FrameType.t
           val get_id : 'tags this -> string
           val get_type : 'tags this -> ClientTypes.t
           val get_url : 'tags this -> string
           val postMessage :
             'tags this ->
               message:any -> transfer:Transferable.t list -> unit
           val postMessage' :
             'tags this ->
               message:any -> ?options:PostMessageOptions.t -> unit -> unit
           val cast_from : 'tags this -> t
           val prototype : unit -> t
           val create : unit -> t
         end =
  struct
    type t = [ `Client ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6249 : Ojs.t) -> t_of_js x6249
    and t_0_to_js : t_0 -> Ojs.t = fun (x6248 : t) -> t_to_js x6248
    type tags = [ `Client ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Client ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6252 : Ojs.t) -> intf_of_js __tags_of_js x6252
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6250 : __tags intf) -> intf_to_js __tags_to_js x6250
    let (get_frameType : 'tags this -> FrameType.t) =
      fun (x6254 : 'tags this) ->
        FrameType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6254) "frameType")
    let (get_id : 'tags this -> string) =
      fun (x6256 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6256) "id")
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x6258 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6258) "type")
    let (get_url : 'tags this -> string) =
      fun (x6260 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6260) "url")
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x6265 : 'tags this) ->
        fun ~message:(x6262 : any) ->
          fun ~transfer:(x6263 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6265) "postMessage"
                 [|(any_to_js x6262);(Ojs.list_to_js Transferable.t_to_js
                                        x6263)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:PostMessageOptions.t -> unit -> unit)
      =
      fun (x6271 : 'tags this) ->
        fun ~message:(x6267 : any) ->
          fun ?options:(x6268 : PostMessageOptions.t option) ->
            fun () ->
              ignore
                (let x6273 = this_to_js Obj.magic x6271 in
                 Ojs.call (Ojs.get_prop_ascii x6273 "postMessage") "apply"
                   [|x6273;((let x6269 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6269 "push" [|(any_to_js x6267)|]);
                             (match x6268 with
                              | Some x6270 ->
                                  ignore
                                    (Ojs.call x6269 "push"
                                       [|(PostMessageOptions.t_to_js x6270)|])
                              | None -> ());
                             x6269))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Client")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Client") [||])
  end
module ExtendableMessageEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6275 : Ojs.t) -> t_of_js x6275
    and t_0_to_js : t_0 -> Ojs.t = fun (x6274 : t) -> t_to_js x6274
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6278 : Ojs.t) -> intf_of_js __tags_of_js x6278
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6276 : __tags intf) -> intf_to_js __tags_to_js x6276
    let (get_data : 'tags this -> any) =
      fun (x6280 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x6280) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x6282 : 'tags this) ->
        fun (x6283 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6282) "data"
            (any_to_js x6283)
    let (get_lastEventId : 'tags this -> string) =
      fun (x6285 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6285) "lastEventId")
    let (set_lastEventId : 'tags this -> string -> unit) =
      fun (x6287 : 'tags this) ->
        fun (x6288 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6287) "lastEventId"
            (Ojs.string_to_js x6288)
    let (get_origin : 'tags this -> string) =
      fun (x6290 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6290) "origin")
    let (set_origin : 'tags this -> string -> unit) =
      fun (x6292 : 'tags this) ->
        fun (x6293 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6292) "origin"
            (Ojs.string_to_js x6293)
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x6295 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6295) "ports")
    let (set_ports : 'tags this -> MessagePort.t list -> unit) =
      fun (x6298 : 'tags this) ->
        fun (x6299 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6298) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x6299)
    let (get_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s121_nested of Client.t 
          | `U_s129_none of Client.t  | `U_s193_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s95_installed of ServiceWorker.t 
           | `U_s96_installing of ServiceWorker.t 
           | `U_s147_parsed of ServiceWorker.t 
           | `U_s167_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null)
      =
      fun (x6302 : 'tags this) ->
        or_null_of_js
          (fun (x6304 : Ojs.t) ->
             or__of_js
               (fun (x6305 : Ojs.t) ->
                  union2_of_js
                    (fun (x6306 : Ojs.t) ->
                       let x6307 = x6306 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x6307 "frameType")
                       with
                       | "auxiliary" ->
                           `U_s42_auxiliary (Client.t_of_js x6307)
                       | "nested" -> `U_s121_nested (Client.t_of_js x6307)
                       | "none" -> `U_s129_none (Client.t_of_js x6307)
                       | "top-level" ->
                           `U_s193_top_level (Client.t_of_js x6307)
                       | _ -> assert false)
                    (fun (x6308 : Ojs.t) ->
                       let x6309 = x6308 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x6309 "state")
                       with
                       | "activated" ->
                           `U_s33_activated (ServiceWorker.t_of_js x6309)
                       | "activating" ->
                           `U_s34_activating (ServiceWorker.t_of_js x6309)
                       | "installed" ->
                           `U_s95_installed (ServiceWorker.t_of_js x6309)
                       | "installing" ->
                           `U_s96_installing (ServiceWorker.t_of_js x6309)
                       | "parsed" ->
                           `U_s147_parsed (ServiceWorker.t_of_js x6309)
                       | "redundant" ->
                           `U_s167_redundant (ServiceWorker.t_of_js x6309)
                       | _ -> assert false) x6305) MessagePort.t_of_js x6304)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6302) "source")
    let (set_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s121_nested of Client.t 
          | `U_s129_none of Client.t  | `U_s193_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s95_installed of ServiceWorker.t 
           | `U_s96_installing of ServiceWorker.t 
           | `U_s147_parsed of ServiceWorker.t 
           | `U_s167_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null -> unit)
      =
      fun (x6311 : 'tags this) ->
        fun
          (x6312 :
            (([ `U_s42_auxiliary of Client.t  | `U_s121_nested of Client.t 
              | `U_s129_none of Client.t  | `U_s193_top_level of Client.t ],
               [ `U_s33_activated of ServiceWorker.t 
               | `U_s34_activating of ServiceWorker.t 
               | `U_s95_installed of ServiceWorker.t 
               | `U_s96_installing of ServiceWorker.t 
               | `U_s147_parsed of ServiceWorker.t 
               | `U_s167_redundant of ServiceWorker.t ]) union2,
              MessagePort.t) or_ or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6311) "source"
            (or_null_to_js
               (fun
                  (x6313 :
                    (([ `U_s42_auxiliary of Client.t 
                      | `U_s121_nested of Client.t 
                      | `U_s129_none of Client.t 
                      | `U_s193_top_level of Client.t ],
                       [ `U_s33_activated of ServiceWorker.t 
                       | `U_s34_activating of ServiceWorker.t 
                       | `U_s95_installed of ServiceWorker.t 
                       | `U_s96_installing of ServiceWorker.t 
                       | `U_s147_parsed of ServiceWorker.t 
                       | `U_s167_redundant of ServiceWorker.t ]) union2,
                      MessagePort.t) or_)
                  ->
                  or__to_js
                    (fun
                       (x6314 :
                         ([ `U_s42_auxiliary of Client.t 
                          | `U_s121_nested of Client.t 
                          | `U_s129_none of Client.t 
                          | `U_s193_top_level of Client.t ],
                           [ `U_s33_activated of ServiceWorker.t 
                           | `U_s34_activating of ServiceWorker.t 
                           | `U_s95_installed of ServiceWorker.t 
                           | `U_s96_installing of ServiceWorker.t 
                           | `U_s147_parsed of ServiceWorker.t 
                           | `U_s167_redundant of ServiceWorker.t ]) union2)
                       ->
                       union2_to_js
                         (fun
                            (x6315 :
                              [ `U_s42_auxiliary of Client.t 
                              | `U_s121_nested of Client.t 
                              | `U_s129_none of Client.t 
                              | `U_s193_top_level of Client.t ])
                            ->
                            match x6315 with
                            | `U_s42_auxiliary x6316 -> Client.t_to_js x6316
                            | `U_s121_nested x6317 -> Client.t_to_js x6317
                            | `U_s129_none x6318 -> Client.t_to_js x6318
                            | `U_s193_top_level x6319 -> Client.t_to_js x6319)
                         (fun
                            (x6320 :
                              [ `U_s33_activated of ServiceWorker.t 
                              | `U_s34_activating of ServiceWorker.t 
                              | `U_s95_installed of ServiceWorker.t 
                              | `U_s96_installing of ServiceWorker.t 
                              | `U_s147_parsed of ServiceWorker.t 
                              | `U_s167_redundant of ServiceWorker.t ])
                            ->
                            match x6320 with
                            | `U_s33_activated x6321 ->
                                ServiceWorker.t_to_js x6321
                            | `U_s34_activating x6322 ->
                                ServiceWorker.t_to_js x6322
                            | `U_s95_installed x6323 ->
                                ServiceWorker.t_to_js x6323
                            | `U_s96_installing x6324 ->
                                ServiceWorker.t_to_js x6324
                            | `U_s147_parsed x6325 ->
                                ServiceWorker.t_to_js x6325
                            | `U_s167_redundant x6326 ->
                                ServiceWorker.t_to_js x6326) x6314)
                    MessagePort.t_to_js x6313) x6312)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface32:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ExtendableMessageEvent.t
                         val set_prototype :
                           t -> ExtendableMessageEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:ExtendableMessageEventInit.t ->
                                 unit -> ExtendableMessageEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6330 : Ojs.t) -> x6330
    and t_to_js : t -> Ojs.t = fun (x6329 : Ojs.t) -> x6329
    let (get_prototype : t -> ExtendableMessageEvent.t) =
      fun (x6331 : t) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x6331) "prototype")
    let (set_prototype : t -> ExtendableMessageEvent.t -> unit) =
      fun (x6332 : t) ->
        fun (x6333 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x6332) "prototype"
            (ExtendableMessageEvent.t_to_js x6333)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:ExtendableMessageEventInit.t ->
            unit -> ExtendableMessageEvent.t)
      =
      fun (x6338 : t) ->
        fun ~type_:(x6334 : string) ->
          fun ?eventInitDict:(x6335 : ExtendableMessageEventInit.t option) ->
            fun () ->
              ExtendableMessageEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x6338)
                   (let x6336 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x6336 "push" [|(Ojs.string_to_js x6334)|]);
                    (match x6335 with
                     | Some x6337 ->
                         ignore
                           (Ojs.call x6336 "push"
                              [|(ExtendableMessageEventInit.t_to_js x6337)|])
                     | None -> ());
                    x6336))
  end
 and
  ExtendableMessageEvent:sig
                           type t =
                             [ `Event  | `ExtendableEvent 
                             | `ExtendableMessageEvent ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags =
                             [ `Event  | `ExtendableEvent 
                             | `ExtendableMessageEvent ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags =
                               [ `Event  | `ExtendableEvent 
                               | `ExtendableMessageEvent ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `ExtendableMessageEvent ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val get_data : 'tags this -> any
                           val get_lastEventId : 'tags this -> string
                           val get_origin : 'tags this -> string
                           val get_ports : 'tags this -> MessagePort.t list
                           val get_source :
                             'tags this ->
                               (([ `U_s42_auxiliary of Client.t 
                                 | `U_s121_nested of Client.t 
                                 | `U_s129_none of Client.t 
                                 | `U_s193_top_level of Client.t ],
                                  [ `U_s33_activated of ServiceWorker.t 
                                  | `U_s34_activating of ServiceWorker.t 
                                  | `U_s95_installed of ServiceWorker.t 
                                  | `U_s96_installing of ServiceWorker.t 
                                  | `U_s147_parsed of ServiceWorker.t 
                                  | `U_s167_redundant of ServiceWorker.t ])
                                  union2,
                                 MessagePort.t) or_ or_null
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create :
                             type_:string ->
                               ?eventInitDict:ExtendableMessageEventInit.t ->
                                 unit -> t
                         end =
  struct
    type t = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6340 : Ojs.t) -> t_of_js x6340
    and t_0_to_js : t_0 -> Ojs.t = fun (x6339 : t) -> t_to_js x6339
    type tags = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6343 : Ojs.t) -> intf_of_js __tags_of_js x6343
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6341 : __tags intf) -> intf_to_js __tags_to_js x6341
    let (get_data : 'tags this -> any) =
      fun (x6345 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x6345) "data")
    let (get_lastEventId : 'tags this -> string) =
      fun (x6347 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6347) "lastEventId")
    let (get_origin : 'tags this -> string) =
      fun (x6349 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6349) "origin")
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x6351 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6351) "ports")
    let (get_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s121_nested of Client.t 
          | `U_s129_none of Client.t  | `U_s193_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s95_installed of ServiceWorker.t 
           | `U_s96_installing of ServiceWorker.t 
           | `U_s147_parsed of ServiceWorker.t 
           | `U_s167_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null)
      =
      fun (x6354 : 'tags this) ->
        or_null_of_js
          (fun (x6356 : Ojs.t) ->
             or__of_js
               (fun (x6357 : Ojs.t) ->
                  union2_of_js
                    (fun (x6358 : Ojs.t) ->
                       let x6359 = x6358 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x6359 "frameType")
                       with
                       | "auxiliary" ->
                           `U_s42_auxiliary (Client.t_of_js x6359)
                       | "nested" -> `U_s121_nested (Client.t_of_js x6359)
                       | "none" -> `U_s129_none (Client.t_of_js x6359)
                       | "top-level" ->
                           `U_s193_top_level (Client.t_of_js x6359)
                       | _ -> assert false)
                    (fun (x6360 : Ojs.t) ->
                       let x6361 = x6360 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x6361 "state")
                       with
                       | "activated" ->
                           `U_s33_activated (ServiceWorker.t_of_js x6361)
                       | "activating" ->
                           `U_s34_activating (ServiceWorker.t_of_js x6361)
                       | "installed" ->
                           `U_s95_installed (ServiceWorker.t_of_js x6361)
                       | "installing" ->
                           `U_s96_installing (ServiceWorker.t_of_js x6361)
                       | "parsed" ->
                           `U_s147_parsed (ServiceWorker.t_of_js x6361)
                       | "redundant" ->
                           `U_s167_redundant (ServiceWorker.t_of_js x6361)
                       | _ -> assert false) x6357) MessagePort.t_of_js x6356)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6354) "source")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
             "prototype")
    let (create :
      type_:string ->
        ?eventInitDict:ExtendableMessageEventInit.t -> unit -> t)
      =
      fun ~type_:(x6363 : string) ->
        fun ?eventInitDict:(x6364 : ExtendableMessageEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
                 (let x6365 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x6365 "push" [|(Ojs.string_to_js x6363)|]);
                  (match x6364 with
                   | Some x6366 ->
                       ignore
                         (Ojs.call x6365 "push"
                            [|(ExtendableMessageEventInit.t_to_js x6366)|])
                   | None -> ());
                  x6365))
  end
module ServiceWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6368 : Ojs.t) -> t_of_js x6368
    and t_0_to_js : t_0 -> Ojs.t = fun (x6367 : t) -> t_to_js x6367
    type tags =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6371 : Ojs.t) -> intf_of_js __tags_of_js x6371
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6369 : __tags intf) -> intf_to_js __tags_to_js x6369
    let (get_activate : 'tags this -> ExtendableEvent.t) =
      fun (x6373 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6373) "activate")
    let (set_activate : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x6375 : 'tags this) ->
        fun (x6376 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6375) "activate"
            (ExtendableEvent.t_to_js x6376)
    let (get_fetch : 'tags this -> FetchEvent.t) =
      fun (x6378 : 'tags this) ->
        FetchEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6378) "fetch")
    let (set_fetch : 'tags this -> FetchEvent.t -> unit) =
      fun (x6380 : 'tags this) ->
        fun (x6381 : FetchEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6380) "fetch"
            (FetchEvent.t_to_js x6381)
    let (get_install : 'tags this -> ExtendableEvent.t) =
      fun (x6383 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6383) "install")
    let (set_install : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x6385 : 'tags this) ->
        fun (x6386 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6385) "install"
            (ExtendableEvent.t_to_js x6386)
    let (get_message : 'tags this -> ExtendableMessageEvent.t) =
      fun (x6388 : 'tags this) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6388) "message")
    let (set_message : 'tags this -> ExtendableMessageEvent.t -> unit) =
      fun (x6390 : 'tags this) ->
        fun (x6391 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6390) "message"
            (ExtendableMessageEvent.t_to_js x6391)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x6393 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6393) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6395 : 'tags this) ->
        fun (x6396 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6395) "messageerror"
            (MessageEvent.t_0_to_js x6396)
    let (get_notificationclick : 'tags this -> NotificationEvent.t) =
      fun (x6398 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6398)
             "notificationclick")
    let (set_notificationclick : 'tags this -> NotificationEvent.t -> unit) =
      fun (x6400 : 'tags this) ->
        fun (x6401 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6400) "notificationclick"
            (NotificationEvent.t_to_js x6401)
    let (get_notificationclose : 'tags this -> NotificationEvent.t) =
      fun (x6403 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6403)
             "notificationclose")
    let (set_notificationclose : 'tags this -> NotificationEvent.t -> unit) =
      fun (x6405 : 'tags this) ->
        fun (x6406 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6405) "notificationclose"
            (NotificationEvent.t_to_js x6406)
    let (get_push : 'tags this -> PushEvent.t) =
      fun (x6408 : 'tags this) ->
        PushEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6408) "push")
    let (set_push : 'tags this -> PushEvent.t -> unit) =
      fun (x6410 : 'tags this) ->
        fun (x6411 : PushEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6410) "push"
            (PushEvent.t_to_js x6411)
    let cast_from = Obj.magic
  end
module ServiceWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6414 : Ojs.t) -> t_of_js x6414
    and t_0_to_js : t_0 -> Ojs.t = fun (x6413 : t) -> t_to_js x6413
    type tags = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6417 : Ojs.t) -> intf_of_js __tags_of_js x6417
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6415 : __tags intf) -> intf_to_js __tags_to_js x6415
    let (get_statechange : 'tags this -> Event.t) =
      fun (x6419 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6419) "statechange")
    let (set_statechange : 'tags this -> Event.t -> unit) =
      fun (x6421 : 'tags this) ->
        fun (x6422 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6421) "statechange"
            (Event.t_to_js x6422)
    let cast_from = Obj.magic
  end
module ServiceWorkerContainerEventMap =
  struct
    type t = [ `ServiceWorkerContainerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6425 : Ojs.t) -> t_of_js x6425
    and t_0_to_js : t_0 -> Ojs.t = fun (x6424 : t) -> t_to_js x6424
    type tags = [ `ServiceWorkerContainerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6428 : Ojs.t) -> intf_of_js __tags_of_js x6428
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6426 : __tags intf) -> intf_to_js __tags_to_js x6426
    let (get_controllerchange : 'tags this -> Event.t) =
      fun (x6430 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6430) "controllerchange")
    let (set_controllerchange : 'tags this -> Event.t -> unit) =
      fun (x6432 : 'tags this) ->
        fun (x6433 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6432) "controllerchange"
            (Event.t_to_js x6433)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6435 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6435) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6437 : 'tags this) ->
        fun (x6438 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6437) "message"
            (MessageEvent.t_0_to_js x6438)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x6440 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6440) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6442 : 'tags this) ->
        fun (x6443 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6442) "messageerror"
            (MessageEvent.t_0_to_js x6443)
    let cast_from = Obj.magic
  end
module ReadableStreamReader =
  struct
    type 'T t = 'T ReadableStreamDefaultReader.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x6447 : Ojs.t) ->
          ReadableStreamDefaultReader.t_of_js __T_of_js x6447
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x6445 : __T ReadableStreamDefaultReader.t) ->
          ReadableStreamDefaultReader.t_to_js __T_to_js x6445
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x6451 : Ojs.t) -> t_of_js __T_of_js x6451
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x6449 : __T t) -> t_to_js __T_to_js x6449
  end
module PermissionStatusEventMap =
  struct
    type t = [ `PermissionStatusEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6454 : Ojs.t) -> t_of_js x6454
    and t_0_to_js : t_0 -> Ojs.t = fun (x6453 : t) -> t_to_js x6453
    type tags = [ `PermissionStatusEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6457 : Ojs.t) -> intf_of_js __tags_of_js x6457
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6455 : __tags intf) -> intf_to_js __tags_to_js x6455
    let (get_change : 'tags this -> Event.t) =
      fun (x6459 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6459) "change")
    let (set_change : 'tags this -> Event.t -> unit) =
      fun (x6461 : 'tags this) ->
        fun (x6462 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6461) "change"
            (Event.t_to_js x6462)
    let cast_from = Obj.magic
  end
module PerformanceEventMap =
  struct
    type t = [ `PerformanceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6465 : Ojs.t) -> t_of_js x6465
    and t_0_to_js : t_0 -> Ojs.t = fun (x6464 : t) -> t_to_js x6464
    type tags = [ `PerformanceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6468 : Ojs.t) -> intf_of_js __tags_of_js x6468
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6466 : __tags intf) -> intf_to_js __tags_to_js x6466
    let (get_resourcetimingbufferfull : 'tags this -> Event.t) =
      fun (x6470 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6470)
             "resourcetimingbufferfull")
    let (set_resourcetimingbufferfull : 'tags this -> Event.t -> unit) =
      fun (x6472 : 'tags this) ->
        fun (x6473 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6472)
            "resourcetimingbufferfull" (Event.t_to_js x6473)
    let cast_from = Obj.magic
  end
module OnErrorEventHandlerNonNull =
  struct
    type t = [ `OnErrorEventHandlerNonNull ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6476 : Ojs.t) -> t_of_js x6476
    and t_0_to_js : t_0 -> Ojs.t = fun (x6475 : t) -> t_to_js x6475
    type tags = [ `OnErrorEventHandlerNonNull ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6479 : Ojs.t) -> intf_of_js __tags_of_js x6479
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6477 : __tags intf) -> intf_to_js __tags_to_js x6477
    let (apply :
      'tags this ->
        event:Event.t or_string ->
          ?source:string ->
            ?lineno:float -> ?colno:float -> ?error:Error.t_0 -> unit -> any)
      =
      fun (x6492 : 'tags this) ->
        fun ~event:(x6481 : Event.t or_string) ->
          fun ?source:(x6482 : string option) ->
            fun ?lineno:(x6483 : float option) ->
              fun ?colno:(x6484 : float option) ->
                fun ?error:(x6485 : Error.t_0 option) ->
                  fun () ->
                    any_of_js
                      (Ojs.call (this_to_js Obj.magic x6492) "apply"
                         [|Ojs.null;((let x6486 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x6486 "push"
                                           [|(or_string_to_js Event.t_to_js
                                                x6481)|]);
                                      (match x6482 with
                                       | Some x6490 ->
                                           ignore
                                             (Ojs.call x6486 "push"
                                                [|(Ojs.string_to_js x6490)|])
                                       | None -> ());
                                      (match x6483 with
                                       | Some x6489 ->
                                           ignore
                                             (Ojs.call x6486 "push"
                                                [|(Ojs.float_to_js x6489)|])
                                       | None -> ());
                                      (match x6484 with
                                       | Some x6488 ->
                                           ignore
                                             (Ojs.call x6486 "push"
                                                [|(Ojs.float_to_js x6488)|])
                                       | None -> ());
                                      (match x6485 with
                                       | Some x6487 ->
                                           ignore
                                             (Ojs.call x6486 "push"
                                                [|(Error.t_0_to_js x6487)|])
                                       | None -> ());
                                      x6486))|])
    let cast_from = Obj.magic
  end
module OnErrorEventHandler =
  struct
    type t = OnErrorEventHandlerNonNull.t or_null
    let rec t_of_js : Ojs.t -> t =
      fun (x6496 : Ojs.t) ->
        or_null_of_js OnErrorEventHandlerNonNull.t_of_js x6496
    and t_to_js : t -> Ojs.t =
      fun (x6494 : OnErrorEventHandlerNonNull.t or_null) ->
        or_null_to_js OnErrorEventHandlerNonNull.t_to_js x6494
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6499 : Ojs.t) -> t_of_js x6499
    and t_0_to_js : t_0 -> Ojs.t = fun (x6498 : t) -> t_to_js x6498
  end
module OES_fbo_render_mipmap =
  struct
    type t = [ `OES_fbo_render_mipmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6501 : Ojs.t) -> t_of_js x6501
    and t_0_to_js : t_0 -> Ojs.t = fun (x6500 : t) -> t_to_js x6500
    type tags = [ `OES_fbo_render_mipmap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6504 : Ojs.t) -> intf_of_js __tags_of_js x6504
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6502 : __tags intf) -> intf_to_js __tags_to_js x6502
    let cast_from = Obj.magic
  end
module NotificationEventMap =
  struct
    type t = [ `NotificationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6507 : Ojs.t) -> t_of_js x6507
    and t_0_to_js : t_0 -> Ojs.t = fun (x6506 : t) -> t_to_js x6506
    type tags = [ `NotificationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6510 : Ojs.t) -> intf_of_js __tags_of_js x6510
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6508 : __tags intf) -> intf_to_js __tags_to_js x6508
    let (get_click : 'tags this -> Event.t) =
      fun (x6512 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6512) "click")
    let (set_click : 'tags this -> Event.t -> unit) =
      fun (x6514 : 'tags this) ->
        fun (x6515 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6514) "click"
            (Event.t_to_js x6515)
    let (get_close : 'tags this -> Event.t) =
      fun (x6517 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6517) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x6519 : 'tags this) ->
        fun (x6520 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6519) "close"
            (Event.t_to_js x6520)
    let (get_error : 'tags this -> Event.t) =
      fun (x6522 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6522) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6524 : 'tags this) ->
        fun (x6525 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6524) "error"
            (Event.t_to_js x6525)
    let (get_show : 'tags this -> Event.t) =
      fun (x6527 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6527) "show")
    let (set_show : 'tags this -> Event.t -> unit) =
      fun (x6529 : 'tags this) ->
        fun (x6530 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6529) "show"
            (Event.t_to_js x6530)
    let cast_from = Obj.magic
  end
module MessagePortEventMap =
  struct
    type t = [ `MessagePortEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6533 : Ojs.t) -> t_of_js x6533
    and t_0_to_js : t_0 -> Ojs.t = fun (x6532 : t) -> t_to_js x6532
    type tags = [ `MessagePortEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6536 : Ojs.t) -> intf_of_js __tags_of_js x6536
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6534 : __tags intf) -> intf_to_js __tags_to_js x6534
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6538 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6538) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6540 : 'tags this) ->
        fun (x6541 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6540) "message"
            (MessageEvent.t_0_to_js x6541)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x6543 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6543) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6545 : 'tags this) ->
        fun (x6546 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6545) "messageerror"
            (MessageEvent.t_0_to_js x6546)
    let cast_from = Obj.magic
  end
module ImportMeta =
  struct
    type t = [ `ImportMeta ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6549 : Ojs.t) -> t_of_js x6549
    and t_0_to_js : t_0 -> Ojs.t = fun (x6548 : t) -> t_to_js x6548
    type tags = [ `ImportMeta ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6552 : Ojs.t) -> intf_of_js __tags_of_js x6552
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6550 : __tags intf) -> intf_to_js __tags_to_js x6550
    let (get_url : 'tags this -> string) =
      fun (x6554 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6554) "url")
    let (set_url : 'tags this -> string -> unit) =
      fun (x6556 : 'tags this) ->
        fun (x6557 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6556) "url"
            (Ojs.string_to_js x6557)
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContextSettings =
  struct
    type t = [ `ImageBitmapRenderingContextSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6560 : Ojs.t) -> t_of_js x6560
    and t_0_to_js : t_0 -> Ojs.t = fun (x6559 : t) -> t_to_js x6559
    type tags = [ `ImageBitmapRenderingContextSettings ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6563 : Ojs.t) -> intf_of_js __tags_of_js x6563
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6561 : __tags intf) -> intf_to_js __tags_to_js x6561
    let (get_alpha : 'tags this -> bool) =
      fun (x6565 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6565) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x6567 : 'tags this) ->
        fun (x6568 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6567) "alpha"
            (Ojs.bool_to_js x6568)
    let cast_from = Obj.magic
  end
module IDBTransactionEventMap =
  struct
    type t = [ `IDBTransactionEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6571 : Ojs.t) -> t_of_js x6571
    and t_0_to_js : t_0 -> Ojs.t = fun (x6570 : t) -> t_to_js x6570
    type tags = [ `IDBTransactionEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6574 : Ojs.t) -> intf_of_js __tags_of_js x6574
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6572 : __tags intf) -> intf_to_js __tags_to_js x6572
    let (get_abort : 'tags this -> Event.t) =
      fun (x6576 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6576) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x6578 : 'tags this) ->
        fun (x6579 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6578) "abort"
            (Event.t_to_js x6579)
    let (get_complete : 'tags this -> Event.t) =
      fun (x6581 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6581) "complete")
    let (set_complete : 'tags this -> Event.t -> unit) =
      fun (x6583 : 'tags this) ->
        fun (x6584 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6583) "complete"
            (Event.t_to_js x6584)
    let (get_error : 'tags this -> Event.t) =
      fun (x6586 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6586) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6588 : 'tags this) ->
        fun (x6589 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6588) "error"
            (Event.t_to_js x6589)
    let cast_from = Obj.magic
  end
module IDBRequestEventMap =
  struct
    type t = [ `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6592 : Ojs.t) -> t_of_js x6592
    and t_0_to_js : t_0 -> Ojs.t = fun (x6591 : t) -> t_to_js x6591
    type tags = [ `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6595 : Ojs.t) -> intf_of_js __tags_of_js x6595
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6593 : __tags intf) -> intf_to_js __tags_to_js x6593
    let (get_error : 'tags this -> Event.t) =
      fun (x6597 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6597) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6599 : 'tags this) ->
        fun (x6600 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6599) "error"
            (Event.t_to_js x6600)
    let (get_success : 'tags this -> Event.t) =
      fun (x6602 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6602) "success")
    let (set_success : 'tags this -> Event.t -> unit) =
      fun (x6604 : 'tags this) ->
        fun (x6605 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6604) "success"
            (Event.t_to_js x6605)
    let cast_from = Obj.magic
  end
module IDBOpenDBRequestEventMap =
  struct
    type t = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6608 : Ojs.t) -> t_of_js x6608
    and t_0_to_js : t_0 -> Ojs.t = fun (x6607 : t) -> t_to_js x6607
    type tags = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6611 : Ojs.t) -> intf_of_js __tags_of_js x6611
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6609 : __tags intf) -> intf_to_js __tags_to_js x6609
    let (get_blocked : 'tags this -> Event.t) =
      fun (x6613 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6613) "blocked")
    let (set_blocked : 'tags this -> Event.t -> unit) =
      fun (x6615 : 'tags this) ->
        fun (x6616 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6615) "blocked"
            (Event.t_to_js x6616)
    let (get_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x6618 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6618) "upgradeneeded")
    let (set_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x6620 : 'tags this) ->
        fun (x6621 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6620) "upgradeneeded"
            (IDBVersionChangeEvent.t_to_js x6621)
    let cast_from = Obj.magic
  end
module IDBDatabaseEventMap =
  struct
    type t = [ `IDBDatabaseEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6624 : Ojs.t) -> t_of_js x6624
    and t_0_to_js : t_0 -> Ojs.t = fun (x6623 : t) -> t_to_js x6623
    type tags = [ `IDBDatabaseEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6627 : Ojs.t) -> intf_of_js __tags_of_js x6627
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6625 : __tags intf) -> intf_to_js __tags_to_js x6625
    let (get_abort : 'tags this -> Event.t) =
      fun (x6629 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6629) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x6631 : 'tags this) ->
        fun (x6632 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6631) "abort"
            (Event.t_to_js x6632)
    let (get_close : 'tags this -> Event.t) =
      fun (x6634 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6634) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x6636 : 'tags this) ->
        fun (x6637 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6636) "close"
            (Event.t_to_js x6637)
    let (get_error : 'tags this -> Event.t) =
      fun (x6639 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6639) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6641 : 'tags this) ->
        fun (x6642 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6641) "error"
            (Event.t_to_js x6642)
    let (get_versionchange : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x6644 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6644) "versionchange")
    let (set_versionchange : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x6646 : 'tags this) ->
        fun (x6647 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6646) "versionchange"
            (IDBVersionChangeEvent.t_to_js x6647)
    let cast_from = Obj.magic
  end
module FontFaceSetEventMap =
  struct
    type t = [ `FontFaceSetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6650 : Ojs.t) -> t_of_js x6650
    and t_0_to_js : t_0 -> Ojs.t = fun (x6649 : t) -> t_to_js x6649
    type tags = [ `FontFaceSetEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6653 : Ojs.t) -> intf_of_js __tags_of_js x6653
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6651 : __tags intf) -> intf_to_js __tags_to_js x6651
    let (get_loading : 'tags this -> Event.t) =
      fun (x6655 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6655) "loading")
    let (set_loading : 'tags this -> Event.t -> unit) =
      fun (x6657 : 'tags this) ->
        fun (x6658 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6657) "loading"
            (Event.t_to_js x6658)
    let (get_loadingdone : 'tags this -> Event.t) =
      fun (x6660 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6660) "loadingdone")
    let (set_loadingdone : 'tags this -> Event.t -> unit) =
      fun (x6662 : 'tags this) ->
        fun (x6663 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6662) "loadingdone"
            (Event.t_to_js x6663)
    let (get_loadingerror : 'tags this -> Event.t) =
      fun (x6665 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6665) "loadingerror")
    let (set_loadingerror : 'tags this -> Event.t -> unit) =
      fun (x6667 : 'tags this) ->
        fun (x6668 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6667) "loadingerror"
            (Event.t_to_js x6668)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface36:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FileReader.t
                         val set_prototype : t -> FileReader.t -> unit
                         val create : t -> FileReader.t
                         val get_DONE : t -> float
                         val get_EMPTY : t -> float
                         val get_LOADING : t -> float
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6671 : Ojs.t) -> x6671
    and t_to_js : t -> Ojs.t = fun (x6670 : Ojs.t) -> x6670
    let (get_prototype : t -> FileReader.t) =
      fun (x6672 : t) ->
        FileReader.t_of_js (Ojs.get_prop_ascii (t_to_js x6672) "prototype")
    let (set_prototype : t -> FileReader.t -> unit) =
      fun (x6673 : t) ->
        fun (x6674 : FileReader.t) ->
          Ojs.set_prop_ascii (t_to_js x6673) "prototype"
            (FileReader.t_to_js x6674)
    let (create : t -> FileReader.t) =
      fun (x6675 : t) ->
        FileReader.t_of_js (Ojs.new_obj (t_to_js x6675) [||])
    let (get_DONE : t -> float) =
      fun (x6676 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x6676) "DONE")
    let (get_EMPTY : t -> float) =
      fun (x6677 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x6677) "EMPTY")
    let (get_LOADING : t -> float) =
      fun (x6678 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x6678) "LOADING")
  end
 and
  FileReader:sig
               type t = [ `EventTarget  | `FileReader ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `EventTarget  | `FileReader ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem
                 type tags = [ `EventTarget  | `FileReader ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `FileReader ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_error : 'tags this -> DOMException.t or_null
               val get_onabort :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onabort :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onerror :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onerror :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onload :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onload :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onloadend :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onloadend :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onloadstart :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onloadstart :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_onprogress :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null
               val set_onprogress :
                 'tags this ->
                   (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit
               val get_readyState : 'tags this -> float
               val get_result :
                 'tags this -> ArrayBuffer.t_0 or_string or_null
               val abort : 'tags this -> unit
               val readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit
               val readAsBinaryString : 'tags this -> blob:Blob.t -> unit
               val readAsDataURL : 'tags this -> blob:Blob.t -> unit
               val readAsText :
                 'tags this ->
                   blob:Blob.t -> ?encoding:string -> unit -> unit
               val get_DONE : 'tags this -> float
               val get_EMPTY : 'tags this -> float
               val get_LOADING : 'tags this -> float
               val addEventListener :
                 'tags this ->
                   type_:'K ->
                     listener:(this:t -> ev:any -> any) ->
                       ?options:AddEventListenerOptions.t or_boolean ->
                         unit -> unit
               val addEventListener' :
                 'tags this ->
                   type_:string ->
                     listener:EventListenerOrEventListenerObject.t ->
                       ?options:AddEventListenerOptions.t or_boolean ->
                         unit -> unit
               val removeEventListener :
                 'tags this ->
                   type_:'K ->
                     listener:(this:t -> ev:any -> any) ->
                       ?options:EventListenerOptions.t or_boolean ->
                         unit -> unit
               val removeEventListener' :
                 'tags this ->
                   type_:string ->
                     listener:EventListenerOrEventListenerObject.t ->
                       ?options:EventListenerOptions.t or_boolean ->
                         unit -> unit
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create : unit -> t
               val done_ : unit -> float
               val empty : unit -> float
               val loading : unit -> float
             end =
  struct
    type t = [ `EventTarget  | `FileReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6680 : Ojs.t) -> t_of_js x6680
    and t_0_to_js : t_0 -> Ojs.t = fun (x6679 : t) -> t_to_js x6679
    type tags = [ `EventTarget  | `FileReader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6683 : Ojs.t) -> intf_of_js __tags_of_js x6683
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6681 : __tags intf) -> intf_to_js __tags_to_js x6681
    let (get_error : 'tags this -> DOMException.t or_null) =
      fun (x6685 : 'tags this) ->
        or_null_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6685) "error")
    let (get_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6688 : 'tags this) ->
        or_null_of_js
          (fun (x6690 : Ojs.t) ->
             fun ~this:(x6691 : t) ->
               fun ~ev:(x6692 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6690
                      [|(t_to_js x6691);(ProgressEvent.t_to_js t_to_js x6692)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6688) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6694 : 'tags this) ->
        fun (x6695 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6694) "onabort"
            (or_null_to_js
               (fun (x6696 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6697 : Ojs.t) ->
                       fun (x6698 : Ojs.t) ->
                         any_to_js
                           (x6696 ~this:(t_of_js x6697)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6698))))
               x6695)
    let (get_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6701 : 'tags this) ->
        or_null_of_js
          (fun (x6703 : Ojs.t) ->
             fun ~this:(x6704 : t) ->
               fun ~ev:(x6705 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6703
                      [|(t_to_js x6704);(ProgressEvent.t_to_js t_to_js x6705)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6701) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6707 : 'tags this) ->
        fun (x6708 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6707) "onerror"
            (or_null_to_js
               (fun (x6709 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6710 : Ojs.t) ->
                       fun (x6711 : Ojs.t) ->
                         any_to_js
                           (x6709 ~this:(t_of_js x6710)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6711))))
               x6708)
    let (get_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6714 : 'tags this) ->
        or_null_of_js
          (fun (x6716 : Ojs.t) ->
             fun ~this:(x6717 : t) ->
               fun ~ev:(x6718 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6716
                      [|(t_to_js x6717);(ProgressEvent.t_to_js t_to_js x6718)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6714) "onload")
    let (set_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6720 : 'tags this) ->
        fun (x6721 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6720) "onload"
            (or_null_to_js
               (fun (x6722 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6723 : Ojs.t) ->
                       fun (x6724 : Ojs.t) ->
                         any_to_js
                           (x6722 ~this:(t_of_js x6723)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6724))))
               x6721)
    let (get_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6727 : 'tags this) ->
        or_null_of_js
          (fun (x6729 : Ojs.t) ->
             fun ~this:(x6730 : t) ->
               fun ~ev:(x6731 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6729
                      [|(t_to_js x6730);(ProgressEvent.t_to_js t_to_js x6731)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6727) "onloadend")
    let (set_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6733 : 'tags this) ->
        fun (x6734 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6733) "onloadend"
            (or_null_to_js
               (fun (x6735 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6736 : Ojs.t) ->
                       fun (x6737 : Ojs.t) ->
                         any_to_js
                           (x6735 ~this:(t_of_js x6736)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6737))))
               x6734)
    let (get_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6740 : 'tags this) ->
        or_null_of_js
          (fun (x6742 : Ojs.t) ->
             fun ~this:(x6743 : t) ->
               fun ~ev:(x6744 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6742
                      [|(t_to_js x6743);(ProgressEvent.t_to_js t_to_js x6744)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6740) "onloadstart")
    let (set_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6746 : 'tags this) ->
        fun (x6747 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6746) "onloadstart"
            (or_null_to_js
               (fun (x6748 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6749 : Ojs.t) ->
                       fun (x6750 : Ojs.t) ->
                         any_to_js
                           (x6748 ~this:(t_of_js x6749)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6750))))
               x6747)
    let (get_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x6753 : 'tags this) ->
        or_null_of_js
          (fun (x6755 : Ojs.t) ->
             fun ~this:(x6756 : t) ->
               fun ~ev:(x6757 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x6755
                      [|(t_to_js x6756);(ProgressEvent.t_to_js t_to_js x6757)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6753) "onprogress")
    let (set_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x6759 : 'tags this) ->
        fun (x6760 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6759) "onprogress"
            (or_null_to_js
               (fun (x6761 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x6762 : Ojs.t) ->
                       fun (x6763 : Ojs.t) ->
                         any_to_js
                           (x6761 ~this:(t_of_js x6762)
                              ~ev:(ProgressEvent.t_of_js t_of_js x6763))))
               x6760)
    let (get_readyState : 'tags this -> float) =
      fun (x6766 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6766) "readyState")
    let (get_result : 'tags this -> ArrayBuffer.t_0 or_string or_null) =
      fun (x6768 : 'tags this) ->
        or_null_of_js
          (fun (x6770 : Ojs.t) -> or_string_of_js ArrayBuffer.t_0_of_js x6770)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6768) "result")
    let (abort : 'tags this -> unit) =
      fun (x6772 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6772) "abort" [||])
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit) =
      fun (x6775 : 'tags this) ->
        fun ~blob:(x6774 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6775) "readAsArrayBuffer"
               [|(Blob.t_to_js x6774)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> unit) =
      fun (x6778 : 'tags this) ->
        fun ~blob:(x6777 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6778) "readAsBinaryString"
               [|(Blob.t_to_js x6777)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> unit) =
      fun (x6781 : 'tags this) ->
        fun ~blob:(x6780 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6781) "readAsDataURL"
               [|(Blob.t_to_js x6780)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit) =
      fun (x6787 : 'tags this) ->
        fun ~blob:(x6783 : Blob.t) ->
          fun ?encoding:(x6784 : string option) ->
            fun () ->
              ignore
                (let x6789 = this_to_js Obj.magic x6787 in
                 Ojs.call (Ojs.get_prop_ascii x6789 "readAsText") "apply"
                   [|x6789;((let x6785 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x6785 "push"
                                  [|(Blob.t_to_js x6783)|]);
                             (match x6784 with
                              | Some x6786 ->
                                  ignore
                                    (Ojs.call x6785 "push"
                                       [|(Ojs.string_to_js x6786)|])
                              | None -> ());
                             x6785))|])
    let (get_DONE : 'tags this -> float) =
      fun (x6790 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6790) "DONE")
    let (get_EMPTY : 'tags this -> float) =
      fun (x6792 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6792) "EMPTY")
    let (get_LOADING : 'tags this -> float) =
      fun (x6794 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6794) "LOADING")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6804 : 'tags this) ->
        fun ~type_:(x6796 : 'K) ->
          fun ~listener:(x6797 : this:t -> ev:any -> any) ->
            fun
              ?options:(x6798 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6806 = this_to_js Obj.magic x6804 in
                   Ojs.call (Ojs.get_prop_ascii x6806 "addEventListener")
                     "apply"
                     [|x6806;((let x6799 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6799 "push" [|(Obj.magic x6796)|]);
                               ignore
                                 (Ojs.call x6799 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6802 : Ojs.t) ->
                                            fun (x6803 : Ojs.t) ->
                                              any_to_js
                                                (x6797 ~this:(t_of_js x6802)
                                                   ~ev:(any_of_js x6803))))|]);
                               (match x6798 with
                                | Some x6800 ->
                                    ignore
                                      (Ojs.call x6799 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x6800)|])
                                | None -> ());
                               x6799))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6813 : 'tags this) ->
        fun ~type_:(x6807 : string) ->
          fun ~listener:(x6808 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x6809 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6815 = this_to_js Obj.magic x6813 in
                   Ojs.call (Ojs.get_prop_ascii x6815 "addEventListener")
                     "apply"
                     [|x6815;((let x6810 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6810 "push"
                                    [|(Ojs.string_to_js x6807)|]);
                               ignore
                                 (Ojs.call x6810 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6808)|]);
                               (match x6809 with
                                | Some x6811 ->
                                    ignore
                                      (Ojs.call x6810 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x6811)|])
                                | None -> ());
                               x6810))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6824 : 'tags this) ->
        fun ~type_:(x6816 : 'K) ->
          fun ~listener:(x6817 : this:t -> ev:any -> any) ->
            fun ?options:(x6818 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6826 = this_to_js Obj.magic x6824 in
                   Ojs.call (Ojs.get_prop_ascii x6826 "removeEventListener")
                     "apply"
                     [|x6826;((let x6819 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6819 "push" [|(Obj.magic x6816)|]);
                               ignore
                                 (Ojs.call x6819 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x6822 : Ojs.t) ->
                                            fun (x6823 : Ojs.t) ->
                                              any_to_js
                                                (x6817 ~this:(t_of_js x6822)
                                                   ~ev:(any_of_js x6823))))|]);
                               (match x6818 with
                                | Some x6820 ->
                                    ignore
                                      (Ojs.call x6819 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x6820)|])
                                | None -> ());
                               x6819))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x6833 : 'tags this) ->
        fun ~type_:(x6827 : string) ->
          fun ~listener:(x6828 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x6829 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x6835 = this_to_js Obj.magic x6833 in
                   Ojs.call (Ojs.get_prop_ascii x6835 "removeEventListener")
                     "apply"
                     [|x6835;((let x6830 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x6830 "push"
                                    [|(Ojs.string_to_js x6827)|]);
                               ignore
                                 (Ojs.call x6830 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x6828)|]);
                               (match x6829 with
                                | Some x6831 ->
                                    ignore
                                      (Ojs.call x6830 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x6831)|])
                                | None -> ());
                               x6830))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReader") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "DONE")
    let (empty : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "EMPTY")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "LOADING")
  end
module FileReaderEventMap =
  struct
    type t = [ `FileReaderEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6837 : Ojs.t) -> t_of_js x6837
    and t_0_to_js : t_0 -> Ojs.t = fun (x6836 : t) -> t_to_js x6836
    type tags = [ `FileReaderEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6840 : Ojs.t) -> intf_of_js __tags_of_js x6840
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6838 : __tags intf) -> intf_to_js __tags_to_js x6838
    let (get_abort : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6842 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6842) "abort")
    let (set_abort : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6845 : 'tags this) ->
        fun (x6846 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6845) "abort"
            (ProgressEvent.t_to_js FileReader.t_to_js x6846)
    let (get_error : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6849 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6849) "error")
    let (set_error : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6852 : 'tags this) ->
        fun (x6853 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6852) "error"
            (ProgressEvent.t_to_js FileReader.t_to_js x6853)
    let (get_load : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6856 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6856) "load")
    let (set_load : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6859 : 'tags this) ->
        fun (x6860 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6859) "load"
            (ProgressEvent.t_to_js FileReader.t_to_js x6860)
    let (get_loadend : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6863 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6863) "loadend")
    let (set_loadend : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6866 : 'tags this) ->
        fun (x6867 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6866) "loadend"
            (ProgressEvent.t_to_js FileReader.t_to_js x6867)
    let (get_loadstart : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6870 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6870) "loadstart")
    let (set_loadstart : 'tags this -> FileReader.t ProgressEvent.t -> unit)
      =
      fun (x6873 : 'tags this) ->
        fun (x6874 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6873) "loadstart"
            (ProgressEvent.t_to_js FileReader.t_to_js x6874)
    let (get_progress : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x6877 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6877) "progress")
    let (set_progress : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x6880 : 'tags this) ->
        fun (x6881 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6880) "progress"
            (ProgressEvent.t_to_js FileReader.t_to_js x6881)
    let cast_from = Obj.magic
  end
module EventSourceEventMap =
  struct
    type t = [ `EventSourceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6885 : Ojs.t) -> t_of_js x6885
    and t_0_to_js : t_0 -> Ojs.t = fun (x6884 : t) -> t_to_js x6884
    type tags = [ `EventSourceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6888 : Ojs.t) -> intf_of_js __tags_of_js x6888
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6886 : __tags intf) -> intf_to_js __tags_to_js x6886
    let (get_error : 'tags this -> Event.t) =
      fun (x6890 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6890) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x6892 : 'tags this) ->
        fun (x6893 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6892) "error"
            (Event.t_to_js x6893)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6895 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6895) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6897 : 'tags this) ->
        fun (x6898 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6897) "message"
            (MessageEvent.t_0_to_js x6898)
    let (get_open : 'tags this -> Event.t) =
      fun (x6900 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6900) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x6902 : 'tags this) ->
        fun (x6903 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6902) "open"
            (Event.t_to_js x6903)
    let cast_from = Obj.magic
  end
module GLenum =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6906 : Ojs.t) -> Ojs.float_of_js x6906
    and t_to_js : t -> Ojs.t = fun (x6905 : float) -> Ojs.float_to_js x6905
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6908 : Ojs.t) -> t_of_js x6908
    and t_0_to_js : t_0 -> Ojs.t = fun (x6907 : t) -> t_to_js x6907
  end
module EXT_texture_compression_rgtc =
  struct
    type t = [ `EXT_texture_compression_rgtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6910 : Ojs.t) -> t_of_js x6910
    and t_0_to_js : t_0 -> Ojs.t = fun (x6909 : t) -> t_to_js x6909
    type tags = [ `EXT_texture_compression_rgtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6913 : Ojs.t) -> intf_of_js __tags_of_js x6913
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6911 : __tags intf) -> intf_to_js __tags_to_js x6911
    let (get_COMPRESSED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t) =
      fun (x6915 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6915)
             "COMPRESSED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x6917 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6917)
             "COMPRESSED_RED_RGTC1_EXT")
    let (get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t)
      =
      fun (x6919 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6919)
             "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_SIGNED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x6921 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6921)
             "COMPRESSED_SIGNED_RED_RGTC1_EXT")
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6924 : Ojs.t) -> t_of_js x6924
    and t_0_to_js : t_0 -> Ojs.t = fun (x6923 : t) -> t_to_js x6923
    type tags =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6927 : Ojs.t) -> intf_of_js __tags_of_js x6927
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6925 : __tags intf) -> intf_to_js __tags_to_js x6925
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x6929 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6929) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6931 : 'tags this) ->
        fun (x6932 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6931) "message"
            (MessageEvent.t_0_to_js x6932)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x6934 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6934) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x6936 : 'tags this) ->
        fun (x6937 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6936) "messageerror"
            (MessageEvent.t_0_to_js x6937)
    let cast_from = Obj.magic
  end
module Console =
  struct
    type t = [ `Console ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6940 : Ojs.t) -> t_of_js x6940
    and t_0_to_js : t_0 -> Ojs.t = fun (x6939 : t) -> t_to_js x6939
    type tags = [ `Console ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Console ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6943 : Ojs.t) -> intf_of_js __tags_of_js x6943
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6941 : __tags intf) -> intf_to_js __tags_to_js x6941
    let (assert_ :
      'tags this -> ?condition:bool -> data:any list -> unit -> unit) =
      fun (x6950 : 'tags this) ->
        fun ?condition:(x6945 : bool option) ->
          fun ~data:(x6946 : any list) ->
            fun () ->
              ignore
                (let x6952 = this_to_js Obj.magic x6950 in
                 Ojs.call (Ojs.get_prop_ascii x6952 "assert") "apply"
                   [|x6952;((let x6947 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6945 with
                              | Some x6949 ->
                                  ignore
                                    (Ojs.call x6947 "push"
                                       [|(Ojs.bool_to_js x6949)|])
                              | None -> ());
                             List.iter
                               (fun (x6948 : any) ->
                                  ignore
                                    (Ojs.call x6947 "push"
                                       [|(any_to_js x6948)|])) x6946;
                             x6947))|])
    let (clear : 'tags this -> unit) =
      fun (x6953 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6953) "clear" [||])
    let (count : 'tags this -> ?label:string -> unit -> unit) =
      fun (x6958 : 'tags this) ->
        fun ?label:(x6955 : string option) ->
          fun () ->
            ignore
              (let x6960 = this_to_js Obj.magic x6958 in
               Ojs.call (Ojs.get_prop_ascii x6960 "count") "apply"
                 [|x6960;((let x6956 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6955 with
                            | Some x6957 ->
                                ignore
                                  (Ojs.call x6956 "push"
                                     [|(Ojs.string_to_js x6957)|])
                            | None -> ());
                           x6956))|])
    let (countReset : 'tags this -> ?label:string -> unit -> unit) =
      fun (x6964 : 'tags this) ->
        fun ?label:(x6961 : string option) ->
          fun () ->
            ignore
              (let x6966 = this_to_js Obj.magic x6964 in
               Ojs.call (Ojs.get_prop_ascii x6966 "countReset") "apply"
                 [|x6966;((let x6962 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x6961 with
                            | Some x6963 ->
                                ignore
                                  (Ojs.call x6962 "push"
                                     [|(Ojs.string_to_js x6963)|])
                            | None -> ());
                           x6962))|])
    let (debug : 'tags this -> data:any list -> unit) =
      fun (x6970 : 'tags this) ->
        fun ~data:(x6967 : any list) ->
          ignore
            (let x6972 = this_to_js Obj.magic x6970 in
             Ojs.call (Ojs.get_prop_ascii x6972 "debug") "apply"
               [|x6972;((let x6968 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6969 : any) ->
                              ignore
                                (Ojs.call x6968 "push" [|(any_to_js x6969)|]))
                           x6967;
                         x6968))|])
    let (dir : 'tags this -> ?item:any -> ?options:any -> unit -> unit) =
      fun (x6978 : 'tags this) ->
        fun ?item:(x6973 : any option) ->
          fun ?options:(x6974 : any option) ->
            fun () ->
              ignore
                (let x6980 = this_to_js Obj.magic x6978 in
                 Ojs.call (Ojs.get_prop_ascii x6980 "dir") "apply"
                   [|x6980;((let x6975 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x6973 with
                              | Some x6977 ->
                                  ignore
                                    (Ojs.call x6975 "push"
                                       [|(any_to_js x6977)|])
                              | None -> ());
                             (match x6974 with
                              | Some x6976 ->
                                  ignore
                                    (Ojs.call x6975 "push"
                                       [|(any_to_js x6976)|])
                              | None -> ());
                             x6975))|])
    let (dirxml : 'tags this -> data:any list -> unit) =
      fun (x6984 : 'tags this) ->
        fun ~data:(x6981 : any list) ->
          ignore
            (let x6986 = this_to_js Obj.magic x6984 in
             Ojs.call (Ojs.get_prop_ascii x6986 "dirxml") "apply"
               [|x6986;((let x6982 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6983 : any) ->
                              ignore
                                (Ojs.call x6982 "push" [|(any_to_js x6983)|]))
                           x6981;
                         x6982))|])
    let (error : 'tags this -> data:any list -> unit) =
      fun (x6990 : 'tags this) ->
        fun ~data:(x6987 : any list) ->
          ignore
            (let x6992 = this_to_js Obj.magic x6990 in
             Ojs.call (Ojs.get_prop_ascii x6992 "error") "apply"
               [|x6992;((let x6988 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6989 : any) ->
                              ignore
                                (Ojs.call x6988 "push" [|(any_to_js x6989)|]))
                           x6987;
                         x6988))|])
    let (group : 'tags this -> data:any list -> unit) =
      fun (x6996 : 'tags this) ->
        fun ~data:(x6993 : any list) ->
          ignore
            (let x6998 = this_to_js Obj.magic x6996 in
             Ojs.call (Ojs.get_prop_ascii x6998 "group") "apply"
               [|x6998;((let x6994 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x6995 : any) ->
                              ignore
                                (Ojs.call x6994 "push" [|(any_to_js x6995)|]))
                           x6993;
                         x6994))|])
    let (groupCollapsed : 'tags this -> data:any list -> unit) =
      fun (x7002 : 'tags this) ->
        fun ~data:(x6999 : any list) ->
          ignore
            (let x7004 = this_to_js Obj.magic x7002 in
             Ojs.call (Ojs.get_prop_ascii x7004 "groupCollapsed") "apply"
               [|x7004;((let x7000 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x7001 : any) ->
                              ignore
                                (Ojs.call x7000 "push" [|(any_to_js x7001)|]))
                           x6999;
                         x7000))|])
    let (groupEnd : 'tags this -> unit) =
      fun (x7005 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7005) "groupEnd" [||])
    let (info : 'tags this -> data:any list -> unit) =
      fun (x7010 : 'tags this) ->
        fun ~data:(x7007 : any list) ->
          ignore
            (let x7012 = this_to_js Obj.magic x7010 in
             Ojs.call (Ojs.get_prop_ascii x7012 "info") "apply"
               [|x7012;((let x7008 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x7009 : any) ->
                              ignore
                                (Ojs.call x7008 "push" [|(any_to_js x7009)|]))
                           x7007;
                         x7008))|])
    let (log : 'tags this -> data:any list -> unit) =
      fun (x7016 : 'tags this) ->
        fun ~data:(x7013 : any list) ->
          ignore
            (let x7018 = this_to_js Obj.magic x7016 in
             Ojs.call (Ojs.get_prop_ascii x7018 "log") "apply"
               [|x7018;((let x7014 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x7015 : any) ->
                              ignore
                                (Ojs.call x7014 "push" [|(any_to_js x7015)|]))
                           x7013;
                         x7014))|])
    let (table :
      'tags this ->
        ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun (x7025 : 'tags this) ->
        fun ?tabularData:(x7019 : any option) ->
          fun ?properties:(x7020 : string list option) ->
            fun () ->
              ignore
                (let x7027 = this_to_js Obj.magic x7025 in
                 Ojs.call (Ojs.get_prop_ascii x7027 "table") "apply"
                   [|x7027;((let x7021 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7019 with
                              | Some x7024 ->
                                  ignore
                                    (Ojs.call x7021 "push"
                                       [|(any_to_js x7024)|])
                              | None -> ());
                             (match x7020 with
                              | Some x7022 ->
                                  ignore
                                    (Ojs.call x7021 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x7022)|])
                              | None -> ());
                             x7021))|])
    let (time : 'tags this -> ?label:string -> unit -> unit) =
      fun (x7031 : 'tags this) ->
        fun ?label:(x7028 : string option) ->
          fun () ->
            ignore
              (let x7033 = this_to_js Obj.magic x7031 in
               Ojs.call (Ojs.get_prop_ascii x7033 "time") "apply"
                 [|x7033;((let x7029 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7028 with
                            | Some x7030 ->
                                ignore
                                  (Ojs.call x7029 "push"
                                     [|(Ojs.string_to_js x7030)|])
                            | None -> ());
                           x7029))|])
    let (timeEnd : 'tags this -> ?label:string -> unit -> unit) =
      fun (x7037 : 'tags this) ->
        fun ?label:(x7034 : string option) ->
          fun () ->
            ignore
              (let x7039 = this_to_js Obj.magic x7037 in
               Ojs.call (Ojs.get_prop_ascii x7039 "timeEnd") "apply"
                 [|x7039;((let x7035 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7034 with
                            | Some x7036 ->
                                ignore
                                  (Ojs.call x7035 "push"
                                     [|(Ojs.string_to_js x7036)|])
                            | None -> ());
                           x7035))|])
    let (timeLog :
      'tags this -> ?label:string -> data:any list -> unit -> unit) =
      fun (x7045 : 'tags this) ->
        fun ?label:(x7040 : string option) ->
          fun ~data:(x7041 : any list) ->
            fun () ->
              ignore
                (let x7047 = this_to_js Obj.magic x7045 in
                 Ojs.call (Ojs.get_prop_ascii x7047 "timeLog") "apply"
                   [|x7047;((let x7042 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x7040 with
                              | Some x7044 ->
                                  ignore
                                    (Ojs.call x7042 "push"
                                       [|(Ojs.string_to_js x7044)|])
                              | None -> ());
                             List.iter
                               (fun (x7043 : any) ->
                                  ignore
                                    (Ojs.call x7042 "push"
                                       [|(any_to_js x7043)|])) x7041;
                             x7042))|])
    let (timeStamp : 'tags this -> ?label:string -> unit -> unit) =
      fun (x7051 : 'tags this) ->
        fun ?label:(x7048 : string option) ->
          fun () ->
            ignore
              (let x7053 = this_to_js Obj.magic x7051 in
               Ojs.call (Ojs.get_prop_ascii x7053 "timeStamp") "apply"
                 [|x7053;((let x7049 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7048 with
                            | Some x7050 ->
                                ignore
                                  (Ojs.call x7049 "push"
                                     [|(Ojs.string_to_js x7050)|])
                            | None -> ());
                           x7049))|])
    let (trace : 'tags this -> data:any list -> unit) =
      fun (x7057 : 'tags this) ->
        fun ~data:(x7054 : any list) ->
          ignore
            (let x7059 = this_to_js Obj.magic x7057 in
             Ojs.call (Ojs.get_prop_ascii x7059 "trace") "apply"
               [|x7059;((let x7055 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x7056 : any) ->
                              ignore
                                (Ojs.call x7055 "push" [|(any_to_js x7056)|]))
                           x7054;
                         x7055))|])
    let (warn : 'tags this -> data:any list -> unit) =
      fun (x7063 : 'tags this) ->
        fun ~data:(x7060 : any list) ->
          ignore
            (let x7065 = this_to_js Obj.magic x7063 in
             Ojs.call (Ojs.get_prop_ascii x7065 "warn") "apply"
               [|x7065;((let x7061 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x7062 : any) ->
                              ignore
                                (Ojs.call x7061 "push" [|(any_to_js x7062)|]))
                           x7060;
                         x7061))|])
    let cast_from = Obj.magic
  end
module BroadcastChannelEventMap =
  struct
    type t = [ `BroadcastChannelEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7067 : Ojs.t) -> t_of_js x7067
    and t_0_to_js : t_0 -> Ojs.t = fun (x7066 : t) -> t_to_js x7066
    type tags = [ `BroadcastChannelEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7070 : Ojs.t) -> intf_of_js __tags_of_js x7070
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7068 : __tags intf) -> intf_to_js __tags_to_js x7068
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x7072 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7072) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x7074 : 'tags this) ->
        fun (x7075 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7074) "message"
            (MessageEvent.t_0_to_js x7075)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x7077 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7077) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x7079 : 'tags this) ->
        fun (x7080 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7079) "messageerror"
            (MessageEvent.t_0_to_js x7080)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface133:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WorkerNavigator.t
                          val set_prototype : t -> WorkerNavigator.t -> unit
                          val create : t -> WorkerNavigator.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7083 : Ojs.t) -> x7083
    and t_to_js : t -> Ojs.t = fun (x7082 : Ojs.t) -> x7082
    let (get_prototype : t -> WorkerNavigator.t) =
      fun (x7084 : t) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7084) "prototype")
    let (set_prototype : t -> WorkerNavigator.t -> unit) =
      fun (x7085 : t) ->
        fun (x7086 : WorkerNavigator.t) ->
          Ojs.set_prop_ascii (t_to_js x7085) "prototype"
            (WorkerNavigator.t_to_js x7086)
    let (create : t -> WorkerNavigator.t) =
      fun (x7087 : t) ->
        WorkerNavigator.t_of_js (Ojs.new_obj (t_to_js x7087) [||])
  end
 and
  WorkerNavigator:sig
                    type t =
                      [ `NavigatorConcurrentHardware  | `NavigatorID 
                      | `NavigatorLanguage  | `NavigatorNetworkInformation 
                      | `NavigatorOnLine  | `NavigatorStorage 
                      | `WorkerNavigator ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags =
                      [ `NavigatorConcurrentHardware  | `NavigatorID 
                      | `NavigatorLanguage  | `NavigatorNetworkInformation 
                      | `NavigatorOnLine  | `NavigatorStorage 
                      | `WorkerNavigator ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags =
                        [ `NavigatorConcurrentHardware  | `NavigatorID 
                        | `NavigatorLanguage  | `NavigatorNetworkInformation 
                        | `NavigatorOnLine  | `NavigatorStorage 
                        | `WorkerNavigator ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `WorkerNavigator ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_mediaCapabilities :
                      'tags this -> MediaCapabilities.t
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create : unit -> t
                  end =
  struct
    type t =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7089 : Ojs.t) -> t_of_js x7089
    and t_0_to_js : t_0 -> Ojs.t = fun (x7088 : t) -> t_to_js x7088
    type tags =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerNavigator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7092 : Ojs.t) -> intf_of_js __tags_of_js x7092
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7090 : __tags intf) -> intf_to_js __tags_to_js x7090
    let (get_mediaCapabilities : 'tags this -> MediaCapabilities.t) =
      fun (x7094 : 'tags this) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7094)
             "mediaCapabilities")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") [||])
  end
module rec
  AnonymousInterface132:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WorkerLocation.t
                          val set_prototype : t -> WorkerLocation.t -> unit
                          val create : t -> WorkerLocation.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7097 : Ojs.t) -> x7097
    and t_to_js : t -> Ojs.t = fun (x7096 : Ojs.t) -> x7096
    let (get_prototype : t -> WorkerLocation.t) =
      fun (x7098 : t) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7098) "prototype")
    let (set_prototype : t -> WorkerLocation.t -> unit) =
      fun (x7099 : t) ->
        fun (x7100 : WorkerLocation.t) ->
          Ojs.set_prop_ascii (t_to_js x7099) "prototype"
            (WorkerLocation.t_to_js x7100)
    let (create : t -> WorkerLocation.t) =
      fun (x7101 : t) ->
        WorkerLocation.t_of_js (Ojs.new_obj (t_to_js x7101) [||])
  end
 and
  WorkerLocation:sig
                   type t = [ `WorkerLocation ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `WorkerLocation ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `WorkerLocation ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `WorkerLocation ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_hash : 'tags this -> string
                   val get_host : 'tags this -> string
                   val get_hostname : 'tags this -> string
                   val get_href : 'tags this -> string
                   val toString : 'tags this -> string
                   val get_origin : 'tags this -> string
                   val get_pathname : 'tags this -> string
                   val get_port : 'tags this -> string
                   val get_protocol : 'tags this -> string
                   val get_search : 'tags this -> string
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `WorkerLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7103 : Ojs.t) -> t_of_js x7103
    and t_0_to_js : t_0 -> Ojs.t = fun (x7102 : t) -> t_to_js x7102
    type tags = [ `WorkerLocation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7106 : Ojs.t) -> intf_of_js __tags_of_js x7106
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7104 : __tags intf) -> intf_to_js __tags_to_js x7104
    let (get_hash : 'tags this -> string) =
      fun (x7108 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7108) "hash")
    let (get_host : 'tags this -> string) =
      fun (x7110 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7110) "host")
    let (get_hostname : 'tags this -> string) =
      fun (x7112 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7112) "hostname")
    let (get_href : 'tags this -> string) =
      fun (x7114 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7114) "href")
    let (toString : 'tags this -> string) =
      fun (x7116 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x7116) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x7118 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7118) "origin")
    let (get_pathname : 'tags this -> string) =
      fun (x7120 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7120) "pathname")
    let (get_port : 'tags this -> string) =
      fun (x7122 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7122) "port")
    let (get_protocol : 'tags this -> string) =
      fun (x7124 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7124) "protocol")
    let (get_search : 'tags this -> string) =
      fun (x7126 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7126) "search")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerLocation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerLocation") [||])
  end
module VoidFunction =
  struct
    type t = [ `VoidFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7129 : Ojs.t) -> t_of_js x7129
    and t_0_to_js : t_0 -> Ojs.t = fun (x7128 : t) -> t_to_js x7128
    type tags = [ `VoidFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7132 : Ojs.t) -> intf_of_js __tags_of_js x7132
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7130 : __tags intf) -> intf_to_js __tags_to_js x7130
    let (apply : 'tags this -> unit) =
      fun (x7134 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x7134) [||])
    let cast_from = Obj.magic
  end
module TimerHandler =
  struct
    type t = untyped_function or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x7138 : Ojs.t) -> or_string_of_js untyped_function_of_js x7138
    and t_to_js : t -> Ojs.t =
      fun (x7136 : untyped_function or_string) ->
        or_string_to_js untyped_function_to_js x7136
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7141 : Ojs.t) -> t_of_js x7141
    and t_0_to_js : t_0 -> Ojs.t = fun (x7140 : t) -> t_to_js x7140
  end
module OffscreenCanvas =
  struct
    type t = [ `EventTarget  | `OffscreenCanvas ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7143 : Ojs.t) -> t_of_js x7143
    and t_0_to_js : t_0 -> Ojs.t = fun (x7142 : t) -> t_to_js x7142
    type tags = [ `EventTarget  | `OffscreenCanvas ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7146 : Ojs.t) -> intf_of_js __tags_of_js x7146
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7144 : __tags intf) -> intf_to_js __tags_to_js x7144
    let cast_from = Obj.magic
  end
module CanvasImageSource =
  struct
    type t = (ImageBitmap.t, OffscreenCanvas.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x7151 : Ojs.t) ->
        union2_of_js ImageBitmap.t_of_js OffscreenCanvas.t_of_js x7151
    and t_to_js : t -> Ojs.t =
      fun (x7148 : (ImageBitmap.t, OffscreenCanvas.t) union2) ->
        union2_to_js ImageBitmap.t_to_js OffscreenCanvas.t_to_js x7148
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7155 : Ojs.t) -> t_of_js x7155
    and t_0_to_js : t_0 -> Ojs.t = fun (x7154 : t) -> t_to_js x7154
  end
module PredefinedColorSpace =
  struct
    type t = [ `L_s61_display_p3  | `L_s184_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7157 : Ojs.t) ->
        let x7158 = x7157 in
        match Ojs.string_of_js x7158 with
        | "display-p3" -> `L_s61_display_p3
        | "srgb" -> `L_s184_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7156 : [ `L_s61_display_p3  | `L_s184_srgb ]) ->
        match x7156 with
        | `L_s61_display_p3 -> Ojs.string_to_js "display-p3"
        | `L_s184_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7160 : Ojs.t) -> t_of_js x7160
    and t_0_to_js : t_0 -> Ojs.t = fun (x7159 : t) -> t_to_js x7159
  end
module ImageDataSettings =
  struct
    type t = [ `ImageDataSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7162 : Ojs.t) -> t_of_js x7162
    and t_0_to_js : t_0 -> Ojs.t = fun (x7161 : t) -> t_to_js x7161
    type tags = [ `ImageDataSettings ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7165 : Ojs.t) -> intf_of_js __tags_of_js x7165
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7163 : __tags intf) -> intf_to_js __tags_to_js x7163
    let (get_colorSpace : 'tags this -> PredefinedColorSpace.t) =
      fun (x7167 : 'tags this) ->
        PredefinedColorSpace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7167) "colorSpace")
    let (set_colorSpace : 'tags this -> PredefinedColorSpace.t -> unit) =
      fun (x7169 : 'tags this) ->
        fun (x7170 : PredefinedColorSpace.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7169) "colorSpace"
            (PredefinedColorSpace.t_to_js x7170)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface57:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ImageData.t
                         val set_prototype : t -> ImageData.t -> unit
                         val create :
                           t ->
                             sw:float ->
                               sh:float ->
                                 ?settings:ImageDataSettings.t ->
                                   unit -> ImageData.t
                         val create' :
                           t ->
                             data:Uint8ClampedArray.t_0 ->
                               sw:float ->
                                 ?sh:float ->
                                   ?settings:ImageDataSettings.t ->
                                     unit -> ImageData.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7173 : Ojs.t) -> x7173
    and t_to_js : t -> Ojs.t = fun (x7172 : Ojs.t) -> x7172
    let (get_prototype : t -> ImageData.t) =
      fun (x7174 : t) ->
        ImageData.t_of_js (Ojs.get_prop_ascii (t_to_js x7174) "prototype")
    let (set_prototype : t -> ImageData.t -> unit) =
      fun (x7175 : t) ->
        fun (x7176 : ImageData.t) ->
          Ojs.set_prop_ascii (t_to_js x7175) "prototype"
            (ImageData.t_to_js x7176)
    let (create :
      t ->
        sw:float ->
          sh:float -> ?settings:ImageDataSettings.t -> unit -> ImageData.t)
      =
      fun (x7182 : t) ->
        fun ~sw:(x7177 : float) ->
          fun ~sh:(x7178 : float) ->
            fun ?settings:(x7179 : ImageDataSettings.t option) ->
              fun () ->
                ImageData.t_of_js
                  (Ojs.new_obj_arr (t_to_js x7182)
                     (let x7180 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x7180 "push" [|(Ojs.float_to_js x7177)|]);
                      ignore
                        (Ojs.call x7180 "push" [|(Ojs.float_to_js x7178)|]);
                      (match x7179 with
                       | Some x7181 ->
                           ignore
                             (Ojs.call x7180 "push"
                                [|(ImageDataSettings.t_to_js x7181)|])
                       | None -> ());
                      x7180))
    let (create' :
      t ->
        data:Uint8ClampedArray.t_0 ->
          sw:float ->
            ?sh:float -> ?settings:ImageDataSettings.t -> unit -> ImageData.t)
      =
      fun (x7190 : t) ->
        fun ~data:(x7183 : Uint8ClampedArray.t_0) ->
          fun ~sw:(x7184 : float) ->
            fun ?sh:(x7185 : float option) ->
              fun ?settings:(x7186 : ImageDataSettings.t option) ->
                fun () ->
                  ImageData.t_of_js
                    (Ojs.new_obj_arr (t_to_js x7190)
                       (let x7187 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x7187 "push"
                             [|(Uint8ClampedArray.t_0_to_js x7183)|]);
                        ignore
                          (Ojs.call x7187 "push" [|(Ojs.float_to_js x7184)|]);
                        (match x7185 with
                         | Some x7189 ->
                             ignore
                               (Ojs.call x7187 "push"
                                  [|(Ojs.float_to_js x7189)|])
                         | None -> ());
                        (match x7186 with
                         | Some x7188 ->
                             ignore
                               (Ojs.call x7187 "push"
                                  [|(ImageDataSettings.t_to_js x7188)|])
                         | None -> ());
                        x7187))
  end
 and
  ImageData:sig
              type t = [ `ImageData ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `ImageData ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `ImageData ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_data : 'tags this -> Uint8ClampedArray.t_0
              val get_height : 'tags this -> float
              val get_width : 'tags this -> float
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                sw:float ->
                  sh:float -> ?settings:ImageDataSettings.t -> unit -> t
              val create' :
                data:Uint8ClampedArray.t_0 ->
                  sw:float ->
                    ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t
            end =
  struct
    type t = [ `ImageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7192 : Ojs.t) -> t_of_js x7192
    and t_0_to_js : t_0 -> Ojs.t = fun (x7191 : t) -> t_to_js x7191
    type tags = [ `ImageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7195 : Ojs.t) -> intf_of_js __tags_of_js x7195
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7193 : __tags intf) -> intf_to_js __tags_to_js x7193
    let (get_data : 'tags this -> Uint8ClampedArray.t_0) =
      fun (x7197 : 'tags this) ->
        Uint8ClampedArray.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7197) "data")
    let (get_height : 'tags this -> float) =
      fun (x7199 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7199) "height")
    let (get_width : 'tags this -> float) =
      fun (x7201 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7201) "width")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageData")
             "prototype")
    let (create :
      sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t) =
      fun ~sw:(x7203 : float) ->
        fun ~sh:(x7204 : float) ->
          fun ?settings:(x7205 : ImageDataSettings.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ImageData")
                   (let x7206 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x7206 "push" [|(Ojs.float_to_js x7203)|]);
                    ignore
                      (Ojs.call x7206 "push" [|(Ojs.float_to_js x7204)|]);
                    (match x7205 with
                     | Some x7207 ->
                         ignore
                           (Ojs.call x7206 "push"
                              [|(ImageDataSettings.t_to_js x7207)|])
                     | None -> ());
                    x7206))
    let (create' :
      data:Uint8ClampedArray.t_0 ->
        sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t)
      =
      fun ~data:(x7208 : Uint8ClampedArray.t_0) ->
        fun ~sw:(x7209 : float) ->
          fun ?sh:(x7210 : float option) ->
            fun ?settings:(x7211 : ImageDataSettings.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "ImageData")
                     (let x7212 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x7212 "push"
                           [|(Uint8ClampedArray.t_0_to_js x7208)|]);
                      ignore
                        (Ojs.call x7212 "push" [|(Ojs.float_to_js x7209)|]);
                      (match x7210 with
                       | Some x7214 ->
                           ignore
                             (Ojs.call x7212 "push"
                                [|(Ojs.float_to_js x7214)|])
                       | None -> ());
                      (match x7211 with
                       | Some x7213 ->
                           ignore
                             (Ojs.call x7212 "push"
                                [|(ImageDataSettings.t_to_js x7213)|])
                       | None -> ());
                      x7212))
  end
module ImageBitmapSource =
  struct
    type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x7219 : Ojs.t) ->
        union3_of_js Blob.t_of_js CanvasImageSource.t_of_js ImageData.t_of_js
          x7219
    and t_to_js : t -> Ojs.t =
      fun (x7215 : (Blob.t, CanvasImageSource.t, ImageData.t) union3) ->
        union3_to_js Blob.t_to_js CanvasImageSource.t_to_js ImageData.t_to_js
          x7215
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7224 : Ojs.t) -> t_of_js x7224
    and t_0_to_js : t_0 -> Ojs.t = fun (x7223 : t) -> t_to_js x7223
  end
module ResizeQuality =
  struct
    type t =
      [ `L_s85_high  | `L_s107_low  | `L_s113_medium  | `L_s150_pixelated ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7226 : Ojs.t) ->
        let x7227 = x7226 in
        match Ojs.string_of_js x7227 with
        | "high" -> `L_s85_high
        | "low" -> `L_s107_low
        | "medium" -> `L_s113_medium
        | "pixelated" -> `L_s150_pixelated
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x7225 :
          [ `L_s85_high  | `L_s107_low  | `L_s113_medium 
          | `L_s150_pixelated ])
        ->
        match x7225 with
        | `L_s85_high -> Ojs.string_to_js "high"
        | `L_s107_low -> Ojs.string_to_js "low"
        | `L_s113_medium -> Ojs.string_to_js "medium"
        | `L_s150_pixelated -> Ojs.string_to_js "pixelated"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7229 : Ojs.t) -> t_of_js x7229
    and t_0_to_js : t_0 -> Ojs.t = fun (x7228 : t) -> t_to_js x7228
  end
module PremultiplyAlpha =
  struct
    type t = [ `L_s57_default  | `L_s129_none  | `L_s153_premultiply ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7231 : Ojs.t) ->
        let x7232 = x7231 in
        match Ojs.string_of_js x7232 with
        | "default" -> `L_s57_default
        | "none" -> `L_s129_none
        | "premultiply" -> `L_s153_premultiply
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7230 : [ `L_s57_default  | `L_s129_none  | `L_s153_premultiply ])
        ->
        match x7230 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s129_none -> Ojs.string_to_js "none"
        | `L_s153_premultiply -> Ojs.string_to_js "premultiply"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7234 : Ojs.t) -> t_of_js x7234
    and t_0_to_js : t_0 -> Ojs.t = fun (x7233 : t) -> t_to_js x7233
  end
module ImageOrientation =
  struct
    type t = [ `L_s74_flipY  | `L_s129_none ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7236 : Ojs.t) ->
        let x7237 = x7236 in
        match Ojs.string_of_js x7237 with
        | "flipY" -> `L_s74_flipY
        | "none" -> `L_s129_none
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7235 : [ `L_s74_flipY  | `L_s129_none ]) ->
        match x7235 with
        | `L_s74_flipY -> Ojs.string_to_js "flipY"
        | `L_s129_none -> Ojs.string_to_js "none"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7239 : Ojs.t) -> t_of_js x7239
    and t_0_to_js : t_0 -> Ojs.t = fun (x7238 : t) -> t_to_js x7238
  end
module ColorSpaceConversion =
  struct
    type t = [ `L_s57_default  | `L_s129_none ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7241 : Ojs.t) ->
        let x7242 = x7241 in
        match Ojs.string_of_js x7242 with
        | "default" -> `L_s57_default
        | "none" -> `L_s129_none
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7240 : [ `L_s57_default  | `L_s129_none ]) ->
        match x7240 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s129_none -> Ojs.string_to_js "none"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7244 : Ojs.t) -> t_of_js x7244
    and t_0_to_js : t_0 -> Ojs.t = fun (x7243 : t) -> t_to_js x7243
  end
module ImageBitmapOptions =
  struct
    type t = [ `ImageBitmapOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7246 : Ojs.t) -> t_of_js x7246
    and t_0_to_js : t_0 -> Ojs.t = fun (x7245 : t) -> t_to_js x7245
    type tags = [ `ImageBitmapOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7249 : Ojs.t) -> intf_of_js __tags_of_js x7249
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7247 : __tags intf) -> intf_to_js __tags_to_js x7247
    let (get_colorSpaceConversion : 'tags this -> ColorSpaceConversion.t) =
      fun (x7251 : 'tags this) ->
        ColorSpaceConversion.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7251)
             "colorSpaceConversion")
    let (set_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t -> unit) =
      fun (x7253 : 'tags this) ->
        fun (x7254 : ColorSpaceConversion.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7253)
            "colorSpaceConversion" (ColorSpaceConversion.t_to_js x7254)
    let (get_imageOrientation : 'tags this -> ImageOrientation.t) =
      fun (x7256 : 'tags this) ->
        ImageOrientation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7256) "imageOrientation")
    let (set_imageOrientation : 'tags this -> ImageOrientation.t -> unit) =
      fun (x7258 : 'tags this) ->
        fun (x7259 : ImageOrientation.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7258) "imageOrientation"
            (ImageOrientation.t_to_js x7259)
    let (get_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t) =
      fun (x7261 : 'tags this) ->
        PremultiplyAlpha.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7261) "premultiplyAlpha")
    let (set_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t -> unit) =
      fun (x7263 : 'tags this) ->
        fun (x7264 : PremultiplyAlpha.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7263) "premultiplyAlpha"
            (PremultiplyAlpha.t_to_js x7264)
    let (get_resizeHeight : 'tags this -> float) =
      fun (x7266 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7266) "resizeHeight")
    let (set_resizeHeight : 'tags this -> float -> unit) =
      fun (x7268 : 'tags this) ->
        fun (x7269 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7268) "resizeHeight"
            (Ojs.float_to_js x7269)
    let (get_resizeQuality : 'tags this -> ResizeQuality.t) =
      fun (x7271 : 'tags this) ->
        ResizeQuality.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7271) "resizeQuality")
    let (set_resizeQuality : 'tags this -> ResizeQuality.t -> unit) =
      fun (x7273 : 'tags this) ->
        fun (x7274 : ResizeQuality.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7273) "resizeQuality"
            (ResizeQuality.t_to_js x7274)
    let (get_resizeWidth : 'tags this -> float) =
      fun (x7276 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7276) "resizeWidth")
    let (set_resizeWidth : 'tags this -> float -> unit) =
      fun (x7278 : 'tags this) ->
        fun (x7279 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7278) "resizeWidth"
            (Ojs.float_to_js x7279)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface47:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> IDBFactory.t
                         val set_prototype : t -> IDBFactory.t -> unit
                         val create : t -> IDBFactory.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7282 : Ojs.t) -> x7282
    and t_to_js : t -> Ojs.t = fun (x7281 : Ojs.t) -> x7281
    let (get_prototype : t -> IDBFactory.t) =
      fun (x7283 : t) ->
        IDBFactory.t_of_js (Ojs.get_prop_ascii (t_to_js x7283) "prototype")
    let (set_prototype : t -> IDBFactory.t -> unit) =
      fun (x7284 : t) ->
        fun (x7285 : IDBFactory.t) ->
          Ojs.set_prop_ascii (t_to_js x7284) "prototype"
            (IDBFactory.t_to_js x7285)
    let (create : t -> IDBFactory.t) =
      fun (x7286 : t) ->
        IDBFactory.t_of_js (Ojs.new_obj (t_to_js x7286) [||])
  end
 and
  IDBFactory:sig
               type t = [ `IDBFactory ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `IDBFactory ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `IDBFactory ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `IDBFactory ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val cmp : 'tags this -> first:any -> second:any -> float
               val databases :
                 'tags this -> IDBDatabaseInfo.t list Promise.t_1
               val deleteDatabase :
                 'tags this -> name:string -> IDBOpenDBRequest.t
               val open_ :
                 'tags this ->
                   name:string ->
                     ?version:float -> unit -> IDBOpenDBRequest.t
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create : unit -> t
             end =
  struct
    type t = [ `IDBFactory ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7288 : Ojs.t) -> t_of_js x7288
    and t_0_to_js : t_0 -> Ojs.t = fun (x7287 : t) -> t_to_js x7287
    type tags = [ `IDBFactory ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7291 : Ojs.t) -> intf_of_js __tags_of_js x7291
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7289 : __tags intf) -> intf_to_js __tags_to_js x7289
    let (cmp : 'tags this -> first:any -> second:any -> float) =
      fun (x7295 : 'tags this) ->
        fun ~first:(x7293 : any) ->
          fun ~second:(x7294 : any) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x7295) "cmp"
                 [|(any_to_js x7293);(any_to_js x7294)|])
    let (databases : 'tags this -> IDBDatabaseInfo.t list Promise.t_1) =
      fun (x7297 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x7299 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x7299)
          (Ojs.call (this_to_js Obj.magic x7297) "databases" [||])
    let (deleteDatabase : 'tags this -> name:string -> IDBOpenDBRequest.t) =
      fun (x7302 : 'tags this) ->
        fun ~name:(x7301 : string) ->
          IDBOpenDBRequest.t_of_js
            (Ojs.call (this_to_js Obj.magic x7302) "deleteDatabase"
               [|(Ojs.string_to_js x7301)|])
    let (open_ :
      'tags this ->
        name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun (x7308 : 'tags this) ->
        fun ~name:(x7304 : string) ->
          fun ?version:(x7305 : float option) ->
            fun () ->
              IDBOpenDBRequest.t_of_js
                (let x7310 = this_to_js Obj.magic x7308 in
                 Ojs.call (Ojs.get_prop_ascii x7310 "open") "apply"
                   [|x7310;((let x7306 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7306 "push"
                                  [|(Ojs.string_to_js x7304)|]);
                             (match x7305 with
                              | Some x7307 ->
                                  ignore
                                    (Ojs.call x7306 "push"
                                       [|(Ojs.float_to_js x7307)|])
                              | None -> ());
                             x7306))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBFactory")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBFactory") [||])
  end
module rec
  AnonymousInterface14:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Crypto.t
                         val set_prototype : t -> Crypto.t -> unit
                         val create : t -> Crypto.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7312 : Ojs.t) -> x7312
    and t_to_js : t -> Ojs.t = fun (x7311 : Ojs.t) -> x7311
    let (get_prototype : t -> Crypto.t) =
      fun (x7313 : t) ->
        Crypto.t_of_js (Ojs.get_prop_ascii (t_to_js x7313) "prototype")
    let (set_prototype : t -> Crypto.t -> unit) =
      fun (x7314 : t) ->
        fun (x7315 : Crypto.t) ->
          Ojs.set_prop_ascii (t_to_js x7314) "prototype"
            (Crypto.t_to_js x7315)
    let (create : t -> Crypto.t) =
      fun (x7316 : t) -> Crypto.t_of_js (Ojs.new_obj (t_to_js x7316) [||])
  end
 and
  Crypto:sig
           type t = [ `Crypto ] intf
           type t_0 = t
           [@@@js.stop ]
           type tags = [ `Crypto ]
           type tags_0 = tags
           [@@@js.start ]
           [@@@js.implem type tags = [ `Crypto ]
             type tags_0 = tags]
           type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
           val t_to_js : t -> Ojs.t
           val t_of_js : Ojs.t -> t
           val t_0_to_js : t_0 -> Ojs.t
           val t_0_of_js : Ojs.t -> t_0
           val get_subtle : 'tags this -> SubtleCrypto.t
           val getRandomValues : 'tags this -> array:'T -> 'T
           val cast_from : 'tags this -> t
           val prototype : unit -> t
           val create : unit -> t
         end =
  struct
    type t = [ `Crypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7318 : Ojs.t) -> t_of_js x7318
    and t_0_to_js : t_0 -> Ojs.t = fun (x7317 : t) -> t_to_js x7317
    type tags = [ `Crypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7321 : Ojs.t) -> intf_of_js __tags_of_js x7321
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7319 : __tags intf) -> intf_to_js __tags_to_js x7319
    let (get_subtle : 'tags this -> SubtleCrypto.t) =
      fun (x7323 : 'tags this) ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7323) "subtle")
    let (getRandomValues : 'tags this -> array:'T -> 'T) =
      fun (x7326 : 'tags this) ->
        fun ~array:(x7325 : 'T) ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic x7326) "getRandomValues"
               [|(Obj.magic x7325)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Crypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Crypto") [||])
  end
module rec
  AnonymousInterface6:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> CacheStorage.t
                        val set_prototype : t -> CacheStorage.t -> unit
                        val create : t -> CacheStorage.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7329 : Ojs.t) -> x7329
    and t_to_js : t -> Ojs.t = fun (x7328 : Ojs.t) -> x7328
    let (get_prototype : t -> CacheStorage.t) =
      fun (x7330 : t) ->
        CacheStorage.t_of_js (Ojs.get_prop_ascii (t_to_js x7330) "prototype")
    let (set_prototype : t -> CacheStorage.t -> unit) =
      fun (x7331 : t) ->
        fun (x7332 : CacheStorage.t) ->
          Ojs.set_prop_ascii (t_to_js x7331) "prototype"
            (CacheStorage.t_to_js x7332)
    let (create : t -> CacheStorage.t) =
      fun (x7333 : t) ->
        CacheStorage.t_of_js (Ojs.new_obj (t_to_js x7333) [||])
  end
 and
  CacheStorage:sig
                 type t = [ `CacheStorage ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `CacheStorage ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `CacheStorage ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `CacheStorage ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val delete :
                   'tags this -> cacheName:string -> bool Promise.t_1
                 val has : 'tags this -> cacheName:string -> bool Promise.t_1
                 val keys : 'tags this -> string list Promise.t_1
                 val match_ :
                   'tags this ->
                     request:RequestInfo.t ->
                       ?options:MultiCacheQueryOptions.t ->
                         unit -> Response.t or_undefined Promise.t_1
                 val open_ :
                   'tags this -> cacheName:string -> Cache.t Promise.t_1
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `CacheStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7335 : Ojs.t) -> t_of_js x7335
    and t_0_to_js : t_0 -> Ojs.t = fun (x7334 : t) -> t_to_js x7334
    type tags = [ `CacheStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7338 : Ojs.t) -> intf_of_js __tags_of_js x7338
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7336 : __tags intf) -> intf_to_js __tags_to_js x7336
    let (delete : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x7341 : 'tags this) ->
        fun ~cacheName:(x7340 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x7341) "delete"
               [|(Ojs.string_to_js x7340)|])
    let (has : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x7345 : 'tags this) ->
        fun ~cacheName:(x7344 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x7345) "has"
               [|(Ojs.string_to_js x7344)|])
    let (keys : 'tags this -> string list Promise.t_1) =
      fun (x7348 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x7350 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x7350)
          (Ojs.call (this_to_js Obj.magic x7348) "keys" [||])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:MultiCacheQueryOptions.t ->
            unit -> Response.t or_undefined Promise.t_1)
      =
      fun (x7356 : 'tags this) ->
        fun ~request:(x7352 : RequestInfo.t) ->
          fun ?options:(x7353 : MultiCacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x7359 : Ojs.t) ->
                   or_undefined_of_js Response.t_of_js x7359)
                (let x7358 = this_to_js Obj.magic x7356 in
                 Ojs.call (Ojs.get_prop_ascii x7358 "match") "apply"
                   [|x7358;((let x7354 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7354 "push"
                                  [|(RequestInfo.t_to_js x7352)|]);
                             (match x7353 with
                              | Some x7355 ->
                                  ignore
                                    (Ojs.call x7354 "push"
                                       [|(MultiCacheQueryOptions.t_to_js
                                            x7355)|])
                              | None -> ());
                             x7354))|])
    let (open_ : 'tags this -> cacheName:string -> Cache.t Promise.t_1) =
      fun (x7362 : 'tags this) ->
        fun ~cacheName:(x7361 : string) ->
          Promise.t_1_of_js Cache.t_of_js
            (Ojs.call (this_to_js Obj.magic x7362) "open"
               [|(Ojs.string_to_js x7361)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CacheStorage")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CacheStorage") [||])
  end
module WindowOrWorkerGlobalScope =
  struct
    type t = [ `WindowOrWorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7366 : Ojs.t) -> t_of_js x7366
    and t_0_to_js : t_0 -> Ojs.t = fun (x7365 : t) -> t_to_js x7365
    type tags = [ `WindowOrWorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7369 : Ojs.t) -> intf_of_js __tags_of_js x7369
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7367 : __tags intf) -> intf_to_js __tags_to_js x7367
    let (get_caches : 'tags this -> CacheStorage.t) =
      fun (x7371 : 'tags this) ->
        CacheStorage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7371) "caches")
    let (get_crossOriginIsolated : 'tags this -> bool) =
      fun (x7373 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7373)
             "crossOriginIsolated")
    let (get_crypto : 'tags this -> Crypto.t) =
      fun (x7375 : 'tags this) ->
        Crypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7375) "crypto")
    let (get_indexedDB : 'tags this -> IDBFactory.t) =
      fun (x7377 : 'tags this) ->
        IDBFactory.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7377) "indexedDB")
    let (get_isSecureContext : 'tags this -> bool) =
      fun (x7379 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7379) "isSecureContext")
    let (get_origin : 'tags this -> string) =
      fun (x7381 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7381) "origin")
    let (get_performance : 'tags this -> Performance.t) =
      fun (x7383 : 'tags this) ->
        Performance.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7383) "performance")
    let (atob : 'tags this -> data:string -> string) =
      fun (x7386 : 'tags this) ->
        fun ~data:(x7385 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7386) "atob"
               [|(Ojs.string_to_js x7385)|])
    let (btoa : 'tags this -> data:string -> string) =
      fun (x7389 : 'tags this) ->
        fun ~data:(x7388 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7389) "btoa"
               [|(Ojs.string_to_js x7388)|])
    let (clearInterval : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x7394 : 'tags this) ->
        fun ?handle:(x7391 : float option) ->
          fun () ->
            ignore
              (let x7396 = this_to_js Obj.magic x7394 in
               Ojs.call (Ojs.get_prop_ascii x7396 "clearInterval") "apply"
                 [|x7396;((let x7392 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7391 with
                            | Some x7393 ->
                                ignore
                                  (Ojs.call x7392 "push"
                                     [|(Ojs.float_to_js x7393)|])
                            | None -> ());
                           x7392))|])
    let (clearTimeout : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x7400 : 'tags this) ->
        fun ?handle:(x7397 : float option) ->
          fun () ->
            ignore
              (let x7402 = this_to_js Obj.magic x7400 in
               Ojs.call (Ojs.get_prop_ascii x7402 "clearTimeout") "apply"
                 [|x7402;((let x7398 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7397 with
                            | Some x7399 ->
                                ignore
                                  (Ojs.call x7398 "push"
                                     [|(Ojs.float_to_js x7399)|])
                            | None -> ());
                           x7398))|])
    let (createImageBitmap :
      'tags this ->
        image:ImageBitmapSource.t ->
          ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x7407 : 'tags this) ->
        fun ~image:(x7403 : ImageBitmapSource.t) ->
          fun ?options:(x7404 : ImageBitmapOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ImageBitmap.t_of_js
                (let x7409 = this_to_js Obj.magic x7407 in
                 Ojs.call (Ojs.get_prop_ascii x7409 "createImageBitmap")
                   "apply"
                   [|x7409;((let x7405 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7405 "push"
                                  [|(ImageBitmapSource.t_to_js x7403)|]);
                             (match x7404 with
                              | Some x7406 ->
                                  ignore
                                    (Ojs.call x7405 "push"
                                       [|(ImageBitmapOptions.t_to_js x7406)|])
                              | None -> ());
                             x7405))|])
    let (createImageBitmap' :
      'tags this ->
        image:ImageBitmapSource.t ->
          sx:float ->
            sy:float ->
              sw:float ->
                sh:float ->
                  ?options:ImageBitmapOptions.t ->
                    unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x7419 : 'tags this) ->
        fun ~image:(x7411 : ImageBitmapSource.t) ->
          fun ~sx:(x7412 : float) ->
            fun ~sy:(x7413 : float) ->
              fun ~sw:(x7414 : float) ->
                fun ~sh:(x7415 : float) ->
                  fun ?options:(x7416 : ImageBitmapOptions.t option) ->
                    fun () ->
                      Promise.t_1_of_js ImageBitmap.t_of_js
                        (let x7421 = this_to_js Obj.magic x7419 in
                         Ojs.call
                           (Ojs.get_prop_ascii x7421 "createImageBitmap")
                           "apply"
                           [|x7421;((let x7417 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x7417 "push"
                                          [|(ImageBitmapSource.t_to_js x7411)|]);
                                     ignore
                                       (Ojs.call x7417 "push"
                                          [|(Ojs.float_to_js x7412)|]);
                                     ignore
                                       (Ojs.call x7417 "push"
                                          [|(Ojs.float_to_js x7413)|]);
                                     ignore
                                       (Ojs.call x7417 "push"
                                          [|(Ojs.float_to_js x7414)|]);
                                     ignore
                                       (Ojs.call x7417 "push"
                                          [|(Ojs.float_to_js x7415)|]);
                                     (match x7416 with
                                      | Some x7418 ->
                                          ignore
                                            (Ojs.call x7417 "push"
                                               [|(ImageBitmapOptions.t_to_js
                                                    x7418)|])
                                      | None -> ());
                                     x7417))|])
    let (fetch :
      'tags this ->
        input:RequestInfo.t ->
          ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
      =
      fun (x7427 : 'tags this) ->
        fun ~input:(x7423 : RequestInfo.t) ->
          fun ?init:(x7424 : RequestInit.t option) ->
            fun () ->
              Promise.t_1_of_js Response.t_of_js
                (let x7429 = this_to_js Obj.magic x7427 in
                 Ojs.call (Ojs.get_prop_ascii x7429 "fetch") "apply"
                   [|x7429;((let x7425 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7425 "push"
                                  [|(RequestInfo.t_to_js x7423)|]);
                             (match x7424 with
                              | Some x7426 ->
                                  ignore
                                    (Ojs.call x7425 "push"
                                       [|(RequestInit.t_to_js x7426)|])
                              | None -> ());
                             x7425))|])
    let (queueMicrotask : 'tags this -> callback:VoidFunction.t -> unit) =
      fun (x7432 : 'tags this) ->
        fun ~callback:(x7431 : VoidFunction.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7432) "queueMicrotask"
               [|(VoidFunction.t_to_js x7431)|])
    let (setInterval :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x7440 : 'tags this) ->
        fun ~handler:(x7434 : TimerHandler.t) ->
          fun ?timeout:(x7435 : float option) ->
            fun ~arguments:(x7436 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x7442 = this_to_js Obj.magic x7440 in
                   Ojs.call (Ojs.get_prop_ascii x7442 "setInterval") "apply"
                     [|x7442;((let x7437 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7437 "push"
                                    [|(TimerHandler.t_to_js x7434)|]);
                               (match x7435 with
                                | Some x7439 ->
                                    ignore
                                      (Ojs.call x7437 "push"
                                         [|(Ojs.float_to_js x7439)|])
                                | None -> ());
                               List.iter
                                 (fun (x7438 : any) ->
                                    ignore
                                      (Ojs.call x7437 "push"
                                         [|(any_to_js x7438)|])) x7436;
                               x7437))|])
    let (setTimeout :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x7449 : 'tags this) ->
        fun ~handler:(x7443 : TimerHandler.t) ->
          fun ?timeout:(x7444 : float option) ->
            fun ~arguments:(x7445 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x7451 = this_to_js Obj.magic x7449 in
                   Ojs.call (Ojs.get_prop_ascii x7451 "setTimeout") "apply"
                     [|x7451;((let x7446 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7446 "push"
                                    [|(TimerHandler.t_to_js x7443)|]);
                               (match x7444 with
                                | Some x7448 ->
                                    ignore
                                      (Ojs.call x7446 "push"
                                         [|(Ojs.float_to_js x7448)|])
                                | None -> ());
                               List.iter
                                 (fun (x7447 : any) ->
                                    ignore
                                      (Ojs.call x7446 "push"
                                         [|(any_to_js x7447)|])) x7445;
                               x7446))|])
    let cast_from = Obj.magic
  end
module FontFaceSource =
  struct
    type t = [ `FontFaceSource ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7453 : Ojs.t) -> t_of_js x7453
    and t_0_to_js : t_0 -> Ojs.t = fun (x7452 : t) -> t_to_js x7452
    type tags = [ `FontFaceSource ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7456 : Ojs.t) -> intf_of_js __tags_of_js x7456
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7454 : __tags intf) -> intf_to_js __tags_to_js x7454
    let (get_fonts : 'tags this -> FontFaceSet.t) =
      fun (x7458 : 'tags this) ->
        FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7458) "fonts")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface131:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WorkerGlobalScope.t
                          val set_prototype :
                            t -> WorkerGlobalScope.t -> unit
                          val create : t -> WorkerGlobalScope.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7461 : Ojs.t) -> x7461
    and t_to_js : t -> Ojs.t = fun (x7460 : Ojs.t) -> x7460
    let (get_prototype : t -> WorkerGlobalScope.t) =
      fun (x7462 : t) ->
        WorkerGlobalScope.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7462) "prototype")
    let (set_prototype : t -> WorkerGlobalScope.t -> unit) =
      fun (x7463 : t) ->
        fun (x7464 : WorkerGlobalScope.t) ->
          Ojs.set_prop_ascii (t_to_js x7463) "prototype"
            (WorkerGlobalScope.t_to_js x7464)
    let (create : t -> WorkerGlobalScope.t) =
      fun (x7465 : t) ->
        WorkerGlobalScope.t_of_js (Ojs.new_obj (t_to_js x7465) [||])
  end
 and
  WorkerGlobalScope:sig
                      type t =
                        [ `EventTarget  | `FontFaceSource 
                        | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
                          intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags =
                        [ `EventTarget  | `FontFaceSource 
                        | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags =
                          [ `EventTarget  | `FontFaceSource 
                          | `WindowOrWorkerGlobalScope 
                          | `WorkerGlobalScope ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `WorkerGlobalScope ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_location : 'tags this -> WorkerLocation.t
                      val get_navigator : 'tags this -> WorkerNavigator.t
                      val get_onerror :
                        'tags this ->
                          (this:t -> ev:ErrorEvent.t -> any) or_null
                      val set_onerror :
                        'tags this ->
                          (this:t -> ev:ErrorEvent.t -> any) or_null -> unit
                      val get_onlanguagechange :
                        'tags this -> (this:t -> ev:Event.t -> any) or_null
                      val set_onlanguagechange :
                        'tags this ->
                          (this:t -> ev:Event.t -> any) or_null -> unit
                      val get_onoffline :
                        'tags this -> (this:t -> ev:Event.t -> any) or_null
                      val set_onoffline :
                        'tags this ->
                          (this:t -> ev:Event.t -> any) or_null -> unit
                      val get_ononline :
                        'tags this -> (this:t -> ev:Event.t -> any) or_null
                      val set_ononline :
                        'tags this ->
                          (this:t -> ev:Event.t -> any) or_null -> unit
                      val get_onrejectionhandled :
                        'tags this ->
                          (this:t -> ev:PromiseRejectionEvent.t -> any)
                            or_null
                      val set_onrejectionhandled :
                        'tags this ->
                          (this:t -> ev:PromiseRejectionEvent.t -> any)
                            or_null -> unit
                      val get_onunhandledrejection :
                        'tags this ->
                          (this:t -> ev:PromiseRejectionEvent.t -> any)
                            or_null
                      val set_onunhandledrejection :
                        'tags this ->
                          (this:t -> ev:PromiseRejectionEvent.t -> any)
                            or_null -> unit
                      val get_self : 'tags this -> (t, any) intersection2
                      val importScripts :
                        'tags this -> urls:URL.t or_string list -> unit
                      val addEventListener :
                        'tags this ->
                          type_:'K ->
                            listener:(this:t -> ev:any -> any) ->
                              ?options:AddEventListenerOptions.t or_boolean
                                -> unit -> unit
                      val addEventListener' :
                        'tags this ->
                          type_:string ->
                            listener:EventListenerOrEventListenerObject.t ->
                              ?options:AddEventListenerOptions.t or_boolean
                                -> unit -> unit
                      val removeEventListener :
                        'tags this ->
                          type_:'K ->
                            listener:(this:t -> ev:any -> any) ->
                              ?options:EventListenerOptions.t or_boolean ->
                                unit -> unit
                      val removeEventListener' :
                        'tags this ->
                          type_:string ->
                            listener:EventListenerOrEventListenerObject.t ->
                              ?options:EventListenerOptions.t or_boolean ->
                                unit -> unit
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : unit -> t
                    end =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7467 : Ojs.t) -> t_of_js x7467
    and t_0_to_js : t_0 -> Ojs.t = fun (x7466 : t) -> t_to_js x7466
    type tags =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7470 : Ojs.t) -> intf_of_js __tags_of_js x7470
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7468 : __tags intf) -> intf_to_js __tags_to_js x7468
    let (get_location : 'tags this -> WorkerLocation.t) =
      fun (x7472 : 'tags this) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7472) "location")
    let (get_navigator : 'tags this -> WorkerNavigator.t) =
      fun (x7474 : 'tags this) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7474) "navigator")
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null) =
      fun (x7476 : 'tags this) ->
        or_null_of_js
          (fun (x7478 : Ojs.t) ->
             fun ~this:(x7479 : t) ->
               fun ~ev:(x7480 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x7478
                      [|(t_to_js x7479);(ErrorEvent.t_to_js x7480)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7476) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null -> unit) =
      fun (x7481 : 'tags this) ->
        fun (x7482 : (this:t -> ev:ErrorEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7481) "onerror"
            (or_null_to_js
               (fun (x7483 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7484 : Ojs.t) ->
                       fun (x7485 : Ojs.t) ->
                         any_to_js
                           (x7483 ~this:(t_of_js x7484)
                              ~ev:(ErrorEvent.t_of_js x7485)))) x7482)
    let (get_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x7487 : 'tags this) ->
        or_null_of_js
          (fun (x7489 : Ojs.t) ->
             fun ~this:(x7490 : t) ->
               fun ~ev:(x7491 : Event.t) ->
                 any_of_js
                   (Ojs.apply x7489 [|(t_to_js x7490);(Event.t_to_js x7491)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7487) "onlanguagechange")
    let (set_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x7492 : 'tags this) ->
        fun (x7493 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7492) "onlanguagechange"
            (or_null_to_js
               (fun (x7494 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7495 : Ojs.t) ->
                       fun (x7496 : Ojs.t) ->
                         any_to_js
                           (x7494 ~this:(t_of_js x7495)
                              ~ev:(Event.t_of_js x7496)))) x7493)
    let (get_onoffline : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x7498 : 'tags this) ->
        or_null_of_js
          (fun (x7500 : Ojs.t) ->
             fun ~this:(x7501 : t) ->
               fun ~ev:(x7502 : Event.t) ->
                 any_of_js
                   (Ojs.apply x7500 [|(t_to_js x7501);(Event.t_to_js x7502)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7498) "onoffline")
    let (set_onoffline :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x7503 : 'tags this) ->
        fun (x7504 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7503) "onoffline"
            (or_null_to_js
               (fun (x7505 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7506 : Ojs.t) ->
                       fun (x7507 : Ojs.t) ->
                         any_to_js
                           (x7505 ~this:(t_of_js x7506)
                              ~ev:(Event.t_of_js x7507)))) x7504)
    let (get_ononline : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x7509 : 'tags this) ->
        or_null_of_js
          (fun (x7511 : Ojs.t) ->
             fun ~this:(x7512 : t) ->
               fun ~ev:(x7513 : Event.t) ->
                 any_of_js
                   (Ojs.apply x7511 [|(t_to_js x7512);(Event.t_to_js x7513)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7509) "ononline")
    let (set_ononline :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x7514 : 'tags this) ->
        fun (x7515 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7514) "ononline"
            (or_null_to_js
               (fun (x7516 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7517 : Ojs.t) ->
                       fun (x7518 : Ojs.t) ->
                         any_to_js
                           (x7516 ~this:(t_of_js x7517)
                              ~ev:(Event.t_of_js x7518)))) x7515)
    let (get_onrejectionhandled :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) or_null) =
      fun (x7520 : 'tags this) ->
        or_null_of_js
          (fun (x7522 : Ojs.t) ->
             fun ~this:(x7523 : t) ->
               fun ~ev:(x7524 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x7522
                      [|(t_to_js x7523);(PromiseRejectionEvent.t_to_js x7524)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7520)
             "onrejectionhandled")
    let (set_onrejectionhandled :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) or_null -> unit)
      =
      fun (x7525 : 'tags this) ->
        fun (x7526 : (this:t -> ev:PromiseRejectionEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7525)
            "onrejectionhandled"
            (or_null_to_js
               (fun (x7527 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7528 : Ojs.t) ->
                       fun (x7529 : Ojs.t) ->
                         any_to_js
                           (x7527 ~this:(t_of_js x7528)
                              ~ev:(PromiseRejectionEvent.t_of_js x7529))))
               x7526)
    let (get_onunhandledrejection :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) or_null) =
      fun (x7531 : 'tags this) ->
        or_null_of_js
          (fun (x7533 : Ojs.t) ->
             fun ~this:(x7534 : t) ->
               fun ~ev:(x7535 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x7533
                      [|(t_to_js x7534);(PromiseRejectionEvent.t_to_js x7535)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7531)
             "onunhandledrejection")
    let (set_onunhandledrejection :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) or_null -> unit)
      =
      fun (x7536 : 'tags this) ->
        fun (x7537 : (this:t -> ev:PromiseRejectionEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7536)
            "onunhandledrejection"
            (or_null_to_js
               (fun (x7538 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7539 : Ojs.t) ->
                       fun (x7540 : Ojs.t) ->
                         any_to_js
                           (x7538 ~this:(t_of_js x7539)
                              ~ev:(PromiseRejectionEvent.t_of_js x7540))))
               x7537)
    let (get_self : 'tags this -> (t, any) intersection2) =
      fun (x7542 : 'tags this) ->
        intersection2_of_js t_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7542) "self")
    let (importScripts : 'tags this -> urls:URL.t or_string list -> unit) =
      fun (x7550 : 'tags this) ->
        fun ~urls:(x7546 : URL.t or_string list) ->
          ignore
            (let x7552 = this_to_js Obj.magic x7550 in
             Ojs.call (Ojs.get_prop_ascii x7552 "importScripts") "apply"
               [|x7552;((let x7547 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x7548 : URL.t or_string) ->
                              ignore
                                (Ojs.call x7547 "push"
                                   [|(or_string_to_js URL.t_to_js x7548)|]))
                           x7546;
                         x7547))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7561 : 'tags this) ->
        fun ~type_:(x7553 : 'K) ->
          fun ~listener:(x7554 : this:t -> ev:any -> any) ->
            fun
              ?options:(x7555 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7563 = this_to_js Obj.magic x7561 in
                   Ojs.call (Ojs.get_prop_ascii x7563 "addEventListener")
                     "apply"
                     [|x7563;((let x7556 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7556 "push" [|(Obj.magic x7553)|]);
                               ignore
                                 (Ojs.call x7556 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7559 : Ojs.t) ->
                                            fun (x7560 : Ojs.t) ->
                                              any_to_js
                                                (x7554 ~this:(t_of_js x7559)
                                                   ~ev:(any_of_js x7560))))|]);
                               (match x7555 with
                                | Some x7557 ->
                                    ignore
                                      (Ojs.call x7556 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7557)|])
                                | None -> ());
                               x7556))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7570 : 'tags this) ->
        fun ~type_:(x7564 : string) ->
          fun ~listener:(x7565 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x7566 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7572 = this_to_js Obj.magic x7570 in
                   Ojs.call (Ojs.get_prop_ascii x7572 "addEventListener")
                     "apply"
                     [|x7572;((let x7567 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7567 "push"
                                    [|(Ojs.string_to_js x7564)|]);
                               ignore
                                 (Ojs.call x7567 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7565)|]);
                               (match x7566 with
                                | Some x7568 ->
                                    ignore
                                      (Ojs.call x7567 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7568)|])
                                | None -> ());
                               x7567))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7581 : 'tags this) ->
        fun ~type_:(x7573 : 'K) ->
          fun ~listener:(x7574 : this:t -> ev:any -> any) ->
            fun ?options:(x7575 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7583 = this_to_js Obj.magic x7581 in
                   Ojs.call (Ojs.get_prop_ascii x7583 "removeEventListener")
                     "apply"
                     [|x7583;((let x7576 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7576 "push" [|(Obj.magic x7573)|]);
                               ignore
                                 (Ojs.call x7576 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7579 : Ojs.t) ->
                                            fun (x7580 : Ojs.t) ->
                                              any_to_js
                                                (x7574 ~this:(t_of_js x7579)
                                                   ~ev:(any_of_js x7580))))|]);
                               (match x7575 with
                                | Some x7577 ->
                                    ignore
                                      (Ojs.call x7576 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7577)|])
                                | None -> ());
                               x7576))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7590 : 'tags this) ->
        fun ~type_:(x7584 : string) ->
          fun ~listener:(x7585 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x7586 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7592 = this_to_js Obj.magic x7590 in
                   Ojs.call (Ojs.get_prop_ascii x7592 "removeEventListener")
                     "apply"
                     [|x7592;((let x7587 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7587 "push"
                                    [|(Ojs.string_to_js x7584)|]);
                               ignore
                                 (Ojs.call x7587 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7585)|]);
                               (match x7586 with
                                | Some x7588 ->
                                    ignore
                                      (Ojs.call x7587 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7588)|])
                                | None -> ());
                               x7587))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
             [||])
  end
module rec
  AnonymousInterface98:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> SharedWorkerGlobalScope.t
                         val set_prototype :
                           t -> SharedWorkerGlobalScope.t -> unit
                         val create : t -> SharedWorkerGlobalScope.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7594 : Ojs.t) -> x7594
    and t_to_js : t -> Ojs.t = fun (x7593 : Ojs.t) -> x7593
    let (get_prototype : t -> SharedWorkerGlobalScope.t) =
      fun (x7595 : t) ->
        SharedWorkerGlobalScope.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7595) "prototype")
    let (set_prototype : t -> SharedWorkerGlobalScope.t -> unit) =
      fun (x7596 : t) ->
        fun (x7597 : SharedWorkerGlobalScope.t) ->
          Ojs.set_prop_ascii (t_to_js x7596) "prototype"
            (SharedWorkerGlobalScope.t_to_js x7597)
    let (create : t -> SharedWorkerGlobalScope.t) =
      fun (x7598 : t) ->
        SharedWorkerGlobalScope.t_of_js (Ojs.new_obj (t_to_js x7598) [||])
  end
 and
  SharedWorkerGlobalScope:sig
                            type t =
                              [ `EventTarget  | `FontFaceSource 
                              | `SharedWorkerGlobalScope 
                              | `WindowOrWorkerGlobalScope 
                              | `WorkerGlobalScope ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `EventTarget  | `FontFaceSource 
                              | `SharedWorkerGlobalScope 
                              | `WindowOrWorkerGlobalScope 
                              | `WorkerGlobalScope ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `EventTarget  | `FontFaceSource 
                                | `SharedWorkerGlobalScope 
                                | `WindowOrWorkerGlobalScope 
                                | `WorkerGlobalScope ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `SharedWorkerGlobalScope ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_name : 'tags this -> string
                            val get_onconnect :
                              'tags this ->
                                (this:t -> ev:MessageEvent.t_0 -> any)
                                  or_null
                            val set_onconnect :
                              'tags this ->
                                (this:t -> ev:MessageEvent.t_0 -> any)
                                  or_null -> unit
                            val close : 'tags this -> unit
                            val addEventListener :
                              'tags this ->
                                type_:'K ->
                                  listener:(this:t -> ev:any -> any) ->
                                    ?options:AddEventListenerOptions.t
                                      or_boolean -> unit -> unit
                            val addEventListener' :
                              'tags this ->
                                type_:string ->
                                  listener:EventListenerOrEventListenerObject.t
                                    ->
                                    ?options:AddEventListenerOptions.t
                                      or_boolean -> unit -> unit
                            val removeEventListener :
                              'tags this ->
                                type_:'K ->
                                  listener:(this:t -> ev:any -> any) ->
                                    ?options:EventListenerOptions.t
                                      or_boolean -> unit -> unit
                            val removeEventListener' :
                              'tags this ->
                                type_:string ->
                                  listener:EventListenerOrEventListenerObject.t
                                    ->
                                    ?options:EventListenerOptions.t
                                      or_boolean -> unit -> unit
                            val cast_from : 'tags this -> t
                            val prototype : unit -> t
                            val create : unit -> t
                          end =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7600 : Ojs.t) -> t_of_js x7600
    and t_0_to_js : t_0 -> Ojs.t = fun (x7599 : t) -> t_to_js x7599
    type tags =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7603 : Ojs.t) -> intf_of_js __tags_of_js x7603
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7601 : __tags intf) -> intf_to_js __tags_to_js x7601
    let (get_name : 'tags this -> string) =
      fun (x7605 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7605) "name")
    let (get_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x7607 : 'tags this) ->
        or_null_of_js
          (fun (x7609 : Ojs.t) ->
             fun ~this:(x7610 : t) ->
               fun ~ev:(x7611 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x7609
                      [|(t_to_js x7610);(MessageEvent.t_0_to_js x7611)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7607) "onconnect")
    let (set_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x7612 : 'tags this) ->
        fun (x7613 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7612) "onconnect"
            (or_null_to_js
               (fun (x7614 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7615 : Ojs.t) ->
                       fun (x7616 : Ojs.t) ->
                         any_to_js
                           (x7614 ~this:(t_of_js x7615)
                              ~ev:(MessageEvent.t_0_of_js x7616)))) x7613)
    let (close : 'tags this -> unit) =
      fun (x7618 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x7618) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7628 : 'tags this) ->
        fun ~type_:(x7620 : 'K) ->
          fun ~listener:(x7621 : this:t -> ev:any -> any) ->
            fun
              ?options:(x7622 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7630 = this_to_js Obj.magic x7628 in
                   Ojs.call (Ojs.get_prop_ascii x7630 "addEventListener")
                     "apply"
                     [|x7630;((let x7623 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7623 "push" [|(Obj.magic x7620)|]);
                               ignore
                                 (Ojs.call x7623 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7626 : Ojs.t) ->
                                            fun (x7627 : Ojs.t) ->
                                              any_to_js
                                                (x7621 ~this:(t_of_js x7626)
                                                   ~ev:(any_of_js x7627))))|]);
                               (match x7622 with
                                | Some x7624 ->
                                    ignore
                                      (Ojs.call x7623 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7624)|])
                                | None -> ());
                               x7623))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7637 : 'tags this) ->
        fun ~type_:(x7631 : string) ->
          fun ~listener:(x7632 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x7633 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7639 = this_to_js Obj.magic x7637 in
                   Ojs.call (Ojs.get_prop_ascii x7639 "addEventListener")
                     "apply"
                     [|x7639;((let x7634 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7634 "push"
                                    [|(Ojs.string_to_js x7631)|]);
                               ignore
                                 (Ojs.call x7634 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7632)|]);
                               (match x7633 with
                                | Some x7635 ->
                                    ignore
                                      (Ojs.call x7634 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7635)|])
                                | None -> ());
                               x7634))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7648 : 'tags this) ->
        fun ~type_:(x7640 : 'K) ->
          fun ~listener:(x7641 : this:t -> ev:any -> any) ->
            fun ?options:(x7642 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7650 = this_to_js Obj.magic x7648 in
                   Ojs.call (Ojs.get_prop_ascii x7650 "removeEventListener")
                     "apply"
                     [|x7650;((let x7643 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7643 "push" [|(Obj.magic x7640)|]);
                               ignore
                                 (Ojs.call x7643 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7646 : Ojs.t) ->
                                            fun (x7647 : Ojs.t) ->
                                              any_to_js
                                                (x7641 ~this:(t_of_js x7646)
                                                   ~ev:(any_of_js x7647))))|]);
                               (match x7642 with
                                | Some x7644 ->
                                    ignore
                                      (Ojs.call x7643 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7644)|])
                                | None -> ());
                               x7643))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7657 : 'tags this) ->
        fun ~type_:(x7651 : string) ->
          fun ~listener:(x7652 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x7653 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7659 = this_to_js Obj.magic x7657 in
                   Ojs.call (Ojs.get_prop_ascii x7659 "removeEventListener")
                     "apply"
                     [|x7659;((let x7654 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7654 "push"
                                    [|(Ojs.string_to_js x7651)|]);
                               ignore
                                 (Ojs.call x7654 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7652)|]);
                               (match x7653 with
                                | Some x7655 ->
                                    ignore
                                      (Ojs.call x7654 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7655)|])
                                | None -> ());
                               x7654))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope") 
             [||])
  end
module GetNotificationOptions =
  struct
    type t = [ `GetNotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7661 : Ojs.t) -> t_of_js x7661
    and t_0_to_js : t_0 -> Ojs.t = fun (x7660 : t) -> t_to_js x7660
    type tags = [ `GetNotificationOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GetNotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7664 : Ojs.t) -> intf_of_js __tags_of_js x7664
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7662 : __tags intf) -> intf_to_js __tags_to_js x7662
    let (get_tag : 'tags this -> string) =
      fun (x7666 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7666) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x7668 : 'tags this) ->
        fun (x7669 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7668) "tag"
            (Ojs.string_to_js x7669)
    let cast_from = Obj.magic
  end
module ServiceWorkerUpdateViaCache =
  struct
    type t = [ `L_s35_all  | `L_s92_imports  | `L_s129_none ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7672 : Ojs.t) ->
        let x7673 = x7672 in
        match Ojs.string_of_js x7673 with
        | "all" -> `L_s35_all
        | "imports" -> `L_s92_imports
        | "none" -> `L_s129_none
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7671 : [ `L_s35_all  | `L_s92_imports  | `L_s129_none ]) ->
        match x7671 with
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s92_imports -> Ojs.string_to_js "imports"
        | `L_s129_none -> Ojs.string_to_js "none"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7675 : Ojs.t) -> t_of_js x7675
    and t_0_to_js : t_0 -> Ojs.t = fun (x7674 : t) -> t_to_js x7674
  end
module PushSubscriptionOptionsInit =
  struct
    type t = [ `PushSubscriptionOptionsInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7677 : Ojs.t) -> t_of_js x7677
    and t_0_to_js : t_0 -> Ojs.t = fun (x7676 : t) -> t_to_js x7676
    type tags = [ `PushSubscriptionOptionsInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7680 : Ojs.t) -> intf_of_js __tags_of_js x7680
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7678 : __tags intf) -> intf_to_js __tags_to_js x7678
    let (get_applicationServerKey :
      'tags this -> BufferSource.t or_string or_null) =
      fun (x7682 : 'tags this) ->
        or_null_of_js
          (fun (x7684 : Ojs.t) -> or_string_of_js BufferSource.t_of_js x7684)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7682)
             "applicationServerKey")
    let (set_applicationServerKey :
      'tags this -> BufferSource.t or_string or_null -> unit) =
      fun (x7686 : 'tags this) ->
        fun (x7687 : BufferSource.t or_string or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7686)
            "applicationServerKey"
            (or_null_to_js
               (fun (x7688 : BufferSource.t or_string) ->
                  or_string_to_js BufferSource.t_to_js x7688) x7687)
    let (get_userVisibleOnly : 'tags this -> bool) =
      fun (x7691 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7691) "userVisibleOnly")
    let (set_userVisibleOnly : 'tags this -> bool -> unit) =
      fun (x7693 : 'tags this) ->
        fun (x7694 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7693) "userVisibleOnly"
            (Ojs.bool_to_js x7694)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface86:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushSubscriptionOptions.t
                         val set_prototype :
                           t -> PushSubscriptionOptions.t -> unit
                         val create : t -> PushSubscriptionOptions.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7697 : Ojs.t) -> x7697
    and t_to_js : t -> Ojs.t = fun (x7696 : Ojs.t) -> x7696
    let (get_prototype : t -> PushSubscriptionOptions.t) =
      fun (x7698 : t) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7698) "prototype")
    let (set_prototype : t -> PushSubscriptionOptions.t -> unit) =
      fun (x7699 : t) ->
        fun (x7700 : PushSubscriptionOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x7699) "prototype"
            (PushSubscriptionOptions.t_to_js x7700)
    let (create : t -> PushSubscriptionOptions.t) =
      fun (x7701 : t) ->
        PushSubscriptionOptions.t_of_js (Ojs.new_obj (t_to_js x7701) [||])
  end
 and
  PushSubscriptionOptions:sig
                            type t = [ `PushSubscriptionOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `PushSubscriptionOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `PushSubscriptionOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `PushSubscriptionOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_applicationServerKey :
                              'tags this -> ArrayBuffer.t_0 or_null
                            val cast_from : 'tags this -> t
                            val prototype : unit -> t
                            val create : unit -> t
                          end =
  struct
    type t = [ `PushSubscriptionOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7703 : Ojs.t) -> t_of_js x7703
    and t_0_to_js : t_0 -> Ojs.t = fun (x7702 : t) -> t_to_js x7702
    type tags = [ `PushSubscriptionOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7706 : Ojs.t) -> intf_of_js __tags_of_js x7706
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7704 : __tags intf) -> intf_to_js __tags_to_js x7704
    let (get_applicationServerKey : 'tags this -> ArrayBuffer.t_0 or_null) =
      fun (x7708 : 'tags this) ->
        or_null_of_js ArrayBuffer.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7708)
             "applicationServerKey")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions") 
             [||])
  end
module PushSubscriptionJSON =
  struct
    type t = [ `PushSubscriptionJSON ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7712 : Ojs.t) -> t_of_js x7712
    and t_0_to_js : t_0 -> Ojs.t = fun (x7711 : t) -> t_to_js x7711
    type tags = [ `PushSubscriptionJSON ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7715 : Ojs.t) -> intf_of_js __tags_of_js x7715
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7713 : __tags intf) -> intf_to_js __tags_to_js x7713
    let (get_endpoint : 'tags this -> string) =
      fun (x7717 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7717) "endpoint")
    let (set_endpoint : 'tags this -> string -> unit) =
      fun (x7719 : 'tags this) ->
        fun (x7720 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7719) "endpoint"
            (Ojs.string_to_js x7720)
    let (get_expirationTime : 'tags this -> DOMTimeStamp.t or_null) =
      fun (x7722 : 'tags this) ->
        or_null_of_js DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7722) "expirationTime")
    let (set_expirationTime : 'tags this -> DOMTimeStamp.t or_null -> unit) =
      fun (x7725 : 'tags this) ->
        fun (x7726 : DOMTimeStamp.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7725) "expirationTime"
            (or_null_to_js DOMTimeStamp.t_to_js x7726)
    let (get_keys : 'tags this -> (string, string) Record.t_2) =
      fun (x7729 : 'tags this) ->
        Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7729) "keys")
    let (set_keys : 'tags this -> (string, string) Record.t_2 -> unit) =
      fun (x7733 : 'tags this) ->
        fun (x7734 : (string, string) Record.t_2) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7733) "keys"
            (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x7734)
    let cast_from = Obj.magic
  end
module PushEncryptionKeyName =
  struct
    type t = [ `L_s40_auth  | `L_s144_p256dh ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7739 : Ojs.t) ->
        let x7740 = x7739 in
        match Ojs.string_of_js x7740 with
        | "auth" -> `L_s40_auth
        | "p256dh" -> `L_s144_p256dh
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7738 : [ `L_s40_auth  | `L_s144_p256dh ]) ->
        match x7738 with
        | `L_s40_auth -> Ojs.string_to_js "auth"
        | `L_s144_p256dh -> Ojs.string_to_js "p256dh"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7742 : Ojs.t) -> t_of_js x7742
    and t_0_to_js : t_0 -> Ojs.t = fun (x7741 : t) -> t_to_js x7741
  end
module rec
  AnonymousInterface85:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushSubscription.t
                         val set_prototype : t -> PushSubscription.t -> unit
                         val create : t -> PushSubscription.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7744 : Ojs.t) -> x7744
    and t_to_js : t -> Ojs.t = fun (x7743 : Ojs.t) -> x7743
    let (get_prototype : t -> PushSubscription.t) =
      fun (x7745 : t) ->
        PushSubscription.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7745) "prototype")
    let (set_prototype : t -> PushSubscription.t -> unit) =
      fun (x7746 : t) ->
        fun (x7747 : PushSubscription.t) ->
          Ojs.set_prop_ascii (t_to_js x7746) "prototype"
            (PushSubscription.t_to_js x7747)
    let (create : t -> PushSubscription.t) =
      fun (x7748 : t) ->
        PushSubscription.t_of_js (Ojs.new_obj (t_to_js x7748) [||])
  end
 and
  PushSubscription:sig
                     type t = [ `PushSubscription ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `PushSubscription ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `PushSubscription ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `PushSubscription ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_endpoint : 'tags this -> string
                     val get_options :
                       'tags this -> PushSubscriptionOptions.t
                     val getKey :
                       'tags this ->
                         name:PushEncryptionKeyName.t ->
                           ArrayBuffer.t_0 or_null
                     val toJSON : 'tags this -> PushSubscriptionJSON.t
                     val unsubscribe : 'tags this -> bool Promise.t_1
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t = [ `PushSubscription ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7750 : Ojs.t) -> t_of_js x7750
    and t_0_to_js : t_0 -> Ojs.t = fun (x7749 : t) -> t_to_js x7749
    type tags = [ `PushSubscription ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7753 : Ojs.t) -> intf_of_js __tags_of_js x7753
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7751 : __tags intf) -> intf_to_js __tags_to_js x7751
    let (get_endpoint : 'tags this -> string) =
      fun (x7755 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7755) "endpoint")
    let (get_options : 'tags this -> PushSubscriptionOptions.t) =
      fun (x7757 : 'tags this) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7757) "options")
    let (getKey :
      'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t_0 or_null)
      =
      fun (x7760 : 'tags this) ->
        fun ~name:(x7759 : PushEncryptionKeyName.t) ->
          or_null_of_js ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x7760) "getKey"
               [|(PushEncryptionKeyName.t_to_js x7759)|])
    let (toJSON : 'tags this -> PushSubscriptionJSON.t) =
      fun (x7763 : 'tags this) ->
        PushSubscriptionJSON.t_of_js
          (Ojs.call (this_to_js Obj.magic x7763) "toJSON" [||])
    let (unsubscribe : 'tags this -> bool Promise.t_1) =
      fun (x7765 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x7765) "unsubscribe" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscription") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushSubscription")
             [||])
  end
module PushPermissionState =
  struct
    type t = [ `L_s58_denied  | `L_s83_granted  | `L_s158_prompt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7769 : Ojs.t) ->
        let x7770 = x7769 in
        match Ojs.string_of_js x7770 with
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s83_granted
        | "prompt" -> `L_s158_prompt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7768 : [ `L_s58_denied  | `L_s83_granted  | `L_s158_prompt ]) ->
        match x7768 with
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s83_granted -> Ojs.string_to_js "granted"
        | `L_s158_prompt -> Ojs.string_to_js "prompt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7772 : Ojs.t) -> t_of_js x7772
    and t_0_to_js : t_0 -> Ojs.t = fun (x7771 : t) -> t_to_js x7771
  end
module rec
  AnonymousInterface83:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PushManager.t
                         val set_prototype : t -> PushManager.t -> unit
                         val create : t -> PushManager.t
                         val get_supportedContentEncodings : t -> string list
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7774 : Ojs.t) -> x7774
    and t_to_js : t -> Ojs.t = fun (x7773 : Ojs.t) -> x7773
    let (get_prototype : t -> PushManager.t) =
      fun (x7775 : t) ->
        PushManager.t_of_js (Ojs.get_prop_ascii (t_to_js x7775) "prototype")
    let (set_prototype : t -> PushManager.t -> unit) =
      fun (x7776 : t) ->
        fun (x7777 : PushManager.t) ->
          Ojs.set_prop_ascii (t_to_js x7776) "prototype"
            (PushManager.t_to_js x7777)
    let (create : t -> PushManager.t) =
      fun (x7778 : t) ->
        PushManager.t_of_js (Ojs.new_obj (t_to_js x7778) [||])
    let (get_supportedContentEncodings : t -> string list) =
      fun (x7779 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x7779) "supportedContentEncodings")
  end
 and
  PushManager:sig
                type t = [ `PushManager ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `PushManager ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `PushManager ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `PushManager ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val getSubscription :
                  'tags this -> PushSubscription.t or_null Promise.t_1
                val permissionState :
                  'tags this ->
                    ?options:PushSubscriptionOptionsInit.t ->
                      unit -> PushPermissionState.t Promise.t_1
                val subscribe :
                  'tags this ->
                    ?options:PushSubscriptionOptionsInit.t ->
                      unit -> PushSubscription.t Promise.t_1
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
                val supportedContentEncodings : unit -> string list
              end =
  struct
    type t = [ `PushManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7782 : Ojs.t) -> t_of_js x7782
    and t_0_to_js : t_0 -> Ojs.t = fun (x7781 : t) -> t_to_js x7781
    type tags = [ `PushManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7785 : Ojs.t) -> intf_of_js __tags_of_js x7785
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7783 : __tags intf) -> intf_to_js __tags_to_js x7783
    let (getSubscription :
      'tags this -> PushSubscription.t or_null Promise.t_1) =
      fun (x7787 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x7789 : Ojs.t) ->
             or_null_of_js PushSubscription.t_of_js x7789)
          (Ojs.call (this_to_js Obj.magic x7787) "getSubscription" [||])
    let (permissionState :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushPermissionState.t Promise.t_1)
      =
      fun (x7794 : 'tags this) ->
        fun ?options:(x7791 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushPermissionState.t_of_js
              (let x7796 = this_to_js Obj.magic x7794 in
               Ojs.call (Ojs.get_prop_ascii x7796 "permissionState") "apply"
                 [|x7796;((let x7792 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7791 with
                            | Some x7793 ->
                                ignore
                                  (Ojs.call x7792 "push"
                                     [|(PushSubscriptionOptionsInit.t_to_js
                                          x7793)|])
                            | None -> ());
                           x7792))|])
    let (subscribe :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushSubscription.t Promise.t_1)
      =
      fun (x7801 : 'tags this) ->
        fun ?options:(x7798 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushSubscription.t_of_js
              (let x7803 = this_to_js Obj.magic x7801 in
               Ojs.call (Ojs.get_prop_ascii x7803 "subscribe") "apply"
                 [|x7803;((let x7799 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7798 with
                            | Some x7800 ->
                                ignore
                                  (Ojs.call x7799 "push"
                                     [|(PushSubscriptionOptionsInit.t_to_js
                                          x7800)|])
                            | None -> ());
                           x7799))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushManager") [||])
    let (supportedContentEncodings : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "supportedContentEncodings")
  end
module rec
  AnonymousInterface97:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ServiceWorkerRegistration.t
                         val set_prototype :
                           t -> ServiceWorkerRegistration.t -> unit
                         val create : t -> ServiceWorkerRegistration.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7807 : Ojs.t) -> x7807
    and t_to_js : t -> Ojs.t = fun (x7806 : Ojs.t) -> x7806
    let (get_prototype : t -> ServiceWorkerRegistration.t) =
      fun (x7808 : t) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7808) "prototype")
    let (set_prototype : t -> ServiceWorkerRegistration.t -> unit) =
      fun (x7809 : t) ->
        fun (x7810 : ServiceWorkerRegistration.t) ->
          Ojs.set_prop_ascii (t_to_js x7809) "prototype"
            (ServiceWorkerRegistration.t_to_js x7810)
    let (create : t -> ServiceWorkerRegistration.t) =
      fun (x7811 : t) ->
        ServiceWorkerRegistration.t_of_js (Ojs.new_obj (t_to_js x7811) [||])
  end
 and
  ServiceWorkerRegistration:sig
                              type t =
                                [ `EventTarget 
                                | `ServiceWorkerRegistration ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget 
                                | `ServiceWorkerRegistration ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `ServiceWorkerRegistration ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `ServiceWorkerRegistration ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_active :
                                'tags this -> ServiceWorker.t or_null
                              val get_installing :
                                'tags this -> ServiceWorker.t or_null
                              val get_onupdatefound :
                                'tags this ->
                                  (this:t -> ev:Event.t -> any) or_null
                              val set_onupdatefound :
                                'tags this ->
                                  (this:t -> ev:Event.t -> any) or_null ->
                                    unit
                              val get_pushManager :
                                'tags this -> PushManager.t
                              val get_scope : 'tags this -> string
                              val get_updateViaCache :
                                'tags this -> ServiceWorkerUpdateViaCache.t
                              val get_waiting :
                                'tags this -> ServiceWorker.t or_null
                              val getNotifications :
                                'tags this ->
                                  ?filter:GetNotificationOptions.t ->
                                    unit -> Notification.t list Promise.t_1
                              val showNotification :
                                'tags this ->
                                  title:string ->
                                    ?options:NotificationOptions.t ->
                                      unit -> unit Promise.t_1
                              val unregister : 'tags this -> bool Promise.t_1
                              val update : 'tags this -> unit Promise.t_1
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `EventTarget  | `ServiceWorkerRegistration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7813 : Ojs.t) -> t_of_js x7813
    and t_0_to_js : t_0 -> Ojs.t = fun (x7812 : t) -> t_to_js x7812
    type tags = [ `EventTarget  | `ServiceWorkerRegistration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7816 : Ojs.t) -> intf_of_js __tags_of_js x7816
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7814 : __tags intf) -> intf_to_js __tags_to_js x7814
    let (get_active : 'tags this -> ServiceWorker.t or_null) =
      fun (x7818 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7818) "active")
    let (get_installing : 'tags this -> ServiceWorker.t or_null) =
      fun (x7821 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7821) "installing")
    let (get_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x7824 : 'tags this) ->
        or_null_of_js
          (fun (x7826 : Ojs.t) ->
             fun ~this:(x7827 : t) ->
               fun ~ev:(x7828 : Event.t) ->
                 any_of_js
                   (Ojs.apply x7826 [|(t_to_js x7827);(Event.t_to_js x7828)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7824) "onupdatefound")
    let (set_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x7829 : 'tags this) ->
        fun (x7830 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7829) "onupdatefound"
            (or_null_to_js
               (fun (x7831 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x7832 : Ojs.t) ->
                       fun (x7833 : Ojs.t) ->
                         any_to_js
                           (x7831 ~this:(t_of_js x7832)
                              ~ev:(Event.t_of_js x7833)))) x7830)
    let (get_pushManager : 'tags this -> PushManager.t) =
      fun (x7835 : 'tags this) ->
        PushManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7835) "pushManager")
    let (get_scope : 'tags this -> string) =
      fun (x7837 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7837) "scope")
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x7839 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7839) "updateViaCache")
    let (get_waiting : 'tags this -> ServiceWorker.t or_null) =
      fun (x7841 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7841) "waiting")
    let (getNotifications :
      'tags this ->
        ?filter:GetNotificationOptions.t ->
          unit -> Notification.t list Promise.t_1)
      =
      fun (x7847 : 'tags this) ->
        fun ?filter:(x7844 : GetNotificationOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x7850 : Ojs.t) ->
                 Ojs.list_of_js Notification.t_of_js x7850)
              (let x7849 = this_to_js Obj.magic x7847 in
               Ojs.call (Ojs.get_prop_ascii x7849 "getNotifications") "apply"
                 [|x7849;((let x7845 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7844 with
                            | Some x7846 ->
                                ignore
                                  (Ojs.call x7845 "push"
                                     [|(GetNotificationOptions.t_to_js x7846)|])
                            | None -> ());
                           x7845))|])
    let (showNotification :
      'tags this ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x7856 : 'tags this) ->
        fun ~title:(x7852 : string) ->
          fun ?options:(x7853 : NotificationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x7858 = this_to_js Obj.magic x7856 in
                 Ojs.call (Ojs.get_prop_ascii x7858 "showNotification")
                   "apply"
                   [|x7858;((let x7854 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x7854 "push"
                                  [|(Ojs.string_to_js x7852)|]);
                             (match x7853 with
                              | Some x7855 ->
                                  ignore
                                    (Ojs.call x7854 "push"
                                       [|(NotificationOptions.t_to_js x7855)|])
                              | None -> ());
                             x7854))|])
    let (unregister : 'tags this -> bool Promise.t_1) =
      fun (x7860 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x7860) "unregister" [||])
    let (update : 'tags this -> unit Promise.t_1) =
      fun (x7863 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x7863) "update" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7874 : 'tags this) ->
        fun ~type_:(x7866 : 'K) ->
          fun ~listener:(x7867 : this:t -> ev:any -> any) ->
            fun
              ?options:(x7868 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7876 = this_to_js Obj.magic x7874 in
                   Ojs.call (Ojs.get_prop_ascii x7876 "addEventListener")
                     "apply"
                     [|x7876;((let x7869 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7869 "push" [|(Obj.magic x7866)|]);
                               ignore
                                 (Ojs.call x7869 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7872 : Ojs.t) ->
                                            fun (x7873 : Ojs.t) ->
                                              any_to_js
                                                (x7867 ~this:(t_of_js x7872)
                                                   ~ev:(any_of_js x7873))))|]);
                               (match x7868 with
                                | Some x7870 ->
                                    ignore
                                      (Ojs.call x7869 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7870)|])
                                | None -> ());
                               x7869))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7883 : 'tags this) ->
        fun ~type_:(x7877 : string) ->
          fun ~listener:(x7878 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x7879 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7885 = this_to_js Obj.magic x7883 in
                   Ojs.call (Ojs.get_prop_ascii x7885 "addEventListener")
                     "apply"
                     [|x7885;((let x7880 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7880 "push"
                                    [|(Ojs.string_to_js x7877)|]);
                               ignore
                                 (Ojs.call x7880 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7878)|]);
                               (match x7879 with
                                | Some x7881 ->
                                    ignore
                                      (Ojs.call x7880 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x7881)|])
                                | None -> ());
                               x7880))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7894 : 'tags this) ->
        fun ~type_:(x7886 : 'K) ->
          fun ~listener:(x7887 : this:t -> ev:any -> any) ->
            fun ?options:(x7888 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7896 = this_to_js Obj.magic x7894 in
                   Ojs.call (Ojs.get_prop_ascii x7896 "removeEventListener")
                     "apply"
                     [|x7896;((let x7889 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7889 "push" [|(Obj.magic x7886)|]);
                               ignore
                                 (Ojs.call x7889 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x7892 : Ojs.t) ->
                                            fun (x7893 : Ojs.t) ->
                                              any_to_js
                                                (x7887 ~this:(t_of_js x7892)
                                                   ~ev:(any_of_js x7893))))|]);
                               (match x7888 with
                                | Some x7890 ->
                                    ignore
                                      (Ojs.call x7889 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7890)|])
                                | None -> ());
                               x7889))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x7903 : 'tags this) ->
        fun ~type_:(x7897 : string) ->
          fun ~listener:(x7898 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x7899 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x7905 = this_to_js Obj.magic x7903 in
                   Ojs.call (Ojs.get_prop_ascii x7905 "removeEventListener")
                     "apply"
                     [|x7905;((let x7900 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x7900 "push"
                                    [|(Ojs.string_to_js x7897)|]);
                               ignore
                                 (Ojs.call x7900 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x7898)|]);
                               (match x7899 with
                                | Some x7901 ->
                                    ignore
                                      (Ojs.call x7900 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x7901)|])
                                | None -> ());
                               x7900))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration") 
             [||])
  end
module VisibilityState =
  struct
    type t = [ `L_s84_hidden  | `L_s206_visible ]
    let rec t_of_js : Ojs.t -> t =
      fun (x7907 : Ojs.t) ->
        let x7908 = x7907 in
        match Ojs.string_of_js x7908 with
        | "hidden" -> `L_s84_hidden
        | "visible" -> `L_s206_visible
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x7906 : [ `L_s84_hidden  | `L_s206_visible ]) ->
        match x7906 with
        | `L_s84_hidden -> Ojs.string_to_js "hidden"
        | `L_s206_visible -> Ojs.string_to_js "visible"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7910 : Ojs.t) -> t_of_js x7910
    and t_0_to_js : t_0 -> Ojs.t = fun (x7909 : t) -> t_to_js x7909
  end
module rec
  AnonymousInterface129:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WindowClient.t
                          val set_prototype : t -> WindowClient.t -> unit
                          val create : t -> WindowClient.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7912 : Ojs.t) -> x7912
    and t_to_js : t -> Ojs.t = fun (x7911 : Ojs.t) -> x7911
    let (get_prototype : t -> WindowClient.t) =
      fun (x7913 : t) ->
        WindowClient.t_of_js (Ojs.get_prop_ascii (t_to_js x7913) "prototype")
    let (set_prototype : t -> WindowClient.t -> unit) =
      fun (x7914 : t) ->
        fun (x7915 : WindowClient.t) ->
          Ojs.set_prop_ascii (t_to_js x7914) "prototype"
            (WindowClient.t_to_js x7915)
    let (create : t -> WindowClient.t) =
      fun (x7916 : t) ->
        WindowClient.t_of_js (Ojs.new_obj (t_to_js x7916) [||])
  end
 and
  WindowClient:sig
                 type t = [ `Client  | `WindowClient ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `Client  | `WindowClient ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `Client  | `WindowClient ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `WindowClient ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_focused : 'tags this -> bool
                 val get_visibilityState : 'tags this -> VisibilityState.t
                 val focus : 'tags this -> t Promise.t_1
                 val navigate :
                   'tags this -> url:URL.t or_string -> t or_null Promise.t_1
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `Client  | `WindowClient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7918 : Ojs.t) -> t_of_js x7918
    and t_0_to_js : t_0 -> Ojs.t = fun (x7917 : t) -> t_to_js x7917
    type tags = [ `Client  | `WindowClient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WindowClient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7921 : Ojs.t) -> intf_of_js __tags_of_js x7921
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7919 : __tags intf) -> intf_to_js __tags_to_js x7919
    let (get_focused : 'tags this -> bool) =
      fun (x7923 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7923) "focused")
    let (get_visibilityState : 'tags this -> VisibilityState.t) =
      fun (x7925 : 'tags this) ->
        VisibilityState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7925) "visibilityState")
    let (focus : 'tags this -> t Promise.t_1) =
      fun (x7927 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x7927) "focus" [||])
    let (navigate :
      'tags this -> url:URL.t or_string -> t or_null Promise.t_1) =
      fun (x7932 : 'tags this) ->
        fun ~url:(x7930 : URL.t or_string) ->
          Promise.t_1_of_js
            (fun (x7934 : Ojs.t) -> or_null_of_js t_of_js x7934)
            (Ojs.call (this_to_js Obj.magic x7932) "navigate"
               [|(or_string_to_js URL.t_to_js x7930)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WindowClient")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WindowClient") [||])
  end
module ClientQueryOptions =
  struct
    type t = [ `ClientQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7937 : Ojs.t) -> t_of_js x7937
    and t_0_to_js : t_0 -> Ojs.t = fun (x7936 : t) -> t_to_js x7936
    type tags = [ `ClientQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7940 : Ojs.t) -> intf_of_js __tags_of_js x7940
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7938 : __tags intf) -> intf_to_js __tags_to_js x7938
    let (get_includeUncontrolled : 'tags this -> bool) =
      fun (x7942 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7942)
             "includeUncontrolled")
    let (set_includeUncontrolled : 'tags this -> bool -> unit) =
      fun (x7944 : 'tags this) ->
        fun (x7945 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7944)
            "includeUncontrolled" (Ojs.bool_to_js x7945)
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x7947 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7947) "type")
    let (set_type : 'tags this -> ClientTypes.t -> unit) =
      fun (x7949 : 'tags this) ->
        fun (x7950 : ClientTypes.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7949) "type"
            (ClientTypes.t_to_js x7950)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface10:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Clients.t
                         val set_prototype : t -> Clients.t -> unit
                         val create : t -> Clients.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7953 : Ojs.t) -> x7953
    and t_to_js : t -> Ojs.t = fun (x7952 : Ojs.t) -> x7952
    let (get_prototype : t -> Clients.t) =
      fun (x7954 : t) ->
        Clients.t_of_js (Ojs.get_prop_ascii (t_to_js x7954) "prototype")
    let (set_prototype : t -> Clients.t -> unit) =
      fun (x7955 : t) ->
        fun (x7956 : Clients.t) ->
          Ojs.set_prop_ascii (t_to_js x7955) "prototype"
            (Clients.t_to_js x7956)
    let (create : t -> Clients.t) =
      fun (x7957 : t) -> Clients.t_of_js (Ojs.new_obj (t_to_js x7957) [||])
  end
 and
  Clients:sig
            type t = [ `Clients ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Clients ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem type tags = [ `Clients ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val claim : 'tags this -> unit Promise.t_1
            val get_ :
              'tags this -> id:string -> Client.t or_undefined Promise.t_1
            val matchAll :
              'tags this -> ?options:'T -> unit -> any list Promise.t_1
            val openWindow :
              'tags this ->
                url:URL.t or_string -> WindowClient.t or_null Promise.t_1
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : unit -> t
          end =
  struct
    type t = [ `Clients ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7959 : Ojs.t) -> t_of_js x7959
    and t_0_to_js : t_0 -> Ojs.t = fun (x7958 : t) -> t_to_js x7958
    type tags = [ `Clients ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7962 : Ojs.t) -> intf_of_js __tags_of_js x7962
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7960 : __tags intf) -> intf_to_js __tags_to_js x7960
    let (claim : 'tags this -> unit Promise.t_1) =
      fun (x7964 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x7964) "claim" [||])
    let (get_ : 'tags this -> id:string -> Client.t or_undefined Promise.t_1)
      =
      fun (x7968 : 'tags this) ->
        fun ~id:(x7967 : string) ->
          Promise.t_1_of_js
            (fun (x7970 : Ojs.t) -> or_undefined_of_js Client.t_of_js x7970)
            (Ojs.call (this_to_js Obj.magic x7968) "get"
               [|(Ojs.string_to_js x7967)|])
    let (matchAll :
      'tags this -> ?options:'T -> unit -> any list Promise.t_1) =
      fun (x7975 : 'tags this) ->
        fun ?options:(x7972 : 'T option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x7978 : Ojs.t) -> Ojs.list_of_js any_of_js x7978)
              (let x7977 = this_to_js Obj.magic x7975 in
               Ojs.call (Ojs.get_prop_ascii x7977 "matchAll") "apply"
                 [|x7977;((let x7973 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x7972 with
                            | Some x7974 ->
                                ignore
                                  (Ojs.call x7973 "push"
                                     [|(Obj.magic x7974)|])
                            | None -> ());
                           x7973))|])
    let (openWindow :
      'tags this -> url:URL.t or_string -> WindowClient.t or_null Promise.t_1)
      =
      fun (x7982 : 'tags this) ->
        fun ~url:(x7980 : URL.t or_string) ->
          Promise.t_1_of_js
            (fun (x7984 : Ojs.t) -> or_null_of_js WindowClient.t_of_js x7984)
            (Ojs.call (this_to_js Obj.magic x7982) "openWindow"
               [|(or_string_to_js URL.t_to_js x7980)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Clients")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Clients") [||])
  end
module rec
  AnonymousInterface96:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ServiceWorkerGlobalScope.t
                         val set_prototype :
                           t -> ServiceWorkerGlobalScope.t -> unit
                         val create : t -> ServiceWorkerGlobalScope.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7987 : Ojs.t) -> x7987
    and t_to_js : t -> Ojs.t = fun (x7986 : Ojs.t) -> x7986
    let (get_prototype : t -> ServiceWorkerGlobalScope.t) =
      fun (x7988 : t) ->
        ServiceWorkerGlobalScope.t_of_js
          (Ojs.get_prop_ascii (t_to_js x7988) "prototype")
    let (set_prototype : t -> ServiceWorkerGlobalScope.t -> unit) =
      fun (x7989 : t) ->
        fun (x7990 : ServiceWorkerGlobalScope.t) ->
          Ojs.set_prop_ascii (t_to_js x7989) "prototype"
            (ServiceWorkerGlobalScope.t_to_js x7990)
    let (create : t -> ServiceWorkerGlobalScope.t) =
      fun (x7991 : t) ->
        ServiceWorkerGlobalScope.t_of_js (Ojs.new_obj (t_to_js x7991) [||])
  end
 and
  ServiceWorkerGlobalScope:sig
                             type t =
                               [ `EventTarget  | `FontFaceSource 
                               | `ServiceWorkerGlobalScope 
                               | `WindowOrWorkerGlobalScope 
                               | `WorkerGlobalScope ] intf
                             type t_0 = t
                             [@@@js.stop ]
                             type tags =
                               [ `EventTarget  | `FontFaceSource 
                               | `ServiceWorkerGlobalScope 
                               | `WindowOrWorkerGlobalScope 
                               | `WorkerGlobalScope ]
                             type tags_0 = tags
                             [@@@js.start ]
                             [@@@js.implem
                               type tags =
                                 [ `EventTarget  | `FontFaceSource 
                                 | `ServiceWorkerGlobalScope 
                                 | `WindowOrWorkerGlobalScope 
                                 | `WorkerGlobalScope ]
                               type tags_0 = tags]
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `ServiceWorkerGlobalScope ]
                             val t_to_js : t -> Ojs.t
                             val t_of_js : Ojs.t -> t
                             val t_0_to_js : t_0 -> Ojs.t
                             val t_0_of_js : Ojs.t -> t_0
                             val get_clients : 'tags this -> Clients.t
                             val get_onactivate :
                               'tags this ->
                                 (this:t -> ev:ExtendableEvent.t -> any)
                                   or_null
                             val set_onactivate :
                               'tags this ->
                                 (this:t -> ev:ExtendableEvent.t -> any)
                                   or_null -> unit
                             val get_onfetch :
                               'tags this ->
                                 (this:t -> ev:FetchEvent.t -> any) or_null
                             val set_onfetch :
                               'tags this ->
                                 (this:t -> ev:FetchEvent.t -> any) or_null
                                   -> unit
                             val get_oninstall :
                               'tags this ->
                                 (this:t -> ev:ExtendableEvent.t -> any)
                                   or_null
                             val set_oninstall :
                               'tags this ->
                                 (this:t -> ev:ExtendableEvent.t -> any)
                                   or_null -> unit
                             val get_onmessage :
                               'tags this ->
                                 (this:t ->
                                    ev:ExtendableMessageEvent.t -> any)
                                   or_null
                             val set_onmessage :
                               'tags this ->
                                 (this:t ->
                                    ev:ExtendableMessageEvent.t -> any)
                                   or_null -> unit
                             val get_onmessageerror :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null
                             val set_onmessageerror :
                               'tags this ->
                                 (this:t -> ev:MessageEvent.t_0 -> any)
                                   or_null -> unit
                             val get_onnotificationclick :
                               'tags this ->
                                 (this:t -> ev:NotificationEvent.t -> any)
                                   or_null
                             val set_onnotificationclick :
                               'tags this ->
                                 (this:t -> ev:NotificationEvent.t -> any)
                                   or_null -> unit
                             val get_onnotificationclose :
                               'tags this ->
                                 (this:t -> ev:NotificationEvent.t -> any)
                                   or_null
                             val set_onnotificationclose :
                               'tags this ->
                                 (this:t -> ev:NotificationEvent.t -> any)
                                   or_null -> unit
                             val get_onpush :
                               'tags this ->
                                 (this:t -> ev:PushEvent.t -> any) or_null
                             val set_onpush :
                               'tags this ->
                                 (this:t -> ev:PushEvent.t -> any) or_null ->
                                   unit
                             val get_registration :
                               'tags this -> ServiceWorkerRegistration.t
                             val skipWaiting : 'tags this -> unit Promise.t_1
                             val addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit
                             val cast_from : 'tags this -> t
                             val prototype : unit -> t
                             val create : unit -> t
                           end =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7993 : Ojs.t) -> t_of_js x7993
    and t_0_to_js : t_0 -> Ojs.t = fun (x7992 : t) -> t_to_js x7992
    type tags =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7996 : Ojs.t) -> intf_of_js __tags_of_js x7996
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7994 : __tags intf) -> intf_to_js __tags_to_js x7994
    let (get_clients : 'tags this -> Clients.t) =
      fun (x7998 : 'tags this) ->
        Clients.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7998) "clients")
    let (get_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null) =
      fun (x8000 : 'tags this) ->
        or_null_of_js
          (fun (x8002 : Ojs.t) ->
             fun ~this:(x8003 : t) ->
               fun ~ev:(x8004 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x8002
                      [|(t_to_js x8003);(ExtendableEvent.t_to_js x8004)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8000) "onactivate")
    let (set_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null -> unit)
      =
      fun (x8005 : 'tags this) ->
        fun (x8006 : (this:t -> ev:ExtendableEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8005) "onactivate"
            (or_null_to_js
               (fun (x8007 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8008 : Ojs.t) ->
                       fun (x8009 : Ojs.t) ->
                         any_to_js
                           (x8007 ~this:(t_of_js x8008)
                              ~ev:(ExtendableEvent.t_of_js x8009)))) x8006)
    let (get_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) or_null) =
      fun (x8011 : 'tags this) ->
        or_null_of_js
          (fun (x8013 : Ojs.t) ->
             fun ~this:(x8014 : t) ->
               fun ~ev:(x8015 : FetchEvent.t) ->
                 any_of_js
                   (Ojs.apply x8013
                      [|(t_to_js x8014);(FetchEvent.t_to_js x8015)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8011) "onfetch")
    let (set_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) or_null -> unit) =
      fun (x8016 : 'tags this) ->
        fun (x8017 : (this:t -> ev:FetchEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8016) "onfetch"
            (or_null_to_js
               (fun (x8018 : this:t -> ev:FetchEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8019 : Ojs.t) ->
                       fun (x8020 : Ojs.t) ->
                         any_to_js
                           (x8018 ~this:(t_of_js x8019)
                              ~ev:(FetchEvent.t_of_js x8020)))) x8017)
    let (get_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null) =
      fun (x8022 : 'tags this) ->
        or_null_of_js
          (fun (x8024 : Ojs.t) ->
             fun ~this:(x8025 : t) ->
               fun ~ev:(x8026 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x8024
                      [|(t_to_js x8025);(ExtendableEvent.t_to_js x8026)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8022) "oninstall")
    let (set_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null -> unit)
      =
      fun (x8027 : 'tags this) ->
        fun (x8028 : (this:t -> ev:ExtendableEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8027) "oninstall"
            (or_null_to_js
               (fun (x8029 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8030 : Ojs.t) ->
                       fun (x8031 : Ojs.t) ->
                         any_to_js
                           (x8029 ~this:(t_of_js x8030)
                              ~ev:(ExtendableEvent.t_of_js x8031)))) x8028)
    let (get_onmessage :
      'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) or_null) =
      fun (x8033 : 'tags this) ->
        or_null_of_js
          (fun (x8035 : Ojs.t) ->
             fun ~this:(x8036 : t) ->
               fun ~ev:(x8037 : ExtendableMessageEvent.t) ->
                 any_of_js
                   (Ojs.apply x8035
                      [|(t_to_js x8036);(ExtendableMessageEvent.t_to_js x8037)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8033) "onmessage")
    let (set_onmessage :
      'tags this ->
        (this:t -> ev:ExtendableMessageEvent.t -> any) or_null -> unit)
      =
      fun (x8038 : 'tags this) ->
        fun (x8039 : (this:t -> ev:ExtendableMessageEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8038) "onmessage"
            (or_null_to_js
               (fun (x8040 : this:t -> ev:ExtendableMessageEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8041 : Ojs.t) ->
                       fun (x8042 : Ojs.t) ->
                         any_to_js
                           (x8040 ~this:(t_of_js x8041)
                              ~ev:(ExtendableMessageEvent.t_of_js x8042))))
               x8039)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x8044 : 'tags this) ->
        or_null_of_js
          (fun (x8046 : Ojs.t) ->
             fun ~this:(x8047 : t) ->
               fun ~ev:(x8048 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x8046
                      [|(t_to_js x8047);(MessageEvent.t_0_to_js x8048)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8044) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x8049 : 'tags this) ->
        fun (x8050 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8049) "onmessageerror"
            (or_null_to_js
               (fun (x8051 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8052 : Ojs.t) ->
                       fun (x8053 : Ojs.t) ->
                         any_to_js
                           (x8051 ~this:(t_of_js x8052)
                              ~ev:(MessageEvent.t_0_of_js x8053)))) x8050)
    let (get_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null) =
      fun (x8055 : 'tags this) ->
        or_null_of_js
          (fun (x8057 : Ojs.t) ->
             fun ~this:(x8058 : t) ->
               fun ~ev:(x8059 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x8057
                      [|(t_to_js x8058);(NotificationEvent.t_to_js x8059)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8055)
             "onnotificationclick")
    let (set_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null -> unit)
      =
      fun (x8060 : 'tags this) ->
        fun (x8061 : (this:t -> ev:NotificationEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8060)
            "onnotificationclick"
            (or_null_to_js
               (fun (x8062 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8063 : Ojs.t) ->
                       fun (x8064 : Ojs.t) ->
                         any_to_js
                           (x8062 ~this:(t_of_js x8063)
                              ~ev:(NotificationEvent.t_of_js x8064)))) x8061)
    let (get_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null) =
      fun (x8066 : 'tags this) ->
        or_null_of_js
          (fun (x8068 : Ojs.t) ->
             fun ~this:(x8069 : t) ->
               fun ~ev:(x8070 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x8068
                      [|(t_to_js x8069);(NotificationEvent.t_to_js x8070)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8066)
             "onnotificationclose")
    let (set_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null -> unit)
      =
      fun (x8071 : 'tags this) ->
        fun (x8072 : (this:t -> ev:NotificationEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8071)
            "onnotificationclose"
            (or_null_to_js
               (fun (x8073 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8074 : Ojs.t) ->
                       fun (x8075 : Ojs.t) ->
                         any_to_js
                           (x8073 ~this:(t_of_js x8074)
                              ~ev:(NotificationEvent.t_of_js x8075)))) x8072)
    let (get_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) or_null) =
      fun (x8077 : 'tags this) ->
        or_null_of_js
          (fun (x8079 : Ojs.t) ->
             fun ~this:(x8080 : t) ->
               fun ~ev:(x8081 : PushEvent.t) ->
                 any_of_js
                   (Ojs.apply x8079
                      [|(t_to_js x8080);(PushEvent.t_to_js x8081)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8077) "onpush")
    let (set_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) or_null -> unit) =
      fun (x8082 : 'tags this) ->
        fun (x8083 : (this:t -> ev:PushEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8082) "onpush"
            (or_null_to_js
               (fun (x8084 : this:t -> ev:PushEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8085 : Ojs.t) ->
                       fun (x8086 : Ojs.t) ->
                         any_to_js
                           (x8084 ~this:(t_of_js x8085)
                              ~ev:(PushEvent.t_of_js x8086)))) x8083)
    let (get_registration : 'tags this -> ServiceWorkerRegistration.t) =
      fun (x8088 : 'tags this) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8088) "registration")
    let (skipWaiting : 'tags this -> unit Promise.t_1) =
      fun (x8090 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x8090) "skipWaiting" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8101 : 'tags this) ->
        fun ~type_:(x8093 : 'K) ->
          fun ~listener:(x8094 : this:t -> ev:any -> any) ->
            fun
              ?options:(x8095 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8103 = this_to_js Obj.magic x8101 in
                   Ojs.call (Ojs.get_prop_ascii x8103 "addEventListener")
                     "apply"
                     [|x8103;((let x8096 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8096 "push" [|(Obj.magic x8093)|]);
                               ignore
                                 (Ojs.call x8096 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8099 : Ojs.t) ->
                                            fun (x8100 : Ojs.t) ->
                                              any_to_js
                                                (x8094 ~this:(t_of_js x8099)
                                                   ~ev:(any_of_js x8100))))|]);
                               (match x8095 with
                                | Some x8097 ->
                                    ignore
                                      (Ojs.call x8096 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8097)|])
                                | None -> ());
                               x8096))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8110 : 'tags this) ->
        fun ~type_:(x8104 : string) ->
          fun ~listener:(x8105 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x8106 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8112 = this_to_js Obj.magic x8110 in
                   Ojs.call (Ojs.get_prop_ascii x8112 "addEventListener")
                     "apply"
                     [|x8112;((let x8107 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8107 "push"
                                    [|(Ojs.string_to_js x8104)|]);
                               ignore
                                 (Ojs.call x8107 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8105)|]);
                               (match x8106 with
                                | Some x8108 ->
                                    ignore
                                      (Ojs.call x8107 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8108)|])
                                | None -> ());
                               x8107))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8121 : 'tags this) ->
        fun ~type_:(x8113 : 'K) ->
          fun ~listener:(x8114 : this:t -> ev:any -> any) ->
            fun ?options:(x8115 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8123 = this_to_js Obj.magic x8121 in
                   Ojs.call (Ojs.get_prop_ascii x8123 "removeEventListener")
                     "apply"
                     [|x8123;((let x8116 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8116 "push" [|(Obj.magic x8113)|]);
                               ignore
                                 (Ojs.call x8116 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8119 : Ojs.t) ->
                                            fun (x8120 : Ojs.t) ->
                                              any_to_js
                                                (x8114 ~this:(t_of_js x8119)
                                                   ~ev:(any_of_js x8120))))|]);
                               (match x8115 with
                                | Some x8117 ->
                                    ignore
                                      (Ojs.call x8116 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8117)|])
                                | None -> ());
                               x8116))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8130 : 'tags this) ->
        fun ~type_:(x8124 : string) ->
          fun ~listener:(x8125 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x8126 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8132 = this_to_js Obj.magic x8130 in
                   Ojs.call (Ojs.get_prop_ascii x8132 "removeEventListener")
                     "apply"
                     [|x8132;((let x8127 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8127 "push"
                                    [|(Ojs.string_to_js x8124)|]);
                               ignore
                                 (Ojs.call x8127 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8125)|]);
                               (match x8126 with
                                | Some x8128 ->
                                    ignore
                                      (Ojs.call x8127 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8128)|])
                                | None -> ());
                               x8127))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope") 
             [||])
  end
module WorkerType =
  struct
    type t = [ `L_s49_classic  | `L_s118_module ]
    let rec t_of_js : Ojs.t -> t =
      fun (x8134 : Ojs.t) ->
        let x8135 = x8134 in
        match Ojs.string_of_js x8135 with
        | "classic" -> `L_s49_classic
        | "module" -> `L_s118_module
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x8133 : [ `L_s49_classic  | `L_s118_module ]) ->
        match x8133 with
        | `L_s49_classic -> Ojs.string_to_js "classic"
        | `L_s118_module -> Ojs.string_to_js "module"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8137 : Ojs.t) -> t_of_js x8137
    and t_0_to_js : t_0 -> Ojs.t = fun (x8136 : t) -> t_to_js x8136
  end
module RegistrationOptions =
  struct
    type t = [ `RegistrationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8139 : Ojs.t) -> t_of_js x8139
    and t_0_to_js : t_0 -> Ojs.t = fun (x8138 : t) -> t_to_js x8138
    type tags = [ `RegistrationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8142 : Ojs.t) -> intf_of_js __tags_of_js x8142
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8140 : __tags intf) -> intf_to_js __tags_to_js x8140
    let (get_scope : 'tags this -> string) =
      fun (x8144 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8144) "scope")
    let (set_scope : 'tags this -> string -> unit) =
      fun (x8146 : 'tags this) ->
        fun (x8147 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8146) "scope"
            (Ojs.string_to_js x8147)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x8149 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8149) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x8151 : 'tags this) ->
        fun (x8152 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8151) "type"
            (WorkerType.t_to_js x8152)
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x8154 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8154) "updateViaCache")
    let (set_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t -> unit) =
      fun (x8156 : 'tags this) ->
        fun (x8157 : ServiceWorkerUpdateViaCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8156) "updateViaCache"
            (ServiceWorkerUpdateViaCache.t_to_js x8157)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface95:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> ServiceWorkerContainer.t
                         val set_prototype :
                           t -> ServiceWorkerContainer.t -> unit
                         val create : t -> ServiceWorkerContainer.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8160 : Ojs.t) -> x8160
    and t_to_js : t -> Ojs.t = fun (x8159 : Ojs.t) -> x8159
    let (get_prototype : t -> ServiceWorkerContainer.t) =
      fun (x8161 : t) ->
        ServiceWorkerContainer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8161) "prototype")
    let (set_prototype : t -> ServiceWorkerContainer.t -> unit) =
      fun (x8162 : t) ->
        fun (x8163 : ServiceWorkerContainer.t) ->
          Ojs.set_prop_ascii (t_to_js x8162) "prototype"
            (ServiceWorkerContainer.t_to_js x8163)
    let (create : t -> ServiceWorkerContainer.t) =
      fun (x8164 : t) ->
        ServiceWorkerContainer.t_of_js (Ojs.new_obj (t_to_js x8164) [||])
  end
 and
  ServiceWorkerContainer:sig
                           type t =
                             [ `EventTarget  | `ServiceWorkerContainer ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags =
                             [ `EventTarget  | `ServiceWorkerContainer ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags =
                               [ `EventTarget  | `ServiceWorkerContainer ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `ServiceWorkerContainer ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val get_controller :
                             'tags this -> ServiceWorker.t or_null
                           val get_oncontrollerchange :
                             'tags this ->
                               (this:t -> ev:Event.t -> any) or_null
                           val set_oncontrollerchange :
                             'tags this ->
                               (this:t -> ev:Event.t -> any) or_null -> unit
                           val get_onmessage :
                             'tags this ->
                               (this:t -> ev:MessageEvent.t_0 -> any) or_null
                           val set_onmessage :
                             'tags this ->
                               (this:t -> ev:MessageEvent.t_0 -> any) or_null
                                 -> unit
                           val get_onmessageerror :
                             'tags this ->
                               (this:t -> ev:MessageEvent.t_0 -> any) or_null
                           val set_onmessageerror :
                             'tags this ->
                               (this:t -> ev:MessageEvent.t_0 -> any) or_null
                                 -> unit
                           val get_ready :
                             'tags this ->
                               ServiceWorkerRegistration.t Promise.t_1
                           val getRegistration :
                             'tags this ->
                               ?clientURL:URL.t or_string ->
                                 unit ->
                                   ServiceWorkerRegistration.t or_undefined
                                     Promise.t_1
                           val getRegistrations :
                             'tags this ->
                               ServiceWorkerRegistration.t list Promise.t_1
                           val register :
                             'tags this ->
                               scriptURL:URL.t or_string ->
                                 ?options:RegistrationOptions.t ->
                                   unit ->
                                     ServiceWorkerRegistration.t Promise.t_1
                           val startMessages : 'tags this -> unit
                           val addEventListener :
                             'tags this ->
                               type_:'K ->
                                 listener:(this:t -> ev:any -> any) ->
                                   ?options:AddEventListenerOptions.t
                                     or_boolean -> unit -> unit
                           val addEventListener' :
                             'tags this ->
                               type_:string ->
                                 listener:EventListenerOrEventListenerObject.t
                                   ->
                                   ?options:AddEventListenerOptions.t
                                     or_boolean -> unit -> unit
                           val removeEventListener :
                             'tags this ->
                               type_:'K ->
                                 listener:(this:t -> ev:any -> any) ->
                                   ?options:EventListenerOptions.t or_boolean
                                     -> unit -> unit
                           val removeEventListener' :
                             'tags this ->
                               type_:string ->
                                 listener:EventListenerOrEventListenerObject.t
                                   ->
                                   ?options:EventListenerOptions.t or_boolean
                                     -> unit -> unit
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create : unit -> t
                         end =
  struct
    type t = [ `EventTarget  | `ServiceWorkerContainer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8166 : Ojs.t) -> t_of_js x8166
    and t_0_to_js : t_0 -> Ojs.t = fun (x8165 : t) -> t_to_js x8165
    type tags = [ `EventTarget  | `ServiceWorkerContainer ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8169 : Ojs.t) -> intf_of_js __tags_of_js x8169
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8167 : __tags intf) -> intf_to_js __tags_to_js x8167
    let (get_controller : 'tags this -> ServiceWorker.t or_null) =
      fun (x8171 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8171) "controller")
    let (get_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x8174 : 'tags this) ->
        or_null_of_js
          (fun (x8176 : Ojs.t) ->
             fun ~this:(x8177 : t) ->
               fun ~ev:(x8178 : Event.t) ->
                 any_of_js
                   (Ojs.apply x8176 [|(t_to_js x8177);(Event.t_to_js x8178)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8174)
             "oncontrollerchange")
    let (set_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x8179 : 'tags this) ->
        fun (x8180 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8179)
            "oncontrollerchange"
            (or_null_to_js
               (fun (x8181 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8182 : Ojs.t) ->
                       fun (x8183 : Ojs.t) ->
                         any_to_js
                           (x8181 ~this:(t_of_js x8182)
                              ~ev:(Event.t_of_js x8183)))) x8180)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x8185 : 'tags this) ->
        or_null_of_js
          (fun (x8187 : Ojs.t) ->
             fun ~this:(x8188 : t) ->
               fun ~ev:(x8189 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x8187
                      [|(t_to_js x8188);(MessageEvent.t_0_to_js x8189)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8185) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x8190 : 'tags this) ->
        fun (x8191 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8190) "onmessage"
            (or_null_to_js
               (fun (x8192 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8193 : Ojs.t) ->
                       fun (x8194 : Ojs.t) ->
                         any_to_js
                           (x8192 ~this:(t_of_js x8193)
                              ~ev:(MessageEvent.t_0_of_js x8194)))) x8191)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x8196 : 'tags this) ->
        or_null_of_js
          (fun (x8198 : Ojs.t) ->
             fun ~this:(x8199 : t) ->
               fun ~ev:(x8200 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x8198
                      [|(t_to_js x8199);(MessageEvent.t_0_to_js x8200)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8196) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x8201 : 'tags this) ->
        fun (x8202 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8201) "onmessageerror"
            (or_null_to_js
               (fun (x8203 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8204 : Ojs.t) ->
                       fun (x8205 : Ojs.t) ->
                         any_to_js
                           (x8203 ~this:(t_of_js x8204)
                              ~ev:(MessageEvent.t_0_of_js x8205)))) x8202)
    let (get_ready : 'tags this -> ServiceWorkerRegistration.t Promise.t_1) =
      fun (x8207 : 'tags this) ->
        Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8207) "ready")
    let (getRegistration :
      'tags this ->
        ?clientURL:URL.t or_string ->
          unit -> ServiceWorkerRegistration.t or_undefined Promise.t_1)
      =
      fun (x8214 : 'tags this) ->
        fun ?clientURL:(x8210 : URL.t or_string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x8217 : Ojs.t) ->
                 or_undefined_of_js ServiceWorkerRegistration.t_of_js x8217)
              (let x8216 = this_to_js Obj.magic x8214 in
               Ojs.call (Ojs.get_prop_ascii x8216 "getRegistration") "apply"
                 [|x8216;((let x8211 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8210 with
                            | Some x8212 ->
                                ignore
                                  (Ojs.call x8211 "push"
                                     [|(or_string_to_js URL.t_to_js x8212)|])
                            | None -> ());
                           x8211))|])
    let (getRegistrations :
      'tags this -> ServiceWorkerRegistration.t list Promise.t_1) =
      fun (x8219 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x8221 : Ojs.t) ->
             Ojs.list_of_js ServiceWorkerRegistration.t_of_js x8221)
          (Ojs.call (this_to_js Obj.magic x8219) "getRegistrations" [||])
    let (register :
      'tags this ->
        scriptURL:URL.t or_string ->
          ?options:RegistrationOptions.t ->
            unit -> ServiceWorkerRegistration.t Promise.t_1)
      =
      fun (x8228 : 'tags this) ->
        fun ~scriptURL:(x8223 : URL.t or_string) ->
          fun ?options:(x8224 : RegistrationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
                (let x8230 = this_to_js Obj.magic x8228 in
                 Ojs.call (Ojs.get_prop_ascii x8230 "register") "apply"
                   [|x8230;((let x8225 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8225 "push"
                                  [|(or_string_to_js URL.t_to_js x8223)|]);
                             (match x8224 with
                              | Some x8226 ->
                                  ignore
                                    (Ojs.call x8225 "push"
                                       [|(RegistrationOptions.t_to_js x8226)|])
                              | None -> ());
                             x8225))|])
    let (startMessages : 'tags this -> unit) =
      fun (x8232 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x8232) "startMessages" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8242 : 'tags this) ->
        fun ~type_:(x8234 : 'K) ->
          fun ~listener:(x8235 : this:t -> ev:any -> any) ->
            fun
              ?options:(x8236 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8244 = this_to_js Obj.magic x8242 in
                   Ojs.call (Ojs.get_prop_ascii x8244 "addEventListener")
                     "apply"
                     [|x8244;((let x8237 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8237 "push" [|(Obj.magic x8234)|]);
                               ignore
                                 (Ojs.call x8237 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8240 : Ojs.t) ->
                                            fun (x8241 : Ojs.t) ->
                                              any_to_js
                                                (x8235 ~this:(t_of_js x8240)
                                                   ~ev:(any_of_js x8241))))|]);
                               (match x8236 with
                                | Some x8238 ->
                                    ignore
                                      (Ojs.call x8237 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8238)|])
                                | None -> ());
                               x8237))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8251 : 'tags this) ->
        fun ~type_:(x8245 : string) ->
          fun ~listener:(x8246 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x8247 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8253 = this_to_js Obj.magic x8251 in
                   Ojs.call (Ojs.get_prop_ascii x8253 "addEventListener")
                     "apply"
                     [|x8253;((let x8248 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8248 "push"
                                    [|(Ojs.string_to_js x8245)|]);
                               ignore
                                 (Ojs.call x8248 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8246)|]);
                               (match x8247 with
                                | Some x8249 ->
                                    ignore
                                      (Ojs.call x8248 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8249)|])
                                | None -> ());
                               x8248))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8262 : 'tags this) ->
        fun ~type_:(x8254 : 'K) ->
          fun ~listener:(x8255 : this:t -> ev:any -> any) ->
            fun ?options:(x8256 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8264 = this_to_js Obj.magic x8262 in
                   Ojs.call (Ojs.get_prop_ascii x8264 "removeEventListener")
                     "apply"
                     [|x8264;((let x8257 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8257 "push" [|(Obj.magic x8254)|]);
                               ignore
                                 (Ojs.call x8257 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8260 : Ojs.t) ->
                                            fun (x8261 : Ojs.t) ->
                                              any_to_js
                                                (x8255 ~this:(t_of_js x8260)
                                                   ~ev:(any_of_js x8261))))|]);
                               (match x8256 with
                                | Some x8258 ->
                                    ignore
                                      (Ojs.call x8257 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8258)|])
                                | None -> ());
                               x8257))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8271 : 'tags this) ->
        fun ~type_:(x8265 : string) ->
          fun ~listener:(x8266 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x8267 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8273 = this_to_js Obj.magic x8271 in
                   Ojs.call (Ojs.get_prop_ascii x8273 "removeEventListener")
                     "apply"
                     [|x8273;((let x8268 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8268 "push"
                                    [|(Ojs.string_to_js x8265)|]);
                               ignore
                                 (Ojs.call x8268 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8266)|]);
                               (match x8267 with
                                | Some x8269 ->
                                    ignore
                                      (Ojs.call x8268 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8269)|])
                                | None -> ());
                               x8268))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer") 
             [||])
  end
module SecurityPolicyViolationEventDisposition =
  struct
    type t = [ `L_s66_enforce  | `L_s170_report ]
    let rec t_of_js : Ojs.t -> t =
      fun (x8275 : Ojs.t) ->
        let x8276 = x8275 in
        match Ojs.string_of_js x8276 with
        | "enforce" -> `L_s66_enforce
        | "report" -> `L_s170_report
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x8274 : [ `L_s66_enforce  | `L_s170_report ]) ->
        match x8274 with
        | `L_s66_enforce -> Ojs.string_to_js "enforce"
        | `L_s170_report -> Ojs.string_to_js "report"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8278 : Ojs.t) -> t_of_js x8278
    and t_0_to_js : t_0 -> Ojs.t = fun (x8277 : t) -> t_to_js x8277
  end
module SecurityPolicyViolationEventInit =
  struct
    type t = [ `EventInit  | `SecurityPolicyViolationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8280 : Ojs.t) -> t_of_js x8280
    and t_0_to_js : t_0 -> Ojs.t = fun (x8279 : t) -> t_to_js x8279
    type tags = [ `EventInit  | `SecurityPolicyViolationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8283 : Ojs.t) -> intf_of_js __tags_of_js x8283
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8281 : __tags intf) -> intf_to_js __tags_to_js x8281
    let (get_blockedURI : 'tags this -> string) =
      fun (x8285 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8285) "blockedURI")
    let (set_blockedURI : 'tags this -> string -> unit) =
      fun (x8287 : 'tags this) ->
        fun (x8288 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8287) "blockedURI"
            (Ojs.string_to_js x8288)
    let (get_columnNumber : 'tags this -> float) =
      fun (x8290 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8290) "columnNumber")
    let (set_columnNumber : 'tags this -> float -> unit) =
      fun (x8292 : 'tags this) ->
        fun (x8293 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8292) "columnNumber"
            (Ojs.float_to_js x8293)
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x8295 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8295) "disposition")
    let (set_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t -> unit) =
      fun (x8297 : 'tags this) ->
        fun (x8298 : SecurityPolicyViolationEventDisposition.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8297) "disposition"
            (SecurityPolicyViolationEventDisposition.t_to_js x8298)
    let (get_documentURI : 'tags this -> string) =
      fun (x8300 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8300) "documentURI")
    let (set_documentURI : 'tags this -> string -> unit) =
      fun (x8302 : 'tags this) ->
        fun (x8303 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8302) "documentURI"
            (Ojs.string_to_js x8303)
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x8305 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8305)
             "effectiveDirective")
    let (set_effectiveDirective : 'tags this -> string -> unit) =
      fun (x8307 : 'tags this) ->
        fun (x8308 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8307)
            "effectiveDirective" (Ojs.string_to_js x8308)
    let (get_lineNumber : 'tags this -> float) =
      fun (x8310 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8310) "lineNumber")
    let (set_lineNumber : 'tags this -> float -> unit) =
      fun (x8312 : 'tags this) ->
        fun (x8313 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8312) "lineNumber"
            (Ojs.float_to_js x8313)
    let (get_originalPolicy : 'tags this -> string) =
      fun (x8315 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8315) "originalPolicy")
    let (set_originalPolicy : 'tags this -> string -> unit) =
      fun (x8317 : 'tags this) ->
        fun (x8318 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8317) "originalPolicy"
            (Ojs.string_to_js x8318)
    let (get_referrer : 'tags this -> string) =
      fun (x8320 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8320) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x8322 : 'tags this) ->
        fun (x8323 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8322) "referrer"
            (Ojs.string_to_js x8323)
    let (get_sample : 'tags this -> string) =
      fun (x8325 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8325) "sample")
    let (set_sample : 'tags this -> string -> unit) =
      fun (x8327 : 'tags this) ->
        fun (x8328 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8327) "sample"
            (Ojs.string_to_js x8328)
    let (get_sourceFile : 'tags this -> string) =
      fun (x8330 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8330) "sourceFile")
    let (set_sourceFile : 'tags this -> string -> unit) =
      fun (x8332 : 'tags this) ->
        fun (x8333 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8332) "sourceFile"
            (Ojs.string_to_js x8333)
    let (get_statusCode : 'tags this -> float) =
      fun (x8335 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8335) "statusCode")
    let (set_statusCode : 'tags this -> float -> unit) =
      fun (x8337 : 'tags this) ->
        fun (x8338 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8337) "statusCode"
            (Ojs.float_to_js x8338)
    let (get_violatedDirective : 'tags this -> string) =
      fun (x8340 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8340)
             "violatedDirective")
    let (set_violatedDirective : 'tags this -> string -> unit) =
      fun (x8342 : 'tags this) ->
        fun (x8343 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8342) "violatedDirective"
            (Ojs.string_to_js x8343)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface93:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> SecurityPolicyViolationEvent.t
                         val set_prototype :
                           t -> SecurityPolicyViolationEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:SecurityPolicyViolationEventInit.t
                                 -> unit -> SecurityPolicyViolationEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8346 : Ojs.t) -> x8346
    and t_to_js : t -> Ojs.t = fun (x8345 : Ojs.t) -> x8345
    let (get_prototype : t -> SecurityPolicyViolationEvent.t) =
      fun (x8347 : t) ->
        SecurityPolicyViolationEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8347) "prototype")
    let (set_prototype : t -> SecurityPolicyViolationEvent.t -> unit) =
      fun (x8348 : t) ->
        fun (x8349 : SecurityPolicyViolationEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x8348) "prototype"
            (SecurityPolicyViolationEvent.t_to_js x8349)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:SecurityPolicyViolationEventInit.t ->
            unit -> SecurityPolicyViolationEvent.t)
      =
      fun (x8354 : t) ->
        fun ~type_:(x8350 : string) ->
          fun
            ?eventInitDict:(x8351 :
                             SecurityPolicyViolationEventInit.t option)
            ->
            fun () ->
              SecurityPolicyViolationEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x8354)
                   (let x8352 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x8352 "push" [|(Ojs.string_to_js x8350)|]);
                    (match x8351 with
                     | Some x8353 ->
                         ignore
                           (Ojs.call x8352 "push"
                              [|(SecurityPolicyViolationEventInit.t_to_js
                                   x8353)|])
                     | None -> ());
                    x8352))
  end
 and
  SecurityPolicyViolationEvent:sig
                                 type t =
                                   [ `Event 
                                   | `SecurityPolicyViolationEvent ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `Event 
                                   | `SecurityPolicyViolationEvent ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `Event 
                                     | `SecurityPolicyViolationEvent ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [>
                                                 `SecurityPolicyViolationEvent
                                                   ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val get_blockedURI : 'tags this -> string
                                 val get_columnNumber : 'tags this -> float
                                 val get_disposition :
                                   'tags this ->
                                     SecurityPolicyViolationEventDisposition.t
                                 val get_documentURI : 'tags this -> string
                                 val get_effectiveDirective :
                                   'tags this -> string
                                 val get_lineNumber : 'tags this -> float
                                 val get_originalPolicy :
                                   'tags this -> string
                                 val get_referrer : 'tags this -> string
                                 val get_sample : 'tags this -> string
                                 val get_sourceFile : 'tags this -> string
                                 val get_statusCode : 'tags this -> float
                                 val get_violatedDirective :
                                   'tags this -> string
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create :
                                   type_:string ->
                                     ?eventInitDict:SecurityPolicyViolationEventInit.t
                                       -> unit -> t
                               end =
  struct
    type t = [ `Event  | `SecurityPolicyViolationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8356 : Ojs.t) -> t_of_js x8356
    and t_0_to_js : t_0 -> Ojs.t = fun (x8355 : t) -> t_to_js x8355
    type tags = [ `Event  | `SecurityPolicyViolationEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8359 : Ojs.t) -> intf_of_js __tags_of_js x8359
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8357 : __tags intf) -> intf_to_js __tags_to_js x8357
    let (get_blockedURI : 'tags this -> string) =
      fun (x8361 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8361) "blockedURI")
    let (get_columnNumber : 'tags this -> float) =
      fun (x8363 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8363) "columnNumber")
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x8365 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8365) "disposition")
    let (get_documentURI : 'tags this -> string) =
      fun (x8367 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8367) "documentURI")
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x8369 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8369)
             "effectiveDirective")
    let (get_lineNumber : 'tags this -> float) =
      fun (x8371 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8371) "lineNumber")
    let (get_originalPolicy : 'tags this -> string) =
      fun (x8373 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8373) "originalPolicy")
    let (get_referrer : 'tags this -> string) =
      fun (x8375 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8375) "referrer")
    let (get_sample : 'tags this -> string) =
      fun (x8377 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8377) "sample")
    let (get_sourceFile : 'tags this -> string) =
      fun (x8379 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8379) "sourceFile")
    let (get_statusCode : 'tags this -> float) =
      fun (x8381 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8381) "statusCode")
    let (get_violatedDirective : 'tags this -> string) =
      fun (x8383 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8383)
             "violatedDirective")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
             "prototype")
    let (create :
      type_:string ->
        ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t)
      =
      fun ~type_:(x8385 : string) ->
        fun
          ?eventInitDict:(x8386 : SecurityPolicyViolationEventInit.t option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global
                    "SecurityPolicyViolationEvent")
                 (let x8387 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x8387 "push" [|(Ojs.string_to_js x8385)|]);
                  (match x8386 with
                   | Some x8388 ->
                       ignore
                         (Ojs.call x8387 "push"
                            [|(SecurityPolicyViolationEventInit.t_to_js x8388)|])
                   | None -> ());
                  x8387))
  end
module DOMMatrix2DInit =
  struct
    type t = [ `DOMMatrix2DInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8390 : Ojs.t) -> t_of_js x8390
    and t_0_to_js : t_0 -> Ojs.t = fun (x8389 : t) -> t_to_js x8389
    type tags = [ `DOMMatrix2DInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8393 : Ojs.t) -> intf_of_js __tags_of_js x8393
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8391 : __tags intf) -> intf_to_js __tags_to_js x8391
    let (get_a : 'tags this -> float) =
      fun (x8395 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8395) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x8397 : 'tags this) ->
        fun (x8398 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8397) "a"
            (Ojs.float_to_js x8398)
    let (get_b : 'tags this -> float) =
      fun (x8400 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8400) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x8402 : 'tags this) ->
        fun (x8403 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8402) "b"
            (Ojs.float_to_js x8403)
    let (get_c : 'tags this -> float) =
      fun (x8405 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8405) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x8407 : 'tags this) ->
        fun (x8408 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8407) "c"
            (Ojs.float_to_js x8408)
    let (get_d : 'tags this -> float) =
      fun (x8410 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8410) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x8412 : 'tags this) ->
        fun (x8413 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8412) "d"
            (Ojs.float_to_js x8413)
    let (get_e : 'tags this -> float) =
      fun (x8415 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8415) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x8417 : 'tags this) ->
        fun (x8418 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8417) "e"
            (Ojs.float_to_js x8418)
    let (get_f : 'tags this -> float) =
      fun (x8420 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x8420) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x8422 : 'tags this) ->
        fun (x8423 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8422) "f"
            (Ojs.float_to_js x8423)
    let (get_m11 : 'tags this -> float) =
      fun (x8425 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8425) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x8427 : 'tags this) ->
        fun (x8428 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8427) "m11"
            (Ojs.float_to_js x8428)
    let (get_m12 : 'tags this -> float) =
      fun (x8430 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8430) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x8432 : 'tags this) ->
        fun (x8433 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8432) "m12"
            (Ojs.float_to_js x8433)
    let (get_m21 : 'tags this -> float) =
      fun (x8435 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8435) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x8437 : 'tags this) ->
        fun (x8438 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8437) "m21"
            (Ojs.float_to_js x8438)
    let (get_m22 : 'tags this -> float) =
      fun (x8440 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8440) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x8442 : 'tags this) ->
        fun (x8443 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8442) "m22"
            (Ojs.float_to_js x8443)
    let (get_m41 : 'tags this -> float) =
      fun (x8445 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8445) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x8447 : 'tags this) ->
        fun (x8448 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8447) "m41"
            (Ojs.float_to_js x8448)
    let (get_m42 : 'tags this -> float) =
      fun (x8450 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8450) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x8452 : 'tags this) ->
        fun (x8453 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8452) "m42"
            (Ojs.float_to_js x8453)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface8:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> CanvasPattern.t
                        val set_prototype : t -> CanvasPattern.t -> unit
                        val create : t -> CanvasPattern.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8456 : Ojs.t) -> x8456
    and t_to_js : t -> Ojs.t = fun (x8455 : Ojs.t) -> x8455
    let (get_prototype : t -> CanvasPattern.t) =
      fun (x8457 : t) ->
        CanvasPattern.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8457) "prototype")
    let (set_prototype : t -> CanvasPattern.t -> unit) =
      fun (x8458 : t) ->
        fun (x8459 : CanvasPattern.t) ->
          Ojs.set_prop_ascii (t_to_js x8458) "prototype"
            (CanvasPattern.t_to_js x8459)
    let (create : t -> CanvasPattern.t) =
      fun (x8460 : t) ->
        CanvasPattern.t_of_js (Ojs.new_obj (t_to_js x8460) [||])
  end
 and
  CanvasPattern:sig
                  type t = [ `CanvasPattern ] intf
                  type t_0 = t
                  [@@@js.stop ]
                  type tags = [ `CanvasPattern ]
                  type tags_0 = tags
                  [@@@js.start ]
                  [@@@js.implem
                    type tags = [ `CanvasPattern ]
                    type tags_0 = tags]
                  type 'tags this =
                    'tags intf constraint 'tags = [> `CanvasPattern ]
                  val t_to_js : t -> Ojs.t
                  val t_of_js : Ojs.t -> t
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                  val setTransform :
                    'tags this ->
                      ?transform:DOMMatrix2DInit.t -> unit -> unit
                  val cast_from : 'tags this -> t
                  val prototype : unit -> t
                  val create : unit -> t
                end =
  struct
    type t = [ `CanvasPattern ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8462 : Ojs.t) -> t_of_js x8462
    and t_0_to_js : t_0 -> Ojs.t = fun (x8461 : t) -> t_to_js x8461
    type tags = [ `CanvasPattern ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8465 : Ojs.t) -> intf_of_js __tags_of_js x8465
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8463 : __tags intf) -> intf_to_js __tags_to_js x8463
    let (setTransform :
      'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x8470 : 'tags this) ->
        fun ?transform:(x8467 : DOMMatrix2DInit.t option) ->
          fun () ->
            ignore
              (let x8472 = this_to_js Obj.magic x8470 in
               Ojs.call (Ojs.get_prop_ascii x8472 "setTransform") "apply"
                 [|x8472;((let x8468 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8467 with
                            | Some x8469 ->
                                ignore
                                  (Ojs.call x8468 "push"
                                     [|(DOMMatrix2DInit.t_to_js x8469)|])
                            | None -> ());
                           x8468))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasPattern") [||])
  end
module PermissionName =
  struct
    type t =
      [ `L_s80_gamepad  | `L_s81_geolocation  | `L_s132_notifications 
      | `L_s149_persistent_storage  | `L_s160_push 
      | `L_s174_screen_wake_lock ]
    let rec t_of_js : Ojs.t -> t =
      fun (x8474 : Ojs.t) ->
        let x8475 = x8474 in
        match Ojs.string_of_js x8475 with
        | "gamepad" -> `L_s80_gamepad
        | "geolocation" -> `L_s81_geolocation
        | "notifications" -> `L_s132_notifications
        | "persistent-storage" -> `L_s149_persistent_storage
        | "push" -> `L_s160_push
        | "screen-wake-lock" -> `L_s174_screen_wake_lock
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x8473 :
          [ `L_s80_gamepad  | `L_s81_geolocation  | `L_s132_notifications 
          | `L_s149_persistent_storage  | `L_s160_push 
          | `L_s174_screen_wake_lock ])
        ->
        match x8473 with
        | `L_s80_gamepad -> Ojs.string_to_js "gamepad"
        | `L_s81_geolocation -> Ojs.string_to_js "geolocation"
        | `L_s132_notifications -> Ojs.string_to_js "notifications"
        | `L_s149_persistent_storage -> Ojs.string_to_js "persistent-storage"
        | `L_s160_push -> Ojs.string_to_js "push"
        | `L_s174_screen_wake_lock -> Ojs.string_to_js "screen-wake-lock"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8477 : Ojs.t) -> t_of_js x8477
    and t_0_to_js : t_0 -> Ojs.t = fun (x8476 : t) -> t_to_js x8476
  end
module PermissionDescriptor =
  struct
    type t = [ `PermissionDescriptor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8479 : Ojs.t) -> t_of_js x8479
    and t_0_to_js : t_0 -> Ojs.t = fun (x8478 : t) -> t_to_js x8478
    type tags = [ `PermissionDescriptor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionDescriptor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8482 : Ojs.t) -> intf_of_js __tags_of_js x8482
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8480 : __tags intf) -> intf_to_js __tags_to_js x8480
    let (get_name : 'tags this -> PermissionName.t) =
      fun (x8484 : 'tags this) ->
        PermissionName.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8484) "name")
    let (set_name : 'tags this -> PermissionName.t -> unit) =
      fun (x8486 : 'tags this) ->
        fun (x8487 : PermissionName.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8486) "name"
            (PermissionName.t_to_js x8487)
    let cast_from = Obj.magic
  end
module PermissionState =
  struct
    type t = [ `L_s58_denied  | `L_s83_granted  | `L_s158_prompt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x8490 : Ojs.t) ->
        let x8491 = x8490 in
        match Ojs.string_of_js x8491 with
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s83_granted
        | "prompt" -> `L_s158_prompt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x8489 : [ `L_s58_denied  | `L_s83_granted  | `L_s158_prompt ]) ->
        match x8489 with
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s83_granted -> Ojs.string_to_js "granted"
        | `L_s158_prompt -> Ojs.string_to_js "prompt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8493 : Ojs.t) -> t_of_js x8493
    and t_0_to_js : t_0 -> Ojs.t = fun (x8492 : t) -> t_to_js x8492
  end
module rec
  AnonymousInterface78:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PermissionStatus.t
                         val set_prototype : t -> PermissionStatus.t -> unit
                         val create : t -> PermissionStatus.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8495 : Ojs.t) -> x8495
    and t_to_js : t -> Ojs.t = fun (x8494 : Ojs.t) -> x8494
    let (get_prototype : t -> PermissionStatus.t) =
      fun (x8496 : t) ->
        PermissionStatus.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8496) "prototype")
    let (set_prototype : t -> PermissionStatus.t -> unit) =
      fun (x8497 : t) ->
        fun (x8498 : PermissionStatus.t) ->
          Ojs.set_prop_ascii (t_to_js x8497) "prototype"
            (PermissionStatus.t_to_js x8498)
    let (create : t -> PermissionStatus.t) =
      fun (x8499 : t) ->
        PermissionStatus.t_of_js (Ojs.new_obj (t_to_js x8499) [||])
  end
 and
  PermissionStatus:sig
                     type t = [ `EventTarget  | `PermissionStatus ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `EventTarget  | `PermissionStatus ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `EventTarget  | `PermissionStatus ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `PermissionStatus ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_onchange :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onchange :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_state : 'tags this -> PermissionState.t
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t = [ `EventTarget  | `PermissionStatus ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8501 : Ojs.t) -> t_of_js x8501
    and t_0_to_js : t_0 -> Ojs.t = fun (x8500 : t) -> t_to_js x8500
    type tags = [ `EventTarget  | `PermissionStatus ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8504 : Ojs.t) -> intf_of_js __tags_of_js x8504
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8502 : __tags intf) -> intf_to_js __tags_to_js x8502
    let (get_onchange : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x8506 : 'tags this) ->
        or_null_of_js
          (fun (x8508 : Ojs.t) ->
             fun ~this:(x8509 : t) ->
               fun ~ev:(x8510 : Event.t) ->
                 any_of_js
                   (Ojs.apply x8508 [|(t_to_js x8509);(Event.t_to_js x8510)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8506) "onchange")
    let (set_onchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x8511 : 'tags this) ->
        fun (x8512 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8511) "onchange"
            (or_null_to_js
               (fun (x8513 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x8514 : Ojs.t) ->
                       fun (x8515 : Ojs.t) ->
                         any_to_js
                           (x8513 ~this:(t_of_js x8514)
                              ~ev:(Event.t_of_js x8515)))) x8512)
    let (get_state : 'tags this -> PermissionState.t) =
      fun (x8517 : 'tags this) ->
        PermissionState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8517) "state")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8527 : 'tags this) ->
        fun ~type_:(x8519 : 'K) ->
          fun ~listener:(x8520 : this:t -> ev:any -> any) ->
            fun
              ?options:(x8521 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8529 = this_to_js Obj.magic x8527 in
                   Ojs.call (Ojs.get_prop_ascii x8529 "addEventListener")
                     "apply"
                     [|x8529;((let x8522 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8522 "push" [|(Obj.magic x8519)|]);
                               ignore
                                 (Ojs.call x8522 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8525 : Ojs.t) ->
                                            fun (x8526 : Ojs.t) ->
                                              any_to_js
                                                (x8520 ~this:(t_of_js x8525)
                                                   ~ev:(any_of_js x8526))))|]);
                               (match x8521 with
                                | Some x8523 ->
                                    ignore
                                      (Ojs.call x8522 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8523)|])
                                | None -> ());
                               x8522))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8536 : 'tags this) ->
        fun ~type_:(x8530 : string) ->
          fun ~listener:(x8531 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x8532 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8538 = this_to_js Obj.magic x8536 in
                   Ojs.call (Ojs.get_prop_ascii x8538 "addEventListener")
                     "apply"
                     [|x8538;((let x8533 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8533 "push"
                                    [|(Ojs.string_to_js x8530)|]);
                               ignore
                                 (Ojs.call x8533 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8531)|]);
                               (match x8532 with
                                | Some x8534 ->
                                    ignore
                                      (Ojs.call x8533 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x8534)|])
                                | None -> ());
                               x8533))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8547 : 'tags this) ->
        fun ~type_:(x8539 : 'K) ->
          fun ~listener:(x8540 : this:t -> ev:any -> any) ->
            fun ?options:(x8541 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8549 = this_to_js Obj.magic x8547 in
                   Ojs.call (Ojs.get_prop_ascii x8549 "removeEventListener")
                     "apply"
                     [|x8549;((let x8542 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8542 "push" [|(Obj.magic x8539)|]);
                               ignore
                                 (Ojs.call x8542 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x8545 : Ojs.t) ->
                                            fun (x8546 : Ojs.t) ->
                                              any_to_js
                                                (x8540 ~this:(t_of_js x8545)
                                                   ~ev:(any_of_js x8546))))|]);
                               (match x8541 with
                                | Some x8543 ->
                                    ignore
                                      (Ojs.call x8542 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8543)|])
                                | None -> ());
                               x8542))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x8556 : 'tags this) ->
        fun ~type_:(x8550 : string) ->
          fun ~listener:(x8551 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x8552 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x8558 = this_to_js Obj.magic x8556 in
                   Ojs.call (Ojs.get_prop_ascii x8558 "removeEventListener")
                     "apply"
                     [|x8558;((let x8553 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x8553 "push"
                                    [|(Ojs.string_to_js x8550)|]);
                               ignore
                                 (Ojs.call x8553 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x8551)|]);
                               (match x8552 with
                                | Some x8554 ->
                                    ignore
                                      (Ojs.call x8553 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x8554)|])
                                | None -> ());
                               x8553))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PermissionStatus") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
             [||])
  end
module rec
  AnonymousInterface79:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Permissions.t
                         val set_prototype : t -> Permissions.t -> unit
                         val create : t -> Permissions.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8560 : Ojs.t) -> x8560
    and t_to_js : t -> Ojs.t = fun (x8559 : Ojs.t) -> x8559
    let (get_prototype : t -> Permissions.t) =
      fun (x8561 : t) ->
        Permissions.t_of_js (Ojs.get_prop_ascii (t_to_js x8561) "prototype")
    let (set_prototype : t -> Permissions.t -> unit) =
      fun (x8562 : t) ->
        fun (x8563 : Permissions.t) ->
          Ojs.set_prop_ascii (t_to_js x8562) "prototype"
            (Permissions.t_to_js x8563)
    let (create : t -> Permissions.t) =
      fun (x8564 : t) ->
        Permissions.t_of_js (Ojs.new_obj (t_to_js x8564) [||])
  end
 and
  Permissions:sig
                type t = [ `Permissions ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `Permissions ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `Permissions ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `Permissions ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val query :
                  'tags this ->
                    permissionDesc:PermissionDescriptor.t ->
                      PermissionStatus.t Promise.t_1
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `Permissions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8566 : Ojs.t) -> t_of_js x8566
    and t_0_to_js : t_0 -> Ojs.t = fun (x8565 : t) -> t_to_js x8565
    type tags = [ `Permissions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8569 : Ojs.t) -> intf_of_js __tags_of_js x8569
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8567 : __tags intf) -> intf_to_js __tags_to_js x8567
    let (query :
      'tags this ->
        permissionDesc:PermissionDescriptor.t ->
          PermissionStatus.t Promise.t_1)
      =
      fun (x8572 : 'tags this) ->
        fun ~permissionDesc:(x8571 : PermissionDescriptor.t) ->
          Promise.t_1_of_js PermissionStatus.t_of_js
            (Ojs.call (this_to_js Obj.magic x8572) "query"
               [|(PermissionDescriptor.t_to_js x8571)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Permissions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Permissions") [||])
  end
module rec
  AnonymousInterface77:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceServerTiming.t
                         val set_prototype :
                           t -> PerformanceServerTiming.t -> unit
                         val create : t -> PerformanceServerTiming.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8576 : Ojs.t) -> x8576
    and t_to_js : t -> Ojs.t = fun (x8575 : Ojs.t) -> x8575
    let (get_prototype : t -> PerformanceServerTiming.t) =
      fun (x8577 : t) ->
        PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8577) "prototype")
    let (set_prototype : t -> PerformanceServerTiming.t -> unit) =
      fun (x8578 : t) ->
        fun (x8579 : PerformanceServerTiming.t) ->
          Ojs.set_prop_ascii (t_to_js x8578) "prototype"
            (PerformanceServerTiming.t_to_js x8579)
    let (create : t -> PerformanceServerTiming.t) =
      fun (x8580 : t) ->
        PerformanceServerTiming.t_of_js (Ojs.new_obj (t_to_js x8580) [||])
  end
 and
  PerformanceServerTiming:sig
                            type t = [ `PerformanceServerTiming ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `PerformanceServerTiming ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `PerformanceServerTiming ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `PerformanceServerTiming ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_description : 'tags this -> string
                            val get_duration :
                              'tags this -> DOMHighResTimeStamp.t
                            val get_name : 'tags this -> string
                            val toJSON : 'tags this -> any
                            val cast_from : 'tags this -> t
                            val prototype : unit -> t
                            val create : unit -> t
                          end =
  struct
    type t = [ `PerformanceServerTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8582 : Ojs.t) -> t_of_js x8582
    and t_0_to_js : t_0 -> Ojs.t = fun (x8581 : t) -> t_to_js x8581
    type tags = [ `PerformanceServerTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceServerTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8585 : Ojs.t) -> intf_of_js __tags_of_js x8585
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8583 : __tags intf) -> intf_to_js __tags_to_js x8583
    let (get_description : 'tags this -> string) =
      fun (x8587 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8587) "description")
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8589 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8589) "duration")
    let (get_name : 'tags this -> string) =
      fun (x8591 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8591) "name")
    let (toJSON : 'tags this -> any) =
      fun (x8593 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x8593) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming") 
             [||])
  end
module rec
  AnonymousInterface76:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceResourceTiming.t
                         val set_prototype :
                           t -> PerformanceResourceTiming.t -> unit
                         val create : t -> PerformanceResourceTiming.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8596 : Ojs.t) -> x8596
    and t_to_js : t -> Ojs.t = fun (x8595 : Ojs.t) -> x8595
    let (get_prototype : t -> PerformanceResourceTiming.t) =
      fun (x8597 : t) ->
        PerformanceResourceTiming.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8597) "prototype")
    let (set_prototype : t -> PerformanceResourceTiming.t -> unit) =
      fun (x8598 : t) ->
        fun (x8599 : PerformanceResourceTiming.t) ->
          Ojs.set_prop_ascii (t_to_js x8598) "prototype"
            (PerformanceResourceTiming.t_to_js x8599)
    let (create : t -> PerformanceResourceTiming.t) =
      fun (x8600 : t) ->
        PerformanceResourceTiming.t_of_js (Ojs.new_obj (t_to_js x8600) [||])
  end
 and
  PerformanceResourceTiming:sig
                              type t =
                                [ `PerformanceEntry 
                                | `PerformanceResourceTiming ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `PerformanceEntry 
                                | `PerformanceResourceTiming ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `PerformanceEntry 
                                  | `PerformanceResourceTiming ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `PerformanceResourceTiming ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_connectEnd :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_connectStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_decodedBodySize : 'tags this -> float
                              val get_domainLookupEnd :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_domainLookupStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_encodedBodySize : 'tags this -> float
                              val get_fetchStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_initiatorType : 'tags this -> string
                              val get_nextHopProtocol : 'tags this -> string
                              val get_redirectEnd :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_redirectStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_requestStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_responseEnd :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_responseStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_secureConnectionStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val get_serverTiming :
                                'tags this -> PerformanceServerTiming.t list
                              val get_transferSize : 'tags this -> float
                              val get_workerStart :
                                'tags this -> DOMHighResTimeStamp.t
                              val toJSON : 'tags this -> any
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `PerformanceEntry  | `PerformanceResourceTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8602 : Ojs.t) -> t_of_js x8602
    and t_0_to_js : t_0 -> Ojs.t = fun (x8601 : t) -> t_to_js x8601
    type tags = [ `PerformanceEntry  | `PerformanceResourceTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8605 : Ojs.t) -> intf_of_js __tags_of_js x8605
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8603 : __tags intf) -> intf_to_js __tags_to_js x8603
    let (get_connectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8607 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8607) "connectEnd")
    let (get_connectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8609 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8609) "connectStart")
    let (get_decodedBodySize : 'tags this -> float) =
      fun (x8611 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8611) "decodedBodySize")
    let (get_domainLookupEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8613 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8613) "domainLookupEnd")
    let (get_domainLookupStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8615 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8615)
             "domainLookupStart")
    let (get_encodedBodySize : 'tags this -> float) =
      fun (x8617 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8617) "encodedBodySize")
    let (get_fetchStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8619 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8619) "fetchStart")
    let (get_initiatorType : 'tags this -> string) =
      fun (x8621 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8621) "initiatorType")
    let (get_nextHopProtocol : 'tags this -> string) =
      fun (x8623 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8623) "nextHopProtocol")
    let (get_redirectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8625 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8625) "redirectEnd")
    let (get_redirectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8627 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8627) "redirectStart")
    let (get_requestStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8629 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8629) "requestStart")
    let (get_responseEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8631 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8631) "responseEnd")
    let (get_responseStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8633 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8633) "responseStart")
    let (get_secureConnectionStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8635 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8635)
             "secureConnectionStart")
    let (get_serverTiming : 'tags this -> PerformanceServerTiming.t list) =
      fun (x8637 : 'tags this) ->
        Ojs.list_of_js PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8637) "serverTiming")
    let (get_transferSize : 'tags this -> float) =
      fun (x8640 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8640) "transferSize")
    let (get_workerStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x8642 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8642) "workerStart")
    let (toJSON : 'tags this -> any) =
      fun (x8644 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x8644) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming") 
             [||])
  end
module PerformanceObserverInit =
  struct
    type t = [ `PerformanceObserverInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8647 : Ojs.t) -> t_of_js x8647
    and t_0_to_js : t_0 -> Ojs.t = fun (x8646 : t) -> t_to_js x8646
    type tags = [ `PerformanceObserverInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8650 : Ojs.t) -> intf_of_js __tags_of_js x8650
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8648 : __tags intf) -> intf_to_js __tags_to_js x8648
    let (get_buffered : 'tags this -> bool) =
      fun (x8652 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8652) "buffered")
    let (set_buffered : 'tags this -> bool -> unit) =
      fun (x8654 : 'tags this) ->
        fun (x8655 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8654) "buffered"
            (Ojs.bool_to_js x8655)
    let (get_entryTypes : 'tags this -> string list) =
      fun (x8657 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8657) "entryTypes")
    let (set_entryTypes : 'tags this -> string list -> unit) =
      fun (x8660 : 'tags this) ->
        fun (x8661 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8660) "entryTypes"
            (Ojs.list_to_js Ojs.string_to_js x8661)
    let (get_type : 'tags this -> string) =
      fun (x8664 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8664) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x8666 : 'tags this) ->
        fun (x8667 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8666) "type"
            (Ojs.string_to_js x8667)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface75:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> PerformanceObserverEntryList.t
                         val set_prototype :
                           t -> PerformanceObserverEntryList.t -> unit
                         val create : t -> PerformanceObserverEntryList.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8670 : Ojs.t) -> x8670
    and t_to_js : t -> Ojs.t = fun (x8669 : Ojs.t) -> x8669
    let (get_prototype : t -> PerformanceObserverEntryList.t) =
      fun (x8671 : t) ->
        PerformanceObserverEntryList.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8671) "prototype")
    let (set_prototype : t -> PerformanceObserverEntryList.t -> unit) =
      fun (x8672 : t) ->
        fun (x8673 : PerformanceObserverEntryList.t) ->
          Ojs.set_prop_ascii (t_to_js x8672) "prototype"
            (PerformanceObserverEntryList.t_to_js x8673)
    let (create : t -> PerformanceObserverEntryList.t) =
      fun (x8674 : t) ->
        PerformanceObserverEntryList.t_of_js
          (Ojs.new_obj (t_to_js x8674) [||])
  end
 and
  PerformanceObserverEntryList:sig
                                 type t =
                                   [ `PerformanceObserverEntryList ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `PerformanceObserverEntryList ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `PerformanceObserverEntryList ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [>
                                                 `PerformanceObserverEntryList
                                                   ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val getEntries :
                                   'tags this -> PerformanceEntryList.t
                                 val getEntriesByName :
                                   'tags this ->
                                     name:string ->
                                       ?type_:string ->
                                         unit -> PerformanceEntryList.t
                                 val getEntriesByType :
                                   'tags this ->
                                     type_:string -> PerformanceEntryList.t
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create : unit -> t
                               end =
  struct
    type t = [ `PerformanceObserverEntryList ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8676 : Ojs.t) -> t_of_js x8676
    and t_0_to_js : t_0 -> Ojs.t = fun (x8675 : t) -> t_to_js x8675
    type tags = [ `PerformanceObserverEntryList ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8679 : Ojs.t) -> intf_of_js __tags_of_js x8679
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8677 : __tags intf) -> intf_to_js __tags_to_js x8677
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x8681 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x8681) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x8687 : 'tags this) ->
        fun ~name:(x8683 : string) ->
          fun ?type_:(x8684 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x8689 = this_to_js Obj.magic x8687 in
                 Ojs.call (Ojs.get_prop_ascii x8689 "getEntriesByName")
                   "apply"
                   [|x8689;((let x8685 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8685 "push"
                                  [|(Ojs.string_to_js x8683)|]);
                             (match x8684 with
                              | Some x8686 ->
                                  ignore
                                    (Ojs.call x8685 "push"
                                       [|(Ojs.string_to_js x8686)|])
                              | None -> ());
                             x8685))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x8691 : 'tags this) ->
        fun ~type_:(x8690 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x8691) "getEntriesByType"
               [|(Ojs.string_to_js x8690)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             [||])
  end
module rec
  AnonymousInterface74:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> PerformanceObserver.t
                         val set_prototype :
                           t -> PerformanceObserver.t -> unit
                         val create :
                           t ->
                             callback:PerformanceObserverCallback.t ->
                               PerformanceObserver.t
                         val get_supportedEntryTypes : t -> string list
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8694 : Ojs.t) -> x8694
    and t_to_js : t -> Ojs.t = fun (x8693 : Ojs.t) -> x8693
    let (get_prototype : t -> PerformanceObserver.t) =
      fun (x8695 : t) ->
        PerformanceObserver.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8695) "prototype")
    let (set_prototype : t -> PerformanceObserver.t -> unit) =
      fun (x8696 : t) ->
        fun (x8697 : PerformanceObserver.t) ->
          Ojs.set_prop_ascii (t_to_js x8696) "prototype"
            (PerformanceObserver.t_to_js x8697)
    let (create :
      t -> callback:PerformanceObserverCallback.t -> PerformanceObserver.t) =
      fun (x8699 : t) ->
        fun ~callback:(x8698 : PerformanceObserverCallback.t) ->
          PerformanceObserver.t_of_js
            (Ojs.new_obj (t_to_js x8699)
               [|(PerformanceObserverCallback.t_to_js x8698)|])
    let (get_supportedEntryTypes : t -> string list) =
      fun (x8700 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x8700) "supportedEntryTypes")
  end
 and
  PerformanceObserver:sig
                        type t = [ `PerformanceObserver ] intf
                        type t_0 = t
                        [@@@js.stop ]
                        type tags = [ `PerformanceObserver ]
                        type tags_0 = tags
                        [@@@js.start ]
                        [@@@js.implem
                          type tags = [ `PerformanceObserver ]
                          type tags_0 = tags]
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `PerformanceObserver ]
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val disconnect : 'tags this -> unit
                        val observe :
                          'tags this ->
                            ?options:PerformanceObserverInit.t ->
                              unit -> unit
                        val takeRecords :
                          'tags this -> PerformanceEntryList.t
                        val cast_from : 'tags this -> t
                        val prototype : unit -> t
                        val create : PerformanceObserverCallback.t -> t
                        val supportedEntryTypes : unit -> string list
                      end =
  struct
    type t = [ `PerformanceObserver ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8703 : Ojs.t) -> t_of_js x8703
    and t_0_to_js : t_0 -> Ojs.t = fun (x8702 : t) -> t_to_js x8702
    type tags = [ `PerformanceObserver ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8706 : Ojs.t) -> intf_of_js __tags_of_js x8706
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8704 : __tags intf) -> intf_to_js __tags_to_js x8704
    let (disconnect : 'tags this -> unit) =
      fun (x8708 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x8708) "disconnect" [||])
    let (observe :
      'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit) =
      fun (x8713 : 'tags this) ->
        fun ?options:(x8710 : PerformanceObserverInit.t option) ->
          fun () ->
            ignore
              (let x8715 = this_to_js Obj.magic x8713 in
               Ojs.call (Ojs.get_prop_ascii x8715 "observe") "apply"
                 [|x8715;((let x8711 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x8710 with
                            | Some x8712 ->
                                ignore
                                  (Ojs.call x8711 "push"
                                     [|(PerformanceObserverInit.t_to_js x8712)|])
                            | None -> ());
                           x8711))|])
    let (takeRecords : 'tags this -> PerformanceEntryList.t) =
      fun (x8716 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x8716) "takeRecords" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "prototype")
    let (create : PerformanceObserverCallback.t -> t) =
      fun (x8718 : PerformanceObserverCallback.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             [|(PerformanceObserverCallback.t_to_js x8718)|])
    let (supportedEntryTypes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "supportedEntryTypes")
  end and
       PerformanceObserverCallback:sig
                                     type t =
                                       [ `PerformanceObserverCallback ] intf
                                     type t_0 = t
                                     [@@@js.stop ]
                                     type tags =
                                       [ `PerformanceObserverCallback ]
                                     type tags_0 = tags
                                     [@@@js.start ]
                                     [@@@js.implem
                                       type tags =
                                         [ `PerformanceObserverCallback ]
                                       type tags_0 = tags]
                                     type 'tags this =
                                       'tags intf constraint 'tags =
                                                   [>
                                                     `PerformanceObserverCallback
                                                       ]
                                     val t_to_js : t -> Ojs.t
                                     val t_of_js : Ojs.t -> t
                                     val t_0_to_js : t_0 -> Ojs.t
                                     val t_0_of_js : Ojs.t -> t_0
                                     val apply :
                                       'tags this ->
                                         entries:PerformanceObserverEntryList.t
                                           ->
                                           observer:PerformanceObserver.t ->
                                             unit
                                     val cast_from : 'tags this -> t
                                   end =
       struct
         type t = [ `PerformanceObserverCallback ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x8721 : Ojs.t) -> t_of_js x8721
         and t_0_to_js : t_0 -> Ojs.t = fun (x8720 : t) -> t_to_js x8720
         type tags = [ `PerformanceObserverCallback ]
         type tags_0 = tags
         type 'tags this =
           'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x8724 : Ojs.t) -> intf_of_js __tags_of_js x8724
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x8722 : __tags intf) -> intf_to_js __tags_to_js x8722
         let (apply :
           'tags this ->
             entries:PerformanceObserverEntryList.t ->
               observer:PerformanceObserver.t -> unit)
           =
           fun (x8728 : 'tags this) ->
             fun ~entries:(x8726 : PerformanceObserverEntryList.t) ->
               fun ~observer:(x8727 : PerformanceObserver.t) ->
                 ignore
                   (Ojs.apply (this_to_js Obj.magic x8728)
                      [|(PerformanceObserverEntryList.t_to_js x8726);(
                        PerformanceObserver.t_to_js x8727)|])
         let cast_from = Obj.magic
       end
module rec
  AnonymousInterface7:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> CanvasGradient.t
                        val set_prototype : t -> CanvasGradient.t -> unit
                        val create : t -> CanvasGradient.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8731 : Ojs.t) -> x8731
    and t_to_js : t -> Ojs.t = fun (x8730 : Ojs.t) -> x8730
    let (get_prototype : t -> CanvasGradient.t) =
      fun (x8732 : t) ->
        CanvasGradient.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8732) "prototype")
    let (set_prototype : t -> CanvasGradient.t -> unit) =
      fun (x8733 : t) ->
        fun (x8734 : CanvasGradient.t) ->
          Ojs.set_prop_ascii (t_to_js x8733) "prototype"
            (CanvasGradient.t_to_js x8734)
    let (create : t -> CanvasGradient.t) =
      fun (x8735 : t) ->
        CanvasGradient.t_of_js (Ojs.new_obj (t_to_js x8735) [||])
  end
 and
  CanvasGradient:sig
                   type t = [ `CanvasGradient ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `CanvasGradient ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `CanvasGradient ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `CanvasGradient ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val addColorStop :
                     'tags this -> offset:float -> color:string -> unit
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `CanvasGradient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8737 : Ojs.t) -> t_of_js x8737
    and t_0_to_js : t_0 -> Ojs.t = fun (x8736 : t) -> t_to_js x8736
    type tags = [ `CanvasGradient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8740 : Ojs.t) -> intf_of_js __tags_of_js x8740
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8738 : __tags intf) -> intf_to_js __tags_to_js x8738
    let (addColorStop : 'tags this -> offset:float -> color:string -> unit) =
      fun (x8744 : 'tags this) ->
        fun ~offset:(x8742 : float) ->
          fun ~color:(x8743 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8744) "addColorStop"
                 [|(Ojs.float_to_js x8742);(Ojs.string_to_js x8743)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CanvasGradient") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasGradient") [||])
  end
module CanvasPath =
  struct
    type t = [ `CanvasPath ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8747 : Ojs.t) -> t_of_js x8747
    and t_0_to_js : t_0 -> Ojs.t = fun (x8746 : t) -> t_to_js x8746
    type tags = [ `CanvasPath ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8750 : Ojs.t) -> intf_of_js __tags_of_js x8750
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8748 : __tags intf) -> intf_to_js __tags_to_js x8748
    let (arc :
      'tags this ->
        x:float ->
          y:float ->
            radius:float ->
              startAngle:float ->
                endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x8760 : 'tags this) ->
        fun ~x:(x8752 : float) ->
          fun ~y:(x8753 : float) ->
            fun ~radius:(x8754 : float) ->
              fun ~startAngle:(x8755 : float) ->
                fun ~endAngle:(x8756 : float) ->
                  fun ?counterclockwise:(x8757 : bool option) ->
                    fun () ->
                      ignore
                        (let x8762 = this_to_js Obj.magic x8760 in
                         Ojs.call (Ojs.get_prop_ascii x8762 "arc") "apply"
                           [|x8762;((let x8758 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x8758 "push"
                                          [|(Ojs.float_to_js x8752)|]);
                                     ignore
                                       (Ojs.call x8758 "push"
                                          [|(Ojs.float_to_js x8753)|]);
                                     ignore
                                       (Ojs.call x8758 "push"
                                          [|(Ojs.float_to_js x8754)|]);
                                     ignore
                                       (Ojs.call x8758 "push"
                                          [|(Ojs.float_to_js x8755)|]);
                                     ignore
                                       (Ojs.call x8758 "push"
                                          [|(Ojs.float_to_js x8756)|]);
                                     (match x8757 with
                                      | Some x8759 ->
                                          ignore
                                            (Ojs.call x8758 "push"
                                               [|(Ojs.bool_to_js x8759)|])
                                      | None -> ());
                                     x8758))|])
    let (arcTo :
      'tags this ->
        x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit)
      =
      fun (x8768 : 'tags this) ->
        fun ~x1:(x8763 : float) ->
          fun ~y1:(x8764 : float) ->
            fun ~x2:(x8765 : float) ->
              fun ~y2:(x8766 : float) ->
                fun ~radius:(x8767 : float) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8768) "arcTo"
                       [|(Ojs.float_to_js x8763);(Ojs.float_to_js x8764);(
                         Ojs.float_to_js x8765);(Ojs.float_to_js x8766);(
                         Ojs.float_to_js x8767)|])
    let (bezierCurveTo :
      'tags this ->
        cp1x:float ->
          cp1y:float ->
            cp2x:float -> cp2y:float -> x:float -> y:float -> unit)
      =
      fun (x8776 : 'tags this) ->
        fun ~cp1x:(x8770 : float) ->
          fun ~cp1y:(x8771 : float) ->
            fun ~cp2x:(x8772 : float) ->
              fun ~cp2y:(x8773 : float) ->
                fun ~x:(x8774 : float) ->
                  fun ~y:(x8775 : float) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8776) "bezierCurveTo"
                         [|(Ojs.float_to_js x8770);(Ojs.float_to_js x8771);(
                           Ojs.float_to_js x8772);(Ojs.float_to_js x8773);(
                           Ojs.float_to_js x8774);(Ojs.float_to_js x8775)|])
    let (closePath : 'tags this -> unit) =
      fun (x8778 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x8778) "closePath" [||])
    let (ellipse :
      'tags this ->
        x:float ->
          y:float ->
            radiusX:float ->
              radiusY:float ->
                rotation:float ->
                  startAngle:float ->
                    endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x8790 : 'tags this) ->
        fun ~x:(x8780 : float) ->
          fun ~y:(x8781 : float) ->
            fun ~radiusX:(x8782 : float) ->
              fun ~radiusY:(x8783 : float) ->
                fun ~rotation:(x8784 : float) ->
                  fun ~startAngle:(x8785 : float) ->
                    fun ~endAngle:(x8786 : float) ->
                      fun ?counterclockwise:(x8787 : bool option) ->
                        fun () ->
                          ignore
                            (let x8792 = this_to_js Obj.magic x8790 in
                             Ojs.call (Ojs.get_prop_ascii x8792 "ellipse")
                               "apply"
                               [|x8792;((let x8788 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x8788 "push"
                                              [|(Ojs.float_to_js x8780)|]);
                                         ignore
                                           (Ojs.call x8788 "push"
                                              [|(Ojs.float_to_js x8781)|]);
                                         ignore
                                           (Ojs.call x8788 "push"
                                              [|(Ojs.float_to_js x8782)|]);
                                         ignore
                                           (Ojs.call x8788 "push"
                                              [|(Ojs.float_to_js x8783)|]);
                                         ignore
                                           (Ojs.call x8788 "push"
                                              [|(Ojs.float_to_js x8784)|]);
                                         ignore
                                           (Ojs.call x8788 "push"
                                              [|(Ojs.float_to_js x8785)|]);
                                         ignore
                                           (Ojs.call x8788 "push"
                                              [|(Ojs.float_to_js x8786)|]);
                                         (match x8787 with
                                          | Some x8789 ->
                                              ignore
                                                (Ojs.call x8788 "push"
                                                   [|(Ojs.bool_to_js x8789)|])
                                          | None -> ());
                                         x8788))|])
    let (lineTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x8795 : 'tags this) ->
        fun ~x:(x8793 : float) ->
          fun ~y:(x8794 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8795) "lineTo"
                 [|(Ojs.float_to_js x8793);(Ojs.float_to_js x8794)|])
    let (moveTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x8799 : 'tags this) ->
        fun ~x:(x8797 : float) ->
          fun ~y:(x8798 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8799) "moveTo"
                 [|(Ojs.float_to_js x8797);(Ojs.float_to_js x8798)|])
    let (quadraticCurveTo :
      'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit) =
      fun (x8805 : 'tags this) ->
        fun ~cpx:(x8801 : float) ->
          fun ~cpy:(x8802 : float) ->
            fun ~x:(x8803 : float) ->
              fun ~y:(x8804 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x8805) "quadraticCurveTo"
                     [|(Ojs.float_to_js x8801);(Ojs.float_to_js x8802);(
                       Ojs.float_to_js x8803);(Ojs.float_to_js x8804)|])
    let (rect :
      'tags this -> x:float -> y:float -> w:float -> h:float -> unit) =
      fun (x8811 : 'tags this) ->
        fun ~x:(x8807 : float) ->
          fun ~y:(x8808 : float) ->
            fun ~w:(x8809 : float) ->
              fun ~h:(x8810 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x8811) "rect"
                     [|(Ojs.float_to_js x8807);(Ojs.float_to_js x8808);(
                       Ojs.float_to_js x8809);(Ojs.float_to_js x8810)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface69:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> Path2D.t
                         val set_prototype : t -> Path2D.t -> unit
                         val create :
                           t -> ?path:Path2D.t or_string -> unit -> Path2D.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8814 : Ojs.t) -> x8814
    and t_to_js : t -> Ojs.t = fun (x8813 : Ojs.t) -> x8813
    let (get_prototype : t -> Path2D.t) =
      fun (x8815 : t) ->
        Path2D.t_of_js (Ojs.get_prop_ascii (t_to_js x8815) "prototype")
    let (set_prototype : t -> Path2D.t -> unit) =
      fun (x8816 : t) ->
        fun (x8817 : Path2D.t) ->
          Ojs.set_prop_ascii (t_to_js x8816) "prototype"
            (Path2D.t_to_js x8817)
    let (create : t -> ?path:Path2D.t or_string -> unit -> Path2D.t) =
      fun (x8822 : t) ->
        fun ?path:(x8818 : Path2D.t or_string option) ->
          fun () ->
            Path2D.t_of_js
              (Ojs.new_obj_arr (t_to_js x8822)
                 (let x8819 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x8818 with
                   | Some x8820 ->
                       ignore
                         (Ojs.call x8819 "push"
                            [|(or_string_to_js Path2D.t_to_js x8820)|])
                   | None -> ());
                  x8819))
  end
 and
  Path2D:sig
           type t = [ `CanvasPath  | `Path2D ] intf
           type t_0 = t
           [@@@js.stop ]
           type tags = [ `CanvasPath  | `Path2D ]
           type tags_0 = tags
           [@@@js.start ]
           [@@@js.implem
             type tags = [ `CanvasPath  | `Path2D ]
             type tags_0 = tags]
           type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
           val t_to_js : t -> Ojs.t
           val t_of_js : Ojs.t -> t
           val t_0_to_js : t_0 -> Ojs.t
           val t_0_of_js : Ojs.t -> t_0
           val addPath :
             'tags this ->
               path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit
           val cast_from : 'tags this -> t
           val prototype : unit -> t
           val create : ?path:t or_string -> unit -> t
         end =
  struct
    type t = [ `CanvasPath  | `Path2D ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8824 : Ojs.t) -> t_of_js x8824
    and t_0_to_js : t_0 -> Ojs.t = fun (x8823 : t) -> t_to_js x8823
    type tags = [ `CanvasPath  | `Path2D ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8827 : Ojs.t) -> intf_of_js __tags_of_js x8827
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8825 : __tags intf) -> intf_to_js __tags_to_js x8825
    let (addPath :
      'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x8833 : 'tags this) ->
        fun ~path:(x8829 : t) ->
          fun ?transform:(x8830 : DOMMatrix2DInit.t option) ->
            fun () ->
              ignore
                (let x8835 = this_to_js Obj.magic x8833 in
                 Ojs.call (Ojs.get_prop_ascii x8835 "addPath") "apply"
                   [|x8835;((let x8831 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8831 "push" [|(t_to_js x8829)|]);
                             (match x8830 with
                              | Some x8832 ->
                                  ignore
                                    (Ojs.call x8831 "push"
                                       [|(DOMMatrix2DInit.t_to_js x8832)|])
                              | None -> ());
                             x8831))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Path2D")
             "prototype")
    let (create : ?path:t or_string -> unit -> t) =
      fun ?path:(x8836 : t or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Path2D")
               (let x8837 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x8836 with
                 | Some x8838 ->
                     ignore
                       (Ojs.call x8837 "push"
                          [|(or_string_to_js t_to_js x8838)|])
                 | None -> ());
                x8837))
  end
module rec
  AnonymousInterface62:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> MessageChannel.t
                         val set_prototype : t -> MessageChannel.t -> unit
                         val create : t -> MessageChannel.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8841 : Ojs.t) -> x8841
    and t_to_js : t -> Ojs.t = fun (x8840 : Ojs.t) -> x8840
    let (get_prototype : t -> MessageChannel.t) =
      fun (x8842 : t) ->
        MessageChannel.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8842) "prototype")
    let (set_prototype : t -> MessageChannel.t -> unit) =
      fun (x8843 : t) ->
        fun (x8844 : MessageChannel.t) ->
          Ojs.set_prop_ascii (t_to_js x8843) "prototype"
            (MessageChannel.t_to_js x8844)
    let (create : t -> MessageChannel.t) =
      fun (x8845 : t) ->
        MessageChannel.t_of_js (Ojs.new_obj (t_to_js x8845) [||])
  end
 and
  MessageChannel:sig
                   type t = [ `MessageChannel ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `MessageChannel ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `MessageChannel ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `MessageChannel ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_port1 : 'tags this -> MessagePort.t
                   val get_port2 : 'tags this -> MessagePort.t
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `MessageChannel ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8847 : Ojs.t) -> t_of_js x8847
    and t_0_to_js : t_0 -> Ojs.t = fun (x8846 : t) -> t_to_js x8846
    type tags = [ `MessageChannel ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8850 : Ojs.t) -> intf_of_js __tags_of_js x8850
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8848 : __tags intf) -> intf_to_js __tags_to_js x8848
    let (get_port1 : 'tags this -> MessagePort.t) =
      fun (x8852 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8852) "port1")
    let (get_port2 : 'tags this -> MessagePort.t) =
      fun (x8854 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8854) "port2")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MessageChannel") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MessageChannel") [||])
  end
module rec
  AnonymousInterface56:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> ImageBitmapRenderingContext.t
                         val set_prototype :
                           t -> ImageBitmapRenderingContext.t -> unit
                         val create : t -> ImageBitmapRenderingContext.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8857 : Ojs.t) -> x8857
    and t_to_js : t -> Ojs.t = fun (x8856 : Ojs.t) -> x8856
    let (get_prototype : t -> ImageBitmapRenderingContext.t) =
      fun (x8858 : t) ->
        ImageBitmapRenderingContext.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8858) "prototype")
    let (set_prototype : t -> ImageBitmapRenderingContext.t -> unit) =
      fun (x8859 : t) ->
        fun (x8860 : ImageBitmapRenderingContext.t) ->
          Ojs.set_prop_ascii (t_to_js x8859) "prototype"
            (ImageBitmapRenderingContext.t_to_js x8860)
    let (create : t -> ImageBitmapRenderingContext.t) =
      fun (x8861 : t) ->
        ImageBitmapRenderingContext.t_of_js
          (Ojs.new_obj (t_to_js x8861) [||])
  end
 and
  ImageBitmapRenderingContext:sig
                                type t =
                                  [ `ImageBitmapRenderingContext ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `ImageBitmapRenderingContext ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags =
                                    [ `ImageBitmapRenderingContext ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `ImageBitmapRenderingContext ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val transferFromImageBitmap :
                                  'tags this ->
                                    bitmap:ImageBitmap.t or_null -> unit
                                val cast_from : 'tags this -> t
                                val prototype : unit -> t
                                val create : unit -> t
                              end =
  struct
    type t = [ `ImageBitmapRenderingContext ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8863 : Ojs.t) -> t_of_js x8863
    and t_0_to_js : t_0 -> Ojs.t = fun (x8862 : t) -> t_to_js x8862
    type tags = [ `ImageBitmapRenderingContext ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8866 : Ojs.t) -> intf_of_js __tags_of_js x8866
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8864 : __tags intf) -> intf_to_js __tags_to_js x8864
    let (transferFromImageBitmap :
      'tags this -> bitmap:ImageBitmap.t or_null -> unit) =
      fun (x8870 : 'tags this) ->
        fun ~bitmap:(x8868 : ImageBitmap.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8870) "transferFromImageBitmap"
               [|(or_null_to_js ImageBitmap.t_to_js x8868)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             [||])
  end
module FontFaceSetLoadEventInit =
  struct
    type t = [ `EventInit  | `FontFaceSetLoadEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8873 : Ojs.t) -> t_of_js x8873
    and t_0_to_js : t_0 -> Ojs.t = fun (x8872 : t) -> t_to_js x8872
    type tags = [ `EventInit  | `FontFaceSetLoadEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8876 : Ojs.t) -> intf_of_js __tags_of_js x8876
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8874 : __tags intf) -> intf_to_js __tags_to_js x8874
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x8878 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8878) "fontfaces")
    let (set_fontfaces : 'tags this -> FontFace.t list -> unit) =
      fun (x8881 : 'tags this) ->
        fun (x8882 : FontFace.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8881) "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x8882)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface40:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FontFaceSetLoadEvent.t
                         val set_prototype :
                           t -> FontFaceSetLoadEvent.t -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:FontFaceSetLoadEventInit.t ->
                                 unit -> FontFaceSetLoadEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8886 : Ojs.t) -> x8886
    and t_to_js : t -> Ojs.t = fun (x8885 : Ojs.t) -> x8885
    let (get_prototype : t -> FontFaceSetLoadEvent.t) =
      fun (x8887 : t) ->
        FontFaceSetLoadEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8887) "prototype")
    let (set_prototype : t -> FontFaceSetLoadEvent.t -> unit) =
      fun (x8888 : t) ->
        fun (x8889 : FontFaceSetLoadEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x8888) "prototype"
            (FontFaceSetLoadEvent.t_to_js x8889)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:FontFaceSetLoadEventInit.t ->
            unit -> FontFaceSetLoadEvent.t)
      =
      fun (x8894 : t) ->
        fun ~type_:(x8890 : string) ->
          fun ?eventInitDict:(x8891 : FontFaceSetLoadEventInit.t option) ->
            fun () ->
              FontFaceSetLoadEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x8894)
                   (let x8892 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x8892 "push" [|(Ojs.string_to_js x8890)|]);
                    (match x8891 with
                     | Some x8893 ->
                         ignore
                           (Ojs.call x8892 "push"
                              [|(FontFaceSetLoadEventInit.t_to_js x8893)|])
                     | None -> ());
                    x8892))
  end
 and
  FontFaceSetLoadEvent:sig
                         type t = [ `Event  | `FontFaceSetLoadEvent ] intf
                         type t_0 = t
                         [@@@js.stop ]
                         type tags = [ `Event  | `FontFaceSetLoadEvent ]
                         type tags_0 = tags
                         [@@@js.start ]
                         [@@@js.implem
                           type tags = [ `Event  | `FontFaceSetLoadEvent ]
                           type tags_0 = tags]
                         type 'tags this =
                           'tags intf constraint 'tags =
                                       [> `FontFaceSetLoadEvent ]
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val t_0_to_js : t_0 -> Ojs.t
                         val t_0_of_js : Ojs.t -> t_0
                         val get_fontfaces : 'tags this -> FontFace.t list
                         val cast_from : 'tags this -> t
                         val prototype : unit -> t
                         val create :
                           type_:string ->
                             ?eventInitDict:FontFaceSetLoadEventInit.t ->
                               unit -> t
                       end =
  struct
    type t = [ `Event  | `FontFaceSetLoadEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8896 : Ojs.t) -> t_of_js x8896
    and t_0_to_js : t_0 -> Ojs.t = fun (x8895 : t) -> t_to_js x8895
    type tags = [ `Event  | `FontFaceSetLoadEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8899 : Ojs.t) -> intf_of_js __tags_of_js x8899
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8897 : __tags intf) -> intf_to_js __tags_to_js x8897
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x8901 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8901) "fontfaces")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t)
      =
      fun ~type_:(x8904 : string) ->
        fun ?eventInitDict:(x8905 : FontFaceSetLoadEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
                 (let x8906 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x8906 "push" [|(Ojs.string_to_js x8904)|]);
                  (match x8905 with
                   | Some x8907 ->
                       ignore
                         (Ojs.call x8906 "push"
                            [|(FontFaceSetLoadEventInit.t_to_js x8907)|])
                   | None -> ());
                  x8906))
  end
module QueuingStrategyInit =
  struct
    type t = [ `QueuingStrategyInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8909 : Ojs.t) -> t_of_js x8909
    and t_0_to_js : t_0 -> Ojs.t = fun (x8908 : t) -> t_to_js x8908
    type tags = [ `QueuingStrategyInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8912 : Ojs.t) -> intf_of_js __tags_of_js x8912
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8910 : __tags intf) -> intf_to_js __tags_to_js x8910
    let (get_highWaterMark : 'tags this -> float) =
      fun (x8914 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8914) "highWaterMark")
    let (set_highWaterMark : 'tags this -> float -> unit) =
      fun (x8916 : 'tags this) ->
        fun (x8917 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8916) "highWaterMark"
            (Ojs.float_to_js x8917)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface4:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> ByteLengthQueuingStrategy.t
                        val set_prototype :
                          t -> ByteLengthQueuingStrategy.t -> unit
                        val create :
                          t ->
                            init:QueuingStrategyInit.t ->
                              ByteLengthQueuingStrategy.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8920 : Ojs.t) -> x8920
    and t_to_js : t -> Ojs.t = fun (x8919 : Ojs.t) -> x8919
    let (get_prototype : t -> ByteLengthQueuingStrategy.t) =
      fun (x8921 : t) ->
        ByteLengthQueuingStrategy.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8921) "prototype")
    let (set_prototype : t -> ByteLengthQueuingStrategy.t -> unit) =
      fun (x8922 : t) ->
        fun (x8923 : ByteLengthQueuingStrategy.t) ->
          Ojs.set_prop_ascii (t_to_js x8922) "prototype"
            (ByteLengthQueuingStrategy.t_to_js x8923)
    let (create :
      t -> init:QueuingStrategyInit.t -> ByteLengthQueuingStrategy.t) =
      fun (x8925 : t) ->
        fun ~init:(x8924 : QueuingStrategyInit.t) ->
          ByteLengthQueuingStrategy.t_of_js
            (Ojs.new_obj (t_to_js x8925)
               [|(QueuingStrategyInit.t_to_js x8924)|])
  end
 and
  ByteLengthQueuingStrategy:sig
                              type t =
                                [ `ByteLengthQueuingStrategy 
                                | `QueuingStrategy of ArrayBufferView.t_0 ]
                                  intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `ByteLengthQueuingStrategy 
                                | `QueuingStrategy of ArrayBufferView.t_0 ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `ByteLengthQueuingStrategy 
                                  | `QueuingStrategy of ArrayBufferView.t_0 ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `ByteLengthQueuingStrategy ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_highWaterMark : 'tags this -> float
                              val get_size :
                                'tags this ->
                                  ArrayBufferView.t_0 QueuingStrategySize.t
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : QueuingStrategyInit.t -> t
                            end =
  struct
    type t =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8927 : Ojs.t) -> t_of_js x8927
    and t_0_to_js : t_0 -> Ojs.t = fun (x8926 : t) -> t_to_js x8926
    type tags =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8930 : Ojs.t) -> intf_of_js __tags_of_js x8930
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8928 : __tags intf) -> intf_to_js __tags_to_js x8928
    let (get_highWaterMark : 'tags this -> float) =
      fun (x8932 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8932) "highWaterMark")
    let (get_size : 'tags this -> ArrayBufferView.t_0 QueuingStrategySize.t)
      =
      fun (x8934 : 'tags this) ->
        QueuingStrategySize.t_of_js ArrayBufferView.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8934) "size")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             "prototype")
    let (create : QueuingStrategyInit.t -> t) =
      fun (x8937 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x8937)|])
  end
module rec
  AnonymousInterface37:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FileReaderSync.t
                         val set_prototype : t -> FileReaderSync.t -> unit
                         val create : t -> FileReaderSync.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8939 : Ojs.t) -> x8939
    and t_to_js : t -> Ojs.t = fun (x8938 : Ojs.t) -> x8938
    let (get_prototype : t -> FileReaderSync.t) =
      fun (x8940 : t) ->
        FileReaderSync.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8940) "prototype")
    let (set_prototype : t -> FileReaderSync.t -> unit) =
      fun (x8941 : t) ->
        fun (x8942 : FileReaderSync.t) ->
          Ojs.set_prop_ascii (t_to_js x8941) "prototype"
            (FileReaderSync.t_to_js x8942)
    let (create : t -> FileReaderSync.t) =
      fun (x8943 : t) ->
        FileReaderSync.t_of_js (Ojs.new_obj (t_to_js x8943) [||])
  end
 and
  FileReaderSync:sig
                   type t = [ `FileReaderSync ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `FileReaderSync ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `FileReaderSync ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `FileReaderSync ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val readAsArrayBuffer :
                     'tags this -> blob:Blob.t -> ArrayBuffer.t_0
                   val readAsBinaryString :
                     'tags this -> blob:Blob.t -> string
                   val readAsDataURL : 'tags this -> blob:Blob.t -> string
                   val readAsText :
                     'tags this ->
                       blob:Blob.t -> ?encoding:string -> unit -> string
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                 end =
  struct
    type t = [ `FileReaderSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8945 : Ojs.t) -> t_of_js x8945
    and t_0_to_js : t_0 -> Ojs.t = fun (x8944 : t) -> t_to_js x8944
    type tags = [ `FileReaderSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8948 : Ojs.t) -> intf_of_js __tags_of_js x8948
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8946 : __tags intf) -> intf_to_js __tags_to_js x8946
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> ArrayBuffer.t_0) =
      fun (x8951 : 'tags this) ->
        fun ~blob:(x8950 : Blob.t) ->
          ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x8951) "readAsArrayBuffer"
               [|(Blob.t_to_js x8950)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> string) =
      fun (x8954 : 'tags this) ->
        fun ~blob:(x8953 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x8954) "readAsBinaryString"
               [|(Blob.t_to_js x8953)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> string) =
      fun (x8957 : 'tags this) ->
        fun ~blob:(x8956 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x8957) "readAsDataURL"
               [|(Blob.t_to_js x8956)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> string) =
      fun (x8963 : 'tags this) ->
        fun ~blob:(x8959 : Blob.t) ->
          fun ?encoding:(x8960 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x8965 = this_to_js Obj.magic x8963 in
                 Ojs.call (Ojs.get_prop_ascii x8965 "readAsText") "apply"
                   [|x8965;((let x8961 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x8961 "push"
                                  [|(Blob.t_to_js x8959)|]);
                             (match x8960 with
                              | Some x8962 ->
                                  ignore
                                    (Ojs.call x8961 "push"
                                       [|(Ojs.string_to_js x8962)|])
                              | None -> ());
                             x8961))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileReaderSync") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReaderSync") [||])
  end
module rec
  AnonymousInterface35:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> FileList.t
                         val set_prototype : t -> FileList.t -> unit
                         val create : t -> FileList.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8967 : Ojs.t) -> x8967
    and t_to_js : t -> Ojs.t = fun (x8966 : Ojs.t) -> x8966
    let (get_prototype : t -> FileList.t) =
      fun (x8968 : t) ->
        FileList.t_of_js (Ojs.get_prop_ascii (t_to_js x8968) "prototype")
    let (set_prototype : t -> FileList.t -> unit) =
      fun (x8969 : t) ->
        fun (x8970 : FileList.t) ->
          Ojs.set_prop_ascii (t_to_js x8969) "prototype"
            (FileList.t_to_js x8970)
    let (create : t -> FileList.t) =
      fun (x8971 : t) -> FileList.t_of_js (Ojs.new_obj (t_to_js x8971) [||])
  end
 and
  FileList:sig
             type t =
               [ `FileList  | File.t ArrayLike.tags_1
               | File.t IterableIterator.tags_1] intf
             type t_0 = t
             [@@@js.stop ]
             type tags =
               [ `FileList  | File.t ArrayLike.tags_1
               | File.t IterableIterator.tags_1]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags =
                 [ `FileList  | File.t ArrayLike.tags_1
                 | File.t IterableIterator.tags_1]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_length : 'tags this -> float
             val item : 'tags this -> index:float -> File.t or_null
             val get : 'tags this -> float -> File.t
             val set : 'tags this -> float -> File.t -> unit
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create : unit -> t
           end =
  struct
    type t =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8973 : Ojs.t) -> t_of_js x8973
    and t_0_to_js : t_0 -> Ojs.t = fun (x8972 : t) -> t_to_js x8972
    type tags =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8976 : Ojs.t) -> intf_of_js __tags_of_js x8976
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8974 : __tags intf) -> intf_to_js __tags_to_js x8974
    let (get_length : 'tags this -> float) =
      fun (x8978 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8978) "length")
    let (item : 'tags this -> index:float -> File.t or_null) =
      fun (x8981 : 'tags this) ->
        fun ~index:(x8980 : float) ->
          or_null_of_js File.t_of_js
            (Ojs.call (this_to_js Obj.magic x8981) "item"
               [|(Ojs.float_to_js x8980)|])
    let (get : 'tags this -> float -> File.t) =
      fun (x8984 : 'tags this) ->
        fun (x8986 : float) ->
          File.t_of_js
            (Ojs.get_prop (this_to_js Obj.magic x8984)
               (Ojs.float_to_js x8986))
    let (set : 'tags this -> float -> File.t -> unit) =
      fun (x8987 : 'tags this) ->
        fun (x8989 : float) ->
          fun (x8990 : File.t) ->
            Ojs.set_prop (this_to_js Obj.magic x8987) (Ojs.float_to_js x8989)
              (File.t_to_js x8990)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileList") [||])
  end
module rec
  AnonymousInterface3:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> BroadcastChannel.t
                        val set_prototype : t -> BroadcastChannel.t -> unit
                        val create : t -> name:string -> BroadcastChannel.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8992 : Ojs.t) -> x8992
    and t_to_js : t -> Ojs.t = fun (x8991 : Ojs.t) -> x8991
    let (get_prototype : t -> BroadcastChannel.t) =
      fun (x8993 : t) ->
        BroadcastChannel.t_of_js
          (Ojs.get_prop_ascii (t_to_js x8993) "prototype")
    let (set_prototype : t -> BroadcastChannel.t -> unit) =
      fun (x8994 : t) ->
        fun (x8995 : BroadcastChannel.t) ->
          Ojs.set_prop_ascii (t_to_js x8994) "prototype"
            (BroadcastChannel.t_to_js x8995)
    let (create : t -> name:string -> BroadcastChannel.t) =
      fun (x8997 : t) ->
        fun ~name:(x8996 : string) ->
          BroadcastChannel.t_of_js
            (Ojs.new_obj (t_to_js x8997) [|(Ojs.string_to_js x8996)|])
  end
 and
  BroadcastChannel:sig
                     type t = [ `BroadcastChannel  | `EventTarget ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `BroadcastChannel  | `EventTarget ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `BroadcastChannel  | `EventTarget ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `BroadcastChannel ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_name : 'tags this -> string
                     val get_onmessage :
                       'tags this ->
                         (this:t -> ev:MessageEvent.t_0 -> any) or_null
                     val set_onmessage :
                       'tags this ->
                         (this:t -> ev:MessageEvent.t_0 -> any) or_null ->
                           unit
                     val get_onmessageerror :
                       'tags this ->
                         (this:t -> ev:MessageEvent.t_0 -> any) or_null
                     val set_onmessageerror :
                       'tags this ->
                         (this:t -> ev:MessageEvent.t_0 -> any) or_null ->
                           unit
                     val close : 'tags this -> unit
                     val postMessage : 'tags this -> message:any -> unit
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : string -> t
                   end =
  struct
    type t = [ `BroadcastChannel  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8999 : Ojs.t) -> t_of_js x8999
    and t_0_to_js : t_0 -> Ojs.t = fun (x8998 : t) -> t_to_js x8998
    type tags = [ `BroadcastChannel  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9002 : Ojs.t) -> intf_of_js __tags_of_js x9002
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9000 : __tags intf) -> intf_to_js __tags_to_js x9000
    let (get_name : 'tags this -> string) =
      fun (x9004 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9004) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x9006 : 'tags this) ->
        or_null_of_js
          (fun (x9008 : Ojs.t) ->
             fun ~this:(x9009 : t) ->
               fun ~ev:(x9010 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x9008
                      [|(t_to_js x9009);(MessageEvent.t_0_to_js x9010)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9006) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x9011 : 'tags this) ->
        fun (x9012 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9011) "onmessage"
            (or_null_to_js
               (fun (x9013 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9014 : Ojs.t) ->
                       fun (x9015 : Ojs.t) ->
                         any_to_js
                           (x9013 ~this:(t_of_js x9014)
                              ~ev:(MessageEvent.t_0_of_js x9015)))) x9012)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x9017 : 'tags this) ->
        or_null_of_js
          (fun (x9019 : Ojs.t) ->
             fun ~this:(x9020 : t) ->
               fun ~ev:(x9021 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x9019
                      [|(t_to_js x9020);(MessageEvent.t_0_to_js x9021)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9017) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x9022 : 'tags this) ->
        fun (x9023 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9022) "onmessageerror"
            (or_null_to_js
               (fun (x9024 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9025 : Ojs.t) ->
                       fun (x9026 : Ojs.t) ->
                         any_to_js
                           (x9024 ~this:(t_of_js x9025)
                              ~ev:(MessageEvent.t_0_of_js x9026)))) x9023)
    let (close : 'tags this -> unit) =
      fun (x9028 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x9028) "close" [||])
    let (postMessage : 'tags this -> message:any -> unit) =
      fun (x9031 : 'tags this) ->
        fun ~message:(x9030 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9031) "postMessage"
               [|(any_to_js x9030)|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9041 : 'tags this) ->
        fun ~type_:(x9033 : 'K) ->
          fun ~listener:(x9034 : this:t -> ev:any -> any) ->
            fun
              ?options:(x9035 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9043 = this_to_js Obj.magic x9041 in
                   Ojs.call (Ojs.get_prop_ascii x9043 "addEventListener")
                     "apply"
                     [|x9043;((let x9036 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9036 "push" [|(Obj.magic x9033)|]);
                               ignore
                                 (Ojs.call x9036 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9039 : Ojs.t) ->
                                            fun (x9040 : Ojs.t) ->
                                              any_to_js
                                                (x9034 ~this:(t_of_js x9039)
                                                   ~ev:(any_of_js x9040))))|]);
                               (match x9035 with
                                | Some x9037 ->
                                    ignore
                                      (Ojs.call x9036 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9037)|])
                                | None -> ());
                               x9036))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9050 : 'tags this) ->
        fun ~type_:(x9044 : string) ->
          fun ~listener:(x9045 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x9046 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9052 = this_to_js Obj.magic x9050 in
                   Ojs.call (Ojs.get_prop_ascii x9052 "addEventListener")
                     "apply"
                     [|x9052;((let x9047 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9047 "push"
                                    [|(Ojs.string_to_js x9044)|]);
                               ignore
                                 (Ojs.call x9047 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9045)|]);
                               (match x9046 with
                                | Some x9048 ->
                                    ignore
                                      (Ojs.call x9047 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9048)|])
                                | None -> ());
                               x9047))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9061 : 'tags this) ->
        fun ~type_:(x9053 : 'K) ->
          fun ~listener:(x9054 : this:t -> ev:any -> any) ->
            fun ?options:(x9055 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9063 = this_to_js Obj.magic x9061 in
                   Ojs.call (Ojs.get_prop_ascii x9063 "removeEventListener")
                     "apply"
                     [|x9063;((let x9056 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9056 "push" [|(Obj.magic x9053)|]);
                               ignore
                                 (Ojs.call x9056 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9059 : Ojs.t) ->
                                            fun (x9060 : Ojs.t) ->
                                              any_to_js
                                                (x9054 ~this:(t_of_js x9059)
                                                   ~ev:(any_of_js x9060))))|]);
                               (match x9055 with
                                | Some x9057 ->
                                    ignore
                                      (Ojs.call x9056 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9057)|])
                                | None -> ());
                               x9056))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9070 : 'tags this) ->
        fun ~type_:(x9064 : string) ->
          fun ~listener:(x9065 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x9066 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9072 = this_to_js Obj.magic x9070 in
                   Ojs.call (Ojs.get_prop_ascii x9072 "removeEventListener")
                     "apply"
                     [|x9072;((let x9067 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9067 "push"
                                    [|(Ojs.string_to_js x9064)|]);
                               ignore
                                 (Ojs.call x9067 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9065)|]);
                               (match x9066 with
                                | Some x9068 ->
                                    ignore
                                      (Ojs.call x9067 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9068)|])
                                | None -> ());
                               x9067))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BroadcastChannel") "prototype")
    let (create : string -> t) =
      fun (x9073 : string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
             [|(Ojs.string_to_js x9073)|])
  end
module EventSourceInit =
  struct
    type t = [ `EventSourceInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9075 : Ojs.t) -> t_of_js x9075
    and t_0_to_js : t_0 -> Ojs.t = fun (x9074 : t) -> t_to_js x9074
    type tags = [ `EventSourceInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9078 : Ojs.t) -> intf_of_js __tags_of_js x9078
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9076 : __tags intf) -> intf_to_js __tags_to_js x9076
    let (get_withCredentials : 'tags this -> bool) =
      fun (x9080 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9080) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x9082 : 'tags this) ->
        fun (x9083 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9082) "withCredentials"
            (Ojs.bool_to_js x9083)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface29:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> EventSource.t
                         val set_prototype : t -> EventSource.t -> unit
                         val create :
                           t ->
                             url:URL.t or_string ->
                               ?eventSourceInitDict:EventSourceInit.t ->
                                 unit -> EventSource.t
                         val get_CLOSED : t -> float
                         val get_CONNECTING : t -> float
                         val get_OPEN : t -> float
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9086 : Ojs.t) -> x9086
    and t_to_js : t -> Ojs.t = fun (x9085 : Ojs.t) -> x9085
    let (get_prototype : t -> EventSource.t) =
      fun (x9087 : t) ->
        EventSource.t_of_js (Ojs.get_prop_ascii (t_to_js x9087) "prototype")
    let (set_prototype : t -> EventSource.t -> unit) =
      fun (x9088 : t) ->
        fun (x9089 : EventSource.t) ->
          Ojs.set_prop_ascii (t_to_js x9088) "prototype"
            (EventSource.t_to_js x9089)
    let (create :
      t ->
        url:URL.t or_string ->
          ?eventSourceInitDict:EventSourceInit.t -> unit -> EventSource.t)
      =
      fun (x9095 : t) ->
        fun ~url:(x9090 : URL.t or_string) ->
          fun ?eventSourceInitDict:(x9091 : EventSourceInit.t option) ->
            fun () ->
              EventSource.t_of_js
                (Ojs.new_obj_arr (t_to_js x9095)
                   (let x9092 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x9092 "push"
                         [|(or_string_to_js URL.t_to_js x9090)|]);
                    (match x9091 with
                     | Some x9093 ->
                         ignore
                           (Ojs.call x9092 "push"
                              [|(EventSourceInit.t_to_js x9093)|])
                     | None -> ());
                    x9092))
    let (get_CLOSED : t -> float) =
      fun (x9096 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x9096) "CLOSED")
    let (get_CONNECTING : t -> float) =
      fun (x9097 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x9097) "CONNECTING")
    let (get_OPEN : t -> float) =
      fun (x9098 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x9098) "OPEN")
  end
 and
  EventSource:sig
                type t = [ `EventSource  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `EventSource  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `EventSource  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `EventSource ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_onerror :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onerror :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_onmessage :
                  'tags this ->
                    (this:t -> ev:MessageEvent.t_0 -> any) or_null
                val set_onmessage :
                  'tags this ->
                    (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit
                val get_onopen :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onopen :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val get_readyState : 'tags this -> float
                val get_url : 'tags this -> string
                val get_withCredentials : 'tags this -> bool
                val close : 'tags this -> unit
                val get_CLOSED : 'tags this -> float
                val get_CONNECTING : 'tags this -> float
                val get_OPEN : 'tags this -> float
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create :
                  url:URL.t or_string ->
                    ?eventSourceInitDict:EventSourceInit.t -> unit -> t
                val closed : unit -> float
                val connecting : unit -> float
                val open_ : unit -> float
              end =
  struct
    type t = [ `EventSource  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9100 : Ojs.t) -> t_of_js x9100
    and t_0_to_js : t_0 -> Ojs.t = fun (x9099 : t) -> t_to_js x9099
    type tags = [ `EventSource  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9103 : Ojs.t) -> intf_of_js __tags_of_js x9103
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9101 : __tags intf) -> intf_to_js __tags_to_js x9101
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x9105 : 'tags this) ->
        or_null_of_js
          (fun (x9107 : Ojs.t) ->
             fun ~this:(x9108 : t) ->
               fun ~ev:(x9109 : Event.t) ->
                 any_of_js
                   (Ojs.apply x9107 [|(t_to_js x9108);(Event.t_to_js x9109)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9105) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x9110 : 'tags this) ->
        fun (x9111 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9110) "onerror"
            (or_null_to_js
               (fun (x9112 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9113 : Ojs.t) ->
                       fun (x9114 : Ojs.t) ->
                         any_to_js
                           (x9112 ~this:(t_of_js x9113)
                              ~ev:(Event.t_of_js x9114)))) x9111)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x9116 : 'tags this) ->
        or_null_of_js
          (fun (x9118 : Ojs.t) ->
             fun ~this:(x9119 : t) ->
               fun ~ev:(x9120 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x9118
                      [|(t_to_js x9119);(MessageEvent.t_0_to_js x9120)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9116) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x9121 : 'tags this) ->
        fun (x9122 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9121) "onmessage"
            (or_null_to_js
               (fun (x9123 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9124 : Ojs.t) ->
                       fun (x9125 : Ojs.t) ->
                         any_to_js
                           (x9123 ~this:(t_of_js x9124)
                              ~ev:(MessageEvent.t_0_of_js x9125)))) x9122)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x9127 : 'tags this) ->
        or_null_of_js
          (fun (x9129 : Ojs.t) ->
             fun ~this:(x9130 : t) ->
               fun ~ev:(x9131 : Event.t) ->
                 any_of_js
                   (Ojs.apply x9129 [|(t_to_js x9130);(Event.t_to_js x9131)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9127) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x9132 : 'tags this) ->
        fun (x9133 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9132) "onopen"
            (or_null_to_js
               (fun (x9134 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9135 : Ojs.t) ->
                       fun (x9136 : Ojs.t) ->
                         any_to_js
                           (x9134 ~this:(t_of_js x9135)
                              ~ev:(Event.t_of_js x9136)))) x9133)
    let (get_readyState : 'tags this -> float) =
      fun (x9138 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9138) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x9140 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9140) "url")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x9142 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9142) "withCredentials")
    let (close : 'tags this -> unit) =
      fun (x9144 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x9144) "close" [||])
    let (get_CLOSED : 'tags this -> float) =
      fun (x9146 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9146) "CLOSED")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x9148 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9148) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x9150 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9150) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9160 : 'tags this) ->
        fun ~type_:(x9152 : 'K) ->
          fun ~listener:(x9153 : this:t -> ev:any -> any) ->
            fun
              ?options:(x9154 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9162 = this_to_js Obj.magic x9160 in
                   Ojs.call (Ojs.get_prop_ascii x9162 "addEventListener")
                     "apply"
                     [|x9162;((let x9155 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9155 "push" [|(Obj.magic x9152)|]);
                               ignore
                                 (Ojs.call x9155 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9158 : Ojs.t) ->
                                            fun (x9159 : Ojs.t) ->
                                              any_to_js
                                                (x9153 ~this:(t_of_js x9158)
                                                   ~ev:(any_of_js x9159))))|]);
                               (match x9154 with
                                | Some x9156 ->
                                    ignore
                                      (Ojs.call x9155 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9156)|])
                                | None -> ());
                               x9155))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9169 : 'tags this) ->
        fun ~type_:(x9163 : string) ->
          fun ~listener:(x9164 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x9165 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9171 = this_to_js Obj.magic x9169 in
                   Ojs.call (Ojs.get_prop_ascii x9171 "addEventListener")
                     "apply"
                     [|x9171;((let x9166 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9166 "push"
                                    [|(Ojs.string_to_js x9163)|]);
                               ignore
                                 (Ojs.call x9166 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9164)|]);
                               (match x9165 with
                                | Some x9167 ->
                                    ignore
                                      (Ojs.call x9166 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9167)|])
                                | None -> ());
                               x9166))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9180 : 'tags this) ->
        fun ~type_:(x9172 : 'K) ->
          fun ~listener:(x9173 : this:t -> ev:any -> any) ->
            fun ?options:(x9174 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9182 = this_to_js Obj.magic x9180 in
                   Ojs.call (Ojs.get_prop_ascii x9182 "removeEventListener")
                     "apply"
                     [|x9182;((let x9175 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9175 "push" [|(Obj.magic x9172)|]);
                               ignore
                                 (Ojs.call x9175 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9178 : Ojs.t) ->
                                            fun (x9179 : Ojs.t) ->
                                              any_to_js
                                                (x9173 ~this:(t_of_js x9178)
                                                   ~ev:(any_of_js x9179))))|]);
                               (match x9174 with
                                | Some x9176 ->
                                    ignore
                                      (Ojs.call x9175 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9176)|])
                                | None -> ());
                               x9175))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9189 : 'tags this) ->
        fun ~type_:(x9183 : string) ->
          fun ~listener:(x9184 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x9185 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9191 = this_to_js Obj.magic x9189 in
                   Ojs.call (Ojs.get_prop_ascii x9191 "removeEventListener")
                     "apply"
                     [|x9191;((let x9186 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9186 "push"
                                    [|(Ojs.string_to_js x9183)|]);
                               ignore
                                 (Ojs.call x9186 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9184)|]);
                               (match x9185 with
                                | Some x9187 ->
                                    ignore
                                      (Ojs.call x9186 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9187)|])
                                | None -> ());
                               x9186))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "prototype")
    let (create :
      url:URL.t or_string ->
        ?eventSourceInitDict:EventSourceInit.t -> unit -> t)
      =
      fun ~url:(x9192 : URL.t or_string) ->
        fun ?eventSourceInitDict:(x9193 : EventSourceInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EventSource")
                 (let x9194 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x9194 "push"
                       [|(or_string_to_js URL.t_to_js x9192)|]);
                  (match x9193 with
                   | Some x9195 ->
                       ignore
                         (Ojs.call x9194 "push"
                            [|(EventSourceInit.t_to_js x9195)|])
                   | None -> ());
                  x9194))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CLOSED")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "OPEN")
  end
module FrameRequestCallback =
  struct
    type t = [ `FrameRequestCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9198 : Ojs.t) -> t_of_js x9198
    and t_0_to_js : t_0 -> Ojs.t = fun (x9197 : t) -> t_to_js x9197
    type tags = [ `FrameRequestCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FrameRequestCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9201 : Ojs.t) -> intf_of_js __tags_of_js x9201
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9199 : __tags intf) -> intf_to_js __tags_to_js x9199
    let (apply : 'tags this -> time:DOMHighResTimeStamp.t -> unit) =
      fun (x9204 : 'tags this) ->
        fun ~time:(x9203 : DOMHighResTimeStamp.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic x9204)
               [|(DOMHighResTimeStamp.t_to_js x9203)|])
    let cast_from = Obj.magic
  end
module AnimationFrameProvider =
  struct
    type t = [ `AnimationFrameProvider ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9207 : Ojs.t) -> t_of_js x9207
    and t_0_to_js : t_0 -> Ojs.t = fun (x9206 : t) -> t_to_js x9206
    type tags = [ `AnimationFrameProvider ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AnimationFrameProvider ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9210 : Ojs.t) -> intf_of_js __tags_of_js x9210
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9208 : __tags intf) -> intf_to_js __tags_to_js x9208
    let (cancelAnimationFrame : 'tags this -> handle:float -> unit) =
      fun (x9213 : 'tags this) ->
        fun ~handle:(x9212 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9213) "cancelAnimationFrame"
               [|(Ojs.float_to_js x9212)|])
    let (requestAnimationFrame :
      'tags this -> callback:FrameRequestCallback.t -> float) =
      fun (x9216 : 'tags this) ->
        fun ~callback:(x9215 : FrameRequestCallback.t) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x9216) "requestAnimationFrame"
               [|(FrameRequestCallback.t_to_js x9215)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface26:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype :
                           t -> DedicatedWorkerGlobalScope.t
                         val set_prototype :
                           t -> DedicatedWorkerGlobalScope.t -> unit
                         val create : t -> DedicatedWorkerGlobalScope.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9219 : Ojs.t) -> x9219
    and t_to_js : t -> Ojs.t = fun (x9218 : Ojs.t) -> x9218
    let (get_prototype : t -> DedicatedWorkerGlobalScope.t) =
      fun (x9220 : t) ->
        DedicatedWorkerGlobalScope.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9220) "prototype")
    let (set_prototype : t -> DedicatedWorkerGlobalScope.t -> unit) =
      fun (x9221 : t) ->
        fun (x9222 : DedicatedWorkerGlobalScope.t) ->
          Ojs.set_prop_ascii (t_to_js x9221) "prototype"
            (DedicatedWorkerGlobalScope.t_to_js x9222)
    let (create : t -> DedicatedWorkerGlobalScope.t) =
      fun (x9223 : t) ->
        DedicatedWorkerGlobalScope.t_of_js (Ojs.new_obj (t_to_js x9223) [||])
  end
 and
  DedicatedWorkerGlobalScope:sig
                               type t =
                                 [ `AnimationFrameProvider 
                                 | `DedicatedWorkerGlobalScope 
                                 | `EventTarget  | `FontFaceSource 
                                 | `WindowOrWorkerGlobalScope 
                                 | `WorkerGlobalScope ] intf
                               type t_0 = t
                               [@@@js.stop ]
                               type tags =
                                 [ `AnimationFrameProvider 
                                 | `DedicatedWorkerGlobalScope 
                                 | `EventTarget  | `FontFaceSource 
                                 | `WindowOrWorkerGlobalScope 
                                 | `WorkerGlobalScope ]
                               type tags_0 = tags
                               [@@@js.start ]
                               [@@@js.implem
                                 type tags =
                                   [ `AnimationFrameProvider 
                                   | `DedicatedWorkerGlobalScope 
                                   | `EventTarget  | `FontFaceSource 
                                   | `WindowOrWorkerGlobalScope 
                                   | `WorkerGlobalScope ]
                                 type tags_0 = tags]
                               type 'tags this =
                                 'tags intf constraint 'tags =
                                             [> `DedicatedWorkerGlobalScope ]
                               val t_to_js : t -> Ojs.t
                               val t_of_js : Ojs.t -> t
                               val t_0_to_js : t_0 -> Ojs.t
                               val t_0_of_js : Ojs.t -> t_0
                               val get_name : 'tags this -> string
                               val get_onmessage :
                                 'tags this ->
                                   (this:t -> ev:MessageEvent.t_0 -> any)
                                     or_null
                               val set_onmessage :
                                 'tags this ->
                                   (this:t -> ev:MessageEvent.t_0 -> any)
                                     or_null -> unit
                               val get_onmessageerror :
                                 'tags this ->
                                   (this:t -> ev:MessageEvent.t_0 -> any)
                                     or_null
                               val set_onmessageerror :
                                 'tags this ->
                                   (this:t -> ev:MessageEvent.t_0 -> any)
                                     or_null -> unit
                               val close : 'tags this -> unit
                               val postMessage :
                                 'tags this ->
                                   message:any ->
                                     transfer:Transferable.t list -> unit
                               val postMessage' :
                                 'tags this ->
                                   message:any ->
                                     ?options:PostMessageOptions.t ->
                                       unit -> unit
                               val addEventListener :
                                 'tags this ->
                                   type_:'K ->
                                     listener:(this:t -> ev:any -> any) ->
                                       ?options:AddEventListenerOptions.t
                                         or_boolean -> unit -> unit
                               val addEventListener' :
                                 'tags this ->
                                   type_:string ->
                                     listener:EventListenerOrEventListenerObject.t
                                       ->
                                       ?options:AddEventListenerOptions.t
                                         or_boolean -> unit -> unit
                               val removeEventListener :
                                 'tags this ->
                                   type_:'K ->
                                     listener:(this:t -> ev:any -> any) ->
                                       ?options:EventListenerOptions.t
                                         or_boolean -> unit -> unit
                               val removeEventListener' :
                                 'tags this ->
                                   type_:string ->
                                     listener:EventListenerOrEventListenerObject.t
                                       ->
                                       ?options:EventListenerOptions.t
                                         or_boolean -> unit -> unit
                               val cast_from : 'tags this -> t
                               val prototype : unit -> t
                               val create : unit -> t
                             end =
  struct
    type t =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9225 : Ojs.t) -> t_of_js x9225
    and t_0_to_js : t_0 -> Ojs.t = fun (x9224 : t) -> t_to_js x9224
    type tags =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9228 : Ojs.t) -> intf_of_js __tags_of_js x9228
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9226 : __tags intf) -> intf_to_js __tags_to_js x9226
    let (get_name : 'tags this -> string) =
      fun (x9230 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9230) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x9232 : 'tags this) ->
        or_null_of_js
          (fun (x9234 : Ojs.t) ->
             fun ~this:(x9235 : t) ->
               fun ~ev:(x9236 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x9234
                      [|(t_to_js x9235);(MessageEvent.t_0_to_js x9236)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9232) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x9237 : 'tags this) ->
        fun (x9238 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9237) "onmessage"
            (or_null_to_js
               (fun (x9239 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9240 : Ojs.t) ->
                       fun (x9241 : Ojs.t) ->
                         any_to_js
                           (x9239 ~this:(t_of_js x9240)
                              ~ev:(MessageEvent.t_0_of_js x9241)))) x9238)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x9243 : 'tags this) ->
        or_null_of_js
          (fun (x9245 : Ojs.t) ->
             fun ~this:(x9246 : t) ->
               fun ~ev:(x9247 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x9245
                      [|(t_to_js x9246);(MessageEvent.t_0_to_js x9247)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9243) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x9248 : 'tags this) ->
        fun (x9249 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9248) "onmessageerror"
            (or_null_to_js
               (fun (x9250 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x9251 : Ojs.t) ->
                       fun (x9252 : Ojs.t) ->
                         any_to_js
                           (x9250 ~this:(t_of_js x9251)
                              ~ev:(MessageEvent.t_0_of_js x9252)))) x9249)
    let (close : 'tags this -> unit) =
      fun (x9254 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x9254) "close" [||])
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x9259 : 'tags this) ->
        fun ~message:(x9256 : any) ->
          fun ~transfer:(x9257 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9259) "postMessage"
                 [|(any_to_js x9256);(Ojs.list_to_js Transferable.t_to_js
                                        x9257)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:PostMessageOptions.t -> unit -> unit)
      =
      fun (x9265 : 'tags this) ->
        fun ~message:(x9261 : any) ->
          fun ?options:(x9262 : PostMessageOptions.t option) ->
            fun () ->
              ignore
                (let x9267 = this_to_js Obj.magic x9265 in
                 Ojs.call (Ojs.get_prop_ascii x9267 "postMessage") "apply"
                   [|x9267;((let x9263 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x9263 "push" [|(any_to_js x9261)|]);
                             (match x9262 with
                              | Some x9264 ->
                                  ignore
                                    (Ojs.call x9263 "push"
                                       [|(PostMessageOptions.t_to_js x9264)|])
                              | None -> ());
                             x9263))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9276 : 'tags this) ->
        fun ~type_:(x9268 : 'K) ->
          fun ~listener:(x9269 : this:t -> ev:any -> any) ->
            fun
              ?options:(x9270 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9278 = this_to_js Obj.magic x9276 in
                   Ojs.call (Ojs.get_prop_ascii x9278 "addEventListener")
                     "apply"
                     [|x9278;((let x9271 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9271 "push" [|(Obj.magic x9268)|]);
                               ignore
                                 (Ojs.call x9271 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9274 : Ojs.t) ->
                                            fun (x9275 : Ojs.t) ->
                                              any_to_js
                                                (x9269 ~this:(t_of_js x9274)
                                                   ~ev:(any_of_js x9275))))|]);
                               (match x9270 with
                                | Some x9272 ->
                                    ignore
                                      (Ojs.call x9271 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9272)|])
                                | None -> ());
                               x9271))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9285 : 'tags this) ->
        fun ~type_:(x9279 : string) ->
          fun ~listener:(x9280 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x9281 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9287 = this_to_js Obj.magic x9285 in
                   Ojs.call (Ojs.get_prop_ascii x9287 "addEventListener")
                     "apply"
                     [|x9287;((let x9282 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9282 "push"
                                    [|(Ojs.string_to_js x9279)|]);
                               ignore
                                 (Ojs.call x9282 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9280)|]);
                               (match x9281 with
                                | Some x9283 ->
                                    ignore
                                      (Ojs.call x9282 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x9283)|])
                                | None -> ());
                               x9282))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9296 : 'tags this) ->
        fun ~type_:(x9288 : 'K) ->
          fun ~listener:(x9289 : this:t -> ev:any -> any) ->
            fun ?options:(x9290 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9298 = this_to_js Obj.magic x9296 in
                   Ojs.call (Ojs.get_prop_ascii x9298 "removeEventListener")
                     "apply"
                     [|x9298;((let x9291 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9291 "push" [|(Obj.magic x9288)|]);
                               ignore
                                 (Ojs.call x9291 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x9294 : Ojs.t) ->
                                            fun (x9295 : Ojs.t) ->
                                              any_to_js
                                                (x9289 ~this:(t_of_js x9294)
                                                   ~ev:(any_of_js x9295))))|]);
                               (match x9290 with
                                | Some x9292 ->
                                    ignore
                                      (Ojs.call x9291 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9292)|])
                                | None -> ());
                               x9291))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x9305 : 'tags this) ->
        fun ~type_:(x9299 : string) ->
          fun ~listener:(x9300 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x9301 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x9307 = this_to_js Obj.magic x9305 in
                   Ojs.call (Ojs.get_prop_ascii x9307 "removeEventListener")
                     "apply"
                     [|x9307;((let x9302 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x9302 "push"
                                    [|(Ojs.string_to_js x9299)|]);
                               ignore
                                 (Ojs.call x9302 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x9300)|]);
                               (match x9301 with
                                | Some x9303 ->
                                    ignore
                                      (Ojs.call x9302 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x9303)|])
                                | None -> ());
                               x9302))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             [||])
  end
module DOMRectInit =
  struct
    type t = [ `DOMRectInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9309 : Ojs.t) -> t_of_js x9309
    and t_0_to_js : t_0 -> Ojs.t = fun (x9308 : t) -> t_to_js x9308
    type tags = [ `DOMRectInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9312 : Ojs.t) -> intf_of_js __tags_of_js x9312
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9310 : __tags intf) -> intf_to_js __tags_to_js x9310
    let (get_height : 'tags this -> float) =
      fun (x9314 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9314) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x9316 : 'tags this) ->
        fun (x9317 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9316) "height"
            (Ojs.float_to_js x9317)
    let (get_width : 'tags this -> float) =
      fun (x9319 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9319) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x9321 : 'tags this) ->
        fun (x9322 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9321) "width"
            (Ojs.float_to_js x9322)
    let (get_x : 'tags this -> float) =
      fun (x9324 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9324) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x9326 : 'tags this) ->
        fun (x9327 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9326) "x"
            (Ojs.float_to_js x9327)
    let (get_y : 'tags this -> float) =
      fun (x9329 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9329) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x9331 : 'tags this) ->
        fun (x9332 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9331) "y"
            (Ojs.float_to_js x9332)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface24:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMRectReadOnly.t
                         val set_prototype : t -> DOMRectReadOnly.t -> unit
                         val create :
                           t ->
                             ?x:float ->
                               ?y:float ->
                                 ?width:float ->
                                   ?height:float -> unit -> DOMRectReadOnly.t
                         val fromRect :
                           t ->
                             ?other:DOMRectInit.t ->
                               unit -> DOMRectReadOnly.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9335 : Ojs.t) -> x9335
    and t_to_js : t -> Ojs.t = fun (x9334 : Ojs.t) -> x9334
    let (get_prototype : t -> DOMRectReadOnly.t) =
      fun (x9336 : t) ->
        DOMRectReadOnly.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9336) "prototype")
    let (set_prototype : t -> DOMRectReadOnly.t -> unit) =
      fun (x9337 : t) ->
        fun (x9338 : DOMRectReadOnly.t) ->
          Ojs.set_prop_ascii (t_to_js x9337) "prototype"
            (DOMRectReadOnly.t_to_js x9338)
    let (create :
      t ->
        ?x:float ->
          ?y:float ->
            ?width:float -> ?height:float -> unit -> DOMRectReadOnly.t)
      =
      fun (x9348 : t) ->
        fun ?x:(x9339 : float option) ->
          fun ?y:(x9340 : float option) ->
            fun ?width:(x9341 : float option) ->
              fun ?height:(x9342 : float option) ->
                fun () ->
                  DOMRectReadOnly.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9348)
                       (let x9343 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9339 with
                         | Some x9347 ->
                             ignore
                               (Ojs.call x9343 "push"
                                  [|(Ojs.float_to_js x9347)|])
                         | None -> ());
                        (match x9340 with
                         | Some x9346 ->
                             ignore
                               (Ojs.call x9343 "push"
                                  [|(Ojs.float_to_js x9346)|])
                         | None -> ());
                        (match x9341 with
                         | Some x9345 ->
                             ignore
                               (Ojs.call x9343 "push"
                                  [|(Ojs.float_to_js x9345)|])
                         | None -> ());
                        (match x9342 with
                         | Some x9344 ->
                             ignore
                               (Ojs.call x9343 "push"
                                  [|(Ojs.float_to_js x9344)|])
                         | None -> ());
                        x9343))
    let (fromRect : t -> ?other:DOMRectInit.t -> unit -> DOMRectReadOnly.t) =
      fun (x9352 : t) ->
        fun ?other:(x9349 : DOMRectInit.t option) ->
          fun () ->
            DOMRectReadOnly.t_of_js
              (let x9353 = t_to_js x9352 in
               Ojs.call (Ojs.get_prop_ascii x9353 "fromRect") "apply"
                 [|x9353;((let x9350 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9349 with
                            | Some x9351 ->
                                ignore
                                  (Ojs.call x9350 "push"
                                     [|(DOMRectInit.t_to_js x9351)|])
                            | None -> ());
                           x9350))|])
  end
 and
  DOMRectReadOnly:sig
                    type t = [ `DOMRectReadOnly ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `DOMRectReadOnly ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `DOMRectReadOnly ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `DOMRectReadOnly ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_bottom : 'tags this -> float
                    val get_height : 'tags this -> float
                    val get_left : 'tags this -> float
                    val get_right : 'tags this -> float
                    val get_top : 'tags this -> float
                    val get_width : 'tags this -> float
                    val get_x : 'tags this -> float
                    val get_y : 'tags this -> float
                    val toJSON : 'tags this -> any
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create :
                      ?x:float ->
                        ?y:float ->
                          ?width:float -> ?height:float -> unit -> t
                    val fromRect : ?other:DOMRectInit.t -> unit -> t
                  end =
  struct
    type t = [ `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9355 : Ojs.t) -> t_of_js x9355
    and t_0_to_js : t_0 -> Ojs.t = fun (x9354 : t) -> t_to_js x9354
    type tags = [ `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9358 : Ojs.t) -> intf_of_js __tags_of_js x9358
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9356 : __tags intf) -> intf_to_js __tags_to_js x9356
    let (get_bottom : 'tags this -> float) =
      fun (x9360 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9360) "bottom")
    let (get_height : 'tags this -> float) =
      fun (x9362 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9362) "height")
    let (get_left : 'tags this -> float) =
      fun (x9364 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9364) "left")
    let (get_right : 'tags this -> float) =
      fun (x9366 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9366) "right")
    let (get_top : 'tags this -> float) =
      fun (x9368 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9368) "top")
    let (get_width : 'tags this -> float) =
      fun (x9370 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9370) "width")
    let (get_x : 'tags this -> float) =
      fun (x9372 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9372) "x")
    let (get_y : 'tags this -> float) =
      fun (x9374 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9374) "y")
    let (toJSON : 'tags this -> any) =
      fun (x9376 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x9376) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly") "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x9378 : float option) ->
        fun ?y:(x9379 : float option) ->
          fun ?width:(x9380 : float option) ->
            fun ?height:(x9381 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
                     (let x9382 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x9378 with
                       | Some x9386 ->
                           ignore
                             (Ojs.call x9382 "push"
                                [|(Ojs.float_to_js x9386)|])
                       | None -> ());
                      (match x9379 with
                       | Some x9385 ->
                           ignore
                             (Ojs.call x9382 "push"
                                [|(Ojs.float_to_js x9385)|])
                       | None -> ());
                      (match x9380 with
                       | Some x9384 ->
                           ignore
                             (Ojs.call x9382 "push"
                                [|(Ojs.float_to_js x9384)|])
                       | None -> ());
                      (match x9381 with
                       | Some x9383 ->
                           ignore
                             (Ojs.call x9382 "push"
                                [|(Ojs.float_to_js x9383)|])
                       | None -> ());
                      x9382))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x9387 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x9390 = Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x9390 "fromRect") "apply"
               [|x9390;((let x9388 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x9387 with
                          | Some x9389 ->
                              ignore
                                (Ojs.call x9388 "push"
                                   [|(DOMRectInit.t_to_js x9389)|])
                          | None -> ());
                         x9388))|])
  end
module rec
  AnonymousInterface23:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMRect.t
                         val set_prototype : t -> DOMRect.t -> unit
                         val create :
                           t ->
                             ?x:float ->
                               ?y:float ->
                                 ?width:float ->
                                   ?height:float -> unit -> DOMRect.t
                         val fromRect :
                           t -> ?other:DOMRectInit.t -> unit -> DOMRect.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9392 : Ojs.t) -> x9392
    and t_to_js : t -> Ojs.t = fun (x9391 : Ojs.t) -> x9391
    let (get_prototype : t -> DOMRect.t) =
      fun (x9393 : t) ->
        DOMRect.t_of_js (Ojs.get_prop_ascii (t_to_js x9393) "prototype")
    let (set_prototype : t -> DOMRect.t -> unit) =
      fun (x9394 : t) ->
        fun (x9395 : DOMRect.t) ->
          Ojs.set_prop_ascii (t_to_js x9394) "prototype"
            (DOMRect.t_to_js x9395)
    let (create :
      t ->
        ?x:float ->
          ?y:float -> ?width:float -> ?height:float -> unit -> DOMRect.t)
      =
      fun (x9405 : t) ->
        fun ?x:(x9396 : float option) ->
          fun ?y:(x9397 : float option) ->
            fun ?width:(x9398 : float option) ->
              fun ?height:(x9399 : float option) ->
                fun () ->
                  DOMRect.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9405)
                       (let x9400 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9396 with
                         | Some x9404 ->
                             ignore
                               (Ojs.call x9400 "push"
                                  [|(Ojs.float_to_js x9404)|])
                         | None -> ());
                        (match x9397 with
                         | Some x9403 ->
                             ignore
                               (Ojs.call x9400 "push"
                                  [|(Ojs.float_to_js x9403)|])
                         | None -> ());
                        (match x9398 with
                         | Some x9402 ->
                             ignore
                               (Ojs.call x9400 "push"
                                  [|(Ojs.float_to_js x9402)|])
                         | None -> ());
                        (match x9399 with
                         | Some x9401 ->
                             ignore
                               (Ojs.call x9400 "push"
                                  [|(Ojs.float_to_js x9401)|])
                         | None -> ());
                        x9400))
    let (fromRect : t -> ?other:DOMRectInit.t -> unit -> DOMRect.t) =
      fun (x9409 : t) ->
        fun ?other:(x9406 : DOMRectInit.t option) ->
          fun () ->
            DOMRect.t_of_js
              (let x9410 = t_to_js x9409 in
               Ojs.call (Ojs.get_prop_ascii x9410 "fromRect") "apply"
                 [|x9410;((let x9407 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9406 with
                            | Some x9408 ->
                                ignore
                                  (Ojs.call x9407 "push"
                                     [|(DOMRectInit.t_to_js x9408)|])
                            | None -> ());
                           x9407))|])
  end
 and
  DOMRect:sig
            type t = [ `DOMRect  | `DOMRectReadOnly ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `DOMRect  | `DOMRectReadOnly ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `DOMRect  | `DOMRectReadOnly ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_height : 'tags this -> float
            val set_height : 'tags this -> float -> unit
            val get_width : 'tags this -> float
            val set_width : 'tags this -> float -> unit
            val get_x : 'tags this -> float
            val set_x : 'tags this -> float -> unit
            val get_y : 'tags this -> float
            val set_y : 'tags this -> float -> unit
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              ?x:float ->
                ?y:float -> ?width:float -> ?height:float -> unit -> t
            val fromRect : ?other:DOMRectInit.t -> unit -> t
          end =
  struct
    type t = [ `DOMRect  | `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9412 : Ojs.t) -> t_of_js x9412
    and t_0_to_js : t_0 -> Ojs.t = fun (x9411 : t) -> t_to_js x9411
    type tags = [ `DOMRect  | `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9415 : Ojs.t) -> intf_of_js __tags_of_js x9415
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9413 : __tags intf) -> intf_to_js __tags_to_js x9413
    let (get_height : 'tags this -> float) =
      fun (x9417 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9417) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x9419 : 'tags this) ->
        fun (x9420 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9419) "height"
            (Ojs.float_to_js x9420)
    let (get_width : 'tags this -> float) =
      fun (x9422 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9422) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x9424 : 'tags this) ->
        fun (x9425 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9424) "width"
            (Ojs.float_to_js x9425)
    let (get_x : 'tags this -> float) =
      fun (x9427 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9427) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x9429 : 'tags this) ->
        fun (x9430 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9429) "x"
            (Ojs.float_to_js x9430)
    let (get_y : 'tags this -> float) =
      fun (x9432 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9432) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x9434 : 'tags this) ->
        fun (x9435 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9434) "y"
            (Ojs.float_to_js x9435)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMRect")
             "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x9437 : float option) ->
        fun ?y:(x9438 : float option) ->
          fun ?width:(x9439 : float option) ->
            fun ?height:(x9440 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMRect")
                     (let x9441 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x9437 with
                       | Some x9445 ->
                           ignore
                             (Ojs.call x9441 "push"
                                [|(Ojs.float_to_js x9445)|])
                       | None -> ());
                      (match x9438 with
                       | Some x9444 ->
                           ignore
                             (Ojs.call x9441 "push"
                                [|(Ojs.float_to_js x9444)|])
                       | None -> ());
                      (match x9439 with
                       | Some x9443 ->
                           ignore
                             (Ojs.call x9441 "push"
                                [|(Ojs.float_to_js x9443)|])
                       | None -> ());
                      (match x9440 with
                       | Some x9442 ->
                           ignore
                             (Ojs.call x9441 "push"
                                [|(Ojs.float_to_js x9442)|])
                       | None -> ());
                      x9441))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x9446 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x9449 = Ojs.get_prop_ascii Ojs.global "DOMRect" in
             Ojs.call (Ojs.get_prop_ascii x9449 "fromRect") "apply"
               [|x9449;((let x9447 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x9446 with
                          | Some x9448 ->
                              ignore
                                (Ojs.call x9447 "push"
                                   [|(DOMRectInit.t_to_js x9448)|])
                          | None -> ());
                         x9447))|])
  end
module DOMPointInit =
  struct
    type t = [ `DOMPointInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9451 : Ojs.t) -> t_of_js x9451
    and t_0_to_js : t_0 -> Ojs.t = fun (x9450 : t) -> t_to_js x9450
    type tags = [ `DOMPointInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9454 : Ojs.t) -> intf_of_js __tags_of_js x9454
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9452 : __tags intf) -> intf_to_js __tags_to_js x9452
    let (get_w : 'tags this -> float) =
      fun (x9456 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9456) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x9458 : 'tags this) ->
        fun (x9459 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9458) "w"
            (Ojs.float_to_js x9459)
    let (get_x : 'tags this -> float) =
      fun (x9461 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9461) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x9463 : 'tags this) ->
        fun (x9464 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9463) "x"
            (Ojs.float_to_js x9464)
    let (get_y : 'tags this -> float) =
      fun (x9466 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9466) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x9468 : 'tags this) ->
        fun (x9469 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9468) "y"
            (Ojs.float_to_js x9469)
    let (get_z : 'tags this -> float) =
      fun (x9471 : 'tags this) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9471) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x9473 : 'tags this) ->
        fun (x9474 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9473) "z"
            (Ojs.float_to_js x9474)
    let cast_from = Obj.magic
  end
module DOMQuadInit =
  struct
    type t = [ `DOMQuadInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9477 : Ojs.t) -> t_of_js x9477
    and t_0_to_js : t_0 -> Ojs.t = fun (x9476 : t) -> t_to_js x9476
    type tags = [ `DOMQuadInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9480 : Ojs.t) -> intf_of_js __tags_of_js x9480
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9478 : __tags intf) -> intf_to_js __tags_to_js x9478
    let (get_p1 : 'tags this -> DOMPointInit.t) =
      fun (x9482 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9482) "p1")
    let (set_p1 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x9484 : 'tags this) ->
        fun (x9485 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9484) "p1"
            (DOMPointInit.t_to_js x9485)
    let (get_p2 : 'tags this -> DOMPointInit.t) =
      fun (x9487 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9487) "p2")
    let (set_p2 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x9489 : 'tags this) ->
        fun (x9490 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9489) "p2"
            (DOMPointInit.t_to_js x9490)
    let (get_p3 : 'tags this -> DOMPointInit.t) =
      fun (x9492 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9492) "p3")
    let (set_p3 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x9494 : 'tags this) ->
        fun (x9495 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9494) "p3"
            (DOMPointInit.t_to_js x9495)
    let (get_p4 : 'tags this -> DOMPointInit.t) =
      fun (x9497 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9497) "p4")
    let (set_p4 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x9499 : 'tags this) ->
        fun (x9500 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9499) "p4"
            (DOMPointInit.t_to_js x9500)
    let cast_from = Obj.magic
  end
module DOMMatrixInit =
  struct
    type t = [ `DOMMatrix2DInit  | `DOMMatrixInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9503 : Ojs.t) -> t_of_js x9503
    and t_0_to_js : t_0 -> Ojs.t = fun (x9502 : t) -> t_to_js x9502
    type tags = [ `DOMMatrix2DInit  | `DOMMatrixInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9506 : Ojs.t) -> intf_of_js __tags_of_js x9506
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9504 : __tags intf) -> intf_to_js __tags_to_js x9504
    let (get_is2D : 'tags this -> bool) =
      fun (x9508 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9508) "is2D")
    let (set_is2D : 'tags this -> bool -> unit) =
      fun (x9510 : 'tags this) ->
        fun (x9511 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9510) "is2D"
            (Ojs.bool_to_js x9511)
    let (get_m13 : 'tags this -> float) =
      fun (x9513 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9513) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x9515 : 'tags this) ->
        fun (x9516 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9515) "m13"
            (Ojs.float_to_js x9516)
    let (get_m14 : 'tags this -> float) =
      fun (x9518 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9518) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x9520 : 'tags this) ->
        fun (x9521 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9520) "m14"
            (Ojs.float_to_js x9521)
    let (get_m23 : 'tags this -> float) =
      fun (x9523 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9523) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x9525 : 'tags this) ->
        fun (x9526 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9525) "m23"
            (Ojs.float_to_js x9526)
    let (get_m24 : 'tags this -> float) =
      fun (x9528 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9528) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x9530 : 'tags this) ->
        fun (x9531 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9530) "m24"
            (Ojs.float_to_js x9531)
    let (get_m31 : 'tags this -> float) =
      fun (x9533 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9533) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x9535 : 'tags this) ->
        fun (x9536 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9535) "m31"
            (Ojs.float_to_js x9536)
    let (get_m32 : 'tags this -> float) =
      fun (x9538 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9538) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x9540 : 'tags this) ->
        fun (x9541 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9540) "m32"
            (Ojs.float_to_js x9541)
    let (get_m33 : 'tags this -> float) =
      fun (x9543 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9543) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x9545 : 'tags this) ->
        fun (x9546 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9545) "m33"
            (Ojs.float_to_js x9546)
    let (get_m34 : 'tags this -> float) =
      fun (x9548 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9548) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x9550 : 'tags this) ->
        fun (x9551 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9550) "m34"
            (Ojs.float_to_js x9551)
    let (get_m43 : 'tags this -> float) =
      fun (x9553 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9553) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x9555 : 'tags this) ->
        fun (x9556 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9555) "m43"
            (Ojs.float_to_js x9556)
    let (get_m44 : 'tags this -> float) =
      fun (x9558 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9558) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x9560 : 'tags this) ->
        fun (x9561 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x9560) "m44"
            (Ojs.float_to_js x9561)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface20:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMPoint.t
                         val set_prototype : t -> DOMPoint.t -> unit
                         val create :
                           t ->
                             ?x:float ->
                               ?y:float ->
                                 ?z:float -> ?w:float -> unit -> DOMPoint.t
                         val fromPoint :
                           t -> ?other:DOMPointInit.t -> unit -> DOMPoint.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9564 : Ojs.t) -> x9564
    and t_to_js : t -> Ojs.t = fun (x9563 : Ojs.t) -> x9563
    let (get_prototype : t -> DOMPoint.t) =
      fun (x9565 : t) ->
        DOMPoint.t_of_js (Ojs.get_prop_ascii (t_to_js x9565) "prototype")
    let (set_prototype : t -> DOMPoint.t -> unit) =
      fun (x9566 : t) ->
        fun (x9567 : DOMPoint.t) ->
          Ojs.set_prop_ascii (t_to_js x9566) "prototype"
            (DOMPoint.t_to_js x9567)
    let (create :
      t -> ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> DOMPoint.t)
      =
      fun (x9577 : t) ->
        fun ?x:(x9568 : float option) ->
          fun ?y:(x9569 : float option) ->
            fun ?z:(x9570 : float option) ->
              fun ?w:(x9571 : float option) ->
                fun () ->
                  DOMPoint.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9577)
                       (let x9572 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9568 with
                         | Some x9576 ->
                             ignore
                               (Ojs.call x9572 "push"
                                  [|(Ojs.float_to_js x9576)|])
                         | None -> ());
                        (match x9569 with
                         | Some x9575 ->
                             ignore
                               (Ojs.call x9572 "push"
                                  [|(Ojs.float_to_js x9575)|])
                         | None -> ());
                        (match x9570 with
                         | Some x9574 ->
                             ignore
                               (Ojs.call x9572 "push"
                                  [|(Ojs.float_to_js x9574)|])
                         | None -> ());
                        (match x9571 with
                         | Some x9573 ->
                             ignore
                               (Ojs.call x9572 "push"
                                  [|(Ojs.float_to_js x9573)|])
                         | None -> ());
                        x9572))
    let (fromPoint : t -> ?other:DOMPointInit.t -> unit -> DOMPoint.t) =
      fun (x9581 : t) ->
        fun ?other:(x9578 : DOMPointInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x9582 = t_to_js x9581 in
               Ojs.call (Ojs.get_prop_ascii x9582 "fromPoint") "apply"
                 [|x9582;((let x9579 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9578 with
                            | Some x9580 ->
                                ignore
                                  (Ojs.call x9579 "push"
                                     [|(DOMPointInit.t_to_js x9580)|])
                            | None -> ());
                           x9579))|])
  end
 and
  AnonymousInterface21:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMPointReadOnly.t
                         val set_prototype : t -> DOMPointReadOnly.t -> unit
                         val create :
                           t ->
                             ?x:float ->
                               ?y:float ->
                                 ?z:float ->
                                   ?w:float -> unit -> DOMPointReadOnly.t
                         val fromPoint :
                           t ->
                             ?other:DOMPointInit.t ->
                               unit -> DOMPointReadOnly.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9584 : Ojs.t) -> x9584
    and t_to_js : t -> Ojs.t = fun (x9583 : Ojs.t) -> x9583
    let (get_prototype : t -> DOMPointReadOnly.t) =
      fun (x9585 : t) ->
        DOMPointReadOnly.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9585) "prototype")
    let (set_prototype : t -> DOMPointReadOnly.t -> unit) =
      fun (x9586 : t) ->
        fun (x9587 : DOMPointReadOnly.t) ->
          Ojs.set_prop_ascii (t_to_js x9586) "prototype"
            (DOMPointReadOnly.t_to_js x9587)
    let (create :
      t ->
        ?x:float ->
          ?y:float -> ?z:float -> ?w:float -> unit -> DOMPointReadOnly.t)
      =
      fun (x9597 : t) ->
        fun ?x:(x9588 : float option) ->
          fun ?y:(x9589 : float option) ->
            fun ?z:(x9590 : float option) ->
              fun ?w:(x9591 : float option) ->
                fun () ->
                  DOMPointReadOnly.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9597)
                       (let x9592 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9588 with
                         | Some x9596 ->
                             ignore
                               (Ojs.call x9592 "push"
                                  [|(Ojs.float_to_js x9596)|])
                         | None -> ());
                        (match x9589 with
                         | Some x9595 ->
                             ignore
                               (Ojs.call x9592 "push"
                                  [|(Ojs.float_to_js x9595)|])
                         | None -> ());
                        (match x9590 with
                         | Some x9594 ->
                             ignore
                               (Ojs.call x9592 "push"
                                  [|(Ojs.float_to_js x9594)|])
                         | None -> ());
                        (match x9591 with
                         | Some x9593 ->
                             ignore
                               (Ojs.call x9592 "push"
                                  [|(Ojs.float_to_js x9593)|])
                         | None -> ());
                        x9592))
    let (fromPoint :
      t -> ?other:DOMPointInit.t -> unit -> DOMPointReadOnly.t) =
      fun (x9601 : t) ->
        fun ?other:(x9598 : DOMPointInit.t option) ->
          fun () ->
            DOMPointReadOnly.t_of_js
              (let x9602 = t_to_js x9601 in
               Ojs.call (Ojs.get_prop_ascii x9602 "fromPoint") "apply"
                 [|x9602;((let x9599 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9598 with
                            | Some x9600 ->
                                ignore
                                  (Ojs.call x9599 "push"
                                     [|(DOMPointInit.t_to_js x9600)|])
                            | None -> ());
                           x9599))|])
  end and
       DOMPoint:sig
                  type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
                  type t_0 = t
                  [@@@js.stop ]
                  type tags = [ `DOMPoint  | `DOMPointReadOnly ]
                  type tags_0 = tags
                  [@@@js.start ]
                  [@@@js.implem
                    type tags = [ `DOMPoint  | `DOMPointReadOnly ]
                    type tags_0 = tags]
                  type 'tags this =
                    'tags intf constraint 'tags = [> `DOMPoint ]
                  val t_to_js : t -> Ojs.t
                  val t_of_js : Ojs.t -> t
                  val t_0_to_js : t_0 -> Ojs.t
                  val t_0_of_js : Ojs.t -> t_0
                  val get_w : 'tags this -> float
                  val set_w : 'tags this -> float -> unit
                  val get_x : 'tags this -> float
                  val set_x : 'tags this -> float -> unit
                  val get_y : 'tags this -> float
                  val set_y : 'tags this -> float -> unit
                  val get_z : 'tags this -> float
                  val set_z : 'tags this -> float -> unit
                  val cast_from : 'tags this -> t
                  val prototype : unit -> t
                  val create :
                    ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
                  val fromPoint : ?other:DOMPointInit.t -> unit -> t
                end =
       struct
         type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x9604 : Ojs.t) -> t_of_js x9604
         and t_0_to_js : t_0 -> Ojs.t = fun (x9603 : t) -> t_to_js x9603
         type tags = [ `DOMPoint  | `DOMPointReadOnly ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x9607 : Ojs.t) -> intf_of_js __tags_of_js x9607
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x9605 : __tags intf) -> intf_to_js __tags_to_js x9605
         let (get_w : 'tags this -> float) =
           fun (x9609 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9609) "w")
         let (set_w : 'tags this -> float -> unit) =
           fun (x9611 : 'tags this) ->
             fun (x9612 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9611) "w"
                 (Ojs.float_to_js x9612)
         let (get_x : 'tags this -> float) =
           fun (x9614 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9614) "x")
         let (set_x : 'tags this -> float -> unit) =
           fun (x9616 : 'tags this) ->
             fun (x9617 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9616) "x"
                 (Ojs.float_to_js x9617)
         let (get_y : 'tags this -> float) =
           fun (x9619 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9619) "y")
         let (set_y : 'tags this -> float -> unit) =
           fun (x9621 : 'tags this) ->
             fun (x9622 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9621) "y"
                 (Ojs.float_to_js x9622)
         let (get_z : 'tags this -> float) =
           fun (x9624 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9624) "z")
         let (set_z : 'tags this -> float -> unit) =
           fun (x9626 : 'tags this) ->
             fun (x9627 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9626) "z"
                 (Ojs.float_to_js x9627)
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                  "prototype")
         let (create :
           ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t) =
           fun ?x:(x9629 : float option) ->
             fun ?y:(x9630 : float option) ->
               fun ?z:(x9631 : float option) ->
                 fun ?w:(x9632 : float option) ->
                   fun () ->
                     t_of_js
                       (Ojs.new_obj_arr
                          (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                          (let x9633 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9629 with
                            | Some x9637 ->
                                ignore
                                  (Ojs.call x9633 "push"
                                     [|(Ojs.float_to_js x9637)|])
                            | None -> ());
                           (match x9630 with
                            | Some x9636 ->
                                ignore
                                  (Ojs.call x9633 "push"
                                     [|(Ojs.float_to_js x9636)|])
                            | None -> ());
                           (match x9631 with
                            | Some x9635 ->
                                ignore
                                  (Ojs.call x9633 "push"
                                     [|(Ojs.float_to_js x9635)|])
                            | None -> ());
                           (match x9632 with
                            | Some x9634 ->
                                ignore
                                  (Ojs.call x9633 "push"
                                     [|(Ojs.float_to_js x9634)|])
                            | None -> ());
                           x9633))
         let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
           fun ?other:(x9638 : DOMPointInit.t option) ->
             fun () ->
               t_of_js
                 (let x9641 = Ojs.get_prop_ascii Ojs.global "DOMPoint" in
                  Ojs.call (Ojs.get_prop_ascii x9641 "fromPoint") "apply"
                    [|x9641;((let x9639 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x9638 with
                               | Some x9640 ->
                                   ignore
                                     (Ojs.call x9639 "push"
                                        [|(DOMPointInit.t_to_js x9640)|])
                               | None -> ());
                              x9639))|])
       end and
            DOMPointReadOnly:sig
                               type t = [ `DOMPointReadOnly ] intf
                               type t_0 = t
                               [@@@js.stop ]
                               type tags = [ `DOMPointReadOnly ]
                               type tags_0 = tags
                               [@@@js.start ]
                               [@@@js.implem
                                 type tags = [ `DOMPointReadOnly ]
                                 type tags_0 = tags]
                               type 'tags this =
                                 'tags intf constraint 'tags =
                                             [> `DOMPointReadOnly ]
                               val t_to_js : t -> Ojs.t
                               val t_of_js : Ojs.t -> t
                               val t_0_to_js : t_0 -> Ojs.t
                               val t_0_of_js : Ojs.t -> t_0
                               val get_w : 'tags this -> float
                               val get_x : 'tags this -> float
                               val get_y : 'tags this -> float
                               val get_z : 'tags this -> float
                               val matrixTransform :
                                 'tags this ->
                                   ?matrix:DOMMatrixInit.t ->
                                     unit -> DOMPoint.t
                               val toJSON : 'tags this -> any
                               val cast_from : 'tags this -> t
                               val prototype : unit -> t
                               val create :
                                 ?x:float ->
                                   ?y:float ->
                                     ?z:float -> ?w:float -> unit -> t
                               val fromPoint :
                                 ?other:DOMPointInit.t -> unit -> t
                             end =
            struct
              type t = [ `DOMPointReadOnly ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x9643 : Ojs.t) -> t_of_js x9643
              and t_0_to_js : t_0 -> Ojs.t = fun (x9642 : t) -> t_to_js x9642
              type tags = [ `DOMPointReadOnly ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `DOMPointReadOnly ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x9646 : Ojs.t) -> intf_of_js __tags_of_js x9646
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x9644 : __tags intf) -> intf_to_js __tags_to_js x9644
              let (get_w : 'tags this -> float) =
                fun (x9648 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9648) "w")
              let (get_x : 'tags this -> float) =
                fun (x9650 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9650) "x")
              let (get_y : 'tags this -> float) =
                fun (x9652 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9652) "y")
              let (get_z : 'tags this -> float) =
                fun (x9654 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x9654) "z")
              let (matrixTransform :
                'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t)
                =
                fun (x9659 : 'tags this) ->
                  fun ?matrix:(x9656 : DOMMatrixInit.t option) ->
                    fun () ->
                      DOMPoint.t_of_js
                        (let x9661 = this_to_js Obj.magic x9659 in
                         Ojs.call
                           (Ojs.get_prop_ascii x9661 "matrixTransform")
                           "apply"
                           [|x9661;((let x9657 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x9656 with
                                      | Some x9658 ->
                                          ignore
                                            (Ojs.call x9657 "push"
                                               [|(DOMMatrixInit.t_to_js x9658)|])
                                      | None -> ());
                                     x9657))|])
              let (toJSON : 'tags this -> any) =
                fun (x9662 : 'tags this) ->
                  any_of_js
                    (Ojs.call (this_to_js Obj.magic x9662) "toJSON" [||])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
                       "prototype")
              let (create :
                ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t) =
                fun ?x:(x9664 : float option) ->
                  fun ?y:(x9665 : float option) ->
                    fun ?z:(x9666 : float option) ->
                      fun ?w:(x9667 : float option) ->
                        fun () ->
                          t_of_js
                            (Ojs.new_obj_arr
                               (Ojs.get_prop_ascii Ojs.global
                                  "DOMPointReadOnly")
                               (let x9668 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9664 with
                                 | Some x9672 ->
                                     ignore
                                       (Ojs.call x9668 "push"
                                          [|(Ojs.float_to_js x9672)|])
                                 | None -> ());
                                (match x9665 with
                                 | Some x9671 ->
                                     ignore
                                       (Ojs.call x9668 "push"
                                          [|(Ojs.float_to_js x9671)|])
                                 | None -> ());
                                (match x9666 with
                                 | Some x9670 ->
                                     ignore
                                       (Ojs.call x9668 "push"
                                          [|(Ojs.float_to_js x9670)|])
                                 | None -> ());
                                (match x9667 with
                                 | Some x9669 ->
                                     ignore
                                       (Ojs.call x9668 "push"
                                          [|(Ojs.float_to_js x9669)|])
                                 | None -> ());
                                x9668))
              let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
                fun ?other:(x9673 : DOMPointInit.t option) ->
                  fun () ->
                    t_of_js
                      (let x9676 =
                         Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly" in
                       Ojs.call (Ojs.get_prop_ascii x9676 "fromPoint")
                         "apply"
                         [|x9676;((let x9674 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   (match x9673 with
                                    | Some x9675 ->
                                        ignore
                                          (Ojs.call x9674 "push"
                                             [|(DOMPointInit.t_to_js x9675)|])
                                    | None -> ());
                                   x9674))|])
            end
module rec
  AnonymousInterface22:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMQuad.t
                         val set_prototype : t -> DOMQuad.t -> unit
                         val create :
                           t ->
                             ?p1:DOMPointInit.t ->
                               ?p2:DOMPointInit.t ->
                                 ?p3:DOMPointInit.t ->
                                   ?p4:DOMPointInit.t -> unit -> DOMQuad.t
                         val fromQuad :
                           t -> ?other:DOMQuadInit.t -> unit -> DOMQuad.t
                         val fromRect :
                           t -> ?other:DOMRectInit.t -> unit -> DOMQuad.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9678 : Ojs.t) -> x9678
    and t_to_js : t -> Ojs.t = fun (x9677 : Ojs.t) -> x9677
    let (get_prototype : t -> DOMQuad.t) =
      fun (x9679 : t) ->
        DOMQuad.t_of_js (Ojs.get_prop_ascii (t_to_js x9679) "prototype")
    let (set_prototype : t -> DOMQuad.t -> unit) =
      fun (x9680 : t) ->
        fun (x9681 : DOMQuad.t) ->
          Ojs.set_prop_ascii (t_to_js x9680) "prototype"
            (DOMQuad.t_to_js x9681)
    let (create :
      t ->
        ?p1:DOMPointInit.t ->
          ?p2:DOMPointInit.t ->
            ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> DOMQuad.t)
      =
      fun (x9691 : t) ->
        fun ?p1:(x9682 : DOMPointInit.t option) ->
          fun ?p2:(x9683 : DOMPointInit.t option) ->
            fun ?p3:(x9684 : DOMPointInit.t option) ->
              fun ?p4:(x9685 : DOMPointInit.t option) ->
                fun () ->
                  DOMQuad.t_of_js
                    (Ojs.new_obj_arr (t_to_js x9691)
                       (let x9686 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x9682 with
                         | Some x9690 ->
                             ignore
                               (Ojs.call x9686 "push"
                                  [|(DOMPointInit.t_to_js x9690)|])
                         | None -> ());
                        (match x9683 with
                         | Some x9689 ->
                             ignore
                               (Ojs.call x9686 "push"
                                  [|(DOMPointInit.t_to_js x9689)|])
                         | None -> ());
                        (match x9684 with
                         | Some x9688 ->
                             ignore
                               (Ojs.call x9686 "push"
                                  [|(DOMPointInit.t_to_js x9688)|])
                         | None -> ());
                        (match x9685 with
                         | Some x9687 ->
                             ignore
                               (Ojs.call x9686 "push"
                                  [|(DOMPointInit.t_to_js x9687)|])
                         | None -> ());
                        x9686))
    let (fromQuad : t -> ?other:DOMQuadInit.t -> unit -> DOMQuad.t) =
      fun (x9695 : t) ->
        fun ?other:(x9692 : DOMQuadInit.t option) ->
          fun () ->
            DOMQuad.t_of_js
              (let x9696 = t_to_js x9695 in
               Ojs.call (Ojs.get_prop_ascii x9696 "fromQuad") "apply"
                 [|x9696;((let x9693 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9692 with
                            | Some x9694 ->
                                ignore
                                  (Ojs.call x9693 "push"
                                     [|(DOMQuadInit.t_to_js x9694)|])
                            | None -> ());
                           x9693))|])
    let (fromRect : t -> ?other:DOMRectInit.t -> unit -> DOMQuad.t) =
      fun (x9700 : t) ->
        fun ?other:(x9697 : DOMRectInit.t option) ->
          fun () ->
            DOMQuad.t_of_js
              (let x9701 = t_to_js x9700 in
               Ojs.call (Ojs.get_prop_ascii x9701 "fromRect") "apply"
                 [|x9701;((let x9698 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9697 with
                            | Some x9699 ->
                                ignore
                                  (Ojs.call x9698 "push"
                                     [|(DOMRectInit.t_to_js x9699)|])
                            | None -> ());
                           x9698))|])
  end
 and
  DOMQuad:sig
            type t = [ `DOMQuad ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `DOMQuad ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem type tags = [ `DOMQuad ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_p1 : 'tags this -> DOMPoint.t
            val get_p2 : 'tags this -> DOMPoint.t
            val get_p3 : 'tags this -> DOMPoint.t
            val get_p4 : 'tags this -> DOMPoint.t
            val getBounds : 'tags this -> DOMRect.t
            val toJSON : 'tags this -> any
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              ?p1:DOMPointInit.t ->
                ?p2:DOMPointInit.t ->
                  ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t
            val fromQuad : ?other:DOMQuadInit.t -> unit -> t
            val fromRect : ?other:DOMRectInit.t -> unit -> t
          end =
  struct
    type t = [ `DOMQuad ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9703 : Ojs.t) -> t_of_js x9703
    and t_0_to_js : t_0 -> Ojs.t = fun (x9702 : t) -> t_to_js x9702
    type tags = [ `DOMQuad ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9706 : Ojs.t) -> intf_of_js __tags_of_js x9706
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9704 : __tags intf) -> intf_to_js __tags_to_js x9704
    let (get_p1 : 'tags this -> DOMPoint.t) =
      fun (x9708 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9708) "p1")
    let (get_p2 : 'tags this -> DOMPoint.t) =
      fun (x9710 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9710) "p2")
    let (get_p3 : 'tags this -> DOMPoint.t) =
      fun (x9712 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9712) "p3")
    let (get_p4 : 'tags this -> DOMPoint.t) =
      fun (x9714 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9714) "p4")
    let (getBounds : 'tags this -> DOMRect.t) =
      fun (x9716 : 'tags this) ->
        DOMRect.t_of_js
          (Ojs.call (this_to_js Obj.magic x9716) "getBounds" [||])
    let (toJSON : 'tags this -> any) =
      fun (x9718 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x9718) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMQuad")
             "prototype")
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x9720 : DOMPointInit.t option) ->
        fun ?p2:(x9721 : DOMPointInit.t option) ->
          fun ?p3:(x9722 : DOMPointInit.t option) ->
            fun ?p4:(x9723 : DOMPointInit.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMQuad")
                     (let x9724 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x9720 with
                       | Some x9728 ->
                           ignore
                             (Ojs.call x9724 "push"
                                [|(DOMPointInit.t_to_js x9728)|])
                       | None -> ());
                      (match x9721 with
                       | Some x9727 ->
                           ignore
                             (Ojs.call x9724 "push"
                                [|(DOMPointInit.t_to_js x9727)|])
                       | None -> ());
                      (match x9722 with
                       | Some x9726 ->
                           ignore
                             (Ojs.call x9724 "push"
                                [|(DOMPointInit.t_to_js x9726)|])
                       | None -> ());
                      (match x9723 with
                       | Some x9725 ->
                           ignore
                             (Ojs.call x9724 "push"
                                [|(DOMPointInit.t_to_js x9725)|])
                       | None -> ());
                      x9724))
    let (fromQuad : ?other:DOMQuadInit.t -> unit -> t) =
      fun ?other:(x9729 : DOMQuadInit.t option) ->
        fun () ->
          t_of_js
            (let x9732 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x9732 "fromQuad") "apply"
               [|x9732;((let x9730 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x9729 with
                          | Some x9731 ->
                              ignore
                                (Ojs.call x9730 "push"
                                   [|(DOMQuadInit.t_to_js x9731)|])
                          | None -> ());
                         x9730))|])
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x9733 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x9736 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x9736 "fromRect") "apply"
               [|x9736;((let x9734 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x9733 with
                          | Some x9735 ->
                              ignore
                                (Ojs.call x9734 "push"
                                   [|(DOMRectInit.t_to_js x9735)|])
                          | None -> ());
                         x9734))|])
  end
module rec
  AnonymousInterface18:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMMatrix.t
                         val set_prototype : t -> DOMMatrix.t -> unit
                         val create :
                           t ->
                             ?init:float list or_string ->
                               unit -> DOMMatrix.t
                         val fromFloat32Array :
                           t -> array32:Float32Array.t_0 -> DOMMatrix.t
                         val fromFloat64Array :
                           t -> array64:Float64Array.t_0 -> DOMMatrix.t
                         val fromMatrix :
                           t -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9738 : Ojs.t) -> x9738
    and t_to_js : t -> Ojs.t = fun (x9737 : Ojs.t) -> x9737
    let (get_prototype : t -> DOMMatrix.t) =
      fun (x9739 : t) ->
        DOMMatrix.t_of_js (Ojs.get_prop_ascii (t_to_js x9739) "prototype")
    let (set_prototype : t -> DOMMatrix.t -> unit) =
      fun (x9740 : t) ->
        fun (x9741 : DOMMatrix.t) ->
          Ojs.set_prop_ascii (t_to_js x9740) "prototype"
            (DOMMatrix.t_to_js x9741)
    let (create : t -> ?init:float list or_string -> unit -> DOMMatrix.t) =
      fun (x9747 : t) ->
        fun ?init:(x9742 : float list or_string option) ->
          fun () ->
            DOMMatrix.t_of_js
              (Ojs.new_obj_arr (t_to_js x9747)
                 (let x9743 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x9742 with
                   | Some x9744 ->
                       ignore
                         (Ojs.call x9743 "push"
                            [|(or_string_to_js
                                 (fun (x9745 : float list) ->
                                    Ojs.list_to_js Ojs.float_to_js x9745)
                                 x9744)|])
                   | None -> ());
                  x9743))
    let (fromFloat32Array : t -> array32:Float32Array.t_0 -> DOMMatrix.t) =
      fun (x9749 : t) ->
        fun ~array32:(x9748 : Float32Array.t_0) ->
          DOMMatrix.t_of_js
            (Ojs.call (t_to_js x9749) "fromFloat32Array"
               [|(Float32Array.t_0_to_js x9748)|])
    let (fromFloat64Array : t -> array64:Float64Array.t_0 -> DOMMatrix.t) =
      fun (x9751 : t) ->
        fun ~array64:(x9750 : Float64Array.t_0) ->
          DOMMatrix.t_of_js
            (Ojs.call (t_to_js x9751) "fromFloat64Array"
               [|(Float64Array.t_0_to_js x9750)|])
    let (fromMatrix : t -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t) =
      fun (x9755 : t) ->
        fun ?other:(x9752 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x9756 = t_to_js x9755 in
               Ojs.call (Ojs.get_prop_ascii x9756 "fromMatrix") "apply"
                 [|x9756;((let x9753 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9752 with
                            | Some x9754 ->
                                ignore
                                  (Ojs.call x9753 "push"
                                     [|(DOMMatrixInit.t_to_js x9754)|])
                            | None -> ());
                           x9753))|])
  end
 and
  AnonymousInterface19:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> DOMMatrixReadOnly.t
                         val set_prototype : t -> DOMMatrixReadOnly.t -> unit
                         val create :
                           t ->
                             ?init:float list or_string ->
                               unit -> DOMMatrixReadOnly.t
                         val fromFloat32Array :
                           t ->
                             array32:Float32Array.t_0 -> DOMMatrixReadOnly.t
                         val fromFloat64Array :
                           t ->
                             array64:Float64Array.t_0 -> DOMMatrixReadOnly.t
                         val fromMatrix :
                           t ->
                             ?other:DOMMatrixInit.t ->
                               unit -> DOMMatrixReadOnly.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9758 : Ojs.t) -> x9758
    and t_to_js : t -> Ojs.t = fun (x9757 : Ojs.t) -> x9757
    let (get_prototype : t -> DOMMatrixReadOnly.t) =
      fun (x9759 : t) ->
        DOMMatrixReadOnly.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9759) "prototype")
    let (set_prototype : t -> DOMMatrixReadOnly.t -> unit) =
      fun (x9760 : t) ->
        fun (x9761 : DOMMatrixReadOnly.t) ->
          Ojs.set_prop_ascii (t_to_js x9760) "prototype"
            (DOMMatrixReadOnly.t_to_js x9761)
    let (create :
      t -> ?init:float list or_string -> unit -> DOMMatrixReadOnly.t) =
      fun (x9767 : t) ->
        fun ?init:(x9762 : float list or_string option) ->
          fun () ->
            DOMMatrixReadOnly.t_of_js
              (Ojs.new_obj_arr (t_to_js x9767)
                 (let x9763 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x9762 with
                   | Some x9764 ->
                       ignore
                         (Ojs.call x9763 "push"
                            [|(or_string_to_js
                                 (fun (x9765 : float list) ->
                                    Ojs.list_to_js Ojs.float_to_js x9765)
                                 x9764)|])
                   | None -> ());
                  x9763))
    let (fromFloat32Array :
      t -> array32:Float32Array.t_0 -> DOMMatrixReadOnly.t) =
      fun (x9769 : t) ->
        fun ~array32:(x9768 : Float32Array.t_0) ->
          DOMMatrixReadOnly.t_of_js
            (Ojs.call (t_to_js x9769) "fromFloat32Array"
               [|(Float32Array.t_0_to_js x9768)|])
    let (fromFloat64Array :
      t -> array64:Float64Array.t_0 -> DOMMatrixReadOnly.t) =
      fun (x9771 : t) ->
        fun ~array64:(x9770 : Float64Array.t_0) ->
          DOMMatrixReadOnly.t_of_js
            (Ojs.call (t_to_js x9771) "fromFloat64Array"
               [|(Float64Array.t_0_to_js x9770)|])
    let (fromMatrix :
      t -> ?other:DOMMatrixInit.t -> unit -> DOMMatrixReadOnly.t) =
      fun (x9775 : t) ->
        fun ?other:(x9772 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrixReadOnly.t_of_js
              (let x9776 = t_to_js x9775 in
               Ojs.call (Ojs.get_prop_ascii x9776 "fromMatrix") "apply"
                 [|x9776;((let x9773 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9772 with
                            | Some x9774 ->
                                ignore
                                  (Ojs.call x9773 "push"
                                     [|(DOMMatrixInit.t_to_js x9774)|])
                            | None -> ());
                           x9773))|])
  end and
       DOMMatrix:sig
                   type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `DOMMatrix ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_a : 'tags this -> float
                   val set_a : 'tags this -> float -> unit
                   val get_b : 'tags this -> float
                   val set_b : 'tags this -> float -> unit
                   val get_c : 'tags this -> float
                   val set_c : 'tags this -> float -> unit
                   val get_d : 'tags this -> float
                   val set_d : 'tags this -> float -> unit
                   val get_e : 'tags this -> float
                   val set_e : 'tags this -> float -> unit
                   val get_f : 'tags this -> float
                   val set_f : 'tags this -> float -> unit
                   val get_m11 : 'tags this -> float
                   val set_m11 : 'tags this -> float -> unit
                   val get_m12 : 'tags this -> float
                   val set_m12 : 'tags this -> float -> unit
                   val get_m13 : 'tags this -> float
                   val set_m13 : 'tags this -> float -> unit
                   val get_m14 : 'tags this -> float
                   val set_m14 : 'tags this -> float -> unit
                   val get_m21 : 'tags this -> float
                   val set_m21 : 'tags this -> float -> unit
                   val get_m22 : 'tags this -> float
                   val set_m22 : 'tags this -> float -> unit
                   val get_m23 : 'tags this -> float
                   val set_m23 : 'tags this -> float -> unit
                   val get_m24 : 'tags this -> float
                   val set_m24 : 'tags this -> float -> unit
                   val get_m31 : 'tags this -> float
                   val set_m31 : 'tags this -> float -> unit
                   val get_m32 : 'tags this -> float
                   val set_m32 : 'tags this -> float -> unit
                   val get_m33 : 'tags this -> float
                   val set_m33 : 'tags this -> float -> unit
                   val get_m34 : 'tags this -> float
                   val set_m34 : 'tags this -> float -> unit
                   val get_m41 : 'tags this -> float
                   val set_m41 : 'tags this -> float -> unit
                   val get_m42 : 'tags this -> float
                   val set_m42 : 'tags this -> float -> unit
                   val get_m43 : 'tags this -> float
                   val set_m43 : 'tags this -> float -> unit
                   val get_m44 : 'tags this -> float
                   val set_m44 : 'tags this -> float -> unit
                   val invertSelf : 'tags this -> t
                   val multiplySelf :
                     'tags this -> ?other:DOMMatrixInit.t -> unit -> t
                   val preMultiplySelf :
                     'tags this -> ?other:DOMMatrixInit.t -> unit -> t
                   val rotateAxisAngleSelf :
                     'tags this ->
                       ?x:float ->
                         ?y:float -> ?z:float -> ?angle:float -> unit -> t
                   val rotateFromVectorSelf :
                     'tags this -> ?x:float -> ?y:float -> unit -> t
                   val rotateSelf :
                     'tags this ->
                       ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t
                   val scale3dSelf :
                     'tags this ->
                       ?scale:float ->
                         ?originX:float ->
                           ?originY:float -> ?originZ:float -> unit -> t
                   val scaleSelf :
                     'tags this ->
                       ?scaleX:float ->
                         ?scaleY:float ->
                           ?scaleZ:float ->
                             ?originX:float ->
                               ?originY:float -> ?originZ:float -> unit -> t
                   val skewXSelf : 'tags this -> ?sx:float -> unit -> t
                   val skewYSelf : 'tags this -> ?sy:float -> unit -> t
                   val translateSelf :
                     'tags this ->
                       ?tx:float -> ?ty:float -> ?tz:float -> unit -> t
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : ?init:float list or_string -> unit -> t
                   val fromFloat32Array : Float32Array.t_0 -> t
                   val fromFloat64Array : Float64Array.t_0 -> t
                   val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
                 end =
       struct
         type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x9778 : Ojs.t) -> t_of_js x9778
         and t_0_to_js : t_0 -> Ojs.t = fun (x9777 : t) -> t_to_js x9777
         type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x9781 : Ojs.t) -> intf_of_js __tags_of_js x9781
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x9779 : __tags intf) -> intf_to_js __tags_to_js x9779
         let (get_a : 'tags this -> float) =
           fun (x9783 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9783) "a")
         let (set_a : 'tags this -> float -> unit) =
           fun (x9785 : 'tags this) ->
             fun (x9786 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9785) "a"
                 (Ojs.float_to_js x9786)
         let (get_b : 'tags this -> float) =
           fun (x9788 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9788) "b")
         let (set_b : 'tags this -> float -> unit) =
           fun (x9790 : 'tags this) ->
             fun (x9791 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9790) "b"
                 (Ojs.float_to_js x9791)
         let (get_c : 'tags this -> float) =
           fun (x9793 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9793) "c")
         let (set_c : 'tags this -> float -> unit) =
           fun (x9795 : 'tags this) ->
             fun (x9796 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9795) "c"
                 (Ojs.float_to_js x9796)
         let (get_d : 'tags this -> float) =
           fun (x9798 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9798) "d")
         let (set_d : 'tags this -> float -> unit) =
           fun (x9800 : 'tags this) ->
             fun (x9801 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9800) "d"
                 (Ojs.float_to_js x9801)
         let (get_e : 'tags this -> float) =
           fun (x9803 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9803) "e")
         let (set_e : 'tags this -> float -> unit) =
           fun (x9805 : 'tags this) ->
             fun (x9806 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9805) "e"
                 (Ojs.float_to_js x9806)
         let (get_f : 'tags this -> float) =
           fun (x9808 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9808) "f")
         let (set_f : 'tags this -> float -> unit) =
           fun (x9810 : 'tags this) ->
             fun (x9811 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9810) "f"
                 (Ojs.float_to_js x9811)
         let (get_m11 : 'tags this -> float) =
           fun (x9813 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9813) "m11")
         let (set_m11 : 'tags this -> float -> unit) =
           fun (x9815 : 'tags this) ->
             fun (x9816 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9815) "m11"
                 (Ojs.float_to_js x9816)
         let (get_m12 : 'tags this -> float) =
           fun (x9818 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9818) "m12")
         let (set_m12 : 'tags this -> float -> unit) =
           fun (x9820 : 'tags this) ->
             fun (x9821 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9820) "m12"
                 (Ojs.float_to_js x9821)
         let (get_m13 : 'tags this -> float) =
           fun (x9823 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9823) "m13")
         let (set_m13 : 'tags this -> float -> unit) =
           fun (x9825 : 'tags this) ->
             fun (x9826 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9825) "m13"
                 (Ojs.float_to_js x9826)
         let (get_m14 : 'tags this -> float) =
           fun (x9828 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9828) "m14")
         let (set_m14 : 'tags this -> float -> unit) =
           fun (x9830 : 'tags this) ->
             fun (x9831 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9830) "m14"
                 (Ojs.float_to_js x9831)
         let (get_m21 : 'tags this -> float) =
           fun (x9833 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9833) "m21")
         let (set_m21 : 'tags this -> float -> unit) =
           fun (x9835 : 'tags this) ->
             fun (x9836 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9835) "m21"
                 (Ojs.float_to_js x9836)
         let (get_m22 : 'tags this -> float) =
           fun (x9838 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9838) "m22")
         let (set_m22 : 'tags this -> float -> unit) =
           fun (x9840 : 'tags this) ->
             fun (x9841 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9840) "m22"
                 (Ojs.float_to_js x9841)
         let (get_m23 : 'tags this -> float) =
           fun (x9843 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9843) "m23")
         let (set_m23 : 'tags this -> float -> unit) =
           fun (x9845 : 'tags this) ->
             fun (x9846 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9845) "m23"
                 (Ojs.float_to_js x9846)
         let (get_m24 : 'tags this -> float) =
           fun (x9848 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9848) "m24")
         let (set_m24 : 'tags this -> float -> unit) =
           fun (x9850 : 'tags this) ->
             fun (x9851 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9850) "m24"
                 (Ojs.float_to_js x9851)
         let (get_m31 : 'tags this -> float) =
           fun (x9853 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9853) "m31")
         let (set_m31 : 'tags this -> float -> unit) =
           fun (x9855 : 'tags this) ->
             fun (x9856 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9855) "m31"
                 (Ojs.float_to_js x9856)
         let (get_m32 : 'tags this -> float) =
           fun (x9858 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9858) "m32")
         let (set_m32 : 'tags this -> float -> unit) =
           fun (x9860 : 'tags this) ->
             fun (x9861 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9860) "m32"
                 (Ojs.float_to_js x9861)
         let (get_m33 : 'tags this -> float) =
           fun (x9863 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9863) "m33")
         let (set_m33 : 'tags this -> float -> unit) =
           fun (x9865 : 'tags this) ->
             fun (x9866 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9865) "m33"
                 (Ojs.float_to_js x9866)
         let (get_m34 : 'tags this -> float) =
           fun (x9868 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9868) "m34")
         let (set_m34 : 'tags this -> float -> unit) =
           fun (x9870 : 'tags this) ->
             fun (x9871 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9870) "m34"
                 (Ojs.float_to_js x9871)
         let (get_m41 : 'tags this -> float) =
           fun (x9873 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9873) "m41")
         let (set_m41 : 'tags this -> float -> unit) =
           fun (x9875 : 'tags this) ->
             fun (x9876 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9875) "m41"
                 (Ojs.float_to_js x9876)
         let (get_m42 : 'tags this -> float) =
           fun (x9878 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9878) "m42")
         let (set_m42 : 'tags this -> float -> unit) =
           fun (x9880 : 'tags this) ->
             fun (x9881 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9880) "m42"
                 (Ojs.float_to_js x9881)
         let (get_m43 : 'tags this -> float) =
           fun (x9883 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9883) "m43")
         let (set_m43 : 'tags this -> float -> unit) =
           fun (x9885 : 'tags this) ->
             fun (x9886 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9885) "m43"
                 (Ojs.float_to_js x9886)
         let (get_m44 : 'tags this -> float) =
           fun (x9888 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x9888) "m44")
         let (set_m44 : 'tags this -> float -> unit) =
           fun (x9890 : 'tags this) ->
             fun (x9891 : float) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x9890) "m44"
                 (Ojs.float_to_js x9891)
         let (invertSelf : 'tags this -> t) =
           fun (x9893 : 'tags this) ->
             t_of_js
               (Ojs.call (this_to_js Obj.magic x9893) "invertSelf" [||])
         let (multiplySelf :
           'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
           fun (x9898 : 'tags this) ->
             fun ?other:(x9895 : DOMMatrixInit.t option) ->
               fun () ->
                 t_of_js
                   (let x9900 = this_to_js Obj.magic x9898 in
                    Ojs.call (Ojs.get_prop_ascii x9900 "multiplySelf")
                      "apply"
                      [|x9900;((let x9896 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9895 with
                                 | Some x9897 ->
                                     ignore
                                       (Ojs.call x9896 "push"
                                          [|(DOMMatrixInit.t_to_js x9897)|])
                                 | None -> ());
                                x9896))|])
         let (preMultiplySelf :
           'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
           fun (x9904 : 'tags this) ->
             fun ?other:(x9901 : DOMMatrixInit.t option) ->
               fun () ->
                 t_of_js
                   (let x9906 = this_to_js Obj.magic x9904 in
                    Ojs.call (Ojs.get_prop_ascii x9906 "preMultiplySelf")
                      "apply"
                      [|x9906;((let x9902 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9901 with
                                 | Some x9903 ->
                                     ignore
                                       (Ojs.call x9902 "push"
                                          [|(DOMMatrixInit.t_to_js x9903)|])
                                 | None -> ());
                                x9902))|])
         let (rotateAxisAngleSelf :
           'tags this ->
             ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t)
           =
           fun (x9916 : 'tags this) ->
             fun ?x:(x9907 : float option) ->
               fun ?y:(x9908 : float option) ->
                 fun ?z:(x9909 : float option) ->
                   fun ?angle:(x9910 : float option) ->
                     fun () ->
                       t_of_js
                         (let x9918 = this_to_js Obj.magic x9916 in
                          Ojs.call
                            (Ojs.get_prop_ascii x9918 "rotateAxisAngleSelf")
                            "apply"
                            [|x9918;((let x9911 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x9907 with
                                       | Some x9915 ->
                                           ignore
                                             (Ojs.call x9911 "push"
                                                [|(Ojs.float_to_js x9915)|])
                                       | None -> ());
                                      (match x9908 with
                                       | Some x9914 ->
                                           ignore
                                             (Ojs.call x9911 "push"
                                                [|(Ojs.float_to_js x9914)|])
                                       | None -> ());
                                      (match x9909 with
                                       | Some x9913 ->
                                           ignore
                                             (Ojs.call x9911 "push"
                                                [|(Ojs.float_to_js x9913)|])
                                       | None -> ());
                                      (match x9910 with
                                       | Some x9912 ->
                                           ignore
                                             (Ojs.call x9911 "push"
                                                [|(Ojs.float_to_js x9912)|])
                                       | None -> ());
                                      x9911))|])
         let (rotateFromVectorSelf :
           'tags this -> ?x:float -> ?y:float -> unit -> t) =
           fun (x9924 : 'tags this) ->
             fun ?x:(x9919 : float option) ->
               fun ?y:(x9920 : float option) ->
                 fun () ->
                   t_of_js
                     (let x9926 = this_to_js Obj.magic x9924 in
                      Ojs.call
                        (Ojs.get_prop_ascii x9926 "rotateFromVectorSelf")
                        "apply"
                        [|x9926;((let x9921 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x9919 with
                                   | Some x9923 ->
                                       ignore
                                         (Ojs.call x9921 "push"
                                            [|(Ojs.float_to_js x9923)|])
                                   | None -> ());
                                  (match x9920 with
                                   | Some x9922 ->
                                       ignore
                                         (Ojs.call x9921 "push"
                                            [|(Ojs.float_to_js x9922)|])
                                   | None -> ());
                                  x9921))|])
         let (rotateSelf :
           'tags this ->
             ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t)
           =
           fun (x9934 : 'tags this) ->
             fun ?rotX:(x9927 : float option) ->
               fun ?rotY:(x9928 : float option) ->
                 fun ?rotZ:(x9929 : float option) ->
                   fun () ->
                     t_of_js
                       (let x9936 = this_to_js Obj.magic x9934 in
                        Ojs.call (Ojs.get_prop_ascii x9936 "rotateSelf")
                          "apply"
                          [|x9936;((let x9930 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x9927 with
                                     | Some x9933 ->
                                         ignore
                                           (Ojs.call x9930 "push"
                                              [|(Ojs.float_to_js x9933)|])
                                     | None -> ());
                                    (match x9928 with
                                     | Some x9932 ->
                                         ignore
                                           (Ojs.call x9930 "push"
                                              [|(Ojs.float_to_js x9932)|])
                                     | None -> ());
                                    (match x9929 with
                                     | Some x9931 ->
                                         ignore
                                           (Ojs.call x9930 "push"
                                              [|(Ojs.float_to_js x9931)|])
                                     | None -> ());
                                    x9930))|])
         let (scale3dSelf :
           'tags this ->
             ?scale:float ->
               ?originX:float ->
                 ?originY:float -> ?originZ:float -> unit -> t)
           =
           fun (x9946 : 'tags this) ->
             fun ?scale:(x9937 : float option) ->
               fun ?originX:(x9938 : float option) ->
                 fun ?originY:(x9939 : float option) ->
                   fun ?originZ:(x9940 : float option) ->
                     fun () ->
                       t_of_js
                         (let x9948 = this_to_js Obj.magic x9946 in
                          Ojs.call (Ojs.get_prop_ascii x9948 "scale3dSelf")
                            "apply"
                            [|x9948;((let x9941 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x9937 with
                                       | Some x9945 ->
                                           ignore
                                             (Ojs.call x9941 "push"
                                                [|(Ojs.float_to_js x9945)|])
                                       | None -> ());
                                      (match x9938 with
                                       | Some x9944 ->
                                           ignore
                                             (Ojs.call x9941 "push"
                                                [|(Ojs.float_to_js x9944)|])
                                       | None -> ());
                                      (match x9939 with
                                       | Some x9943 ->
                                           ignore
                                             (Ojs.call x9941 "push"
                                                [|(Ojs.float_to_js x9943)|])
                                       | None -> ());
                                      (match x9940 with
                                       | Some x9942 ->
                                           ignore
                                             (Ojs.call x9941 "push"
                                                [|(Ojs.float_to_js x9942)|])
                                       | None -> ());
                                      x9941))|])
         let (scaleSelf :
           'tags this ->
             ?scaleX:float ->
               ?scaleY:float ->
                 ?scaleZ:float ->
                   ?originX:float ->
                     ?originY:float -> ?originZ:float -> unit -> t)
           =
           fun (x9962 : 'tags this) ->
             fun ?scaleX:(x9949 : float option) ->
               fun ?scaleY:(x9950 : float option) ->
                 fun ?scaleZ:(x9951 : float option) ->
                   fun ?originX:(x9952 : float option) ->
                     fun ?originY:(x9953 : float option) ->
                       fun ?originZ:(x9954 : float option) ->
                         fun () ->
                           t_of_js
                             (let x9964 = this_to_js Obj.magic x9962 in
                              Ojs.call (Ojs.get_prop_ascii x9964 "scaleSelf")
                                "apply"
                                [|x9964;((let x9955 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x9949 with
                                           | Some x9961 ->
                                               ignore
                                                 (Ojs.call x9955 "push"
                                                    [|(Ojs.float_to_js x9961)|])
                                           | None -> ());
                                          (match x9950 with
                                           | Some x9960 ->
                                               ignore
                                                 (Ojs.call x9955 "push"
                                                    [|(Ojs.float_to_js x9960)|])
                                           | None -> ());
                                          (match x9951 with
                                           | Some x9959 ->
                                               ignore
                                                 (Ojs.call x9955 "push"
                                                    [|(Ojs.float_to_js x9959)|])
                                           | None -> ());
                                          (match x9952 with
                                           | Some x9958 ->
                                               ignore
                                                 (Ojs.call x9955 "push"
                                                    [|(Ojs.float_to_js x9958)|])
                                           | None -> ());
                                          (match x9953 with
                                           | Some x9957 ->
                                               ignore
                                                 (Ojs.call x9955 "push"
                                                    [|(Ojs.float_to_js x9957)|])
                                           | None -> ());
                                          (match x9954 with
                                           | Some x9956 ->
                                               ignore
                                                 (Ojs.call x9955 "push"
                                                    [|(Ojs.float_to_js x9956)|])
                                           | None -> ());
                                          x9955))|])
         let (skewXSelf : 'tags this -> ?sx:float -> unit -> t) =
           fun (x9968 : 'tags this) ->
             fun ?sx:(x9965 : float option) ->
               fun () ->
                 t_of_js
                   (let x9970 = this_to_js Obj.magic x9968 in
                    Ojs.call (Ojs.get_prop_ascii x9970 "skewXSelf") "apply"
                      [|x9970;((let x9966 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9965 with
                                 | Some x9967 ->
                                     ignore
                                       (Ojs.call x9966 "push"
                                          [|(Ojs.float_to_js x9967)|])
                                 | None -> ());
                                x9966))|])
         let (skewYSelf : 'tags this -> ?sy:float -> unit -> t) =
           fun (x9974 : 'tags this) ->
             fun ?sy:(x9971 : float option) ->
               fun () ->
                 t_of_js
                   (let x9976 = this_to_js Obj.magic x9974 in
                    Ojs.call (Ojs.get_prop_ascii x9976 "skewYSelf") "apply"
                      [|x9976;((let x9972 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9971 with
                                 | Some x9973 ->
                                     ignore
                                       (Ojs.call x9972 "push"
                                          [|(Ojs.float_to_js x9973)|])
                                 | None -> ());
                                x9972))|])
         let (translateSelf :
           'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t) =
           fun (x9984 : 'tags this) ->
             fun ?tx:(x9977 : float option) ->
               fun ?ty:(x9978 : float option) ->
                 fun ?tz:(x9979 : float option) ->
                   fun () ->
                     t_of_js
                       (let x9986 = this_to_js Obj.magic x9984 in
                        Ojs.call (Ojs.get_prop_ascii x9986 "translateSelf")
                          "apply"
                          [|x9986;((let x9980 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x9977 with
                                     | Some x9983 ->
                                         ignore
                                           (Ojs.call x9980 "push"
                                              [|(Ojs.float_to_js x9983)|])
                                     | None -> ());
                                    (match x9978 with
                                     | Some x9982 ->
                                         ignore
                                           (Ojs.call x9980 "push"
                                              [|(Ojs.float_to_js x9982)|])
                                     | None -> ());
                                    (match x9979 with
                                     | Some x9981 ->
                                         ignore
                                           (Ojs.call x9980 "push"
                                              [|(Ojs.float_to_js x9981)|])
                                     | None -> ());
                                    x9980))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "DOMMatrix") "prototype")
         let (create : ?init:float list or_string -> unit -> t) =
           fun ?init:(x9987 : float list or_string option) ->
             fun () ->
               t_of_js
                 (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
                    (let x9988 =
                       Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                         [||] in
                     (match x9987 with
                      | Some x9989 ->
                          ignore
                            (Ojs.call x9988 "push"
                               [|(or_string_to_js
                                    (fun (x9990 : float list) ->
                                       Ojs.list_to_js Ojs.float_to_js x9990)
                                    x9989)|])
                      | None -> ());
                     x9988))
         let (fromFloat32Array : Float32Array.t_0 -> t) =
           fun (x9992 : Float32Array.t_0) ->
             t_of_js
               (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
                  "fromFloat32Array" [|(Float32Array.t_0_to_js x9992)|])
         let (fromFloat64Array : Float64Array.t_0 -> t) =
           fun (x9993 : Float64Array.t_0) ->
             t_of_js
               (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
                  "fromFloat64Array" [|(Float64Array.t_0_to_js x9993)|])
         let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
           fun ?other:(x9994 : DOMMatrixInit.t option) ->
             fun () ->
               t_of_js
                 (let x9997 = Ojs.get_prop_ascii Ojs.global "DOMMatrix" in
                  Ojs.call (Ojs.get_prop_ascii x9997 "fromMatrix") "apply"
                    [|x9997;((let x9995 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x9994 with
                               | Some x9996 ->
                                   ignore
                                     (Ojs.call x9995 "push"
                                        [|(DOMMatrixInit.t_to_js x9996)|])
                               | None -> ());
                              x9995))|])
       end and
            DOMMatrixReadOnly:sig
                                type t = [ `DOMMatrixReadOnly ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `DOMMatrixReadOnly ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags = [ `DOMMatrixReadOnly ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [> `DOMMatrixReadOnly ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val get_a : 'tags this -> float
                                val get_b : 'tags this -> float
                                val get_c : 'tags this -> float
                                val get_d : 'tags this -> float
                                val get_e : 'tags this -> float
                                val get_f : 'tags this -> float
                                val get_is2D : 'tags this -> bool
                                val get_isIdentity : 'tags this -> bool
                                val get_m11 : 'tags this -> float
                                val get_m12 : 'tags this -> float
                                val get_m13 : 'tags this -> float
                                val get_m14 : 'tags this -> float
                                val get_m21 : 'tags this -> float
                                val get_m22 : 'tags this -> float
                                val get_m23 : 'tags this -> float
                                val get_m24 : 'tags this -> float
                                val get_m31 : 'tags this -> float
                                val get_m32 : 'tags this -> float
                                val get_m33 : 'tags this -> float
                                val get_m34 : 'tags this -> float
                                val get_m41 : 'tags this -> float
                                val get_m42 : 'tags this -> float
                                val get_m43 : 'tags this -> float
                                val get_m44 : 'tags this -> float
                                val flipX : 'tags this -> DOMMatrix.t
                                val flipY : 'tags this -> DOMMatrix.t
                                val inverse : 'tags this -> DOMMatrix.t
                                val multiply :
                                  'tags this ->
                                    ?other:DOMMatrixInit.t ->
                                      unit -> DOMMatrix.t
                                val rotate :
                                  'tags this ->
                                    ?rotX:float ->
                                      ?rotY:float ->
                                        ?rotZ:float -> unit -> DOMMatrix.t
                                val rotateAxisAngle :
                                  'tags this ->
                                    ?x:float ->
                                      ?y:float ->
                                        ?z:float ->
                                          ?angle:float -> unit -> DOMMatrix.t
                                val rotateFromVector :
                                  'tags this ->
                                    ?x:float ->
                                      ?y:float -> unit -> DOMMatrix.t
                                val scale :
                                  'tags this ->
                                    ?scaleX:float ->
                                      ?scaleY:float ->
                                        ?scaleZ:float ->
                                          ?originX:float ->
                                            ?originY:float ->
                                              ?originZ:float ->
                                                unit -> DOMMatrix.t
                                val scale3d :
                                  'tags this ->
                                    ?scale:float ->
                                      ?originX:float ->
                                        ?originY:float ->
                                          ?originZ:float ->
                                            unit -> DOMMatrix.t
                                val scaleNonUniform :
                                  'tags this ->
                                    ?scaleX:float ->
                                      ?scaleY:float -> unit -> DOMMatrix.t
                                val skewX :
                                  'tags this ->
                                    ?sx:float -> unit -> DOMMatrix.t
                                val skewY :
                                  'tags this ->
                                    ?sy:float -> unit -> DOMMatrix.t
                                val toFloat32Array :
                                  'tags this -> Float32Array.t_0
                                val toFloat64Array :
                                  'tags this -> Float64Array.t_0
                                val toJSON : 'tags this -> any
                                val transformPoint :
                                  'tags this ->
                                    ?point:DOMPointInit.t ->
                                      unit -> DOMPoint.t
                                val translate :
                                  'tags this ->
                                    ?tx:float ->
                                      ?ty:float ->
                                        ?tz:float -> unit -> DOMMatrix.t
                                val cast_from : 'tags this -> t
                                val prototype : unit -> t
                                val create :
                                  ?init:float list or_string -> unit -> t
                                val fromFloat32Array : Float32Array.t_0 -> t
                                val fromFloat64Array : Float64Array.t_0 -> t
                                val fromMatrix :
                                  ?other:DOMMatrixInit.t -> unit -> t
                              end =
            struct
              type t = [ `DOMMatrixReadOnly ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x9999 : Ojs.t) -> t_of_js x9999
              and t_0_to_js : t_0 -> Ojs.t = fun (x9998 : t) -> t_to_js x9998
              type tags = [ `DOMMatrixReadOnly ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x10002 : Ojs.t) -> intf_of_js __tags_of_js x10002
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x10000 : __tags intf) ->
                    intf_to_js __tags_to_js x10000
              let (get_a : 'tags this -> float) =
                fun (x10004 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10004) "a")
              let (get_b : 'tags this -> float) =
                fun (x10006 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10006) "b")
              let (get_c : 'tags this -> float) =
                fun (x10008 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10008) "c")
              let (get_d : 'tags this -> float) =
                fun (x10010 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10010) "d")
              let (get_e : 'tags this -> float) =
                fun (x10012 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10012) "e")
              let (get_f : 'tags this -> float) =
                fun (x10014 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10014) "f")
              let (get_is2D : 'tags this -> bool) =
                fun (x10016 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10016) "is2D")
              let (get_isIdentity : 'tags this -> bool) =
                fun (x10018 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10018)
                       "isIdentity")
              let (get_m11 : 'tags this -> float) =
                fun (x10020 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10020) "m11")
              let (get_m12 : 'tags this -> float) =
                fun (x10022 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10022) "m12")
              let (get_m13 : 'tags this -> float) =
                fun (x10024 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10024) "m13")
              let (get_m14 : 'tags this -> float) =
                fun (x10026 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10026) "m14")
              let (get_m21 : 'tags this -> float) =
                fun (x10028 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10028) "m21")
              let (get_m22 : 'tags this -> float) =
                fun (x10030 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10030) "m22")
              let (get_m23 : 'tags this -> float) =
                fun (x10032 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10032) "m23")
              let (get_m24 : 'tags this -> float) =
                fun (x10034 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10034) "m24")
              let (get_m31 : 'tags this -> float) =
                fun (x10036 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10036) "m31")
              let (get_m32 : 'tags this -> float) =
                fun (x10038 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10038) "m32")
              let (get_m33 : 'tags this -> float) =
                fun (x10040 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10040) "m33")
              let (get_m34 : 'tags this -> float) =
                fun (x10042 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10042) "m34")
              let (get_m41 : 'tags this -> float) =
                fun (x10044 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10044) "m41")
              let (get_m42 : 'tags this -> float) =
                fun (x10046 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10046) "m42")
              let (get_m43 : 'tags this -> float) =
                fun (x10048 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10048) "m43")
              let (get_m44 : 'tags this -> float) =
                fun (x10050 : 'tags this) ->
                  Ojs.float_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x10050) "m44")
              let (flipX : 'tags this -> DOMMatrix.t) =
                fun (x10052 : 'tags this) ->
                  DOMMatrix.t_of_js
                    (Ojs.call (this_to_js Obj.magic x10052) "flipX" [||])
              let (flipY : 'tags this -> DOMMatrix.t) =
                fun (x10054 : 'tags this) ->
                  DOMMatrix.t_of_js
                    (Ojs.call (this_to_js Obj.magic x10054) "flipY" [||])
              let (inverse : 'tags this -> DOMMatrix.t) =
                fun (x10056 : 'tags this) ->
                  DOMMatrix.t_of_js
                    (Ojs.call (this_to_js Obj.magic x10056) "inverse" [||])
              let (multiply :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t)
                =
                fun (x10061 : 'tags this) ->
                  fun ?other:(x10058 : DOMMatrixInit.t option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x10063 = this_to_js Obj.magic x10061 in
                         Ojs.call (Ojs.get_prop_ascii x10063 "multiply")
                           "apply"
                           [|x10063;((let x10059 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x10058 with
                                       | Some x10060 ->
                                           ignore
                                             (Ojs.call x10059 "push"
                                                [|(DOMMatrixInit.t_to_js
                                                     x10060)|])
                                       | None -> ());
                                      x10059))|])
              let (rotate :
                'tags this ->
                  ?rotX:float ->
                    ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t)
                =
                fun (x10071 : 'tags this) ->
                  fun ?rotX:(x10064 : float option) ->
                    fun ?rotY:(x10065 : float option) ->
                      fun ?rotZ:(x10066 : float option) ->
                        fun () ->
                          DOMMatrix.t_of_js
                            (let x10073 = this_to_js Obj.magic x10071 in
                             Ojs.call (Ojs.get_prop_ascii x10073 "rotate")
                               "apply"
                               [|x10073;((let x10067 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x10064 with
                                           | Some x10070 ->
                                               ignore
                                                 (Ojs.call x10067 "push"
                                                    [|(Ojs.float_to_js x10070)|])
                                           | None -> ());
                                          (match x10065 with
                                           | Some x10069 ->
                                               ignore
                                                 (Ojs.call x10067 "push"
                                                    [|(Ojs.float_to_js x10069)|])
                                           | None -> ());
                                          (match x10066 with
                                           | Some x10068 ->
                                               ignore
                                                 (Ojs.call x10067 "push"
                                                    [|(Ojs.float_to_js x10068)|])
                                           | None -> ());
                                          x10067))|])
              let (rotateAxisAngle :
                'tags this ->
                  ?x:float ->
                    ?y:float ->
                      ?z:float -> ?angle:float -> unit -> DOMMatrix.t)
                =
                fun (x10083 : 'tags this) ->
                  fun ?x:(x10074 : float option) ->
                    fun ?y:(x10075 : float option) ->
                      fun ?z:(x10076 : float option) ->
                        fun ?angle:(x10077 : float option) ->
                          fun () ->
                            DOMMatrix.t_of_js
                              (let x10085 = this_to_js Obj.magic x10083 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x10085 "rotateAxisAngle")
                                 "apply"
                                 [|x10085;((let x10078 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x10074 with
                                             | Some x10082 ->
                                                 ignore
                                                   (Ojs.call x10078 "push"
                                                      [|(Ojs.float_to_js
                                                           x10082)|])
                                             | None -> ());
                                            (match x10075 with
                                             | Some x10081 ->
                                                 ignore
                                                   (Ojs.call x10078 "push"
                                                      [|(Ojs.float_to_js
                                                           x10081)|])
                                             | None -> ());
                                            (match x10076 with
                                             | Some x10080 ->
                                                 ignore
                                                   (Ojs.call x10078 "push"
                                                      [|(Ojs.float_to_js
                                                           x10080)|])
                                             | None -> ());
                                            (match x10077 with
                                             | Some x10079 ->
                                                 ignore
                                                   (Ojs.call x10078 "push"
                                                      [|(Ojs.float_to_js
                                                           x10079)|])
                                             | None -> ());
                                            x10078))|])
              let (rotateFromVector :
                'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t) =
                fun (x10091 : 'tags this) ->
                  fun ?x:(x10086 : float option) ->
                    fun ?y:(x10087 : float option) ->
                      fun () ->
                        DOMMatrix.t_of_js
                          (let x10093 = this_to_js Obj.magic x10091 in
                           Ojs.call
                             (Ojs.get_prop_ascii x10093 "rotateFromVector")
                             "apply"
                             [|x10093;((let x10088 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        (match x10086 with
                                         | Some x10090 ->
                                             ignore
                                               (Ojs.call x10088 "push"
                                                  [|(Ojs.float_to_js x10090)|])
                                         | None -> ());
                                        (match x10087 with
                                         | Some x10089 ->
                                             ignore
                                               (Ojs.call x10088 "push"
                                                  [|(Ojs.float_to_js x10089)|])
                                         | None -> ());
                                        x10088))|])
              let (scale :
                'tags this ->
                  ?scaleX:float ->
                    ?scaleY:float ->
                      ?scaleZ:float ->
                        ?originX:float ->
                          ?originY:float ->
                            ?originZ:float -> unit -> DOMMatrix.t)
                =
                fun (x10107 : 'tags this) ->
                  fun ?scaleX:(x10094 : float option) ->
                    fun ?scaleY:(x10095 : float option) ->
                      fun ?scaleZ:(x10096 : float option) ->
                        fun ?originX:(x10097 : float option) ->
                          fun ?originY:(x10098 : float option) ->
                            fun ?originZ:(x10099 : float option) ->
                              fun () ->
                                DOMMatrix.t_of_js
                                  (let x10109 = this_to_js Obj.magic x10107 in
                                   Ojs.call
                                     (Ojs.get_prop_ascii x10109 "scale")
                                     "apply"
                                     [|x10109;((let x10100 =
                                                  Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       Ojs.global "Array")
                                                    [||] in
                                                (match x10094 with
                                                 | Some x10106 ->
                                                     ignore
                                                       (Ojs.call x10100
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10106)|])
                                                 | None -> ());
                                                (match x10095 with
                                                 | Some x10105 ->
                                                     ignore
                                                       (Ojs.call x10100
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10105)|])
                                                 | None -> ());
                                                (match x10096 with
                                                 | Some x10104 ->
                                                     ignore
                                                       (Ojs.call x10100
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10104)|])
                                                 | None -> ());
                                                (match x10097 with
                                                 | Some x10103 ->
                                                     ignore
                                                       (Ojs.call x10100
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10103)|])
                                                 | None -> ());
                                                (match x10098 with
                                                 | Some x10102 ->
                                                     ignore
                                                       (Ojs.call x10100
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10102)|])
                                                 | None -> ());
                                                (match x10099 with
                                                 | Some x10101 ->
                                                     ignore
                                                       (Ojs.call x10100
                                                          "push"
                                                          [|(Ojs.float_to_js
                                                               x10101)|])
                                                 | None -> ());
                                                x10100))|])
              let (scale3d :
                'tags this ->
                  ?scale:float ->
                    ?originX:float ->
                      ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
                =
                fun (x10119 : 'tags this) ->
                  fun ?scale:(x10110 : float option) ->
                    fun ?originX:(x10111 : float option) ->
                      fun ?originY:(x10112 : float option) ->
                        fun ?originZ:(x10113 : float option) ->
                          fun () ->
                            DOMMatrix.t_of_js
                              (let x10121 = this_to_js Obj.magic x10119 in
                               Ojs.call (Ojs.get_prop_ascii x10121 "scale3d")
                                 "apply"
                                 [|x10121;((let x10114 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x10110 with
                                             | Some x10118 ->
                                                 ignore
                                                   (Ojs.call x10114 "push"
                                                      [|(Ojs.float_to_js
                                                           x10118)|])
                                             | None -> ());
                                            (match x10111 with
                                             | Some x10117 ->
                                                 ignore
                                                   (Ojs.call x10114 "push"
                                                      [|(Ojs.float_to_js
                                                           x10117)|])
                                             | None -> ());
                                            (match x10112 with
                                             | Some x10116 ->
                                                 ignore
                                                   (Ojs.call x10114 "push"
                                                      [|(Ojs.float_to_js
                                                           x10116)|])
                                             | None -> ());
                                            (match x10113 with
                                             | Some x10115 ->
                                                 ignore
                                                   (Ojs.call x10114 "push"
                                                      [|(Ojs.float_to_js
                                                           x10115)|])
                                             | None -> ());
                                            x10114))|])
              let (scaleNonUniform :
                'tags this ->
                  ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t)
                =
                fun (x10127 : 'tags this) ->
                  fun ?scaleX:(x10122 : float option) ->
                    fun ?scaleY:(x10123 : float option) ->
                      fun () ->
                        DOMMatrix.t_of_js
                          (let x10129 = this_to_js Obj.magic x10127 in
                           Ojs.call
                             (Ojs.get_prop_ascii x10129 "scaleNonUniform")
                             "apply"
                             [|x10129;((let x10124 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        (match x10122 with
                                         | Some x10126 ->
                                             ignore
                                               (Ojs.call x10124 "push"
                                                  [|(Ojs.float_to_js x10126)|])
                                         | None -> ());
                                        (match x10123 with
                                         | Some x10125 ->
                                             ignore
                                               (Ojs.call x10124 "push"
                                                  [|(Ojs.float_to_js x10125)|])
                                         | None -> ());
                                        x10124))|])
              let (skewX : 'tags this -> ?sx:float -> unit -> DOMMatrix.t) =
                fun (x10133 : 'tags this) ->
                  fun ?sx:(x10130 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x10135 = this_to_js Obj.magic x10133 in
                         Ojs.call (Ojs.get_prop_ascii x10135 "skewX") "apply"
                           [|x10135;((let x10131 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x10130 with
                                       | Some x10132 ->
                                           ignore
                                             (Ojs.call x10131 "push"
                                                [|(Ojs.float_to_js x10132)|])
                                       | None -> ());
                                      x10131))|])
              let (skewY : 'tags this -> ?sy:float -> unit -> DOMMatrix.t) =
                fun (x10139 : 'tags this) ->
                  fun ?sy:(x10136 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x10141 = this_to_js Obj.magic x10139 in
                         Ojs.call (Ojs.get_prop_ascii x10141 "skewY") "apply"
                           [|x10141;((let x10137 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x10136 with
                                       | Some x10138 ->
                                           ignore
                                             (Ojs.call x10137 "push"
                                                [|(Ojs.float_to_js x10138)|])
                                       | None -> ());
                                      x10137))|])
              let (toFloat32Array : 'tags this -> Float32Array.t_0) =
                fun (x10142 : 'tags this) ->
                  Float32Array.t_0_of_js
                    (Ojs.call (this_to_js Obj.magic x10142) "toFloat32Array"
                       [||])
              let (toFloat64Array : 'tags this -> Float64Array.t_0) =
                fun (x10144 : 'tags this) ->
                  Float64Array.t_0_of_js
                    (Ojs.call (this_to_js Obj.magic x10144) "toFloat64Array"
                       [||])
              let (toJSON : 'tags this -> any) =
                fun (x10146 : 'tags this) ->
                  any_of_js
                    (Ojs.call (this_to_js Obj.magic x10146) "toJSON" [||])
              let (transformPoint :
                'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t) =
                fun (x10151 : 'tags this) ->
                  fun ?point:(x10148 : DOMPointInit.t option) ->
                    fun () ->
                      DOMPoint.t_of_js
                        (let x10153 = this_to_js Obj.magic x10151 in
                         Ojs.call
                           (Ojs.get_prop_ascii x10153 "transformPoint")
                           "apply"
                           [|x10153;((let x10149 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x10148 with
                                       | Some x10150 ->
                                           ignore
                                             (Ojs.call x10149 "push"
                                                [|(DOMPointInit.t_to_js
                                                     x10150)|])
                                       | None -> ());
                                      x10149))|])
              let (translate :
                'tags this ->
                  ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t)
                =
                fun (x10161 : 'tags this) ->
                  fun ?tx:(x10154 : float option) ->
                    fun ?ty:(x10155 : float option) ->
                      fun ?tz:(x10156 : float option) ->
                        fun () ->
                          DOMMatrix.t_of_js
                            (let x10163 = this_to_js Obj.magic x10161 in
                             Ojs.call (Ojs.get_prop_ascii x10163 "translate")
                               "apply"
                               [|x10163;((let x10157 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x10154 with
                                           | Some x10160 ->
                                               ignore
                                                 (Ojs.call x10157 "push"
                                                    [|(Ojs.float_to_js x10160)|])
                                           | None -> ());
                                          (match x10155 with
                                           | Some x10159 ->
                                               ignore
                                                 (Ojs.call x10157 "push"
                                                    [|(Ojs.float_to_js x10159)|])
                                           | None -> ());
                                          (match x10156 with
                                           | Some x10158 ->
                                               ignore
                                                 (Ojs.call x10157 "push"
                                                    [|(Ojs.float_to_js x10158)|])
                                           | None -> ());
                                          x10157))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
                       "prototype")
              let (create : ?init:float list or_string -> unit -> t) =
                fun ?init:(x10164 : float list or_string option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
                         (let x10165 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x10164 with
                           | Some x10166 ->
                               ignore
                                 (Ojs.call x10165 "push"
                                    [|(or_string_to_js
                                         (fun (x10167 : float list) ->
                                            Ojs.list_to_js Ojs.float_to_js
                                              x10167) x10166)|])
                           | None -> ());
                          x10165))
              let (fromFloat32Array : Float32Array.t_0 -> t) =
                fun (x10169 : Float32Array.t_0) ->
                  t_of_js
                    (Ojs.call
                       (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
                       "fromFloat32Array" [|(Float32Array.t_0_to_js x10169)|])
              let (fromFloat64Array : Float64Array.t_0 -> t) =
                fun (x10170 : Float64Array.t_0) ->
                  t_of_js
                    (Ojs.call
                       (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
                       "fromFloat64Array" [|(Float64Array.t_0_to_js x10170)|])
              let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
                fun ?other:(x10171 : DOMMatrixInit.t option) ->
                  fun () ->
                    t_of_js
                      (let x10174 =
                         Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly" in
                       Ojs.call (Ojs.get_prop_ascii x10174 "fromMatrix")
                         "apply"
                         [|x10174;((let x10172 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x10171 with
                                     | Some x10173 ->
                                         ignore
                                           (Ojs.call x10172 "push"
                                              [|(DOMMatrixInit.t_to_js x10173)|])
                                     | None -> ());
                                    x10172))|])
            end
module CustomEventInit =
  struct
    type 'T t = [ `CustomEventInit of 'T  | `EventInit ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x10177 : Ojs.t) -> t_of_js __T_of_js x10177
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x10175 : __T t) -> t_to_js __T_to_js x10175
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10181 : Ojs.t) -> t_of_js any_of_js x10181
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10179 : any t) -> t_to_js any_to_js x10179
    type 'T tags = [ `CustomEventInit of 'T  | `EventInit ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x10185 : Ojs.t) -> intf_of_js __tags_of_js x10185
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x10183 : __tags intf) -> intf_to_js __tags_to_js x10183
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x10187 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x10187)
             "detail")
    let (set_detail : ('tags, 'T) this -> 'T -> unit) =
      fun (x10190 : ('tags, 'T) this) ->
        fun (x10191 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x10190) "detail"
            (Obj.magic x10191)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface16:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> CustomEvent.t_0
                         val set_prototype : t -> CustomEvent.t_0 -> unit
                         val create :
                           t ->
                             type_:string ->
                               ?eventInitDict:'T CustomEventInit.t ->
                                 unit -> 'T CustomEvent.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10195 : Ojs.t) -> x10195
    and t_to_js : t -> Ojs.t = fun (x10194 : Ojs.t) -> x10194
    let (get_prototype : t -> CustomEvent.t_0) =
      fun (x10196 : t) ->
        CustomEvent.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x10196) "prototype")
    let (set_prototype : t -> CustomEvent.t_0 -> unit) =
      fun (x10197 : t) ->
        fun (x10198 : CustomEvent.t_0) ->
          Ojs.set_prop_ascii (t_to_js x10197) "prototype"
            (CustomEvent.t_0_to_js x10198)
    let (create :
      t ->
        type_:string ->
          ?eventInitDict:'T CustomEventInit.t -> unit -> 'T CustomEvent.t)
      =
      fun (x10204 : t) ->
        fun ~type_:(x10199 : string) ->
          fun ?eventInitDict:(x10200 : 'T CustomEventInit.t option) ->
            fun () ->
              CustomEvent.t_of_js Obj.magic
                (Ojs.new_obj_arr (t_to_js x10204)
                   (let x10201 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x10201 "push" [|(Ojs.string_to_js x10199)|]);
                    (match x10200 with
                     | Some x10202 ->
                         ignore
                           (Ojs.call x10201 "push"
                              [|(CustomEventInit.t_to_js Obj.magic x10202)|])
                     | None -> ());
                    x10201))
  end
 and
  CustomEvent:sig
                type 'T t = [ `CustomEvent of 'T  | `Event ] intf
                type 'T t_1 = 'T t
                type t_0 = any t
                [@@@js.stop ]
                type 'T tags = [ `CustomEvent of 'T  | `Event ]
                type 'T tags_1 = 'T tags
                type tags_0 = any tags
                [@@@js.start ]
                [@@@js.implem
                  type 'T tags = [ `CustomEvent of 'T  | `Event ]
                  type 'T tags_1 = 'T tags
                  type tags_0 = any tags]
                type ('tags, 'T) this =
                  'tags intf constraint 'tags = [> `CustomEvent of 'T ]
                val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_detail : ('tags, 'T) this -> 'T
                val initCustomEvent :
                  ('tags, 'T) this ->
                    type_:string ->
                      ?bubbles:bool ->
                        ?cancelable:bool -> ?detail:'T -> unit -> unit
                val cast_from : ('tags, 'T) this -> 'T t
                val prototype : unit -> t_0
                val create :
                  type_:string ->
                    ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t
              end =
  struct
    type 'T t = [ `CustomEvent of 'T  | `Event ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x10208 : Ojs.t) -> t_of_js __T_of_js x10208
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x10206 : __T t) -> t_to_js __T_to_js x10206
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10212 : Ojs.t) -> t_of_js any_of_js x10212
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10210 : any t) -> t_to_js any_to_js x10210
    type 'T tags = [ `CustomEvent of 'T  | `Event ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x10216 : Ojs.t) -> intf_of_js __tags_of_js x10216
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x10214 : __tags intf) -> intf_to_js __tags_to_js x10214
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x10218 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x10218)
             "detail")
    let (initCustomEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit)
      =
      fun (x10229 : ('tags, 'T) this) ->
        fun ~type_:(x10221 : string) ->
          fun ?bubbles:(x10222 : bool option) ->
            fun ?cancelable:(x10223 : bool option) ->
              fun ?detail:(x10224 : 'T option) ->
                fun () ->
                  ignore
                    (let x10232 = this_to_js Obj.magic Obj.magic x10229 in
                     Ojs.call (Ojs.get_prop_ascii x10232 "initCustomEvent")
                       "apply"
                       [|x10232;((let x10225 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10225 "push"
                                       [|(Ojs.string_to_js x10221)|]);
                                  (match x10222 with
                                   | Some x10228 ->
                                       ignore
                                         (Ojs.call x10225 "push"
                                            [|(Ojs.bool_to_js x10228)|])
                                   | None -> ());
                                  (match x10223 with
                                   | Some x10227 ->
                                       ignore
                                         (Ojs.call x10225 "push"
                                            [|(Ojs.bool_to_js x10227)|])
                                   | None -> ());
                                  (match x10224 with
                                   | Some x10226 ->
                                       ignore
                                         (Ojs.call x10225 "push"
                                            [|(Obj.magic x10226)|])
                                   | None -> ());
                                  x10225))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CustomEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t) =
      fun ~type_:(x10233 : string) ->
        fun ?eventInitDict:(x10234 : 'T CustomEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CustomEvent")
                 (let x10235 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x10235 "push" [|(Ojs.string_to_js x10233)|]);
                  (match x10234 with
                   | Some x10236 ->
                       ignore
                         (Ojs.call x10235 "push"
                            [|(CustomEventInit.t_to_js Obj.magic x10236)|])
                   | None -> ());
                  x10235))
  end
module WorkerOptions =
  struct
    type t = [ `WorkerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10240 : Ojs.t) -> t_of_js x10240
    and t_0_to_js : t_0 -> Ojs.t = fun (x10239 : t) -> t_to_js x10239
    type tags = [ `WorkerOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10243 : Ojs.t) -> intf_of_js __tags_of_js x10243
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10241 : __tags intf) -> intf_to_js __tags_to_js x10241
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x10245 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10245) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x10247 : 'tags this) ->
        fun (x10248 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10247) "credentials"
            (RequestCredentials.t_to_js x10248)
    let (get_name : 'tags this -> string) =
      fun (x10250 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10250) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x10252 : 'tags this) ->
        fun (x10253 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10252) "name"
            (Ojs.string_to_js x10253)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x10255 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10255) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x10257 : 'tags this) ->
        fun (x10258 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10257) "type"
            (WorkerType.t_to_js x10258)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface130:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> Worker.t
                          val set_prototype : t -> Worker.t -> unit
                          val create :
                            t ->
                              scriptURL:URL.t or_string ->
                                ?options:WorkerOptions.t -> unit -> Worker.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10261 : Ojs.t) -> x10261
    and t_to_js : t -> Ojs.t = fun (x10260 : Ojs.t) -> x10260
    let (get_prototype : t -> Worker.t) =
      fun (x10262 : t) ->
        Worker.t_of_js (Ojs.get_prop_ascii (t_to_js x10262) "prototype")
    let (set_prototype : t -> Worker.t -> unit) =
      fun (x10263 : t) ->
        fun (x10264 : Worker.t) ->
          Ojs.set_prop_ascii (t_to_js x10263) "prototype"
            (Worker.t_to_js x10264)
    let (create :
      t ->
        scriptURL:URL.t or_string ->
          ?options:WorkerOptions.t -> unit -> Worker.t)
      =
      fun (x10270 : t) ->
        fun ~scriptURL:(x10265 : URL.t or_string) ->
          fun ?options:(x10266 : WorkerOptions.t option) ->
            fun () ->
              Worker.t_of_js
                (Ojs.new_obj_arr (t_to_js x10270)
                   (let x10267 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x10267 "push"
                         [|(or_string_to_js URL.t_to_js x10265)|]);
                    (match x10266 with
                     | Some x10268 ->
                         ignore
                           (Ojs.call x10267 "push"
                              [|(WorkerOptions.t_to_js x10268)|])
                     | None -> ());
                    x10267))
  end
 and
  Worker:sig
           type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
           type t_0 = t
           [@@@js.stop ]
           type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
           type tags_0 = tags
           [@@@js.start ]
           [@@@js.implem
             type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
             type tags_0 = tags]
           type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
           val t_to_js : t -> Ojs.t
           val t_of_js : Ojs.t -> t
           val t_0_to_js : t_0 -> Ojs.t
           val t_0_of_js : Ojs.t -> t_0
           val get_onmessage :
             'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null
           val set_onmessage :
             'tags this ->
               (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit
           val get_onmessageerror :
             'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null
           val set_onmessageerror :
             'tags this ->
               (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit
           val postMessage :
             'tags this ->
               message:any -> transfer:Transferable.t list -> unit
           val postMessage' :
             'tags this ->
               message:any -> ?options:PostMessageOptions.t -> unit -> unit
           val terminate : 'tags this -> unit
           val addEventListener :
             'tags this ->
               type_:'K ->
                 listener:(this:t -> ev:any -> any) ->
                   ?options:AddEventListenerOptions.t or_boolean ->
                     unit -> unit
           val addEventListener' :
             'tags this ->
               type_:string ->
                 listener:EventListenerOrEventListenerObject.t ->
                   ?options:AddEventListenerOptions.t or_boolean ->
                     unit -> unit
           val removeEventListener :
             'tags this ->
               type_:'K ->
                 listener:(this:t -> ev:any -> any) ->
                   ?options:EventListenerOptions.t or_boolean -> unit -> unit
           val removeEventListener' :
             'tags this ->
               type_:string ->
                 listener:EventListenerOrEventListenerObject.t ->
                   ?options:EventListenerOptions.t or_boolean -> unit -> unit
           val cast_from : 'tags this -> t
           val prototype : unit -> t
           val create :
             scriptURL:URL.t or_string ->
               ?options:WorkerOptions.t -> unit -> t
         end =
  struct
    type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10272 : Ojs.t) -> t_of_js x10272
    and t_0_to_js : t_0 -> Ojs.t = fun (x10271 : t) -> t_to_js x10271
    type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10275 : Ojs.t) -> intf_of_js __tags_of_js x10275
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10273 : __tags intf) -> intf_to_js __tags_to_js x10273
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x10277 : 'tags this) ->
        or_null_of_js
          (fun (x10279 : Ojs.t) ->
             fun ~this:(x10280 : t) ->
               fun ~ev:(x10281 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x10279
                      [|(t_to_js x10280);(MessageEvent.t_0_to_js x10281)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10277) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x10282 : 'tags this) ->
        fun (x10283 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10282) "onmessage"
            (or_null_to_js
               (fun (x10284 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10285 : Ojs.t) ->
                       fun (x10286 : Ojs.t) ->
                         any_to_js
                           (x10284 ~this:(t_of_js x10285)
                              ~ev:(MessageEvent.t_0_of_js x10286)))) x10283)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x10288 : 'tags this) ->
        or_null_of_js
          (fun (x10290 : Ojs.t) ->
             fun ~this:(x10291 : t) ->
               fun ~ev:(x10292 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x10290
                      [|(t_to_js x10291);(MessageEvent.t_0_to_js x10292)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10288) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x10293 : 'tags this) ->
        fun (x10294 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10293) "onmessageerror"
            (or_null_to_js
               (fun (x10295 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10296 : Ojs.t) ->
                       fun (x10297 : Ojs.t) ->
                         any_to_js
                           (x10295 ~this:(t_of_js x10296)
                              ~ev:(MessageEvent.t_0_of_js x10297)))) x10294)
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x10302 : 'tags this) ->
        fun ~message:(x10299 : any) ->
          fun ~transfer:(x10300 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10302) "postMessage"
                 [|(any_to_js x10299);(Ojs.list_to_js Transferable.t_to_js
                                         x10300)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:PostMessageOptions.t -> unit -> unit)
      =
      fun (x10308 : 'tags this) ->
        fun ~message:(x10304 : any) ->
          fun ?options:(x10305 : PostMessageOptions.t option) ->
            fun () ->
              ignore
                (let x10310 = this_to_js Obj.magic x10308 in
                 Ojs.call (Ojs.get_prop_ascii x10310 "postMessage") "apply"
                   [|x10310;((let x10306 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x10306 "push"
                                   [|(any_to_js x10304)|]);
                              (match x10305 with
                               | Some x10307 ->
                                   ignore
                                     (Ojs.call x10306 "push"
                                        [|(PostMessageOptions.t_to_js x10307)|])
                               | None -> ());
                              x10306))|])
    let (terminate : 'tags this -> unit) =
      fun (x10311 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x10311) "terminate" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10321 : 'tags this) ->
        fun ~type_:(x10313 : 'K) ->
          fun ~listener:(x10314 : this:t -> ev:any -> any) ->
            fun
              ?options:(x10315 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10323 = this_to_js Obj.magic x10321 in
                   Ojs.call (Ojs.get_prop_ascii x10323 "addEventListener")
                     "apply"
                     [|x10323;((let x10316 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10316 "push"
                                     [|(Obj.magic x10313)|]);
                                ignore
                                  (Ojs.call x10316 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10319 : Ojs.t) ->
                                             fun (x10320 : Ojs.t) ->
                                               any_to_js
                                                 (x10314
                                                    ~this:(t_of_js x10319)
                                                    ~ev:(any_of_js x10320))))|]);
                                (match x10315 with
                                 | Some x10317 ->
                                     ignore
                                       (Ojs.call x10316 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10317)|])
                                 | None -> ());
                                x10316))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10330 : 'tags this) ->
        fun ~type_:(x10324 : string) ->
          fun ~listener:(x10325 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x10326 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10332 = this_to_js Obj.magic x10330 in
                   Ojs.call (Ojs.get_prop_ascii x10332 "addEventListener")
                     "apply"
                     [|x10332;((let x10327 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10327 "push"
                                     [|(Ojs.string_to_js x10324)|]);
                                ignore
                                  (Ojs.call x10327 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10325)|]);
                                (match x10326 with
                                 | Some x10328 ->
                                     ignore
                                       (Ojs.call x10327 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10328)|])
                                 | None -> ());
                                x10327))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10341 : 'tags this) ->
        fun ~type_:(x10333 : 'K) ->
          fun ~listener:(x10334 : this:t -> ev:any -> any) ->
            fun ?options:(x10335 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10343 = this_to_js Obj.magic x10341 in
                   Ojs.call (Ojs.get_prop_ascii x10343 "removeEventListener")
                     "apply"
                     [|x10343;((let x10336 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10336 "push"
                                     [|(Obj.magic x10333)|]);
                                ignore
                                  (Ojs.call x10336 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10339 : Ojs.t) ->
                                             fun (x10340 : Ojs.t) ->
                                               any_to_js
                                                 (x10334
                                                    ~this:(t_of_js x10339)
                                                    ~ev:(any_of_js x10340))))|]);
                                (match x10335 with
                                 | Some x10337 ->
                                     ignore
                                       (Ojs.call x10336 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10337)|])
                                 | None -> ());
                                x10336))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10350 : 'tags this) ->
        fun ~type_:(x10344 : string) ->
          fun ~listener:(x10345 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x10346 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10352 = this_to_js Obj.magic x10350 in
                   Ojs.call (Ojs.get_prop_ascii x10352 "removeEventListener")
                     "apply"
                     [|x10352;((let x10347 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10347 "push"
                                     [|(Ojs.string_to_js x10344)|]);
                                ignore
                                  (Ojs.call x10347 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10345)|]);
                                (match x10346 with
                                 | Some x10348 ->
                                     ignore
                                       (Ojs.call x10347 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10348)|])
                                 | None -> ());
                                x10347))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Worker")
             "prototype")
    let (create :
      scriptURL:URL.t or_string -> ?options:WorkerOptions.t -> unit -> t) =
      fun ~scriptURL:(x10353 : URL.t or_string) ->
        fun ?options:(x10354 : WorkerOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Worker")
                 (let x10355 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x10355 "push"
                       [|(or_string_to_js URL.t_to_js x10353)|]);
                  (match x10354 with
                   | Some x10356 ->
                       ignore
                         (Ojs.call x10355 "push"
                            [|(WorkerOptions.t_to_js x10356)|])
                   | None -> ());
                  x10355))
  end
module rec
  AnonymousInterface13:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> CountQueuingStrategy.t
                         val set_prototype :
                           t -> CountQueuingStrategy.t -> unit
                         val create :
                           t ->
                             init:QueuingStrategyInit.t ->
                               CountQueuingStrategy.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10359 : Ojs.t) -> x10359
    and t_to_js : t -> Ojs.t = fun (x10358 : Ojs.t) -> x10358
    let (get_prototype : t -> CountQueuingStrategy.t) =
      fun (x10360 : t) ->
        CountQueuingStrategy.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10360) "prototype")
    let (set_prototype : t -> CountQueuingStrategy.t -> unit) =
      fun (x10361 : t) ->
        fun (x10362 : CountQueuingStrategy.t) ->
          Ojs.set_prop_ascii (t_to_js x10361) "prototype"
            (CountQueuingStrategy.t_to_js x10362)
    let (create : t -> init:QueuingStrategyInit.t -> CountQueuingStrategy.t)
      =
      fun (x10364 : t) ->
        fun ~init:(x10363 : QueuingStrategyInit.t) ->
          CountQueuingStrategy.t_of_js
            (Ojs.new_obj (t_to_js x10364)
               [|(QueuingStrategyInit.t_to_js x10363)|])
  end
 and
  CountQueuingStrategy:sig
                         type t =
                           [ `CountQueuingStrategy 
                           | `QueuingStrategy of any ] intf
                         type t_0 = t
                         [@@@js.stop ]
                         type tags =
                           [ `CountQueuingStrategy 
                           | `QueuingStrategy of any ]
                         type tags_0 = tags
                         [@@@js.start ]
                         [@@@js.implem
                           type tags =
                             [ `CountQueuingStrategy 
                             | `QueuingStrategy of any ]
                           type tags_0 = tags]
                         type 'tags this =
                           'tags intf constraint 'tags =
                                       [> `CountQueuingStrategy ]
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val t_0_to_js : t_0 -> Ojs.t
                         val t_0_of_js : Ojs.t -> t_0
                         val get_highWaterMark : 'tags this -> float
                         val get_size : 'tags this -> QueuingStrategySize.t_0
                         val cast_from : 'tags this -> t
                         val prototype : unit -> t
                         val create : QueuingStrategyInit.t -> t
                       end =
  struct
    type t = [ `CountQueuingStrategy  | `QueuingStrategy of any ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10366 : Ojs.t) -> t_of_js x10366
    and t_0_to_js : t_0 -> Ojs.t = fun (x10365 : t) -> t_to_js x10365
    type tags = [ `CountQueuingStrategy  | `QueuingStrategy of any ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `CountQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10369 : Ojs.t) -> intf_of_js __tags_of_js x10369
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10367 : __tags intf) -> intf_to_js __tags_to_js x10367
    let (get_highWaterMark : 'tags this -> float) =
      fun (x10371 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10371) "highWaterMark")
    let (get_size : 'tags this -> QueuingStrategySize.t_0) =
      fun (x10373 : 'tags this) ->
        QueuingStrategySize.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10373) "size")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             "prototype")
    let (create : QueuingStrategyInit.t -> t) =
      fun (x10375 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x10375)|])
  end
module BinaryType =
  struct
    type t = [ `L_s37_arraybuffer  | `L_s44_blob ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10377 : Ojs.t) ->
        let x10378 = x10377 in
        match Ojs.string_of_js x10378 with
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x10376 : [ `L_s37_arraybuffer  | `L_s44_blob ]) ->
        match x10376 with
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10380 : Ojs.t) -> t_of_js x10380
    and t_0_to_js : t_0 -> Ojs.t = fun (x10379 : t) -> t_to_js x10379
  end
module rec
  AnonymousInterface128:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebSocket.t
                          val set_prototype : t -> WebSocket.t -> unit
                          val create :
                            t ->
                              url:URL.t or_string ->
                                ?protocols:string list or_string ->
                                  unit -> WebSocket.t
                          val get_CLOSED : t -> float
                          val get_CLOSING : t -> float
                          val get_CONNECTING : t -> float
                          val get_OPEN : t -> float
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10382 : Ojs.t) -> x10382
    and t_to_js : t -> Ojs.t = fun (x10381 : Ojs.t) -> x10381
    let (get_prototype : t -> WebSocket.t) =
      fun (x10383 : t) ->
        WebSocket.t_of_js (Ojs.get_prop_ascii (t_to_js x10383) "prototype")
    let (set_prototype : t -> WebSocket.t -> unit) =
      fun (x10384 : t) ->
        fun (x10385 : WebSocket.t) ->
          Ojs.set_prop_ascii (t_to_js x10384) "prototype"
            (WebSocket.t_to_js x10385)
    let (create :
      t ->
        url:URL.t or_string ->
          ?protocols:string list or_string -> unit -> WebSocket.t)
      =
      fun (x10393 : t) ->
        fun ~url:(x10386 : URL.t or_string) ->
          fun ?protocols:(x10387 : string list or_string option) ->
            fun () ->
              WebSocket.t_of_js
                (Ojs.new_obj_arr (t_to_js x10393)
                   (let x10388 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x10388 "push"
                         [|(or_string_to_js URL.t_to_js x10386)|]);
                    (match x10387 with
                     | Some x10389 ->
                         ignore
                           (Ojs.call x10388 "push"
                              [|(or_string_to_js
                                   (fun (x10390 : string list) ->
                                      Ojs.list_to_js Ojs.string_to_js x10390)
                                   x10389)|])
                     | None -> ());
                    x10388))
    let (get_CLOSED : t -> float) =
      fun (x10394 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x10394) "CLOSED")
    let (get_CLOSING : t -> float) =
      fun (x10395 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x10395) "CLOSING")
    let (get_CONNECTING : t -> float) =
      fun (x10396 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x10396) "CONNECTING")
    let (get_OPEN : t -> float) =
      fun (x10397 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x10397) "OPEN")
  end
 and
  WebSocket:sig
              type t = [ `EventTarget  | `WebSocket ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `EventTarget  | `WebSocket ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `EventTarget  | `WebSocket ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_binaryType : 'tags this -> BinaryType.t
              val set_binaryType : 'tags this -> BinaryType.t -> unit
              val get_bufferedAmount : 'tags this -> float
              val get_extensions : 'tags this -> string
              val get_onclose :
                'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null
              val set_onclose :
                'tags this ->
                  (this:t -> ev:CloseEvent.t -> any) or_null -> unit
              val get_onerror :
                'tags this -> (this:t -> ev:Event.t -> any) or_null
              val set_onerror :
                'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
              val get_onmessage :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null
              val set_onmessage :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit
              val get_onopen :
                'tags this -> (this:t -> ev:Event.t -> any) or_null
              val set_onopen :
                'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
              val get_protocol : 'tags this -> string
              val get_readyState : 'tags this -> float
              val get_url : 'tags this -> string
              val close :
                'tags this -> ?code:float -> ?reason:string -> unit -> unit
              val send :
                'tags this ->
                  data:(ArrayBufferLike.t_0, ArrayBufferView.t_0, Blob.t)
                    union3 or_string -> unit
              val get_CLOSED : 'tags this -> float
              val get_CLOSING : 'tags this -> float
              val get_CONNECTING : 'tags this -> float
              val get_OPEN : 'tags this -> float
              val addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit
              val addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit
              val removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit
              val removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create :
                url:URL.t or_string ->
                  ?protocols:string list or_string -> unit -> t
              val closed : unit -> float
              val closing : unit -> float
              val connecting : unit -> float
              val open_ : unit -> float
            end =
  struct
    type t = [ `EventTarget  | `WebSocket ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10399 : Ojs.t) -> t_of_js x10399
    and t_0_to_js : t_0 -> Ojs.t = fun (x10398 : t) -> t_to_js x10398
    type tags = [ `EventTarget  | `WebSocket ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10402 : Ojs.t) -> intf_of_js __tags_of_js x10402
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10400 : __tags intf) -> intf_to_js __tags_to_js x10400
    let (get_binaryType : 'tags this -> BinaryType.t) =
      fun (x10404 : 'tags this) ->
        BinaryType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10404) "binaryType")
    let (set_binaryType : 'tags this -> BinaryType.t -> unit) =
      fun (x10406 : 'tags this) ->
        fun (x10407 : BinaryType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10406) "binaryType"
            (BinaryType.t_to_js x10407)
    let (get_bufferedAmount : 'tags this -> float) =
      fun (x10409 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10409) "bufferedAmount")
    let (get_extensions : 'tags this -> string) =
      fun (x10411 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10411) "extensions")
    let (get_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null) =
      fun (x10413 : 'tags this) ->
        or_null_of_js
          (fun (x10415 : Ojs.t) ->
             fun ~this:(x10416 : t) ->
               fun ~ev:(x10417 : CloseEvent.t) ->
                 any_of_js
                   (Ojs.apply x10415
                      [|(t_to_js x10416);(CloseEvent.t_to_js x10417)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10413) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null -> unit) =
      fun (x10418 : 'tags this) ->
        fun (x10419 : (this:t -> ev:CloseEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10418) "onclose"
            (or_null_to_js
               (fun (x10420 : this:t -> ev:CloseEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10421 : Ojs.t) ->
                       fun (x10422 : Ojs.t) ->
                         any_to_js
                           (x10420 ~this:(t_of_js x10421)
                              ~ev:(CloseEvent.t_of_js x10422)))) x10419)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x10424 : 'tags this) ->
        or_null_of_js
          (fun (x10426 : Ojs.t) ->
             fun ~this:(x10427 : t) ->
               fun ~ev:(x10428 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10426
                      [|(t_to_js x10427);(Event.t_to_js x10428)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10424) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x10429 : 'tags this) ->
        fun (x10430 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10429) "onerror"
            (or_null_to_js
               (fun (x10431 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10432 : Ojs.t) ->
                       fun (x10433 : Ojs.t) ->
                         any_to_js
                           (x10431 ~this:(t_of_js x10432)
                              ~ev:(Event.t_of_js x10433)))) x10430)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x10435 : 'tags this) ->
        or_null_of_js
          (fun (x10437 : Ojs.t) ->
             fun ~this:(x10438 : t) ->
               fun ~ev:(x10439 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x10437
                      [|(t_to_js x10438);(MessageEvent.t_0_to_js x10439)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10435) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x10440 : 'tags this) ->
        fun (x10441 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10440) "onmessage"
            (or_null_to_js
               (fun (x10442 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10443 : Ojs.t) ->
                       fun (x10444 : Ojs.t) ->
                         any_to_js
                           (x10442 ~this:(t_of_js x10443)
                              ~ev:(MessageEvent.t_0_of_js x10444)))) x10441)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x10446 : 'tags this) ->
        or_null_of_js
          (fun (x10448 : Ojs.t) ->
             fun ~this:(x10449 : t) ->
               fun ~ev:(x10450 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10448
                      [|(t_to_js x10449);(Event.t_to_js x10450)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10446) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x10451 : 'tags this) ->
        fun (x10452 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10451) "onopen"
            (or_null_to_js
               (fun (x10453 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10454 : Ojs.t) ->
                       fun (x10455 : Ojs.t) ->
                         any_to_js
                           (x10453 ~this:(t_of_js x10454)
                              ~ev:(Event.t_of_js x10455)))) x10452)
    let (get_protocol : 'tags this -> string) =
      fun (x10457 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10457) "protocol")
    let (get_readyState : 'tags this -> float) =
      fun (x10459 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10459) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x10461 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10461) "url")
    let (close : 'tags this -> ?code:float -> ?reason:string -> unit -> unit)
      =
      fun (x10468 : 'tags this) ->
        fun ?code:(x10463 : float option) ->
          fun ?reason:(x10464 : string option) ->
            fun () ->
              ignore
                (let x10470 = this_to_js Obj.magic x10468 in
                 Ojs.call (Ojs.get_prop_ascii x10470 "close") "apply"
                   [|x10470;((let x10465 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x10463 with
                               | Some x10467 ->
                                   ignore
                                     (Ojs.call x10465 "push"
                                        [|(Ojs.float_to_js x10467)|])
                               | None -> ());
                              (match x10464 with
                               | Some x10466 ->
                                   ignore
                                     (Ojs.call x10465 "push"
                                        [|(Ojs.string_to_js x10466)|])
                               | None -> ());
                              x10465))|])
    let (send :
      'tags this ->
        data:(ArrayBufferLike.t_0, ArrayBufferView.t_0, Blob.t) union3
          or_string -> unit)
      =
      fun (x10476 : 'tags this) ->
        fun
          ~data:(x10471 :
                  (ArrayBufferLike.t_0, ArrayBufferView.t_0, Blob.t) union3
                    or_string)
          ->
          ignore
            (Ojs.call (this_to_js Obj.magic x10476) "send"
               [|(or_string_to_js
                    (fun
                       (x10472 :
                         (ArrayBufferLike.t_0, ArrayBufferView.t_0, Blob.t)
                           union3)
                       ->
                       union3_to_js ArrayBufferLike.t_0_to_js
                         ArrayBufferView.t_0_to_js Blob.t_to_js x10472)
                    x10471)|])
    let (get_CLOSED : 'tags this -> float) =
      fun (x10478 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10478) "CLOSED")
    let (get_CLOSING : 'tags this -> float) =
      fun (x10480 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10480) "CLOSING")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x10482 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10482) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x10484 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10484) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10494 : 'tags this) ->
        fun ~type_:(x10486 : 'K) ->
          fun ~listener:(x10487 : this:t -> ev:any -> any) ->
            fun
              ?options:(x10488 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10496 = this_to_js Obj.magic x10494 in
                   Ojs.call (Ojs.get_prop_ascii x10496 "addEventListener")
                     "apply"
                     [|x10496;((let x10489 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10489 "push"
                                     [|(Obj.magic x10486)|]);
                                ignore
                                  (Ojs.call x10489 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10492 : Ojs.t) ->
                                             fun (x10493 : Ojs.t) ->
                                               any_to_js
                                                 (x10487
                                                    ~this:(t_of_js x10492)
                                                    ~ev:(any_of_js x10493))))|]);
                                (match x10488 with
                                 | Some x10490 ->
                                     ignore
                                       (Ojs.call x10489 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10490)|])
                                 | None -> ());
                                x10489))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10503 : 'tags this) ->
        fun ~type_:(x10497 : string) ->
          fun ~listener:(x10498 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x10499 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10505 = this_to_js Obj.magic x10503 in
                   Ojs.call (Ojs.get_prop_ascii x10505 "addEventListener")
                     "apply"
                     [|x10505;((let x10500 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10500 "push"
                                     [|(Ojs.string_to_js x10497)|]);
                                ignore
                                  (Ojs.call x10500 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10498)|]);
                                (match x10499 with
                                 | Some x10501 ->
                                     ignore
                                       (Ojs.call x10500 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10501)|])
                                 | None -> ());
                                x10500))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10514 : 'tags this) ->
        fun ~type_:(x10506 : 'K) ->
          fun ~listener:(x10507 : this:t -> ev:any -> any) ->
            fun ?options:(x10508 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10516 = this_to_js Obj.magic x10514 in
                   Ojs.call (Ojs.get_prop_ascii x10516 "removeEventListener")
                     "apply"
                     [|x10516;((let x10509 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10509 "push"
                                     [|(Obj.magic x10506)|]);
                                ignore
                                  (Ojs.call x10509 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10512 : Ojs.t) ->
                                             fun (x10513 : Ojs.t) ->
                                               any_to_js
                                                 (x10507
                                                    ~this:(t_of_js x10512)
                                                    ~ev:(any_of_js x10513))))|]);
                                (match x10508 with
                                 | Some x10510 ->
                                     ignore
                                       (Ojs.call x10509 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10510)|])
                                 | None -> ());
                                x10509))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10523 : 'tags this) ->
        fun ~type_:(x10517 : string) ->
          fun ~listener:(x10518 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x10519 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10525 = this_to_js Obj.magic x10523 in
                   Ojs.call (Ojs.get_prop_ascii x10525 "removeEventListener")
                     "apply"
                     [|x10525;((let x10520 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10520 "push"
                                     [|(Ojs.string_to_js x10517)|]);
                                ignore
                                  (Ojs.call x10520 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10518)|]);
                                (match x10519 with
                                 | Some x10521 ->
                                     ignore
                                       (Ojs.call x10520 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10521)|])
                                 | None -> ());
                                x10520))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "prototype")
    let (create :
      url:URL.t or_string -> ?protocols:string list or_string -> unit -> t) =
      fun ~url:(x10526 : URL.t or_string) ->
        fun ?protocols:(x10527 : string list or_string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WebSocket")
                 (let x10528 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x10528 "push"
                       [|(or_string_to_js URL.t_to_js x10526)|]);
                  (match x10527 with
                   | Some x10529 ->
                       ignore
                         (Ojs.call x10528 "push"
                            [|(or_string_to_js
                                 (fun (x10530 : string list) ->
                                    Ojs.list_to_js Ojs.string_to_js x10530)
                                 x10529)|])
                   | None -> ());
                  x10528))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSED")
    let (closing : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSING")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "OPEN")
  end
module rec
  AnonymousInterface126:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLUniformLocation.t
                          val set_prototype :
                            t -> WebGLUniformLocation.t -> unit
                          val create : t -> WebGLUniformLocation.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10534 : Ojs.t) -> x10534
    and t_to_js : t -> Ojs.t = fun (x10533 : Ojs.t) -> x10533
    let (get_prototype : t -> WebGLUniformLocation.t) =
      fun (x10535 : t) ->
        WebGLUniformLocation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10535) "prototype")
    let (set_prototype : t -> WebGLUniformLocation.t -> unit) =
      fun (x10536 : t) ->
        fun (x10537 : WebGLUniformLocation.t) ->
          Ojs.set_prop_ascii (t_to_js x10536) "prototype"
            (WebGLUniformLocation.t_to_js x10537)
    let (create : t -> WebGLUniformLocation.t) =
      fun (x10538 : t) ->
        WebGLUniformLocation.t_of_js (Ojs.new_obj (t_to_js x10538) [||])
  end
 and
  WebGLUniformLocation:sig
                         type t = [ `WebGLUniformLocation ] intf
                         type t_0 = t
                         [@@@js.stop ]
                         type tags = [ `WebGLUniformLocation ]
                         type tags_0 = tags
                         [@@@js.start ]
                         [@@@js.implem
                           type tags = [ `WebGLUniformLocation ]
                           type tags_0 = tags]
                         type 'tags this =
                           'tags intf constraint 'tags =
                                       [> `WebGLUniformLocation ]
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val t_0_to_js : t_0 -> Ojs.t
                         val t_0_of_js : Ojs.t -> t_0
                         val cast_from : 'tags this -> t
                         val prototype : unit -> t
                         val create : unit -> t
                       end =
  struct
    type t = [ `WebGLUniformLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10540 : Ojs.t) -> t_of_js x10540
    and t_0_to_js : t_0 -> Ojs.t = fun (x10539 : t) -> t_to_js x10539
    type tags = [ `WebGLUniformLocation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLUniformLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10543 : Ojs.t) -> intf_of_js __tags_of_js x10543
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10541 : __tags intf) -> intf_to_js __tags_to_js x10541
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             [||])
  end
module TexImageSource =
  struct
    type t = (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x10549 : Ojs.t) ->
        union3_of_js ImageBitmap.t_of_js ImageData.t_of_js
          OffscreenCanvas.t_of_js x10549
    and t_to_js : t -> Ojs.t =
      fun (x10545 : (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3)
        ->
        union3_to_js ImageBitmap.t_to_js ImageData.t_to_js
          OffscreenCanvas.t_to_js x10545
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10554 : Ojs.t) -> t_of_js x10554
    and t_0_to_js : t_0 -> Ojs.t = fun (x10553 : t) -> t_to_js x10553
  end
module GLint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10556 : Ojs.t) -> Ojs.float_of_js x10556
    and t_to_js : t -> Ojs.t = fun (x10555 : float) -> Ojs.float_to_js x10555
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10558 : Ojs.t) -> t_of_js x10558
    and t_0_to_js : t_0 -> Ojs.t = fun (x10557 : t) -> t_to_js x10557
  end
module Int32List =
  struct
    type t = (Int32Array.t_0, GLint.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x10562 : Ojs.t) ->
        or_array_of_js Int32Array.t_0_of_js GLint.t_of_js x10562
    and t_to_js : t -> Ojs.t =
      fun (x10559 : (Int32Array.t_0, GLint.t) or_array) ->
        or_array_to_js Int32Array.t_0_to_js GLint.t_to_js x10559
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10566 : Ojs.t) -> t_of_js x10566
    and t_0_to_js : t_0 -> Ojs.t = fun (x10565 : t) -> t_to_js x10565
  end
module GLsizeiptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10568 : Ojs.t) -> Ojs.float_of_js x10568
    and t_to_js : t -> Ojs.t = fun (x10567 : float) -> Ojs.float_to_js x10567
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10570 : Ojs.t) -> t_of_js x10570
    and t_0_to_js : t_0 -> Ojs.t = fun (x10569 : t) -> t_to_js x10569
  end
module GLboolean =
  struct
    type t = bool
    let rec t_of_js : Ojs.t -> t =
      fun (x10572 : Ojs.t) -> Ojs.bool_of_js x10572
    and t_to_js : t -> Ojs.t = fun (x10571 : bool) -> Ojs.bool_to_js x10571
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10574 : Ojs.t) -> t_of_js x10574
    and t_0_to_js : t_0 -> Ojs.t = fun (x10573 : t) -> t_to_js x10573
  end
module GLfloat =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10576 : Ojs.t) -> Ojs.float_of_js x10576
    and t_to_js : t -> Ojs.t = fun (x10575 : float) -> Ojs.float_to_js x10575
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10578 : Ojs.t) -> t_of_js x10578
    and t_0_to_js : t_0 -> Ojs.t = fun (x10577 : t) -> t_to_js x10577
  end
module Float32List =
  struct
    type t = (Float32Array.t_0, GLfloat.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x10582 : Ojs.t) ->
        or_array_of_js Float32Array.t_0_of_js GLfloat.t_of_js x10582
    and t_to_js : t -> Ojs.t =
      fun (x10579 : (Float32Array.t_0, GLfloat.t) or_array) ->
        or_array_to_js Float32Array.t_0_to_js GLfloat.t_to_js x10579
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10586 : Ojs.t) -> t_of_js x10586
    and t_0_to_js : t_0 -> Ojs.t = fun (x10585 : t) -> t_to_js x10585
  end
module GLsizei =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10588 : Ojs.t) -> Ojs.float_of_js x10588
    and t_to_js : t -> Ojs.t = fun (x10587 : float) -> Ojs.float_to_js x10587
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10590 : Ojs.t) -> t_of_js x10590
    and t_0_to_js : t_0 -> Ojs.t = fun (x10589 : t) -> t_to_js x10589
  end
module GLintptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10592 : Ojs.t) -> Ojs.float_of_js x10592
    and t_to_js : t -> Ojs.t = fun (x10591 : float) -> Ojs.float_to_js x10591
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10594 : Ojs.t) -> t_of_js x10594
    and t_0_to_js : t_0 -> Ojs.t = fun (x10593 : t) -> t_to_js x10593
  end
module WebGLRenderingContextOverloads =
  struct
    type t = [ `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10596 : Ojs.t) -> t_of_js x10596
    and t_0_to_js : t_0 -> Ojs.t = fun (x10595 : t) -> t_to_js x10595
    type tags = [ `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10599 : Ojs.t) -> intf_of_js __tags_of_js x10599
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10597 : __tags intf) -> intf_to_js __tags_to_js x10597
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x10604 : 'tags this) ->
        fun ~target:(x10601 : GLenum.t) ->
          fun ~size:(x10602 : GLsizeiptr.t) ->
            fun ~usage:(x10603 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10604) "bufferData"
                   [|(GLenum.t_to_js x10601);(GLsizeiptr.t_to_js x10602);(
                     GLenum.t_to_js x10603)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          data:BufferSource.t or_null -> usage:GLenum.t -> unit)
      =
      fun (x10610 : 'tags this) ->
        fun ~target:(x10606 : GLenum.t) ->
          fun ~data:(x10607 : BufferSource.t or_null) ->
            fun ~usage:(x10609 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10610) "bufferData"
                   [|(GLenum.t_to_js x10606);(or_null_to_js
                                                BufferSource.t_to_js x10607);(
                     GLenum.t_to_js x10609)|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t -> offset:GLintptr.t -> data:BufferSource.t -> unit)
      =
      fun (x10615 : 'tags this) ->
        fun ~target:(x10612 : GLenum.t) ->
          fun ~offset:(x10613 : GLintptr.t) ->
            fun ~data:(x10614 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10615) "bufferSubData"
                   [|(GLenum.t_to_js x10612);(GLintptr.t_to_js x10613);(
                     BufferSource.t_to_js x10614)|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x10624 : 'tags this) ->
        fun ~target:(x10617 : GLenum.t) ->
          fun ~level:(x10618 : GLint.t) ->
            fun ~internalformat:(x10619 : GLenum.t) ->
              fun ~width:(x10620 : GLsizei.t) ->
                fun ~height:(x10621 : GLsizei.t) ->
                  fun ~border:(x10622 : GLint.t) ->
                    fun ~data:(x10623 : ArrayBufferView.t_0) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10624)
                           "compressedTexImage2D"
                           [|(GLenum.t_to_js x10617);(GLint.t_to_js x10618);(
                             GLenum.t_to_js x10619);(GLsizei.t_to_js x10620);(
                             GLsizei.t_to_js x10621);(GLint.t_to_js x10622);(
                             ArrayBufferView.t_0_to_js x10623)|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x10634 : 'tags this) ->
        fun ~target:(x10626 : GLenum.t) ->
          fun ~level:(x10627 : GLint.t) ->
            fun ~xoffset:(x10628 : GLint.t) ->
              fun ~yoffset:(x10629 : GLint.t) ->
                fun ~width:(x10630 : GLsizei.t) ->
                  fun ~height:(x10631 : GLsizei.t) ->
                    fun ~format:(x10632 : GLenum.t) ->
                      fun ~data:(x10633 : ArrayBufferView.t_0) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x10634)
                             "compressedTexSubImage2D"
                             [|(GLenum.t_to_js x10626);(GLint.t_to_js x10627);(
                               GLint.t_to_js x10628);(GLint.t_to_js x10629);(
                               GLsizei.t_to_js x10630);(GLsizei.t_to_js
                                                          x10631);(GLenum.t_to_js
                                                                    x10632);(
                               ArrayBufferView.t_0_to_js x10633)|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x10644 : 'tags this) ->
        fun ~x:(x10636 : GLint.t) ->
          fun ~y:(x10637 : GLint.t) ->
            fun ~width:(x10638 : GLsizei.t) ->
              fun ~height:(x10639 : GLsizei.t) ->
                fun ~format:(x10640 : GLenum.t) ->
                  fun ~type_:(x10641 : GLenum.t) ->
                    fun ~pixels:(x10642 : ArrayBufferView.t_0 or_null) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10644) "readPixels"
                           [|(GLint.t_to_js x10636);(GLint.t_to_js x10637);(
                             GLsizei.t_to_js x10638);(GLsizei.t_to_js x10639);(
                             GLenum.t_to_js x10640);(GLenum.t_to_js x10641);(
                             or_null_to_js ArrayBufferView.t_0_to_js x10642)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x10656 : 'tags this) ->
        fun ~target:(x10646 : GLenum.t) ->
          fun ~level:(x10647 : GLint.t) ->
            fun ~internalformat:(x10648 : GLint.t) ->
              fun ~width:(x10649 : GLsizei.t) ->
                fun ~height:(x10650 : GLsizei.t) ->
                  fun ~border:(x10651 : GLint.t) ->
                    fun ~format:(x10652 : GLenum.t) ->
                      fun ~type_:(x10653 : GLenum.t) ->
                        fun ~pixels:(x10654 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x10656)
                               "texImage2D"
                               [|(GLenum.t_to_js x10646);(GLint.t_to_js
                                                            x10647);(
                                 GLint.t_to_js x10648);(GLsizei.t_to_js
                                                          x10649);(GLsizei.t_to_js
                                                                    x10650);(
                                 GLint.t_to_js x10651);(GLenum.t_to_js x10652);(
                                 GLenum.t_to_js x10653);(or_null_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x10654)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x10664 : 'tags this) ->
        fun ~target:(x10658 : GLenum.t) ->
          fun ~level:(x10659 : GLint.t) ->
            fun ~internalformat:(x10660 : GLint.t) ->
              fun ~format:(x10661 : GLenum.t) ->
                fun ~type_:(x10662 : GLenum.t) ->
                  fun ~source:(x10663 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x10664) "texImage2D"
                         [|(GLenum.t_to_js x10658);(GLint.t_to_js x10659);(
                           GLint.t_to_js x10660);(GLenum.t_to_js x10661);(
                           GLenum.t_to_js x10662);(TexImageSource.t_to_js
                                                     x10663)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x10676 : 'tags this) ->
        fun ~target:(x10666 : GLenum.t) ->
          fun ~level:(x10667 : GLint.t) ->
            fun ~xoffset:(x10668 : GLint.t) ->
              fun ~yoffset:(x10669 : GLint.t) ->
                fun ~width:(x10670 : GLsizei.t) ->
                  fun ~height:(x10671 : GLsizei.t) ->
                    fun ~format:(x10672 : GLenum.t) ->
                      fun ~type_:(x10673 : GLenum.t) ->
                        fun ~pixels:(x10674 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x10676)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x10666);(GLint.t_to_js
                                                            x10667);(
                                 GLint.t_to_js x10668);(GLint.t_to_js x10669);(
                                 GLsizei.t_to_js x10670);(GLsizei.t_to_js
                                                            x10671);(
                                 GLenum.t_to_js x10672);(GLenum.t_to_js
                                                           x10673);(or_null_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x10674)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x10685 : 'tags this) ->
        fun ~target:(x10678 : GLenum.t) ->
          fun ~level:(x10679 : GLint.t) ->
            fun ~xoffset:(x10680 : GLint.t) ->
              fun ~yoffset:(x10681 : GLint.t) ->
                fun ~format:(x10682 : GLenum.t) ->
                  fun ~type_:(x10683 : GLenum.t) ->
                    fun ~source:(x10684 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x10685)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x10678);(GLint.t_to_js x10679);(
                             GLint.t_to_js x10680);(GLint.t_to_js x10681);(
                             GLenum.t_to_js x10682);(GLenum.t_to_js x10683);(
                             TexImageSource.t_to_js x10684)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x10690 : 'tags this) ->
        fun ~location:(x10687 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10689 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10690) "uniform1fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10687);(
                   Float32List.t_to_js x10689)|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x10695 : 'tags this) ->
        fun ~location:(x10692 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10694 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10695) "uniform1iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10692);(
                   Int32List.t_to_js x10694)|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x10700 : 'tags this) ->
        fun ~location:(x10697 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10699 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10700) "uniform2fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10697);(
                   Float32List.t_to_js x10699)|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x10705 : 'tags this) ->
        fun ~location:(x10702 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10704 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10705) "uniform2iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10702);(
                   Int32List.t_to_js x10704)|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x10710 : 'tags this) ->
        fun ~location:(x10707 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10709 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10710) "uniform3fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10707);(
                   Float32List.t_to_js x10709)|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x10715 : 'tags this) ->
        fun ~location:(x10712 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10714 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10715) "uniform3iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10712);(
                   Int32List.t_to_js x10714)|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x10720 : 'tags this) ->
        fun ~location:(x10717 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10719 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10720) "uniform4fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10717);(
                   Float32List.t_to_js x10719)|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x10725 : 'tags this) ->
        fun ~location:(x10722 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10724 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10725) "uniform4iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10722);(
                   Int32List.t_to_js x10724)|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x10731 : 'tags this) ->
        fun ~location:(x10727 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10729 : GLboolean.t) ->
            fun ~value:(x10730 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10731) "uniformMatrix2fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10727);(
                     GLboolean.t_to_js x10729);(Float32List.t_to_js x10730)|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x10737 : 'tags this) ->
        fun ~location:(x10733 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10735 : GLboolean.t) ->
            fun ~value:(x10736 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10737) "uniformMatrix3fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10733);(
                     GLboolean.t_to_js x10735);(Float32List.t_to_js x10736)|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x10743 : 'tags this) ->
        fun ~location:(x10739 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10741 : GLboolean.t) ->
            fun ~value:(x10742 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10743) "uniformMatrix4fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10739);(
                     GLboolean.t_to_js x10741);(Float32List.t_to_js x10742)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10749 : 'tags this) ->
        fun ~location:(x10745 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10747 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10749) "uniform1fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10745);(
                   Iterable.t_1_to_js GLfloat.t_to_js x10747)|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x10755 : 'tags this) ->
        fun ~location:(x10751 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10753 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10755) "uniform1iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10751);(
                   Iterable.t_1_to_js GLint.t_to_js x10753)|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10761 : 'tags this) ->
        fun ~location:(x10757 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10759 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10761) "uniform2fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10757);(
                   Iterable.t_1_to_js GLfloat.t_to_js x10759)|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x10767 : 'tags this) ->
        fun ~location:(x10763 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10765 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10767) "uniform2iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10763);(
                   Iterable.t_1_to_js GLint.t_to_js x10765)|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10773 : 'tags this) ->
        fun ~location:(x10769 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10771 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10773) "uniform3fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10769);(
                   Iterable.t_1_to_js GLfloat.t_to_js x10771)|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x10779 : 'tags this) ->
        fun ~location:(x10775 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10777 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10779) "uniform3iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10775);(
                   Iterable.t_1_to_js GLint.t_to_js x10777)|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10785 : 'tags this) ->
        fun ~location:(x10781 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10783 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10785) "uniform4fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10781);(
                   Iterable.t_1_to_js GLfloat.t_to_js x10783)|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x10791 : 'tags this) ->
        fun ~location:(x10787 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x10789 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10791) "uniform4iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x10787);(
                   Iterable.t_1_to_js GLint.t_to_js x10789)|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10798 : 'tags this) ->
        fun ~location:(x10793 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10795 : GLboolean.t) ->
            fun ~value:(x10796 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10798) "uniformMatrix2fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10793);(
                     GLboolean.t_to_js x10795);(Iterable.t_1_to_js
                                                  GLfloat.t_to_js x10796)|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10805 : 'tags this) ->
        fun ~location:(x10800 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10802 : GLboolean.t) ->
            fun ~value:(x10803 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10805) "uniformMatrix3fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10800);(
                     GLboolean.t_to_js x10802);(Iterable.t_1_to_js
                                                  GLfloat.t_to_js x10803)|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x10812 : 'tags this) ->
        fun ~location:(x10807 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x10809 : GLboolean.t) ->
            fun ~value:(x10810 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x10812) "uniformMatrix4fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x10807);(
                     GLboolean.t_to_js x10809);(Iterable.t_1_to_js
                                                  GLfloat.t_to_js x10810)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface122:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> WebGLShaderPrecisionFormat.t
                          val set_prototype :
                            t -> WebGLShaderPrecisionFormat.t -> unit
                          val create : t -> WebGLShaderPrecisionFormat.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10815 : Ojs.t) -> x10815
    and t_to_js : t -> Ojs.t = fun (x10814 : Ojs.t) -> x10814
    let (get_prototype : t -> WebGLShaderPrecisionFormat.t) =
      fun (x10816 : t) ->
        WebGLShaderPrecisionFormat.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10816) "prototype")
    let (set_prototype : t -> WebGLShaderPrecisionFormat.t -> unit) =
      fun (x10817 : t) ->
        fun (x10818 : WebGLShaderPrecisionFormat.t) ->
          Ojs.set_prop_ascii (t_to_js x10817) "prototype"
            (WebGLShaderPrecisionFormat.t_to_js x10818)
    let (create : t -> WebGLShaderPrecisionFormat.t) =
      fun (x10819 : t) ->
        WebGLShaderPrecisionFormat.t_of_js
          (Ojs.new_obj (t_to_js x10819) [||])
  end
 and
  WebGLShaderPrecisionFormat:sig
                               type t = [ `WebGLShaderPrecisionFormat ] intf
                               type t_0 = t
                               [@@@js.stop ]
                               type tags = [ `WebGLShaderPrecisionFormat ]
                               type tags_0 = tags
                               [@@@js.start ]
                               [@@@js.implem
                                 type tags = [ `WebGLShaderPrecisionFormat ]
                                 type tags_0 = tags]
                               type 'tags this =
                                 'tags intf constraint 'tags =
                                             [> `WebGLShaderPrecisionFormat ]
                               val t_to_js : t -> Ojs.t
                               val t_of_js : Ojs.t -> t
                               val t_0_to_js : t_0 -> Ojs.t
                               val t_0_of_js : Ojs.t -> t_0
                               val get_precision : 'tags this -> GLint.t
                               val get_rangeMax : 'tags this -> GLint.t
                               val get_rangeMin : 'tags this -> GLint.t
                               val cast_from : 'tags this -> t
                               val prototype : unit -> t
                               val create : unit -> t
                             end =
  struct
    type t = [ `WebGLShaderPrecisionFormat ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10821 : Ojs.t) -> t_of_js x10821
    and t_0_to_js : t_0 -> Ojs.t = fun (x10820 : t) -> t_to_js x10820
    type tags = [ `WebGLShaderPrecisionFormat ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10824 : Ojs.t) -> intf_of_js __tags_of_js x10824
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10822 : __tags intf) -> intf_to_js __tags_to_js x10822
    let (get_precision : 'tags this -> GLint.t) =
      fun (x10826 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10826) "precision")
    let (get_rangeMax : 'tags this -> GLint.t) =
      fun (x10828 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10828) "rangeMax")
    let (get_rangeMin : 'tags this -> GLint.t) =
      fun (x10830 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10830) "rangeMin")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             [||])
  end
module rec
  AnonymousInterface118:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLRenderbuffer.t
                          val set_prototype :
                            t -> WebGLRenderbuffer.t -> unit
                          val create : t -> WebGLRenderbuffer.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10833 : Ojs.t) -> x10833
    and t_to_js : t -> Ojs.t = fun (x10832 : Ojs.t) -> x10832
    let (get_prototype : t -> WebGLRenderbuffer.t) =
      fun (x10834 : t) ->
        WebGLRenderbuffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10834) "prototype")
    let (set_prototype : t -> WebGLRenderbuffer.t -> unit) =
      fun (x10835 : t) ->
        fun (x10836 : WebGLRenderbuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x10835) "prototype"
            (WebGLRenderbuffer.t_to_js x10836)
    let (create : t -> WebGLRenderbuffer.t) =
      fun (x10837 : t) ->
        WebGLRenderbuffer.t_of_js (Ojs.new_obj (t_to_js x10837) [||])
  end
 and
  WebGLRenderbuffer:sig
                      type t = [ `WebGLRenderbuffer ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `WebGLRenderbuffer ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `WebGLRenderbuffer ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : unit -> t
                    end =
  struct
    type t = [ `WebGLRenderbuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10839 : Ojs.t) -> t_of_js x10839
    and t_0_to_js : t_0 -> Ojs.t = fun (x10838 : t) -> t_to_js x10838
    type tags = [ `WebGLRenderbuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10842 : Ojs.t) -> intf_of_js __tags_of_js x10842
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10840 : __tags intf) -> intf_to_js __tags_to_js x10840
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
             [||])
  end
module rec
  AnonymousInterface115:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLFramebuffer.t
                          val set_prototype : t -> WebGLFramebuffer.t -> unit
                          val create : t -> WebGLFramebuffer.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10845 : Ojs.t) -> x10845
    and t_to_js : t -> Ojs.t = fun (x10844 : Ojs.t) -> x10844
    let (get_prototype : t -> WebGLFramebuffer.t) =
      fun (x10846 : t) ->
        WebGLFramebuffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10846) "prototype")
    let (set_prototype : t -> WebGLFramebuffer.t -> unit) =
      fun (x10847 : t) ->
        fun (x10848 : WebGLFramebuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x10847) "prototype"
            (WebGLFramebuffer.t_to_js x10848)
    let (create : t -> WebGLFramebuffer.t) =
      fun (x10849 : t) ->
        WebGLFramebuffer.t_of_js (Ojs.new_obj (t_to_js x10849) [||])
  end
 and
  WebGLFramebuffer:sig
                     type t = [ `WebGLFramebuffer ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `WebGLFramebuffer ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `WebGLFramebuffer ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `WebGLFramebuffer ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
  struct
    type t = [ `WebGLFramebuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10851 : Ojs.t) -> t_of_js x10851
    and t_0_to_js : t_0 -> Ojs.t = fun (x10850 : t) -> t_to_js x10850
    type tags = [ `WebGLFramebuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10854 : Ojs.t) -> intf_of_js __tags_of_js x10854
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10852 : __tags intf) -> intf_to_js __tags_to_js x10852
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
             [||])
  end
module WebGLPowerPreference =
  struct
    type t =
      [ `L_s57_default  | `L_s86_high_performance  | `L_s108_low_power ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10857 : Ojs.t) ->
        let x10858 = x10857 in
        match Ojs.string_of_js x10858 with
        | "default" -> `L_s57_default
        | "high-performance" -> `L_s86_high_performance
        | "low-power" -> `L_s108_low_power
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x10856 :
          [ `L_s57_default  | `L_s86_high_performance  | `L_s108_low_power ])
        ->
        match x10856 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s86_high_performance -> Ojs.string_to_js "high-performance"
        | `L_s108_low_power -> Ojs.string_to_js "low-power"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10860 : Ojs.t) -> t_of_js x10860
    and t_0_to_js : t_0 -> Ojs.t = fun (x10859 : t) -> t_to_js x10859
  end
module WebGLContextAttributes =
  struct
    type t = [ `WebGLContextAttributes ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10862 : Ojs.t) -> t_of_js x10862
    and t_0_to_js : t_0 -> Ojs.t = fun (x10861 : t) -> t_to_js x10861
    type tags = [ `WebGLContextAttributes ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextAttributes ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10865 : Ojs.t) -> intf_of_js __tags_of_js x10865
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10863 : __tags intf) -> intf_to_js __tags_to_js x10863
    let (get_alpha : 'tags this -> bool) =
      fun (x10867 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10867) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x10869 : 'tags this) ->
        fun (x10870 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10869) "alpha"
            (Ojs.bool_to_js x10870)
    let (get_antialias : 'tags this -> bool) =
      fun (x10872 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10872) "antialias")
    let (set_antialias : 'tags this -> bool -> unit) =
      fun (x10874 : 'tags this) ->
        fun (x10875 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10874) "antialias"
            (Ojs.bool_to_js x10875)
    let (get_depth : 'tags this -> bool) =
      fun (x10877 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10877) "depth")
    let (set_depth : 'tags this -> bool -> unit) =
      fun (x10879 : 'tags this) ->
        fun (x10880 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10879) "depth"
            (Ojs.bool_to_js x10880)
    let (get_desynchronized : 'tags this -> bool) =
      fun (x10882 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10882) "desynchronized")
    let (set_desynchronized : 'tags this -> bool -> unit) =
      fun (x10884 : 'tags this) ->
        fun (x10885 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10884) "desynchronized"
            (Ojs.bool_to_js x10885)
    let (get_failIfMajorPerformanceCaveat : 'tags this -> bool) =
      fun (x10887 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10887)
             "failIfMajorPerformanceCaveat")
    let (set_failIfMajorPerformanceCaveat : 'tags this -> bool -> unit) =
      fun (x10889 : 'tags this) ->
        fun (x10890 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10889)
            "failIfMajorPerformanceCaveat" (Ojs.bool_to_js x10890)
    let (get_powerPreference : 'tags this -> WebGLPowerPreference.t) =
      fun (x10892 : 'tags this) ->
        WebGLPowerPreference.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10892) "powerPreference")
    let (set_powerPreference : 'tags this -> WebGLPowerPreference.t -> unit)
      =
      fun (x10894 : 'tags this) ->
        fun (x10895 : WebGLPowerPreference.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10894) "powerPreference"
            (WebGLPowerPreference.t_to_js x10895)
    let (get_premultipliedAlpha : 'tags this -> bool) =
      fun (x10897 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10897)
             "premultipliedAlpha")
    let (set_premultipliedAlpha : 'tags this -> bool -> unit) =
      fun (x10899 : 'tags this) ->
        fun (x10900 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10899)
            "premultipliedAlpha" (Ojs.bool_to_js x10900)
    let (get_preserveDrawingBuffer : 'tags this -> bool) =
      fun (x10902 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10902)
             "preserveDrawingBuffer")
    let (set_preserveDrawingBuffer : 'tags this -> bool -> unit) =
      fun (x10904 : 'tags this) ->
        fun (x10905 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10904)
            "preserveDrawingBuffer" (Ojs.bool_to_js x10905)
    let (get_stencil : 'tags this -> bool) =
      fun (x10907 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10907) "stencil")
    let (set_stencil : 'tags this -> bool -> unit) =
      fun (x10909 : 'tags this) ->
        fun (x10910 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10909) "stencil"
            (Ojs.bool_to_js x10910)
    let cast_from = Obj.magic
  end
module WEBGL_lose_context =
  struct
    type t = [ `WEBGL_lose_context ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10913 : Ojs.t) -> t_of_js x10913
    and t_0_to_js : t_0 -> Ojs.t = fun (x10912 : t) -> t_to_js x10912
    type tags = [ `WEBGL_lose_context ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10916 : Ojs.t) -> intf_of_js __tags_of_js x10916
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10914 : __tags intf) -> intf_to_js __tags_to_js x10914
    let (loseContext : 'tags this -> unit) =
      fun (x10918 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x10918) "loseContext" [||])
    let (restoreContext : 'tags this -> unit) =
      fun (x10920 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x10920) "restoreContext" [||])
    let cast_from = Obj.magic
  end
module WEBGL_draw_buffers =
  struct
    type t = [ `WEBGL_draw_buffers ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10923 : Ojs.t) -> t_of_js x10923
    and t_0_to_js : t_0 -> Ojs.t = fun (x10922 : t) -> t_to_js x10922
    type tags = [ `WEBGL_draw_buffers ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10926 : Ojs.t) -> intf_of_js __tags_of_js x10926
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10924 : __tags intf) -> intf_to_js __tags_to_js x10924
    let (drawBuffersWEBGL : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x10930 : 'tags this) ->
        fun ~buffers:(x10928 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x10930) "drawBuffersWEBGL"
               [|(Ojs.list_to_js GLenum.t_to_js x10928)|])
    let (get_COLOR_ATTACHMENT0_WEBGL : 'tags this -> GLenum.t) =
      fun (x10932 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10932)
             "COLOR_ATTACHMENT0_WEBGL")
    let (get_COLOR_ATTACHMENT10_WEBGL : 'tags this -> GLenum.t) =
      fun (x10934 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10934)
             "COLOR_ATTACHMENT10_WEBGL")
    let (get_COLOR_ATTACHMENT11_WEBGL : 'tags this -> GLenum.t) =
      fun (x10936 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10936)
             "COLOR_ATTACHMENT11_WEBGL")
    let (get_COLOR_ATTACHMENT12_WEBGL : 'tags this -> GLenum.t) =
      fun (x10938 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10938)
             "COLOR_ATTACHMENT12_WEBGL")
    let (get_COLOR_ATTACHMENT13_WEBGL : 'tags this -> GLenum.t) =
      fun (x10940 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10940)
             "COLOR_ATTACHMENT13_WEBGL")
    let (get_COLOR_ATTACHMENT14_WEBGL : 'tags this -> GLenum.t) =
      fun (x10942 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10942)
             "COLOR_ATTACHMENT14_WEBGL")
    let (get_COLOR_ATTACHMENT15_WEBGL : 'tags this -> GLenum.t) =
      fun (x10944 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10944)
             "COLOR_ATTACHMENT15_WEBGL")
    let (get_COLOR_ATTACHMENT1_WEBGL : 'tags this -> GLenum.t) =
      fun (x10946 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10946)
             "COLOR_ATTACHMENT1_WEBGL")
    let (get_COLOR_ATTACHMENT2_WEBGL : 'tags this -> GLenum.t) =
      fun (x10948 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10948)
             "COLOR_ATTACHMENT2_WEBGL")
    let (get_COLOR_ATTACHMENT3_WEBGL : 'tags this -> GLenum.t) =
      fun (x10950 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10950)
             "COLOR_ATTACHMENT3_WEBGL")
    let (get_COLOR_ATTACHMENT4_WEBGL : 'tags this -> GLenum.t) =
      fun (x10952 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10952)
             "COLOR_ATTACHMENT4_WEBGL")
    let (get_COLOR_ATTACHMENT5_WEBGL : 'tags this -> GLenum.t) =
      fun (x10954 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10954)
             "COLOR_ATTACHMENT5_WEBGL")
    let (get_COLOR_ATTACHMENT6_WEBGL : 'tags this -> GLenum.t) =
      fun (x10956 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10956)
             "COLOR_ATTACHMENT6_WEBGL")
    let (get_COLOR_ATTACHMENT7_WEBGL : 'tags this -> GLenum.t) =
      fun (x10958 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10958)
             "COLOR_ATTACHMENT7_WEBGL")
    let (get_COLOR_ATTACHMENT8_WEBGL : 'tags this -> GLenum.t) =
      fun (x10960 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10960)
             "COLOR_ATTACHMENT8_WEBGL")
    let (get_COLOR_ATTACHMENT9_WEBGL : 'tags this -> GLenum.t) =
      fun (x10962 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10962)
             "COLOR_ATTACHMENT9_WEBGL")
    let (get_DRAW_BUFFER0_WEBGL : 'tags this -> GLenum.t) =
      fun (x10964 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10964)
             "DRAW_BUFFER0_WEBGL")
    let (get_DRAW_BUFFER10_WEBGL : 'tags this -> GLenum.t) =
      fun (x10966 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10966)
             "DRAW_BUFFER10_WEBGL")
    let (get_DRAW_BUFFER11_WEBGL : 'tags this -> GLenum.t) =
      fun (x10968 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10968)
             "DRAW_BUFFER11_WEBGL")
    let (get_DRAW_BUFFER12_WEBGL : 'tags this -> GLenum.t) =
      fun (x10970 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10970)
             "DRAW_BUFFER12_WEBGL")
    let (get_DRAW_BUFFER13_WEBGL : 'tags this -> GLenum.t) =
      fun (x10972 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10972)
             "DRAW_BUFFER13_WEBGL")
    let (get_DRAW_BUFFER14_WEBGL : 'tags this -> GLenum.t) =
      fun (x10974 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10974)
             "DRAW_BUFFER14_WEBGL")
    let (get_DRAW_BUFFER15_WEBGL : 'tags this -> GLenum.t) =
      fun (x10976 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10976)
             "DRAW_BUFFER15_WEBGL")
    let (get_DRAW_BUFFER1_WEBGL : 'tags this -> GLenum.t) =
      fun (x10978 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10978)
             "DRAW_BUFFER1_WEBGL")
    let (get_DRAW_BUFFER2_WEBGL : 'tags this -> GLenum.t) =
      fun (x10980 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10980)
             "DRAW_BUFFER2_WEBGL")
    let (get_DRAW_BUFFER3_WEBGL : 'tags this -> GLenum.t) =
      fun (x10982 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10982)
             "DRAW_BUFFER3_WEBGL")
    let (get_DRAW_BUFFER4_WEBGL : 'tags this -> GLenum.t) =
      fun (x10984 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10984)
             "DRAW_BUFFER4_WEBGL")
    let (get_DRAW_BUFFER5_WEBGL : 'tags this -> GLenum.t) =
      fun (x10986 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10986)
             "DRAW_BUFFER5_WEBGL")
    let (get_DRAW_BUFFER6_WEBGL : 'tags this -> GLenum.t) =
      fun (x10988 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10988)
             "DRAW_BUFFER6_WEBGL")
    let (get_DRAW_BUFFER7_WEBGL : 'tags this -> GLenum.t) =
      fun (x10990 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10990)
             "DRAW_BUFFER7_WEBGL")
    let (get_DRAW_BUFFER8_WEBGL : 'tags this -> GLenum.t) =
      fun (x10992 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10992)
             "DRAW_BUFFER8_WEBGL")
    let (get_DRAW_BUFFER9_WEBGL : 'tags this -> GLenum.t) =
      fun (x10994 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10994)
             "DRAW_BUFFER9_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS_WEBGL : 'tags this -> GLenum.t) =
      fun (x10996 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10996)
             "MAX_COLOR_ATTACHMENTS_WEBGL")
    let (get_MAX_DRAW_BUFFERS_WEBGL : 'tags this -> GLenum.t) =
      fun (x10998 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10998)
             "MAX_DRAW_BUFFERS_WEBGL")
    let (drawBuffersWEBGL' :
      'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x11002 : 'tags this) ->
        fun ~buffers:(x11000 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11002) "drawBuffersWEBGL"
               [|(Iterable.t_1_to_js GLenum.t_to_js x11000)|])
    let cast_from = Obj.magic
  end
module WEBGL_depth_texture =
  struct
    type t = [ `WEBGL_depth_texture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11005 : Ojs.t) -> t_of_js x11005
    and t_0_to_js : t_0 -> Ojs.t = fun (x11004 : t) -> t_to_js x11004
    type tags = [ `WEBGL_depth_texture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11008 : Ojs.t) -> intf_of_js __tags_of_js x11008
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11006 : __tags intf) -> intf_to_js __tags_to_js x11006
    let (get_UNSIGNED_INT_24_8_WEBGL : 'tags this -> GLenum.t) =
      fun (x11010 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11010)
             "UNSIGNED_INT_24_8_WEBGL")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface121:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLShader.t
                          val set_prototype : t -> WebGLShader.t -> unit
                          val create : t -> WebGLShader.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x11013 : Ojs.t) -> x11013
    and t_to_js : t -> Ojs.t = fun (x11012 : Ojs.t) -> x11012
    let (get_prototype : t -> WebGLShader.t) =
      fun (x11014 : t) ->
        WebGLShader.t_of_js (Ojs.get_prop_ascii (t_to_js x11014) "prototype")
    let (set_prototype : t -> WebGLShader.t -> unit) =
      fun (x11015 : t) ->
        fun (x11016 : WebGLShader.t) ->
          Ojs.set_prop_ascii (t_to_js x11015) "prototype"
            (WebGLShader.t_to_js x11016)
    let (create : t -> WebGLShader.t) =
      fun (x11017 : t) ->
        WebGLShader.t_of_js (Ojs.new_obj (t_to_js x11017) [||])
  end
 and
  WebGLShader:sig
                type t = [ `WebGLShader ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `WebGLShader ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `WebGLShader ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `WebGLShader ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `WebGLShader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11019 : Ojs.t) -> t_of_js x11019
    and t_0_to_js : t_0 -> Ojs.t = fun (x11018 : t) -> t_to_js x11018
    type tags = [ `WebGLShader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11022 : Ojs.t) -> intf_of_js __tags_of_js x11022
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11020 : __tags intf) -> intf_to_js __tags_to_js x11020
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLShader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLShader") [||])
  end
module WEBGL_debug_shaders =
  struct
    type t = [ `WEBGL_debug_shaders ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11025 : Ojs.t) -> t_of_js x11025
    and t_0_to_js : t_0 -> Ojs.t = fun (x11024 : t) -> t_to_js x11024
    type tags = [ `WEBGL_debug_shaders ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11028 : Ojs.t) -> intf_of_js __tags_of_js x11028
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11026 : __tags intf) -> intf_to_js __tags_to_js x11026
    let (getTranslatedShaderSource :
      'tags this -> shader:WebGLShader.t -> string) =
      fun (x11031 : 'tags this) ->
        fun ~shader:(x11030 : WebGLShader.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11031)
               "getTranslatedShaderSource" [|(WebGLShader.t_to_js x11030)|])
    let cast_from = Obj.magic
  end
module WEBGL_debug_renderer_info =
  struct
    type t = [ `WEBGL_debug_renderer_info ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11034 : Ojs.t) -> t_of_js x11034
    and t_0_to_js : t_0 -> Ojs.t = fun (x11033 : t) -> t_to_js x11033
    type tags = [ `WEBGL_debug_renderer_info ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11037 : Ojs.t) -> intf_of_js __tags_of_js x11037
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11035 : __tags intf) -> intf_to_js __tags_to_js x11035
    let (get_UNMASKED_RENDERER_WEBGL : 'tags this -> GLenum.t) =
      fun (x11039 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11039)
             "UNMASKED_RENDERER_WEBGL")
    let (get_UNMASKED_VENDOR_WEBGL : 'tags this -> GLenum.t) =
      fun (x11041 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11041)
             "UNMASKED_VENDOR_WEBGL")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc_srgb =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc_srgb ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11044 : Ojs.t) -> t_of_js x11044
    and t_0_to_js : t_0 -> Ojs.t = fun (x11043 : t) -> t_to_js x11043
    type tags = [ `WEBGL_compressed_texture_s3tc_srgb ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11047 : Ojs.t) -> intf_of_js __tags_of_js x11047
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11045 : __tags intf) -> intf_to_js __tags_to_js x11045
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x11049 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11049)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x11051 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11051)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x11053 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11053)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_SRGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x11055 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11055)
             "COMPRESSED_SRGB_S3TC_DXT1_EXT")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11058 : Ojs.t) -> t_of_js x11058
    and t_0_to_js : t_0 -> Ojs.t = fun (x11057 : t) -> t_to_js x11057
    type tags = [ `WEBGL_compressed_texture_s3tc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11061 : Ojs.t) -> intf_of_js __tags_of_js x11061
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11059 : __tags intf) -> intf_to_js __tags_to_js x11059
    let (get_COMPRESSED_RGBA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x11063 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11063)
             "COMPRESSED_RGBA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x11065 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11065)
             "COMPRESSED_RGBA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x11067 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11067)
             "COMPRESSED_RGBA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_RGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x11069 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11069)
             "COMPRESSED_RGB_S3TC_DXT1_EXT")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_pvrtc =
  struct
    type t = [ `WEBGL_compressed_texture_pvrtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11072 : Ojs.t) -> t_of_js x11072
    and t_0_to_js : t_0 -> Ojs.t = fun (x11071 : t) -> t_to_js x11071
    type tags = [ `WEBGL_compressed_texture_pvrtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11075 : Ojs.t) -> intf_of_js __tags_of_js x11075
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11073 : __tags intf) -> intf_to_js __tags_to_js x11073
    let (get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x11077 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11077)
             "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x11079 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11079)
             "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x11081 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11081)
             "COMPRESSED_RGB_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x11083 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11083)
             "COMPRESSED_RGB_PVRTC_4BPPV1_IMG")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc1 =
  struct
    type t = [ `WEBGL_compressed_texture_etc1 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11086 : Ojs.t) -> t_of_js x11086
    and t_0_to_js : t_0 -> Ojs.t = fun (x11085 : t) -> t_to_js x11085
    type tags = [ `WEBGL_compressed_texture_etc1 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11089 : Ojs.t) -> intf_of_js __tags_of_js x11089
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11087 : __tags intf) -> intf_to_js __tags_to_js x11087
    let (get_COMPRESSED_RGB_ETC1_WEBGL : 'tags this -> GLenum.t) =
      fun (x11091 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11091)
             "COMPRESSED_RGB_ETC1_WEBGL")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc =
  struct
    type t = [ `WEBGL_compressed_texture_etc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11094 : Ojs.t) -> t_of_js x11094
    and t_0_to_js : t_0 -> Ojs.t = fun (x11093 : t) -> t_to_js x11093
    type tags = [ `WEBGL_compressed_texture_etc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11097 : Ojs.t) -> intf_of_js __tags_of_js x11097
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11095 : __tags intf) -> intf_to_js __tags_to_js x11095
    let (get_COMPRESSED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x11099 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11099)
             "COMPRESSED_R11_EAC")
    let (get_COMPRESSED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x11101 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11101)
             "COMPRESSED_RG11_EAC")
    let (get_COMPRESSED_RGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x11103 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11103)
             "COMPRESSED_RGB8_ETC2")
    let (get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x11105 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11105)
             "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (get_COMPRESSED_RGBA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x11107 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11107)
             "COMPRESSED_RGBA8_ETC2_EAC")
    let (get_COMPRESSED_SIGNED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x11109 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11109)
             "COMPRESSED_SIGNED_R11_EAC")
    let (get_COMPRESSED_SIGNED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x11111 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11111)
             "COMPRESSED_SIGNED_RG11_EAC")
    let (get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x11113 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11113)
             "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")
    let (get_COMPRESSED_SRGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x11115 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11115)
             "COMPRESSED_SRGB8_ETC2")
    let (get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x11117 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11117)
             "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_astc =
  struct
    type t = [ `WEBGL_compressed_texture_astc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11120 : Ojs.t) -> t_of_js x11120
    and t_0_to_js : t_0 -> Ojs.t = fun (x11119 : t) -> t_to_js x11119
    type tags = [ `WEBGL_compressed_texture_astc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11123 : Ojs.t) -> intf_of_js __tags_of_js x11123
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11121 : __tags intf) -> intf_to_js __tags_to_js x11121
    let (getSupportedProfiles : 'tags this -> string list) =
      fun (x11125 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x11125) "getSupportedProfiles" [||])
    let (get_COMPRESSED_RGBA_ASTC_10x10_KHR : 'tags this -> GLenum.t) =
      fun (x11128 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11128)
             "COMPRESSED_RGBA_ASTC_10x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x5_KHR : 'tags this -> GLenum.t) =
      fun (x11130 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11130)
             "COMPRESSED_RGBA_ASTC_10x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x6_KHR : 'tags this -> GLenum.t) =
      fun (x11132 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11132)
             "COMPRESSED_RGBA_ASTC_10x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x8_KHR : 'tags this -> GLenum.t) =
      fun (x11134 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11134)
             "COMPRESSED_RGBA_ASTC_10x8_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x10_KHR : 'tags this -> GLenum.t) =
      fun (x11136 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11136)
             "COMPRESSED_RGBA_ASTC_12x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x12_KHR : 'tags this -> GLenum.t) =
      fun (x11138 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11138)
             "COMPRESSED_RGBA_ASTC_12x12_KHR")
    let (get_COMPRESSED_RGBA_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x11140 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11140)
             "COMPRESSED_RGBA_ASTC_4x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x11142 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11142)
             "COMPRESSED_RGBA_ASTC_5x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x11144 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11144)
             "COMPRESSED_RGBA_ASTC_5x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x11146 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11146)
             "COMPRESSED_RGBA_ASTC_6x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x11148 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11148)
             "COMPRESSED_RGBA_ASTC_6x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x11150 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11150)
             "COMPRESSED_RGBA_ASTC_8x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x11152 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11152)
             "COMPRESSED_RGBA_ASTC_8x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x11154 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11154)
             "COMPRESSED_RGBA_ASTC_8x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x11156 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11156)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : 'tags this -> GLenum.t)
      =
      fun (x11158 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11158)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : 'tags this -> GLenum.t)
      =
      fun (x11160 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11160)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : 'tags this -> GLenum.t)
      =
      fun (x11162 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11162)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x11164 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11164)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : 'tags this -> GLenum.t)
      =
      fun (x11166 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11166)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x11168 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11168)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x11170 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11170)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x11172 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11172)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x11174 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11174)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x11176 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11176)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x11178 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11178)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x11180 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11180)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x11182 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11182)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")
    let cast_from = Obj.magic
  end
module WEBGL_color_buffer_float =
  struct
    type t = [ `WEBGL_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11185 : Ojs.t) -> t_of_js x11185
    and t_0_to_js : t_0 -> Ojs.t = fun (x11184 : t) -> t_to_js x11184
    type tags = [ `WEBGL_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11188 : Ojs.t) -> intf_of_js __tags_of_js x11188
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11186 : __tags intf) -> intf_to_js __tags_to_js x11186
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x11190 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11190)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGBA32F_EXT : 'tags this -> GLenum.t) =
      fun (x11192 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11192) "RGBA32F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x11194 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11194)
             "UNSIGNED_NORMALIZED_EXT")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface124:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLTexture.t
                          val set_prototype : t -> WebGLTexture.t -> unit
                          val create : t -> WebGLTexture.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x11197 : Ojs.t) -> x11197
    and t_to_js : t -> Ojs.t = fun (x11196 : Ojs.t) -> x11196
    let (get_prototype : t -> WebGLTexture.t) =
      fun (x11198 : t) ->
        WebGLTexture.t_of_js
          (Ojs.get_prop_ascii (t_to_js x11198) "prototype")
    let (set_prototype : t -> WebGLTexture.t -> unit) =
      fun (x11199 : t) ->
        fun (x11200 : WebGLTexture.t) ->
          Ojs.set_prop_ascii (t_to_js x11199) "prototype"
            (WebGLTexture.t_to_js x11200)
    let (create : t -> WebGLTexture.t) =
      fun (x11201 : t) ->
        WebGLTexture.t_of_js (Ojs.new_obj (t_to_js x11201) [||])
  end
 and
  WebGLTexture:sig
                 type t = [ `WebGLTexture ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `WebGLTexture ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `WebGLTexture ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `WebGLTexture ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `WebGLTexture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11203 : Ojs.t) -> t_of_js x11203
    and t_0_to_js : t_0 -> Ojs.t = fun (x11202 : t) -> t_to_js x11202
    type tags = [ `WebGLTexture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11206 : Ojs.t) -> intf_of_js __tags_of_js x11206
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11204 : __tags intf) -> intf_to_js __tags_to_js x11204
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLTexture") [||])
  end
module OVR_multiview2 =
  struct
    type t = [ `OVR_multiview2 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11209 : Ojs.t) -> t_of_js x11209
    and t_0_to_js : t_0 -> Ojs.t = fun (x11208 : t) -> t_to_js x11208
    type tags = [ `OVR_multiview2 ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11212 : Ojs.t) -> intf_of_js __tags_of_js x11212
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11210 : __tags intf) -> intf_to_js __tags_to_js x11210
    let (framebufferTextureMultiviewOVR :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t or_null ->
              level:GLint.t ->
                baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit)
      =
      fun (x11221 : 'tags this) ->
        fun ~target:(x11214 : GLenum.t) ->
          fun ~attachment:(x11215 : GLenum.t) ->
            fun ~texture:(x11216 : WebGLTexture.t or_null) ->
              fun ~level:(x11218 : GLint.t) ->
                fun ~baseViewIndex:(x11219 : GLint.t) ->
                  fun ~numViews:(x11220 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x11221)
                         "framebufferTextureMultiviewOVR"
                         [|(GLenum.t_to_js x11214);(GLenum.t_to_js x11215);(
                           or_null_to_js WebGLTexture.t_to_js x11216);(
                           GLint.t_to_js x11218);(GLint.t_to_js x11219);(
                           GLsizei.t_to_js x11220)|])
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :
      'tags this -> GLenum.t) =
      fun (x11223 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11223)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :
      'tags this -> GLenum.t) =
      fun (x11225 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11225)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR")
    let (get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :
      'tags this -> GLenum.t) =
      fun (x11227 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11227)
             "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR")
    let (get_MAX_VIEWS_OVR : 'tags this -> GLenum.t) =
      fun (x11229 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11229) "MAX_VIEWS_OVR")
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObjectOES =
  struct
    type t = [ `WebGLVertexArrayObjectOES ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11232 : Ojs.t) -> t_of_js x11232
    and t_0_to_js : t_0 -> Ojs.t = fun (x11231 : t) -> t_to_js x11231
    type tags = [ `WebGLVertexArrayObjectOES ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11235 : Ojs.t) -> intf_of_js __tags_of_js x11235
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11233 : __tags intf) -> intf_to_js __tags_to_js x11233
    let cast_from = Obj.magic
  end
module OES_vertex_array_object =
  struct
    type t = [ `OES_vertex_array_object ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11238 : Ojs.t) -> t_of_js x11238
    and t_0_to_js : t_0 -> Ojs.t = fun (x11237 : t) -> t_to_js x11237
    type tags = [ `OES_vertex_array_object ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_vertex_array_object ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11241 : Ojs.t) -> intf_of_js __tags_of_js x11241
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11239 : __tags intf) -> intf_to_js __tags_to_js x11239
    let (bindVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t or_null -> unit)
      =
      fun (x11245 : 'tags this) ->
        fun ~arrayObject:(x11243 : WebGLVertexArrayObjectOES.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11245) "bindVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x11243)|])
    let (createVertexArrayOES :
      'tags this -> WebGLVertexArrayObjectOES.t or_null) =
      fun (x11247 : 'tags this) ->
        or_null_of_js WebGLVertexArrayObjectOES.t_of_js
          (Ojs.call (this_to_js Obj.magic x11247) "createVertexArrayOES" [||])
    let (deleteVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t or_null -> unit)
      =
      fun (x11252 : 'tags this) ->
        fun ~arrayObject:(x11250 : WebGLVertexArrayObjectOES.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11252) "deleteVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x11250)|])
    let (isVertexArrayOES :
      'tags this ->
        arrayObject:WebGLVertexArrayObjectOES.t or_null -> GLboolean.t)
      =
      fun (x11256 : 'tags this) ->
        fun ~arrayObject:(x11254 : WebGLVertexArrayObjectOES.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11256) "isVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x11254)|])
    let (get_VERTEX_ARRAY_BINDING_OES : 'tags this -> GLenum.t) =
      fun (x11258 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11258)
             "VERTEX_ARRAY_BINDING_OES")
    let cast_from = Obj.magic
  end
module OES_texture_half_float_linear =
  struct
    type t = [ `OES_texture_half_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11261 : Ojs.t) -> t_of_js x11261
    and t_0_to_js : t_0 -> Ojs.t = fun (x11260 : t) -> t_to_js x11260
    type tags = [ `OES_texture_half_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11264 : Ojs.t) -> intf_of_js __tags_of_js x11264
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11262 : __tags intf) -> intf_to_js __tags_to_js x11262
    let cast_from = Obj.magic
  end
module OES_texture_half_float =
  struct
    type t = [ `OES_texture_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11267 : Ojs.t) -> t_of_js x11267
    and t_0_to_js : t_0 -> Ojs.t = fun (x11266 : t) -> t_to_js x11266
    type tags = [ `OES_texture_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11270 : Ojs.t) -> intf_of_js __tags_of_js x11270
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11268 : __tags intf) -> intf_to_js __tags_to_js x11268
    let (get_HALF_FLOAT_OES : 'tags this -> GLenum.t) =
      fun (x11272 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11272) "HALF_FLOAT_OES")
    let cast_from = Obj.magic
  end
module OES_texture_float_linear =
  struct
    type t = [ `OES_texture_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11275 : Ojs.t) -> t_of_js x11275
    and t_0_to_js : t_0 -> Ojs.t = fun (x11274 : t) -> t_to_js x11274
    type tags = [ `OES_texture_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11278 : Ojs.t) -> intf_of_js __tags_of_js x11278
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11276 : __tags intf) -> intf_to_js __tags_to_js x11276
    let cast_from = Obj.magic
  end
module OES_texture_float =
  struct
    type t = [ `OES_texture_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11281 : Ojs.t) -> t_of_js x11281
    and t_0_to_js : t_0 -> Ojs.t = fun (x11280 : t) -> t_to_js x11280
    type tags = [ `OES_texture_float ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11284 : Ojs.t) -> intf_of_js __tags_of_js x11284
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11282 : __tags intf) -> intf_to_js __tags_to_js x11282
    let cast_from = Obj.magic
  end
module OES_standard_derivatives =
  struct
    type t = [ `OES_standard_derivatives ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11287 : Ojs.t) -> t_of_js x11287
    and t_0_to_js : t_0 -> Ojs.t = fun (x11286 : t) -> t_to_js x11286
    type tags = [ `OES_standard_derivatives ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_standard_derivatives ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11290 : Ojs.t) -> intf_of_js __tags_of_js x11290
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11288 : __tags intf) -> intf_to_js __tags_to_js x11288
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES : 'tags this -> GLenum.t) =
      fun (x11292 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11292)
             "FRAGMENT_SHADER_DERIVATIVE_HINT_OES")
    let cast_from = Obj.magic
  end
module OES_element_index_uint =
  struct
    type t = [ `OES_element_index_uint ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11295 : Ojs.t) -> t_of_js x11295
    and t_0_to_js : t_0 -> Ojs.t = fun (x11294 : t) -> t_to_js x11294
    type tags = [ `OES_element_index_uint ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_element_index_uint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11298 : Ojs.t) -> intf_of_js __tags_of_js x11298
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11296 : __tags intf) -> intf_to_js __tags_to_js x11296
    let cast_from = Obj.magic
  end
module KHR_parallel_shader_compile =
  struct
    type t = [ `KHR_parallel_shader_compile ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11301 : Ojs.t) -> t_of_js x11301
    and t_0_to_js : t_0 -> Ojs.t = fun (x11300 : t) -> t_to_js x11300
    type tags = [ `KHR_parallel_shader_compile ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11304 : Ojs.t) -> intf_of_js __tags_of_js x11304
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11302 : __tags intf) -> intf_to_js __tags_to_js x11302
    let (get_COMPLETION_STATUS_KHR : 'tags this -> GLenum.t) =
      fun (x11306 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11306)
             "COMPLETION_STATUS_KHR")
    let cast_from = Obj.magic
  end
module GLclampf =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x11309 : Ojs.t) -> Ojs.float_of_js x11309
    and t_to_js : t -> Ojs.t = fun (x11308 : float) -> Ojs.float_to_js x11308
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11311 : Ojs.t) -> t_of_js x11311
    and t_0_to_js : t_0 -> Ojs.t = fun (x11310 : t) -> t_to_js x11310
  end
module EXT_texture_filter_anisotropic =
  struct
    type t = [ `EXT_texture_filter_anisotropic ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11313 : Ojs.t) -> t_of_js x11313
    and t_0_to_js : t_0 -> Ojs.t = fun (x11312 : t) -> t_to_js x11312
    type tags = [ `EXT_texture_filter_anisotropic ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11316 : Ojs.t) -> intf_of_js __tags_of_js x11316
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11314 : __tags intf) -> intf_to_js __tags_to_js x11314
    let (get_MAX_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x11318 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11318)
             "MAX_TEXTURE_MAX_ANISOTROPY_EXT")
    let (get_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x11320 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11320)
             "TEXTURE_MAX_ANISOTROPY_EXT")
    let cast_from = Obj.magic
  end
module EXT_shader_texture_lod =
  struct
    type t = [ `EXT_shader_texture_lod ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11323 : Ojs.t) -> t_of_js x11323
    and t_0_to_js : t_0 -> Ojs.t = fun (x11322 : t) -> t_to_js x11322
    type tags = [ `EXT_shader_texture_lod ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11326 : Ojs.t) -> intf_of_js __tags_of_js x11326
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11324 : __tags intf) -> intf_to_js __tags_to_js x11324
    let cast_from = Obj.magic
  end
module EXT_sRGB =
  struct
    type t = [ `EXT_sRGB ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11329 : Ojs.t) -> t_of_js x11329
    and t_0_to_js : t_0 -> Ojs.t = fun (x11328 : t) -> t_to_js x11328
    type tags = [ `EXT_sRGB ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11332 : Ojs.t) -> intf_of_js __tags_of_js x11332
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11330 : __tags intf) -> intf_to_js __tags_to_js x11330
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT :
      'tags this -> GLenum.t) =
      fun (x11334 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11334)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT")
    let (get_SRGB8_ALPHA8_EXT : 'tags this -> GLenum.t) =
      fun (x11336 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11336)
             "SRGB8_ALPHA8_EXT")
    let (get_SRGB_ALPHA_EXT : 'tags this -> GLenum.t) =
      fun (x11338 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11338) "SRGB_ALPHA_EXT")
    let (get_SRGB_EXT : 'tags this -> GLenum.t) =
      fun (x11340 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11340) "SRGB_EXT")
    let cast_from = Obj.magic
  end
module EXT_frag_depth =
  struct
    type t = [ `EXT_frag_depth ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11343 : Ojs.t) -> t_of_js x11343
    and t_0_to_js : t_0 -> Ojs.t = fun (x11342 : t) -> t_to_js x11342
    type tags = [ `EXT_frag_depth ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11346 : Ojs.t) -> intf_of_js __tags_of_js x11346
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11344 : __tags intf) -> intf_to_js __tags_to_js x11344
    let cast_from = Obj.magic
  end
module EXT_float_blend =
  struct
    type t = [ `EXT_float_blend ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11349 : Ojs.t) -> t_of_js x11349
    and t_0_to_js : t_0 -> Ojs.t = fun (x11348 : t) -> t_to_js x11348
    type tags = [ `EXT_float_blend ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11352 : Ojs.t) -> intf_of_js __tags_of_js x11352
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11350 : __tags intf) -> intf_to_js __tags_to_js x11350
    let cast_from = Obj.magic
  end
module EXT_color_buffer_half_float =
  struct
    type t = [ `EXT_color_buffer_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11355 : Ojs.t) -> t_of_js x11355
    and t_0_to_js : t_0 -> Ojs.t = fun (x11354 : t) -> t_to_js x11354
    type tags = [ `EXT_color_buffer_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11358 : Ojs.t) -> intf_of_js __tags_of_js x11358
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11356 : __tags intf) -> intf_to_js __tags_to_js x11356
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x11360 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11360)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGB16F_EXT : 'tags this -> GLenum.t) =
      fun (x11362 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11362) "RGB16F_EXT")
    let (get_RGBA16F_EXT : 'tags this -> GLenum.t) =
      fun (x11364 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11364) "RGBA16F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x11366 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11366)
             "UNSIGNED_NORMALIZED_EXT")
    let cast_from = Obj.magic
  end
module EXT_color_buffer_float =
  struct
    type t = [ `EXT_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11369 : Ojs.t) -> t_of_js x11369
    and t_0_to_js : t_0 -> Ojs.t = fun (x11368 : t) -> t_to_js x11368
    type tags = [ `EXT_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11372 : Ojs.t) -> intf_of_js __tags_of_js x11372
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11370 : __tags intf) -> intf_to_js __tags_to_js x11370
    let cast_from = Obj.magic
  end
module EXT_blend_minmax =
  struct
    type t = [ `EXT_blend_minmax ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11375 : Ojs.t) -> t_of_js x11375
    and t_0_to_js : t_0 -> Ojs.t = fun (x11374 : t) -> t_to_js x11374
    type tags = [ `EXT_blend_minmax ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11378 : Ojs.t) -> intf_of_js __tags_of_js x11378
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11376 : __tags intf) -> intf_to_js __tags_to_js x11376
    let (get_MAX_EXT : 'tags this -> GLenum.t) =
      fun (x11380 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11380) "MAX_EXT")
    let (get_MIN_EXT : 'tags this -> GLenum.t) =
      fun (x11382 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11382) "MIN_EXT")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface116:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLProgram.t
                          val set_prototype : t -> WebGLProgram.t -> unit
                          val create : t -> WebGLProgram.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x11385 : Ojs.t) -> x11385
    and t_to_js : t -> Ojs.t = fun (x11384 : Ojs.t) -> x11384
    let (get_prototype : t -> WebGLProgram.t) =
      fun (x11386 : t) ->
        WebGLProgram.t_of_js
          (Ojs.get_prop_ascii (t_to_js x11386) "prototype")
    let (set_prototype : t -> WebGLProgram.t -> unit) =
      fun (x11387 : t) ->
        fun (x11388 : WebGLProgram.t) ->
          Ojs.set_prop_ascii (t_to_js x11387) "prototype"
            (WebGLProgram.t_to_js x11388)
    let (create : t -> WebGLProgram.t) =
      fun (x11389 : t) ->
        WebGLProgram.t_of_js (Ojs.new_obj (t_to_js x11389) [||])
  end
 and
  WebGLProgram:sig
                 type t = [ `WebGLProgram ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `WebGLProgram ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `WebGLProgram ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `WebGLProgram ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `WebGLProgram ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11391 : Ojs.t) -> t_of_js x11391
    and t_0_to_js : t_0 -> Ojs.t = fun (x11390 : t) -> t_to_js x11390
    type tags = [ `WebGLProgram ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11394 : Ojs.t) -> intf_of_js __tags_of_js x11394
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11392 : __tags intf) -> intf_to_js __tags_to_js x11392
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLProgram") [||])
  end
module rec
  AnonymousInterface113:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLBuffer.t
                          val set_prototype : t -> WebGLBuffer.t -> unit
                          val create : t -> WebGLBuffer.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x11397 : Ojs.t) -> x11397
    and t_to_js : t -> Ojs.t = fun (x11396 : Ojs.t) -> x11396
    let (get_prototype : t -> WebGLBuffer.t) =
      fun (x11398 : t) ->
        WebGLBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x11398) "prototype")
    let (set_prototype : t -> WebGLBuffer.t -> unit) =
      fun (x11399 : t) ->
        fun (x11400 : WebGLBuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x11399) "prototype"
            (WebGLBuffer.t_to_js x11400)
    let (create : t -> WebGLBuffer.t) =
      fun (x11401 : t) ->
        WebGLBuffer.t_of_js (Ojs.new_obj (t_to_js x11401) [||])
  end
 and
  WebGLBuffer:sig
                type t = [ `WebGLBuffer ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `WebGLBuffer ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `WebGLBuffer ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `WebGLBuffer ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `WebGLBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11403 : Ojs.t) -> t_of_js x11403
    and t_0_to_js : t_0 -> Ojs.t = fun (x11402 : t) -> t_to_js x11402
    type tags = [ `WebGLBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11406 : Ojs.t) -> intf_of_js __tags_of_js x11406
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11404 : __tags intf) -> intf_to_js __tags_to_js x11404
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLBuffer") [||])
  end
module rec
  AnonymousInterface112:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLActiveInfo.t
                          val set_prototype : t -> WebGLActiveInfo.t -> unit
                          val create : t -> WebGLActiveInfo.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x11409 : Ojs.t) -> x11409
    and t_to_js : t -> Ojs.t = fun (x11408 : Ojs.t) -> x11408
    let (get_prototype : t -> WebGLActiveInfo.t) =
      fun (x11410 : t) ->
        WebGLActiveInfo.t_of_js
          (Ojs.get_prop_ascii (t_to_js x11410) "prototype")
    let (set_prototype : t -> WebGLActiveInfo.t -> unit) =
      fun (x11411 : t) ->
        fun (x11412 : WebGLActiveInfo.t) ->
          Ojs.set_prop_ascii (t_to_js x11411) "prototype"
            (WebGLActiveInfo.t_to_js x11412)
    let (create : t -> WebGLActiveInfo.t) =
      fun (x11413 : t) ->
        WebGLActiveInfo.t_of_js (Ojs.new_obj (t_to_js x11413) [||])
  end
 and
  WebGLActiveInfo:sig
                    type t = [ `WebGLActiveInfo ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `WebGLActiveInfo ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `WebGLActiveInfo ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `WebGLActiveInfo ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_name : 'tags this -> string
                    val get_size : 'tags this -> GLint.t
                    val get_type : 'tags this -> GLenum.t
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create : unit -> t
                  end =
  struct
    type t = [ `WebGLActiveInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11415 : Ojs.t) -> t_of_js x11415
    and t_0_to_js : t_0 -> Ojs.t = fun (x11414 : t) -> t_to_js x11414
    type tags = [ `WebGLActiveInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11418 : Ojs.t) -> intf_of_js __tags_of_js x11418
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11416 : __tags intf) -> intf_to_js __tags_to_js x11416
    let (get_name : 'tags this -> string) =
      fun (x11420 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11420) "name")
    let (get_size : 'tags this -> GLint.t) =
      fun (x11422 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11422) "size")
    let (get_type : 'tags this -> GLenum.t) =
      fun (x11424 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11424) "type")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") [||])
  end
module GLbitfield =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x11427 : Ojs.t) -> Ojs.float_of_js x11427
    and t_to_js : t -> Ojs.t = fun (x11426 : float) -> Ojs.float_to_js x11426
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11429 : Ojs.t) -> t_of_js x11429
    and t_0_to_js : t_0 -> Ojs.t = fun (x11428 : t) -> t_to_js x11428
  end
module GLuint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x11431 : Ojs.t) -> Ojs.float_of_js x11431
    and t_to_js : t -> Ojs.t = fun (x11430 : float) -> Ojs.float_to_js x11430
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11433 : Ojs.t) -> t_of_js x11433
    and t_0_to_js : t_0 -> Ojs.t = fun (x11432 : t) -> t_to_js x11432
  end
module ANGLE_instanced_arrays =
  struct
    type t = [ `ANGLE_instanced_arrays ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11435 : Ojs.t) -> t_of_js x11435
    and t_0_to_js : t_0 -> Ojs.t = fun (x11434 : t) -> t_to_js x11434
    type tags = [ `ANGLE_instanced_arrays ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11438 : Ojs.t) -> intf_of_js __tags_of_js x11438
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11436 : __tags intf) -> intf_to_js __tags_to_js x11436
    let (drawArraysInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit)
      =
      fun (x11444 : 'tags this) ->
        fun ~mode:(x11440 : GLenum.t) ->
          fun ~first:(x11441 : GLint.t) ->
            fun ~count:(x11442 : GLsizei.t) ->
              fun ~primcount:(x11443 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11444)
                     "drawArraysInstancedANGLE"
                     [|(GLenum.t_to_js x11440);(GLint.t_to_js x11441);(
                       GLsizei.t_to_js x11442);(GLsizei.t_to_js x11443)|])
    let (drawElementsInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> primcount:GLsizei.t -> unit)
      =
      fun (x11451 : 'tags this) ->
        fun ~mode:(x11446 : GLenum.t) ->
          fun ~count:(x11447 : GLsizei.t) ->
            fun ~type_:(x11448 : GLenum.t) ->
              fun ~offset:(x11449 : GLintptr.t) ->
                fun ~primcount:(x11450 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x11451)
                       "drawElementsInstancedANGLE"
                       [|(GLenum.t_to_js x11446);(GLsizei.t_to_js x11447);(
                         GLenum.t_to_js x11448);(GLintptr.t_to_js x11449);(
                         GLsizei.t_to_js x11450)|])
    let (vertexAttribDivisorANGLE :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x11455 : 'tags this) ->
        fun ~index:(x11453 : GLuint.t) ->
          fun ~divisor:(x11454 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11455)
                 "vertexAttribDivisorANGLE"
                 [|(GLuint.t_to_js x11453);(GLuint.t_to_js x11454)|])
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE : 'tags this -> GLenum.t) =
      fun (x11457 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11457)
             "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")
    let cast_from = Obj.magic
  end
module WebGLRenderingContextBase =
  struct
    type t = [ `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11460 : Ojs.t) -> t_of_js x11460
    and t_0_to_js : t_0 -> Ojs.t = fun (x11459 : t) -> t_to_js x11459
    type tags = [ `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11463 : Ojs.t) -> intf_of_js __tags_of_js x11463
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11461 : __tags intf) -> intf_to_js __tags_to_js x11461
    let (get_drawingBufferHeight : 'tags this -> GLsizei.t) =
      fun (x11465 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11465)
             "drawingBufferHeight")
    let (get_drawingBufferWidth : 'tags this -> GLsizei.t) =
      fun (x11467 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11467)
             "drawingBufferWidth")
    let (activeTexture : 'tags this -> texture:GLenum.t -> unit) =
      fun (x11470 : 'tags this) ->
        fun ~texture:(x11469 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11470) "activeTexture"
               [|(GLenum.t_to_js x11469)|])
    let (attachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x11474 : 'tags this) ->
        fun ~program:(x11472 : WebGLProgram.t) ->
          fun ~shader:(x11473 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11474) "attachShader"
                 [|(WebGLProgram.t_to_js x11472);(WebGLShader.t_to_js x11473)|])
    let (bindAttribLocation :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit)
      =
      fun (x11479 : 'tags this) ->
        fun ~program:(x11476 : WebGLProgram.t) ->
          fun ~index:(x11477 : GLuint.t) ->
            fun ~name:(x11478 : string) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11479) "bindAttribLocation"
                   [|(WebGLProgram.t_to_js x11476);(GLuint.t_to_js x11477);(
                     Ojs.string_to_js x11478)|])
    let (bindBuffer :
      'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t or_null -> unit)
      =
      fun (x11484 : 'tags this) ->
        fun ~target:(x11481 : GLenum.t) ->
          fun ~buffer:(x11482 : WebGLBuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11484) "bindBuffer"
                 [|(GLenum.t_to_js x11481);(or_null_to_js WebGLBuffer.t_to_js
                                              x11482)|])
    let (bindFramebuffer :
      'tags this ->
        target:GLenum.t -> framebuffer:WebGLFramebuffer.t or_null -> unit)
      =
      fun (x11489 : 'tags this) ->
        fun ~target:(x11486 : GLenum.t) ->
          fun ~framebuffer:(x11487 : WebGLFramebuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11489) "bindFramebuffer"
                 [|(GLenum.t_to_js x11486);(or_null_to_js
                                              WebGLFramebuffer.t_to_js x11487)|])
    let (bindRenderbuffer :
      'tags this ->
        target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t or_null -> unit)
      =
      fun (x11494 : 'tags this) ->
        fun ~target:(x11491 : GLenum.t) ->
          fun ~renderbuffer:(x11492 : WebGLRenderbuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11494) "bindRenderbuffer"
                 [|(GLenum.t_to_js x11491);(or_null_to_js
                                              WebGLRenderbuffer.t_to_js
                                              x11492)|])
    let (bindTexture :
      'tags this -> target:GLenum.t -> texture:WebGLTexture.t or_null -> unit)
      =
      fun (x11499 : 'tags this) ->
        fun ~target:(x11496 : GLenum.t) ->
          fun ~texture:(x11497 : WebGLTexture.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11499) "bindTexture"
                 [|(GLenum.t_to_js x11496);(or_null_to_js
                                              WebGLTexture.t_to_js x11497)|])
    let (blendColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x11505 : 'tags this) ->
        fun ~red:(x11501 : GLclampf.t) ->
          fun ~green:(x11502 : GLclampf.t) ->
            fun ~blue:(x11503 : GLclampf.t) ->
              fun ~alpha:(x11504 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11505) "blendColor"
                     [|(GLclampf.t_to_js x11501);(GLclampf.t_to_js x11502);(
                       GLclampf.t_to_js x11503);(GLclampf.t_to_js x11504)|])
    let (blendEquation : 'tags this -> mode:GLenum.t -> unit) =
      fun (x11508 : 'tags this) ->
        fun ~mode:(x11507 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11508) "blendEquation"
               [|(GLenum.t_to_js x11507)|])
    let (blendEquationSeparate :
      'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit) =
      fun (x11512 : 'tags this) ->
        fun ~modeRGB:(x11510 : GLenum.t) ->
          fun ~modeAlpha:(x11511 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11512) "blendEquationSeparate"
                 [|(GLenum.t_to_js x11510);(GLenum.t_to_js x11511)|])
    let (blendFunc :
      'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit) =
      fun (x11516 : 'tags this) ->
        fun ~sfactor:(x11514 : GLenum.t) ->
          fun ~dfactor:(x11515 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11516) "blendFunc"
                 [|(GLenum.t_to_js x11514);(GLenum.t_to_js x11515)|])
    let (blendFuncSeparate :
      'tags this ->
        srcRGB:GLenum.t ->
          dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit)
      =
      fun (x11522 : 'tags this) ->
        fun ~srcRGB:(x11518 : GLenum.t) ->
          fun ~dstRGB:(x11519 : GLenum.t) ->
            fun ~srcAlpha:(x11520 : GLenum.t) ->
              fun ~dstAlpha:(x11521 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11522) "blendFuncSeparate"
                     [|(GLenum.t_to_js x11518);(GLenum.t_to_js x11519);(
                       GLenum.t_to_js x11520);(GLenum.t_to_js x11521)|])
    let (checkFramebufferStatus : 'tags this -> target:GLenum.t -> GLenum.t)
      =
      fun (x11525 : 'tags this) ->
        fun ~target:(x11524 : GLenum.t) ->
          GLenum.t_of_js
            (Ojs.call (this_to_js Obj.magic x11525) "checkFramebufferStatus"
               [|(GLenum.t_to_js x11524)|])
    let (clear : 'tags this -> mask:GLbitfield.t -> unit) =
      fun (x11528 : 'tags this) ->
        fun ~mask:(x11527 : GLbitfield.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11528) "clear"
               [|(GLbitfield.t_to_js x11527)|])
    let (clearColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x11534 : 'tags this) ->
        fun ~red:(x11530 : GLclampf.t) ->
          fun ~green:(x11531 : GLclampf.t) ->
            fun ~blue:(x11532 : GLclampf.t) ->
              fun ~alpha:(x11533 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11534) "clearColor"
                     [|(GLclampf.t_to_js x11530);(GLclampf.t_to_js x11531);(
                       GLclampf.t_to_js x11532);(GLclampf.t_to_js x11533)|])
    let (clearDepth : 'tags this -> depth:GLclampf.t -> unit) =
      fun (x11537 : 'tags this) ->
        fun ~depth:(x11536 : GLclampf.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11537) "clearDepth"
               [|(GLclampf.t_to_js x11536)|])
    let (clearStencil : 'tags this -> s:GLint.t -> unit) =
      fun (x11540 : 'tags this) ->
        fun ~s:(x11539 : GLint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11540) "clearStencil"
               [|(GLint.t_to_js x11539)|])
    let (colorMask :
      'tags this ->
        red:GLboolean.t ->
          green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit)
      =
      fun (x11546 : 'tags this) ->
        fun ~red:(x11542 : GLboolean.t) ->
          fun ~green:(x11543 : GLboolean.t) ->
            fun ~blue:(x11544 : GLboolean.t) ->
              fun ~alpha:(x11545 : GLboolean.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11546) "colorMask"
                     [|(GLboolean.t_to_js x11542);(GLboolean.t_to_js x11543);(
                       GLboolean.t_to_js x11544);(GLboolean.t_to_js x11545)|])
    let (compileShader : 'tags this -> shader:WebGLShader.t -> unit) =
      fun (x11549 : 'tags this) ->
        fun ~shader:(x11548 : WebGLShader.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11549) "compileShader"
               [|(WebGLShader.t_to_js x11548)|])
    let (copyTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              x:GLint.t ->
                y:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t -> border:GLint.t -> unit)
      =
      fun (x11559 : 'tags this) ->
        fun ~target:(x11551 : GLenum.t) ->
          fun ~level:(x11552 : GLint.t) ->
            fun ~internalformat:(x11553 : GLenum.t) ->
              fun ~x:(x11554 : GLint.t) ->
                fun ~y:(x11555 : GLint.t) ->
                  fun ~width:(x11556 : GLsizei.t) ->
                    fun ~height:(x11557 : GLsizei.t) ->
                      fun ~border:(x11558 : GLint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x11559)
                             "copyTexImage2D"
                             [|(GLenum.t_to_js x11551);(GLint.t_to_js x11552);(
                               GLenum.t_to_js x11553);(GLint.t_to_js x11554);(
                               GLint.t_to_js x11555);(GLsizei.t_to_js x11556);(
                               GLsizei.t_to_js x11557);(GLint.t_to_js x11558)|])
    let (copyTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                x:GLint.t ->
                  y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x11569 : 'tags this) ->
        fun ~target:(x11561 : GLenum.t) ->
          fun ~level:(x11562 : GLint.t) ->
            fun ~xoffset:(x11563 : GLint.t) ->
              fun ~yoffset:(x11564 : GLint.t) ->
                fun ~x:(x11565 : GLint.t) ->
                  fun ~y:(x11566 : GLint.t) ->
                    fun ~width:(x11567 : GLsizei.t) ->
                      fun ~height:(x11568 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x11569)
                             "copyTexSubImage2D"
                             [|(GLenum.t_to_js x11561);(GLint.t_to_js x11562);(
                               GLint.t_to_js x11563);(GLint.t_to_js x11564);(
                               GLint.t_to_js x11565);(GLint.t_to_js x11566);(
                               GLsizei.t_to_js x11567);(GLsizei.t_to_js
                                                          x11568)|])
    let (createBuffer : 'tags this -> WebGLBuffer.t or_null) =
      fun (x11571 : 'tags this) ->
        or_null_of_js WebGLBuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x11571) "createBuffer" [||])
    let (createFramebuffer : 'tags this -> WebGLFramebuffer.t or_null) =
      fun (x11574 : 'tags this) ->
        or_null_of_js WebGLFramebuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x11574) "createFramebuffer" [||])
    let (createProgram : 'tags this -> WebGLProgram.t or_null) =
      fun (x11577 : 'tags this) ->
        or_null_of_js WebGLProgram.t_of_js
          (Ojs.call (this_to_js Obj.magic x11577) "createProgram" [||])
    let (createRenderbuffer : 'tags this -> WebGLRenderbuffer.t or_null) =
      fun (x11580 : 'tags this) ->
        or_null_of_js WebGLRenderbuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x11580) "createRenderbuffer" [||])
    let (createShader :
      'tags this -> type_:GLenum.t -> WebGLShader.t or_null) =
      fun (x11584 : 'tags this) ->
        fun ~type_:(x11583 : GLenum.t) ->
          or_null_of_js WebGLShader.t_of_js
            (Ojs.call (this_to_js Obj.magic x11584) "createShader"
               [|(GLenum.t_to_js x11583)|])
    let (createTexture : 'tags this -> WebGLTexture.t or_null) =
      fun (x11587 : 'tags this) ->
        or_null_of_js WebGLTexture.t_of_js
          (Ojs.call (this_to_js Obj.magic x11587) "createTexture" [||])
    let (cullFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x11591 : 'tags this) ->
        fun ~mode:(x11590 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11591) "cullFace"
               [|(GLenum.t_to_js x11590)|])
    let (deleteBuffer : 'tags this -> buffer:WebGLBuffer.t or_null -> unit) =
      fun (x11595 : 'tags this) ->
        fun ~buffer:(x11593 : WebGLBuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11595) "deleteBuffer"
               [|(or_null_to_js WebGLBuffer.t_to_js x11593)|])
    let (deleteFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t or_null -> unit) =
      fun (x11599 : 'tags this) ->
        fun ~framebuffer:(x11597 : WebGLFramebuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11599) "deleteFramebuffer"
               [|(or_null_to_js WebGLFramebuffer.t_to_js x11597)|])
    let (deleteProgram :
      'tags this -> program:WebGLProgram.t or_null -> unit) =
      fun (x11603 : 'tags this) ->
        fun ~program:(x11601 : WebGLProgram.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11603) "deleteProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x11601)|])
    let (deleteRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t or_null -> unit) =
      fun (x11607 : 'tags this) ->
        fun ~renderbuffer:(x11605 : WebGLRenderbuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11607) "deleteRenderbuffer"
               [|(or_null_to_js WebGLRenderbuffer.t_to_js x11605)|])
    let (deleteShader : 'tags this -> shader:WebGLShader.t or_null -> unit) =
      fun (x11611 : 'tags this) ->
        fun ~shader:(x11609 : WebGLShader.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11611) "deleteShader"
               [|(or_null_to_js WebGLShader.t_to_js x11609)|])
    let (deleteTexture :
      'tags this -> texture:WebGLTexture.t or_null -> unit) =
      fun (x11615 : 'tags this) ->
        fun ~texture:(x11613 : WebGLTexture.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11615) "deleteTexture"
               [|(or_null_to_js WebGLTexture.t_to_js x11613)|])
    let (depthFunc : 'tags this -> func:GLenum.t -> unit) =
      fun (x11618 : 'tags this) ->
        fun ~func:(x11617 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11618) "depthFunc"
               [|(GLenum.t_to_js x11617)|])
    let (depthMask : 'tags this -> flag:GLboolean.t -> unit) =
      fun (x11621 : 'tags this) ->
        fun ~flag:(x11620 : GLboolean.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11621) "depthMask"
               [|(GLboolean.t_to_js x11620)|])
    let (depthRange :
      'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit) =
      fun (x11625 : 'tags this) ->
        fun ~zNear:(x11623 : GLclampf.t) ->
          fun ~zFar:(x11624 : GLclampf.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11625) "depthRange"
                 [|(GLclampf.t_to_js x11623);(GLclampf.t_to_js x11624)|])
    let (detachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x11629 : 'tags this) ->
        fun ~program:(x11627 : WebGLProgram.t) ->
          fun ~shader:(x11628 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11629) "detachShader"
                 [|(WebGLProgram.t_to_js x11627);(WebGLShader.t_to_js x11628)|])
    let (disable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x11632 : 'tags this) ->
        fun ~cap:(x11631 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11632) "disable"
               [|(GLenum.t_to_js x11631)|])
    let (disableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x11635 : 'tags this) ->
        fun ~index:(x11634 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11635)
               "disableVertexAttribArray" [|(GLuint.t_to_js x11634)|])
    let (drawArrays :
      'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit)
      =
      fun (x11640 : 'tags this) ->
        fun ~mode:(x11637 : GLenum.t) ->
          fun ~first:(x11638 : GLint.t) ->
            fun ~count:(x11639 : GLsizei.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11640) "drawArrays"
                   [|(GLenum.t_to_js x11637);(GLint.t_to_js x11638);(
                     GLsizei.t_to_js x11639)|])
    let (drawElements :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x11646 : 'tags this) ->
        fun ~mode:(x11642 : GLenum.t) ->
          fun ~count:(x11643 : GLsizei.t) ->
            fun ~type_:(x11644 : GLenum.t) ->
              fun ~offset:(x11645 : GLintptr.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11646) "drawElements"
                     [|(GLenum.t_to_js x11642);(GLsizei.t_to_js x11643);(
                       GLenum.t_to_js x11644);(GLintptr.t_to_js x11645)|])
    let (enable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x11649 : 'tags this) ->
        fun ~cap:(x11648 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11649) "enable"
               [|(GLenum.t_to_js x11648)|])
    let (enableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x11652 : 'tags this) ->
        fun ~index:(x11651 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11652) "enableVertexAttribArray"
               [|(GLuint.t_to_js x11651)|])
    let (finish : 'tags this -> unit) =
      fun (x11654 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11654) "finish" [||])
    let (flush : 'tags this -> unit) =
      fun (x11656 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11656) "flush" [||])
    let (framebufferRenderbuffer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            renderbuffertarget:GLenum.t ->
              renderbuffer:WebGLRenderbuffer.t or_null -> unit)
      =
      fun (x11663 : 'tags this) ->
        fun ~target:(x11658 : GLenum.t) ->
          fun ~attachment:(x11659 : GLenum.t) ->
            fun ~renderbuffertarget:(x11660 : GLenum.t) ->
              fun ~renderbuffer:(x11661 : WebGLRenderbuffer.t or_null) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11663)
                     "framebufferRenderbuffer"
                     [|(GLenum.t_to_js x11658);(GLenum.t_to_js x11659);(
                       GLenum.t_to_js x11660);(or_null_to_js
                                                 WebGLRenderbuffer.t_to_js
                                                 x11661)|])
    let (framebufferTexture2D :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            textarget:GLenum.t ->
              texture:WebGLTexture.t or_null -> level:GLint.t -> unit)
      =
      fun (x11671 : 'tags this) ->
        fun ~target:(x11665 : GLenum.t) ->
          fun ~attachment:(x11666 : GLenum.t) ->
            fun ~textarget:(x11667 : GLenum.t) ->
              fun ~texture:(x11668 : WebGLTexture.t or_null) ->
                fun ~level:(x11670 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x11671)
                       "framebufferTexture2D"
                       [|(GLenum.t_to_js x11665);(GLenum.t_to_js x11666);(
                         GLenum.t_to_js x11667);(or_null_to_js
                                                   WebGLTexture.t_to_js
                                                   x11668);(GLint.t_to_js
                                                              x11670)|])
    let (frontFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x11674 : 'tags this) ->
        fun ~mode:(x11673 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11674) "frontFace"
               [|(GLenum.t_to_js x11673)|])
    let (generateMipmap : 'tags this -> target:GLenum.t -> unit) =
      fun (x11677 : 'tags this) ->
        fun ~target:(x11676 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11677) "generateMipmap"
               [|(GLenum.t_to_js x11676)|])
    let (getActiveAttrib :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x11681 : 'tags this) ->
        fun ~program:(x11679 : WebGLProgram.t) ->
          fun ~index:(x11680 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x11681) "getActiveAttrib"
                 [|(WebGLProgram.t_to_js x11679);(GLuint.t_to_js x11680)|])
    let (getActiveUniform :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x11686 : 'tags this) ->
        fun ~program:(x11684 : WebGLProgram.t) ->
          fun ~index:(x11685 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x11686) "getActiveUniform"
                 [|(WebGLProgram.t_to_js x11684);(GLuint.t_to_js x11685)|])
    let (getAttachedShaders :
      'tags this -> program:WebGLProgram.t -> WebGLShader.t list or_null) =
      fun (x11690 : 'tags this) ->
        fun ~program:(x11689 : WebGLProgram.t) ->
          or_null_of_js
            (fun (x11692 : Ojs.t) ->
               Ojs.list_of_js WebGLShader.t_of_js x11692)
            (Ojs.call (this_to_js Obj.magic x11690) "getAttachedShaders"
               [|(WebGLProgram.t_to_js x11689)|])
    let (getAttribLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x11696 : 'tags this) ->
        fun ~program:(x11694 : WebGLProgram.t) ->
          fun ~name:(x11695 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x11696) "getAttribLocation"
                 [|(WebGLProgram.t_to_js x11694);(Ojs.string_to_js x11695)|])
    let (getBufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x11700 : 'tags this) ->
        fun ~target:(x11698 : GLenum.t) ->
          fun ~pname:(x11699 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11700) "getBufferParameter"
                 [|(GLenum.t_to_js x11698);(GLenum.t_to_js x11699)|])
    let (getContextAttributes :
      'tags this -> WebGLContextAttributes.t or_null) =
      fun (x11702 : 'tags this) ->
        or_null_of_js WebGLContextAttributes.t_of_js
          (Ojs.call (this_to_js Obj.magic x11702) "getContextAttributes" [||])
    let (getError : 'tags this -> GLenum.t) =
      fun (x11705 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.call (this_to_js Obj.magic x11705) "getError" [||])
    let (getExtension :
      'tags this ->
        extensionName:[ `L_s2_EXT_blend_minmax ] ->
          EXT_blend_minmax.t or_null)
      =
      fun (x11708 : 'tags this) ->
        fun ~extensionName:(x11707 : [ `L_s2_EXT_blend_minmax ]) ->
          or_null_of_js EXT_blend_minmax.t_of_js
            (Ojs.call (this_to_js Obj.magic x11708) "getExtension"
               [|((match x11707 with
                   | `L_s2_EXT_blend_minmax ->
                       Ojs.string_to_js "EXT_blend_minmax"))|])
    let (getExtension' :
      'tags this ->
        extensionName:[ `L_s3_EXT_color_buffer_float ] ->
          EXT_color_buffer_float.t or_null)
      =
      fun (x11712 : 'tags this) ->
        fun ~extensionName:(x11711 : [ `L_s3_EXT_color_buffer_float ]) ->
          or_null_of_js EXT_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11712) "getExtension"
               [|((match x11711 with
                   | `L_s3_EXT_color_buffer_float ->
                       Ojs.string_to_js "EXT_color_buffer_float"))|])
    let (getExtension'' :
      'tags this ->
        extensionName:[ `L_s4_EXT_color_buffer_half_float ] ->
          EXT_color_buffer_half_float.t or_null)
      =
      fun (x11716 : 'tags this) ->
        fun ~extensionName:(x11715 : [ `L_s4_EXT_color_buffer_half_float ])
          ->
          or_null_of_js EXT_color_buffer_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11716) "getExtension"
               [|((match x11715 with
                   | `L_s4_EXT_color_buffer_half_float ->
                       Ojs.string_to_js "EXT_color_buffer_half_float"))|])
    let (getExtension''' :
      'tags this ->
        extensionName:[ `L_s5_EXT_float_blend ] -> EXT_float_blend.t or_null)
      =
      fun (x11720 : 'tags this) ->
        fun ~extensionName:(x11719 : [ `L_s5_EXT_float_blend ]) ->
          or_null_of_js EXT_float_blend.t_of_js
            (Ojs.call (this_to_js Obj.magic x11720) "getExtension"
               [|((match x11719 with
                   | `L_s5_EXT_float_blend ->
                       Ojs.string_to_js "EXT_float_blend"))|])
    let (getExtension'''' :
      'tags this ->
        extensionName:[ `L_s9_EXT_texture_filter_anisotropic ] ->
          EXT_texture_filter_anisotropic.t or_null)
      =
      fun (x11724 : 'tags this) ->
        fun
          ~extensionName:(x11723 : [ `L_s9_EXT_texture_filter_anisotropic ])
          ->
          or_null_of_js EXT_texture_filter_anisotropic.t_of_js
            (Ojs.call (this_to_js Obj.magic x11724) "getExtension"
               [|((match x11723 with
                   | `L_s9_EXT_texture_filter_anisotropic ->
                       Ojs.string_to_js "EXT_texture_filter_anisotropic"))|])
    let (getExtension''''' :
      'tags this ->
        extensionName:[ `L_s6_EXT_frag_depth ] -> EXT_frag_depth.t or_null)
      =
      fun (x11728 : 'tags this) ->
        fun ~extensionName:(x11727 : [ `L_s6_EXT_frag_depth ]) ->
          or_null_of_js EXT_frag_depth.t_of_js
            (Ojs.call (this_to_js Obj.magic x11728) "getExtension"
               [|((match x11727 with
                   | `L_s6_EXT_frag_depth ->
                       Ojs.string_to_js "EXT_frag_depth"))|])
    let (getExtension'''''' :
      'tags this ->
        extensionName:[ `L_s8_EXT_shader_texture_lod ] ->
          EXT_shader_texture_lod.t or_null)
      =
      fun (x11732 : 'tags this) ->
        fun ~extensionName:(x11731 : [ `L_s8_EXT_shader_texture_lod ]) ->
          or_null_of_js EXT_shader_texture_lod.t_of_js
            (Ojs.call (this_to_js Obj.magic x11732) "getExtension"
               [|((match x11731 with
                   | `L_s8_EXT_shader_texture_lod ->
                       Ojs.string_to_js "EXT_shader_texture_lod"))|])
    let (getExtension''''''' :
      'tags this -> extensionName:[ `L_s7_EXT_sRGB ] -> EXT_sRGB.t or_null) =
      fun (x11736 : 'tags this) ->
        fun ~extensionName:(x11735 : [ `L_s7_EXT_sRGB ]) ->
          or_null_of_js EXT_sRGB.t_of_js
            (Ojs.call (this_to_js Obj.magic x11736) "getExtension"
               [|((match x11735 with
                   | `L_s7_EXT_sRGB -> Ojs.string_to_js "EXT_sRGB"))|])
    let (getExtension'''''''' :
      'tags this ->
        extensionName:[ `L_s10_KHR_parallel_shader_compile ] ->
          KHR_parallel_shader_compile.t or_null)
      =
      fun (x11740 : 'tags this) ->
        fun ~extensionName:(x11739 : [ `L_s10_KHR_parallel_shader_compile ])
          ->
          or_null_of_js KHR_parallel_shader_compile.t_of_js
            (Ojs.call (this_to_js Obj.magic x11740) "getExtension"
               [|((match x11739 with
                   | `L_s10_KHR_parallel_shader_compile ->
                       Ojs.string_to_js "KHR_parallel_shader_compile"))|])
    let (getExtension''''''''' :
      'tags this ->
        extensionName:[ `L_s17_OES_vertex_array_object ] ->
          OES_vertex_array_object.t or_null)
      =
      fun (x11744 : 'tags this) ->
        fun ~extensionName:(x11743 : [ `L_s17_OES_vertex_array_object ]) ->
          or_null_of_js OES_vertex_array_object.t_of_js
            (Ojs.call (this_to_js Obj.magic x11744) "getExtension"
               [|((match x11743 with
                   | `L_s17_OES_vertex_array_object ->
                       Ojs.string_to_js "OES_vertex_array_object"))|])
    let (getExtension'''''''''' :
      'tags this ->
        extensionName:[ `L_s18_OVR_multiview2 ] -> OVR_multiview2.t or_null)
      =
      fun (x11748 : 'tags this) ->
        fun ~extensionName:(x11747 : [ `L_s18_OVR_multiview2 ]) ->
          or_null_of_js OVR_multiview2.t_of_js
            (Ojs.call (this_to_js Obj.magic x11748) "getExtension"
               [|((match x11747 with
                   | `L_s18_OVR_multiview2 ->
                       Ojs.string_to_js "OVR_multiview2"))|])
    let (getExtension''''''''''' :
      'tags this ->
        extensionName:[ `L_s19_WEBGL_color_buffer_float ] ->
          WEBGL_color_buffer_float.t or_null)
      =
      fun (x11752 : 'tags this) ->
        fun ~extensionName:(x11751 : [ `L_s19_WEBGL_color_buffer_float ]) ->
          or_null_of_js WEBGL_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11752) "getExtension"
               [|((match x11751 with
                   | `L_s19_WEBGL_color_buffer_float ->
                       Ojs.string_to_js "WEBGL_color_buffer_float"))|])
    let (getExtension'''''''''''' :
      'tags this ->
        extensionName:[ `L_s20_WEBGL_compressed_texture_astc ] ->
          WEBGL_compressed_texture_astc.t or_null)
      =
      fun (x11756 : 'tags this) ->
        fun
          ~extensionName:(x11755 : [ `L_s20_WEBGL_compressed_texture_astc ])
          ->
          or_null_of_js WEBGL_compressed_texture_astc.t_of_js
            (Ojs.call (this_to_js Obj.magic x11756) "getExtension"
               [|((match x11755 with
                   | `L_s20_WEBGL_compressed_texture_astc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_astc"))|])
    let (getExtension''''''''''''' :
      'tags this ->
        extensionName:[ `L_s21_WEBGL_compressed_texture_etc ] ->
          WEBGL_compressed_texture_etc.t or_null)
      =
      fun (x11760 : 'tags this) ->
        fun ~extensionName:(x11759 : [ `L_s21_WEBGL_compressed_texture_etc ])
          ->
          or_null_of_js WEBGL_compressed_texture_etc.t_of_js
            (Ojs.call (this_to_js Obj.magic x11760) "getExtension"
               [|((match x11759 with
                   | `L_s21_WEBGL_compressed_texture_etc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc"))|])
    let (getExtension'''''''''''''' :
      'tags this ->
        extensionName:[ `L_s22_WEBGL_compressed_texture_etc1 ] ->
          WEBGL_compressed_texture_etc1.t or_null)
      =
      fun (x11764 : 'tags this) ->
        fun
          ~extensionName:(x11763 : [ `L_s22_WEBGL_compressed_texture_etc1 ])
          ->
          or_null_of_js WEBGL_compressed_texture_etc1.t_of_js
            (Ojs.call (this_to_js Obj.magic x11764) "getExtension"
               [|((match x11763 with
                   | `L_s22_WEBGL_compressed_texture_etc1 ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc1"))|])
    let (getExtension''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s23_WEBGL_compressed_texture_pvrtc ] ->
          WEBGL_compressed_texture_pvrtc.t or_null)
      =
      fun (x11768 : 'tags this) ->
        fun
          ~extensionName:(x11767 : [ `L_s23_WEBGL_compressed_texture_pvrtc ])
          ->
          or_null_of_js WEBGL_compressed_texture_pvrtc.t_of_js
            (Ojs.call (this_to_js Obj.magic x11768) "getExtension"
               [|((match x11767 with
                   | `L_s23_WEBGL_compressed_texture_pvrtc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_pvrtc"))|])
    let (getExtension'''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s25_WEBGL_compressed_texture_s3tc_srgb ] ->
          WEBGL_compressed_texture_s3tc_srgb.t or_null)
      =
      fun (x11772 : 'tags this) ->
        fun
          ~extensionName:(x11771 :
                           [ `L_s25_WEBGL_compressed_texture_s3tc_srgb ])
          ->
          or_null_of_js WEBGL_compressed_texture_s3tc_srgb.t_of_js
            (Ojs.call (this_to_js Obj.magic x11772) "getExtension"
               [|((match x11771 with
                   | `L_s25_WEBGL_compressed_texture_s3tc_srgb ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc_srgb"))|])
    let (getExtension''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s27_WEBGL_debug_shaders ] ->
          WEBGL_debug_shaders.t or_null)
      =
      fun (x11776 : 'tags this) ->
        fun ~extensionName:(x11775 : [ `L_s27_WEBGL_debug_shaders ]) ->
          or_null_of_js WEBGL_debug_shaders.t_of_js
            (Ojs.call (this_to_js Obj.magic x11776) "getExtension"
               [|((match x11775 with
                   | `L_s27_WEBGL_debug_shaders ->
                       Ojs.string_to_js "WEBGL_debug_shaders"))|])
    let (getExtension'''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s29_WEBGL_draw_buffers ] ->
          WEBGL_draw_buffers.t or_null)
      =
      fun (x11780 : 'tags this) ->
        fun ~extensionName:(x11779 : [ `L_s29_WEBGL_draw_buffers ]) ->
          or_null_of_js WEBGL_draw_buffers.t_of_js
            (Ojs.call (this_to_js Obj.magic x11780) "getExtension"
               [|((match x11779 with
                   | `L_s29_WEBGL_draw_buffers ->
                       Ojs.string_to_js "WEBGL_draw_buffers"))|])
    let (getExtension''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s30_WEBGL_lose_context ] ->
          WEBGL_lose_context.t or_null)
      =
      fun (x11784 : 'tags this) ->
        fun ~extensionName:(x11783 : [ `L_s30_WEBGL_lose_context ]) ->
          or_null_of_js WEBGL_lose_context.t_of_js
            (Ojs.call (this_to_js Obj.magic x11784) "getExtension"
               [|((match x11783 with
                   | `L_s30_WEBGL_lose_context ->
                       Ojs.string_to_js "WEBGL_lose_context"))|])
    let (getExtension'''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s28_WEBGL_depth_texture ] ->
          WEBGL_depth_texture.t or_null)
      =
      fun (x11788 : 'tags this) ->
        fun ~extensionName:(x11787 : [ `L_s28_WEBGL_depth_texture ]) ->
          or_null_of_js WEBGL_depth_texture.t_of_js
            (Ojs.call (this_to_js Obj.magic x11788) "getExtension"
               [|((match x11787 with
                   | `L_s28_WEBGL_depth_texture ->
                       Ojs.string_to_js "WEBGL_depth_texture"))|])
    let (getExtension''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s26_WEBGL_debug_renderer_info ] ->
          WEBGL_debug_renderer_info.t or_null)
      =
      fun (x11792 : 'tags this) ->
        fun ~extensionName:(x11791 : [ `L_s26_WEBGL_debug_renderer_info ]) ->
          or_null_of_js WEBGL_debug_renderer_info.t_of_js
            (Ojs.call (this_to_js Obj.magic x11792) "getExtension"
               [|((match x11791 with
                   | `L_s26_WEBGL_debug_renderer_info ->
                       Ojs.string_to_js "WEBGL_debug_renderer_info"))|])
    let (getExtension'''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s24_WEBGL_compressed_texture_s3tc ] ->
          WEBGL_compressed_texture_s3tc.t or_null)
      =
      fun (x11796 : 'tags this) ->
        fun
          ~extensionName:(x11795 : [ `L_s24_WEBGL_compressed_texture_s3tc ])
          ->
          or_null_of_js WEBGL_compressed_texture_s3tc.t_of_js
            (Ojs.call (this_to_js Obj.magic x11796) "getExtension"
               [|((match x11795 with
                   | `L_s24_WEBGL_compressed_texture_s3tc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc"))|])
    let (getExtension''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s16_OES_texture_half_float_linear ] ->
          OES_texture_half_float_linear.t or_null)
      =
      fun (x11800 : 'tags this) ->
        fun
          ~extensionName:(x11799 : [ `L_s16_OES_texture_half_float_linear ])
          ->
          or_null_of_js OES_texture_half_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x11800) "getExtension"
               [|((match x11799 with
                   | `L_s16_OES_texture_half_float_linear ->
                       Ojs.string_to_js "OES_texture_half_float_linear"))|])
    let (getExtension'''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s15_OES_texture_half_float ] ->
          OES_texture_half_float.t or_null)
      =
      fun (x11804 : 'tags this) ->
        fun ~extensionName:(x11803 : [ `L_s15_OES_texture_half_float ]) ->
          or_null_of_js OES_texture_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11804) "getExtension"
               [|((match x11803 with
                   | `L_s15_OES_texture_half_float ->
                       Ojs.string_to_js "OES_texture_half_float"))|])
    let (getExtension''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s14_OES_texture_float_linear ] ->
          OES_texture_float_linear.t or_null)
      =
      fun (x11808 : 'tags this) ->
        fun ~extensionName:(x11807 : [ `L_s14_OES_texture_float_linear ]) ->
          or_null_of_js OES_texture_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x11808) "getExtension"
               [|((match x11807 with
                   | `L_s14_OES_texture_float_linear ->
                       Ojs.string_to_js "OES_texture_float_linear"))|])
    let (getExtension'''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s13_OES_texture_float ] ->
          OES_texture_float.t or_null)
      =
      fun (x11812 : 'tags this) ->
        fun ~extensionName:(x11811 : [ `L_s13_OES_texture_float ]) ->
          or_null_of_js OES_texture_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x11812) "getExtension"
               [|((match x11811 with
                   | `L_s13_OES_texture_float ->
                       Ojs.string_to_js "OES_texture_float"))|])
    let (getExtension''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s12_OES_standard_derivatives ] ->
          OES_standard_derivatives.t or_null)
      =
      fun (x11816 : 'tags this) ->
        fun ~extensionName:(x11815 : [ `L_s12_OES_standard_derivatives ]) ->
          or_null_of_js OES_standard_derivatives.t_of_js
            (Ojs.call (this_to_js Obj.magic x11816) "getExtension"
               [|((match x11815 with
                   | `L_s12_OES_standard_derivatives ->
                       Ojs.string_to_js "OES_standard_derivatives"))|])
    let (getExtension'''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s11_OES_element_index_uint ] ->
          OES_element_index_uint.t or_null)
      =
      fun (x11820 : 'tags this) ->
        fun ~extensionName:(x11819 : [ `L_s11_OES_element_index_uint ]) ->
          or_null_of_js OES_element_index_uint.t_of_js
            (Ojs.call (this_to_js Obj.magic x11820) "getExtension"
               [|((match x11819 with
                   | `L_s11_OES_element_index_uint ->
                       Ojs.string_to_js "OES_element_index_uint"))|])
    let (getExtension''''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s1_ANGLE_instanced_arrays ] ->
          ANGLE_instanced_arrays.t or_null)
      =
      fun (x11824 : 'tags this) ->
        fun ~extensionName:(x11823 : [ `L_s1_ANGLE_instanced_arrays ]) ->
          or_null_of_js ANGLE_instanced_arrays.t_of_js
            (Ojs.call (this_to_js Obj.magic x11824) "getExtension"
               [|((match x11823 with
                   | `L_s1_ANGLE_instanced_arrays ->
                       Ojs.string_to_js "ANGLE_instanced_arrays"))|])
    let (getExtension'''''''''''''''''''''''''''''' :
      'tags this -> name:string -> any) =
      fun (x11828 : 'tags this) ->
        fun ~name:(x11827 : string) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x11828) "getExtension"
               [|(Ojs.string_to_js x11827)|])
    let (getFramebufferAttachmentParameter :
      'tags this ->
        target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x11833 : 'tags this) ->
        fun ~target:(x11830 : GLenum.t) ->
          fun ~attachment:(x11831 : GLenum.t) ->
            fun ~pname:(x11832 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x11833)
                   "getFramebufferAttachmentParameter"
                   [|(GLenum.t_to_js x11830);(GLenum.t_to_js x11831);(
                     GLenum.t_to_js x11832)|])
    let (getParameter : 'tags this -> pname:GLenum.t -> any) =
      fun (x11836 : 'tags this) ->
        fun ~pname:(x11835 : GLenum.t) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x11836) "getParameter"
               [|(GLenum.t_to_js x11835)|])
    let (getProgramInfoLog :
      'tags this -> program:WebGLProgram.t -> string or_null) =
      fun (x11839 : 'tags this) ->
        fun ~program:(x11838 : WebGLProgram.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11839) "getProgramInfoLog"
               [|(WebGLProgram.t_to_js x11838)|])
    let (getProgramParameter :
      'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any) =
      fun (x11844 : 'tags this) ->
        fun ~program:(x11842 : WebGLProgram.t) ->
          fun ~pname:(x11843 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11844) "getProgramParameter"
                 [|(WebGLProgram.t_to_js x11842);(GLenum.t_to_js x11843)|])
    let (getRenderbufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x11848 : 'tags this) ->
        fun ~target:(x11846 : GLenum.t) ->
          fun ~pname:(x11847 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11848)
                 "getRenderbufferParameter"
                 [|(GLenum.t_to_js x11846);(GLenum.t_to_js x11847)|])
    let (getShaderInfoLog :
      'tags this -> shader:WebGLShader.t -> string or_null) =
      fun (x11851 : 'tags this) ->
        fun ~shader:(x11850 : WebGLShader.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11851) "getShaderInfoLog"
               [|(WebGLShader.t_to_js x11850)|])
    let (getShaderParameter :
      'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any) =
      fun (x11856 : 'tags this) ->
        fun ~shader:(x11854 : WebGLShader.t) ->
          fun ~pname:(x11855 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11856) "getShaderParameter"
                 [|(WebGLShader.t_to_js x11854);(GLenum.t_to_js x11855)|])
    let (getShaderPrecisionFormat :
      'tags this ->
        shadertype:GLenum.t ->
          precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t or_null)
      =
      fun (x11860 : 'tags this) ->
        fun ~shadertype:(x11858 : GLenum.t) ->
          fun ~precisiontype:(x11859 : GLenum.t) ->
            or_null_of_js WebGLShaderPrecisionFormat.t_of_js
              (Ojs.call (this_to_js Obj.magic x11860)
                 "getShaderPrecisionFormat"
                 [|(GLenum.t_to_js x11858);(GLenum.t_to_js x11859)|])
    let (getShaderSource :
      'tags this -> shader:WebGLShader.t -> string or_null) =
      fun (x11864 : 'tags this) ->
        fun ~shader:(x11863 : WebGLShader.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11864) "getShaderSource"
               [|(WebGLShader.t_to_js x11863)|])
    let (getSupportedExtensions : 'tags this -> string list or_null) =
      fun (x11867 : 'tags this) ->
        or_null_of_js
          (fun (x11869 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x11869)
          (Ojs.call (this_to_js Obj.magic x11867) "getSupportedExtensions"
             [||])
    let (getTexParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x11873 : 'tags this) ->
        fun ~target:(x11871 : GLenum.t) ->
          fun ~pname:(x11872 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11873) "getTexParameter"
                 [|(GLenum.t_to_js x11871);(GLenum.t_to_js x11872)|])
    let (getUniform :
      'tags this ->
        program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any)
      =
      fun (x11877 : 'tags this) ->
        fun ~program:(x11875 : WebGLProgram.t) ->
          fun ~location:(x11876 : WebGLUniformLocation.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11877) "getUniform"
                 [|(WebGLProgram.t_to_js x11875);(WebGLUniformLocation.t_to_js
                                                    x11876)|])
    let (getUniformLocation :
      'tags this ->
        program:WebGLProgram.t ->
          name:string -> WebGLUniformLocation.t or_null)
      =
      fun (x11881 : 'tags this) ->
        fun ~program:(x11879 : WebGLProgram.t) ->
          fun ~name:(x11880 : string) ->
            or_null_of_js WebGLUniformLocation.t_of_js
              (Ojs.call (this_to_js Obj.magic x11881) "getUniformLocation"
                 [|(WebGLProgram.t_to_js x11879);(Ojs.string_to_js x11880)|])
    let (getVertexAttrib :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> any) =
      fun (x11886 : 'tags this) ->
        fun ~index:(x11884 : GLuint.t) ->
          fun ~pname:(x11885 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x11886) "getVertexAttrib"
                 [|(GLuint.t_to_js x11884);(GLenum.t_to_js x11885)|])
    let (getVertexAttribOffset :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t) =
      fun (x11890 : 'tags this) ->
        fun ~index:(x11888 : GLuint.t) ->
          fun ~pname:(x11889 : GLenum.t) ->
            GLintptr.t_of_js
              (Ojs.call (this_to_js Obj.magic x11890) "getVertexAttribOffset"
                 [|(GLuint.t_to_js x11888);(GLenum.t_to_js x11889)|])
    let (hint : 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit) =
      fun (x11894 : 'tags this) ->
        fun ~target:(x11892 : GLenum.t) ->
          fun ~mode:(x11893 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11894) "hint"
                 [|(GLenum.t_to_js x11892);(GLenum.t_to_js x11893)|])
    let (isBuffer :
      'tags this -> buffer:WebGLBuffer.t or_null -> GLboolean.t) =
      fun (x11898 : 'tags this) ->
        fun ~buffer:(x11896 : WebGLBuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11898) "isBuffer"
               [|(or_null_to_js WebGLBuffer.t_to_js x11896)|])
    let (isContextLost : 'tags this -> bool) =
      fun (x11900 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x11900) "isContextLost" [||])
    let (isEnabled : 'tags this -> cap:GLenum.t -> GLboolean.t) =
      fun (x11903 : 'tags this) ->
        fun ~cap:(x11902 : GLenum.t) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11903) "isEnabled"
               [|(GLenum.t_to_js x11902)|])
    let (isFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t or_null -> GLboolean.t) =
      fun (x11907 : 'tags this) ->
        fun ~framebuffer:(x11905 : WebGLFramebuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11907) "isFramebuffer"
               [|(or_null_to_js WebGLFramebuffer.t_to_js x11905)|])
    let (isProgram :
      'tags this -> program:WebGLProgram.t or_null -> GLboolean.t) =
      fun (x11911 : 'tags this) ->
        fun ~program:(x11909 : WebGLProgram.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11911) "isProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x11909)|])
    let (isRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t or_null -> GLboolean.t)
      =
      fun (x11915 : 'tags this) ->
        fun ~renderbuffer:(x11913 : WebGLRenderbuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11915) "isRenderbuffer"
               [|(or_null_to_js WebGLRenderbuffer.t_to_js x11913)|])
    let (isShader :
      'tags this -> shader:WebGLShader.t or_null -> GLboolean.t) =
      fun (x11919 : 'tags this) ->
        fun ~shader:(x11917 : WebGLShader.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11919) "isShader"
               [|(or_null_to_js WebGLShader.t_to_js x11917)|])
    let (isTexture :
      'tags this -> texture:WebGLTexture.t or_null -> GLboolean.t) =
      fun (x11923 : 'tags this) ->
        fun ~texture:(x11921 : WebGLTexture.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x11923) "isTexture"
               [|(or_null_to_js WebGLTexture.t_to_js x11921)|])
    let (lineWidth : 'tags this -> width:GLfloat.t -> unit) =
      fun (x11926 : 'tags this) ->
        fun ~width:(x11925 : GLfloat.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11926) "lineWidth"
               [|(GLfloat.t_to_js x11925)|])
    let (linkProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x11929 : 'tags this) ->
        fun ~program:(x11928 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11929) "linkProgram"
               [|(WebGLProgram.t_to_js x11928)|])
    let (pixelStorei :
      'tags this ->
        pname:GLenum.t -> param:(GLboolean.t, GLint.t) union2 -> unit)
      =
      fun (x11935 : 'tags this) ->
        fun ~pname:(x11931 : GLenum.t) ->
          fun ~param:(x11932 : (GLboolean.t, GLint.t) union2) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11935) "pixelStorei"
                 [|(GLenum.t_to_js x11931);(union2_to_js GLboolean.t_to_js
                                              GLint.t_to_js x11932)|])
    let (polygonOffset :
      'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit) =
      fun (x11939 : 'tags this) ->
        fun ~factor:(x11937 : GLfloat.t) ->
          fun ~units:(x11938 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11939) "polygonOffset"
                 [|(GLfloat.t_to_js x11937);(GLfloat.t_to_js x11938)|])
    let (renderbufferStorage :
      'tags this ->
        target:GLenum.t ->
          internalformat:GLenum.t ->
            width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x11945 : 'tags this) ->
        fun ~target:(x11941 : GLenum.t) ->
          fun ~internalformat:(x11942 : GLenum.t) ->
            fun ~width:(x11943 : GLsizei.t) ->
              fun ~height:(x11944 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11945)
                     "renderbufferStorage"
                     [|(GLenum.t_to_js x11941);(GLenum.t_to_js x11942);(
                       GLsizei.t_to_js x11943);(GLsizei.t_to_js x11944)|])
    let (sampleCoverage :
      'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit) =
      fun (x11949 : 'tags this) ->
        fun ~value:(x11947 : GLclampf.t) ->
          fun ~invert:(x11948 : GLboolean.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11949) "sampleCoverage"
                 [|(GLclampf.t_to_js x11947);(GLboolean.t_to_js x11948)|])
    let (scissor :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x11955 : 'tags this) ->
        fun ~x:(x11951 : GLint.t) ->
          fun ~y:(x11952 : GLint.t) ->
            fun ~width:(x11953 : GLsizei.t) ->
              fun ~height:(x11954 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11955) "scissor"
                     [|(GLint.t_to_js x11951);(GLint.t_to_js x11952);(
                       GLsizei.t_to_js x11953);(GLsizei.t_to_js x11954)|])
    let (shaderSource :
      'tags this -> shader:WebGLShader.t -> source:string -> unit) =
      fun (x11959 : 'tags this) ->
        fun ~shader:(x11957 : WebGLShader.t) ->
          fun ~source:(x11958 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11959) "shaderSource"
                 [|(WebGLShader.t_to_js x11957);(Ojs.string_to_js x11958)|])
    let (stencilFunc :
      'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit) =
      fun (x11964 : 'tags this) ->
        fun ~func:(x11961 : GLenum.t) ->
          fun ~ref:(x11962 : GLint.t) ->
            fun ~mask:(x11963 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11964) "stencilFunc"
                   [|(GLenum.t_to_js x11961);(GLint.t_to_js x11962);(
                     GLuint.t_to_js x11963)|])
    let (stencilFuncSeparate :
      'tags this ->
        face:GLenum.t ->
          func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit)
      =
      fun (x11970 : 'tags this) ->
        fun ~face:(x11966 : GLenum.t) ->
          fun ~func:(x11967 : GLenum.t) ->
            fun ~ref:(x11968 : GLint.t) ->
              fun ~mask:(x11969 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11970)
                     "stencilFuncSeparate"
                     [|(GLenum.t_to_js x11966);(GLenum.t_to_js x11967);(
                       GLint.t_to_js x11968);(GLuint.t_to_js x11969)|])
    let (stencilMask : 'tags this -> mask:GLuint.t -> unit) =
      fun (x11973 : 'tags this) ->
        fun ~mask:(x11972 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11973) "stencilMask"
               [|(GLuint.t_to_js x11972)|])
    let (stencilMaskSeparate :
      'tags this -> face:GLenum.t -> mask:GLuint.t -> unit) =
      fun (x11977 : 'tags this) ->
        fun ~face:(x11975 : GLenum.t) ->
          fun ~mask:(x11976 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11977) "stencilMaskSeparate"
                 [|(GLenum.t_to_js x11975);(GLuint.t_to_js x11976)|])
    let (stencilOp :
      'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x11982 : 'tags this) ->
        fun ~fail:(x11979 : GLenum.t) ->
          fun ~zfail:(x11980 : GLenum.t) ->
            fun ~zpass:(x11981 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11982) "stencilOp"
                   [|(GLenum.t_to_js x11979);(GLenum.t_to_js x11980);(
                     GLenum.t_to_js x11981)|])
    let (stencilOpSeparate :
      'tags this ->
        face:GLenum.t ->
          fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x11988 : 'tags this) ->
        fun ~face:(x11984 : GLenum.t) ->
          fun ~fail:(x11985 : GLenum.t) ->
            fun ~zfail:(x11986 : GLenum.t) ->
              fun ~zpass:(x11987 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x11988) "stencilOpSeparate"
                     [|(GLenum.t_to_js x11984);(GLenum.t_to_js x11985);(
                       GLenum.t_to_js x11986);(GLenum.t_to_js x11987)|])
    let (texParameterf :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x11993 : 'tags this) ->
        fun ~target:(x11990 : GLenum.t) ->
          fun ~pname:(x11991 : GLenum.t) ->
            fun ~param:(x11992 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11993) "texParameterf"
                   [|(GLenum.t_to_js x11990);(GLenum.t_to_js x11991);(
                     GLfloat.t_to_js x11992)|])
    let (texParameteri :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x11998 : 'tags this) ->
        fun ~target:(x11995 : GLenum.t) ->
          fun ~pname:(x11996 : GLenum.t) ->
            fun ~param:(x11997 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x11998) "texParameteri"
                   [|(GLenum.t_to_js x11995);(GLenum.t_to_js x11996);(
                     GLint.t_to_js x11997)|])
    let (uniform1f :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> x:GLfloat.t -> unit)
      =
      fun (x12003 : 'tags this) ->
        fun ~location:(x12000 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12002 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12003) "uniform1f"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x12000);(
                   GLfloat.t_to_js x12002)|])
    let (uniform1i :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> x:GLint.t -> unit)
      =
      fun (x12008 : 'tags this) ->
        fun ~location:(x12005 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12007 : GLint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12008) "uniform1i"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x12005);(
                   GLint.t_to_js x12007)|])
    let (uniform2f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> unit)
      =
      fun (x12014 : 'tags this) ->
        fun ~location:(x12010 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12012 : GLfloat.t) ->
            fun ~y:(x12013 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x12014) "uniform2f"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x12010);(
                     GLfloat.t_to_js x12012);(GLfloat.t_to_js x12013)|])
    let (uniform2i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> unit)
      =
      fun (x12020 : 'tags this) ->
        fun ~location:(x12016 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12018 : GLint.t) ->
            fun ~y:(x12019 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x12020) "uniform2i"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x12016);(
                     GLint.t_to_js x12018);(GLint.t_to_js x12019)|])
    let (uniform3f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x12027 : 'tags this) ->
        fun ~location:(x12022 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12024 : GLfloat.t) ->
            fun ~y:(x12025 : GLfloat.t) ->
              fun ~z:(x12026 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12027) "uniform3f"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x12022);(
                       GLfloat.t_to_js x12024);(GLfloat.t_to_js x12025);(
                       GLfloat.t_to_js x12026)|])
    let (uniform3i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> unit)
      =
      fun (x12034 : 'tags this) ->
        fun ~location:(x12029 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12031 : GLint.t) ->
            fun ~y:(x12032 : GLint.t) ->
              fun ~z:(x12033 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12034) "uniform3i"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x12029);(
                       GLint.t_to_js x12031);(GLint.t_to_js x12032);(
                       GLint.t_to_js x12033)|])
    let (uniform4f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x12042 : 'tags this) ->
        fun ~location:(x12036 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12038 : GLfloat.t) ->
            fun ~y:(x12039 : GLfloat.t) ->
              fun ~z:(x12040 : GLfloat.t) ->
                fun ~w:(x12041 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x12042) "uniform4f"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x12036);(
                         GLfloat.t_to_js x12038);(GLfloat.t_to_js x12039);(
                         GLfloat.t_to_js x12040);(GLfloat.t_to_js x12041)|])
    let (uniform4i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x12050 : 'tags this) ->
        fun ~location:(x12044 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x12046 : GLint.t) ->
            fun ~y:(x12047 : GLint.t) ->
              fun ~z:(x12048 : GLint.t) ->
                fun ~w:(x12049 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x12050) "uniform4i"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x12044);(
                         GLint.t_to_js x12046);(GLint.t_to_js x12047);(
                         GLint.t_to_js x12048);(GLint.t_to_js x12049)|])
    let (useProgram : 'tags this -> program:WebGLProgram.t or_null -> unit) =
      fun (x12054 : 'tags this) ->
        fun ~program:(x12052 : WebGLProgram.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12054) "useProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x12052)|])
    let (validateProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x12057 : 'tags this) ->
        fun ~program:(x12056 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12057) "validateProgram"
               [|(WebGLProgram.t_to_js x12056)|])
    let (vertexAttrib1f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> unit) =
      fun (x12061 : 'tags this) ->
        fun ~index:(x12059 : GLuint.t) ->
          fun ~x:(x12060 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12061) "vertexAttrib1f"
                 [|(GLuint.t_to_js x12059);(GLfloat.t_to_js x12060)|])
    let (vertexAttrib1fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x12065 : 'tags this) ->
        fun ~index:(x12063 : GLuint.t) ->
          fun ~values:(x12064 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12065) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x12063);(Float32List.t_to_js x12064)|])
    let (vertexAttrib2f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit) =
      fun (x12070 : 'tags this) ->
        fun ~index:(x12067 : GLuint.t) ->
          fun ~x:(x12068 : GLfloat.t) ->
            fun ~y:(x12069 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x12070) "vertexAttrib2f"
                   [|(GLuint.t_to_js x12067);(GLfloat.t_to_js x12068);(
                     GLfloat.t_to_js x12069)|])
    let (vertexAttrib2fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x12074 : 'tags this) ->
        fun ~index:(x12072 : GLuint.t) ->
          fun ~values:(x12073 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12074) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x12072);(Float32List.t_to_js x12073)|])
    let (vertexAttrib3f :
      'tags this ->
        index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x12080 : 'tags this) ->
        fun ~index:(x12076 : GLuint.t) ->
          fun ~x:(x12077 : GLfloat.t) ->
            fun ~y:(x12078 : GLfloat.t) ->
              fun ~z:(x12079 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12080) "vertexAttrib3f"
                     [|(GLuint.t_to_js x12076);(GLfloat.t_to_js x12077);(
                       GLfloat.t_to_js x12078);(GLfloat.t_to_js x12079)|])
    let (vertexAttrib3fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x12084 : 'tags this) ->
        fun ~index:(x12082 : GLuint.t) ->
          fun ~values:(x12083 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12084) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x12082);(Float32List.t_to_js x12083)|])
    let (vertexAttrib4f :
      'tags this ->
        index:GLuint.t ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x12091 : 'tags this) ->
        fun ~index:(x12086 : GLuint.t) ->
          fun ~x:(x12087 : GLfloat.t) ->
            fun ~y:(x12088 : GLfloat.t) ->
              fun ~z:(x12089 : GLfloat.t) ->
                fun ~w:(x12090 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x12091) "vertexAttrib4f"
                       [|(GLuint.t_to_js x12086);(GLfloat.t_to_js x12087);(
                         GLfloat.t_to_js x12088);(GLfloat.t_to_js x12089);(
                         GLfloat.t_to_js x12090)|])
    let (vertexAttrib4fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x12095 : 'tags this) ->
        fun ~index:(x12093 : GLuint.t) ->
          fun ~values:(x12094 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12095) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x12093);(Float32List.t_to_js x12094)|])
    let (vertexAttribPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t ->
              normalized:GLboolean.t ->
                stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x12103 : 'tags this) ->
        fun ~index:(x12097 : GLuint.t) ->
          fun ~size:(x12098 : GLint.t) ->
            fun ~type_:(x12099 : GLenum.t) ->
              fun ~normalized:(x12100 : GLboolean.t) ->
                fun ~stride:(x12101 : GLsizei.t) ->
                  fun ~offset:(x12102 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x12103)
                         "vertexAttribPointer"
                         [|(GLuint.t_to_js x12097);(GLint.t_to_js x12098);(
                           GLenum.t_to_js x12099);(GLboolean.t_to_js x12100);(
                           GLsizei.t_to_js x12101);(GLintptr.t_to_js x12102)|])
    let (viewport :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x12109 : 'tags this) ->
        fun ~x:(x12105 : GLint.t) ->
          fun ~y:(x12106 : GLint.t) ->
            fun ~width:(x12107 : GLsizei.t) ->
              fun ~height:(x12108 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12109) "viewport"
                     [|(GLint.t_to_js x12105);(GLint.t_to_js x12106);(
                       GLsizei.t_to_js x12107);(GLsizei.t_to_js x12108)|])
    let (get_ACTIVE_ATTRIBUTES : 'tags this -> GLenum.t) =
      fun (x12111 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12111)
             "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : 'tags this -> GLenum.t) =
      fun (x12113 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12113) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x12115 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12115) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : 'tags this -> GLenum.t) =
      fun (x12117 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12117)
             "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : 'tags this -> GLenum.t) =
      fun (x12119 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12119)
             "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : 'tags this -> GLenum.t) =
      fun (x12121 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12121) "ALPHA")
    let (get_ALPHA_BITS : 'tags this -> GLenum.t) =
      fun (x12123 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12123) "ALPHA_BITS")
    let (get_ALWAYS : 'tags this -> GLenum.t) =
      fun (x12125 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12125) "ALWAYS")
    let (get_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x12127 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12127) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12129 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12129)
             "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : 'tags this -> GLenum.t) =
      fun (x12131 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12131)
             "ATTACHED_SHADERS")
    let (get_BACK : 'tags this -> GLenum.t) =
      fun (x12133 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12133) "BACK")
    let (get_BLEND : 'tags this -> GLenum.t) =
      fun (x12135 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12135) "BLEND")
    let (get_BLEND_COLOR : 'tags this -> GLenum.t) =
      fun (x12137 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12137) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x12139 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12139) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : 'tags this -> GLenum.t) =
      fun (x12141 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12141) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : 'tags this -> GLenum.t) =
      fun (x12143 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12143) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : 'tags this -> GLenum.t) =
      fun (x12145 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12145)
             "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : 'tags this -> GLenum.t) =
      fun (x12147 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12147)
             "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x12149 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12149) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : 'tags this -> GLenum.t) =
      fun (x12151 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12151) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : 'tags this -> GLenum.t) =
      fun (x12153 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12153) "BLUE_BITS")
    let (get_BOOL : 'tags this -> GLenum.t) =
      fun (x12155 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12155) "BOOL")
    let (get_BOOL_VEC2 : 'tags this -> GLenum.t) =
      fun (x12157 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12157) "BOOL_VEC2")
    let (get_BOOL_VEC3 : 'tags this -> GLenum.t) =
      fun (x12159 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12159) "BOOL_VEC3")
    let (get_BOOL_VEC4 : 'tags this -> GLenum.t) =
      fun (x12161 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12161) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : 'tags this -> GLenum.t) =
      fun (x12163 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12163)
             "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x12165 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12165) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : 'tags this -> GLenum.t) =
      fun (x12167 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12167) "BUFFER_USAGE")
    let (get_BYTE : 'tags this -> GLenum.t) =
      fun (x12169 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12169) "BYTE")
    let (get_CCW : 'tags this -> GLenum.t) =
      fun (x12171 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12171) "CCW")
    let (get_CLAMP_TO_EDGE : 'tags this -> GLenum.t) =
      fun (x12173 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12173) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : 'tags this -> GLenum.t) =
      fun (x12175 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12175)
             "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x12177 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12177)
             "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x12179 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12179)
             "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x12181 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12181) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : 'tags this -> GLenum.t) =
      fun (x12183 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12183) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : 'tags this -> GLenum.t) =
      fun (x12185 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12185)
             "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x12187 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12187) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x12189 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12189) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : 'tags this -> GLenum.t) =
      fun (x12191 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12191)
             "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : 'tags this -> GLenum.t) =
      fun (x12193 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12193) "CULL_FACE")
    let (get_CULL_FACE_MODE : 'tags this -> GLenum.t) =
      fun (x12195 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12195) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : 'tags this -> GLenum.t) =
      fun (x12197 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12197) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : 'tags this -> GLenum.t) =
      fun (x12199 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12199)
             "CURRENT_VERTEX_ATTRIB")
    let (get_CW : 'tags this -> GLenum.t) =
      fun (x12201 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12201) "CW")
    let (get_DECR : 'tags this -> GLenum.t) =
      fun (x12203 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12203) "DECR")
    let (get_DECR_WRAP : 'tags this -> GLenum.t) =
      fun (x12205 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12205) "DECR_WRAP")
    let (get_DELETE_STATUS : 'tags this -> GLenum.t) =
      fun (x12207 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12207) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x12209 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12209)
             "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : 'tags this -> GLenum.t) =
      fun (x12211 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12211) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x12213 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12213)
             "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x12215 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12215)
             "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : 'tags this -> GLenum.t) =
      fun (x12217 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12217) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : 'tags this -> GLenum.t) =
      fun (x12219 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12219)
             "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : 'tags this -> GLenum.t) =
      fun (x12221 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12221) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : 'tags this -> GLenum.t) =
      fun (x12223 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12223) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : 'tags this -> GLenum.t) =
      fun (x12225 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12225) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x12227 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12227)
             "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : 'tags this -> GLenum.t) =
      fun (x12229 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12229) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x12231 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12231) "DEPTH_WRITEMASK")
    let (get_DITHER : 'tags this -> GLenum.t) =
      fun (x12233 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12233) "DITHER")
    let (get_DONT_CARE : 'tags this -> GLenum.t) =
      fun (x12235 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12235) "DONT_CARE")
    let (get_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x12237 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12237) "DST_ALPHA")
    let (get_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x12239 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12239) "DST_COLOR")
    let (get_DYNAMIC_DRAW : 'tags this -> GLenum.t) =
      fun (x12241 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12241) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x12243 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12243)
             "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12245 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12245)
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : 'tags this -> GLenum.t) =
      fun (x12247 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12247) "EQUAL")
    let (get_FASTEST : 'tags this -> GLenum.t) =
      fun (x12249 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12249) "FASTEST")
    let (get_FLOAT : 'tags this -> GLenum.t) =
      fun (x12251 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12251) "FLOAT")
    let (get_FLOAT_MAT2 : 'tags this -> GLenum.t) =
      fun (x12253 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12253) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : 'tags this -> GLenum.t) =
      fun (x12255 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12255) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : 'tags this -> GLenum.t) =
      fun (x12257 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12257) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : 'tags this -> GLenum.t) =
      fun (x12259 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12259) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : 'tags this -> GLenum.t) =
      fun (x12261 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12261) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : 'tags this -> GLenum.t) =
      fun (x12263 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12263) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : 'tags this -> GLenum.t) =
      fun (x12265 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12265) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x12267 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12267) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : 'tags this -> GLenum.t) =
      fun (x12269 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12269)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x12271 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12271)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :
      'tags this -> GLenum.t) =
      fun (x12273 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12273)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : 'tags this -> GLenum.t) =
      fun (x12275 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12275)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12277 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12277)
             "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : 'tags this -> GLenum.t) =
      fun (x12279 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12279)
             "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x12281 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12281)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : 'tags this -> GLenum.t) =
      fun (x12283 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12283)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
      'tags this -> GLenum.t) =
      fun (x12285 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12285)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : 'tags this -> GLenum.t) =
      fun (x12287 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12287)
             "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : 'tags this -> GLenum.t) =
      fun (x12289 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12289) "FRONT")
    let (get_FRONT_AND_BACK : 'tags this -> GLenum.t) =
      fun (x12291 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12291) "FRONT_AND_BACK")
    let (get_FRONT_FACE : 'tags this -> GLenum.t) =
      fun (x12293 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12293) "FRONT_FACE")
    let (get_FUNC_ADD : 'tags this -> GLenum.t) =
      fun (x12295 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12295) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x12297 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12297)
             "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x12299 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12299) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : 'tags this -> GLenum.t) =
      fun (x12301 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12301)
             "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : 'tags this -> GLenum.t) =
      fun (x12303 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12303) "GEQUAL")
    let (get_GREATER : 'tags this -> GLenum.t) =
      fun (x12305 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12305) "GREATER")
    let (get_GREEN_BITS : 'tags this -> GLenum.t) =
      fun (x12307 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12307) "GREEN_BITS")
    let (get_HIGH_FLOAT : 'tags this -> GLenum.t) =
      fun (x12309 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12309) "HIGH_FLOAT")
    let (get_HIGH_INT : 'tags this -> GLenum.t) =
      fun (x12311 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12311) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : 'tags this -> GLenum.t) =
      fun (x12313 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12313)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : 'tags this -> GLenum.t) =
      fun (x12315 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12315)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : 'tags this -> GLenum.t) =
      fun (x12317 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12317) "INCR")
    let (get_INCR_WRAP : 'tags this -> GLenum.t) =
      fun (x12319 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12319) "INCR_WRAP")
    let (get_INT : 'tags this -> GLenum.t) =
      fun (x12321 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12321) "INT")
    let (get_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x12323 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12323) "INT_VEC2")
    let (get_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x12325 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12325) "INT_VEC3")
    let (get_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x12327 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12327) "INT_VEC4")
    let (get_INVALID_ENUM : 'tags this -> GLenum.t) =
      fun (x12329 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12329) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : 'tags this -> GLenum.t) =
      fun (x12331 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12331)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : 'tags this -> GLenum.t) =
      fun (x12333 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12333)
             "INVALID_OPERATION")
    let (get_INVALID_VALUE : 'tags this -> GLenum.t) =
      fun (x12335 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12335) "INVALID_VALUE")
    let (get_INVERT : 'tags this -> GLenum.t) =
      fun (x12337 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12337) "INVERT")
    let (get_KEEP : 'tags this -> GLenum.t) =
      fun (x12339 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12339) "KEEP")
    let (get_LEQUAL : 'tags this -> GLenum.t) =
      fun (x12341 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12341) "LEQUAL")
    let (get_LESS : 'tags this -> GLenum.t) =
      fun (x12343 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12343) "LESS")
    let (get_LINEAR : 'tags this -> GLenum.t) =
      fun (x12345 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12345) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x12347 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12347)
             "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x12349 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12349)
             "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : 'tags this -> GLenum.t) =
      fun (x12351 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12351) "LINES")
    let (get_LINE_LOOP : 'tags this -> GLenum.t) =
      fun (x12353 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12353) "LINE_LOOP")
    let (get_LINE_STRIP : 'tags this -> GLenum.t) =
      fun (x12355 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12355) "LINE_STRIP")
    let (get_LINE_WIDTH : 'tags this -> GLenum.t) =
      fun (x12357 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12357) "LINE_WIDTH")
    let (get_LINK_STATUS : 'tags this -> GLenum.t) =
      fun (x12359 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12359) "LINK_STATUS")
    let (get_LOW_FLOAT : 'tags this -> GLenum.t) =
      fun (x12361 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12361) "LOW_FLOAT")
    let (get_LOW_INT : 'tags this -> GLenum.t) =
      fun (x12363 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12363) "LOW_INT")
    let (get_LUMINANCE : 'tags this -> GLenum.t) =
      fun (x12365 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12365) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : 'tags this -> GLenum.t) =
      fun (x12367 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12367) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x12369 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12369)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x12371 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12371)
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x12373 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12373)
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x12375 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12375)
             "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x12377 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12377)
             "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x12379 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12379)
             "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : 'tags this -> GLenum.t) =
      fun (x12381 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12381)
             "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x12383 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12383)
             "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x12385 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12385)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x12387 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12387)
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : 'tags this -> GLenum.t) =
      fun (x12389 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12389)
             "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : 'tags this -> GLenum.t) =
      fun (x12391 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12391) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : 'tags this -> GLenum.t) =
      fun (x12393 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12393) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : 'tags this -> GLenum.t) =
      fun (x12395 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12395) "MIRRORED_REPEAT")
    let (get_NEAREST : 'tags this -> GLenum.t) =
      fun (x12397 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12397) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x12399 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12399)
             "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x12401 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12401)
             "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : 'tags this -> GLenum.t) =
      fun (x12403 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12403) "NEVER")
    let (get_NICEST : 'tags this -> GLenum.t) =
      fun (x12405 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12405) "NICEST")
    let (get_NONE : 'tags this -> GLenum.t) =
      fun (x12407 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12407) "NONE")
    let (get_NOTEQUAL : 'tags this -> GLenum.t) =
      fun (x12409 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12409) "NOTEQUAL")
    let (get_NO_ERROR : 'tags this -> GLenum.t) =
      fun (x12411 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12411) "NO_ERROR")
    let (get_ONE : 'tags this -> GLenum.t) =
      fun (x12413 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12413) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x12415 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12415)
             "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x12417 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12417)
             "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x12419 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12419)
             "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x12421 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12421)
             "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x12423 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12423)
             "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x12425 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12425)
             "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : 'tags this -> GLenum.t) =
      fun (x12427 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12427) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x12429 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12429) "PACK_ALIGNMENT")
    let (get_POINTS : 'tags this -> GLenum.t) =
      fun (x12431 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12431) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : 'tags this -> GLenum.t) =
      fun (x12433 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12433)
             "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : 'tags this -> GLenum.t) =
      fun (x12435 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12435)
             "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : 'tags this -> GLenum.t) =
      fun (x12437 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12437)
             "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : 'tags this -> GLenum.t) =
      fun (x12439 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12439) "RED_BITS")
    let (get_RENDERBUFFER : 'tags this -> GLenum.t) =
      fun (x12441 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12441) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x12443 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12443)
             "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12445 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12445)
             "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x12447 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12447)
             "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x12449 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12449)
             "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x12451 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12451)
             "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : 'tags this -> GLenum.t) =
      fun (x12453 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12453)
             "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : 'tags this -> GLenum.t) =
      fun (x12455 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12455)
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x12457 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12457)
             "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x12459 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12459)
             "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : 'tags this -> GLenum.t) =
      fun (x12461 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12461)
             "RENDERBUFFER_WIDTH")
    let (get_RENDERER : 'tags this -> GLenum.t) =
      fun (x12463 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12463) "RENDERER")
    let (get_REPEAT : 'tags this -> GLenum.t) =
      fun (x12465 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12465) "REPEAT")
    let (get_REPLACE : 'tags this -> GLenum.t) =
      fun (x12467 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12467) "REPLACE")
    let (get_RGB : 'tags this -> GLenum.t) =
      fun (x12469 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12469) "RGB")
    let (get_RGB565 : 'tags this -> GLenum.t) =
      fun (x12471 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12471) "RGB565")
    let (get_RGB5_A1 : 'tags this -> GLenum.t) =
      fun (x12473 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12473) "RGB5_A1")
    let (get_RGBA : 'tags this -> GLenum.t) =
      fun (x12475 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12475) "RGBA")
    let (get_RGBA4 : 'tags this -> GLenum.t) =
      fun (x12477 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12477) "RGBA4")
    let (get_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x12479 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12479) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x12481 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12481) "SAMPLER_CUBE")
    let (get_SAMPLES : 'tags this -> GLenum.t) =
      fun (x12483 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12483) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : 'tags this -> GLenum.t) =
      fun (x12485 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12485)
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : 'tags this -> GLenum.t) =
      fun (x12487 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12487) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : 'tags this -> GLenum.t) =
      fun (x12489 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12489) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : 'tags this -> GLenum.t) =
      fun (x12491 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12491)
             "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : 'tags this -> GLenum.t) =
      fun (x12493 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12493)
             "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : 'tags this -> GLenum.t) =
      fun (x12495 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12495) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : 'tags this -> GLenum.t) =
      fun (x12497 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12497) "SCISSOR_TEST")
    let (get_SHADER_TYPE : 'tags this -> GLenum.t) =
      fun (x12499 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12499) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : 'tags this -> GLenum.t) =
      fun (x12501 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12501)
             "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : 'tags this -> GLenum.t) =
      fun (x12503 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12503) "SHORT")
    let (get_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x12505 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12505) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : 'tags this -> GLenum.t) =
      fun (x12507 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12507)
             "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x12509 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12509) "SRC_COLOR")
    let (get_STATIC_DRAW : 'tags this -> GLenum.t) =
      fun (x12511 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12511) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x12513 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12513)
             "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : 'tags this -> GLenum.t) =
      fun (x12515 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12515)
             "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : 'tags this -> GLenum.t) =
      fun (x12517 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12517)
             "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x12519 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12519)
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x12521 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12521)
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : 'tags this -> GLenum.t) =
      fun (x12523 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12523)
             "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x12525 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12525)
             "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x12527 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12527)
             "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : 'tags this -> GLenum.t) =
      fun (x12529 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12529) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x12531 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12531)
             "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x12533 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12533)
             "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : 'tags this -> GLenum.t) =
      fun (x12535 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12535) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : 'tags this -> GLenum.t) =
      fun (x12537 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12537) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : 'tags this -> GLenum.t) =
      fun (x12539 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12539) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x12541 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12541)
             "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x12543 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12543)
             "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : 'tags this -> GLenum.t) =
      fun (x12545 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12545) "STENCIL_REF")
    let (get_STENCIL_TEST : 'tags this -> GLenum.t) =
      fun (x12547 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12547) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x12549 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12549)
             "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x12551 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12551)
             "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : 'tags this -> GLenum.t) =
      fun (x12553 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12553) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : 'tags this -> GLenum.t) =
      fun (x12555 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12555) "SUBPIXEL_BITS")
    let (get_TEXTURE : 'tags this -> GLenum.t) =
      fun (x12557 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12557) "TEXTURE")
    let (get_TEXTURE0 : 'tags this -> GLenum.t) =
      fun (x12559 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12559) "TEXTURE0")
    let (get_TEXTURE1 : 'tags this -> GLenum.t) =
      fun (x12561 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12561) "TEXTURE1")
    let (get_TEXTURE10 : 'tags this -> GLenum.t) =
      fun (x12563 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12563) "TEXTURE10")
    let (get_TEXTURE11 : 'tags this -> GLenum.t) =
      fun (x12565 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12565) "TEXTURE11")
    let (get_TEXTURE12 : 'tags this -> GLenum.t) =
      fun (x12567 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12567) "TEXTURE12")
    let (get_TEXTURE13 : 'tags this -> GLenum.t) =
      fun (x12569 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12569) "TEXTURE13")
    let (get_TEXTURE14 : 'tags this -> GLenum.t) =
      fun (x12571 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12571) "TEXTURE14")
    let (get_TEXTURE15 : 'tags this -> GLenum.t) =
      fun (x12573 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12573) "TEXTURE15")
    let (get_TEXTURE16 : 'tags this -> GLenum.t) =
      fun (x12575 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12575) "TEXTURE16")
    let (get_TEXTURE17 : 'tags this -> GLenum.t) =
      fun (x12577 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12577) "TEXTURE17")
    let (get_TEXTURE18 : 'tags this -> GLenum.t) =
      fun (x12579 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12579) "TEXTURE18")
    let (get_TEXTURE19 : 'tags this -> GLenum.t) =
      fun (x12581 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12581) "TEXTURE19")
    let (get_TEXTURE2 : 'tags this -> GLenum.t) =
      fun (x12583 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12583) "TEXTURE2")
    let (get_TEXTURE20 : 'tags this -> GLenum.t) =
      fun (x12585 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12585) "TEXTURE20")
    let (get_TEXTURE21 : 'tags this -> GLenum.t) =
      fun (x12587 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12587) "TEXTURE21")
    let (get_TEXTURE22 : 'tags this -> GLenum.t) =
      fun (x12589 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12589) "TEXTURE22")
    let (get_TEXTURE23 : 'tags this -> GLenum.t) =
      fun (x12591 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12591) "TEXTURE23")
    let (get_TEXTURE24 : 'tags this -> GLenum.t) =
      fun (x12593 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12593) "TEXTURE24")
    let (get_TEXTURE25 : 'tags this -> GLenum.t) =
      fun (x12595 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12595) "TEXTURE25")
    let (get_TEXTURE26 : 'tags this -> GLenum.t) =
      fun (x12597 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12597) "TEXTURE26")
    let (get_TEXTURE27 : 'tags this -> GLenum.t) =
      fun (x12599 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12599) "TEXTURE27")
    let (get_TEXTURE28 : 'tags this -> GLenum.t) =
      fun (x12601 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12601) "TEXTURE28")
    let (get_TEXTURE29 : 'tags this -> GLenum.t) =
      fun (x12603 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12603) "TEXTURE29")
    let (get_TEXTURE3 : 'tags this -> GLenum.t) =
      fun (x12605 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12605) "TEXTURE3")
    let (get_TEXTURE30 : 'tags this -> GLenum.t) =
      fun (x12607 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12607) "TEXTURE30")
    let (get_TEXTURE31 : 'tags this -> GLenum.t) =
      fun (x12609 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12609) "TEXTURE31")
    let (get_TEXTURE4 : 'tags this -> GLenum.t) =
      fun (x12611 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12611) "TEXTURE4")
    let (get_TEXTURE5 : 'tags this -> GLenum.t) =
      fun (x12613 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12613) "TEXTURE5")
    let (get_TEXTURE6 : 'tags this -> GLenum.t) =
      fun (x12615 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12615) "TEXTURE6")
    let (get_TEXTURE7 : 'tags this -> GLenum.t) =
      fun (x12617 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12617) "TEXTURE7")
    let (get_TEXTURE8 : 'tags this -> GLenum.t) =
      fun (x12619 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12619) "TEXTURE8")
    let (get_TEXTURE9 : 'tags this -> GLenum.t) =
      fun (x12621 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12621) "TEXTURE9")
    let (get_TEXTURE_2D : 'tags this -> GLenum.t) =
      fun (x12623 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12623) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : 'tags this -> GLenum.t) =
      fun (x12625 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12625)
             "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x12627 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12627)
             "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x12629 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12629)
             "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : 'tags this -> GLenum.t) =
      fun (x12631 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12631)
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : 'tags this -> GLenum.t) =
      fun (x12633 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12633)
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : 'tags this -> GLenum.t) =
      fun (x12635 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12635)
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : 'tags this -> GLenum.t) =
      fun (x12637 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12637)
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : 'tags this -> GLenum.t) =
      fun (x12639 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12639)
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : 'tags this -> GLenum.t) =
      fun (x12641 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12641)
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : 'tags this -> GLenum.t) =
      fun (x12643 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12643)
             "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : 'tags this -> GLenum.t) =
      fun (x12645 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12645)
             "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : 'tags this -> GLenum.t) =
      fun (x12647 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12647) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : 'tags this -> GLenum.t) =
      fun (x12649 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12649) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : 'tags this -> GLenum.t) =
      fun (x12651 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12651) "TRIANGLES")
    let (get_TRIANGLE_FAN : 'tags this -> GLenum.t) =
      fun (x12653 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12653) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : 'tags this -> GLenum.t) =
      fun (x12655 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12655) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x12657 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12657)
             "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : 'tags this -> GLenum.t) =
      fun (x12659 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12659)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : 'tags this -> GLenum.t) =
      fun (x12661 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12661)
             "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : 'tags this -> GLenum.t) =
      fun (x12663 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12663)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : 'tags this -> GLenum.t) =
      fun (x12665 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12665) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : 'tags this -> GLenum.t) =
      fun (x12667 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12667) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : 'tags this -> GLenum.t) =
      fun (x12669 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12669) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : 'tags this -> GLenum.t) =
      fun (x12671 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12671)
             "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : 'tags this -> GLenum.t) =
      fun (x12673 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12673)
             "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : 'tags this -> GLenum.t) =
      fun (x12675 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12675)
             "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : 'tags this -> GLenum.t) =
      fun (x12677 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12677) "VALIDATE_STATUS")
    let (get_VENDOR : 'tags this -> GLenum.t) =
      fun (x12679 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12679) "VENDOR")
    let (get_VERSION : 'tags this -> GLenum.t) =
      fun (x12681 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12681) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x12683 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12683)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : 'tags this -> GLenum.t) =
      fun (x12685 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12685)
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x12687 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12687)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : 'tags this -> GLenum.t) =
      fun (x12689 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12689)
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : 'tags this -> GLenum.t) =
      fun (x12691 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12691)
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x12693 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12693)
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : 'tags this -> GLenum.t) =
      fun (x12695 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12695)
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : 'tags this -> GLenum.t) =
      fun (x12697 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12697) "VERTEX_SHADER")
    let (get_VIEWPORT : 'tags this -> GLenum.t) =
      fun (x12699 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12699) "VIEWPORT")
    let (get_ZERO : 'tags this -> GLenum.t) =
      fun (x12701 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12701) "ZERO")
    let (vertexAttrib1fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x12706 : 'tags this) ->
        fun ~index:(x12703 : GLuint.t) ->
          fun ~values:(x12704 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12706) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x12703);(Iterable.t_1_to_js
                                              GLfloat.t_to_js x12704)|])
    let (vertexAttrib2fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x12711 : 'tags this) ->
        fun ~index:(x12708 : GLuint.t) ->
          fun ~values:(x12709 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12711) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x12708);(Iterable.t_1_to_js
                                              GLfloat.t_to_js x12709)|])
    let (vertexAttrib3fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x12716 : 'tags this) ->
        fun ~index:(x12713 : GLuint.t) ->
          fun ~values:(x12714 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12716) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x12713);(Iterable.t_1_to_js
                                              GLfloat.t_to_js x12714)|])
    let (vertexAttrib4fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x12721 : 'tags this) ->
        fun ~index:(x12718 : GLuint.t) ->
          fun ~values:(x12719 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12721) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x12718);(Iterable.t_1_to_js
                                              GLfloat.t_to_js x12719)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface119:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLRenderingContext.t
                          val set_prototype :
                            t -> WebGLRenderingContext.t -> unit
                          val create : t -> WebGLRenderingContext.t
                          val get_ACTIVE_ATTRIBUTES : t -> GLenum.t
                          val get_ACTIVE_TEXTURE : t -> GLenum.t
                          val get_ACTIVE_UNIFORMS : t -> GLenum.t
                          val get_ALIASED_LINE_WIDTH_RANGE : t -> GLenum.t
                          val get_ALIASED_POINT_SIZE_RANGE : t -> GLenum.t
                          val get_ALPHA : t -> GLenum.t
                          val get_ALPHA_BITS : t -> GLenum.t
                          val get_ALWAYS : t -> GLenum.t
                          val get_ARRAY_BUFFER : t -> GLenum.t
                          val get_ARRAY_BUFFER_BINDING : t -> GLenum.t
                          val get_ATTACHED_SHADERS : t -> GLenum.t
                          val get_BACK : t -> GLenum.t
                          val get_BLEND : t -> GLenum.t
                          val get_BLEND_COLOR : t -> GLenum.t
                          val get_BLEND_DST_ALPHA : t -> GLenum.t
                          val get_BLEND_DST_RGB : t -> GLenum.t
                          val get_BLEND_EQUATION : t -> GLenum.t
                          val get_BLEND_EQUATION_ALPHA : t -> GLenum.t
                          val get_BLEND_EQUATION_RGB : t -> GLenum.t
                          val get_BLEND_SRC_ALPHA : t -> GLenum.t
                          val get_BLEND_SRC_RGB : t -> GLenum.t
                          val get_BLUE_BITS : t -> GLenum.t
                          val get_BOOL : t -> GLenum.t
                          val get_BOOL_VEC2 : t -> GLenum.t
                          val get_BOOL_VEC3 : t -> GLenum.t
                          val get_BOOL_VEC4 : t -> GLenum.t
                          val get_BROWSER_DEFAULT_WEBGL : t -> GLenum.t
                          val get_BUFFER_SIZE : t -> GLenum.t
                          val get_BUFFER_USAGE : t -> GLenum.t
                          val get_BYTE : t -> GLenum.t
                          val get_CCW : t -> GLenum.t
                          val get_CLAMP_TO_EDGE : t -> GLenum.t
                          val get_COLOR_ATTACHMENT0 : t -> GLenum.t
                          val get_COLOR_BUFFER_BIT : t -> GLenum.t
                          val get_COLOR_CLEAR_VALUE : t -> GLenum.t
                          val get_COLOR_WRITEMASK : t -> GLenum.t
                          val get_COMPILE_STATUS : t -> GLenum.t
                          val get_COMPRESSED_TEXTURE_FORMATS : t -> GLenum.t
                          val get_CONSTANT_ALPHA : t -> GLenum.t
                          val get_CONSTANT_COLOR : t -> GLenum.t
                          val get_CONTEXT_LOST_WEBGL : t -> GLenum.t
                          val get_CULL_FACE : t -> GLenum.t
                          val get_CULL_FACE_MODE : t -> GLenum.t
                          val get_CURRENT_PROGRAM : t -> GLenum.t
                          val get_CURRENT_VERTEX_ATTRIB : t -> GLenum.t
                          val get_CW : t -> GLenum.t
                          val get_DECR : t -> GLenum.t
                          val get_DECR_WRAP : t -> GLenum.t
                          val get_DELETE_STATUS : t -> GLenum.t
                          val get_DEPTH_ATTACHMENT : t -> GLenum.t
                          val get_DEPTH_BITS : t -> GLenum.t
                          val get_DEPTH_BUFFER_BIT : t -> GLenum.t
                          val get_DEPTH_CLEAR_VALUE : t -> GLenum.t
                          val get_DEPTH_COMPONENT : t -> GLenum.t
                          val get_DEPTH_COMPONENT16 : t -> GLenum.t
                          val get_DEPTH_FUNC : t -> GLenum.t
                          val get_DEPTH_RANGE : t -> GLenum.t
                          val get_DEPTH_STENCIL : t -> GLenum.t
                          val get_DEPTH_STENCIL_ATTACHMENT : t -> GLenum.t
                          val get_DEPTH_TEST : t -> GLenum.t
                          val get_DEPTH_WRITEMASK : t -> GLenum.t
                          val get_DITHER : t -> GLenum.t
                          val get_DONT_CARE : t -> GLenum.t
                          val get_DST_ALPHA : t -> GLenum.t
                          val get_DST_COLOR : t -> GLenum.t
                          val get_DYNAMIC_DRAW : t -> GLenum.t
                          val get_ELEMENT_ARRAY_BUFFER : t -> GLenum.t
                          val get_ELEMENT_ARRAY_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_EQUAL : t -> GLenum.t
                          val get_FASTEST : t -> GLenum.t
                          val get_FLOAT : t -> GLenum.t
                          val get_FLOAT_MAT2 : t -> GLenum.t
                          val get_FLOAT_MAT3 : t -> GLenum.t
                          val get_FLOAT_MAT4 : t -> GLenum.t
                          val get_FLOAT_VEC2 : t -> GLenum.t
                          val get_FLOAT_VEC3 : t -> GLenum.t
                          val get_FLOAT_VEC4 : t -> GLenum.t
                          val get_FRAGMENT_SHADER : t -> GLenum.t
                          val get_FRAMEBUFFER : t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :
                            t -> GLenum.t
                          val
                            get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
                            : t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_BINDING : t -> GLenum.t
                          val get_FRAMEBUFFER_COMPLETE : t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_UNSUPPORTED : t -> GLenum.t
                          val get_FRONT : t -> GLenum.t
                          val get_FRONT_AND_BACK : t -> GLenum.t
                          val get_FRONT_FACE : t -> GLenum.t
                          val get_FUNC_ADD : t -> GLenum.t
                          val get_FUNC_REVERSE_SUBTRACT : t -> GLenum.t
                          val get_FUNC_SUBTRACT : t -> GLenum.t
                          val get_GENERATE_MIPMAP_HINT : t -> GLenum.t
                          val get_GEQUAL : t -> GLenum.t
                          val get_GREATER : t -> GLenum.t
                          val get_GREEN_BITS : t -> GLenum.t
                          val get_HIGH_FLOAT : t -> GLenum.t
                          val get_HIGH_INT : t -> GLenum.t
                          val get_IMPLEMENTATION_COLOR_READ_FORMAT :
                            t -> GLenum.t
                          val get_IMPLEMENTATION_COLOR_READ_TYPE :
                            t -> GLenum.t
                          val get_INCR : t -> GLenum.t
                          val get_INCR_WRAP : t -> GLenum.t
                          val get_INT : t -> GLenum.t
                          val get_INT_VEC2 : t -> GLenum.t
                          val get_INT_VEC3 : t -> GLenum.t
                          val get_INT_VEC4 : t -> GLenum.t
                          val get_INVALID_ENUM : t -> GLenum.t
                          val get_INVALID_FRAMEBUFFER_OPERATION :
                            t -> GLenum.t
                          val get_INVALID_OPERATION : t -> GLenum.t
                          val get_INVALID_VALUE : t -> GLenum.t
                          val get_INVERT : t -> GLenum.t
                          val get_KEEP : t -> GLenum.t
                          val get_LEQUAL : t -> GLenum.t
                          val get_LESS : t -> GLenum.t
                          val get_LINEAR : t -> GLenum.t
                          val get_LINEAR_MIPMAP_LINEAR : t -> GLenum.t
                          val get_LINEAR_MIPMAP_NEAREST : t -> GLenum.t
                          val get_LINES : t -> GLenum.t
                          val get_LINE_LOOP : t -> GLenum.t
                          val get_LINE_STRIP : t -> GLenum.t
                          val get_LINE_WIDTH : t -> GLenum.t
                          val get_LINK_STATUS : t -> GLenum.t
                          val get_LOW_FLOAT : t -> GLenum.t
                          val get_LOW_INT : t -> GLenum.t
                          val get_LUMINANCE : t -> GLenum.t
                          val get_LUMINANCE_ALPHA : t -> GLenum.t
                          val get_MAX_COMBINED_TEXTURE_IMAGE_UNITS :
                            t -> GLenum.t
                          val get_MAX_CUBE_MAP_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_FRAGMENT_UNIFORM_VECTORS :
                            t -> GLenum.t
                          val get_MAX_RENDERBUFFER_SIZE : t -> GLenum.t
                          val get_MAX_TEXTURE_IMAGE_UNITS : t -> GLenum.t
                          val get_MAX_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_VARYING_VECTORS : t -> GLenum.t
                          val get_MAX_VERTEX_ATTRIBS : t -> GLenum.t
                          val get_MAX_VERTEX_TEXTURE_IMAGE_UNITS :
                            t -> GLenum.t
                          val get_MAX_VERTEX_UNIFORM_VECTORS : t -> GLenum.t
                          val get_MAX_VIEWPORT_DIMS : t -> GLenum.t
                          val get_MEDIUM_FLOAT : t -> GLenum.t
                          val get_MEDIUM_INT : t -> GLenum.t
                          val get_MIRRORED_REPEAT : t -> GLenum.t
                          val get_NEAREST : t -> GLenum.t
                          val get_NEAREST_MIPMAP_LINEAR : t -> GLenum.t
                          val get_NEAREST_MIPMAP_NEAREST : t -> GLenum.t
                          val get_NEVER : t -> GLenum.t
                          val get_NICEST : t -> GLenum.t
                          val get_NONE : t -> GLenum.t
                          val get_NOTEQUAL : t -> GLenum.t
                          val get_NO_ERROR : t -> GLenum.t
                          val get_ONE : t -> GLenum.t
                          val get_ONE_MINUS_CONSTANT_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_CONSTANT_COLOR : t -> GLenum.t
                          val get_ONE_MINUS_DST_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_DST_COLOR : t -> GLenum.t
                          val get_ONE_MINUS_SRC_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_SRC_COLOR : t -> GLenum.t
                          val get_OUT_OF_MEMORY : t -> GLenum.t
                          val get_PACK_ALIGNMENT : t -> GLenum.t
                          val get_POINTS : t -> GLenum.t
                          val get_POLYGON_OFFSET_FACTOR : t -> GLenum.t
                          val get_POLYGON_OFFSET_FILL : t -> GLenum.t
                          val get_POLYGON_OFFSET_UNITS : t -> GLenum.t
                          val get_RED_BITS : t -> GLenum.t
                          val get_RENDERBUFFER : t -> GLenum.t
                          val get_RENDERBUFFER_ALPHA_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_BINDING : t -> GLenum.t
                          val get_RENDERBUFFER_BLUE_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_DEPTH_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_GREEN_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_HEIGHT : t -> GLenum.t
                          val get_RENDERBUFFER_INTERNAL_FORMAT :
                            t -> GLenum.t
                          val get_RENDERBUFFER_RED_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_STENCIL_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_WIDTH : t -> GLenum.t
                          val get_RENDERER : t -> GLenum.t
                          val get_REPEAT : t -> GLenum.t
                          val get_REPLACE : t -> GLenum.t
                          val get_RGB : t -> GLenum.t
                          val get_RGB565 : t -> GLenum.t
                          val get_RGB5_A1 : t -> GLenum.t
                          val get_RGBA : t -> GLenum.t
                          val get_RGBA4 : t -> GLenum.t
                          val get_SAMPLER_2D : t -> GLenum.t
                          val get_SAMPLER_CUBE : t -> GLenum.t
                          val get_SAMPLES : t -> GLenum.t
                          val get_SAMPLE_ALPHA_TO_COVERAGE : t -> GLenum.t
                          val get_SAMPLE_BUFFERS : t -> GLenum.t
                          val get_SAMPLE_COVERAGE : t -> GLenum.t
                          val get_SAMPLE_COVERAGE_INVERT : t -> GLenum.t
                          val get_SAMPLE_COVERAGE_VALUE : t -> GLenum.t
                          val get_SCISSOR_BOX : t -> GLenum.t
                          val get_SCISSOR_TEST : t -> GLenum.t
                          val get_SHADER_TYPE : t -> GLenum.t
                          val get_SHADING_LANGUAGE_VERSION : t -> GLenum.t
                          val get_SHORT : t -> GLenum.t
                          val get_SRC_ALPHA : t -> GLenum.t
                          val get_SRC_ALPHA_SATURATE : t -> GLenum.t
                          val get_SRC_COLOR : t -> GLenum.t
                          val get_STATIC_DRAW : t -> GLenum.t
                          val get_STENCIL_ATTACHMENT : t -> GLenum.t
                          val get_STENCIL_BACK_FAIL : t -> GLenum.t
                          val get_STENCIL_BACK_FUNC : t -> GLenum.t
                          val get_STENCIL_BACK_PASS_DEPTH_FAIL :
                            t -> GLenum.t
                          val get_STENCIL_BACK_PASS_DEPTH_PASS :
                            t -> GLenum.t
                          val get_STENCIL_BACK_REF : t -> GLenum.t
                          val get_STENCIL_BACK_VALUE_MASK : t -> GLenum.t
                          val get_STENCIL_BACK_WRITEMASK : t -> GLenum.t
                          val get_STENCIL_BITS : t -> GLenum.t
                          val get_STENCIL_BUFFER_BIT : t -> GLenum.t
                          val get_STENCIL_CLEAR_VALUE : t -> GLenum.t
                          val get_STENCIL_FAIL : t -> GLenum.t
                          val get_STENCIL_FUNC : t -> GLenum.t
                          val get_STENCIL_INDEX8 : t -> GLenum.t
                          val get_STENCIL_PASS_DEPTH_FAIL : t -> GLenum.t
                          val get_STENCIL_PASS_DEPTH_PASS : t -> GLenum.t
                          val get_STENCIL_REF : t -> GLenum.t
                          val get_STENCIL_TEST : t -> GLenum.t
                          val get_STENCIL_VALUE_MASK : t -> GLenum.t
                          val get_STENCIL_WRITEMASK : t -> GLenum.t
                          val get_STREAM_DRAW : t -> GLenum.t
                          val get_SUBPIXEL_BITS : t -> GLenum.t
                          val get_TEXTURE : t -> GLenum.t
                          val get_TEXTURE0 : t -> GLenum.t
                          val get_TEXTURE1 : t -> GLenum.t
                          val get_TEXTURE10 : t -> GLenum.t
                          val get_TEXTURE11 : t -> GLenum.t
                          val get_TEXTURE12 : t -> GLenum.t
                          val get_TEXTURE13 : t -> GLenum.t
                          val get_TEXTURE14 : t -> GLenum.t
                          val get_TEXTURE15 : t -> GLenum.t
                          val get_TEXTURE16 : t -> GLenum.t
                          val get_TEXTURE17 : t -> GLenum.t
                          val get_TEXTURE18 : t -> GLenum.t
                          val get_TEXTURE19 : t -> GLenum.t
                          val get_TEXTURE2 : t -> GLenum.t
                          val get_TEXTURE20 : t -> GLenum.t
                          val get_TEXTURE21 : t -> GLenum.t
                          val get_TEXTURE22 : t -> GLenum.t
                          val get_TEXTURE23 : t -> GLenum.t
                          val get_TEXTURE24 : t -> GLenum.t
                          val get_TEXTURE25 : t -> GLenum.t
                          val get_TEXTURE26 : t -> GLenum.t
                          val get_TEXTURE27 : t -> GLenum.t
                          val get_TEXTURE28 : t -> GLenum.t
                          val get_TEXTURE29 : t -> GLenum.t
                          val get_TEXTURE3 : t -> GLenum.t
                          val get_TEXTURE30 : t -> GLenum.t
                          val get_TEXTURE31 : t -> GLenum.t
                          val get_TEXTURE4 : t -> GLenum.t
                          val get_TEXTURE5 : t -> GLenum.t
                          val get_TEXTURE6 : t -> GLenum.t
                          val get_TEXTURE7 : t -> GLenum.t
                          val get_TEXTURE8 : t -> GLenum.t
                          val get_TEXTURE9 : t -> GLenum.t
                          val get_TEXTURE_2D : t -> GLenum.t
                          val get_TEXTURE_BINDING_2D : t -> GLenum.t
                          val get_TEXTURE_BINDING_CUBE_MAP : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_X : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_Y : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_Z : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_X : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_Y : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_Z : t -> GLenum.t
                          val get_TEXTURE_MAG_FILTER : t -> GLenum.t
                          val get_TEXTURE_MIN_FILTER : t -> GLenum.t
                          val get_TEXTURE_WRAP_S : t -> GLenum.t
                          val get_TEXTURE_WRAP_T : t -> GLenum.t
                          val get_TRIANGLES : t -> GLenum.t
                          val get_TRIANGLE_FAN : t -> GLenum.t
                          val get_TRIANGLE_STRIP : t -> GLenum.t
                          val get_UNPACK_ALIGNMENT : t -> GLenum.t
                          val get_UNPACK_COLORSPACE_CONVERSION_WEBGL :
                            t -> GLenum.t
                          val get_UNPACK_FLIP_Y_WEBGL : t -> GLenum.t
                          val get_UNPACK_PREMULTIPLY_ALPHA_WEBGL :
                            t -> GLenum.t
                          val get_UNSIGNED_BYTE : t -> GLenum.t
                          val get_UNSIGNED_INT : t -> GLenum.t
                          val get_UNSIGNED_SHORT : t -> GLenum.t
                          val get_UNSIGNED_SHORT_4_4_4_4 : t -> GLenum.t
                          val get_UNSIGNED_SHORT_5_5_5_1 : t -> GLenum.t
                          val get_UNSIGNED_SHORT_5_6_5 : t -> GLenum.t
                          val get_VALIDATE_STATUS : t -> GLenum.t
                          val get_VENDOR : t -> GLenum.t
                          val get_VERSION : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_ENABLED : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_NORMALIZED :
                            t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_POINTER : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_SIZE : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_STRIDE : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_TYPE : t -> GLenum.t
                          val get_VERTEX_SHADER : t -> GLenum.t
                          val get_VIEWPORT : t -> GLenum.t
                          val get_ZERO : t -> GLenum.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x12724 : Ojs.t) -> x12724
    and t_to_js : t -> Ojs.t = fun (x12723 : Ojs.t) -> x12723
    let (get_prototype : t -> WebGLRenderingContext.t) =
      fun (x12725 : t) ->
        WebGLRenderingContext.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12725) "prototype")
    let (set_prototype : t -> WebGLRenderingContext.t -> unit) =
      fun (x12726 : t) ->
        fun (x12727 : WebGLRenderingContext.t) ->
          Ojs.set_prop_ascii (t_to_js x12726) "prototype"
            (WebGLRenderingContext.t_to_js x12727)
    let (create : t -> WebGLRenderingContext.t) =
      fun (x12728 : t) ->
        WebGLRenderingContext.t_of_js (Ojs.new_obj (t_to_js x12728) [||])
    let (get_ACTIVE_ATTRIBUTES : t -> GLenum.t) =
      fun (x12729 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12729) "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : t -> GLenum.t) =
      fun (x12730 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12730) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : t -> GLenum.t) =
      fun (x12731 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12731) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : t -> GLenum.t) =
      fun (x12732 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12732) "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : t -> GLenum.t) =
      fun (x12733 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12733) "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : t -> GLenum.t) =
      fun (x12734 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12734) "ALPHA")
    let (get_ALPHA_BITS : t -> GLenum.t) =
      fun (x12735 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12735) "ALPHA_BITS")
    let (get_ALWAYS : t -> GLenum.t) =
      fun (x12736 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12736) "ALWAYS")
    let (get_ARRAY_BUFFER : t -> GLenum.t) =
      fun (x12737 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12737) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x12738 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12738) "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : t -> GLenum.t) =
      fun (x12739 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12739) "ATTACHED_SHADERS")
    let (get_BACK : t -> GLenum.t) =
      fun (x12740 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12740) "BACK")
    let (get_BLEND : t -> GLenum.t) =
      fun (x12741 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12741) "BLEND")
    let (get_BLEND_COLOR : t -> GLenum.t) =
      fun (x12742 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12742) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : t -> GLenum.t) =
      fun (x12743 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12743) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : t -> GLenum.t) =
      fun (x12744 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12744) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : t -> GLenum.t) =
      fun (x12745 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12745) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : t -> GLenum.t) =
      fun (x12746 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12746) "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : t -> GLenum.t) =
      fun (x12747 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12747) "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : t -> GLenum.t) =
      fun (x12748 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12748) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : t -> GLenum.t) =
      fun (x12749 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12749) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : t -> GLenum.t) =
      fun (x12750 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12750) "BLUE_BITS")
    let (get_BOOL : t -> GLenum.t) =
      fun (x12751 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12751) "BOOL")
    let (get_BOOL_VEC2 : t -> GLenum.t) =
      fun (x12752 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12752) "BOOL_VEC2")
    let (get_BOOL_VEC3 : t -> GLenum.t) =
      fun (x12753 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12753) "BOOL_VEC3")
    let (get_BOOL_VEC4 : t -> GLenum.t) =
      fun (x12754 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12754) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : t -> GLenum.t) =
      fun (x12755 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12755) "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : t -> GLenum.t) =
      fun (x12756 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12756) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : t -> GLenum.t) =
      fun (x12757 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12757) "BUFFER_USAGE")
    let (get_BYTE : t -> GLenum.t) =
      fun (x12758 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12758) "BYTE")
    let (get_CCW : t -> GLenum.t) =
      fun (x12759 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12759) "CCW")
    let (get_CLAMP_TO_EDGE : t -> GLenum.t) =
      fun (x12760 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12760) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : t -> GLenum.t) =
      fun (x12761 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12761) "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : t -> GLenum.t) =
      fun (x12762 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12762) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : t -> GLenum.t) =
      fun (x12763 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12763) "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : t -> GLenum.t) =
      fun (x12764 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12764) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : t -> GLenum.t) =
      fun (x12765 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12765) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : t -> GLenum.t) =
      fun (x12766 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12766) "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : t -> GLenum.t) =
      fun (x12767 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12767) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : t -> GLenum.t) =
      fun (x12768 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12768) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : t -> GLenum.t) =
      fun (x12769 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12769) "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : t -> GLenum.t) =
      fun (x12770 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12770) "CULL_FACE")
    let (get_CULL_FACE_MODE : t -> GLenum.t) =
      fun (x12771 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12771) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : t -> GLenum.t) =
      fun (x12772 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12772) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : t -> GLenum.t) =
      fun (x12773 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12773) "CURRENT_VERTEX_ATTRIB")
    let (get_CW : t -> GLenum.t) =
      fun (x12774 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12774) "CW")
    let (get_DECR : t -> GLenum.t) =
      fun (x12775 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12775) "DECR")
    let (get_DECR_WRAP : t -> GLenum.t) =
      fun (x12776 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12776) "DECR_WRAP")
    let (get_DELETE_STATUS : t -> GLenum.t) =
      fun (x12777 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12777) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : t -> GLenum.t) =
      fun (x12778 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12778) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : t -> GLenum.t) =
      fun (x12779 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12779) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : t -> GLenum.t) =
      fun (x12780 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12780) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : t -> GLenum.t) =
      fun (x12781 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12781) "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : t -> GLenum.t) =
      fun (x12782 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12782) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : t -> GLenum.t) =
      fun (x12783 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12783) "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : t -> GLenum.t) =
      fun (x12784 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12784) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : t -> GLenum.t) =
      fun (x12785 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12785) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : t -> GLenum.t) =
      fun (x12786 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12786) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : t -> GLenum.t) =
      fun (x12787 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12787) "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : t -> GLenum.t) =
      fun (x12788 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12788) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : t -> GLenum.t) =
      fun (x12789 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12789) "DEPTH_WRITEMASK")
    let (get_DITHER : t -> GLenum.t) =
      fun (x12790 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12790) "DITHER")
    let (get_DONT_CARE : t -> GLenum.t) =
      fun (x12791 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12791) "DONT_CARE")
    let (get_DST_ALPHA : t -> GLenum.t) =
      fun (x12792 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12792) "DST_ALPHA")
    let (get_DST_COLOR : t -> GLenum.t) =
      fun (x12793 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12793) "DST_COLOR")
    let (get_DYNAMIC_DRAW : t -> GLenum.t) =
      fun (x12794 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12794) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : t -> GLenum.t) =
      fun (x12795 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12795) "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x12796 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12796) "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : t -> GLenum.t) =
      fun (x12797 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12797) "EQUAL")
    let (get_FASTEST : t -> GLenum.t) =
      fun (x12798 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12798) "FASTEST")
    let (get_FLOAT : t -> GLenum.t) =
      fun (x12799 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12799) "FLOAT")
    let (get_FLOAT_MAT2 : t -> GLenum.t) =
      fun (x12800 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12800) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : t -> GLenum.t) =
      fun (x12801 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12801) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : t -> GLenum.t) =
      fun (x12802 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12802) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : t -> GLenum.t) =
      fun (x12803 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12803) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : t -> GLenum.t) =
      fun (x12804 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12804) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : t -> GLenum.t) =
      fun (x12805 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12805) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : t -> GLenum.t) =
      fun (x12806 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12806) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : t -> GLenum.t) =
      fun (x12807 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12807) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : t -> GLenum.t) =
      fun (x12808 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12808)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : t -> GLenum.t) =
      fun (x12809 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12809)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : t -> GLenum.t) =
      fun (x12810 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12810)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : t -> GLenum.t) =
      fun (x12811 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12811)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : t -> GLenum.t) =
      fun (x12812 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12812) "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : t -> GLenum.t) =
      fun (x12813 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12813) "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : t -> GLenum.t) =
      fun (x12814 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12814)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : t -> GLenum.t) =
      fun (x12815 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12815)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : t -> GLenum.t) =
      fun (x12816 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12816)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : t -> GLenum.t) =
      fun (x12817 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12817) "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : t -> GLenum.t) =
      fun (x12818 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12818) "FRONT")
    let (get_FRONT_AND_BACK : t -> GLenum.t) =
      fun (x12819 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12819) "FRONT_AND_BACK")
    let (get_FRONT_FACE : t -> GLenum.t) =
      fun (x12820 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12820) "FRONT_FACE")
    let (get_FUNC_ADD : t -> GLenum.t) =
      fun (x12821 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12821) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : t -> GLenum.t) =
      fun (x12822 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12822) "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : t -> GLenum.t) =
      fun (x12823 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12823) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : t -> GLenum.t) =
      fun (x12824 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12824) "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : t -> GLenum.t) =
      fun (x12825 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12825) "GEQUAL")
    let (get_GREATER : t -> GLenum.t) =
      fun (x12826 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12826) "GREATER")
    let (get_GREEN_BITS : t -> GLenum.t) =
      fun (x12827 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12827) "GREEN_BITS")
    let (get_HIGH_FLOAT : t -> GLenum.t) =
      fun (x12828 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12828) "HIGH_FLOAT")
    let (get_HIGH_INT : t -> GLenum.t) =
      fun (x12829 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12829) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : t -> GLenum.t) =
      fun (x12830 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12830)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : t -> GLenum.t) =
      fun (x12831 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12831)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : t -> GLenum.t) =
      fun (x12832 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12832) "INCR")
    let (get_INCR_WRAP : t -> GLenum.t) =
      fun (x12833 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12833) "INCR_WRAP")
    let (get_INT : t -> GLenum.t) =
      fun (x12834 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12834) "INT")
    let (get_INT_VEC2 : t -> GLenum.t) =
      fun (x12835 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12835) "INT_VEC2")
    let (get_INT_VEC3 : t -> GLenum.t) =
      fun (x12836 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12836) "INT_VEC3")
    let (get_INT_VEC4 : t -> GLenum.t) =
      fun (x12837 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12837) "INT_VEC4")
    let (get_INVALID_ENUM : t -> GLenum.t) =
      fun (x12838 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12838) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : t -> GLenum.t) =
      fun (x12839 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12839)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : t -> GLenum.t) =
      fun (x12840 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12840) "INVALID_OPERATION")
    let (get_INVALID_VALUE : t -> GLenum.t) =
      fun (x12841 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12841) "INVALID_VALUE")
    let (get_INVERT : t -> GLenum.t) =
      fun (x12842 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12842) "INVERT")
    let (get_KEEP : t -> GLenum.t) =
      fun (x12843 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12843) "KEEP")
    let (get_LEQUAL : t -> GLenum.t) =
      fun (x12844 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12844) "LEQUAL")
    let (get_LESS : t -> GLenum.t) =
      fun (x12845 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12845) "LESS")
    let (get_LINEAR : t -> GLenum.t) =
      fun (x12846 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12846) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : t -> GLenum.t) =
      fun (x12847 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12847) "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : t -> GLenum.t) =
      fun (x12848 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12848) "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : t -> GLenum.t) =
      fun (x12849 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12849) "LINES")
    let (get_LINE_LOOP : t -> GLenum.t) =
      fun (x12850 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12850) "LINE_LOOP")
    let (get_LINE_STRIP : t -> GLenum.t) =
      fun (x12851 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12851) "LINE_STRIP")
    let (get_LINE_WIDTH : t -> GLenum.t) =
      fun (x12852 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12852) "LINE_WIDTH")
    let (get_LINK_STATUS : t -> GLenum.t) =
      fun (x12853 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12853) "LINK_STATUS")
    let (get_LOW_FLOAT : t -> GLenum.t) =
      fun (x12854 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12854) "LOW_FLOAT")
    let (get_LOW_INT : t -> GLenum.t) =
      fun (x12855 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12855) "LOW_INT")
    let (get_LUMINANCE : t -> GLenum.t) =
      fun (x12856 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12856) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : t -> GLenum.t) =
      fun (x12857 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12857) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x12858 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12858)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x12859 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12859) "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : t -> GLenum.t) =
      fun (x12860 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12860) "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : t -> GLenum.t) =
      fun (x12861 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12861) "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x12862 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12862) "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x12863 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12863) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : t -> GLenum.t) =
      fun (x12864 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12864) "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : t -> GLenum.t) =
      fun (x12865 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12865) "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x12866 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12866)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : t -> GLenum.t) =
      fun (x12867 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12867) "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : t -> GLenum.t) =
      fun (x12868 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12868) "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : t -> GLenum.t) =
      fun (x12869 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12869) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : t -> GLenum.t) =
      fun (x12870 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12870) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : t -> GLenum.t) =
      fun (x12871 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12871) "MIRRORED_REPEAT")
    let (get_NEAREST : t -> GLenum.t) =
      fun (x12872 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12872) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : t -> GLenum.t) =
      fun (x12873 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12873) "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : t -> GLenum.t) =
      fun (x12874 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12874) "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : t -> GLenum.t) =
      fun (x12875 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12875) "NEVER")
    let (get_NICEST : t -> GLenum.t) =
      fun (x12876 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12876) "NICEST")
    let (get_NONE : t -> GLenum.t) =
      fun (x12877 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12877) "NONE")
    let (get_NOTEQUAL : t -> GLenum.t) =
      fun (x12878 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12878) "NOTEQUAL")
    let (get_NO_ERROR : t -> GLenum.t) =
      fun (x12879 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12879) "NO_ERROR")
    let (get_ONE : t -> GLenum.t) =
      fun (x12880 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12880) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : t -> GLenum.t) =
      fun (x12881 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12881) "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : t -> GLenum.t) =
      fun (x12882 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12882) "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : t -> GLenum.t) =
      fun (x12883 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12883) "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : t -> GLenum.t) =
      fun (x12884 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12884) "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : t -> GLenum.t) =
      fun (x12885 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12885) "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : t -> GLenum.t) =
      fun (x12886 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12886) "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : t -> GLenum.t) =
      fun (x12887 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12887) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : t -> GLenum.t) =
      fun (x12888 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12888) "PACK_ALIGNMENT")
    let (get_POINTS : t -> GLenum.t) =
      fun (x12889 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12889) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : t -> GLenum.t) =
      fun (x12890 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12890) "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : t -> GLenum.t) =
      fun (x12891 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12891) "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : t -> GLenum.t) =
      fun (x12892 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12892) "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : t -> GLenum.t) =
      fun (x12893 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12893) "RED_BITS")
    let (get_RENDERBUFFER : t -> GLenum.t) =
      fun (x12894 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12894) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : t -> GLenum.t) =
      fun (x12895 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12895) "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : t -> GLenum.t) =
      fun (x12896 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12896) "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : t -> GLenum.t) =
      fun (x12897 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12897) "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : t -> GLenum.t) =
      fun (x12898 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12898) "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : t -> GLenum.t) =
      fun (x12899 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12899) "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : t -> GLenum.t) =
      fun (x12900 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12900) "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : t -> GLenum.t) =
      fun (x12901 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12901) "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : t -> GLenum.t) =
      fun (x12902 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12902) "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : t -> GLenum.t) =
      fun (x12903 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12903) "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : t -> GLenum.t) =
      fun (x12904 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12904) "RENDERBUFFER_WIDTH")
    let (get_RENDERER : t -> GLenum.t) =
      fun (x12905 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12905) "RENDERER")
    let (get_REPEAT : t -> GLenum.t) =
      fun (x12906 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12906) "REPEAT")
    let (get_REPLACE : t -> GLenum.t) =
      fun (x12907 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12907) "REPLACE")
    let (get_RGB : t -> GLenum.t) =
      fun (x12908 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12908) "RGB")
    let (get_RGB565 : t -> GLenum.t) =
      fun (x12909 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12909) "RGB565")
    let (get_RGB5_A1 : t -> GLenum.t) =
      fun (x12910 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12910) "RGB5_A1")
    let (get_RGBA : t -> GLenum.t) =
      fun (x12911 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12911) "RGBA")
    let (get_RGBA4 : t -> GLenum.t) =
      fun (x12912 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12912) "RGBA4")
    let (get_SAMPLER_2D : t -> GLenum.t) =
      fun (x12913 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12913) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : t -> GLenum.t) =
      fun (x12914 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12914) "SAMPLER_CUBE")
    let (get_SAMPLES : t -> GLenum.t) =
      fun (x12915 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12915) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : t -> GLenum.t) =
      fun (x12916 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12916) "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : t -> GLenum.t) =
      fun (x12917 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12917) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : t -> GLenum.t) =
      fun (x12918 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12918) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : t -> GLenum.t) =
      fun (x12919 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12919) "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : t -> GLenum.t) =
      fun (x12920 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12920) "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : t -> GLenum.t) =
      fun (x12921 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12921) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : t -> GLenum.t) =
      fun (x12922 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12922) "SCISSOR_TEST")
    let (get_SHADER_TYPE : t -> GLenum.t) =
      fun (x12923 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12923) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : t -> GLenum.t) =
      fun (x12924 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12924) "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : t -> GLenum.t) =
      fun (x12925 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12925) "SHORT")
    let (get_SRC_ALPHA : t -> GLenum.t) =
      fun (x12926 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12926) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : t -> GLenum.t) =
      fun (x12927 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12927) "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : t -> GLenum.t) =
      fun (x12928 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12928) "SRC_COLOR")
    let (get_STATIC_DRAW : t -> GLenum.t) =
      fun (x12929 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12929) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : t -> GLenum.t) =
      fun (x12930 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12930) "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : t -> GLenum.t) =
      fun (x12931 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12931) "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : t -> GLenum.t) =
      fun (x12932 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12932) "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : t -> GLenum.t) =
      fun (x12933 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12933) "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : t -> GLenum.t) =
      fun (x12934 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12934) "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : t -> GLenum.t) =
      fun (x12935 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12935) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : t -> GLenum.t) =
      fun (x12936 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12936) "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : t -> GLenum.t) =
      fun (x12937 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12937) "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : t -> GLenum.t) =
      fun (x12938 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12938) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : t -> GLenum.t) =
      fun (x12939 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12939) "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : t -> GLenum.t) =
      fun (x12940 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12940) "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : t -> GLenum.t) =
      fun (x12941 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12941) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : t -> GLenum.t) =
      fun (x12942 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12942) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : t -> GLenum.t) =
      fun (x12943 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12943) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : t -> GLenum.t) =
      fun (x12944 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12944) "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : t -> GLenum.t) =
      fun (x12945 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12945) "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : t -> GLenum.t) =
      fun (x12946 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12946) "STENCIL_REF")
    let (get_STENCIL_TEST : t -> GLenum.t) =
      fun (x12947 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12947) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : t -> GLenum.t) =
      fun (x12948 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12948) "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : t -> GLenum.t) =
      fun (x12949 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12949) "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : t -> GLenum.t) =
      fun (x12950 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12950) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : t -> GLenum.t) =
      fun (x12951 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12951) "SUBPIXEL_BITS")
    let (get_TEXTURE : t -> GLenum.t) =
      fun (x12952 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12952) "TEXTURE")
    let (get_TEXTURE0 : t -> GLenum.t) =
      fun (x12953 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12953) "TEXTURE0")
    let (get_TEXTURE1 : t -> GLenum.t) =
      fun (x12954 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12954) "TEXTURE1")
    let (get_TEXTURE10 : t -> GLenum.t) =
      fun (x12955 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12955) "TEXTURE10")
    let (get_TEXTURE11 : t -> GLenum.t) =
      fun (x12956 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12956) "TEXTURE11")
    let (get_TEXTURE12 : t -> GLenum.t) =
      fun (x12957 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12957) "TEXTURE12")
    let (get_TEXTURE13 : t -> GLenum.t) =
      fun (x12958 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12958) "TEXTURE13")
    let (get_TEXTURE14 : t -> GLenum.t) =
      fun (x12959 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12959) "TEXTURE14")
    let (get_TEXTURE15 : t -> GLenum.t) =
      fun (x12960 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12960) "TEXTURE15")
    let (get_TEXTURE16 : t -> GLenum.t) =
      fun (x12961 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12961) "TEXTURE16")
    let (get_TEXTURE17 : t -> GLenum.t) =
      fun (x12962 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12962) "TEXTURE17")
    let (get_TEXTURE18 : t -> GLenum.t) =
      fun (x12963 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12963) "TEXTURE18")
    let (get_TEXTURE19 : t -> GLenum.t) =
      fun (x12964 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12964) "TEXTURE19")
    let (get_TEXTURE2 : t -> GLenum.t) =
      fun (x12965 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12965) "TEXTURE2")
    let (get_TEXTURE20 : t -> GLenum.t) =
      fun (x12966 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12966) "TEXTURE20")
    let (get_TEXTURE21 : t -> GLenum.t) =
      fun (x12967 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12967) "TEXTURE21")
    let (get_TEXTURE22 : t -> GLenum.t) =
      fun (x12968 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12968) "TEXTURE22")
    let (get_TEXTURE23 : t -> GLenum.t) =
      fun (x12969 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12969) "TEXTURE23")
    let (get_TEXTURE24 : t -> GLenum.t) =
      fun (x12970 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12970) "TEXTURE24")
    let (get_TEXTURE25 : t -> GLenum.t) =
      fun (x12971 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12971) "TEXTURE25")
    let (get_TEXTURE26 : t -> GLenum.t) =
      fun (x12972 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12972) "TEXTURE26")
    let (get_TEXTURE27 : t -> GLenum.t) =
      fun (x12973 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12973) "TEXTURE27")
    let (get_TEXTURE28 : t -> GLenum.t) =
      fun (x12974 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12974) "TEXTURE28")
    let (get_TEXTURE29 : t -> GLenum.t) =
      fun (x12975 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12975) "TEXTURE29")
    let (get_TEXTURE3 : t -> GLenum.t) =
      fun (x12976 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12976) "TEXTURE3")
    let (get_TEXTURE30 : t -> GLenum.t) =
      fun (x12977 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12977) "TEXTURE30")
    let (get_TEXTURE31 : t -> GLenum.t) =
      fun (x12978 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12978) "TEXTURE31")
    let (get_TEXTURE4 : t -> GLenum.t) =
      fun (x12979 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12979) "TEXTURE4")
    let (get_TEXTURE5 : t -> GLenum.t) =
      fun (x12980 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12980) "TEXTURE5")
    let (get_TEXTURE6 : t -> GLenum.t) =
      fun (x12981 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12981) "TEXTURE6")
    let (get_TEXTURE7 : t -> GLenum.t) =
      fun (x12982 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12982) "TEXTURE7")
    let (get_TEXTURE8 : t -> GLenum.t) =
      fun (x12983 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12983) "TEXTURE8")
    let (get_TEXTURE9 : t -> GLenum.t) =
      fun (x12984 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12984) "TEXTURE9")
    let (get_TEXTURE_2D : t -> GLenum.t) =
      fun (x12985 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12985) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : t -> GLenum.t) =
      fun (x12986 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12986) "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : t -> GLenum.t) =
      fun (x12987 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12987) "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : t -> GLenum.t) =
      fun (x12988 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12988) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : t -> GLenum.t) =
      fun (x12989 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12989) "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : t -> GLenum.t) =
      fun (x12990 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12990) "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : t -> GLenum.t) =
      fun (x12991 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12991) "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : t -> GLenum.t) =
      fun (x12992 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12992) "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : t -> GLenum.t) =
      fun (x12993 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12993) "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : t -> GLenum.t) =
      fun (x12994 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12994) "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : t -> GLenum.t) =
      fun (x12995 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12995) "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : t -> GLenum.t) =
      fun (x12996 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12996) "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : t -> GLenum.t) =
      fun (x12997 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12997) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : t -> GLenum.t) =
      fun (x12998 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12998) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : t -> GLenum.t) =
      fun (x12999 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x12999) "TRIANGLES")
    let (get_TRIANGLE_FAN : t -> GLenum.t) =
      fun (x13000 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13000) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : t -> GLenum.t) =
      fun (x13001 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13001) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : t -> GLenum.t) =
      fun (x13002 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13002) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : t -> GLenum.t) =
      fun (x13003 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13003)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : t -> GLenum.t) =
      fun (x13004 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13004) "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : t -> GLenum.t) =
      fun (x13005 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13005)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : t -> GLenum.t) =
      fun (x13006 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13006) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : t -> GLenum.t) =
      fun (x13007 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13007) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : t -> GLenum.t) =
      fun (x13008 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13008) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : t -> GLenum.t) =
      fun (x13009 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13009) "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : t -> GLenum.t) =
      fun (x13010 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13010) "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : t -> GLenum.t) =
      fun (x13011 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13011) "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : t -> GLenum.t) =
      fun (x13012 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13012) "VALIDATE_STATUS")
    let (get_VENDOR : t -> GLenum.t) =
      fun (x13013 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13013) "VENDOR")
    let (get_VERSION : t -> GLenum.t) =
      fun (x13014 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13014) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x13015 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13015)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : t -> GLenum.t) =
      fun (x13016 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13016) "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : t -> GLenum.t) =
      fun (x13017 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13017)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : t -> GLenum.t) =
      fun (x13018 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13018) "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : t -> GLenum.t) =
      fun (x13019 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13019) "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : t -> GLenum.t) =
      fun (x13020 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13020) "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : t -> GLenum.t) =
      fun (x13021 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13021) "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : t -> GLenum.t) =
      fun (x13022 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13022) "VERTEX_SHADER")
    let (get_VIEWPORT : t -> GLenum.t) =
      fun (x13023 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13023) "VIEWPORT")
    let (get_ZERO : t -> GLenum.t) =
      fun (x13024 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x13024) "ZERO")
  end
 and
  WebGLRenderingContext:sig
                          type t =
                            [ `WebGLRenderingContext 
                            | `WebGLRenderingContextBase 
                            | `WebGLRenderingContextOverloads ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags =
                            [ `WebGLRenderingContext 
                            | `WebGLRenderingContextBase 
                            | `WebGLRenderingContextOverloads ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags =
                              [ `WebGLRenderingContext 
                              | `WebGLRenderingContextBase 
                              | `WebGLRenderingContextOverloads ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags =
                                        [> `WebGLRenderingContext ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create : unit -> t
                          val active_attributes : unit -> GLenum.t
                          val active_texture : unit -> GLenum.t
                          val active_uniforms : unit -> GLenum.t
                          val aliased_line_width_range : unit -> GLenum.t
                          val aliased_point_size_range : unit -> GLenum.t
                          val alpha : unit -> GLenum.t
                          val alpha_bits : unit -> GLenum.t
                          val always : unit -> GLenum.t
                          val array_buffer : unit -> GLenum.t
                          val array_buffer_binding : unit -> GLenum.t
                          val attached_shaders : unit -> GLenum.t
                          val back : unit -> GLenum.t
                          val blend : unit -> GLenum.t
                          val blend_color : unit -> GLenum.t
                          val blend_dst_alpha : unit -> GLenum.t
                          val blend_dst_rgb : unit -> GLenum.t
                          val blend_equation : unit -> GLenum.t
                          val blend_equation_alpha : unit -> GLenum.t
                          val blend_equation_rgb : unit -> GLenum.t
                          val blend_src_alpha : unit -> GLenum.t
                          val blend_src_rgb : unit -> GLenum.t
                          val blue_bits : unit -> GLenum.t
                          val bool : unit -> GLenum.t
                          val bool_vec2 : unit -> GLenum.t
                          val bool_vec3 : unit -> GLenum.t
                          val bool_vec4 : unit -> GLenum.t
                          val browser_default_webgl : unit -> GLenum.t
                          val buffer_size : unit -> GLenum.t
                          val buffer_usage : unit -> GLenum.t
                          val byte : unit -> GLenum.t
                          val ccw : unit -> GLenum.t
                          val clamp_to_edge : unit -> GLenum.t
                          val color_attachment0 : unit -> GLenum.t
                          val color_buffer_bit : unit -> GLenum.t
                          val color_clear_value : unit -> GLenum.t
                          val color_writemask : unit -> GLenum.t
                          val compile_status : unit -> GLenum.t
                          val compressed_texture_formats : unit -> GLenum.t
                          val constant_alpha : unit -> GLenum.t
                          val constant_color : unit -> GLenum.t
                          val context_lost_webgl : unit -> GLenum.t
                          val cull_face : unit -> GLenum.t
                          val cull_face_mode : unit -> GLenum.t
                          val current_program : unit -> GLenum.t
                          val current_vertex_attrib : unit -> GLenum.t
                          val cw : unit -> GLenum.t
                          val decr : unit -> GLenum.t
                          val decr_wrap : unit -> GLenum.t
                          val delete_status : unit -> GLenum.t
                          val depth_attachment : unit -> GLenum.t
                          val depth_bits : unit -> GLenum.t
                          val depth_buffer_bit : unit -> GLenum.t
                          val depth_clear_value : unit -> GLenum.t
                          val depth_component : unit -> GLenum.t
                          val depth_component16 : unit -> GLenum.t
                          val depth_func : unit -> GLenum.t
                          val depth_range : unit -> GLenum.t
                          val depth_stencil : unit -> GLenum.t
                          val depth_stencil_attachment : unit -> GLenum.t
                          val depth_test : unit -> GLenum.t
                          val depth_writemask : unit -> GLenum.t
                          val dither : unit -> GLenum.t
                          val dont_care : unit -> GLenum.t
                          val dst_alpha : unit -> GLenum.t
                          val dst_color : unit -> GLenum.t
                          val dynamic_draw : unit -> GLenum.t
                          val element_array_buffer : unit -> GLenum.t
                          val element_array_buffer_binding : unit -> GLenum.t
                          val equal : unit -> GLenum.t
                          val fastest : unit -> GLenum.t
                          val float : unit -> GLenum.t
                          val float_mat2 : unit -> GLenum.t
                          val float_mat3 : unit -> GLenum.t
                          val float_mat4 : unit -> GLenum.t
                          val float_vec2 : unit -> GLenum.t
                          val float_vec3 : unit -> GLenum.t
                          val float_vec4 : unit -> GLenum.t
                          val fragment_shader : unit -> GLenum.t
                          val framebuffer : unit -> GLenum.t
                          val framebuffer_attachment_object_name :
                            unit -> GLenum.t
                          val framebuffer_attachment_object_type :
                            unit -> GLenum.t
                          val framebuffer_attachment_texture_cube_map_face :
                            unit -> GLenum.t
                          val framebuffer_attachment_texture_level :
                            unit -> GLenum.t
                          val framebuffer_binding : unit -> GLenum.t
                          val framebuffer_complete : unit -> GLenum.t
                          val framebuffer_incomplete_attachment :
                            unit -> GLenum.t
                          val framebuffer_incomplete_dimensions :
                            unit -> GLenum.t
                          val framebuffer_incomplete_missing_attachment :
                            unit -> GLenum.t
                          val framebuffer_unsupported : unit -> GLenum.t
                          val front : unit -> GLenum.t
                          val front_and_back : unit -> GLenum.t
                          val front_face : unit -> GLenum.t
                          val func_add : unit -> GLenum.t
                          val func_reverse_subtract : unit -> GLenum.t
                          val func_subtract : unit -> GLenum.t
                          val generate_mipmap_hint : unit -> GLenum.t
                          val gequal : unit -> GLenum.t
                          val greater : unit -> GLenum.t
                          val green_bits : unit -> GLenum.t
                          val high_float : unit -> GLenum.t
                          val high_int : unit -> GLenum.t
                          val implementation_color_read_format :
                            unit -> GLenum.t
                          val implementation_color_read_type :
                            unit -> GLenum.t
                          val incr : unit -> GLenum.t
                          val incr_wrap : unit -> GLenum.t
                          val int : unit -> GLenum.t
                          val int_vec2 : unit -> GLenum.t
                          val int_vec3 : unit -> GLenum.t
                          val int_vec4 : unit -> GLenum.t
                          val invalid_enum : unit -> GLenum.t
                          val invalid_framebuffer_operation :
                            unit -> GLenum.t
                          val invalid_operation : unit -> GLenum.t
                          val invalid_value : unit -> GLenum.t
                          val invert : unit -> GLenum.t
                          val keep : unit -> GLenum.t
                          val lequal : unit -> GLenum.t
                          val less : unit -> GLenum.t
                          val linear : unit -> GLenum.t
                          val linear_mipmap_linear : unit -> GLenum.t
                          val linear_mipmap_nearest : unit -> GLenum.t
                          val lines : unit -> GLenum.t
                          val line_loop : unit -> GLenum.t
                          val line_strip : unit -> GLenum.t
                          val line_width : unit -> GLenum.t
                          val link_status : unit -> GLenum.t
                          val low_float : unit -> GLenum.t
                          val low_int : unit -> GLenum.t
                          val luminance : unit -> GLenum.t
                          val luminance_alpha : unit -> GLenum.t
                          val max_combined_texture_image_units :
                            unit -> GLenum.t
                          val max_cube_map_texture_size : unit -> GLenum.t
                          val max_fragment_uniform_vectors : unit -> GLenum.t
                          val max_renderbuffer_size : unit -> GLenum.t
                          val max_texture_image_units : unit -> GLenum.t
                          val max_texture_size : unit -> GLenum.t
                          val max_varying_vectors : unit -> GLenum.t
                          val max_vertex_attribs : unit -> GLenum.t
                          val max_vertex_texture_image_units :
                            unit -> GLenum.t
                          val max_vertex_uniform_vectors : unit -> GLenum.t
                          val max_viewport_dims : unit -> GLenum.t
                          val medium_float : unit -> GLenum.t
                          val medium_int : unit -> GLenum.t
                          val mirrored_repeat : unit -> GLenum.t
                          val nearest : unit -> GLenum.t
                          val nearest_mipmap_linear : unit -> GLenum.t
                          val nearest_mipmap_nearest : unit -> GLenum.t
                          val never : unit -> GLenum.t
                          val nicest : unit -> GLenum.t
                          val none : unit -> GLenum.t
                          val notequal : unit -> GLenum.t
                          val no_error : unit -> GLenum.t
                          val one : unit -> GLenum.t
                          val one_minus_constant_alpha : unit -> GLenum.t
                          val one_minus_constant_color : unit -> GLenum.t
                          val one_minus_dst_alpha : unit -> GLenum.t
                          val one_minus_dst_color : unit -> GLenum.t
                          val one_minus_src_alpha : unit -> GLenum.t
                          val one_minus_src_color : unit -> GLenum.t
                          val out_of_memory : unit -> GLenum.t
                          val pack_alignment : unit -> GLenum.t
                          val points : unit -> GLenum.t
                          val polygon_offset_factor : unit -> GLenum.t
                          val polygon_offset_fill : unit -> GLenum.t
                          val polygon_offset_units : unit -> GLenum.t
                          val red_bits : unit -> GLenum.t
                          val renderbuffer : unit -> GLenum.t
                          val renderbuffer_alpha_size : unit -> GLenum.t
                          val renderbuffer_binding : unit -> GLenum.t
                          val renderbuffer_blue_size : unit -> GLenum.t
                          val renderbuffer_depth_size : unit -> GLenum.t
                          val renderbuffer_green_size : unit -> GLenum.t
                          val renderbuffer_height : unit -> GLenum.t
                          val renderbuffer_internal_format : unit -> GLenum.t
                          val renderbuffer_red_size : unit -> GLenum.t
                          val renderbuffer_stencil_size : unit -> GLenum.t
                          val renderbuffer_width : unit -> GLenum.t
                          val renderer : unit -> GLenum.t
                          val repeat : unit -> GLenum.t
                          val replace : unit -> GLenum.t
                          val rgb : unit -> GLenum.t
                          val rgb565 : unit -> GLenum.t
                          val rgb5_a1 : unit -> GLenum.t
                          val rgba : unit -> GLenum.t
                          val rgba4 : unit -> GLenum.t
                          val sampler_2d : unit -> GLenum.t
                          val sampler_cube : unit -> GLenum.t
                          val samples : unit -> GLenum.t
                          val sample_alpha_to_coverage : unit -> GLenum.t
                          val sample_buffers : unit -> GLenum.t
                          val sample_coverage : unit -> GLenum.t
                          val sample_coverage_invert : unit -> GLenum.t
                          val sample_coverage_value : unit -> GLenum.t
                          val scissor_box : unit -> GLenum.t
                          val scissor_test : unit -> GLenum.t
                          val shader_type : unit -> GLenum.t
                          val shading_language_version : unit -> GLenum.t
                          val short : unit -> GLenum.t
                          val src_alpha : unit -> GLenum.t
                          val src_alpha_saturate : unit -> GLenum.t
                          val src_color : unit -> GLenum.t
                          val static_draw : unit -> GLenum.t
                          val stencil_attachment : unit -> GLenum.t
                          val stencil_back_fail : unit -> GLenum.t
                          val stencil_back_func : unit -> GLenum.t
                          val stencil_back_pass_depth_fail : unit -> GLenum.t
                          val stencil_back_pass_depth_pass : unit -> GLenum.t
                          val stencil_back_ref : unit -> GLenum.t
                          val stencil_back_value_mask : unit -> GLenum.t
                          val stencil_back_writemask : unit -> GLenum.t
                          val stencil_bits : unit -> GLenum.t
                          val stencil_buffer_bit : unit -> GLenum.t
                          val stencil_clear_value : unit -> GLenum.t
                          val stencil_fail : unit -> GLenum.t
                          val stencil_func : unit -> GLenum.t
                          val stencil_index8 : unit -> GLenum.t
                          val stencil_pass_depth_fail : unit -> GLenum.t
                          val stencil_pass_depth_pass : unit -> GLenum.t
                          val stencil_ref : unit -> GLenum.t
                          val stencil_test : unit -> GLenum.t
                          val stencil_value_mask : unit -> GLenum.t
                          val stencil_writemask : unit -> GLenum.t
                          val stream_draw : unit -> GLenum.t
                          val subpixel_bits : unit -> GLenum.t
                          val texture : unit -> GLenum.t
                          val texture0 : unit -> GLenum.t
                          val texture1 : unit -> GLenum.t
                          val texture10 : unit -> GLenum.t
                          val texture11 : unit -> GLenum.t
                          val texture12 : unit -> GLenum.t
                          val texture13 : unit -> GLenum.t
                          val texture14 : unit -> GLenum.t
                          val texture15 : unit -> GLenum.t
                          val texture16 : unit -> GLenum.t
                          val texture17 : unit -> GLenum.t
                          val texture18 : unit -> GLenum.t
                          val texture19 : unit -> GLenum.t
                          val texture2 : unit -> GLenum.t
                          val texture20 : unit -> GLenum.t
                          val texture21 : unit -> GLenum.t
                          val texture22 : unit -> GLenum.t
                          val texture23 : unit -> GLenum.t
                          val texture24 : unit -> GLenum.t
                          val texture25 : unit -> GLenum.t
                          val texture26 : unit -> GLenum.t
                          val texture27 : unit -> GLenum.t
                          val texture28 : unit -> GLenum.t
                          val texture29 : unit -> GLenum.t
                          val texture3 : unit -> GLenum.t
                          val texture30 : unit -> GLenum.t
                          val texture31 : unit -> GLenum.t
                          val texture4 : unit -> GLenum.t
                          val texture5 : unit -> GLenum.t
                          val texture6 : unit -> GLenum.t
                          val texture7 : unit -> GLenum.t
                          val texture8 : unit -> GLenum.t
                          val texture9 : unit -> GLenum.t
                          val texture_2d : unit -> GLenum.t
                          val texture_binding_2d : unit -> GLenum.t
                          val texture_binding_cube_map : unit -> GLenum.t
                          val texture_cube_map : unit -> GLenum.t
                          val texture_cube_map_negative_x : unit -> GLenum.t
                          val texture_cube_map_negative_y : unit -> GLenum.t
                          val texture_cube_map_negative_z : unit -> GLenum.t
                          val texture_cube_map_positive_x : unit -> GLenum.t
                          val texture_cube_map_positive_y : unit -> GLenum.t
                          val texture_cube_map_positive_z : unit -> GLenum.t
                          val texture_mag_filter : unit -> GLenum.t
                          val texture_min_filter : unit -> GLenum.t
                          val texture_wrap_s : unit -> GLenum.t
                          val texture_wrap_t : unit -> GLenum.t
                          val triangles : unit -> GLenum.t
                          val triangle_fan : unit -> GLenum.t
                          val triangle_strip : unit -> GLenum.t
                          val unpack_alignment : unit -> GLenum.t
                          val unpack_colorspace_conversion_webgl :
                            unit -> GLenum.t
                          val unpack_flip_y_webgl : unit -> GLenum.t
                          val unpack_premultiply_alpha_webgl :
                            unit -> GLenum.t
                          val unsigned_byte : unit -> GLenum.t
                          val unsigned_int : unit -> GLenum.t
                          val unsigned_short : unit -> GLenum.t
                          val unsigned_short_4_4_4_4 : unit -> GLenum.t
                          val unsigned_short_5_5_5_1 : unit -> GLenum.t
                          val unsigned_short_5_6_5 : unit -> GLenum.t
                          val validate_status : unit -> GLenum.t
                          val vendor : unit -> GLenum.t
                          val version : unit -> GLenum.t
                          val vertex_attrib_array_buffer_binding :
                            unit -> GLenum.t
                          val vertex_attrib_array_enabled : unit -> GLenum.t
                          val vertex_attrib_array_normalized :
                            unit -> GLenum.t
                          val vertex_attrib_array_pointer : unit -> GLenum.t
                          val vertex_attrib_array_size : unit -> GLenum.t
                          val vertex_attrib_array_stride : unit -> GLenum.t
                          val vertex_attrib_array_type : unit -> GLenum.t
                          val vertex_shader : unit -> GLenum.t
                          val viewport : unit -> GLenum.t
                          val zero : unit -> GLenum.t
                        end =
  struct
    type t =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13026 : Ojs.t) -> t_of_js x13026
    and t_0_to_js : t_0 -> Ojs.t = fun (x13025 : t) -> t_to_js x13025
    type tags =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13029 : Ojs.t) -> intf_of_js __tags_of_js x13029
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13027 : __tags intf) -> intf_to_js __tags_to_js x13027
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") 
             [||])
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ZERO")
  end
module WebGLContextEventInit =
  struct
    type t = [ `EventInit  | `WebGLContextEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13032 : Ojs.t) -> t_of_js x13032
    and t_0_to_js : t_0 -> Ojs.t = fun (x13031 : t) -> t_to_js x13031
    type tags = [ `EventInit  | `WebGLContextEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13035 : Ojs.t) -> intf_of_js __tags_of_js x13035
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13033 : __tags intf) -> intf_to_js __tags_to_js x13033
    let (get_statusMessage : 'tags this -> string) =
      fun (x13037 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13037) "statusMessage")
    let (set_statusMessage : 'tags this -> string -> unit) =
      fun (x13039 : 'tags this) ->
        fun (x13040 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13039) "statusMessage"
            (Ojs.string_to_js x13040)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface114:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLContextEvent.t
                          val set_prototype :
                            t -> WebGLContextEvent.t -> unit
                          val create :
                            t ->
                              type_:string ->
                                ?eventInit:WebGLContextEventInit.t ->
                                  unit -> WebGLContextEvent.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13043 : Ojs.t) -> x13043
    and t_to_js : t -> Ojs.t = fun (x13042 : Ojs.t) -> x13042
    let (get_prototype : t -> WebGLContextEvent.t) =
      fun (x13044 : t) ->
        WebGLContextEvent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13044) "prototype")
    let (set_prototype : t -> WebGLContextEvent.t -> unit) =
      fun (x13045 : t) ->
        fun (x13046 : WebGLContextEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x13045) "prototype"
            (WebGLContextEvent.t_to_js x13046)
    let (create :
      t ->
        type_:string ->
          ?eventInit:WebGLContextEventInit.t -> unit -> WebGLContextEvent.t)
      =
      fun (x13051 : t) ->
        fun ~type_:(x13047 : string) ->
          fun ?eventInit:(x13048 : WebGLContextEventInit.t option) ->
            fun () ->
              WebGLContextEvent.t_of_js
                (Ojs.new_obj_arr (t_to_js x13051)
                   (let x13049 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x13049 "push" [|(Ojs.string_to_js x13047)|]);
                    (match x13048 with
                     | Some x13050 ->
                         ignore
                           (Ojs.call x13049 "push"
                              [|(WebGLContextEventInit.t_to_js x13050)|])
                     | None -> ());
                    x13049))
  end
 and
  WebGLContextEvent:sig
                      type t = [ `Event  | `WebGLContextEvent ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `Event  | `WebGLContextEvent ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `Event  | `WebGLContextEvent ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `WebGLContextEvent ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_statusMessage : 'tags this -> string
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        type_:string ->
                          ?eventInit:WebGLContextEventInit.t -> unit -> t
                    end =
  struct
    type t = [ `Event  | `WebGLContextEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13053 : Ojs.t) -> t_of_js x13053
    and t_0_to_js : t_0 -> Ojs.t = fun (x13052 : t) -> t_to_js x13052
    type tags = [ `Event  | `WebGLContextEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13056 : Ojs.t) -> intf_of_js __tags_of_js x13056
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13054 : __tags intf) -> intf_to_js __tags_to_js x13054
    let (get_statusMessage : 'tags this -> string) =
      fun (x13058 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13058) "statusMessage")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent") "prototype")
    let (create :
      type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t) =
      fun ~type_:(x13060 : string) ->
        fun ?eventInit:(x13061 : WebGLContextEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
                 (let x13062 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13062 "push" [|(Ojs.string_to_js x13060)|]);
                  (match x13061 with
                   | Some x13063 ->
                       ignore
                         (Ojs.call x13062 "push"
                            [|(WebGLContextEventInit.t_to_js x13063)|])
                   | None -> ());
                  x13062))
  end
module WebGL2RenderingContextOverloads =
  struct
    type t = [ `WebGL2RenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13065 : Ojs.t) -> t_of_js x13065
    and t_0_to_js : t_0 -> Ojs.t = fun (x13064 : t) -> t_to_js x13064
    type tags = [ `WebGL2RenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13068 : Ojs.t) -> intf_of_js __tags_of_js x13068
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13066 : __tags intf) -> intf_to_js __tags_to_js x13066
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x13073 : 'tags this) ->
        fun ~target:(x13070 : GLenum.t) ->
          fun ~size:(x13071 : GLsizeiptr.t) ->
            fun ~usage:(x13072 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13073) "bufferData"
                   [|(GLenum.t_to_js x13070);(GLsizeiptr.t_to_js x13071);(
                     GLenum.t_to_js x13072)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          srcData:BufferSource.t or_null -> usage:GLenum.t -> unit)
      =
      fun (x13079 : 'tags this) ->
        fun ~target:(x13075 : GLenum.t) ->
          fun ~srcData:(x13076 : BufferSource.t or_null) ->
            fun ~usage:(x13078 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13079) "bufferData"
                   [|(GLenum.t_to_js x13075);(or_null_to_js
                                                BufferSource.t_to_js x13076);(
                     GLenum.t_to_js x13078)|])
    let (bufferData'' :
      'tags this ->
        target:GLenum.t ->
          srcData:ArrayBufferView.t_0 ->
            usage:GLenum.t ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x13088 : 'tags this) ->
        fun ~target:(x13081 : GLenum.t) ->
          fun ~srcData:(x13082 : ArrayBufferView.t_0) ->
            fun ~usage:(x13083 : GLenum.t) ->
              fun ~srcOffset:(x13084 : GLuint.t) ->
                fun ?length:(x13085 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13090 = this_to_js Obj.magic x13088 in
                       Ojs.call (Ojs.get_prop_ascii x13090 "bufferData")
                         "apply"
                         [|x13090;((let x13086 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13086 "push"
                                         [|(GLenum.t_to_js x13081)|]);
                                    ignore
                                      (Ojs.call x13086 "push"
                                         [|(ArrayBufferView.t_0_to_js x13082)|]);
                                    ignore
                                      (Ojs.call x13086 "push"
                                         [|(GLenum.t_to_js x13083)|]);
                                    ignore
                                      (Ojs.call x13086 "push"
                                         [|(GLuint.t_to_js x13084)|]);
                                    (match x13085 with
                                     | Some x13087 ->
                                         ignore
                                           (Ojs.call x13086 "push"
                                              [|(GLuint.t_to_js x13087)|])
                                     | None -> ());
                                    x13086))|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t -> srcData:BufferSource.t -> unit)
      =
      fun (x13094 : 'tags this) ->
        fun ~target:(x13091 : GLenum.t) ->
          fun ~dstByteOffset:(x13092 : GLintptr.t) ->
            fun ~srcData:(x13093 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13094) "bufferSubData"
                   [|(GLenum.t_to_js x13091);(GLintptr.t_to_js x13092);(
                     BufferSource.t_to_js x13093)|])
    let (bufferSubData' :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t ->
            srcData:ArrayBufferView.t_0 ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x13103 : 'tags this) ->
        fun ~target:(x13096 : GLenum.t) ->
          fun ~dstByteOffset:(x13097 : GLintptr.t) ->
            fun ~srcData:(x13098 : ArrayBufferView.t_0) ->
              fun ~srcOffset:(x13099 : GLuint.t) ->
                fun ?length:(x13100 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13105 = this_to_js Obj.magic x13103 in
                       Ojs.call (Ojs.get_prop_ascii x13105 "bufferSubData")
                         "apply"
                         [|x13105;((let x13101 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13101 "push"
                                         [|(GLenum.t_to_js x13096)|]);
                                    ignore
                                      (Ojs.call x13101 "push"
                                         [|(GLintptr.t_to_js x13097)|]);
                                    ignore
                                      (Ojs.call x13101 "push"
                                         [|(ArrayBufferView.t_0_to_js x13098)|]);
                                    ignore
                                      (Ojs.call x13101 "push"
                                         [|(GLuint.t_to_js x13099)|]);
                                    (match x13100 with
                                     | Some x13102 ->
                                         ignore
                                           (Ojs.call x13101 "push"
                                              [|(GLuint.t_to_js x13102)|])
                                     | None -> ());
                                    x13101))|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x13114 : 'tags this) ->
        fun ~target:(x13106 : GLenum.t) ->
          fun ~level:(x13107 : GLint.t) ->
            fun ~internalformat:(x13108 : GLenum.t) ->
              fun ~width:(x13109 : GLsizei.t) ->
                fun ~height:(x13110 : GLsizei.t) ->
                  fun ~border:(x13111 : GLint.t) ->
                    fun ~imageSize:(x13112 : GLsizei.t) ->
                      fun ~offset:(x13113 : GLintptr.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x13114)
                             "compressedTexImage2D"
                             [|(GLenum.t_to_js x13106);(GLint.t_to_js x13107);(
                               GLenum.t_to_js x13108);(GLsizei.t_to_js x13109);(
                               GLsizei.t_to_js x13110);(GLint.t_to_js x13111);(
                               GLsizei.t_to_js x13112);(GLintptr.t_to_js
                                                          x13113)|])
    let (compressedTexImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    srcData:ArrayBufferView.t_0 ->
                      ?srcOffset:GLuint.t ->
                        ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x13128 : 'tags this) ->
        fun ~target:(x13116 : GLenum.t) ->
          fun ~level:(x13117 : GLint.t) ->
            fun ~internalformat:(x13118 : GLenum.t) ->
              fun ~width:(x13119 : GLsizei.t) ->
                fun ~height:(x13120 : GLsizei.t) ->
                  fun ~border:(x13121 : GLint.t) ->
                    fun ~srcData:(x13122 : ArrayBufferView.t_0) ->
                      fun ?srcOffset:(x13123 : GLuint.t option) ->
                        fun ?srcLengthOverride:(x13124 : GLuint.t option) ->
                          fun () ->
                            ignore
                              (let x13130 = this_to_js Obj.magic x13128 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x13130
                                    "compressedTexImage2D") "apply"
                                 [|x13130;((let x13125 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x13125 "push"
                                                 [|(GLenum.t_to_js x13116)|]);
                                            ignore
                                              (Ojs.call x13125 "push"
                                                 [|(GLint.t_to_js x13117)|]);
                                            ignore
                                              (Ojs.call x13125 "push"
                                                 [|(GLenum.t_to_js x13118)|]);
                                            ignore
                                              (Ojs.call x13125 "push"
                                                 [|(GLsizei.t_to_js x13119)|]);
                                            ignore
                                              (Ojs.call x13125 "push"
                                                 [|(GLsizei.t_to_js x13120)|]);
                                            ignore
                                              (Ojs.call x13125 "push"
                                                 [|(GLint.t_to_js x13121)|]);
                                            ignore
                                              (Ojs.call x13125 "push"
                                                 [|(ArrayBufferView.t_0_to_js
                                                      x13122)|]);
                                            (match x13123 with
                                             | Some x13127 ->
                                                 ignore
                                                   (Ojs.call x13125 "push"
                                                      [|(GLuint.t_to_js
                                                           x13127)|])
                                             | None -> ());
                                            (match x13124 with
                                             | Some x13126 ->
                                                 ignore
                                                   (Ojs.call x13125 "push"
                                                      [|(GLuint.t_to_js
                                                           x13126)|])
                                             | None -> ());
                                            x13125))|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x13140 : 'tags this) ->
        fun ~target:(x13131 : GLenum.t) ->
          fun ~level:(x13132 : GLint.t) ->
            fun ~xoffset:(x13133 : GLint.t) ->
              fun ~yoffset:(x13134 : GLint.t) ->
                fun ~width:(x13135 : GLsizei.t) ->
                  fun ~height:(x13136 : GLsizei.t) ->
                    fun ~format:(x13137 : GLenum.t) ->
                      fun ~imageSize:(x13138 : GLsizei.t) ->
                        fun ~offset:(x13139 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13140)
                               "compressedTexSubImage2D"
                               [|(GLenum.t_to_js x13131);(GLint.t_to_js
                                                            x13132);(
                                 GLint.t_to_js x13133);(GLint.t_to_js x13134);(
                                 GLsizei.t_to_js x13135);(GLsizei.t_to_js
                                                            x13136);(
                                 GLenum.t_to_js x13137);(GLsizei.t_to_js
                                                           x13138);(GLintptr.t_to_js
                                                                    x13139)|])
    let (compressedTexSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x13155 : 'tags this) ->
        fun ~target:(x13142 : GLenum.t) ->
          fun ~level:(x13143 : GLint.t) ->
            fun ~xoffset:(x13144 : GLint.t) ->
              fun ~yoffset:(x13145 : GLint.t) ->
                fun ~width:(x13146 : GLsizei.t) ->
                  fun ~height:(x13147 : GLsizei.t) ->
                    fun ~format:(x13148 : GLenum.t) ->
                      fun ~srcData:(x13149 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x13150 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x13151 : GLuint.t option)
                            ->
                            fun () ->
                              ignore
                                (let x13157 = this_to_js Obj.magic x13155 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x13157
                                      "compressedTexSubImage2D") "apply"
                                   [|x13157;((let x13152 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x13152 "push"
                                                   [|(GLenum.t_to_js x13142)|]);
                                              ignore
                                                (Ojs.call x13152 "push"
                                                   [|(GLint.t_to_js x13143)|]);
                                              ignore
                                                (Ojs.call x13152 "push"
                                                   [|(GLint.t_to_js x13144)|]);
                                              ignore
                                                (Ojs.call x13152 "push"
                                                   [|(GLint.t_to_js x13145)|]);
                                              ignore
                                                (Ojs.call x13152 "push"
                                                   [|(GLsizei.t_to_js x13146)|]);
                                              ignore
                                                (Ojs.call x13152 "push"
                                                   [|(GLsizei.t_to_js x13147)|]);
                                              ignore
                                                (Ojs.call x13152 "push"
                                                   [|(GLenum.t_to_js x13148)|]);
                                              ignore
                                                (Ojs.call x13152 "push"
                                                   [|(ArrayBufferView.t_0_to_js
                                                        x13149)|]);
                                              (match x13150 with
                                               | Some x13154 ->
                                                   ignore
                                                     (Ojs.call x13152 "push"
                                                        [|(GLuint.t_to_js
                                                             x13154)|])
                                               | None -> ());
                                              (match x13151 with
                                               | Some x13153 ->
                                                   ignore
                                                     (Ojs.call x13152 "push"
                                                        [|(GLuint.t_to_js
                                                             x13153)|])
                                               | None -> ());
                                              x13152))|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x13166 : 'tags this) ->
        fun ~x:(x13158 : GLint.t) ->
          fun ~y:(x13159 : GLint.t) ->
            fun ~width:(x13160 : GLsizei.t) ->
              fun ~height:(x13161 : GLsizei.t) ->
                fun ~format:(x13162 : GLenum.t) ->
                  fun ~type_:(x13163 : GLenum.t) ->
                    fun ~dstData:(x13164 : ArrayBufferView.t_0 or_null) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x13166) "readPixels"
                           [|(GLint.t_to_js x13158);(GLint.t_to_js x13159);(
                             GLsizei.t_to_js x13160);(GLsizei.t_to_js x13161);(
                             GLenum.t_to_js x13162);(GLenum.t_to_js x13163);(
                             or_null_to_js ArrayBufferView.t_0_to_js x13164)|])
    let (readPixels' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x13175 : 'tags this) ->
        fun ~x:(x13168 : GLint.t) ->
          fun ~y:(x13169 : GLint.t) ->
            fun ~width:(x13170 : GLsizei.t) ->
              fun ~height:(x13171 : GLsizei.t) ->
                fun ~format:(x13172 : GLenum.t) ->
                  fun ~type_:(x13173 : GLenum.t) ->
                    fun ~offset:(x13174 : GLintptr.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x13175) "readPixels"
                           [|(GLint.t_to_js x13168);(GLint.t_to_js x13169);(
                             GLsizei.t_to_js x13170);(GLsizei.t_to_js x13171);(
                             GLenum.t_to_js x13172);(GLenum.t_to_js x13173);(
                             GLintptr.t_to_js x13174)|])
    let (readPixels'' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 -> dstOffset:GLuint.t -> unit)
      =
      fun (x13185 : 'tags this) ->
        fun ~x:(x13177 : GLint.t) ->
          fun ~y:(x13178 : GLint.t) ->
            fun ~width:(x13179 : GLsizei.t) ->
              fun ~height:(x13180 : GLsizei.t) ->
                fun ~format:(x13181 : GLenum.t) ->
                  fun ~type_:(x13182 : GLenum.t) ->
                    fun ~dstData:(x13183 : ArrayBufferView.t_0) ->
                      fun ~dstOffset:(x13184 : GLuint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x13185)
                             "readPixels"
                             [|(GLint.t_to_js x13177);(GLint.t_to_js x13178);(
                               GLsizei.t_to_js x13179);(GLsizei.t_to_js
                                                          x13180);(GLenum.t_to_js
                                                                    x13181);(
                               GLenum.t_to_js x13182);(ArrayBufferView.t_0_to_js
                                                         x13183);(GLuint.t_to_js
                                                                    x13184)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x13197 : 'tags this) ->
        fun ~target:(x13187 : GLenum.t) ->
          fun ~level:(x13188 : GLint.t) ->
            fun ~internalformat:(x13189 : GLint.t) ->
              fun ~width:(x13190 : GLsizei.t) ->
                fun ~height:(x13191 : GLsizei.t) ->
                  fun ~border:(x13192 : GLint.t) ->
                    fun ~format:(x13193 : GLenum.t) ->
                      fun ~type_:(x13194 : GLenum.t) ->
                        fun ~pixels:(x13195 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13197)
                               "texImage2D"
                               [|(GLenum.t_to_js x13187);(GLint.t_to_js
                                                            x13188);(
                                 GLint.t_to_js x13189);(GLsizei.t_to_js
                                                          x13190);(GLsizei.t_to_js
                                                                    x13191);(
                                 GLint.t_to_js x13192);(GLenum.t_to_js x13193);(
                                 GLenum.t_to_js x13194);(or_null_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x13195)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x13205 : 'tags this) ->
        fun ~target:(x13199 : GLenum.t) ->
          fun ~level:(x13200 : GLint.t) ->
            fun ~internalformat:(x13201 : GLint.t) ->
              fun ~format:(x13202 : GLenum.t) ->
                fun ~type_:(x13203 : GLenum.t) ->
                  fun ~source:(x13204 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13205) "texImage2D"
                         [|(GLenum.t_to_js x13199);(GLint.t_to_js x13200);(
                           GLint.t_to_js x13201);(GLenum.t_to_js x13202);(
                           GLenum.t_to_js x13203);(TexImageSource.t_to_js
                                                     x13204)|])
    let (texImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x13216 : 'tags this) ->
        fun ~target:(x13207 : GLenum.t) ->
          fun ~level:(x13208 : GLint.t) ->
            fun ~internalformat:(x13209 : GLint.t) ->
              fun ~width:(x13210 : GLsizei.t) ->
                fun ~height:(x13211 : GLsizei.t) ->
                  fun ~border:(x13212 : GLint.t) ->
                    fun ~format:(x13213 : GLenum.t) ->
                      fun ~type_:(x13214 : GLenum.t) ->
                        fun ~pboOffset:(x13215 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13216)
                               "texImage2D"
                               [|(GLenum.t_to_js x13207);(GLint.t_to_js
                                                            x13208);(
                                 GLint.t_to_js x13209);(GLsizei.t_to_js
                                                          x13210);(GLsizei.t_to_js
                                                                    x13211);(
                                 GLint.t_to_js x13212);(GLenum.t_to_js x13213);(
                                 GLenum.t_to_js x13214);(GLintptr.t_to_js
                                                           x13215)|])
    let (texImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x13227 : 'tags this) ->
        fun ~target:(x13218 : GLenum.t) ->
          fun ~level:(x13219 : GLint.t) ->
            fun ~internalformat:(x13220 : GLint.t) ->
              fun ~width:(x13221 : GLsizei.t) ->
                fun ~height:(x13222 : GLsizei.t) ->
                  fun ~border:(x13223 : GLint.t) ->
                    fun ~format:(x13224 : GLenum.t) ->
                      fun ~type_:(x13225 : GLenum.t) ->
                        fun ~source:(x13226 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13227)
                               "texImage2D"
                               [|(GLenum.t_to_js x13218);(GLint.t_to_js
                                                            x13219);(
                                 GLint.t_to_js x13220);(GLsizei.t_to_js
                                                          x13221);(GLsizei.t_to_js
                                                                    x13222);(
                                 GLint.t_to_js x13223);(GLenum.t_to_js x13224);(
                                 GLenum.t_to_js x13225);(TexImageSource.t_to_js
                                                           x13226)|])
    let (texImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x13239 : 'tags this) ->
        fun ~target:(x13229 : GLenum.t) ->
          fun ~level:(x13230 : GLint.t) ->
            fun ~internalformat:(x13231 : GLint.t) ->
              fun ~width:(x13232 : GLsizei.t) ->
                fun ~height:(x13233 : GLsizei.t) ->
                  fun ~border:(x13234 : GLint.t) ->
                    fun ~format:(x13235 : GLenum.t) ->
                      fun ~type_:(x13236 : GLenum.t) ->
                        fun ~srcData:(x13237 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x13238 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x13239)
                                 "texImage2D"
                                 [|(GLenum.t_to_js x13229);(GLint.t_to_js
                                                              x13230);(
                                   GLint.t_to_js x13231);(GLsizei.t_to_js
                                                            x13232);(
                                   GLsizei.t_to_js x13233);(GLint.t_to_js
                                                              x13234);(
                                   GLenum.t_to_js x13235);(GLenum.t_to_js
                                                             x13236);(
                                   ArrayBufferView.t_0_to_js x13237);(
                                   GLuint.t_to_js x13238)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x13251 : 'tags this) ->
        fun ~target:(x13241 : GLenum.t) ->
          fun ~level:(x13242 : GLint.t) ->
            fun ~xoffset:(x13243 : GLint.t) ->
              fun ~yoffset:(x13244 : GLint.t) ->
                fun ~width:(x13245 : GLsizei.t) ->
                  fun ~height:(x13246 : GLsizei.t) ->
                    fun ~format:(x13247 : GLenum.t) ->
                      fun ~type_:(x13248 : GLenum.t) ->
                        fun ~pixels:(x13249 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13251)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x13241);(GLint.t_to_js
                                                            x13242);(
                                 GLint.t_to_js x13243);(GLint.t_to_js x13244);(
                                 GLsizei.t_to_js x13245);(GLsizei.t_to_js
                                                            x13246);(
                                 GLenum.t_to_js x13247);(GLenum.t_to_js
                                                           x13248);(or_null_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x13249)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x13260 : 'tags this) ->
        fun ~target:(x13253 : GLenum.t) ->
          fun ~level:(x13254 : GLint.t) ->
            fun ~xoffset:(x13255 : GLint.t) ->
              fun ~yoffset:(x13256 : GLint.t) ->
                fun ~format:(x13257 : GLenum.t) ->
                  fun ~type_:(x13258 : GLenum.t) ->
                    fun ~source:(x13259 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x13260)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x13253);(GLint.t_to_js x13254);(
                             GLint.t_to_js x13255);(GLint.t_to_js x13256);(
                             GLenum.t_to_js x13257);(GLenum.t_to_js x13258);(
                             TexImageSource.t_to_js x13259)|])
    let (texSubImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x13271 : 'tags this) ->
        fun ~target:(x13262 : GLenum.t) ->
          fun ~level:(x13263 : GLint.t) ->
            fun ~xoffset:(x13264 : GLint.t) ->
              fun ~yoffset:(x13265 : GLint.t) ->
                fun ~width:(x13266 : GLsizei.t) ->
                  fun ~height:(x13267 : GLsizei.t) ->
                    fun ~format:(x13268 : GLenum.t) ->
                      fun ~type_:(x13269 : GLenum.t) ->
                        fun ~pboOffset:(x13270 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13271)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x13262);(GLint.t_to_js
                                                            x13263);(
                                 GLint.t_to_js x13264);(GLint.t_to_js x13265);(
                                 GLsizei.t_to_js x13266);(GLsizei.t_to_js
                                                            x13267);(
                                 GLenum.t_to_js x13268);(GLenum.t_to_js
                                                           x13269);(GLintptr.t_to_js
                                                                    x13270)|])
    let (texSubImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x13282 : 'tags this) ->
        fun ~target:(x13273 : GLenum.t) ->
          fun ~level:(x13274 : GLint.t) ->
            fun ~xoffset:(x13275 : GLint.t) ->
              fun ~yoffset:(x13276 : GLint.t) ->
                fun ~width:(x13277 : GLsizei.t) ->
                  fun ~height:(x13278 : GLsizei.t) ->
                    fun ~format:(x13279 : GLenum.t) ->
                      fun ~type_:(x13280 : GLenum.t) ->
                        fun ~source:(x13281 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13282)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x13273);(GLint.t_to_js
                                                            x13274);(
                                 GLint.t_to_js x13275);(GLint.t_to_js x13276);(
                                 GLsizei.t_to_js x13277);(GLsizei.t_to_js
                                                            x13278);(
                                 GLenum.t_to_js x13279);(GLenum.t_to_js
                                                           x13280);(TexImageSource.t_to_js
                                                                    x13281)|])
    let (texSubImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x13294 : 'tags this) ->
        fun ~target:(x13284 : GLenum.t) ->
          fun ~level:(x13285 : GLint.t) ->
            fun ~xoffset:(x13286 : GLint.t) ->
              fun ~yoffset:(x13287 : GLint.t) ->
                fun ~width:(x13288 : GLsizei.t) ->
                  fun ~height:(x13289 : GLsizei.t) ->
                    fun ~format:(x13290 : GLenum.t) ->
                      fun ~type_:(x13291 : GLenum.t) ->
                        fun ~srcData:(x13292 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x13293 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x13294)
                                 "texSubImage2D"
                                 [|(GLenum.t_to_js x13284);(GLint.t_to_js
                                                              x13285);(
                                   GLint.t_to_js x13286);(GLint.t_to_js
                                                            x13287);(
                                   GLsizei.t_to_js x13288);(GLsizei.t_to_js
                                                              x13289);(
                                   GLenum.t_to_js x13290);(GLenum.t_to_js
                                                             x13291);(
                                   ArrayBufferView.t_0_to_js x13292);(
                                   GLuint.t_to_js x13293)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13304 : 'tags this) ->
        fun ~location:(x13296 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13297 : Float32List.t) ->
            fun ?srcOffset:(x13298 : GLuint.t option) ->
              fun ?srcLength:(x13299 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13306 = this_to_js Obj.magic x13304 in
                     Ojs.call (Ojs.get_prop_ascii x13306 "uniform1fv")
                       "apply"
                       [|x13306;((let x13300 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13300 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13296)|]);
                                  ignore
                                    (Ojs.call x13300 "push"
                                       [|(Float32List.t_to_js x13297)|]);
                                  (match x13298 with
                                   | Some x13302 ->
                                       ignore
                                         (Ojs.call x13300 "push"
                                            [|(GLuint.t_to_js x13302)|])
                                   | None -> ());
                                  (match x13299 with
                                   | Some x13301 ->
                                       ignore
                                         (Ojs.call x13300 "push"
                                            [|(GLuint.t_to_js x13301)|])
                                   | None -> ());
                                  x13300))|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13315 : 'tags this) ->
        fun ~location:(x13307 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13308 : Int32List.t) ->
            fun ?srcOffset:(x13309 : GLuint.t option) ->
              fun ?srcLength:(x13310 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13317 = this_to_js Obj.magic x13315 in
                     Ojs.call (Ojs.get_prop_ascii x13317 "uniform1iv")
                       "apply"
                       [|x13317;((let x13311 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13311 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13307)|]);
                                  ignore
                                    (Ojs.call x13311 "push"
                                       [|(Int32List.t_to_js x13308)|]);
                                  (match x13309 with
                                   | Some x13313 ->
                                       ignore
                                         (Ojs.call x13311 "push"
                                            [|(GLuint.t_to_js x13313)|])
                                   | None -> ());
                                  (match x13310 with
                                   | Some x13312 ->
                                       ignore
                                         (Ojs.call x13311 "push"
                                            [|(GLuint.t_to_js x13312)|])
                                   | None -> ());
                                  x13311))|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13326 : 'tags this) ->
        fun ~location:(x13318 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13319 : Float32List.t) ->
            fun ?srcOffset:(x13320 : GLuint.t option) ->
              fun ?srcLength:(x13321 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13328 = this_to_js Obj.magic x13326 in
                     Ojs.call (Ojs.get_prop_ascii x13328 "uniform2fv")
                       "apply"
                       [|x13328;((let x13322 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13322 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13318)|]);
                                  ignore
                                    (Ojs.call x13322 "push"
                                       [|(Float32List.t_to_js x13319)|]);
                                  (match x13320 with
                                   | Some x13324 ->
                                       ignore
                                         (Ojs.call x13322 "push"
                                            [|(GLuint.t_to_js x13324)|])
                                   | None -> ());
                                  (match x13321 with
                                   | Some x13323 ->
                                       ignore
                                         (Ojs.call x13322 "push"
                                            [|(GLuint.t_to_js x13323)|])
                                   | None -> ());
                                  x13322))|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13337 : 'tags this) ->
        fun ~location:(x13329 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13330 : Int32List.t) ->
            fun ?srcOffset:(x13331 : GLuint.t option) ->
              fun ?srcLength:(x13332 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13339 = this_to_js Obj.magic x13337 in
                     Ojs.call (Ojs.get_prop_ascii x13339 "uniform2iv")
                       "apply"
                       [|x13339;((let x13333 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13333 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13329)|]);
                                  ignore
                                    (Ojs.call x13333 "push"
                                       [|(Int32List.t_to_js x13330)|]);
                                  (match x13331 with
                                   | Some x13335 ->
                                       ignore
                                         (Ojs.call x13333 "push"
                                            [|(GLuint.t_to_js x13335)|])
                                   | None -> ());
                                  (match x13332 with
                                   | Some x13334 ->
                                       ignore
                                         (Ojs.call x13333 "push"
                                            [|(GLuint.t_to_js x13334)|])
                                   | None -> ());
                                  x13333))|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13348 : 'tags this) ->
        fun ~location:(x13340 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13341 : Float32List.t) ->
            fun ?srcOffset:(x13342 : GLuint.t option) ->
              fun ?srcLength:(x13343 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13350 = this_to_js Obj.magic x13348 in
                     Ojs.call (Ojs.get_prop_ascii x13350 "uniform3fv")
                       "apply"
                       [|x13350;((let x13344 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13344 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13340)|]);
                                  ignore
                                    (Ojs.call x13344 "push"
                                       [|(Float32List.t_to_js x13341)|]);
                                  (match x13342 with
                                   | Some x13346 ->
                                       ignore
                                         (Ojs.call x13344 "push"
                                            [|(GLuint.t_to_js x13346)|])
                                   | None -> ());
                                  (match x13343 with
                                   | Some x13345 ->
                                       ignore
                                         (Ojs.call x13344 "push"
                                            [|(GLuint.t_to_js x13345)|])
                                   | None -> ());
                                  x13344))|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13359 : 'tags this) ->
        fun ~location:(x13351 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13352 : Int32List.t) ->
            fun ?srcOffset:(x13353 : GLuint.t option) ->
              fun ?srcLength:(x13354 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13361 = this_to_js Obj.magic x13359 in
                     Ojs.call (Ojs.get_prop_ascii x13361 "uniform3iv")
                       "apply"
                       [|x13361;((let x13355 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13355 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13351)|]);
                                  ignore
                                    (Ojs.call x13355 "push"
                                       [|(Int32List.t_to_js x13352)|]);
                                  (match x13353 with
                                   | Some x13357 ->
                                       ignore
                                         (Ojs.call x13355 "push"
                                            [|(GLuint.t_to_js x13357)|])
                                   | None -> ());
                                  (match x13354 with
                                   | Some x13356 ->
                                       ignore
                                         (Ojs.call x13355 "push"
                                            [|(GLuint.t_to_js x13356)|])
                                   | None -> ());
                                  x13355))|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13370 : 'tags this) ->
        fun ~location:(x13362 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13363 : Float32List.t) ->
            fun ?srcOffset:(x13364 : GLuint.t option) ->
              fun ?srcLength:(x13365 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13372 = this_to_js Obj.magic x13370 in
                     Ojs.call (Ojs.get_prop_ascii x13372 "uniform4fv")
                       "apply"
                       [|x13372;((let x13366 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13366 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13362)|]);
                                  ignore
                                    (Ojs.call x13366 "push"
                                       [|(Float32List.t_to_js x13363)|]);
                                  (match x13364 with
                                   | Some x13368 ->
                                       ignore
                                         (Ojs.call x13366 "push"
                                            [|(GLuint.t_to_js x13368)|])
                                   | None -> ());
                                  (match x13365 with
                                   | Some x13367 ->
                                       ignore
                                         (Ojs.call x13366 "push"
                                            [|(GLuint.t_to_js x13367)|])
                                   | None -> ());
                                  x13366))|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13381 : 'tags this) ->
        fun ~location:(x13373 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13374 : Int32List.t) ->
            fun ?srcOffset:(x13375 : GLuint.t option) ->
              fun ?srcLength:(x13376 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13383 = this_to_js Obj.magic x13381 in
                     Ojs.call (Ojs.get_prop_ascii x13383 "uniform4iv")
                       "apply"
                       [|x13383;((let x13377 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13377 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13373)|]);
                                  ignore
                                    (Ojs.call x13377 "push"
                                       [|(Int32List.t_to_js x13374)|]);
                                  (match x13375 with
                                   | Some x13379 ->
                                       ignore
                                         (Ojs.call x13377 "push"
                                            [|(GLuint.t_to_js x13379)|])
                                   | None -> ());
                                  (match x13376 with
                                   | Some x13378 ->
                                       ignore
                                         (Ojs.call x13377 "push"
                                            [|(GLuint.t_to_js x13378)|])
                                   | None -> ());
                                  x13377))|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13393 : 'tags this) ->
        fun ~location:(x13384 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13385 : GLboolean.t) ->
            fun ~data:(x13386 : Float32List.t) ->
              fun ?srcOffset:(x13387 : GLuint.t option) ->
                fun ?srcLength:(x13388 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13395 = this_to_js Obj.magic x13393 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13395 "uniformMatrix2fv")
                         "apply"
                         [|x13395;((let x13389 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13389 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13384)|]);
                                    ignore
                                      (Ojs.call x13389 "push"
                                         [|(GLboolean.t_to_js x13385)|]);
                                    ignore
                                      (Ojs.call x13389 "push"
                                         [|(Float32List.t_to_js x13386)|]);
                                    (match x13387 with
                                     | Some x13391 ->
                                         ignore
                                           (Ojs.call x13389 "push"
                                              [|(GLuint.t_to_js x13391)|])
                                     | None -> ());
                                    (match x13388 with
                                     | Some x13390 ->
                                         ignore
                                           (Ojs.call x13389 "push"
                                              [|(GLuint.t_to_js x13390)|])
                                     | None -> ());
                                    x13389))|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13405 : 'tags this) ->
        fun ~location:(x13396 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13397 : GLboolean.t) ->
            fun ~data:(x13398 : Float32List.t) ->
              fun ?srcOffset:(x13399 : GLuint.t option) ->
                fun ?srcLength:(x13400 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13407 = this_to_js Obj.magic x13405 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13407 "uniformMatrix3fv")
                         "apply"
                         [|x13407;((let x13401 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13401 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13396)|]);
                                    ignore
                                      (Ojs.call x13401 "push"
                                         [|(GLboolean.t_to_js x13397)|]);
                                    ignore
                                      (Ojs.call x13401 "push"
                                         [|(Float32List.t_to_js x13398)|]);
                                    (match x13399 with
                                     | Some x13403 ->
                                         ignore
                                           (Ojs.call x13401 "push"
                                              [|(GLuint.t_to_js x13403)|])
                                     | None -> ());
                                    (match x13400 with
                                     | Some x13402 ->
                                         ignore
                                           (Ojs.call x13401 "push"
                                              [|(GLuint.t_to_js x13402)|])
                                     | None -> ());
                                    x13401))|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13417 : 'tags this) ->
        fun ~location:(x13408 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13409 : GLboolean.t) ->
            fun ~data:(x13410 : Float32List.t) ->
              fun ?srcOffset:(x13411 : GLuint.t option) ->
                fun ?srcLength:(x13412 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13419 = this_to_js Obj.magic x13417 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13419 "uniformMatrix4fv")
                         "apply"
                         [|x13419;((let x13413 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13413 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13408)|]);
                                    ignore
                                      (Ojs.call x13413 "push"
                                         [|(GLboolean.t_to_js x13409)|]);
                                    ignore
                                      (Ojs.call x13413 "push"
                                         [|(Float32List.t_to_js x13410)|]);
                                    (match x13411 with
                                     | Some x13415 ->
                                         ignore
                                           (Ojs.call x13413 "push"
                                              [|(GLuint.t_to_js x13415)|])
                                     | None -> ());
                                    (match x13412 with
                                     | Some x13414 ->
                                         ignore
                                           (Ojs.call x13413 "push"
                                              [|(GLuint.t_to_js x13414)|])
                                     | None -> ());
                                    x13413))|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13429 : 'tags this) ->
        fun ~location:(x13420 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13421 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x13422 : GLuint.t option) ->
              fun ?srcLength:(x13423 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13431 = this_to_js Obj.magic x13429 in
                     Ojs.call (Ojs.get_prop_ascii x13431 "uniform1fv")
                       "apply"
                       [|x13431;((let x13424 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13424 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13420)|]);
                                  ignore
                                    (Ojs.call x13424 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x13421)|]);
                                  (match x13422 with
                                   | Some x13426 ->
                                       ignore
                                         (Ojs.call x13424 "push"
                                            [|(GLuint.t_to_js x13426)|])
                                   | None -> ());
                                  (match x13423 with
                                   | Some x13425 ->
                                       ignore
                                         (Ojs.call x13424 "push"
                                            [|(GLuint.t_to_js x13425)|])
                                   | None -> ());
                                  x13424))|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13441 : 'tags this) ->
        fun ~location:(x13432 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13433 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x13434 : GLuint.t option) ->
              fun ?srcLength:(x13435 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13443 = this_to_js Obj.magic x13441 in
                     Ojs.call (Ojs.get_prop_ascii x13443 "uniform1iv")
                       "apply"
                       [|x13443;((let x13436 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13436 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13432)|]);
                                  ignore
                                    (Ojs.call x13436 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x13433)|]);
                                  (match x13434 with
                                   | Some x13438 ->
                                       ignore
                                         (Ojs.call x13436 "push"
                                            [|(GLuint.t_to_js x13438)|])
                                   | None -> ());
                                  (match x13435 with
                                   | Some x13437 ->
                                       ignore
                                         (Ojs.call x13436 "push"
                                            [|(GLuint.t_to_js x13437)|])
                                   | None -> ());
                                  x13436))|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13453 : 'tags this) ->
        fun ~location:(x13444 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13445 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x13446 : GLuint.t option) ->
              fun ?srcLength:(x13447 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13455 = this_to_js Obj.magic x13453 in
                     Ojs.call (Ojs.get_prop_ascii x13455 "uniform2fv")
                       "apply"
                       [|x13455;((let x13448 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13448 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13444)|]);
                                  ignore
                                    (Ojs.call x13448 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x13445)|]);
                                  (match x13446 with
                                   | Some x13450 ->
                                       ignore
                                         (Ojs.call x13448 "push"
                                            [|(GLuint.t_to_js x13450)|])
                                   | None -> ());
                                  (match x13447 with
                                   | Some x13449 ->
                                       ignore
                                         (Ojs.call x13448 "push"
                                            [|(GLuint.t_to_js x13449)|])
                                   | None -> ());
                                  x13448))|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13465 : 'tags this) ->
        fun ~location:(x13456 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13457 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x13458 : GLuint.t option) ->
              fun ?srcLength:(x13459 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13467 = this_to_js Obj.magic x13465 in
                     Ojs.call (Ojs.get_prop_ascii x13467 "uniform2iv")
                       "apply"
                       [|x13467;((let x13460 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13460 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13456)|]);
                                  ignore
                                    (Ojs.call x13460 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x13457)|]);
                                  (match x13458 with
                                   | Some x13462 ->
                                       ignore
                                         (Ojs.call x13460 "push"
                                            [|(GLuint.t_to_js x13462)|])
                                   | None -> ());
                                  (match x13459 with
                                   | Some x13461 ->
                                       ignore
                                         (Ojs.call x13460 "push"
                                            [|(GLuint.t_to_js x13461)|])
                                   | None -> ());
                                  x13460))|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13477 : 'tags this) ->
        fun ~location:(x13468 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13469 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x13470 : GLuint.t option) ->
              fun ?srcLength:(x13471 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13479 = this_to_js Obj.magic x13477 in
                     Ojs.call (Ojs.get_prop_ascii x13479 "uniform3fv")
                       "apply"
                       [|x13479;((let x13472 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13472 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13468)|]);
                                  ignore
                                    (Ojs.call x13472 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x13469)|]);
                                  (match x13470 with
                                   | Some x13474 ->
                                       ignore
                                         (Ojs.call x13472 "push"
                                            [|(GLuint.t_to_js x13474)|])
                                   | None -> ());
                                  (match x13471 with
                                   | Some x13473 ->
                                       ignore
                                         (Ojs.call x13472 "push"
                                            [|(GLuint.t_to_js x13473)|])
                                   | None -> ());
                                  x13472))|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13489 : 'tags this) ->
        fun ~location:(x13480 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13481 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x13482 : GLuint.t option) ->
              fun ?srcLength:(x13483 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13491 = this_to_js Obj.magic x13489 in
                     Ojs.call (Ojs.get_prop_ascii x13491 "uniform3iv")
                       "apply"
                       [|x13491;((let x13484 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13484 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13480)|]);
                                  ignore
                                    (Ojs.call x13484 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x13481)|]);
                                  (match x13482 with
                                   | Some x13486 ->
                                       ignore
                                         (Ojs.call x13484 "push"
                                            [|(GLuint.t_to_js x13486)|])
                                   | None -> ());
                                  (match x13483 with
                                   | Some x13485 ->
                                       ignore
                                         (Ojs.call x13484 "push"
                                            [|(GLuint.t_to_js x13485)|])
                                   | None -> ());
                                  x13484))|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13501 : 'tags this) ->
        fun ~location:(x13492 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13493 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x13494 : GLuint.t option) ->
              fun ?srcLength:(x13495 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13503 = this_to_js Obj.magic x13501 in
                     Ojs.call (Ojs.get_prop_ascii x13503 "uniform4fv")
                       "apply"
                       [|x13503;((let x13496 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13496 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13492)|]);
                                  ignore
                                    (Ojs.call x13496 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x13493)|]);
                                  (match x13494 with
                                   | Some x13498 ->
                                       ignore
                                         (Ojs.call x13496 "push"
                                            [|(GLuint.t_to_js x13498)|])
                                   | None -> ());
                                  (match x13495 with
                                   | Some x13497 ->
                                       ignore
                                         (Ojs.call x13496 "push"
                                            [|(GLuint.t_to_js x13497)|])
                                   | None -> ());
                                  x13496))|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13513 : 'tags this) ->
        fun ~location:(x13504 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x13505 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x13506 : GLuint.t option) ->
              fun ?srcLength:(x13507 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13515 = this_to_js Obj.magic x13513 in
                     Ojs.call (Ojs.get_prop_ascii x13515 "uniform4iv")
                       "apply"
                       [|x13515;((let x13508 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13508 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x13504)|]);
                                  ignore
                                    (Ojs.call x13508 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x13505)|]);
                                  (match x13506 with
                                   | Some x13510 ->
                                       ignore
                                         (Ojs.call x13508 "push"
                                            [|(GLuint.t_to_js x13510)|])
                                   | None -> ());
                                  (match x13507 with
                                   | Some x13509 ->
                                       ignore
                                         (Ojs.call x13508 "push"
                                            [|(GLuint.t_to_js x13509)|])
                                   | None -> ());
                                  x13508))|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13526 : 'tags this) ->
        fun ~location:(x13516 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13517 : GLboolean.t) ->
            fun ~data:(x13518 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x13519 : GLuint.t option) ->
                fun ?srcLength:(x13520 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13528 = this_to_js Obj.magic x13526 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13528 "uniformMatrix2fv")
                         "apply"
                         [|x13528;((let x13521 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13521 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13516)|]);
                                    ignore
                                      (Ojs.call x13521 "push"
                                         [|(GLboolean.t_to_js x13517)|]);
                                    ignore
                                      (Ojs.call x13521 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x13518)|]);
                                    (match x13519 with
                                     | Some x13523 ->
                                         ignore
                                           (Ojs.call x13521 "push"
                                              [|(GLuint.t_to_js x13523)|])
                                     | None -> ());
                                    (match x13520 with
                                     | Some x13522 ->
                                         ignore
                                           (Ojs.call x13521 "push"
                                              [|(GLuint.t_to_js x13522)|])
                                     | None -> ());
                                    x13521))|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13539 : 'tags this) ->
        fun ~location:(x13529 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13530 : GLboolean.t) ->
            fun ~data:(x13531 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x13532 : GLuint.t option) ->
                fun ?srcLength:(x13533 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13541 = this_to_js Obj.magic x13539 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13541 "uniformMatrix3fv")
                         "apply"
                         [|x13541;((let x13534 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13534 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13529)|]);
                                    ignore
                                      (Ojs.call x13534 "push"
                                         [|(GLboolean.t_to_js x13530)|]);
                                    ignore
                                      (Ojs.call x13534 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x13531)|]);
                                    (match x13532 with
                                     | Some x13536 ->
                                         ignore
                                           (Ojs.call x13534 "push"
                                              [|(GLuint.t_to_js x13536)|])
                                     | None -> ());
                                    (match x13533 with
                                     | Some x13535 ->
                                         ignore
                                           (Ojs.call x13534 "push"
                                              [|(GLuint.t_to_js x13535)|])
                                     | None -> ());
                                    x13534))|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x13552 : 'tags this) ->
        fun ~location:(x13542 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x13543 : GLboolean.t) ->
            fun ~data:(x13544 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x13545 : GLuint.t option) ->
                fun ?srcLength:(x13546 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13554 = this_to_js Obj.magic x13552 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13554 "uniformMatrix4fv")
                         "apply"
                         [|x13554;((let x13547 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13547 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x13542)|]);
                                    ignore
                                      (Ojs.call x13547 "push"
                                         [|(GLboolean.t_to_js x13543)|]);
                                    ignore
                                      (Ojs.call x13547 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x13544)|]);
                                    (match x13545 with
                                     | Some x13549 ->
                                         ignore
                                           (Ojs.call x13547 "push"
                                              [|(GLuint.t_to_js x13549)|])
                                     | None -> ());
                                    (match x13546 with
                                     | Some x13548 ->
                                         ignore
                                           (Ojs.call x13547 "push"
                                              [|(GLuint.t_to_js x13548)|])
                                     | None -> ());
                                    x13547))|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface127:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLVertexArrayObject.t
                          val set_prototype :
                            t -> WebGLVertexArrayObject.t -> unit
                          val create : t -> WebGLVertexArrayObject.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13556 : Ojs.t) -> x13556
    and t_to_js : t -> Ojs.t = fun (x13555 : Ojs.t) -> x13555
    let (get_prototype : t -> WebGLVertexArrayObject.t) =
      fun (x13557 : t) ->
        WebGLVertexArrayObject.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13557) "prototype")
    let (set_prototype : t -> WebGLVertexArrayObject.t -> unit) =
      fun (x13558 : t) ->
        fun (x13559 : WebGLVertexArrayObject.t) ->
          Ojs.set_prop_ascii (t_to_js x13558) "prototype"
            (WebGLVertexArrayObject.t_to_js x13559)
    let (create : t -> WebGLVertexArrayObject.t) =
      fun (x13560 : t) ->
        WebGLVertexArrayObject.t_of_js (Ojs.new_obj (t_to_js x13560) [||])
  end
 and
  WebGLVertexArrayObject:sig
                           type t = [ `WebGLVertexArrayObject ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags = [ `WebGLVertexArrayObject ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags = [ `WebGLVertexArrayObject ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `WebGLVertexArrayObject ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create : unit -> t
                         end =
  struct
    type t = [ `WebGLVertexArrayObject ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13562 : Ojs.t) -> t_of_js x13562
    and t_0_to_js : t_0 -> Ojs.t = fun (x13561 : t) -> t_to_js x13561
    type tags = [ `WebGLVertexArrayObject ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13565 : Ojs.t) -> intf_of_js __tags_of_js x13565
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13563 : __tags intf) -> intf_to_js __tags_to_js x13563
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject") 
             [||])
  end
module rec
  AnonymousInterface125:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLTransformFeedback.t
                          val set_prototype :
                            t -> WebGLTransformFeedback.t -> unit
                          val create : t -> WebGLTransformFeedback.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13568 : Ojs.t) -> x13568
    and t_to_js : t -> Ojs.t = fun (x13567 : Ojs.t) -> x13567
    let (get_prototype : t -> WebGLTransformFeedback.t) =
      fun (x13569 : t) ->
        WebGLTransformFeedback.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13569) "prototype")
    let (set_prototype : t -> WebGLTransformFeedback.t -> unit) =
      fun (x13570 : t) ->
        fun (x13571 : WebGLTransformFeedback.t) ->
          Ojs.set_prop_ascii (t_to_js x13570) "prototype"
            (WebGLTransformFeedback.t_to_js x13571)
    let (create : t -> WebGLTransformFeedback.t) =
      fun (x13572 : t) ->
        WebGLTransformFeedback.t_of_js (Ojs.new_obj (t_to_js x13572) [||])
  end
 and
  WebGLTransformFeedback:sig
                           type t = [ `WebGLTransformFeedback ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags = [ `WebGLTransformFeedback ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags = [ `WebGLTransformFeedback ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `WebGLTransformFeedback ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create : unit -> t
                         end =
  struct
    type t = [ `WebGLTransformFeedback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13574 : Ojs.t) -> t_of_js x13574
    and t_0_to_js : t_0 -> Ojs.t = fun (x13573 : t) -> t_to_js x13573
    type tags = [ `WebGLTransformFeedback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13577 : Ojs.t) -> intf_of_js __tags_of_js x13577
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13575 : __tags intf) -> intf_to_js __tags_to_js x13575
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback") 
             [||])
  end
module rec
  AnonymousInterface123:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLSync.t
                          val set_prototype : t -> WebGLSync.t -> unit
                          val create : t -> WebGLSync.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13580 : Ojs.t) -> x13580
    and t_to_js : t -> Ojs.t = fun (x13579 : Ojs.t) -> x13579
    let (get_prototype : t -> WebGLSync.t) =
      fun (x13581 : t) ->
        WebGLSync.t_of_js (Ojs.get_prop_ascii (t_to_js x13581) "prototype")
    let (set_prototype : t -> WebGLSync.t -> unit) =
      fun (x13582 : t) ->
        fun (x13583 : WebGLSync.t) ->
          Ojs.set_prop_ascii (t_to_js x13582) "prototype"
            (WebGLSync.t_to_js x13583)
    let (create : t -> WebGLSync.t) =
      fun (x13584 : t) ->
        WebGLSync.t_of_js (Ojs.new_obj (t_to_js x13584) [||])
  end
 and
  WebGLSync:sig
              type t = [ `WebGLSync ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `WebGLSync ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `WebGLSync ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `WebGLSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13586 : Ojs.t) -> t_of_js x13586
    and t_0_to_js : t_0 -> Ojs.t = fun (x13585 : t) -> t_to_js x13585
    type tags = [ `WebGLSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13589 : Ojs.t) -> intf_of_js __tags_of_js x13589
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13587 : __tags intf) -> intf_to_js __tags_to_js x13587
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSync")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSync") [||])
  end
module rec
  AnonymousInterface120:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLSampler.t
                          val set_prototype : t -> WebGLSampler.t -> unit
                          val create : t -> WebGLSampler.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13592 : Ojs.t) -> x13592
    and t_to_js : t -> Ojs.t = fun (x13591 : Ojs.t) -> x13591
    let (get_prototype : t -> WebGLSampler.t) =
      fun (x13593 : t) ->
        WebGLSampler.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13593) "prototype")
    let (set_prototype : t -> WebGLSampler.t -> unit) =
      fun (x13594 : t) ->
        fun (x13595 : WebGLSampler.t) ->
          Ojs.set_prop_ascii (t_to_js x13594) "prototype"
            (WebGLSampler.t_to_js x13595)
    let (create : t -> WebGLSampler.t) =
      fun (x13596 : t) ->
        WebGLSampler.t_of_js (Ojs.new_obj (t_to_js x13596) [||])
  end
 and
  WebGLSampler:sig
                 type t = [ `WebGLSampler ] intf
                 type t_0 = t
                 [@@@js.stop ]
                 type tags = [ `WebGLSampler ]
                 type tags_0 = tags
                 [@@@js.start ]
                 [@@@js.implem
                   type tags = [ `WebGLSampler ]
                   type tags_0 = tags]
                 type 'tags this =
                   'tags intf constraint 'tags = [> `WebGLSampler ]
                 val t_to_js : t -> Ojs.t
                 val t_of_js : Ojs.t -> t
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val cast_from : 'tags this -> t
                 val prototype : unit -> t
                 val create : unit -> t
               end =
  struct
    type t = [ `WebGLSampler ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13598 : Ojs.t) -> t_of_js x13598
    and t_0_to_js : t_0 -> Ojs.t = fun (x13597 : t) -> t_to_js x13597
    type tags = [ `WebGLSampler ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13601 : Ojs.t) -> intf_of_js __tags_of_js x13601
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13599 : __tags intf) -> intf_to_js __tags_to_js x13599
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSampler") [||])
  end
module rec
  AnonymousInterface117:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGLQuery.t
                          val set_prototype : t -> WebGLQuery.t -> unit
                          val create : t -> WebGLQuery.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13604 : Ojs.t) -> x13604
    and t_to_js : t -> Ojs.t = fun (x13603 : Ojs.t) -> x13603
    let (get_prototype : t -> WebGLQuery.t) =
      fun (x13605 : t) ->
        WebGLQuery.t_of_js (Ojs.get_prop_ascii (t_to_js x13605) "prototype")
    let (set_prototype : t -> WebGLQuery.t -> unit) =
      fun (x13606 : t) ->
        fun (x13607 : WebGLQuery.t) ->
          Ojs.set_prop_ascii (t_to_js x13606) "prototype"
            (WebGLQuery.t_to_js x13607)
    let (create : t -> WebGLQuery.t) =
      fun (x13608 : t) ->
        WebGLQuery.t_of_js (Ojs.new_obj (t_to_js x13608) [||])
  end
 and
  WebGLQuery:sig
               type t = [ `WebGLQuery ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `WebGLQuery ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `WebGLQuery ]
                 type tags_0 = tags]
               type 'tags this =
                 'tags intf constraint 'tags = [> `WebGLQuery ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create : unit -> t
             end =
  struct
    type t = [ `WebGLQuery ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13610 : Ojs.t) -> t_of_js x13610
    and t_0_to_js : t_0 -> Ojs.t = fun (x13609 : t) -> t_to_js x13609
    type tags = [ `WebGLQuery ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13613 : Ojs.t) -> intf_of_js __tags_of_js x13613
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13611 : __tags intf) -> intf_to_js __tags_to_js x13611
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLQuery") [||])
  end
module Uint32List =
  struct
    type t = (Uint32Array.t_0, GLuint.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x13618 : Ojs.t) ->
        or_array_of_js Uint32Array.t_0_of_js GLuint.t_of_js x13618
    and t_to_js : t -> Ojs.t =
      fun (x13615 : (Uint32Array.t_0, GLuint.t) or_array) ->
        or_array_to_js Uint32Array.t_0_to_js GLuint.t_to_js x13615
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13622 : Ojs.t) -> t_of_js x13622
    and t_0_to_js : t_0 -> Ojs.t = fun (x13621 : t) -> t_to_js x13621
  end
module GLuint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x13624 : Ojs.t) -> Ojs.float_of_js x13624
    and t_to_js : t -> Ojs.t = fun (x13623 : float) -> Ojs.float_to_js x13623
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13626 : Ojs.t) -> t_of_js x13626
    and t_0_to_js : t_0 -> Ojs.t = fun (x13625 : t) -> t_to_js x13625
  end
module GLint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x13628 : Ojs.t) -> Ojs.float_of_js x13628
    and t_to_js : t -> Ojs.t = fun (x13627 : float) -> Ojs.float_to_js x13627
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13630 : Ojs.t) -> t_of_js x13630
    and t_0_to_js : t_0 -> Ojs.t = fun (x13629 : t) -> t_to_js x13629
  end
module WebGL2RenderingContextBase =
  struct
    type t = [ `WebGL2RenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13632 : Ojs.t) -> t_of_js x13632
    and t_0_to_js : t_0 -> Ojs.t = fun (x13631 : t) -> t_to_js x13631
    type tags = [ `WebGL2RenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13635 : Ojs.t) -> intf_of_js __tags_of_js x13635
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13633 : __tags intf) -> intf_to_js __tags_to_js x13633
    let (beginQuery :
      'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit) =
      fun (x13639 : 'tags this) ->
        fun ~target:(x13637 : GLenum.t) ->
          fun ~query:(x13638 : WebGLQuery.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13639) "beginQuery"
                 [|(GLenum.t_to_js x13637);(WebGLQuery.t_to_js x13638)|])
    let (beginTransformFeedback :
      'tags this -> primitiveMode:GLenum.t -> unit) =
      fun (x13642 : 'tags this) ->
        fun ~primitiveMode:(x13641 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13642) "beginTransformFeedback"
               [|(GLenum.t_to_js x13641)|])
    let (bindBufferBase :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t -> buffer:WebGLBuffer.t or_null -> unit)
      =
      fun (x13648 : 'tags this) ->
        fun ~target:(x13644 : GLenum.t) ->
          fun ~index:(x13645 : GLuint.t) ->
            fun ~buffer:(x13646 : WebGLBuffer.t or_null) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13648) "bindBufferBase"
                   [|(GLenum.t_to_js x13644);(GLuint.t_to_js x13645);(
                     or_null_to_js WebGLBuffer.t_to_js x13646)|])
    let (bindBufferRange :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t ->
            buffer:WebGLBuffer.t or_null ->
              offset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x13656 : 'tags this) ->
        fun ~target:(x13650 : GLenum.t) ->
          fun ~index:(x13651 : GLuint.t) ->
            fun ~buffer:(x13652 : WebGLBuffer.t or_null) ->
              fun ~offset:(x13654 : GLintptr.t) ->
                fun ~size:(x13655 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13656) "bindBufferRange"
                       [|(GLenum.t_to_js x13650);(GLuint.t_to_js x13651);(
                         or_null_to_js WebGLBuffer.t_to_js x13652);(GLintptr.t_to_js
                                                                    x13654);(
                         GLsizeiptr.t_to_js x13655)|])
    let (bindSampler :
      'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t or_null -> unit)
      =
      fun (x13661 : 'tags this) ->
        fun ~unit:(x13658 : GLuint.t) ->
          fun ~sampler:(x13659 : WebGLSampler.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13661) "bindSampler"
                 [|(GLuint.t_to_js x13658);(or_null_to_js
                                              WebGLSampler.t_to_js x13659)|])
    let (bindTransformFeedback :
      'tags this ->
        target:GLenum.t -> tf:WebGLTransformFeedback.t or_null -> unit)
      =
      fun (x13666 : 'tags this) ->
        fun ~target:(x13663 : GLenum.t) ->
          fun ~tf:(x13664 : WebGLTransformFeedback.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13666) "bindTransformFeedback"
                 [|(GLenum.t_to_js x13663);(or_null_to_js
                                              WebGLTransformFeedback.t_to_js
                                              x13664)|])
    let (bindVertexArray :
      'tags this -> array:WebGLVertexArrayObject.t or_null -> unit) =
      fun (x13670 : 'tags this) ->
        fun ~array:(x13668 : WebGLVertexArrayObject.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13670) "bindVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x13668)|])
    let (blitFramebuffer :
      'tags this ->
        srcX0:GLint.t ->
          srcY0:GLint.t ->
            srcX1:GLint.t ->
              srcY1:GLint.t ->
                dstX0:GLint.t ->
                  dstY0:GLint.t ->
                    dstX1:GLint.t ->
                      dstY1:GLint.t ->
                        mask:GLbitfield.t -> filter:GLenum.t -> unit)
      =
      fun (x13682 : 'tags this) ->
        fun ~srcX0:(x13672 : GLint.t) ->
          fun ~srcY0:(x13673 : GLint.t) ->
            fun ~srcX1:(x13674 : GLint.t) ->
              fun ~srcY1:(x13675 : GLint.t) ->
                fun ~dstX0:(x13676 : GLint.t) ->
                  fun ~dstY0:(x13677 : GLint.t) ->
                    fun ~dstX1:(x13678 : GLint.t) ->
                      fun ~dstY1:(x13679 : GLint.t) ->
                        fun ~mask:(x13680 : GLbitfield.t) ->
                          fun ~filter:(x13681 : GLenum.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x13682)
                                 "blitFramebuffer"
                                 [|(GLint.t_to_js x13672);(GLint.t_to_js
                                                             x13673);(
                                   GLint.t_to_js x13674);(GLint.t_to_js
                                                            x13675);(
                                   GLint.t_to_js x13676);(GLint.t_to_js
                                                            x13677);(
                                   GLint.t_to_js x13678);(GLint.t_to_js
                                                            x13679);(
                                   GLbitfield.t_to_js x13680);(GLenum.t_to_js
                                                                 x13681)|])
    let (clearBufferfi :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit)
      =
      fun (x13688 : 'tags this) ->
        fun ~buffer:(x13684 : GLenum.t) ->
          fun ~drawbuffer:(x13685 : GLint.t) ->
            fun ~depth:(x13686 : GLfloat.t) ->
              fun ~stencil:(x13687 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13688) "clearBufferfi"
                     [|(GLenum.t_to_js x13684);(GLint.t_to_js x13685);(
                       GLfloat.t_to_js x13686);(GLint.t_to_js x13687)|])
    let (clearBufferfv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Float32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x13696 : 'tags this) ->
        fun ~buffer:(x13690 : GLenum.t) ->
          fun ~drawbuffer:(x13691 : GLint.t) ->
            fun ~values:(x13692 : Float32List.t) ->
              fun ?srcOffset:(x13693 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13698 = this_to_js Obj.magic x13696 in
                     Ojs.call (Ojs.get_prop_ascii x13698 "clearBufferfv")
                       "apply"
                       [|x13698;((let x13694 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13694 "push"
                                       [|(GLenum.t_to_js x13690)|]);
                                  ignore
                                    (Ojs.call x13694 "push"
                                       [|(GLint.t_to_js x13691)|]);
                                  ignore
                                    (Ojs.call x13694 "push"
                                       [|(Float32List.t_to_js x13692)|]);
                                  (match x13693 with
                                   | Some x13695 ->
                                       ignore
                                         (Ojs.call x13694 "push"
                                            [|(GLuint.t_to_js x13695)|])
                                   | None -> ());
                                  x13694))|])
    let (clearBufferiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Int32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x13705 : 'tags this) ->
        fun ~buffer:(x13699 : GLenum.t) ->
          fun ~drawbuffer:(x13700 : GLint.t) ->
            fun ~values:(x13701 : Int32List.t) ->
              fun ?srcOffset:(x13702 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13707 = this_to_js Obj.magic x13705 in
                     Ojs.call (Ojs.get_prop_ascii x13707 "clearBufferiv")
                       "apply"
                       [|x13707;((let x13703 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13703 "push"
                                       [|(GLenum.t_to_js x13699)|]);
                                  ignore
                                    (Ojs.call x13703 "push"
                                       [|(GLint.t_to_js x13700)|]);
                                  ignore
                                    (Ojs.call x13703 "push"
                                       [|(Int32List.t_to_js x13701)|]);
                                  (match x13702 with
                                   | Some x13704 ->
                                       ignore
                                         (Ojs.call x13703 "push"
                                            [|(GLuint.t_to_js x13704)|])
                                   | None -> ());
                                  x13703))|])
    let (clearBufferuiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Uint32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x13714 : 'tags this) ->
        fun ~buffer:(x13708 : GLenum.t) ->
          fun ~drawbuffer:(x13709 : GLint.t) ->
            fun ~values:(x13710 : Uint32List.t) ->
              fun ?srcOffset:(x13711 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x13716 = this_to_js Obj.magic x13714 in
                     Ojs.call (Ojs.get_prop_ascii x13716 "clearBufferuiv")
                       "apply"
                       [|x13716;((let x13712 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13712 "push"
                                       [|(GLenum.t_to_js x13708)|]);
                                  ignore
                                    (Ojs.call x13712 "push"
                                       [|(GLint.t_to_js x13709)|]);
                                  ignore
                                    (Ojs.call x13712 "push"
                                       [|(Uint32List.t_to_js x13710)|]);
                                  (match x13711 with
                                   | Some x13713 ->
                                       ignore
                                         (Ojs.call x13712 "push"
                                            [|(GLuint.t_to_js x13713)|])
                                   | None -> ());
                                  x13712))|])
    let (clientWaitSync :
      'tags this ->
        sync:WebGLSync.t ->
          flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t)
      =
      fun (x13720 : 'tags this) ->
        fun ~sync:(x13717 : WebGLSync.t) ->
          fun ~flags:(x13718 : GLbitfield.t) ->
            fun ~timeout:(x13719 : GLuint64.t) ->
              GLenum.t_of_js
                (Ojs.call (this_to_js Obj.magic x13720) "clientWaitSync"
                   [|(WebGLSync.t_to_js x13717);(GLbitfield.t_to_js x13718);(
                     GLuint64.t_to_js x13719)|])
    let (compressedTexImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x13731 : 'tags this) ->
        fun ~target:(x13722 : GLenum.t) ->
          fun ~level:(x13723 : GLint.t) ->
            fun ~internalformat:(x13724 : GLenum.t) ->
              fun ~width:(x13725 : GLsizei.t) ->
                fun ~height:(x13726 : GLsizei.t) ->
                  fun ~depth:(x13727 : GLsizei.t) ->
                    fun ~border:(x13728 : GLint.t) ->
                      fun ~imageSize:(x13729 : GLsizei.t) ->
                        fun ~offset:(x13730 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13731)
                               "compressedTexImage3D"
                               [|(GLenum.t_to_js x13722);(GLint.t_to_js
                                                            x13723);(
                                 GLenum.t_to_js x13724);(GLsizei.t_to_js
                                                           x13725);(GLsizei.t_to_js
                                                                    x13726);(
                                 GLsizei.t_to_js x13727);(GLint.t_to_js
                                                            x13728);(
                                 GLsizei.t_to_js x13729);(GLintptr.t_to_js
                                                            x13730)|])
    let (compressedTexImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x13746 : 'tags this) ->
        fun ~target:(x13733 : GLenum.t) ->
          fun ~level:(x13734 : GLint.t) ->
            fun ~internalformat:(x13735 : GLenum.t) ->
              fun ~width:(x13736 : GLsizei.t) ->
                fun ~height:(x13737 : GLsizei.t) ->
                  fun ~depth:(x13738 : GLsizei.t) ->
                    fun ~border:(x13739 : GLint.t) ->
                      fun ~srcData:(x13740 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x13741 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x13742 : GLuint.t option)
                            ->
                            fun () ->
                              ignore
                                (let x13748 = this_to_js Obj.magic x13746 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x13748
                                      "compressedTexImage3D") "apply"
                                   [|x13748;((let x13743 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x13743 "push"
                                                   [|(GLenum.t_to_js x13733)|]);
                                              ignore
                                                (Ojs.call x13743 "push"
                                                   [|(GLint.t_to_js x13734)|]);
                                              ignore
                                                (Ojs.call x13743 "push"
                                                   [|(GLenum.t_to_js x13735)|]);
                                              ignore
                                                (Ojs.call x13743 "push"
                                                   [|(GLsizei.t_to_js x13736)|]);
                                              ignore
                                                (Ojs.call x13743 "push"
                                                   [|(GLsizei.t_to_js x13737)|]);
                                              ignore
                                                (Ojs.call x13743 "push"
                                                   [|(GLsizei.t_to_js x13738)|]);
                                              ignore
                                                (Ojs.call x13743 "push"
                                                   [|(GLint.t_to_js x13739)|]);
                                              ignore
                                                (Ojs.call x13743 "push"
                                                   [|(ArrayBufferView.t_0_to_js
                                                        x13740)|]);
                                              (match x13741 with
                                               | Some x13745 ->
                                                   ignore
                                                     (Ojs.call x13743 "push"
                                                        [|(GLuint.t_to_js
                                                             x13745)|])
                                               | None -> ());
                                              (match x13742 with
                                               | Some x13744 ->
                                                   ignore
                                                     (Ojs.call x13743 "push"
                                                        [|(GLuint.t_to_js
                                                             x13744)|])
                                               | None -> ());
                                              x13743))|])
    let (compressedTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x13760 : 'tags this) ->
        fun ~target:(x13749 : GLenum.t) ->
          fun ~level:(x13750 : GLint.t) ->
            fun ~xoffset:(x13751 : GLint.t) ->
              fun ~yoffset:(x13752 : GLint.t) ->
                fun ~zoffset:(x13753 : GLint.t) ->
                  fun ~width:(x13754 : GLsizei.t) ->
                    fun ~height:(x13755 : GLsizei.t) ->
                      fun ~depth:(x13756 : GLsizei.t) ->
                        fun ~format:(x13757 : GLenum.t) ->
                          fun ~imageSize:(x13758 : GLsizei.t) ->
                            fun ~offset:(x13759 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x13760)
                                   "compressedTexSubImage3D"
                                   [|(GLenum.t_to_js x13749);(GLint.t_to_js
                                                                x13750);(
                                     GLint.t_to_js x13751);(GLint.t_to_js
                                                              x13752);(
                                     GLint.t_to_js x13753);(GLsizei.t_to_js
                                                              x13754);(
                                     GLsizei.t_to_js x13755);(GLsizei.t_to_js
                                                                x13756);(
                                     GLenum.t_to_js x13757);(GLsizei.t_to_js
                                                               x13758);(
                                     GLintptr.t_to_js x13759)|])
    let (compressedTexSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            ?srcOffset:GLuint.t ->
                              ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x13777 : 'tags this) ->
        fun ~target:(x13762 : GLenum.t) ->
          fun ~level:(x13763 : GLint.t) ->
            fun ~xoffset:(x13764 : GLint.t) ->
              fun ~yoffset:(x13765 : GLint.t) ->
                fun ~zoffset:(x13766 : GLint.t) ->
                  fun ~width:(x13767 : GLsizei.t) ->
                    fun ~height:(x13768 : GLsizei.t) ->
                      fun ~depth:(x13769 : GLsizei.t) ->
                        fun ~format:(x13770 : GLenum.t) ->
                          fun ~srcData:(x13771 : ArrayBufferView.t_0) ->
                            fun ?srcOffset:(x13772 : GLuint.t option) ->
                              fun
                                ?srcLengthOverride:(x13773 : GLuint.t option)
                                ->
                                fun () ->
                                  ignore
                                    (let x13779 = this_to_js Obj.magic x13777 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x13779
                                          "compressedTexSubImage3D") "apply"
                                       [|x13779;((let x13774 =
                                                    Ojs.new_obj
                                                      (Ojs.get_prop_ascii
                                                         Ojs.global "Array")
                                                      [||] in
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(GLenum.t_to_js
                                                            x13762)|]);
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(GLint.t_to_js
                                                            x13763)|]);
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(GLint.t_to_js
                                                            x13764)|]);
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(GLint.t_to_js
                                                            x13765)|]);
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(GLint.t_to_js
                                                            x13766)|]);
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(GLsizei.t_to_js
                                                            x13767)|]);
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(GLsizei.t_to_js
                                                            x13768)|]);
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(GLsizei.t_to_js
                                                            x13769)|]);
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(GLenum.t_to_js
                                                            x13770)|]);
                                                  ignore
                                                    (Ojs.call x13774 "push"
                                                       [|(ArrayBufferView.t_0_to_js
                                                            x13771)|]);
                                                  (match x13772 with
                                                   | Some x13776 ->
                                                       ignore
                                                         (Ojs.call x13774
                                                            "push"
                                                            [|(GLuint.t_to_js
                                                                 x13776)|])
                                                   | None -> ());
                                                  (match x13773 with
                                                   | Some x13775 ->
                                                       ignore
                                                         (Ojs.call x13774
                                                            "push"
                                                            [|(GLuint.t_to_js
                                                                 x13775)|])
                                                   | None -> ());
                                                  x13774))|])
    let (copyBufferSubData :
      'tags this ->
        readTarget:GLenum.t ->
          writeTarget:GLenum.t ->
            readOffset:GLintptr.t ->
              writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x13785 : 'tags this) ->
        fun ~readTarget:(x13780 : GLenum.t) ->
          fun ~writeTarget:(x13781 : GLenum.t) ->
            fun ~readOffset:(x13782 : GLintptr.t) ->
              fun ~writeOffset:(x13783 : GLintptr.t) ->
                fun ~size:(x13784 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13785)
                       "copyBufferSubData"
                       [|(GLenum.t_to_js x13780);(GLenum.t_to_js x13781);(
                         GLintptr.t_to_js x13782);(GLintptr.t_to_js x13783);(
                         GLsizeiptr.t_to_js x13784)|])
    let (copyTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  x:GLint.t ->
                    y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x13796 : 'tags this) ->
        fun ~target:(x13787 : GLenum.t) ->
          fun ~level:(x13788 : GLint.t) ->
            fun ~xoffset:(x13789 : GLint.t) ->
              fun ~yoffset:(x13790 : GLint.t) ->
                fun ~zoffset:(x13791 : GLint.t) ->
                  fun ~x:(x13792 : GLint.t) ->
                    fun ~y:(x13793 : GLint.t) ->
                      fun ~width:(x13794 : GLsizei.t) ->
                        fun ~height:(x13795 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x13796)
                               "copyTexSubImage3D"
                               [|(GLenum.t_to_js x13787);(GLint.t_to_js
                                                            x13788);(
                                 GLint.t_to_js x13789);(GLint.t_to_js x13790);(
                                 GLint.t_to_js x13791);(GLint.t_to_js x13792);(
                                 GLint.t_to_js x13793);(GLsizei.t_to_js
                                                          x13794);(GLsizei.t_to_js
                                                                    x13795)|])
    let (createQuery : 'tags this -> WebGLQuery.t or_null) =
      fun (x13798 : 'tags this) ->
        or_null_of_js WebGLQuery.t_of_js
          (Ojs.call (this_to_js Obj.magic x13798) "createQuery" [||])
    let (createSampler : 'tags this -> WebGLSampler.t or_null) =
      fun (x13801 : 'tags this) ->
        or_null_of_js WebGLSampler.t_of_js
          (Ojs.call (this_to_js Obj.magic x13801) "createSampler" [||])
    let (createTransformFeedback :
      'tags this -> WebGLTransformFeedback.t or_null) =
      fun (x13804 : 'tags this) ->
        or_null_of_js WebGLTransformFeedback.t_of_js
          (Ojs.call (this_to_js Obj.magic x13804) "createTransformFeedback"
             [||])
    let (createVertexArray : 'tags this -> WebGLVertexArrayObject.t or_null)
      =
      fun (x13807 : 'tags this) ->
        or_null_of_js WebGLVertexArrayObject.t_of_js
          (Ojs.call (this_to_js Obj.magic x13807) "createVertexArray" [||])
    let (deleteQuery : 'tags this -> query:WebGLQuery.t or_null -> unit) =
      fun (x13812 : 'tags this) ->
        fun ~query:(x13810 : WebGLQuery.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13812) "deleteQuery"
               [|(or_null_to_js WebGLQuery.t_to_js x13810)|])
    let (deleteSampler :
      'tags this -> sampler:WebGLSampler.t or_null -> unit) =
      fun (x13816 : 'tags this) ->
        fun ~sampler:(x13814 : WebGLSampler.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13816) "deleteSampler"
               [|(or_null_to_js WebGLSampler.t_to_js x13814)|])
    let (deleteSync : 'tags this -> sync:WebGLSync.t or_null -> unit) =
      fun (x13820 : 'tags this) ->
        fun ~sync:(x13818 : WebGLSync.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13820) "deleteSync"
               [|(or_null_to_js WebGLSync.t_to_js x13818)|])
    let (deleteTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t or_null -> unit) =
      fun (x13824 : 'tags this) ->
        fun ~tf:(x13822 : WebGLTransformFeedback.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13824) "deleteTransformFeedback"
               [|(or_null_to_js WebGLTransformFeedback.t_to_js x13822)|])
    let (deleteVertexArray :
      'tags this -> vertexArray:WebGLVertexArrayObject.t or_null -> unit) =
      fun (x13828 : 'tags this) ->
        fun ~vertexArray:(x13826 : WebGLVertexArrayObject.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13828) "deleteVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x13826)|])
    let (drawArraysInstanced :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x13834 : 'tags this) ->
        fun ~mode:(x13830 : GLenum.t) ->
          fun ~first:(x13831 : GLint.t) ->
            fun ~count:(x13832 : GLsizei.t) ->
              fun ~instanceCount:(x13833 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13834)
                     "drawArraysInstanced"
                     [|(GLenum.t_to_js x13830);(GLint.t_to_js x13831);(
                       GLsizei.t_to_js x13832);(GLsizei.t_to_js x13833)|])
    let (drawBuffers : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x13838 : 'tags this) ->
        fun ~buffers:(x13836 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13838) "drawBuffers"
               [|(Ojs.list_to_js GLenum.t_to_js x13836)|])
    let (drawElementsInstanced :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x13845 : 'tags this) ->
        fun ~mode:(x13840 : GLenum.t) ->
          fun ~count:(x13841 : GLsizei.t) ->
            fun ~type_:(x13842 : GLenum.t) ->
              fun ~offset:(x13843 : GLintptr.t) ->
                fun ~instanceCount:(x13844 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13845)
                       "drawElementsInstanced"
                       [|(GLenum.t_to_js x13840);(GLsizei.t_to_js x13841);(
                         GLenum.t_to_js x13842);(GLintptr.t_to_js x13843);(
                         GLsizei.t_to_js x13844)|])
    let (drawRangeElements :
      'tags this ->
        mode:GLenum.t ->
          start:GLuint.t ->
            end_:GLuint.t ->
              count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x13853 : 'tags this) ->
        fun ~mode:(x13847 : GLenum.t) ->
          fun ~start:(x13848 : GLuint.t) ->
            fun ~end_:(x13849 : GLuint.t) ->
              fun ~count:(x13850 : GLsizei.t) ->
                fun ~type_:(x13851 : GLenum.t) ->
                  fun ~offset:(x13852 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13853)
                         "drawRangeElements"
                         [|(GLenum.t_to_js x13847);(GLuint.t_to_js x13848);(
                           GLuint.t_to_js x13849);(GLsizei.t_to_js x13850);(
                           GLenum.t_to_js x13851);(GLintptr.t_to_js x13852)|])
    let (endQuery : 'tags this -> target:GLenum.t -> unit) =
      fun (x13856 : 'tags this) ->
        fun ~target:(x13855 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13856) "endQuery"
               [|(GLenum.t_to_js x13855)|])
    let (endTransformFeedback : 'tags this -> unit) =
      fun (x13858 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x13858) "endTransformFeedback" [||])
    let (fenceSync :
      'tags this ->
        condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t or_null)
      =
      fun (x13862 : 'tags this) ->
        fun ~condition:(x13860 : GLenum.t) ->
          fun ~flags:(x13861 : GLbitfield.t) ->
            or_null_of_js WebGLSync.t_of_js
              (Ojs.call (this_to_js Obj.magic x13862) "fenceSync"
                 [|(GLenum.t_to_js x13860);(GLbitfield.t_to_js x13861)|])
    let (framebufferTextureLayer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t or_null ->
              level:GLint.t -> layer:GLint.t -> unit)
      =
      fun (x13871 : 'tags this) ->
        fun ~target:(x13865 : GLenum.t) ->
          fun ~attachment:(x13866 : GLenum.t) ->
            fun ~texture:(x13867 : WebGLTexture.t or_null) ->
              fun ~level:(x13869 : GLint.t) ->
                fun ~layer:(x13870 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13871)
                       "framebufferTextureLayer"
                       [|(GLenum.t_to_js x13865);(GLenum.t_to_js x13866);(
                         or_null_to_js WebGLTexture.t_to_js x13867);(
                         GLint.t_to_js x13869);(GLint.t_to_js x13870)|])
    let (getActiveUniformBlockName :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> string or_null)
      =
      fun (x13875 : 'tags this) ->
        fun ~program:(x13873 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x13874 : GLuint.t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x13875)
                 "getActiveUniformBlockName"
                 [|(WebGLProgram.t_to_js x13873);(GLuint.t_to_js x13874)|])
    let (getActiveUniformBlockParameter :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any)
      =
      fun (x13881 : 'tags this) ->
        fun ~program:(x13878 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x13879 : GLuint.t) ->
            fun ~pname:(x13880 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x13881)
                   "getActiveUniformBlockParameter"
                   [|(WebGLProgram.t_to_js x13878);(GLuint.t_to_js x13879);(
                     GLenum.t_to_js x13880)|])
    let (getActiveUniforms :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t list -> pname:GLenum.t -> any)
      =
      fun (x13887 : 'tags this) ->
        fun ~program:(x13883 : WebGLProgram.t) ->
          fun ~uniformIndices:(x13884 : GLuint.t list) ->
            fun ~pname:(x13886 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x13887) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x13883);(Ojs.list_to_js
                                                      GLuint.t_to_js x13884);(
                     GLenum.t_to_js x13886)|])
    let (getBufferSubData :
      'tags this ->
        target:GLenum.t ->
          srcByteOffset:GLintptr.t ->
            dstBuffer:ArrayBufferView.t_0 ->
              ?dstOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x13897 : 'tags this) ->
        fun ~target:(x13889 : GLenum.t) ->
          fun ~srcByteOffset:(x13890 : GLintptr.t) ->
            fun ~dstBuffer:(x13891 : ArrayBufferView.t_0) ->
              fun ?dstOffset:(x13892 : GLuint.t option) ->
                fun ?length:(x13893 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x13899 = this_to_js Obj.magic x13897 in
                       Ojs.call
                         (Ojs.get_prop_ascii x13899 "getBufferSubData")
                         "apply"
                         [|x13899;((let x13894 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x13894 "push"
                                         [|(GLenum.t_to_js x13889)|]);
                                    ignore
                                      (Ojs.call x13894 "push"
                                         [|(GLintptr.t_to_js x13890)|]);
                                    ignore
                                      (Ojs.call x13894 "push"
                                         [|(ArrayBufferView.t_0_to_js x13891)|]);
                                    (match x13892 with
                                     | Some x13896 ->
                                         ignore
                                           (Ojs.call x13894 "push"
                                              [|(GLuint.t_to_js x13896)|])
                                     | None -> ());
                                    (match x13893 with
                                     | Some x13895 ->
                                         ignore
                                           (Ojs.call x13894 "push"
                                              [|(GLuint.t_to_js x13895)|])
                                     | None -> ());
                                    x13894))|])
    let (getFragDataLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x13902 : 'tags this) ->
        fun ~program:(x13900 : WebGLProgram.t) ->
          fun ~name:(x13901 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x13902) "getFragDataLocation"
                 [|(WebGLProgram.t_to_js x13900);(Ojs.string_to_js x13901)|])
    let (getIndexedParameter :
      'tags this -> target:GLenum.t -> index:GLuint.t -> any) =
      fun (x13906 : 'tags this) ->
        fun ~target:(x13904 : GLenum.t) ->
          fun ~index:(x13905 : GLuint.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x13906) "getIndexedParameter"
                 [|(GLenum.t_to_js x13904);(GLuint.t_to_js x13905)|])
    let (getInternalformatParameter :
      'tags this ->
        target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x13911 : 'tags this) ->
        fun ~target:(x13908 : GLenum.t) ->
          fun ~internalformat:(x13909 : GLenum.t) ->
            fun ~pname:(x13910 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x13911)
                   "getInternalformatParameter"
                   [|(GLenum.t_to_js x13908);(GLenum.t_to_js x13909);(
                     GLenum.t_to_js x13910)|])
    let (getQuery :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t or_null)
      =
      fun (x13915 : 'tags this) ->
        fun ~target:(x13913 : GLenum.t) ->
          fun ~pname:(x13914 : GLenum.t) ->
            or_null_of_js WebGLQuery.t_of_js
              (Ojs.call (this_to_js Obj.magic x13915) "getQuery"
                 [|(GLenum.t_to_js x13913);(GLenum.t_to_js x13914)|])
    let (getQueryParameter :
      'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any) =
      fun (x13920 : 'tags this) ->
        fun ~query:(x13918 : WebGLQuery.t) ->
          fun ~pname:(x13919 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x13920) "getQueryParameter"
                 [|(WebGLQuery.t_to_js x13918);(GLenum.t_to_js x13919)|])
    let (getSamplerParameter :
      'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any) =
      fun (x13924 : 'tags this) ->
        fun ~sampler:(x13922 : WebGLSampler.t) ->
          fun ~pname:(x13923 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x13924) "getSamplerParameter"
                 [|(WebGLSampler.t_to_js x13922);(GLenum.t_to_js x13923)|])
    let (getSyncParameter :
      'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any) =
      fun (x13928 : 'tags this) ->
        fun ~sync:(x13926 : WebGLSync.t) ->
          fun ~pname:(x13927 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x13928) "getSyncParameter"
                 [|(WebGLSync.t_to_js x13926);(GLenum.t_to_js x13927)|])
    let (getTransformFeedbackVarying :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x13932 : 'tags this) ->
        fun ~program:(x13930 : WebGLProgram.t) ->
          fun ~index:(x13931 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x13932)
                 "getTransformFeedbackVarying"
                 [|(WebGLProgram.t_to_js x13930);(GLuint.t_to_js x13931)|])
    let (getUniformBlockIndex :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t)
      =
      fun (x13937 : 'tags this) ->
        fun ~program:(x13935 : WebGLProgram.t) ->
          fun ~uniformBlockName:(x13936 : string) ->
            GLuint.t_of_js
              (Ojs.call (this_to_js Obj.magic x13937) "getUniformBlockIndex"
                 [|(WebGLProgram.t_to_js x13935);(Ojs.string_to_js x13936)|])
    let (getUniformIndices :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string list -> GLuint.t list or_null)
      =
      fun (x13942 : 'tags this) ->
        fun ~program:(x13939 : WebGLProgram.t) ->
          fun ~uniformNames:(x13940 : string list) ->
            or_null_of_js
              (fun (x13944 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x13944)
              (Ojs.call (this_to_js Obj.magic x13942) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x13939);(Ojs.list_to_js
                                                    Ojs.string_to_js x13940)|])
    let (invalidateFramebuffer :
      'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit) =
      fun (x13949 : 'tags this) ->
        fun ~target:(x13946 : GLenum.t) ->
          fun ~attachments:(x13947 : GLenum.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13949) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x13946);(Ojs.list_to_js GLenum.t_to_js
                                              x13947)|])
    let (invalidateSubFramebuffer :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t list ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x13958 : 'tags this) ->
        fun ~target:(x13951 : GLenum.t) ->
          fun ~attachments:(x13952 : GLenum.t list) ->
            fun ~x:(x13954 : GLint.t) ->
              fun ~y:(x13955 : GLint.t) ->
                fun ~width:(x13956 : GLsizei.t) ->
                  fun ~height:(x13957 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13958)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x13951);(Ojs.list_to_js
                                                      GLenum.t_to_js x13952);(
                           GLint.t_to_js x13954);(GLint.t_to_js x13955);(
                           GLsizei.t_to_js x13956);(GLsizei.t_to_js x13957)|])
    let (isQuery : 'tags this -> query:WebGLQuery.t or_null -> GLboolean.t) =
      fun (x13962 : 'tags this) ->
        fun ~query:(x13960 : WebGLQuery.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13962) "isQuery"
               [|(or_null_to_js WebGLQuery.t_to_js x13960)|])
    let (isSampler :
      'tags this -> sampler:WebGLSampler.t or_null -> GLboolean.t) =
      fun (x13966 : 'tags this) ->
        fun ~sampler:(x13964 : WebGLSampler.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13966) "isSampler"
               [|(or_null_to_js WebGLSampler.t_to_js x13964)|])
    let (isSync : 'tags this -> sync:WebGLSync.t or_null -> GLboolean.t) =
      fun (x13970 : 'tags this) ->
        fun ~sync:(x13968 : WebGLSync.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13970) "isSync"
               [|(or_null_to_js WebGLSync.t_to_js x13968)|])
    let (isTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t or_null -> GLboolean.t) =
      fun (x13974 : 'tags this) ->
        fun ~tf:(x13972 : WebGLTransformFeedback.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13974) "isTransformFeedback"
               [|(or_null_to_js WebGLTransformFeedback.t_to_js x13972)|])
    let (isVertexArray :
      'tags this ->
        vertexArray:WebGLVertexArrayObject.t or_null -> GLboolean.t)
      =
      fun (x13978 : 'tags this) ->
        fun ~vertexArray:(x13976 : WebGLVertexArrayObject.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x13978) "isVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x13976)|])
    let (pauseTransformFeedback : 'tags this -> unit) =
      fun (x13980 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x13980) "pauseTransformFeedback"
             [||])
    let (readBuffer : 'tags this -> src:GLenum.t -> unit) =
      fun (x13983 : 'tags this) ->
        fun ~src:(x13982 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13983) "readBuffer"
               [|(GLenum.t_to_js x13982)|])
    let (renderbufferStorageMultisample :
      'tags this ->
        target:GLenum.t ->
          samples:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x13990 : 'tags this) ->
        fun ~target:(x13985 : GLenum.t) ->
          fun ~samples:(x13986 : GLsizei.t) ->
            fun ~internalformat:(x13987 : GLenum.t) ->
              fun ~width:(x13988 : GLsizei.t) ->
                fun ~height:(x13989 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13990)
                       "renderbufferStorageMultisample"
                       [|(GLenum.t_to_js x13985);(GLsizei.t_to_js x13986);(
                         GLenum.t_to_js x13987);(GLsizei.t_to_js x13988);(
                         GLsizei.t_to_js x13989)|])
    let (resumeTransformFeedback : 'tags this -> unit) =
      fun (x13992 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x13992) "resumeTransformFeedback"
             [||])
    let (samplerParameterf :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x13997 : 'tags this) ->
        fun ~sampler:(x13994 : WebGLSampler.t) ->
          fun ~pname:(x13995 : GLenum.t) ->
            fun ~param:(x13996 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x13997) "samplerParameterf"
                   [|(WebGLSampler.t_to_js x13994);(GLenum.t_to_js x13995);(
                     GLfloat.t_to_js x13996)|])
    let (samplerParameteri :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x14002 : 'tags this) ->
        fun ~sampler:(x13999 : WebGLSampler.t) ->
          fun ~pname:(x14000 : GLenum.t) ->
            fun ~param:(x14001 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14002) "samplerParameteri"
                   [|(WebGLSampler.t_to_js x13999);(GLenum.t_to_js x14000);(
                     GLint.t_to_js x14001)|])
    let (texImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x14014 : 'tags this) ->
        fun ~target:(x14004 : GLenum.t) ->
          fun ~level:(x14005 : GLint.t) ->
            fun ~internalformat:(x14006 : GLint.t) ->
              fun ~width:(x14007 : GLsizei.t) ->
                fun ~height:(x14008 : GLsizei.t) ->
                  fun ~depth:(x14009 : GLsizei.t) ->
                    fun ~border:(x14010 : GLint.t) ->
                      fun ~format:(x14011 : GLenum.t) ->
                        fun ~type_:(x14012 : GLenum.t) ->
                          fun ~pboOffset:(x14013 : GLintptr.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x14014)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x14004);(GLint.t_to_js
                                                              x14005);(
                                   GLint.t_to_js x14006);(GLsizei.t_to_js
                                                            x14007);(
                                   GLsizei.t_to_js x14008);(GLsizei.t_to_js
                                                              x14009);(
                                   GLint.t_to_js x14010);(GLenum.t_to_js
                                                            x14011);(
                                   GLenum.t_to_js x14012);(GLintptr.t_to_js
                                                             x14013)|])
    let (texImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x14026 : 'tags this) ->
        fun ~target:(x14016 : GLenum.t) ->
          fun ~level:(x14017 : GLint.t) ->
            fun ~internalformat:(x14018 : GLint.t) ->
              fun ~width:(x14019 : GLsizei.t) ->
                fun ~height:(x14020 : GLsizei.t) ->
                  fun ~depth:(x14021 : GLsizei.t) ->
                    fun ~border:(x14022 : GLint.t) ->
                      fun ~format:(x14023 : GLenum.t) ->
                        fun ~type_:(x14024 : GLenum.t) ->
                          fun ~source:(x14025 : TexImageSource.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x14026)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x14016);(GLint.t_to_js
                                                              x14017);(
                                   GLint.t_to_js x14018);(GLsizei.t_to_js
                                                            x14019);(
                                   GLsizei.t_to_js x14020);(GLsizei.t_to_js
                                                              x14021);(
                                   GLint.t_to_js x14022);(GLenum.t_to_js
                                                            x14023);(
                                   GLenum.t_to_js x14024);(TexImageSource.t_to_js
                                                             x14025)|])
    let (texImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x14039 : 'tags this) ->
        fun ~target:(x14028 : GLenum.t) ->
          fun ~level:(x14029 : GLint.t) ->
            fun ~internalformat:(x14030 : GLint.t) ->
              fun ~width:(x14031 : GLsizei.t) ->
                fun ~height:(x14032 : GLsizei.t) ->
                  fun ~depth:(x14033 : GLsizei.t) ->
                    fun ~border:(x14034 : GLint.t) ->
                      fun ~format:(x14035 : GLenum.t) ->
                        fun ~type_:(x14036 : GLenum.t) ->
                          fun ~srcData:(x14037 : ArrayBufferView.t_0 or_null)
                            ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x14039)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x14028);(GLint.t_to_js
                                                              x14029);(
                                   GLint.t_to_js x14030);(GLsizei.t_to_js
                                                            x14031);(
                                   GLsizei.t_to_js x14032);(GLsizei.t_to_js
                                                              x14033);(
                                   GLint.t_to_js x14034);(GLenum.t_to_js
                                                            x14035);(
                                   GLenum.t_to_js x14036);(or_null_to_js
                                                             ArrayBufferView.t_0_to_js
                                                             x14037)|])
    let (texImage3D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            srcOffset:GLuint.t -> unit)
      =
      fun (x14052 : 'tags this) ->
        fun ~target:(x14041 : GLenum.t) ->
          fun ~level:(x14042 : GLint.t) ->
            fun ~internalformat:(x14043 : GLint.t) ->
              fun ~width:(x14044 : GLsizei.t) ->
                fun ~height:(x14045 : GLsizei.t) ->
                  fun ~depth:(x14046 : GLsizei.t) ->
                    fun ~border:(x14047 : GLint.t) ->
                      fun ~format:(x14048 : GLenum.t) ->
                        fun ~type_:(x14049 : GLenum.t) ->
                          fun ~srcData:(x14050 : ArrayBufferView.t_0) ->
                            fun ~srcOffset:(x14051 : GLuint.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x14052)
                                   "texImage3D"
                                   [|(GLenum.t_to_js x14041);(GLint.t_to_js
                                                                x14042);(
                                     GLint.t_to_js x14043);(GLsizei.t_to_js
                                                              x14044);(
                                     GLsizei.t_to_js x14045);(GLsizei.t_to_js
                                                                x14046);(
                                     GLint.t_to_js x14047);(GLenum.t_to_js
                                                              x14048);(
                                     GLenum.t_to_js x14049);(ArrayBufferView.t_0_to_js
                                                               x14050);(
                                     GLuint.t_to_js x14051)|])
    let (texStorage2D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x14059 : 'tags this) ->
        fun ~target:(x14054 : GLenum.t) ->
          fun ~levels:(x14055 : GLsizei.t) ->
            fun ~internalformat:(x14056 : GLenum.t) ->
              fun ~width:(x14057 : GLsizei.t) ->
                fun ~height:(x14058 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14059) "texStorage2D"
                       [|(GLenum.t_to_js x14054);(GLsizei.t_to_js x14055);(
                         GLenum.t_to_js x14056);(GLsizei.t_to_js x14057);(
                         GLsizei.t_to_js x14058)|])
    let (texStorage3D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit)
      =
      fun (x14067 : 'tags this) ->
        fun ~target:(x14061 : GLenum.t) ->
          fun ~levels:(x14062 : GLsizei.t) ->
            fun ~internalformat:(x14063 : GLenum.t) ->
              fun ~width:(x14064 : GLsizei.t) ->
                fun ~height:(x14065 : GLsizei.t) ->
                  fun ~depth:(x14066 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x14067) "texStorage3D"
                         [|(GLenum.t_to_js x14061);(GLsizei.t_to_js x14062);(
                           GLenum.t_to_js x14063);(GLsizei.t_to_js x14064);(
                           GLsizei.t_to_js x14065);(GLsizei.t_to_js x14066)|])
    let (texSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x14080 : 'tags this) ->
        fun ~target:(x14069 : GLenum.t) ->
          fun ~level:(x14070 : GLint.t) ->
            fun ~xoffset:(x14071 : GLint.t) ->
              fun ~yoffset:(x14072 : GLint.t) ->
                fun ~zoffset:(x14073 : GLint.t) ->
                  fun ~width:(x14074 : GLsizei.t) ->
                    fun ~height:(x14075 : GLsizei.t) ->
                      fun ~depth:(x14076 : GLsizei.t) ->
                        fun ~format:(x14077 : GLenum.t) ->
                          fun ~type_:(x14078 : GLenum.t) ->
                            fun ~pboOffset:(x14079 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x14080)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x14069);(GLint.t_to_js
                                                                x14070);(
                                     GLint.t_to_js x14071);(GLint.t_to_js
                                                              x14072);(
                                     GLint.t_to_js x14073);(GLsizei.t_to_js
                                                              x14074);(
                                     GLsizei.t_to_js x14075);(GLsizei.t_to_js
                                                                x14076);(
                                     GLenum.t_to_js x14077);(GLenum.t_to_js
                                                               x14078);(
                                     GLintptr.t_to_js x14079)|])
    let (texSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x14093 : 'tags this) ->
        fun ~target:(x14082 : GLenum.t) ->
          fun ~level:(x14083 : GLint.t) ->
            fun ~xoffset:(x14084 : GLint.t) ->
              fun ~yoffset:(x14085 : GLint.t) ->
                fun ~zoffset:(x14086 : GLint.t) ->
                  fun ~width:(x14087 : GLsizei.t) ->
                    fun ~height:(x14088 : GLsizei.t) ->
                      fun ~depth:(x14089 : GLsizei.t) ->
                        fun ~format:(x14090 : GLenum.t) ->
                          fun ~type_:(x14091 : GLenum.t) ->
                            fun ~source:(x14092 : TexImageSource.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x14093)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x14082);(GLint.t_to_js
                                                                x14083);(
                                     GLint.t_to_js x14084);(GLint.t_to_js
                                                              x14085);(
                                     GLint.t_to_js x14086);(GLsizei.t_to_js
                                                              x14087);(
                                     GLsizei.t_to_js x14088);(GLsizei.t_to_js
                                                                x14089);(
                                     GLenum.t_to_js x14090);(GLenum.t_to_js
                                                               x14091);(
                                     TexImageSource.t_to_js x14092)|])
    let (texSubImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t ->
                            srcData:ArrayBufferView.t_0 or_null ->
                              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x14110 : 'tags this) ->
        fun ~target:(x14095 : GLenum.t) ->
          fun ~level:(x14096 : GLint.t) ->
            fun ~xoffset:(x14097 : GLint.t) ->
              fun ~yoffset:(x14098 : GLint.t) ->
                fun ~zoffset:(x14099 : GLint.t) ->
                  fun ~width:(x14100 : GLsizei.t) ->
                    fun ~height:(x14101 : GLsizei.t) ->
                      fun ~depth:(x14102 : GLsizei.t) ->
                        fun ~format:(x14103 : GLenum.t) ->
                          fun ~type_:(x14104 : GLenum.t) ->
                            fun
                              ~srcData:(x14105 : ArrayBufferView.t_0 or_null)
                              ->
                              fun ?srcOffset:(x14106 : GLuint.t option) ->
                                fun () ->
                                  ignore
                                    (let x14112 = this_to_js Obj.magic x14110 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x14112
                                          "texSubImage3D") "apply"
                                       [|x14112;((let x14107 =
                                                    Ojs.new_obj
                                                      (Ojs.get_prop_ascii
                                                         Ojs.global "Array")
                                                      [||] in
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLenum.t_to_js
                                                            x14095)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLint.t_to_js
                                                            x14096)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLint.t_to_js
                                                            x14097)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLint.t_to_js
                                                            x14098)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLint.t_to_js
                                                            x14099)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLsizei.t_to_js
                                                            x14100)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLsizei.t_to_js
                                                            x14101)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLsizei.t_to_js
                                                            x14102)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLenum.t_to_js
                                                            x14103)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(GLenum.t_to_js
                                                            x14104)|]);
                                                  ignore
                                                    (Ojs.call x14107 "push"
                                                       [|(or_null_to_js
                                                            ArrayBufferView.t_0_to_js
                                                            x14105)|]);
                                                  (match x14106 with
                                                   | Some x14108 ->
                                                       ignore
                                                         (Ojs.call x14107
                                                            "push"
                                                            [|(GLuint.t_to_js
                                                                 x14108)|])
                                                   | None -> ());
                                                  x14107))|])
    let (transformFeedbackVaryings :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string list -> bufferMode:GLenum.t -> unit)
      =
      fun (x14117 : 'tags this) ->
        fun ~program:(x14113 : WebGLProgram.t) ->
          fun ~varyings:(x14114 : string list) ->
            fun ~bufferMode:(x14116 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14117)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x14113);(Ojs.list_to_js
                                                      Ojs.string_to_js x14114);(
                     GLenum.t_to_js x14116)|])
    let (uniform1ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v0:GLuint.t -> unit)
      =
      fun (x14122 : 'tags this) ->
        fun ~location:(x14119 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x14121 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14122) "uniform1ui"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x14119);(
                   GLuint.t_to_js x14121)|])
    let (uniform1uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14132 : 'tags this) ->
        fun ~location:(x14124 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14125 : Uint32List.t) ->
            fun ?srcOffset:(x14126 : GLuint.t option) ->
              fun ?srcLength:(x14127 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14134 = this_to_js Obj.magic x14132 in
                     Ojs.call (Ojs.get_prop_ascii x14134 "uniform1uiv")
                       "apply"
                       [|x14134;((let x14128 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14128 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14124)|]);
                                  ignore
                                    (Ojs.call x14128 "push"
                                       [|(Uint32List.t_to_js x14125)|]);
                                  (match x14126 with
                                   | Some x14130 ->
                                       ignore
                                         (Ojs.call x14128 "push"
                                            [|(GLuint.t_to_js x14130)|])
                                   | None -> ());
                                  (match x14127 with
                                   | Some x14129 ->
                                       ignore
                                         (Ojs.call x14128 "push"
                                            [|(GLuint.t_to_js x14129)|])
                                   | None -> ());
                                  x14128))|])
    let (uniform2ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> unit)
      =
      fun (x14139 : 'tags this) ->
        fun ~location:(x14135 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x14137 : GLuint.t) ->
            fun ~v1:(x14138 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14139) "uniform2ui"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x14135);(
                     GLuint.t_to_js x14137);(GLuint.t_to_js x14138)|])
    let (uniform2uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14149 : 'tags this) ->
        fun ~location:(x14141 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14142 : Uint32List.t) ->
            fun ?srcOffset:(x14143 : GLuint.t option) ->
              fun ?srcLength:(x14144 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14151 = this_to_js Obj.magic x14149 in
                     Ojs.call (Ojs.get_prop_ascii x14151 "uniform2uiv")
                       "apply"
                       [|x14151;((let x14145 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14145 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14141)|]);
                                  ignore
                                    (Ojs.call x14145 "push"
                                       [|(Uint32List.t_to_js x14142)|]);
                                  (match x14143 with
                                   | Some x14147 ->
                                       ignore
                                         (Ojs.call x14145 "push"
                                            [|(GLuint.t_to_js x14147)|])
                                   | None -> ());
                                  (match x14144 with
                                   | Some x14146 ->
                                       ignore
                                         (Ojs.call x14145 "push"
                                            [|(GLuint.t_to_js x14146)|])
                                   | None -> ());
                                  x14145))|])
    let (uniform3ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit)
      =
      fun (x14157 : 'tags this) ->
        fun ~location:(x14152 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x14154 : GLuint.t) ->
            fun ~v1:(x14155 : GLuint.t) ->
              fun ~v2:(x14156 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x14157) "uniform3ui"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x14152);(
                       GLuint.t_to_js x14154);(GLuint.t_to_js x14155);(
                       GLuint.t_to_js x14156)|])
    let (uniform3uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14167 : 'tags this) ->
        fun ~location:(x14159 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14160 : Uint32List.t) ->
            fun ?srcOffset:(x14161 : GLuint.t option) ->
              fun ?srcLength:(x14162 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14169 = this_to_js Obj.magic x14167 in
                     Ojs.call (Ojs.get_prop_ascii x14169 "uniform3uiv")
                       "apply"
                       [|x14169;((let x14163 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14163 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14159)|]);
                                  ignore
                                    (Ojs.call x14163 "push"
                                       [|(Uint32List.t_to_js x14160)|]);
                                  (match x14161 with
                                   | Some x14165 ->
                                       ignore
                                         (Ojs.call x14163 "push"
                                            [|(GLuint.t_to_js x14165)|])
                                   | None -> ());
                                  (match x14162 with
                                   | Some x14164 ->
                                       ignore
                                         (Ojs.call x14163 "push"
                                            [|(GLuint.t_to_js x14164)|])
                                   | None -> ());
                                  x14163))|])
    let (uniform4ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit)
      =
      fun (x14176 : 'tags this) ->
        fun ~location:(x14170 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x14172 : GLuint.t) ->
            fun ~v1:(x14173 : GLuint.t) ->
              fun ~v2:(x14174 : GLuint.t) ->
                fun ~v3:(x14175 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14176) "uniform4ui"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x14170);(
                         GLuint.t_to_js x14172);(GLuint.t_to_js x14173);(
                         GLuint.t_to_js x14174);(GLuint.t_to_js x14175)|])
    let (uniform4uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14186 : 'tags this) ->
        fun ~location:(x14178 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14179 : Uint32List.t) ->
            fun ?srcOffset:(x14180 : GLuint.t option) ->
              fun ?srcLength:(x14181 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14188 = this_to_js Obj.magic x14186 in
                     Ojs.call (Ojs.get_prop_ascii x14188 "uniform4uiv")
                       "apply"
                       [|x14188;((let x14182 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14182 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14178)|]);
                                  ignore
                                    (Ojs.call x14182 "push"
                                       [|(Uint32List.t_to_js x14179)|]);
                                  (match x14180 with
                                   | Some x14184 ->
                                       ignore
                                         (Ojs.call x14182 "push"
                                            [|(GLuint.t_to_js x14184)|])
                                   | None -> ());
                                  (match x14181 with
                                   | Some x14183 ->
                                       ignore
                                         (Ojs.call x14182 "push"
                                            [|(GLuint.t_to_js x14183)|])
                                   | None -> ());
                                  x14182))|])
    let (uniformBlockBinding :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit)
      =
      fun (x14192 : 'tags this) ->
        fun ~program:(x14189 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x14190 : GLuint.t) ->
            fun ~uniformBlockBinding:(x14191 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14192) "uniformBlockBinding"
                   [|(WebGLProgram.t_to_js x14189);(GLuint.t_to_js x14190);(
                     GLuint.t_to_js x14191)|])
    let (uniformMatrix2x3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14203 : 'tags this) ->
        fun ~location:(x14194 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14195 : GLboolean.t) ->
            fun ~data:(x14196 : Float32List.t) ->
              fun ?srcOffset:(x14197 : GLuint.t option) ->
                fun ?srcLength:(x14198 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14205 = this_to_js Obj.magic x14203 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14205 "uniformMatrix2x3fv")
                         "apply"
                         [|x14205;((let x14199 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14199 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14194)|]);
                                    ignore
                                      (Ojs.call x14199 "push"
                                         [|(GLboolean.t_to_js x14195)|]);
                                    ignore
                                      (Ojs.call x14199 "push"
                                         [|(Float32List.t_to_js x14196)|]);
                                    (match x14197 with
                                     | Some x14201 ->
                                         ignore
                                           (Ojs.call x14199 "push"
                                              [|(GLuint.t_to_js x14201)|])
                                     | None -> ());
                                    (match x14198 with
                                     | Some x14200 ->
                                         ignore
                                           (Ojs.call x14199 "push"
                                              [|(GLuint.t_to_js x14200)|])
                                     | None -> ());
                                    x14199))|])
    let (uniformMatrix2x4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14215 : 'tags this) ->
        fun ~location:(x14206 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14207 : GLboolean.t) ->
            fun ~data:(x14208 : Float32List.t) ->
              fun ?srcOffset:(x14209 : GLuint.t option) ->
                fun ?srcLength:(x14210 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14217 = this_to_js Obj.magic x14215 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14217 "uniformMatrix2x4fv")
                         "apply"
                         [|x14217;((let x14211 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14211 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14206)|]);
                                    ignore
                                      (Ojs.call x14211 "push"
                                         [|(GLboolean.t_to_js x14207)|]);
                                    ignore
                                      (Ojs.call x14211 "push"
                                         [|(Float32List.t_to_js x14208)|]);
                                    (match x14209 with
                                     | Some x14213 ->
                                         ignore
                                           (Ojs.call x14211 "push"
                                              [|(GLuint.t_to_js x14213)|])
                                     | None -> ());
                                    (match x14210 with
                                     | Some x14212 ->
                                         ignore
                                           (Ojs.call x14211 "push"
                                              [|(GLuint.t_to_js x14212)|])
                                     | None -> ());
                                    x14211))|])
    let (uniformMatrix3x2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14227 : 'tags this) ->
        fun ~location:(x14218 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14219 : GLboolean.t) ->
            fun ~data:(x14220 : Float32List.t) ->
              fun ?srcOffset:(x14221 : GLuint.t option) ->
                fun ?srcLength:(x14222 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14229 = this_to_js Obj.magic x14227 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14229 "uniformMatrix3x2fv")
                         "apply"
                         [|x14229;((let x14223 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14223 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14218)|]);
                                    ignore
                                      (Ojs.call x14223 "push"
                                         [|(GLboolean.t_to_js x14219)|]);
                                    ignore
                                      (Ojs.call x14223 "push"
                                         [|(Float32List.t_to_js x14220)|]);
                                    (match x14221 with
                                     | Some x14225 ->
                                         ignore
                                           (Ojs.call x14223 "push"
                                              [|(GLuint.t_to_js x14225)|])
                                     | None -> ());
                                    (match x14222 with
                                     | Some x14224 ->
                                         ignore
                                           (Ojs.call x14223 "push"
                                              [|(GLuint.t_to_js x14224)|])
                                     | None -> ());
                                    x14223))|])
    let (uniformMatrix3x4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14239 : 'tags this) ->
        fun ~location:(x14230 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14231 : GLboolean.t) ->
            fun ~data:(x14232 : Float32List.t) ->
              fun ?srcOffset:(x14233 : GLuint.t option) ->
                fun ?srcLength:(x14234 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14241 = this_to_js Obj.magic x14239 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14241 "uniformMatrix3x4fv")
                         "apply"
                         [|x14241;((let x14235 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14235 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14230)|]);
                                    ignore
                                      (Ojs.call x14235 "push"
                                         [|(GLboolean.t_to_js x14231)|]);
                                    ignore
                                      (Ojs.call x14235 "push"
                                         [|(Float32List.t_to_js x14232)|]);
                                    (match x14233 with
                                     | Some x14237 ->
                                         ignore
                                           (Ojs.call x14235 "push"
                                              [|(GLuint.t_to_js x14237)|])
                                     | None -> ());
                                    (match x14234 with
                                     | Some x14236 ->
                                         ignore
                                           (Ojs.call x14235 "push"
                                              [|(GLuint.t_to_js x14236)|])
                                     | None -> ());
                                    x14235))|])
    let (uniformMatrix4x2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14251 : 'tags this) ->
        fun ~location:(x14242 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14243 : GLboolean.t) ->
            fun ~data:(x14244 : Float32List.t) ->
              fun ?srcOffset:(x14245 : GLuint.t option) ->
                fun ?srcLength:(x14246 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14253 = this_to_js Obj.magic x14251 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14253 "uniformMatrix4x2fv")
                         "apply"
                         [|x14253;((let x14247 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14247 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14242)|]);
                                    ignore
                                      (Ojs.call x14247 "push"
                                         [|(GLboolean.t_to_js x14243)|]);
                                    ignore
                                      (Ojs.call x14247 "push"
                                         [|(Float32List.t_to_js x14244)|]);
                                    (match x14245 with
                                     | Some x14249 ->
                                         ignore
                                           (Ojs.call x14247 "push"
                                              [|(GLuint.t_to_js x14249)|])
                                     | None -> ());
                                    (match x14246 with
                                     | Some x14248 ->
                                         ignore
                                           (Ojs.call x14247 "push"
                                              [|(GLuint.t_to_js x14248)|])
                                     | None -> ());
                                    x14247))|])
    let (uniformMatrix4x3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14263 : 'tags this) ->
        fun ~location:(x14254 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14255 : GLboolean.t) ->
            fun ~data:(x14256 : Float32List.t) ->
              fun ?srcOffset:(x14257 : GLuint.t option) ->
                fun ?srcLength:(x14258 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14265 = this_to_js Obj.magic x14263 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14265 "uniformMatrix4x3fv")
                         "apply"
                         [|x14265;((let x14259 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14259 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14254)|]);
                                    ignore
                                      (Ojs.call x14259 "push"
                                         [|(GLboolean.t_to_js x14255)|]);
                                    ignore
                                      (Ojs.call x14259 "push"
                                         [|(Float32List.t_to_js x14256)|]);
                                    (match x14257 with
                                     | Some x14261 ->
                                         ignore
                                           (Ojs.call x14259 "push"
                                              [|(GLuint.t_to_js x14261)|])
                                     | None -> ());
                                    (match x14258 with
                                     | Some x14260 ->
                                         ignore
                                           (Ojs.call x14259 "push"
                                              [|(GLuint.t_to_js x14260)|])
                                     | None -> ());
                                    x14259))|])
    let (vertexAttribDivisor :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x14268 : 'tags this) ->
        fun ~index:(x14266 : GLuint.t) ->
          fun ~divisor:(x14267 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14268) "vertexAttribDivisor"
                 [|(GLuint.t_to_js x14266);(GLuint.t_to_js x14267)|])
    let (vertexAttribI4i :
      'tags this ->
        index:GLuint.t ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x14275 : 'tags this) ->
        fun ~index:(x14270 : GLuint.t) ->
          fun ~x:(x14271 : GLint.t) ->
            fun ~y:(x14272 : GLint.t) ->
              fun ~z:(x14273 : GLint.t) ->
                fun ~w:(x14274 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14275) "vertexAttribI4i"
                       [|(GLuint.t_to_js x14270);(GLint.t_to_js x14271);(
                         GLint.t_to_js x14272);(GLint.t_to_js x14273);(
                         GLint.t_to_js x14274)|])
    let (vertexAttribI4iv :
      'tags this -> index:GLuint.t -> values:Int32List.t -> unit) =
      fun (x14279 : 'tags this) ->
        fun ~index:(x14277 : GLuint.t) ->
          fun ~values:(x14278 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14279) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x14277);(Int32List.t_to_js x14278)|])
    let (vertexAttribI4ui :
      'tags this ->
        index:GLuint.t ->
          x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit)
      =
      fun (x14286 : 'tags this) ->
        fun ~index:(x14281 : GLuint.t) ->
          fun ~x:(x14282 : GLuint.t) ->
            fun ~y:(x14283 : GLuint.t) ->
              fun ~z:(x14284 : GLuint.t) ->
                fun ~w:(x14285 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14286)
                       "vertexAttribI4ui"
                       [|(GLuint.t_to_js x14281);(GLuint.t_to_js x14282);(
                         GLuint.t_to_js x14283);(GLuint.t_to_js x14284);(
                         GLuint.t_to_js x14285)|])
    let (vertexAttribI4uiv :
      'tags this -> index:GLuint.t -> values:Uint32List.t -> unit) =
      fun (x14290 : 'tags this) ->
        fun ~index:(x14288 : GLuint.t) ->
          fun ~values:(x14289 : Uint32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14290) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x14288);(Uint32List.t_to_js x14289)|])
    let (vertexAttribIPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x14297 : 'tags this) ->
        fun ~index:(x14292 : GLuint.t) ->
          fun ~size:(x14293 : GLint.t) ->
            fun ~type_:(x14294 : GLenum.t) ->
              fun ~stride:(x14295 : GLsizei.t) ->
                fun ~offset:(x14296 : GLintptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x14297)
                       "vertexAttribIPointer"
                       [|(GLuint.t_to_js x14292);(GLint.t_to_js x14293);(
                         GLenum.t_to_js x14294);(GLsizei.t_to_js x14295);(
                         GLintptr.t_to_js x14296)|])
    let (waitSync :
      'tags this ->
        sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit)
      =
      fun (x14302 : 'tags this) ->
        fun ~sync:(x14299 : WebGLSync.t) ->
          fun ~flags:(x14300 : GLbitfield.t) ->
            fun ~timeout:(x14301 : GLint64.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14302) "waitSync"
                   [|(WebGLSync.t_to_js x14299);(GLbitfield.t_to_js x14300);(
                     GLint64.t_to_js x14301)|])
    let (get_ACTIVE_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x14304 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14304)
             "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : 'tags this -> GLenum.t) =
      fun (x14306 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14306)
             "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : 'tags this -> GLenum.t) =
      fun (x14308 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14308)
             "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : 'tags this -> GLenum.t) =
      fun (x14310 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14310)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : 'tags this -> GLenum.t) =
      fun (x14312 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14312) "COLOR")
    let (get_COLOR_ATTACHMENT1 : 'tags this -> GLenum.t) =
      fun (x14314 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14314)
             "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : 'tags this -> GLenum.t) =
      fun (x14316 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14316)
             "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : 'tags this -> GLenum.t) =
      fun (x14318 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14318)
             "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : 'tags this -> GLenum.t) =
      fun (x14320 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14320)
             "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : 'tags this -> GLenum.t) =
      fun (x14322 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14322)
             "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : 'tags this -> GLenum.t) =
      fun (x14324 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14324)
             "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : 'tags this -> GLenum.t) =
      fun (x14326 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14326)
             "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : 'tags this -> GLenum.t) =
      fun (x14328 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14328)
             "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : 'tags this -> GLenum.t) =
      fun (x14330 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14330)
             "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : 'tags this -> GLenum.t) =
      fun (x14332 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14332)
             "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : 'tags this -> GLenum.t) =
      fun (x14334 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14334)
             "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : 'tags this -> GLenum.t) =
      fun (x14336 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14336)
             "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : 'tags this -> GLenum.t) =
      fun (x14338 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14338)
             "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : 'tags this -> GLenum.t) =
      fun (x14340 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14340)
             "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : 'tags this -> GLenum.t) =
      fun (x14342 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14342)
             "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : 'tags this -> GLenum.t) =
      fun (x14344 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14344)
             "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : 'tags this -> GLenum.t) =
      fun (x14346 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14346)
             "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x14348 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14348)
             "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14350 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14350)
             "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : 'tags this -> GLenum.t) =
      fun (x14352 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14352)
             "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14354 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14354)
             "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : 'tags this -> GLenum.t) =
      fun (x14356 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14356) "CURRENT_QUERY")
    let (get_DEPTH : 'tags this -> GLenum.t) =
      fun (x14358 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14358) "DEPTH")
    let (get_DEPTH24_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x14360 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14360)
             "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x14362 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14362)
             "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : 'tags this -> GLenum.t) =
      fun (x14364 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14364)
             "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : 'tags this -> GLenum.t) =
      fun (x14366 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14366)
             "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : 'tags this -> GLenum.t) =
      fun (x14368 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14368) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : 'tags this -> GLenum.t) =
      fun (x14370 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14370) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : 'tags this -> GLenum.t) =
      fun (x14372 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14372) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : 'tags this -> GLenum.t) =
      fun (x14374 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14374) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : 'tags this -> GLenum.t) =
      fun (x14376 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14376) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : 'tags this -> GLenum.t) =
      fun (x14378 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14378) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : 'tags this -> GLenum.t) =
      fun (x14380 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14380) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : 'tags this -> GLenum.t) =
      fun (x14382 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14382) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : 'tags this -> GLenum.t) =
      fun (x14384 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14384) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : 'tags this -> GLenum.t) =
      fun (x14386 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14386) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : 'tags this -> GLenum.t) =
      fun (x14388 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14388) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : 'tags this -> GLenum.t) =
      fun (x14390 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14390) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : 'tags this -> GLenum.t) =
      fun (x14392 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14392) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : 'tags this -> GLenum.t) =
      fun (x14394 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14394) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : 'tags this -> GLenum.t) =
      fun (x14396 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14396) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : 'tags this -> GLenum.t) =
      fun (x14398 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14398) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x14400 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14400)
             "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14402 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14402)
             "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : 'tags this -> GLenum.t) =
      fun (x14404 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14404) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : 'tags this -> GLenum.t) =
      fun (x14406 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14406) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : 'tags this -> GLenum.t) =
      fun (x14408 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14408)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : 'tags this -> GLenum.t) =
      fun (x14410 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14410) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : 'tags this -> GLenum.t) =
      fun (x14412 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14412) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : 'tags this -> GLenum.t) =
      fun (x14414 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14414) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : 'tags this -> GLenum.t) =
      fun (x14416 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14416) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : 'tags this -> GLenum.t) =
      fun (x14418 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14418) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : 'tags this -> GLenum.t) =
      fun (x14420 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14420) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : 'tags this -> GLenum.t) =
      fun (x14422 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14422)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x14424 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14424)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x14426 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14426)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : 'tags this -> GLenum.t)
      =
      fun (x14428 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14428)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : 'tags this -> GLenum.t)
      =
      fun (x14430 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14430)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x14432 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14432)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x14434 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14434)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x14436 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14436)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x14438 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14438)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : 'tags this -> GLenum.t) =
      fun (x14440 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14440)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : 'tags this -> GLenum.t) =
      fun (x14442 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14442)
             "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : 'tags this -> GLenum.t) =
      fun (x14444 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14444)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : 'tags this -> GLenum.t) =
      fun (x14446 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14446) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x14448 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14448)
             "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x14450 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14450)
             "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x14452 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14452) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14454 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14454)
             "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x14456 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14456) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x14458 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14458)
             "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : 'tags this -> GLenum.t) =
      fun (x14460 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14460) "INVALID_INDEX")
    let (get_MAX : 'tags this -> GLenum.t) =
      fun (x14462 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14462) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x14464 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14464)
             "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : 'tags this -> GLenum.t) =
      fun (x14466 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14466)
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : 'tags this -> GLenum.t) =
      fun (x14468 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14468)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : 'tags this -> GLenum.t) =
      fun (x14470 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14470)
             "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x14472 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14472)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x14474 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14474)
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t)
      =
      fun (x14476 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14476)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : 'tags this -> GLenum.t) =
      fun (x14478 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14478)
             "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : 'tags this -> GLenum.t) =
      fun (x14480 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14480)
             "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : 'tags this -> GLenum.t) =
      fun (x14482 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14482)
             "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : 'tags this -> GLenum.t) =
      fun (x14484 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14484)
             "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14486 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14486)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x14488 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14488)
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14490 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14490)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x14492 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14492)
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : 'tags this -> GLenum.t) =
      fun (x14494 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14494) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : 'tags this -> GLenum.t) =
      fun (x14496 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14496)
             "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : 'tags this -> GLenum.t) =
      fun (x14498 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14498)
             "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x14500 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14500)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
      'tags this -> GLenum.t) =
      fun (x14502 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14502)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x14504 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14504)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : 'tags this -> GLenum.t) =
      fun (x14506 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14506)
             "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : 'tags this -> GLenum.t) =
      fun (x14508 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14508)
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14510 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14510)
             "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14512 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14512)
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x14514 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14514)
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x14516 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14516)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : 'tags this -> GLenum.t) =
      fun (x14518 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14518) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x14520 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14520)
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x14522 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14522) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x14524 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14524) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x14526 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14526)
             "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x14528 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14528) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x14530 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14530)
             "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14532 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14532)
             "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x14534 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14534)
             "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14536 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14536)
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : 'tags this -> GLenum.t) =
      fun (x14538 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14538) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : 'tags this -> GLenum.t) =
      fun (x14540 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14540)
             "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : 'tags this -> GLenum.t) =
      fun (x14542 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14542) "R11F_G11F_B10F")
    let (get_R16F : 'tags this -> GLenum.t) =
      fun (x14544 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14544) "R16F")
    let (get_R16I : 'tags this -> GLenum.t) =
      fun (x14546 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14546) "R16I")
    let (get_R16UI : 'tags this -> GLenum.t) =
      fun (x14548 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14548) "R16UI")
    let (get_R32F : 'tags this -> GLenum.t) =
      fun (x14550 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14550) "R32F")
    let (get_R32I : 'tags this -> GLenum.t) =
      fun (x14552 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14552) "R32I")
    let (get_R32UI : 'tags this -> GLenum.t) =
      fun (x14554 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14554) "R32UI")
    let (get_R8 : 'tags this -> GLenum.t) =
      fun (x14556 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14556) "R8")
    let (get_R8I : 'tags this -> GLenum.t) =
      fun (x14558 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14558) "R8I")
    let (get_R8UI : 'tags this -> GLenum.t) =
      fun (x14560 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14560) "R8UI")
    let (get_R8_SNORM : 'tags this -> GLenum.t) =
      fun (x14562 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14562) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : 'tags this -> GLenum.t) =
      fun (x14564 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14564)
             "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x14566 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14566) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x14568 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14568)
             "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14570 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14570)
             "READ_FRAMEBUFFER_BINDING")
    let (get_RED : 'tags this -> GLenum.t) =
      fun (x14572 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14572) "RED")
    let (get_RED_INTEGER : 'tags this -> GLenum.t) =
      fun (x14574 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14574) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : 'tags this -> GLenum.t) =
      fun (x14576 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14576)
             "RENDERBUFFER_SAMPLES")
    let (get_RG : 'tags this -> GLenum.t) =
      fun (x14578 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14578) "RG")
    let (get_RG16F : 'tags this -> GLenum.t) =
      fun (x14580 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14580) "RG16F")
    let (get_RG16I : 'tags this -> GLenum.t) =
      fun (x14582 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14582) "RG16I")
    let (get_RG16UI : 'tags this -> GLenum.t) =
      fun (x14584 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14584) "RG16UI")
    let (get_RG32F : 'tags this -> GLenum.t) =
      fun (x14586 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14586) "RG32F")
    let (get_RG32I : 'tags this -> GLenum.t) =
      fun (x14588 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14588) "RG32I")
    let (get_RG32UI : 'tags this -> GLenum.t) =
      fun (x14590 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14590) "RG32UI")
    let (get_RG8 : 'tags this -> GLenum.t) =
      fun (x14592 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14592) "RG8")
    let (get_RG8I : 'tags this -> GLenum.t) =
      fun (x14594 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14594) "RG8I")
    let (get_RG8UI : 'tags this -> GLenum.t) =
      fun (x14596 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14596) "RG8UI")
    let (get_RG8_SNORM : 'tags this -> GLenum.t) =
      fun (x14598 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14598) "RG8_SNORM")
    let (get_RGB10_A2 : 'tags this -> GLenum.t) =
      fun (x14600 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14600) "RGB10_A2")
    let (get_RGB10_A2UI : 'tags this -> GLenum.t) =
      fun (x14602 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14602) "RGB10_A2UI")
    let (get_RGB16F : 'tags this -> GLenum.t) =
      fun (x14604 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14604) "RGB16F")
    let (get_RGB16I : 'tags this -> GLenum.t) =
      fun (x14606 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14606) "RGB16I")
    let (get_RGB16UI : 'tags this -> GLenum.t) =
      fun (x14608 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14608) "RGB16UI")
    let (get_RGB32F : 'tags this -> GLenum.t) =
      fun (x14610 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14610) "RGB32F")
    let (get_RGB32I : 'tags this -> GLenum.t) =
      fun (x14612 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14612) "RGB32I")
    let (get_RGB32UI : 'tags this -> GLenum.t) =
      fun (x14614 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14614) "RGB32UI")
    let (get_RGB8 : 'tags this -> GLenum.t) =
      fun (x14616 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14616) "RGB8")
    let (get_RGB8I : 'tags this -> GLenum.t) =
      fun (x14618 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14618) "RGB8I")
    let (get_RGB8UI : 'tags this -> GLenum.t) =
      fun (x14620 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14620) "RGB8UI")
    let (get_RGB8_SNORM : 'tags this -> GLenum.t) =
      fun (x14622 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14622) "RGB8_SNORM")
    let (get_RGB9_E5 : 'tags this -> GLenum.t) =
      fun (x14624 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14624) "RGB9_E5")
    let (get_RGBA16F : 'tags this -> GLenum.t) =
      fun (x14626 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14626) "RGBA16F")
    let (get_RGBA16I : 'tags this -> GLenum.t) =
      fun (x14628 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14628) "RGBA16I")
    let (get_RGBA16UI : 'tags this -> GLenum.t) =
      fun (x14630 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14630) "RGBA16UI")
    let (get_RGBA32F : 'tags this -> GLenum.t) =
      fun (x14632 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14632) "RGBA32F")
    let (get_RGBA32I : 'tags this -> GLenum.t) =
      fun (x14634 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14634) "RGBA32I")
    let (get_RGBA32UI : 'tags this -> GLenum.t) =
      fun (x14636 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14636) "RGBA32UI")
    let (get_RGBA8 : 'tags this -> GLenum.t) =
      fun (x14638 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14638) "RGBA8")
    let (get_RGBA8I : 'tags this -> GLenum.t) =
      fun (x14640 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14640) "RGBA8I")
    let (get_RGBA8UI : 'tags this -> GLenum.t) =
      fun (x14642 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14642) "RGBA8UI")
    let (get_RGBA8_SNORM : 'tags this -> GLenum.t) =
      fun (x14644 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14644) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : 'tags this -> GLenum.t) =
      fun (x14646 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14646) "RGBA_INTEGER")
    let (get_RGB_INTEGER : 'tags this -> GLenum.t) =
      fun (x14648 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14648) "RGB_INTEGER")
    let (get_RG_INTEGER : 'tags this -> GLenum.t) =
      fun (x14650 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14650) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14652 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14652)
             "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : 'tags this -> GLenum.t) =
      fun (x14654 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14654)
             "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : 'tags this -> GLenum.t) =
      fun (x14656 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14656)
             "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x14658 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14658) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : 'tags this -> GLenum.t) =
      fun (x14660 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14660) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : 'tags this -> GLenum.t) =
      fun (x14662 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14662)
             "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x14664 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14664)
             "SEPARATE_ATTRIBS")
    let (get_SIGNALED : 'tags this -> GLenum.t) =
      fun (x14666 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14666) "SIGNALED")
    let (get_SIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x14668 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14668)
             "SIGNED_NORMALIZED")
    let (get_SRGB : 'tags this -> GLenum.t) =
      fun (x14670 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14670) "SRGB")
    let (get_SRGB8 : 'tags this -> GLenum.t) =
      fun (x14672 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14672) "SRGB8")
    let (get_SRGB8_ALPHA8 : 'tags this -> GLenum.t) =
      fun (x14674 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14674) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : 'tags this -> GLenum.t) =
      fun (x14676 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14676) "STATIC_COPY")
    let (get_STATIC_READ : 'tags this -> GLenum.t) =
      fun (x14678 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14678) "STATIC_READ")
    let (get_STENCIL : 'tags this -> GLenum.t) =
      fun (x14680 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14680) "STENCIL")
    let (get_STREAM_COPY : 'tags this -> GLenum.t) =
      fun (x14682 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14682) "STREAM_COPY")
    let (get_STREAM_READ : 'tags this -> GLenum.t) =
      fun (x14684 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14684) "STREAM_READ")
    let (get_SYNC_CONDITION : 'tags this -> GLenum.t) =
      fun (x14686 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14686) "SYNC_CONDITION")
    let (get_SYNC_FENCE : 'tags this -> GLenum.t) =
      fun (x14688 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14688) "SYNC_FENCE")
    let (get_SYNC_FLAGS : 'tags this -> GLenum.t) =
      fun (x14690 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14690) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : 'tags this -> GLenum.t) =
      fun (x14692 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14692)
             "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : 'tags this -> GLenum.t) =
      fun (x14694 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14694)
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : 'tags this -> GLenum.t) =
      fun (x14696 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14696) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14698 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14698)
             "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : 'tags this -> GLenum.t) =
      fun (x14700 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14700) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : 'tags this -> GLenum.t) =
      fun (x14702 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14702)
             "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14704 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14704)
             "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : 'tags this -> GLenum.t) =
      fun (x14706 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14706)
             "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : 'tags this -> GLenum.t) =
      fun (x14708 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14708)
             "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : 'tags this -> GLenum.t) =
      fun (x14710 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14710)
             "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : 'tags this -> GLenum.t) =
      fun (x14712 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14712)
             "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : 'tags this -> GLenum.t) =
      fun (x14714 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14714)
             "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : 'tags this -> GLenum.t) =
      fun (x14716 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14716)
             "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : 'tags this -> GLenum.t) =
      fun (x14718 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14718) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : 'tags this -> GLenum.t) =
      fun (x14720 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14720) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : 'tags this -> GLenum.t) =
      fun (x14722 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14722) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : 'tags this -> GLenum.t) =
      fun (x14724 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14724) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : 'tags this -> GLint64.t) =
      fun (x14726 : 'tags this) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14726) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : 'tags this -> GLenum.t) =
      fun (x14728 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14728)
             "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : 'tags this -> GLenum.t) =
      fun (x14730 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14730)
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : 'tags this -> GLenum.t) =
      fun (x14732 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14732)
             "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x14734 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14734)
             "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14736 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14736)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : 'tags this -> GLenum.t) =
      fun (x14738 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14738)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x14740 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14740)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x14742 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14742)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : 'tags this -> GLenum.t) =
      fun (x14744 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14744)
             "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : 'tags this -> GLenum.t)
      =
      fun (x14746 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14746)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : 'tags this -> GLenum.t) =
      fun (x14748 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14748)
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x14750 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14750)
             "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x14752 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14752)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : 'tags this -> GLenum.t) =
      fun (x14754 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14754)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : 'tags this -> GLenum.t) =
      fun (x14756 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14756)
             "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : 'tags this -> GLenum.t) =
      fun (x14758 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14758)
             "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : 'tags this -> GLenum.t) =
      fun (x14760 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14760)
             "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :
      'tags this -> GLenum.t) =
      fun (x14762 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14762)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
      'tags this -> GLenum.t) =
      fun (x14764 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14764)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : 'tags this -> GLenum.t) =
      fun (x14766 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14766) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x14768 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14768)
             "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x14770 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14770)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x14772 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14772)
             "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x14774 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14774)
             "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : 'tags this -> GLenum.t) =
      fun (x14776 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14776)
             "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : 'tags this -> GLenum.t) =
      fun (x14778 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14778)
             "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : 'tags this -> GLenum.t) =
      fun (x14780 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14780) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : 'tags this -> GLenum.t) =
      fun (x14782 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14782) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : 'tags this -> GLenum.t) =
      fun (x14784 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14784) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : 'tags this -> GLenum.t) =
      fun (x14786 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14786)
             "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x14788 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14788)
             "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : 'tags this -> GLenum.t) =
      fun (x14790 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14790)
             "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x14792 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14792)
             "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x14794 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14794)
             "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : 'tags this -> GLenum.t) =
      fun (x14796 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14796) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : 'tags this -> GLenum.t) =
      fun (x14798 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14798)
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : 'tags this -> GLenum.t) =
      fun (x14800 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14800)
             "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x14802 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14802)
             "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : 'tags this -> GLenum.t) =
      fun (x14804 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14804)
             "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x14806 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14806)
             "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x14808 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14808)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x14810 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14810)
             "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x14812 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14812)
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x14814 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14814)
             "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x14816 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14816)
             "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x14818 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14818)
             "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x14820 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14820)
             "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : 'tags this -> GLenum.t) =
      fun (x14822 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14822)
             "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : 'tags this -> GLenum.t) =
      fun (x14824 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14824)
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : 'tags this -> GLenum.t) =
      fun (x14826 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14826)
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : 'tags this -> GLenum.t) =
      fun (x14828 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14828) "WAIT_FAILED")
    let (clearBufferfv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x14837 : 'tags this) ->
        fun ~buffer:(x14830 : GLenum.t) ->
          fun ~drawbuffer:(x14831 : GLint.t) ->
            fun ~values:(x14832 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14833 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14839 = this_to_js Obj.magic x14837 in
                     Ojs.call (Ojs.get_prop_ascii x14839 "clearBufferfv")
                       "apply"
                       [|x14839;((let x14834 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14834 "push"
                                       [|(GLenum.t_to_js x14830)|]);
                                  ignore
                                    (Ojs.call x14834 "push"
                                       [|(GLint.t_to_js x14831)|]);
                                  ignore
                                    (Ojs.call x14834 "push"
                                       [|(Iterable.t_1_to_js GLfloat.t_to_js
                                            x14832)|]);
                                  (match x14833 with
                                   | Some x14835 ->
                                       ignore
                                         (Ojs.call x14834 "push"
                                            [|(GLuint.t_to_js x14835)|])
                                   | None -> ());
                                  x14834))|])
    let (clearBufferiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x14847 : 'tags this) ->
        fun ~buffer:(x14840 : GLenum.t) ->
          fun ~drawbuffer:(x14841 : GLint.t) ->
            fun ~values:(x14842 : GLint.t Iterable.t_1) ->
              fun ?srcOffset:(x14843 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14849 = this_to_js Obj.magic x14847 in
                     Ojs.call (Ojs.get_prop_ascii x14849 "clearBufferiv")
                       "apply"
                       [|x14849;((let x14844 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14844 "push"
                                       [|(GLenum.t_to_js x14840)|]);
                                  ignore
                                    (Ojs.call x14844 "push"
                                       [|(GLint.t_to_js x14841)|]);
                                  ignore
                                    (Ojs.call x14844 "push"
                                       [|(Iterable.t_1_to_js GLint.t_to_js
                                            x14842)|]);
                                  (match x14843 with
                                   | Some x14845 ->
                                       ignore
                                         (Ojs.call x14844 "push"
                                            [|(GLuint.t_to_js x14845)|])
                                   | None -> ());
                                  x14844))|])
    let (clearBufferuiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLuint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x14857 : 'tags this) ->
        fun ~buffer:(x14850 : GLenum.t) ->
          fun ~drawbuffer:(x14851 : GLint.t) ->
            fun ~values:(x14852 : GLuint.t Iterable.t_1) ->
              fun ?srcOffset:(x14853 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14859 = this_to_js Obj.magic x14857 in
                     Ojs.call (Ojs.get_prop_ascii x14859 "clearBufferuiv")
                       "apply"
                       [|x14859;((let x14854 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14854 "push"
                                       [|(GLenum.t_to_js x14850)|]);
                                  ignore
                                    (Ojs.call x14854 "push"
                                       [|(GLint.t_to_js x14851)|]);
                                  ignore
                                    (Ojs.call x14854 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14852)|]);
                                  (match x14853 with
                                   | Some x14855 ->
                                       ignore
                                         (Ojs.call x14854 "push"
                                            [|(GLuint.t_to_js x14855)|])
                                   | None -> ());
                                  x14854))|])
    let (drawBuffers' : 'tags this -> buffers:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x14862 : 'tags this) ->
        fun ~buffers:(x14860 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14862) "drawBuffers"
               [|(Iterable.t_1_to_js GLenum.t_to_js x14860)|])
    let (getActiveUniforms' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t Iterable.t_1 -> pname:GLenum.t -> any)
      =
      fun (x14868 : 'tags this) ->
        fun ~program:(x14864 : WebGLProgram.t) ->
          fun ~uniformIndices:(x14865 : GLuint.t Iterable.t_1) ->
            fun ~pname:(x14867 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x14868) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x14864);(Iterable.t_1_to_js
                                                      GLuint.t_to_js x14865);(
                     GLenum.t_to_js x14867)|])
    let (getUniformIndices' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string Iterable.t_1 -> GLuint.t Iterable.t_1 or_null)
      =
      fun (x14873 : 'tags this) ->
        fun ~program:(x14870 : WebGLProgram.t) ->
          fun ~uniformNames:(x14871 : string Iterable.t_1) ->
            or_null_of_js
              (fun (x14875 : Ojs.t) ->
                 Iterable.t_1_of_js GLuint.t_of_js x14875)
              (Ojs.call (this_to_js Obj.magic x14873) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x14870);(Iterable.t_1_to_js
                                                    Ojs.string_to_js x14871)|])
    let (invalidateFramebuffer' :
      'tags this ->
        target:GLenum.t -> attachments:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x14880 : 'tags this) ->
        fun ~target:(x14877 : GLenum.t) ->
          fun ~attachments:(x14878 : GLenum.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14880) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x14877);(Iterable.t_1_to_js GLenum.t_to_js
                                              x14878)|])
    let (invalidateSubFramebuffer' :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t Iterable.t_1 ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x14889 : 'tags this) ->
        fun ~target:(x14882 : GLenum.t) ->
          fun ~attachments:(x14883 : GLenum.t Iterable.t_1) ->
            fun ~x:(x14885 : GLint.t) ->
              fun ~y:(x14886 : GLint.t) ->
                fun ~width:(x14887 : GLsizei.t) ->
                  fun ~height:(x14888 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x14889)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x14882);(Iterable.t_1_to_js
                                                      GLenum.t_to_js x14883);(
                           GLint.t_to_js x14885);(GLint.t_to_js x14886);(
                           GLsizei.t_to_js x14887);(GLsizei.t_to_js x14888)|])
    let (transformFeedbackVaryings' :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string Iterable.t_1 -> bufferMode:GLenum.t -> unit)
      =
      fun (x14895 : 'tags this) ->
        fun ~program:(x14891 : WebGLProgram.t) ->
          fun ~varyings:(x14892 : string Iterable.t_1) ->
            fun ~bufferMode:(x14894 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x14895)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x14891);(Iterable.t_1_to_js
                                                      Ojs.string_to_js x14892);(
                     GLenum.t_to_js x14894)|])
    let (uniform1uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14906 : 'tags this) ->
        fun ~location:(x14897 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14898 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x14899 : GLuint.t option) ->
              fun ?srcLength:(x14900 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14908 = this_to_js Obj.magic x14906 in
                     Ojs.call (Ojs.get_prop_ascii x14908 "uniform1uiv")
                       "apply"
                       [|x14908;((let x14901 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14901 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14897)|]);
                                  ignore
                                    (Ojs.call x14901 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14898)|]);
                                  (match x14899 with
                                   | Some x14903 ->
                                       ignore
                                         (Ojs.call x14901 "push"
                                            [|(GLuint.t_to_js x14903)|])
                                   | None -> ());
                                  (match x14900 with
                                   | Some x14902 ->
                                       ignore
                                         (Ojs.call x14901 "push"
                                            [|(GLuint.t_to_js x14902)|])
                                   | None -> ());
                                  x14901))|])
    let (uniform2uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14918 : 'tags this) ->
        fun ~location:(x14909 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14910 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x14911 : GLuint.t option) ->
              fun ?srcLength:(x14912 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14920 = this_to_js Obj.magic x14918 in
                     Ojs.call (Ojs.get_prop_ascii x14920 "uniform2uiv")
                       "apply"
                       [|x14920;((let x14913 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14913 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14909)|]);
                                  ignore
                                    (Ojs.call x14913 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14910)|]);
                                  (match x14911 with
                                   | Some x14915 ->
                                       ignore
                                         (Ojs.call x14913 "push"
                                            [|(GLuint.t_to_js x14915)|])
                                   | None -> ());
                                  (match x14912 with
                                   | Some x14914 ->
                                       ignore
                                         (Ojs.call x14913 "push"
                                            [|(GLuint.t_to_js x14914)|])
                                   | None -> ());
                                  x14913))|])
    let (uniform3uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14930 : 'tags this) ->
        fun ~location:(x14921 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14922 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x14923 : GLuint.t option) ->
              fun ?srcLength:(x14924 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14932 = this_to_js Obj.magic x14930 in
                     Ojs.call (Ojs.get_prop_ascii x14932 "uniform3uiv")
                       "apply"
                       [|x14932;((let x14925 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14925 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14921)|]);
                                  ignore
                                    (Ojs.call x14925 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14922)|]);
                                  (match x14923 with
                                   | Some x14927 ->
                                       ignore
                                         (Ojs.call x14925 "push"
                                            [|(GLuint.t_to_js x14927)|])
                                   | None -> ());
                                  (match x14924 with
                                   | Some x14926 ->
                                       ignore
                                         (Ojs.call x14925 "push"
                                            [|(GLuint.t_to_js x14926)|])
                                   | None -> ());
                                  x14925))|])
    let (uniform4uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14942 : 'tags this) ->
        fun ~location:(x14933 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x14934 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x14935 : GLuint.t option) ->
              fun ?srcLength:(x14936 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x14944 = this_to_js Obj.magic x14942 in
                     Ojs.call (Ojs.get_prop_ascii x14944 "uniform4uiv")
                       "apply"
                       [|x14944;((let x14937 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14937 "push"
                                       [|(or_null_to_js
                                            WebGLUniformLocation.t_to_js
                                            x14933)|]);
                                  ignore
                                    (Ojs.call x14937 "push"
                                       [|(Iterable.t_1_to_js GLuint.t_to_js
                                            x14934)|]);
                                  (match x14935 with
                                   | Some x14939 ->
                                       ignore
                                         (Ojs.call x14937 "push"
                                            [|(GLuint.t_to_js x14939)|])
                                   | None -> ());
                                  (match x14936 with
                                   | Some x14938 ->
                                       ignore
                                         (Ojs.call x14937 "push"
                                            [|(GLuint.t_to_js x14938)|])
                                   | None -> ());
                                  x14937))|])
    let (uniformMatrix2x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14955 : 'tags this) ->
        fun ~location:(x14945 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14946 : GLboolean.t) ->
            fun ~data:(x14947 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14948 : GLuint.t option) ->
                fun ?srcLength:(x14949 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14957 = this_to_js Obj.magic x14955 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14957 "uniformMatrix2x3fv")
                         "apply"
                         [|x14957;((let x14950 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14950 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14945)|]);
                                    ignore
                                      (Ojs.call x14950 "push"
                                         [|(GLboolean.t_to_js x14946)|]);
                                    ignore
                                      (Ojs.call x14950 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14947)|]);
                                    (match x14948 with
                                     | Some x14952 ->
                                         ignore
                                           (Ojs.call x14950 "push"
                                              [|(GLuint.t_to_js x14952)|])
                                     | None -> ());
                                    (match x14949 with
                                     | Some x14951 ->
                                         ignore
                                           (Ojs.call x14950 "push"
                                              [|(GLuint.t_to_js x14951)|])
                                     | None -> ());
                                    x14950))|])
    let (uniformMatrix2x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14968 : 'tags this) ->
        fun ~location:(x14958 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14959 : GLboolean.t) ->
            fun ~data:(x14960 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14961 : GLuint.t option) ->
                fun ?srcLength:(x14962 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14970 = this_to_js Obj.magic x14968 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14970 "uniformMatrix2x4fv")
                         "apply"
                         [|x14970;((let x14963 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14963 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14958)|]);
                                    ignore
                                      (Ojs.call x14963 "push"
                                         [|(GLboolean.t_to_js x14959)|]);
                                    ignore
                                      (Ojs.call x14963 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14960)|]);
                                    (match x14961 with
                                     | Some x14965 ->
                                         ignore
                                           (Ojs.call x14963 "push"
                                              [|(GLuint.t_to_js x14965)|])
                                     | None -> ());
                                    (match x14962 with
                                     | Some x14964 ->
                                         ignore
                                           (Ojs.call x14963 "push"
                                              [|(GLuint.t_to_js x14964)|])
                                     | None -> ());
                                    x14963))|])
    let (uniformMatrix3x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14981 : 'tags this) ->
        fun ~location:(x14971 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14972 : GLboolean.t) ->
            fun ~data:(x14973 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14974 : GLuint.t option) ->
                fun ?srcLength:(x14975 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14983 = this_to_js Obj.magic x14981 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14983 "uniformMatrix3x2fv")
                         "apply"
                         [|x14983;((let x14976 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14976 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14971)|]);
                                    ignore
                                      (Ojs.call x14976 "push"
                                         [|(GLboolean.t_to_js x14972)|]);
                                    ignore
                                      (Ojs.call x14976 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14973)|]);
                                    (match x14974 with
                                     | Some x14978 ->
                                         ignore
                                           (Ojs.call x14976 "push"
                                              [|(GLuint.t_to_js x14978)|])
                                     | None -> ());
                                    (match x14975 with
                                     | Some x14977 ->
                                         ignore
                                           (Ojs.call x14976 "push"
                                              [|(GLuint.t_to_js x14977)|])
                                     | None -> ());
                                    x14976))|])
    let (uniformMatrix3x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x14994 : 'tags this) ->
        fun ~location:(x14984 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14985 : GLboolean.t) ->
            fun ~data:(x14986 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x14987 : GLuint.t option) ->
                fun ?srcLength:(x14988 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x14996 = this_to_js Obj.magic x14994 in
                       Ojs.call
                         (Ojs.get_prop_ascii x14996 "uniformMatrix3x4fv")
                         "apply"
                         [|x14996;((let x14989 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x14989 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14984)|]);
                                    ignore
                                      (Ojs.call x14989 "push"
                                         [|(GLboolean.t_to_js x14985)|]);
                                    ignore
                                      (Ojs.call x14989 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14986)|]);
                                    (match x14987 with
                                     | Some x14991 ->
                                         ignore
                                           (Ojs.call x14989 "push"
                                              [|(GLuint.t_to_js x14991)|])
                                     | None -> ());
                                    (match x14988 with
                                     | Some x14990 ->
                                         ignore
                                           (Ojs.call x14989 "push"
                                              [|(GLuint.t_to_js x14990)|])
                                     | None -> ());
                                    x14989))|])
    let (uniformMatrix4x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x15007 : 'tags this) ->
        fun ~location:(x14997 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x14998 : GLboolean.t) ->
            fun ~data:(x14999 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x15000 : GLuint.t option) ->
                fun ?srcLength:(x15001 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x15009 = this_to_js Obj.magic x15007 in
                       Ojs.call
                         (Ojs.get_prop_ascii x15009 "uniformMatrix4x2fv")
                         "apply"
                         [|x15009;((let x15002 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x15002 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x14997)|]);
                                    ignore
                                      (Ojs.call x15002 "push"
                                         [|(GLboolean.t_to_js x14998)|]);
                                    ignore
                                      (Ojs.call x15002 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x14999)|]);
                                    (match x15000 with
                                     | Some x15004 ->
                                         ignore
                                           (Ojs.call x15002 "push"
                                              [|(GLuint.t_to_js x15004)|])
                                     | None -> ());
                                    (match x15001 with
                                     | Some x15003 ->
                                         ignore
                                           (Ojs.call x15002 "push"
                                              [|(GLuint.t_to_js x15003)|])
                                     | None -> ());
                                    x15002))|])
    let (uniformMatrix4x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x15020 : 'tags this) ->
        fun ~location:(x15010 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x15011 : GLboolean.t) ->
            fun ~data:(x15012 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x15013 : GLuint.t option) ->
                fun ?srcLength:(x15014 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x15022 = this_to_js Obj.magic x15020 in
                       Ojs.call
                         (Ojs.get_prop_ascii x15022 "uniformMatrix4x3fv")
                         "apply"
                         [|x15022;((let x15015 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x15015 "push"
                                         [|(or_null_to_js
                                              WebGLUniformLocation.t_to_js
                                              x15010)|]);
                                    ignore
                                      (Ojs.call x15015 "push"
                                         [|(GLboolean.t_to_js x15011)|]);
                                    ignore
                                      (Ojs.call x15015 "push"
                                         [|(Iterable.t_1_to_js
                                              GLfloat.t_to_js x15012)|]);
                                    (match x15013 with
                                     | Some x15017 ->
                                         ignore
                                           (Ojs.call x15015 "push"
                                              [|(GLuint.t_to_js x15017)|])
                                     | None -> ());
                                    (match x15014 with
                                     | Some x15016 ->
                                         ignore
                                           (Ojs.call x15015 "push"
                                              [|(GLuint.t_to_js x15016)|])
                                     | None -> ());
                                    x15015))|])
    let (vertexAttribI4iv' :
      'tags this -> index:GLuint.t -> values:GLint.t Iterable.t_1 -> unit) =
      fun (x15026 : 'tags this) ->
        fun ~index:(x15023 : GLuint.t) ->
          fun ~values:(x15024 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x15026) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x15023);(Iterable.t_1_to_js GLint.t_to_js
                                              x15024)|])
    let (vertexAttribI4uiv' :
      'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t_1 -> unit) =
      fun (x15031 : 'tags this) ->
        fun ~index:(x15028 : GLuint.t) ->
          fun ~values:(x15029 : GLuint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x15031) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x15028);(Iterable.t_1_to_js GLuint.t_to_js
                                              x15029)|])
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface111:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebGL2RenderingContext.t
                          val set_prototype :
                            t -> WebGL2RenderingContext.t -> unit
                          val create : t -> WebGL2RenderingContext.t
                          val get_ACTIVE_UNIFORM_BLOCKS : t -> GLenum.t
                          val get_ALREADY_SIGNALED : t -> GLenum.t
                          val get_ANY_SAMPLES_PASSED : t -> GLenum.t
                          val get_ANY_SAMPLES_PASSED_CONSERVATIVE :
                            t -> GLenum.t
                          val get_COLOR : t -> GLenum.t
                          val get_COLOR_ATTACHMENT1 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT10 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT11 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT12 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT13 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT14 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT15 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT2 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT3 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT4 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT5 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT6 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT7 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT8 : t -> GLenum.t
                          val get_COLOR_ATTACHMENT9 : t -> GLenum.t
                          val get_COMPARE_REF_TO_TEXTURE : t -> GLenum.t
                          val get_CONDITION_SATISFIED : t -> GLenum.t
                          val get_COPY_READ_BUFFER : t -> GLenum.t
                          val get_COPY_READ_BUFFER_BINDING : t -> GLenum.t
                          val get_COPY_WRITE_BUFFER : t -> GLenum.t
                          val get_COPY_WRITE_BUFFER_BINDING : t -> GLenum.t
                          val get_CURRENT_QUERY : t -> GLenum.t
                          val get_DEPTH : t -> GLenum.t
                          val get_DEPTH24_STENCIL8 : t -> GLenum.t
                          val get_DEPTH32F_STENCIL8 : t -> GLenum.t
                          val get_DEPTH_COMPONENT24 : t -> GLenum.t
                          val get_DEPTH_COMPONENT32F : t -> GLenum.t
                          val get_DRAW_BUFFER0 : t -> GLenum.t
                          val get_DRAW_BUFFER1 : t -> GLenum.t
                          val get_DRAW_BUFFER10 : t -> GLenum.t
                          val get_DRAW_BUFFER11 : t -> GLenum.t
                          val get_DRAW_BUFFER12 : t -> GLenum.t
                          val get_DRAW_BUFFER13 : t -> GLenum.t
                          val get_DRAW_BUFFER14 : t -> GLenum.t
                          val get_DRAW_BUFFER15 : t -> GLenum.t
                          val get_DRAW_BUFFER2 : t -> GLenum.t
                          val get_DRAW_BUFFER3 : t -> GLenum.t
                          val get_DRAW_BUFFER4 : t -> GLenum.t
                          val get_DRAW_BUFFER5 : t -> GLenum.t
                          val get_DRAW_BUFFER6 : t -> GLenum.t
                          val get_DRAW_BUFFER7 : t -> GLenum.t
                          val get_DRAW_BUFFER8 : t -> GLenum.t
                          val get_DRAW_BUFFER9 : t -> GLenum.t
                          val get_DRAW_FRAMEBUFFER : t -> GLenum.t
                          val get_DRAW_FRAMEBUFFER_BINDING : t -> GLenum.t
                          val get_DYNAMIC_COPY : t -> GLenum.t
                          val get_DYNAMIC_READ : t -> GLenum.t
                          val get_FLOAT_32_UNSIGNED_INT_24_8_REV :
                            t -> GLenum.t
                          val get_FLOAT_MAT2x3 : t -> GLenum.t
                          val get_FLOAT_MAT2x4 : t -> GLenum.t
                          val get_FLOAT_MAT3x2 : t -> GLenum.t
                          val get_FLOAT_MAT3x4 : t -> GLenum.t
                          val get_FLOAT_MAT4x2 : t -> GLenum.t
                          val get_FLOAT_MAT4x3 : t -> GLenum.t
                          val get_FRAGMENT_SHADER_DERIVATIVE_HINT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_RED_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_DEFAULT : t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :
                            t -> GLenum.t
                          val get_HALF_FLOAT : t -> GLenum.t
                          val get_INTERLEAVED_ATTRIBS : t -> GLenum.t
                          val get_INT_2_10_10_10_REV : t -> GLenum.t
                          val get_INT_SAMPLER_2D : t -> GLenum.t
                          val get_INT_SAMPLER_2D_ARRAY : t -> GLenum.t
                          val get_INT_SAMPLER_3D : t -> GLenum.t
                          val get_INT_SAMPLER_CUBE : t -> GLenum.t
                          val get_INVALID_INDEX : t -> GLenum.t
                          val get_MAX : t -> GLenum.t
                          val get_MAX_3D_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_ARRAY_TEXTURE_LAYERS : t -> GLenum.t
                          val get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL :
                            t -> GLenum.t
                          val get_MAX_COLOR_ATTACHMENTS : t -> GLenum.t
                          val get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_COMBINED_UNIFORM_BLOCKS : t -> GLenum.t
                          val get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_DRAW_BUFFERS : t -> GLenum.t
                          val get_MAX_ELEMENTS_INDICES : t -> GLenum.t
                          val get_MAX_ELEMENTS_VERTICES : t -> GLenum.t
                          val get_MAX_ELEMENT_INDEX : t -> GLenum.t
                          val get_MAX_FRAGMENT_INPUT_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_FRAGMENT_UNIFORM_BLOCKS : t -> GLenum.t
                          val get_MAX_FRAGMENT_UNIFORM_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_PROGRAM_TEXEL_OFFSET : t -> GLenum.t
                          val get_MAX_SAMPLES : t -> GLenum.t
                          val get_MAX_SERVER_WAIT_TIMEOUT : t -> GLenum.t
                          val get_MAX_TEXTURE_LOD_BIAS : t -> GLenum.t
                          val
                            get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
                            : t -> GLenum.t
                          val get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
                            t -> GLenum.t
                          val get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
                            : t -> GLenum.t
                          val get_MAX_UNIFORM_BLOCK_SIZE : t -> GLenum.t
                          val get_MAX_UNIFORM_BUFFER_BINDINGS : t -> GLenum.t
                          val get_MAX_VARYING_COMPONENTS : t -> GLenum.t
                          val get_MAX_VERTEX_OUTPUT_COMPONENTS :
                            t -> GLenum.t
                          val get_MAX_VERTEX_UNIFORM_BLOCKS : t -> GLenum.t
                          val get_MAX_VERTEX_UNIFORM_COMPONENTS :
                            t -> GLenum.t
                          val get_MIN : t -> GLenum.t
                          val get_MIN_PROGRAM_TEXEL_OFFSET : t -> GLenum.t
                          val get_OBJECT_TYPE : t -> GLenum.t
                          val get_PACK_ROW_LENGTH : t -> GLenum.t
                          val get_PACK_SKIP_PIXELS : t -> GLenum.t
                          val get_PACK_SKIP_ROWS : t -> GLenum.t
                          val get_PIXEL_PACK_BUFFER : t -> GLenum.t
                          val get_PIXEL_PACK_BUFFER_BINDING : t -> GLenum.t
                          val get_PIXEL_UNPACK_BUFFER : t -> GLenum.t
                          val get_PIXEL_UNPACK_BUFFER_BINDING : t -> GLenum.t
                          val get_QUERY_RESULT : t -> GLenum.t
                          val get_QUERY_RESULT_AVAILABLE : t -> GLenum.t
                          val get_R11F_G11F_B10F : t -> GLenum.t
                          val get_R16F : t -> GLenum.t
                          val get_R16I : t -> GLenum.t
                          val get_R16UI : t -> GLenum.t
                          val get_R32F : t -> GLenum.t
                          val get_R32I : t -> GLenum.t
                          val get_R32UI : t -> GLenum.t
                          val get_R8 : t -> GLenum.t
                          val get_R8I : t -> GLenum.t
                          val get_R8UI : t -> GLenum.t
                          val get_R8_SNORM : t -> GLenum.t
                          val get_RASTERIZER_DISCARD : t -> GLenum.t
                          val get_READ_BUFFER : t -> GLenum.t
                          val get_READ_FRAMEBUFFER : t -> GLenum.t
                          val get_READ_FRAMEBUFFER_BINDING : t -> GLenum.t
                          val get_RED : t -> GLenum.t
                          val get_RED_INTEGER : t -> GLenum.t
                          val get_RENDERBUFFER_SAMPLES : t -> GLenum.t
                          val get_RG : t -> GLenum.t
                          val get_RG16F : t -> GLenum.t
                          val get_RG16I : t -> GLenum.t
                          val get_RG16UI : t -> GLenum.t
                          val get_RG32F : t -> GLenum.t
                          val get_RG32I : t -> GLenum.t
                          val get_RG32UI : t -> GLenum.t
                          val get_RG8 : t -> GLenum.t
                          val get_RG8I : t -> GLenum.t
                          val get_RG8UI : t -> GLenum.t
                          val get_RG8_SNORM : t -> GLenum.t
                          val get_RGB10_A2 : t -> GLenum.t
                          val get_RGB10_A2UI : t -> GLenum.t
                          val get_RGB16F : t -> GLenum.t
                          val get_RGB16I : t -> GLenum.t
                          val get_RGB16UI : t -> GLenum.t
                          val get_RGB32F : t -> GLenum.t
                          val get_RGB32I : t -> GLenum.t
                          val get_RGB32UI : t -> GLenum.t
                          val get_RGB8 : t -> GLenum.t
                          val get_RGB8I : t -> GLenum.t
                          val get_RGB8UI : t -> GLenum.t
                          val get_RGB8_SNORM : t -> GLenum.t
                          val get_RGB9_E5 : t -> GLenum.t
                          val get_RGBA16F : t -> GLenum.t
                          val get_RGBA16I : t -> GLenum.t
                          val get_RGBA16UI : t -> GLenum.t
                          val get_RGBA32F : t -> GLenum.t
                          val get_RGBA32I : t -> GLenum.t
                          val get_RGBA32UI : t -> GLenum.t
                          val get_RGBA8 : t -> GLenum.t
                          val get_RGBA8I : t -> GLenum.t
                          val get_RGBA8UI : t -> GLenum.t
                          val get_RGBA8_SNORM : t -> GLenum.t
                          val get_RGBA_INTEGER : t -> GLenum.t
                          val get_RGB_INTEGER : t -> GLenum.t
                          val get_RG_INTEGER : t -> GLenum.t
                          val get_SAMPLER_2D_ARRAY : t -> GLenum.t
                          val get_SAMPLER_2D_ARRAY_SHADOW : t -> GLenum.t
                          val get_SAMPLER_2D_SHADOW : t -> GLenum.t
                          val get_SAMPLER_3D : t -> GLenum.t
                          val get_SAMPLER_BINDING : t -> GLenum.t
                          val get_SAMPLER_CUBE_SHADOW : t -> GLenum.t
                          val get_SEPARATE_ATTRIBS : t -> GLenum.t
                          val get_SIGNALED : t -> GLenum.t
                          val get_SIGNED_NORMALIZED : t -> GLenum.t
                          val get_SRGB : t -> GLenum.t
                          val get_SRGB8 : t -> GLenum.t
                          val get_SRGB8_ALPHA8 : t -> GLenum.t
                          val get_STATIC_COPY : t -> GLenum.t
                          val get_STATIC_READ : t -> GLenum.t
                          val get_STENCIL : t -> GLenum.t
                          val get_STREAM_COPY : t -> GLenum.t
                          val get_STREAM_READ : t -> GLenum.t
                          val get_SYNC_CONDITION : t -> GLenum.t
                          val get_SYNC_FENCE : t -> GLenum.t
                          val get_SYNC_FLAGS : t -> GLenum.t
                          val get_SYNC_FLUSH_COMMANDS_BIT : t -> GLenum.t
                          val get_SYNC_GPU_COMMANDS_COMPLETE : t -> GLenum.t
                          val get_SYNC_STATUS : t -> GLenum.t
                          val get_TEXTURE_2D_ARRAY : t -> GLenum.t
                          val get_TEXTURE_3D : t -> GLenum.t
                          val get_TEXTURE_BASE_LEVEL : t -> GLenum.t
                          val get_TEXTURE_BINDING_2D_ARRAY : t -> GLenum.t
                          val get_TEXTURE_BINDING_3D : t -> GLenum.t
                          val get_TEXTURE_COMPARE_FUNC : t -> GLenum.t
                          val get_TEXTURE_COMPARE_MODE : t -> GLenum.t
                          val get_TEXTURE_IMMUTABLE_FORMAT : t -> GLenum.t
                          val get_TEXTURE_IMMUTABLE_LEVELS : t -> GLenum.t
                          val get_TEXTURE_MAX_LEVEL : t -> GLenum.t
                          val get_TEXTURE_MAX_LOD : t -> GLenum.t
                          val get_TEXTURE_MIN_LOD : t -> GLenum.t
                          val get_TEXTURE_WRAP_R : t -> GLenum.t
                          val get_TIMEOUT_EXPIRED : t -> GLenum.t
                          val get_TIMEOUT_IGNORED : t -> GLint64.t
                          val get_TRANSFORM_FEEDBACK : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_ACTIVE : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BINDING : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER_MODE :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER_SIZE :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_BUFFER_START :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_PAUSED : t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :
                            t -> GLenum.t
                          val get_TRANSFORM_FEEDBACK_VARYINGS : t -> GLenum.t
                          val get_UNIFORM_ARRAY_STRIDE : t -> GLenum.t
                          val get_UNIFORM_BLOCK_ACTIVE_UNIFORMS :
                            t -> GLenum.t
                          val get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :
                            t -> GLenum.t
                          val get_UNIFORM_BLOCK_BINDING : t -> GLenum.t
                          val get_UNIFORM_BLOCK_DATA_SIZE : t -> GLenum.t
                          val get_UNIFORM_BLOCK_INDEX : t -> GLenum.t
                          val get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
                            : t -> GLenum.t
                          val get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
                            t -> GLenum.t
                          val get_UNIFORM_BUFFER : t -> GLenum.t
                          val get_UNIFORM_BUFFER_BINDING : t -> GLenum.t
                          val get_UNIFORM_BUFFER_OFFSET_ALIGNMENT :
                            t -> GLenum.t
                          val get_UNIFORM_BUFFER_SIZE : t -> GLenum.t
                          val get_UNIFORM_BUFFER_START : t -> GLenum.t
                          val get_UNIFORM_IS_ROW_MAJOR : t -> GLenum.t
                          val get_UNIFORM_MATRIX_STRIDE : t -> GLenum.t
                          val get_UNIFORM_OFFSET : t -> GLenum.t
                          val get_UNIFORM_SIZE : t -> GLenum.t
                          val get_UNIFORM_TYPE : t -> GLenum.t
                          val get_UNPACK_IMAGE_HEIGHT : t -> GLenum.t
                          val get_UNPACK_ROW_LENGTH : t -> GLenum.t
                          val get_UNPACK_SKIP_IMAGES : t -> GLenum.t
                          val get_UNPACK_SKIP_PIXELS : t -> GLenum.t
                          val get_UNPACK_SKIP_ROWS : t -> GLenum.t
                          val get_UNSIGNALED : t -> GLenum.t
                          val get_UNSIGNED_INT_10F_11F_11F_REV :
                            t -> GLenum.t
                          val get_UNSIGNED_INT_24_8 : t -> GLenum.t
                          val get_UNSIGNED_INT_2_10_10_10_REV : t -> GLenum.t
                          val get_UNSIGNED_INT_5_9_9_9_REV : t -> GLenum.t
                          val get_UNSIGNED_INT_SAMPLER_2D : t -> GLenum.t
                          val get_UNSIGNED_INT_SAMPLER_2D_ARRAY :
                            t -> GLenum.t
                          val get_UNSIGNED_INT_SAMPLER_3D : t -> GLenum.t
                          val get_UNSIGNED_INT_SAMPLER_CUBE : t -> GLenum.t
                          val get_UNSIGNED_INT_VEC2 : t -> GLenum.t
                          val get_UNSIGNED_INT_VEC3 : t -> GLenum.t
                          val get_UNSIGNED_INT_VEC4 : t -> GLenum.t
                          val get_UNSIGNED_NORMALIZED : t -> GLenum.t
                          val get_VERTEX_ARRAY_BINDING : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_DIVISOR : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_INTEGER : t -> GLenum.t
                          val get_WAIT_FAILED : t -> GLenum.t
                          val get_ACTIVE_ATTRIBUTES : t -> GLenum.t
                          val get_ACTIVE_TEXTURE : t -> GLenum.t
                          val get_ACTIVE_UNIFORMS : t -> GLenum.t
                          val get_ALIASED_LINE_WIDTH_RANGE : t -> GLenum.t
                          val get_ALIASED_POINT_SIZE_RANGE : t -> GLenum.t
                          val get_ALPHA : t -> GLenum.t
                          val get_ALPHA_BITS : t -> GLenum.t
                          val get_ALWAYS : t -> GLenum.t
                          val get_ARRAY_BUFFER : t -> GLenum.t
                          val get_ARRAY_BUFFER_BINDING : t -> GLenum.t
                          val get_ATTACHED_SHADERS : t -> GLenum.t
                          val get_BACK : t -> GLenum.t
                          val get_BLEND : t -> GLenum.t
                          val get_BLEND_COLOR : t -> GLenum.t
                          val get_BLEND_DST_ALPHA : t -> GLenum.t
                          val get_BLEND_DST_RGB : t -> GLenum.t
                          val get_BLEND_EQUATION : t -> GLenum.t
                          val get_BLEND_EQUATION_ALPHA : t -> GLenum.t
                          val get_BLEND_EQUATION_RGB : t -> GLenum.t
                          val get_BLEND_SRC_ALPHA : t -> GLenum.t
                          val get_BLEND_SRC_RGB : t -> GLenum.t
                          val get_BLUE_BITS : t -> GLenum.t
                          val get_BOOL : t -> GLenum.t
                          val get_BOOL_VEC2 : t -> GLenum.t
                          val get_BOOL_VEC3 : t -> GLenum.t
                          val get_BOOL_VEC4 : t -> GLenum.t
                          val get_BROWSER_DEFAULT_WEBGL : t -> GLenum.t
                          val get_BUFFER_SIZE : t -> GLenum.t
                          val get_BUFFER_USAGE : t -> GLenum.t
                          val get_BYTE : t -> GLenum.t
                          val get_CCW : t -> GLenum.t
                          val get_CLAMP_TO_EDGE : t -> GLenum.t
                          val get_COLOR_ATTACHMENT0 : t -> GLenum.t
                          val get_COLOR_BUFFER_BIT : t -> GLenum.t
                          val get_COLOR_CLEAR_VALUE : t -> GLenum.t
                          val get_COLOR_WRITEMASK : t -> GLenum.t
                          val get_COMPILE_STATUS : t -> GLenum.t
                          val get_COMPRESSED_TEXTURE_FORMATS : t -> GLenum.t
                          val get_CONSTANT_ALPHA : t -> GLenum.t
                          val get_CONSTANT_COLOR : t -> GLenum.t
                          val get_CONTEXT_LOST_WEBGL : t -> GLenum.t
                          val get_CULL_FACE : t -> GLenum.t
                          val get_CULL_FACE_MODE : t -> GLenum.t
                          val get_CURRENT_PROGRAM : t -> GLenum.t
                          val get_CURRENT_VERTEX_ATTRIB : t -> GLenum.t
                          val get_CW : t -> GLenum.t
                          val get_DECR : t -> GLenum.t
                          val get_DECR_WRAP : t -> GLenum.t
                          val get_DELETE_STATUS : t -> GLenum.t
                          val get_DEPTH_ATTACHMENT : t -> GLenum.t
                          val get_DEPTH_BITS : t -> GLenum.t
                          val get_DEPTH_BUFFER_BIT : t -> GLenum.t
                          val get_DEPTH_CLEAR_VALUE : t -> GLenum.t
                          val get_DEPTH_COMPONENT : t -> GLenum.t
                          val get_DEPTH_COMPONENT16 : t -> GLenum.t
                          val get_DEPTH_FUNC : t -> GLenum.t
                          val get_DEPTH_RANGE : t -> GLenum.t
                          val get_DEPTH_STENCIL : t -> GLenum.t
                          val get_DEPTH_STENCIL_ATTACHMENT : t -> GLenum.t
                          val get_DEPTH_TEST : t -> GLenum.t
                          val get_DEPTH_WRITEMASK : t -> GLenum.t
                          val get_DITHER : t -> GLenum.t
                          val get_DONT_CARE : t -> GLenum.t
                          val get_DST_ALPHA : t -> GLenum.t
                          val get_DST_COLOR : t -> GLenum.t
                          val get_DYNAMIC_DRAW : t -> GLenum.t
                          val get_ELEMENT_ARRAY_BUFFER : t -> GLenum.t
                          val get_ELEMENT_ARRAY_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_EQUAL : t -> GLenum.t
                          val get_FASTEST : t -> GLenum.t
                          val get_FLOAT : t -> GLenum.t
                          val get_FLOAT_MAT2 : t -> GLenum.t
                          val get_FLOAT_MAT3 : t -> GLenum.t
                          val get_FLOAT_MAT4 : t -> GLenum.t
                          val get_FLOAT_VEC2 : t -> GLenum.t
                          val get_FLOAT_VEC3 : t -> GLenum.t
                          val get_FLOAT_VEC4 : t -> GLenum.t
                          val get_FRAGMENT_SHADER : t -> GLenum.t
                          val get_FRAMEBUFFER : t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :
                            t -> GLenum.t
                          val
                            get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
                            : t -> GLenum.t
                          val get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_BINDING : t -> GLenum.t
                          val get_FRAMEBUFFER_COMPLETE : t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
                            t -> GLenum.t
                          val get_FRAMEBUFFER_UNSUPPORTED : t -> GLenum.t
                          val get_FRONT : t -> GLenum.t
                          val get_FRONT_AND_BACK : t -> GLenum.t
                          val get_FRONT_FACE : t -> GLenum.t
                          val get_FUNC_ADD : t -> GLenum.t
                          val get_FUNC_REVERSE_SUBTRACT : t -> GLenum.t
                          val get_FUNC_SUBTRACT : t -> GLenum.t
                          val get_GENERATE_MIPMAP_HINT : t -> GLenum.t
                          val get_GEQUAL : t -> GLenum.t
                          val get_GREATER : t -> GLenum.t
                          val get_GREEN_BITS : t -> GLenum.t
                          val get_HIGH_FLOAT : t -> GLenum.t
                          val get_HIGH_INT : t -> GLenum.t
                          val get_IMPLEMENTATION_COLOR_READ_FORMAT :
                            t -> GLenum.t
                          val get_IMPLEMENTATION_COLOR_READ_TYPE :
                            t -> GLenum.t
                          val get_INCR : t -> GLenum.t
                          val get_INCR_WRAP : t -> GLenum.t
                          val get_INT : t -> GLenum.t
                          val get_INT_VEC2 : t -> GLenum.t
                          val get_INT_VEC3 : t -> GLenum.t
                          val get_INT_VEC4 : t -> GLenum.t
                          val get_INVALID_ENUM : t -> GLenum.t
                          val get_INVALID_FRAMEBUFFER_OPERATION :
                            t -> GLenum.t
                          val get_INVALID_OPERATION : t -> GLenum.t
                          val get_INVALID_VALUE : t -> GLenum.t
                          val get_INVERT : t -> GLenum.t
                          val get_KEEP : t -> GLenum.t
                          val get_LEQUAL : t -> GLenum.t
                          val get_LESS : t -> GLenum.t
                          val get_LINEAR : t -> GLenum.t
                          val get_LINEAR_MIPMAP_LINEAR : t -> GLenum.t
                          val get_LINEAR_MIPMAP_NEAREST : t -> GLenum.t
                          val get_LINES : t -> GLenum.t
                          val get_LINE_LOOP : t -> GLenum.t
                          val get_LINE_STRIP : t -> GLenum.t
                          val get_LINE_WIDTH : t -> GLenum.t
                          val get_LINK_STATUS : t -> GLenum.t
                          val get_LOW_FLOAT : t -> GLenum.t
                          val get_LOW_INT : t -> GLenum.t
                          val get_LUMINANCE : t -> GLenum.t
                          val get_LUMINANCE_ALPHA : t -> GLenum.t
                          val get_MAX_COMBINED_TEXTURE_IMAGE_UNITS :
                            t -> GLenum.t
                          val get_MAX_CUBE_MAP_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_FRAGMENT_UNIFORM_VECTORS :
                            t -> GLenum.t
                          val get_MAX_RENDERBUFFER_SIZE : t -> GLenum.t
                          val get_MAX_TEXTURE_IMAGE_UNITS : t -> GLenum.t
                          val get_MAX_TEXTURE_SIZE : t -> GLenum.t
                          val get_MAX_VARYING_VECTORS : t -> GLenum.t
                          val get_MAX_VERTEX_ATTRIBS : t -> GLenum.t
                          val get_MAX_VERTEX_TEXTURE_IMAGE_UNITS :
                            t -> GLenum.t
                          val get_MAX_VERTEX_UNIFORM_VECTORS : t -> GLenum.t
                          val get_MAX_VIEWPORT_DIMS : t -> GLenum.t
                          val get_MEDIUM_FLOAT : t -> GLenum.t
                          val get_MEDIUM_INT : t -> GLenum.t
                          val get_MIRRORED_REPEAT : t -> GLenum.t
                          val get_NEAREST : t -> GLenum.t
                          val get_NEAREST_MIPMAP_LINEAR : t -> GLenum.t
                          val get_NEAREST_MIPMAP_NEAREST : t -> GLenum.t
                          val get_NEVER : t -> GLenum.t
                          val get_NICEST : t -> GLenum.t
                          val get_NONE : t -> GLenum.t
                          val get_NOTEQUAL : t -> GLenum.t
                          val get_NO_ERROR : t -> GLenum.t
                          val get_ONE : t -> GLenum.t
                          val get_ONE_MINUS_CONSTANT_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_CONSTANT_COLOR : t -> GLenum.t
                          val get_ONE_MINUS_DST_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_DST_COLOR : t -> GLenum.t
                          val get_ONE_MINUS_SRC_ALPHA : t -> GLenum.t
                          val get_ONE_MINUS_SRC_COLOR : t -> GLenum.t
                          val get_OUT_OF_MEMORY : t -> GLenum.t
                          val get_PACK_ALIGNMENT : t -> GLenum.t
                          val get_POINTS : t -> GLenum.t
                          val get_POLYGON_OFFSET_FACTOR : t -> GLenum.t
                          val get_POLYGON_OFFSET_FILL : t -> GLenum.t
                          val get_POLYGON_OFFSET_UNITS : t -> GLenum.t
                          val get_RED_BITS : t -> GLenum.t
                          val get_RENDERBUFFER : t -> GLenum.t
                          val get_RENDERBUFFER_ALPHA_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_BINDING : t -> GLenum.t
                          val get_RENDERBUFFER_BLUE_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_DEPTH_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_GREEN_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_HEIGHT : t -> GLenum.t
                          val get_RENDERBUFFER_INTERNAL_FORMAT :
                            t -> GLenum.t
                          val get_RENDERBUFFER_RED_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_STENCIL_SIZE : t -> GLenum.t
                          val get_RENDERBUFFER_WIDTH : t -> GLenum.t
                          val get_RENDERER : t -> GLenum.t
                          val get_REPEAT : t -> GLenum.t
                          val get_REPLACE : t -> GLenum.t
                          val get_RGB : t -> GLenum.t
                          val get_RGB565 : t -> GLenum.t
                          val get_RGB5_A1 : t -> GLenum.t
                          val get_RGBA : t -> GLenum.t
                          val get_RGBA4 : t -> GLenum.t
                          val get_SAMPLER_2D : t -> GLenum.t
                          val get_SAMPLER_CUBE : t -> GLenum.t
                          val get_SAMPLES : t -> GLenum.t
                          val get_SAMPLE_ALPHA_TO_COVERAGE : t -> GLenum.t
                          val get_SAMPLE_BUFFERS : t -> GLenum.t
                          val get_SAMPLE_COVERAGE : t -> GLenum.t
                          val get_SAMPLE_COVERAGE_INVERT : t -> GLenum.t
                          val get_SAMPLE_COVERAGE_VALUE : t -> GLenum.t
                          val get_SCISSOR_BOX : t -> GLenum.t
                          val get_SCISSOR_TEST : t -> GLenum.t
                          val get_SHADER_TYPE : t -> GLenum.t
                          val get_SHADING_LANGUAGE_VERSION : t -> GLenum.t
                          val get_SHORT : t -> GLenum.t
                          val get_SRC_ALPHA : t -> GLenum.t
                          val get_SRC_ALPHA_SATURATE : t -> GLenum.t
                          val get_SRC_COLOR : t -> GLenum.t
                          val get_STATIC_DRAW : t -> GLenum.t
                          val get_STENCIL_ATTACHMENT : t -> GLenum.t
                          val get_STENCIL_BACK_FAIL : t -> GLenum.t
                          val get_STENCIL_BACK_FUNC : t -> GLenum.t
                          val get_STENCIL_BACK_PASS_DEPTH_FAIL :
                            t -> GLenum.t
                          val get_STENCIL_BACK_PASS_DEPTH_PASS :
                            t -> GLenum.t
                          val get_STENCIL_BACK_REF : t -> GLenum.t
                          val get_STENCIL_BACK_VALUE_MASK : t -> GLenum.t
                          val get_STENCIL_BACK_WRITEMASK : t -> GLenum.t
                          val get_STENCIL_BITS : t -> GLenum.t
                          val get_STENCIL_BUFFER_BIT : t -> GLenum.t
                          val get_STENCIL_CLEAR_VALUE : t -> GLenum.t
                          val get_STENCIL_FAIL : t -> GLenum.t
                          val get_STENCIL_FUNC : t -> GLenum.t
                          val get_STENCIL_INDEX8 : t -> GLenum.t
                          val get_STENCIL_PASS_DEPTH_FAIL : t -> GLenum.t
                          val get_STENCIL_PASS_DEPTH_PASS : t -> GLenum.t
                          val get_STENCIL_REF : t -> GLenum.t
                          val get_STENCIL_TEST : t -> GLenum.t
                          val get_STENCIL_VALUE_MASK : t -> GLenum.t
                          val get_STENCIL_WRITEMASK : t -> GLenum.t
                          val get_STREAM_DRAW : t -> GLenum.t
                          val get_SUBPIXEL_BITS : t -> GLenum.t
                          val get_TEXTURE : t -> GLenum.t
                          val get_TEXTURE0 : t -> GLenum.t
                          val get_TEXTURE1 : t -> GLenum.t
                          val get_TEXTURE10 : t -> GLenum.t
                          val get_TEXTURE11 : t -> GLenum.t
                          val get_TEXTURE12 : t -> GLenum.t
                          val get_TEXTURE13 : t -> GLenum.t
                          val get_TEXTURE14 : t -> GLenum.t
                          val get_TEXTURE15 : t -> GLenum.t
                          val get_TEXTURE16 : t -> GLenum.t
                          val get_TEXTURE17 : t -> GLenum.t
                          val get_TEXTURE18 : t -> GLenum.t
                          val get_TEXTURE19 : t -> GLenum.t
                          val get_TEXTURE2 : t -> GLenum.t
                          val get_TEXTURE20 : t -> GLenum.t
                          val get_TEXTURE21 : t -> GLenum.t
                          val get_TEXTURE22 : t -> GLenum.t
                          val get_TEXTURE23 : t -> GLenum.t
                          val get_TEXTURE24 : t -> GLenum.t
                          val get_TEXTURE25 : t -> GLenum.t
                          val get_TEXTURE26 : t -> GLenum.t
                          val get_TEXTURE27 : t -> GLenum.t
                          val get_TEXTURE28 : t -> GLenum.t
                          val get_TEXTURE29 : t -> GLenum.t
                          val get_TEXTURE3 : t -> GLenum.t
                          val get_TEXTURE30 : t -> GLenum.t
                          val get_TEXTURE31 : t -> GLenum.t
                          val get_TEXTURE4 : t -> GLenum.t
                          val get_TEXTURE5 : t -> GLenum.t
                          val get_TEXTURE6 : t -> GLenum.t
                          val get_TEXTURE7 : t -> GLenum.t
                          val get_TEXTURE8 : t -> GLenum.t
                          val get_TEXTURE9 : t -> GLenum.t
                          val get_TEXTURE_2D : t -> GLenum.t
                          val get_TEXTURE_BINDING_2D : t -> GLenum.t
                          val get_TEXTURE_BINDING_CUBE_MAP : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_X : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_Y : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_NEGATIVE_Z : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_X : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_Y : t -> GLenum.t
                          val get_TEXTURE_CUBE_MAP_POSITIVE_Z : t -> GLenum.t
                          val get_TEXTURE_MAG_FILTER : t -> GLenum.t
                          val get_TEXTURE_MIN_FILTER : t -> GLenum.t
                          val get_TEXTURE_WRAP_S : t -> GLenum.t
                          val get_TEXTURE_WRAP_T : t -> GLenum.t
                          val get_TRIANGLES : t -> GLenum.t
                          val get_TRIANGLE_FAN : t -> GLenum.t
                          val get_TRIANGLE_STRIP : t -> GLenum.t
                          val get_UNPACK_ALIGNMENT : t -> GLenum.t
                          val get_UNPACK_COLORSPACE_CONVERSION_WEBGL :
                            t -> GLenum.t
                          val get_UNPACK_FLIP_Y_WEBGL : t -> GLenum.t
                          val get_UNPACK_PREMULTIPLY_ALPHA_WEBGL :
                            t -> GLenum.t
                          val get_UNSIGNED_BYTE : t -> GLenum.t
                          val get_UNSIGNED_INT : t -> GLenum.t
                          val get_UNSIGNED_SHORT : t -> GLenum.t
                          val get_UNSIGNED_SHORT_4_4_4_4 : t -> GLenum.t
                          val get_UNSIGNED_SHORT_5_5_5_1 : t -> GLenum.t
                          val get_UNSIGNED_SHORT_5_6_5 : t -> GLenum.t
                          val get_VALIDATE_STATUS : t -> GLenum.t
                          val get_VENDOR : t -> GLenum.t
                          val get_VERSION : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :
                            t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_ENABLED : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_NORMALIZED :
                            t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_POINTER : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_SIZE : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_STRIDE : t -> GLenum.t
                          val get_VERTEX_ATTRIB_ARRAY_TYPE : t -> GLenum.t
                          val get_VERTEX_SHADER : t -> GLenum.t
                          val get_VIEWPORT : t -> GLenum.t
                          val get_ZERO : t -> GLenum.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15034 : Ojs.t) -> x15034
    and t_to_js : t -> Ojs.t = fun (x15033 : Ojs.t) -> x15033
    let (get_prototype : t -> WebGL2RenderingContext.t) =
      fun (x15035 : t) ->
        WebGL2RenderingContext.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15035) "prototype")
    let (set_prototype : t -> WebGL2RenderingContext.t -> unit) =
      fun (x15036 : t) ->
        fun (x15037 : WebGL2RenderingContext.t) ->
          Ojs.set_prop_ascii (t_to_js x15036) "prototype"
            (WebGL2RenderingContext.t_to_js x15037)
    let (create : t -> WebGL2RenderingContext.t) =
      fun (x15038 : t) ->
        WebGL2RenderingContext.t_of_js (Ojs.new_obj (t_to_js x15038) [||])
    let (get_ACTIVE_UNIFORM_BLOCKS : t -> GLenum.t) =
      fun (x15039 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15039) "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : t -> GLenum.t) =
      fun (x15040 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15040) "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : t -> GLenum.t) =
      fun (x15041 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15041) "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : t -> GLenum.t) =
      fun (x15042 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15042)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : t -> GLenum.t) =
      fun (x15043 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15043) "COLOR")
    let (get_COLOR_ATTACHMENT1 : t -> GLenum.t) =
      fun (x15044 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15044) "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : t -> GLenum.t) =
      fun (x15045 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15045) "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : t -> GLenum.t) =
      fun (x15046 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15046) "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : t -> GLenum.t) =
      fun (x15047 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15047) "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : t -> GLenum.t) =
      fun (x15048 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15048) "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : t -> GLenum.t) =
      fun (x15049 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15049) "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : t -> GLenum.t) =
      fun (x15050 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15050) "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : t -> GLenum.t) =
      fun (x15051 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15051) "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : t -> GLenum.t) =
      fun (x15052 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15052) "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : t -> GLenum.t) =
      fun (x15053 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15053) "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : t -> GLenum.t) =
      fun (x15054 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15054) "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : t -> GLenum.t) =
      fun (x15055 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15055) "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : t -> GLenum.t) =
      fun (x15056 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15056) "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : t -> GLenum.t) =
      fun (x15057 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15057) "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : t -> GLenum.t) =
      fun (x15058 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15058) "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : t -> GLenum.t) =
      fun (x15059 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15059) "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : t -> GLenum.t) =
      fun (x15060 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15060) "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : t -> GLenum.t) =
      fun (x15061 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15061) "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15062 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15062) "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : t -> GLenum.t) =
      fun (x15063 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15063) "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15064 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15064) "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : t -> GLenum.t) =
      fun (x15065 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15065) "CURRENT_QUERY")
    let (get_DEPTH : t -> GLenum.t) =
      fun (x15066 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15066) "DEPTH")
    let (get_DEPTH24_STENCIL8 : t -> GLenum.t) =
      fun (x15067 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15067) "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : t -> GLenum.t) =
      fun (x15068 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15068) "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : t -> GLenum.t) =
      fun (x15069 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15069) "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : t -> GLenum.t) =
      fun (x15070 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15070) "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : t -> GLenum.t) =
      fun (x15071 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15071) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : t -> GLenum.t) =
      fun (x15072 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15072) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : t -> GLenum.t) =
      fun (x15073 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15073) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : t -> GLenum.t) =
      fun (x15074 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15074) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : t -> GLenum.t) =
      fun (x15075 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15075) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : t -> GLenum.t) =
      fun (x15076 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15076) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : t -> GLenum.t) =
      fun (x15077 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15077) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : t -> GLenum.t) =
      fun (x15078 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15078) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : t -> GLenum.t) =
      fun (x15079 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15079) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : t -> GLenum.t) =
      fun (x15080 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15080) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : t -> GLenum.t) =
      fun (x15081 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15081) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : t -> GLenum.t) =
      fun (x15082 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15082) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : t -> GLenum.t) =
      fun (x15083 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15083) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : t -> GLenum.t) =
      fun (x15084 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15084) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : t -> GLenum.t) =
      fun (x15085 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15085) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : t -> GLenum.t) =
      fun (x15086 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15086) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : t -> GLenum.t) =
      fun (x15087 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15087) "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : t -> GLenum.t) =
      fun (x15088 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15088) "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : t -> GLenum.t) =
      fun (x15089 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15089) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : t -> GLenum.t) =
      fun (x15090 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15090) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : t -> GLenum.t) =
      fun (x15091 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15091)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : t -> GLenum.t) =
      fun (x15092 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15092) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : t -> GLenum.t) =
      fun (x15093 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15093) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : t -> GLenum.t) =
      fun (x15094 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15094) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : t -> GLenum.t) =
      fun (x15095 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15095) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : t -> GLenum.t) =
      fun (x15096 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15096) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : t -> GLenum.t) =
      fun (x15097 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15097) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : t -> GLenum.t) =
      fun (x15098 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15098)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : t -> GLenum.t) =
      fun (x15099 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15099)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : t -> GLenum.t) =
      fun (x15100 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15100)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : t -> GLenum.t) =
      fun (x15101 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15101)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : t -> GLenum.t) =
      fun (x15102 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15102)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : t -> GLenum.t) =
      fun (x15103 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15103)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : t -> GLenum.t) =
      fun (x15104 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15104)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : t -> GLenum.t) =
      fun (x15105 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15105)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : t -> GLenum.t) =
      fun (x15106 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15106)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : t -> GLenum.t) =
      fun (x15107 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15107)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : t -> GLenum.t) =
      fun (x15108 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15108) "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : t -> GLenum.t) =
      fun (x15109 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15109)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : t -> GLenum.t) =
      fun (x15110 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15110) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : t -> GLenum.t) =
      fun (x15111 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15111) "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : t -> GLenum.t) =
      fun (x15112 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15112) "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : t -> GLenum.t) =
      fun (x15113 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15113) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : t -> GLenum.t) =
      fun (x15114 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15114) "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : t -> GLenum.t) =
      fun (x15115 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15115) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : t -> GLenum.t) =
      fun (x15116 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15116) "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : t -> GLenum.t) =
      fun (x15117 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15117) "INVALID_INDEX")
    let (get_MAX : t -> GLenum.t) =
      fun (x15118 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15118) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x15119 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15119) "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : t -> GLenum.t) =
      fun (x15120 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15120) "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : t -> GLenum.t) =
      fun (x15121 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15121)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : t -> GLenum.t) =
      fun (x15122 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15122) "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS : t -> GLenum.t) =
      fun (x15123 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15123)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : t -> GLenum.t) =
      fun (x15124 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15124) "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : t -> GLenum.t) =
      fun (x15125 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15125)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : t -> GLenum.t) =
      fun (x15126 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15126) "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : t -> GLenum.t) =
      fun (x15127 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15127) "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : t -> GLenum.t) =
      fun (x15128 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15128) "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : t -> GLenum.t) =
      fun (x15129 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15129) "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : t -> GLenum.t) =
      fun (x15130 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15130)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : t -> GLenum.t) =
      fun (x15131 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15131) "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : t -> GLenum.t) =
      fun (x15132 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15132)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : t -> GLenum.t) =
      fun (x15133 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15133) "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : t -> GLenum.t) =
      fun (x15134 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15134) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : t -> GLenum.t) =
      fun (x15135 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15135) "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : t -> GLenum.t) =
      fun (x15136 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15136) "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS : t -> GLenum.t) =
      fun (x15137 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15137)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS : t -> GLenum.t) =
      fun (x15138 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15138)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : t -> GLenum.t) =
      fun (x15139 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15139)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : t -> GLenum.t) =
      fun (x15140 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15140) "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : t -> GLenum.t) =
      fun (x15141 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15141) "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : t -> GLenum.t) =
      fun (x15142 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15142) "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : t -> GLenum.t) =
      fun (x15143 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15143) "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : t -> GLenum.t) =
      fun (x15144 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15144) "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : t -> GLenum.t) =
      fun (x15145 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15145)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : t -> GLenum.t) =
      fun (x15146 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15146) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : t -> GLenum.t) =
      fun (x15147 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15147) "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : t -> GLenum.t) =
      fun (x15148 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15148) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : t -> GLenum.t) =
      fun (x15149 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15149) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : t -> GLenum.t) =
      fun (x15150 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15150) "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : t -> GLenum.t) =
      fun (x15151 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15151) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : t -> GLenum.t) =
      fun (x15152 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15152) "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15153 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15153) "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : t -> GLenum.t) =
      fun (x15154 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15154) "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15155 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15155) "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : t -> GLenum.t) =
      fun (x15156 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15156) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : t -> GLenum.t) =
      fun (x15157 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15157) "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : t -> GLenum.t) =
      fun (x15158 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15158) "R11F_G11F_B10F")
    let (get_R16F : t -> GLenum.t) =
      fun (x15159 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15159) "R16F")
    let (get_R16I : t -> GLenum.t) =
      fun (x15160 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15160) "R16I")
    let (get_R16UI : t -> GLenum.t) =
      fun (x15161 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15161) "R16UI")
    let (get_R32F : t -> GLenum.t) =
      fun (x15162 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15162) "R32F")
    let (get_R32I : t -> GLenum.t) =
      fun (x15163 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15163) "R32I")
    let (get_R32UI : t -> GLenum.t) =
      fun (x15164 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15164) "R32UI")
    let (get_R8 : t -> GLenum.t) =
      fun (x15165 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15165) "R8")
    let (get_R8I : t -> GLenum.t) =
      fun (x15166 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15166) "R8I")
    let (get_R8UI : t -> GLenum.t) =
      fun (x15167 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15167) "R8UI")
    let (get_R8_SNORM : t -> GLenum.t) =
      fun (x15168 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15168) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : t -> GLenum.t) =
      fun (x15169 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15169) "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : t -> GLenum.t) =
      fun (x15170 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15170) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : t -> GLenum.t) =
      fun (x15171 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15171) "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : t -> GLenum.t) =
      fun (x15172 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15172) "READ_FRAMEBUFFER_BINDING")
    let (get_RED : t -> GLenum.t) =
      fun (x15173 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15173) "RED")
    let (get_RED_INTEGER : t -> GLenum.t) =
      fun (x15174 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15174) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : t -> GLenum.t) =
      fun (x15175 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15175) "RENDERBUFFER_SAMPLES")
    let (get_RG : t -> GLenum.t) =
      fun (x15176 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15176) "RG")
    let (get_RG16F : t -> GLenum.t) =
      fun (x15177 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15177) "RG16F")
    let (get_RG16I : t -> GLenum.t) =
      fun (x15178 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15178) "RG16I")
    let (get_RG16UI : t -> GLenum.t) =
      fun (x15179 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15179) "RG16UI")
    let (get_RG32F : t -> GLenum.t) =
      fun (x15180 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15180) "RG32F")
    let (get_RG32I : t -> GLenum.t) =
      fun (x15181 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15181) "RG32I")
    let (get_RG32UI : t -> GLenum.t) =
      fun (x15182 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15182) "RG32UI")
    let (get_RG8 : t -> GLenum.t) =
      fun (x15183 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15183) "RG8")
    let (get_RG8I : t -> GLenum.t) =
      fun (x15184 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15184) "RG8I")
    let (get_RG8UI : t -> GLenum.t) =
      fun (x15185 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15185) "RG8UI")
    let (get_RG8_SNORM : t -> GLenum.t) =
      fun (x15186 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15186) "RG8_SNORM")
    let (get_RGB10_A2 : t -> GLenum.t) =
      fun (x15187 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15187) "RGB10_A2")
    let (get_RGB10_A2UI : t -> GLenum.t) =
      fun (x15188 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15188) "RGB10_A2UI")
    let (get_RGB16F : t -> GLenum.t) =
      fun (x15189 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15189) "RGB16F")
    let (get_RGB16I : t -> GLenum.t) =
      fun (x15190 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15190) "RGB16I")
    let (get_RGB16UI : t -> GLenum.t) =
      fun (x15191 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15191) "RGB16UI")
    let (get_RGB32F : t -> GLenum.t) =
      fun (x15192 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15192) "RGB32F")
    let (get_RGB32I : t -> GLenum.t) =
      fun (x15193 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15193) "RGB32I")
    let (get_RGB32UI : t -> GLenum.t) =
      fun (x15194 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15194) "RGB32UI")
    let (get_RGB8 : t -> GLenum.t) =
      fun (x15195 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15195) "RGB8")
    let (get_RGB8I : t -> GLenum.t) =
      fun (x15196 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15196) "RGB8I")
    let (get_RGB8UI : t -> GLenum.t) =
      fun (x15197 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15197) "RGB8UI")
    let (get_RGB8_SNORM : t -> GLenum.t) =
      fun (x15198 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15198) "RGB8_SNORM")
    let (get_RGB9_E5 : t -> GLenum.t) =
      fun (x15199 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15199) "RGB9_E5")
    let (get_RGBA16F : t -> GLenum.t) =
      fun (x15200 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15200) "RGBA16F")
    let (get_RGBA16I : t -> GLenum.t) =
      fun (x15201 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15201) "RGBA16I")
    let (get_RGBA16UI : t -> GLenum.t) =
      fun (x15202 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15202) "RGBA16UI")
    let (get_RGBA32F : t -> GLenum.t) =
      fun (x15203 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15203) "RGBA32F")
    let (get_RGBA32I : t -> GLenum.t) =
      fun (x15204 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15204) "RGBA32I")
    let (get_RGBA32UI : t -> GLenum.t) =
      fun (x15205 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15205) "RGBA32UI")
    let (get_RGBA8 : t -> GLenum.t) =
      fun (x15206 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15206) "RGBA8")
    let (get_RGBA8I : t -> GLenum.t) =
      fun (x15207 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15207) "RGBA8I")
    let (get_RGBA8UI : t -> GLenum.t) =
      fun (x15208 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15208) "RGBA8UI")
    let (get_RGBA8_SNORM : t -> GLenum.t) =
      fun (x15209 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15209) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : t -> GLenum.t) =
      fun (x15210 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15210) "RGBA_INTEGER")
    let (get_RGB_INTEGER : t -> GLenum.t) =
      fun (x15211 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15211) "RGB_INTEGER")
    let (get_RG_INTEGER : t -> GLenum.t) =
      fun (x15212 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15212) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : t -> GLenum.t) =
      fun (x15213 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15213) "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : t -> GLenum.t) =
      fun (x15214 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15214) "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : t -> GLenum.t) =
      fun (x15215 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15215) "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : t -> GLenum.t) =
      fun (x15216 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15216) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : t -> GLenum.t) =
      fun (x15217 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15217) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : t -> GLenum.t) =
      fun (x15218 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15218) "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : t -> GLenum.t) =
      fun (x15219 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15219) "SEPARATE_ATTRIBS")
    let (get_SIGNALED : t -> GLenum.t) =
      fun (x15220 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15220) "SIGNALED")
    let (get_SIGNED_NORMALIZED : t -> GLenum.t) =
      fun (x15221 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15221) "SIGNED_NORMALIZED")
    let (get_SRGB : t -> GLenum.t) =
      fun (x15222 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15222) "SRGB")
    let (get_SRGB8 : t -> GLenum.t) =
      fun (x15223 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15223) "SRGB8")
    let (get_SRGB8_ALPHA8 : t -> GLenum.t) =
      fun (x15224 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15224) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : t -> GLenum.t) =
      fun (x15225 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15225) "STATIC_COPY")
    let (get_STATIC_READ : t -> GLenum.t) =
      fun (x15226 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15226) "STATIC_READ")
    let (get_STENCIL : t -> GLenum.t) =
      fun (x15227 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15227) "STENCIL")
    let (get_STREAM_COPY : t -> GLenum.t) =
      fun (x15228 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15228) "STREAM_COPY")
    let (get_STREAM_READ : t -> GLenum.t) =
      fun (x15229 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15229) "STREAM_READ")
    let (get_SYNC_CONDITION : t -> GLenum.t) =
      fun (x15230 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15230) "SYNC_CONDITION")
    let (get_SYNC_FENCE : t -> GLenum.t) =
      fun (x15231 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15231) "SYNC_FENCE")
    let (get_SYNC_FLAGS : t -> GLenum.t) =
      fun (x15232 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15232) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : t -> GLenum.t) =
      fun (x15233 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15233) "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : t -> GLenum.t) =
      fun (x15234 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15234) "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : t -> GLenum.t) =
      fun (x15235 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15235) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : t -> GLenum.t) =
      fun (x15236 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15236) "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : t -> GLenum.t) =
      fun (x15237 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15237) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : t -> GLenum.t) =
      fun (x15238 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15238) "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : t -> GLenum.t) =
      fun (x15239 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15239) "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : t -> GLenum.t) =
      fun (x15240 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15240) "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : t -> GLenum.t) =
      fun (x15241 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15241) "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : t -> GLenum.t) =
      fun (x15242 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15242) "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : t -> GLenum.t) =
      fun (x15243 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15243) "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : t -> GLenum.t) =
      fun (x15244 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15244) "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : t -> GLenum.t) =
      fun (x15245 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15245) "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : t -> GLenum.t) =
      fun (x15246 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15246) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : t -> GLenum.t) =
      fun (x15247 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15247) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : t -> GLenum.t) =
      fun (x15248 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15248) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : t -> GLenum.t) =
      fun (x15249 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15249) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : t -> GLint64.t) =
      fun (x15250 : t) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15250) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : t -> GLenum.t) =
      fun (x15251 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15251) "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : t -> GLenum.t) =
      fun (x15252 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15252) "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : t -> GLenum.t) =
      fun (x15253 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15253) "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : t -> GLenum.t) =
      fun (x15254 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15254) "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15255 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15255)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : t -> GLenum.t) =
      fun (x15256 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15256)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : t -> GLenum.t) =
      fun (x15257 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15257)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : t -> GLenum.t) =
      fun (x15258 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15258)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : t -> GLenum.t) =
      fun (x15259 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15259) "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : t -> GLenum.t) =
      fun (x15260 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15260)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : t -> GLenum.t) =
      fun (x15261 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15261) "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : t -> GLenum.t) =
      fun (x15262 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15262) "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : t -> GLenum.t) =
      fun (x15263 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15263)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : t -> GLenum.t) =
      fun (x15264 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15264)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : t -> GLenum.t) =
      fun (x15265 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15265) "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : t -> GLenum.t) =
      fun (x15266 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15266) "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : t -> GLenum.t) =
      fun (x15267 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15267) "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER : t -> GLenum.t) =
      fun (x15268 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15268)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER : t -> GLenum.t) =
      fun (x15269 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15269)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : t -> GLenum.t) =
      fun (x15270 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15270) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15271 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15271) "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : t -> GLenum.t) =
      fun (x15272 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15272)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : t -> GLenum.t) =
      fun (x15273 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15273) "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : t -> GLenum.t) =
      fun (x15274 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15274) "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : t -> GLenum.t) =
      fun (x15275 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15275) "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : t -> GLenum.t) =
      fun (x15276 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15276) "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : t -> GLenum.t) =
      fun (x15277 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15277) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : t -> GLenum.t) =
      fun (x15278 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15278) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : t -> GLenum.t) =
      fun (x15279 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15279) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : t -> GLenum.t) =
      fun (x15280 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15280) "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : t -> GLenum.t) =
      fun (x15281 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15281) "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : t -> GLenum.t) =
      fun (x15282 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15282) "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : t -> GLenum.t) =
      fun (x15283 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15283) "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : t -> GLenum.t) =
      fun (x15284 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15284) "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : t -> GLenum.t) =
      fun (x15285 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15285) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : t -> GLenum.t) =
      fun (x15286 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15286) "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : t -> GLenum.t) =
      fun (x15287 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15287) "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : t -> GLenum.t) =
      fun (x15288 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15288) "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : t -> GLenum.t) =
      fun (x15289 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15289) "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : t -> GLenum.t) =
      fun (x15290 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15290) "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : t -> GLenum.t) =
      fun (x15291 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15291)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : t -> GLenum.t) =
      fun (x15292 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15292) "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : t -> GLenum.t) =
      fun (x15293 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15293) "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : t -> GLenum.t) =
      fun (x15294 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15294) "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : t -> GLenum.t) =
      fun (x15295 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15295) "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : t -> GLenum.t) =
      fun (x15296 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15296) "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : t -> GLenum.t) =
      fun (x15297 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15297) "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : t -> GLenum.t) =
      fun (x15298 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15298) "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : t -> GLenum.t) =
      fun (x15299 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15299) "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : t -> GLenum.t) =
      fun (x15300 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15300) "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : t -> GLenum.t) =
      fun (x15301 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15301) "WAIT_FAILED")
    let (get_ACTIVE_ATTRIBUTES : t -> GLenum.t) =
      fun (x15302 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15302) "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : t -> GLenum.t) =
      fun (x15303 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15303) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : t -> GLenum.t) =
      fun (x15304 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15304) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : t -> GLenum.t) =
      fun (x15305 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15305) "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : t -> GLenum.t) =
      fun (x15306 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15306) "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : t -> GLenum.t) =
      fun (x15307 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15307) "ALPHA")
    let (get_ALPHA_BITS : t -> GLenum.t) =
      fun (x15308 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15308) "ALPHA_BITS")
    let (get_ALWAYS : t -> GLenum.t) =
      fun (x15309 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15309) "ALWAYS")
    let (get_ARRAY_BUFFER : t -> GLenum.t) =
      fun (x15310 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15310) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15311 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15311) "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : t -> GLenum.t) =
      fun (x15312 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15312) "ATTACHED_SHADERS")
    let (get_BACK : t -> GLenum.t) =
      fun (x15313 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15313) "BACK")
    let (get_BLEND : t -> GLenum.t) =
      fun (x15314 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15314) "BLEND")
    let (get_BLEND_COLOR : t -> GLenum.t) =
      fun (x15315 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15315) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : t -> GLenum.t) =
      fun (x15316 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15316) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : t -> GLenum.t) =
      fun (x15317 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15317) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : t -> GLenum.t) =
      fun (x15318 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15318) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : t -> GLenum.t) =
      fun (x15319 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15319) "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : t -> GLenum.t) =
      fun (x15320 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15320) "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : t -> GLenum.t) =
      fun (x15321 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15321) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : t -> GLenum.t) =
      fun (x15322 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15322) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : t -> GLenum.t) =
      fun (x15323 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15323) "BLUE_BITS")
    let (get_BOOL : t -> GLenum.t) =
      fun (x15324 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15324) "BOOL")
    let (get_BOOL_VEC2 : t -> GLenum.t) =
      fun (x15325 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15325) "BOOL_VEC2")
    let (get_BOOL_VEC3 : t -> GLenum.t) =
      fun (x15326 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15326) "BOOL_VEC3")
    let (get_BOOL_VEC4 : t -> GLenum.t) =
      fun (x15327 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15327) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : t -> GLenum.t) =
      fun (x15328 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15328) "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : t -> GLenum.t) =
      fun (x15329 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15329) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : t -> GLenum.t) =
      fun (x15330 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15330) "BUFFER_USAGE")
    let (get_BYTE : t -> GLenum.t) =
      fun (x15331 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15331) "BYTE")
    let (get_CCW : t -> GLenum.t) =
      fun (x15332 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15332) "CCW")
    let (get_CLAMP_TO_EDGE : t -> GLenum.t) =
      fun (x15333 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15333) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : t -> GLenum.t) =
      fun (x15334 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15334) "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : t -> GLenum.t) =
      fun (x15335 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15335) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : t -> GLenum.t) =
      fun (x15336 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15336) "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : t -> GLenum.t) =
      fun (x15337 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15337) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : t -> GLenum.t) =
      fun (x15338 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15338) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : t -> GLenum.t) =
      fun (x15339 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15339) "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : t -> GLenum.t) =
      fun (x15340 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15340) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : t -> GLenum.t) =
      fun (x15341 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15341) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : t -> GLenum.t) =
      fun (x15342 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15342) "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : t -> GLenum.t) =
      fun (x15343 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15343) "CULL_FACE")
    let (get_CULL_FACE_MODE : t -> GLenum.t) =
      fun (x15344 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15344) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : t -> GLenum.t) =
      fun (x15345 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15345) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : t -> GLenum.t) =
      fun (x15346 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15346) "CURRENT_VERTEX_ATTRIB")
    let (get_CW : t -> GLenum.t) =
      fun (x15347 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15347) "CW")
    let (get_DECR : t -> GLenum.t) =
      fun (x15348 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15348) "DECR")
    let (get_DECR_WRAP : t -> GLenum.t) =
      fun (x15349 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15349) "DECR_WRAP")
    let (get_DELETE_STATUS : t -> GLenum.t) =
      fun (x15350 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15350) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : t -> GLenum.t) =
      fun (x15351 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15351) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : t -> GLenum.t) =
      fun (x15352 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15352) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : t -> GLenum.t) =
      fun (x15353 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15353) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : t -> GLenum.t) =
      fun (x15354 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15354) "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : t -> GLenum.t) =
      fun (x15355 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15355) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : t -> GLenum.t) =
      fun (x15356 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15356) "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : t -> GLenum.t) =
      fun (x15357 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15357) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : t -> GLenum.t) =
      fun (x15358 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15358) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : t -> GLenum.t) =
      fun (x15359 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15359) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : t -> GLenum.t) =
      fun (x15360 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15360) "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : t -> GLenum.t) =
      fun (x15361 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15361) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : t -> GLenum.t) =
      fun (x15362 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15362) "DEPTH_WRITEMASK")
    let (get_DITHER : t -> GLenum.t) =
      fun (x15363 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15363) "DITHER")
    let (get_DONT_CARE : t -> GLenum.t) =
      fun (x15364 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15364) "DONT_CARE")
    let (get_DST_ALPHA : t -> GLenum.t) =
      fun (x15365 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15365) "DST_ALPHA")
    let (get_DST_COLOR : t -> GLenum.t) =
      fun (x15366 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15366) "DST_COLOR")
    let (get_DYNAMIC_DRAW : t -> GLenum.t) =
      fun (x15367 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15367) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : t -> GLenum.t) =
      fun (x15368 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15368) "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15369 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15369) "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : t -> GLenum.t) =
      fun (x15370 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15370) "EQUAL")
    let (get_FASTEST : t -> GLenum.t) =
      fun (x15371 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15371) "FASTEST")
    let (get_FLOAT : t -> GLenum.t) =
      fun (x15372 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15372) "FLOAT")
    let (get_FLOAT_MAT2 : t -> GLenum.t) =
      fun (x15373 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15373) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : t -> GLenum.t) =
      fun (x15374 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15374) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : t -> GLenum.t) =
      fun (x15375 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15375) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : t -> GLenum.t) =
      fun (x15376 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15376) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : t -> GLenum.t) =
      fun (x15377 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15377) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : t -> GLenum.t) =
      fun (x15378 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15378) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : t -> GLenum.t) =
      fun (x15379 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15379) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : t -> GLenum.t) =
      fun (x15380 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15380) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : t -> GLenum.t) =
      fun (x15381 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15381)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : t -> GLenum.t) =
      fun (x15382 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15382)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : t -> GLenum.t) =
      fun (x15383 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15383)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : t -> GLenum.t) =
      fun (x15384 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15384)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : t -> GLenum.t) =
      fun (x15385 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15385) "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : t -> GLenum.t) =
      fun (x15386 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15386) "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : t -> GLenum.t) =
      fun (x15387 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15387)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : t -> GLenum.t) =
      fun (x15388 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15388)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : t -> GLenum.t) =
      fun (x15389 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15389)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : t -> GLenum.t) =
      fun (x15390 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15390) "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : t -> GLenum.t) =
      fun (x15391 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15391) "FRONT")
    let (get_FRONT_AND_BACK : t -> GLenum.t) =
      fun (x15392 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15392) "FRONT_AND_BACK")
    let (get_FRONT_FACE : t -> GLenum.t) =
      fun (x15393 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15393) "FRONT_FACE")
    let (get_FUNC_ADD : t -> GLenum.t) =
      fun (x15394 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15394) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : t -> GLenum.t) =
      fun (x15395 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15395) "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : t -> GLenum.t) =
      fun (x15396 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15396) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : t -> GLenum.t) =
      fun (x15397 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15397) "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : t -> GLenum.t) =
      fun (x15398 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15398) "GEQUAL")
    let (get_GREATER : t -> GLenum.t) =
      fun (x15399 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15399) "GREATER")
    let (get_GREEN_BITS : t -> GLenum.t) =
      fun (x15400 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15400) "GREEN_BITS")
    let (get_HIGH_FLOAT : t -> GLenum.t) =
      fun (x15401 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15401) "HIGH_FLOAT")
    let (get_HIGH_INT : t -> GLenum.t) =
      fun (x15402 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15402) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : t -> GLenum.t) =
      fun (x15403 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15403)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : t -> GLenum.t) =
      fun (x15404 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15404)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : t -> GLenum.t) =
      fun (x15405 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15405) "INCR")
    let (get_INCR_WRAP : t -> GLenum.t) =
      fun (x15406 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15406) "INCR_WRAP")
    let (get_INT : t -> GLenum.t) =
      fun (x15407 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15407) "INT")
    let (get_INT_VEC2 : t -> GLenum.t) =
      fun (x15408 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15408) "INT_VEC2")
    let (get_INT_VEC3 : t -> GLenum.t) =
      fun (x15409 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15409) "INT_VEC3")
    let (get_INT_VEC4 : t -> GLenum.t) =
      fun (x15410 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15410) "INT_VEC4")
    let (get_INVALID_ENUM : t -> GLenum.t) =
      fun (x15411 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15411) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : t -> GLenum.t) =
      fun (x15412 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15412)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : t -> GLenum.t) =
      fun (x15413 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15413) "INVALID_OPERATION")
    let (get_INVALID_VALUE : t -> GLenum.t) =
      fun (x15414 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15414) "INVALID_VALUE")
    let (get_INVERT : t -> GLenum.t) =
      fun (x15415 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15415) "INVERT")
    let (get_KEEP : t -> GLenum.t) =
      fun (x15416 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15416) "KEEP")
    let (get_LEQUAL : t -> GLenum.t) =
      fun (x15417 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15417) "LEQUAL")
    let (get_LESS : t -> GLenum.t) =
      fun (x15418 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15418) "LESS")
    let (get_LINEAR : t -> GLenum.t) =
      fun (x15419 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15419) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : t -> GLenum.t) =
      fun (x15420 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15420) "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : t -> GLenum.t) =
      fun (x15421 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15421) "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : t -> GLenum.t) =
      fun (x15422 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15422) "LINES")
    let (get_LINE_LOOP : t -> GLenum.t) =
      fun (x15423 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15423) "LINE_LOOP")
    let (get_LINE_STRIP : t -> GLenum.t) =
      fun (x15424 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15424) "LINE_STRIP")
    let (get_LINE_WIDTH : t -> GLenum.t) =
      fun (x15425 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15425) "LINE_WIDTH")
    let (get_LINK_STATUS : t -> GLenum.t) =
      fun (x15426 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15426) "LINK_STATUS")
    let (get_LOW_FLOAT : t -> GLenum.t) =
      fun (x15427 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15427) "LOW_FLOAT")
    let (get_LOW_INT : t -> GLenum.t) =
      fun (x15428 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15428) "LOW_INT")
    let (get_LUMINANCE : t -> GLenum.t) =
      fun (x15429 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15429) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : t -> GLenum.t) =
      fun (x15430 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15430) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x15431 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15431)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x15432 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15432) "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : t -> GLenum.t) =
      fun (x15433 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15433) "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : t -> GLenum.t) =
      fun (x15434 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15434) "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x15435 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15435) "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : t -> GLenum.t) =
      fun (x15436 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15436) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : t -> GLenum.t) =
      fun (x15437 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15437) "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : t -> GLenum.t) =
      fun (x15438 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15438) "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : t -> GLenum.t) =
      fun (x15439 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15439)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : t -> GLenum.t) =
      fun (x15440 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15440) "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : t -> GLenum.t) =
      fun (x15441 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15441) "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : t -> GLenum.t) =
      fun (x15442 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15442) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : t -> GLenum.t) =
      fun (x15443 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15443) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : t -> GLenum.t) =
      fun (x15444 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15444) "MIRRORED_REPEAT")
    let (get_NEAREST : t -> GLenum.t) =
      fun (x15445 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15445) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : t -> GLenum.t) =
      fun (x15446 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15446) "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : t -> GLenum.t) =
      fun (x15447 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15447) "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : t -> GLenum.t) =
      fun (x15448 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15448) "NEVER")
    let (get_NICEST : t -> GLenum.t) =
      fun (x15449 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15449) "NICEST")
    let (get_NONE : t -> GLenum.t) =
      fun (x15450 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15450) "NONE")
    let (get_NOTEQUAL : t -> GLenum.t) =
      fun (x15451 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15451) "NOTEQUAL")
    let (get_NO_ERROR : t -> GLenum.t) =
      fun (x15452 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15452) "NO_ERROR")
    let (get_ONE : t -> GLenum.t) =
      fun (x15453 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15453) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : t -> GLenum.t) =
      fun (x15454 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15454) "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : t -> GLenum.t) =
      fun (x15455 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15455) "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : t -> GLenum.t) =
      fun (x15456 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15456) "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : t -> GLenum.t) =
      fun (x15457 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15457) "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : t -> GLenum.t) =
      fun (x15458 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15458) "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : t -> GLenum.t) =
      fun (x15459 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15459) "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : t -> GLenum.t) =
      fun (x15460 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15460) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : t -> GLenum.t) =
      fun (x15461 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15461) "PACK_ALIGNMENT")
    let (get_POINTS : t -> GLenum.t) =
      fun (x15462 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15462) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : t -> GLenum.t) =
      fun (x15463 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15463) "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : t -> GLenum.t) =
      fun (x15464 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15464) "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : t -> GLenum.t) =
      fun (x15465 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15465) "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : t -> GLenum.t) =
      fun (x15466 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15466) "RED_BITS")
    let (get_RENDERBUFFER : t -> GLenum.t) =
      fun (x15467 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15467) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : t -> GLenum.t) =
      fun (x15468 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15468) "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : t -> GLenum.t) =
      fun (x15469 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15469) "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : t -> GLenum.t) =
      fun (x15470 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15470) "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : t -> GLenum.t) =
      fun (x15471 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15471) "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : t -> GLenum.t) =
      fun (x15472 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15472) "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : t -> GLenum.t) =
      fun (x15473 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15473) "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : t -> GLenum.t) =
      fun (x15474 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15474) "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : t -> GLenum.t) =
      fun (x15475 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15475) "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : t -> GLenum.t) =
      fun (x15476 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15476) "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : t -> GLenum.t) =
      fun (x15477 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15477) "RENDERBUFFER_WIDTH")
    let (get_RENDERER : t -> GLenum.t) =
      fun (x15478 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15478) "RENDERER")
    let (get_REPEAT : t -> GLenum.t) =
      fun (x15479 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15479) "REPEAT")
    let (get_REPLACE : t -> GLenum.t) =
      fun (x15480 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15480) "REPLACE")
    let (get_RGB : t -> GLenum.t) =
      fun (x15481 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15481) "RGB")
    let (get_RGB565 : t -> GLenum.t) =
      fun (x15482 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15482) "RGB565")
    let (get_RGB5_A1 : t -> GLenum.t) =
      fun (x15483 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15483) "RGB5_A1")
    let (get_RGBA : t -> GLenum.t) =
      fun (x15484 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15484) "RGBA")
    let (get_RGBA4 : t -> GLenum.t) =
      fun (x15485 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15485) "RGBA4")
    let (get_SAMPLER_2D : t -> GLenum.t) =
      fun (x15486 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15486) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : t -> GLenum.t) =
      fun (x15487 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15487) "SAMPLER_CUBE")
    let (get_SAMPLES : t -> GLenum.t) =
      fun (x15488 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15488) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : t -> GLenum.t) =
      fun (x15489 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15489) "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : t -> GLenum.t) =
      fun (x15490 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15490) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : t -> GLenum.t) =
      fun (x15491 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15491) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : t -> GLenum.t) =
      fun (x15492 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15492) "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : t -> GLenum.t) =
      fun (x15493 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15493) "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : t -> GLenum.t) =
      fun (x15494 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15494) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : t -> GLenum.t) =
      fun (x15495 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15495) "SCISSOR_TEST")
    let (get_SHADER_TYPE : t -> GLenum.t) =
      fun (x15496 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15496) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : t -> GLenum.t) =
      fun (x15497 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15497) "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : t -> GLenum.t) =
      fun (x15498 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15498) "SHORT")
    let (get_SRC_ALPHA : t -> GLenum.t) =
      fun (x15499 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15499) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : t -> GLenum.t) =
      fun (x15500 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15500) "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : t -> GLenum.t) =
      fun (x15501 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15501) "SRC_COLOR")
    let (get_STATIC_DRAW : t -> GLenum.t) =
      fun (x15502 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15502) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : t -> GLenum.t) =
      fun (x15503 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15503) "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : t -> GLenum.t) =
      fun (x15504 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15504) "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : t -> GLenum.t) =
      fun (x15505 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15505) "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : t -> GLenum.t) =
      fun (x15506 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15506) "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : t -> GLenum.t) =
      fun (x15507 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15507) "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : t -> GLenum.t) =
      fun (x15508 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15508) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : t -> GLenum.t) =
      fun (x15509 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15509) "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : t -> GLenum.t) =
      fun (x15510 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15510) "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : t -> GLenum.t) =
      fun (x15511 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15511) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : t -> GLenum.t) =
      fun (x15512 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15512) "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : t -> GLenum.t) =
      fun (x15513 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15513) "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : t -> GLenum.t) =
      fun (x15514 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15514) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : t -> GLenum.t) =
      fun (x15515 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15515) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : t -> GLenum.t) =
      fun (x15516 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15516) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : t -> GLenum.t) =
      fun (x15517 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15517) "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : t -> GLenum.t) =
      fun (x15518 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15518) "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : t -> GLenum.t) =
      fun (x15519 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15519) "STENCIL_REF")
    let (get_STENCIL_TEST : t -> GLenum.t) =
      fun (x15520 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15520) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : t -> GLenum.t) =
      fun (x15521 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15521) "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : t -> GLenum.t) =
      fun (x15522 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15522) "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : t -> GLenum.t) =
      fun (x15523 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15523) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : t -> GLenum.t) =
      fun (x15524 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15524) "SUBPIXEL_BITS")
    let (get_TEXTURE : t -> GLenum.t) =
      fun (x15525 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15525) "TEXTURE")
    let (get_TEXTURE0 : t -> GLenum.t) =
      fun (x15526 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15526) "TEXTURE0")
    let (get_TEXTURE1 : t -> GLenum.t) =
      fun (x15527 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15527) "TEXTURE1")
    let (get_TEXTURE10 : t -> GLenum.t) =
      fun (x15528 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15528) "TEXTURE10")
    let (get_TEXTURE11 : t -> GLenum.t) =
      fun (x15529 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15529) "TEXTURE11")
    let (get_TEXTURE12 : t -> GLenum.t) =
      fun (x15530 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15530) "TEXTURE12")
    let (get_TEXTURE13 : t -> GLenum.t) =
      fun (x15531 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15531) "TEXTURE13")
    let (get_TEXTURE14 : t -> GLenum.t) =
      fun (x15532 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15532) "TEXTURE14")
    let (get_TEXTURE15 : t -> GLenum.t) =
      fun (x15533 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15533) "TEXTURE15")
    let (get_TEXTURE16 : t -> GLenum.t) =
      fun (x15534 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15534) "TEXTURE16")
    let (get_TEXTURE17 : t -> GLenum.t) =
      fun (x15535 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15535) "TEXTURE17")
    let (get_TEXTURE18 : t -> GLenum.t) =
      fun (x15536 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15536) "TEXTURE18")
    let (get_TEXTURE19 : t -> GLenum.t) =
      fun (x15537 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15537) "TEXTURE19")
    let (get_TEXTURE2 : t -> GLenum.t) =
      fun (x15538 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15538) "TEXTURE2")
    let (get_TEXTURE20 : t -> GLenum.t) =
      fun (x15539 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15539) "TEXTURE20")
    let (get_TEXTURE21 : t -> GLenum.t) =
      fun (x15540 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15540) "TEXTURE21")
    let (get_TEXTURE22 : t -> GLenum.t) =
      fun (x15541 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15541) "TEXTURE22")
    let (get_TEXTURE23 : t -> GLenum.t) =
      fun (x15542 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15542) "TEXTURE23")
    let (get_TEXTURE24 : t -> GLenum.t) =
      fun (x15543 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15543) "TEXTURE24")
    let (get_TEXTURE25 : t -> GLenum.t) =
      fun (x15544 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15544) "TEXTURE25")
    let (get_TEXTURE26 : t -> GLenum.t) =
      fun (x15545 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15545) "TEXTURE26")
    let (get_TEXTURE27 : t -> GLenum.t) =
      fun (x15546 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15546) "TEXTURE27")
    let (get_TEXTURE28 : t -> GLenum.t) =
      fun (x15547 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15547) "TEXTURE28")
    let (get_TEXTURE29 : t -> GLenum.t) =
      fun (x15548 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15548) "TEXTURE29")
    let (get_TEXTURE3 : t -> GLenum.t) =
      fun (x15549 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15549) "TEXTURE3")
    let (get_TEXTURE30 : t -> GLenum.t) =
      fun (x15550 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15550) "TEXTURE30")
    let (get_TEXTURE31 : t -> GLenum.t) =
      fun (x15551 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15551) "TEXTURE31")
    let (get_TEXTURE4 : t -> GLenum.t) =
      fun (x15552 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15552) "TEXTURE4")
    let (get_TEXTURE5 : t -> GLenum.t) =
      fun (x15553 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15553) "TEXTURE5")
    let (get_TEXTURE6 : t -> GLenum.t) =
      fun (x15554 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15554) "TEXTURE6")
    let (get_TEXTURE7 : t -> GLenum.t) =
      fun (x15555 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15555) "TEXTURE7")
    let (get_TEXTURE8 : t -> GLenum.t) =
      fun (x15556 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15556) "TEXTURE8")
    let (get_TEXTURE9 : t -> GLenum.t) =
      fun (x15557 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15557) "TEXTURE9")
    let (get_TEXTURE_2D : t -> GLenum.t) =
      fun (x15558 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15558) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : t -> GLenum.t) =
      fun (x15559 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15559) "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : t -> GLenum.t) =
      fun (x15560 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15560) "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : t -> GLenum.t) =
      fun (x15561 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15561) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : t -> GLenum.t) =
      fun (x15562 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15562) "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : t -> GLenum.t) =
      fun (x15563 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15563) "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : t -> GLenum.t) =
      fun (x15564 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15564) "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : t -> GLenum.t) =
      fun (x15565 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15565) "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : t -> GLenum.t) =
      fun (x15566 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15566) "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : t -> GLenum.t) =
      fun (x15567 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15567) "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : t -> GLenum.t) =
      fun (x15568 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15568) "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : t -> GLenum.t) =
      fun (x15569 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15569) "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : t -> GLenum.t) =
      fun (x15570 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15570) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : t -> GLenum.t) =
      fun (x15571 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15571) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : t -> GLenum.t) =
      fun (x15572 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15572) "TRIANGLES")
    let (get_TRIANGLE_FAN : t -> GLenum.t) =
      fun (x15573 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15573) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : t -> GLenum.t) =
      fun (x15574 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15574) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : t -> GLenum.t) =
      fun (x15575 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15575) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : t -> GLenum.t) =
      fun (x15576 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15576)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : t -> GLenum.t) =
      fun (x15577 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15577) "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : t -> GLenum.t) =
      fun (x15578 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15578)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : t -> GLenum.t) =
      fun (x15579 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15579) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : t -> GLenum.t) =
      fun (x15580 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15580) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : t -> GLenum.t) =
      fun (x15581 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15581) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : t -> GLenum.t) =
      fun (x15582 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15582) "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : t -> GLenum.t) =
      fun (x15583 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15583) "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : t -> GLenum.t) =
      fun (x15584 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15584) "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : t -> GLenum.t) =
      fun (x15585 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15585) "VALIDATE_STATUS")
    let (get_VENDOR : t -> GLenum.t) =
      fun (x15586 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15586) "VENDOR")
    let (get_VERSION : t -> GLenum.t) =
      fun (x15587 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15587) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : t -> GLenum.t) =
      fun (x15588 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15588)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : t -> GLenum.t) =
      fun (x15589 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15589) "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : t -> GLenum.t) =
      fun (x15590 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15590)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : t -> GLenum.t) =
      fun (x15591 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15591) "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : t -> GLenum.t) =
      fun (x15592 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15592) "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : t -> GLenum.t) =
      fun (x15593 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15593) "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : t -> GLenum.t) =
      fun (x15594 : t) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15594) "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : t -> GLenum.t) =
      fun (x15595 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15595) "VERTEX_SHADER")
    let (get_VIEWPORT : t -> GLenum.t) =
      fun (x15596 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15596) "VIEWPORT")
    let (get_ZERO : t -> GLenum.t) =
      fun (x15597 : t) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (t_to_js x15597) "ZERO")
  end
 and
  WebGL2RenderingContext:sig
                           type t =
                             [ `WebGL2RenderingContext 
                             | `WebGL2RenderingContextBase 
                             | `WebGL2RenderingContextOverloads 
                             | `WebGLRenderingContextBase ] intf
                           type t_0 = t
                           [@@@js.stop ]
                           type tags =
                             [ `WebGL2RenderingContext 
                             | `WebGL2RenderingContextBase 
                             | `WebGL2RenderingContextOverloads 
                             | `WebGLRenderingContextBase ]
                           type tags_0 = tags
                           [@@@js.start ]
                           [@@@js.implem
                             type tags =
                               [ `WebGL2RenderingContext 
                               | `WebGL2RenderingContextBase 
                               | `WebGL2RenderingContextOverloads 
                               | `WebGLRenderingContextBase ]
                             type tags_0 = tags]
                           type 'tags this =
                             'tags intf constraint 'tags =
                                         [> `WebGL2RenderingContext ]
                           val t_to_js : t -> Ojs.t
                           val t_of_js : Ojs.t -> t
                           val t_0_to_js : t_0 -> Ojs.t
                           val t_0_of_js : Ojs.t -> t_0
                           val cast_from : 'tags this -> t
                           val prototype : unit -> t
                           val create : unit -> t
                           val active_uniform_blocks : unit -> GLenum.t
                           val already_signaled : unit -> GLenum.t
                           val any_samples_passed : unit -> GLenum.t
                           val any_samples_passed_conservative :
                             unit -> GLenum.t
                           val color : unit -> GLenum.t
                           val color_attachment1 : unit -> GLenum.t
                           val color_attachment10 : unit -> GLenum.t
                           val color_attachment11 : unit -> GLenum.t
                           val color_attachment12 : unit -> GLenum.t
                           val color_attachment13 : unit -> GLenum.t
                           val color_attachment14 : unit -> GLenum.t
                           val color_attachment15 : unit -> GLenum.t
                           val color_attachment2 : unit -> GLenum.t
                           val color_attachment3 : unit -> GLenum.t
                           val color_attachment4 : unit -> GLenum.t
                           val color_attachment5 : unit -> GLenum.t
                           val color_attachment6 : unit -> GLenum.t
                           val color_attachment7 : unit -> GLenum.t
                           val color_attachment8 : unit -> GLenum.t
                           val color_attachment9 : unit -> GLenum.t
                           val compare_ref_to_texture : unit -> GLenum.t
                           val condition_satisfied : unit -> GLenum.t
                           val copy_read_buffer : unit -> GLenum.t
                           val copy_read_buffer_binding : unit -> GLenum.t
                           val copy_write_buffer : unit -> GLenum.t
                           val copy_write_buffer_binding : unit -> GLenum.t
                           val current_query : unit -> GLenum.t
                           val depth : unit -> GLenum.t
                           val depth24_stencil8 : unit -> GLenum.t
                           val depth32f_stencil8 : unit -> GLenum.t
                           val depth_component24 : unit -> GLenum.t
                           val depth_component32f : unit -> GLenum.t
                           val draw_buffer0 : unit -> GLenum.t
                           val draw_buffer1 : unit -> GLenum.t
                           val draw_buffer10 : unit -> GLenum.t
                           val draw_buffer11 : unit -> GLenum.t
                           val draw_buffer12 : unit -> GLenum.t
                           val draw_buffer13 : unit -> GLenum.t
                           val draw_buffer14 : unit -> GLenum.t
                           val draw_buffer15 : unit -> GLenum.t
                           val draw_buffer2 : unit -> GLenum.t
                           val draw_buffer3 : unit -> GLenum.t
                           val draw_buffer4 : unit -> GLenum.t
                           val draw_buffer5 : unit -> GLenum.t
                           val draw_buffer6 : unit -> GLenum.t
                           val draw_buffer7 : unit -> GLenum.t
                           val draw_buffer8 : unit -> GLenum.t
                           val draw_buffer9 : unit -> GLenum.t
                           val draw_framebuffer : unit -> GLenum.t
                           val draw_framebuffer_binding : unit -> GLenum.t
                           val dynamic_copy : unit -> GLenum.t
                           val dynamic_read : unit -> GLenum.t
                           val float_32_unsigned_int_24_8_rev :
                             unit -> GLenum.t
                           val fLOAT_MAT2x3 : unit -> GLenum.t
                           val fLOAT_MAT2x4 : unit -> GLenum.t
                           val fLOAT_MAT3x2 : unit -> GLenum.t
                           val fLOAT_MAT3x4 : unit -> GLenum.t
                           val fLOAT_MAT4x2 : unit -> GLenum.t
                           val fLOAT_MAT4x3 : unit -> GLenum.t
                           val fragment_shader_derivative_hint :
                             unit -> GLenum.t
                           val framebuffer_attachment_alpha_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_blue_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_color_encoding :
                             unit -> GLenum.t
                           val framebuffer_attachment_component_type :
                             unit -> GLenum.t
                           val framebuffer_attachment_depth_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_green_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_red_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_stencil_size :
                             unit -> GLenum.t
                           val framebuffer_attachment_texture_layer :
                             unit -> GLenum.t
                           val framebuffer_default : unit -> GLenum.t
                           val framebuffer_incomplete_multisample :
                             unit -> GLenum.t
                           val half_float : unit -> GLenum.t
                           val interleaved_attribs : unit -> GLenum.t
                           val int_2_10_10_10_rev : unit -> GLenum.t
                           val int_sampler_2d : unit -> GLenum.t
                           val int_sampler_2d_array : unit -> GLenum.t
                           val int_sampler_3d : unit -> GLenum.t
                           val int_sampler_cube : unit -> GLenum.t
                           val invalid_index : unit -> GLenum.t
                           val max : unit -> GLenum.t
                           val max_3d_texture_size : unit -> GLenum.t
                           val max_array_texture_layers : unit -> GLenum.t
                           val max_client_wait_timeout_webgl :
                             unit -> GLenum.t
                           val max_color_attachments : unit -> GLenum.t
                           val max_combined_fragment_uniform_components :
                             unit -> GLenum.t
                           val max_combined_uniform_blocks : unit -> GLenum.t
                           val max_combined_vertex_uniform_components :
                             unit -> GLenum.t
                           val max_draw_buffers : unit -> GLenum.t
                           val max_elements_indices : unit -> GLenum.t
                           val max_elements_vertices : unit -> GLenum.t
                           val max_element_index : unit -> GLenum.t
                           val max_fragment_input_components :
                             unit -> GLenum.t
                           val max_fragment_uniform_blocks : unit -> GLenum.t
                           val max_fragment_uniform_components :
                             unit -> GLenum.t
                           val max_program_texel_offset : unit -> GLenum.t
                           val max_samples : unit -> GLenum.t
                           val max_server_wait_timeout : unit -> GLenum.t
                           val max_texture_lod_bias : unit -> GLenum.t
                           val max_transform_feedback_interleaved_components
                             : unit -> GLenum.t
                           val max_transform_feedback_separate_attribs :
                             unit -> GLenum.t
                           val max_transform_feedback_separate_components :
                             unit -> GLenum.t
                           val max_uniform_block_size : unit -> GLenum.t
                           val max_uniform_buffer_bindings : unit -> GLenum.t
                           val max_varying_components : unit -> GLenum.t
                           val max_vertex_output_components :
                             unit -> GLenum.t
                           val max_vertex_uniform_blocks : unit -> GLenum.t
                           val max_vertex_uniform_components :
                             unit -> GLenum.t
                           val min : unit -> GLenum.t
                           val min_program_texel_offset : unit -> GLenum.t
                           val object_type : unit -> GLenum.t
                           val pack_row_length : unit -> GLenum.t
                           val pack_skip_pixels : unit -> GLenum.t
                           val pack_skip_rows : unit -> GLenum.t
                           val pixel_pack_buffer : unit -> GLenum.t
                           val pixel_pack_buffer_binding : unit -> GLenum.t
                           val pixel_unpack_buffer : unit -> GLenum.t
                           val pixel_unpack_buffer_binding : unit -> GLenum.t
                           val query_result : unit -> GLenum.t
                           val query_result_available : unit -> GLenum.t
                           val r11f_g11f_b10f : unit -> GLenum.t
                           val r16f : unit -> GLenum.t
                           val r16i : unit -> GLenum.t
                           val r16ui : unit -> GLenum.t
                           val r32f : unit -> GLenum.t
                           val r32i : unit -> GLenum.t
                           val r32ui : unit -> GLenum.t
                           val r8 : unit -> GLenum.t
                           val r8i : unit -> GLenum.t
                           val r8ui : unit -> GLenum.t
                           val r8_snorm : unit -> GLenum.t
                           val rasterizer_discard : unit -> GLenum.t
                           val read_buffer : unit -> GLenum.t
                           val read_framebuffer : unit -> GLenum.t
                           val read_framebuffer_binding : unit -> GLenum.t
                           val red : unit -> GLenum.t
                           val red_integer : unit -> GLenum.t
                           val renderbuffer_samples : unit -> GLenum.t
                           val rg : unit -> GLenum.t
                           val rg16f : unit -> GLenum.t
                           val rg16i : unit -> GLenum.t
                           val rg16ui : unit -> GLenum.t
                           val rg32f : unit -> GLenum.t
                           val rg32i : unit -> GLenum.t
                           val rg32ui : unit -> GLenum.t
                           val rg8 : unit -> GLenum.t
                           val rg8i : unit -> GLenum.t
                           val rg8ui : unit -> GLenum.t
                           val rg8_snorm : unit -> GLenum.t
                           val rgb10_a2 : unit -> GLenum.t
                           val rgb10_a2ui : unit -> GLenum.t
                           val rgb16f : unit -> GLenum.t
                           val rgb16i : unit -> GLenum.t
                           val rgb16ui : unit -> GLenum.t
                           val rgb32f : unit -> GLenum.t
                           val rgb32i : unit -> GLenum.t
                           val rgb32ui : unit -> GLenum.t
                           val rgb8 : unit -> GLenum.t
                           val rgb8i : unit -> GLenum.t
                           val rgb8ui : unit -> GLenum.t
                           val rgb8_snorm : unit -> GLenum.t
                           val rgb9_e5 : unit -> GLenum.t
                           val rgba16f : unit -> GLenum.t
                           val rgba16i : unit -> GLenum.t
                           val rgba16ui : unit -> GLenum.t
                           val rgba32f : unit -> GLenum.t
                           val rgba32i : unit -> GLenum.t
                           val rgba32ui : unit -> GLenum.t
                           val rgba8 : unit -> GLenum.t
                           val rgba8i : unit -> GLenum.t
                           val rgba8ui : unit -> GLenum.t
                           val rgba8_snorm : unit -> GLenum.t
                           val rgba_integer : unit -> GLenum.t
                           val rgb_integer : unit -> GLenum.t
                           val rg_integer : unit -> GLenum.t
                           val sampler_2d_array : unit -> GLenum.t
                           val sampler_2d_array_shadow : unit -> GLenum.t
                           val sampler_2d_shadow : unit -> GLenum.t
                           val sampler_3d : unit -> GLenum.t
                           val sampler_binding : unit -> GLenum.t
                           val sampler_cube_shadow : unit -> GLenum.t
                           val separate_attribs : unit -> GLenum.t
                           val signaled : unit -> GLenum.t
                           val signed_normalized : unit -> GLenum.t
                           val srgb : unit -> GLenum.t
                           val srgb8 : unit -> GLenum.t
                           val srgb8_alpha8 : unit -> GLenum.t
                           val static_copy : unit -> GLenum.t
                           val static_read : unit -> GLenum.t
                           val stencil : unit -> GLenum.t
                           val stream_copy : unit -> GLenum.t
                           val stream_read : unit -> GLenum.t
                           val sync_condition : unit -> GLenum.t
                           val sync_fence : unit -> GLenum.t
                           val sync_flags : unit -> GLenum.t
                           val sync_flush_commands_bit : unit -> GLenum.t
                           val sync_gpu_commands_complete : unit -> GLenum.t
                           val sync_status : unit -> GLenum.t
                           val texture_2d_array : unit -> GLenum.t
                           val texture_3d : unit -> GLenum.t
                           val texture_base_level : unit -> GLenum.t
                           val texture_binding_2d_array : unit -> GLenum.t
                           val texture_binding_3d : unit -> GLenum.t
                           val texture_compare_func : unit -> GLenum.t
                           val texture_compare_mode : unit -> GLenum.t
                           val texture_immutable_format : unit -> GLenum.t
                           val texture_immutable_levels : unit -> GLenum.t
                           val texture_max_level : unit -> GLenum.t
                           val texture_max_lod : unit -> GLenum.t
                           val texture_min_lod : unit -> GLenum.t
                           val texture_wrap_r : unit -> GLenum.t
                           val timeout_expired : unit -> GLenum.t
                           val timeout_ignored : unit -> GLint64.t
                           val transform_feedback : unit -> GLenum.t
                           val transform_feedback_active : unit -> GLenum.t
                           val transform_feedback_binding : unit -> GLenum.t
                           val transform_feedback_buffer : unit -> GLenum.t
                           val transform_feedback_buffer_binding :
                             unit -> GLenum.t
                           val transform_feedback_buffer_mode :
                             unit -> GLenum.t
                           val transform_feedback_buffer_size :
                             unit -> GLenum.t
                           val transform_feedback_buffer_start :
                             unit -> GLenum.t
                           val transform_feedback_paused : unit -> GLenum.t
                           val transform_feedback_primitives_written :
                             unit -> GLenum.t
                           val transform_feedback_varyings : unit -> GLenum.t
                           val uniform_array_stride : unit -> GLenum.t
                           val uniform_block_active_uniforms :
                             unit -> GLenum.t
                           val uniform_block_active_uniform_indices :
                             unit -> GLenum.t
                           val uniform_block_binding : unit -> GLenum.t
                           val uniform_block_data_size : unit -> GLenum.t
                           val uniform_block_index : unit -> GLenum.t
                           val uniform_block_referenced_by_fragment_shader :
                             unit -> GLenum.t
                           val uniform_block_referenced_by_vertex_shader :
                             unit -> GLenum.t
                           val uniform_buffer : unit -> GLenum.t
                           val uniform_buffer_binding : unit -> GLenum.t
                           val uniform_buffer_offset_alignment :
                             unit -> GLenum.t
                           val uniform_buffer_size : unit -> GLenum.t
                           val uniform_buffer_start : unit -> GLenum.t
                           val uniform_is_row_major : unit -> GLenum.t
                           val uniform_matrix_stride : unit -> GLenum.t
                           val uniform_offset : unit -> GLenum.t
                           val uniform_size : unit -> GLenum.t
                           val uniform_type : unit -> GLenum.t
                           val unpack_image_height : unit -> GLenum.t
                           val unpack_row_length : unit -> GLenum.t
                           val unpack_skip_images : unit -> GLenum.t
                           val unpack_skip_pixels : unit -> GLenum.t
                           val unpack_skip_rows : unit -> GLenum.t
                           val unsignaled : unit -> GLenum.t
                           val unsigned_int_10f_11f_11f_rev :
                             unit -> GLenum.t
                           val unsigned_int_24_8 : unit -> GLenum.t
                           val unsigned_int_2_10_10_10_rev : unit -> GLenum.t
                           val unsigned_int_5_9_9_9_rev : unit -> GLenum.t
                           val unsigned_int_sampler_2d : unit -> GLenum.t
                           val unsigned_int_sampler_2d_array :
                             unit -> GLenum.t
                           val unsigned_int_sampler_3d : unit -> GLenum.t
                           val unsigned_int_sampler_cube : unit -> GLenum.t
                           val unsigned_int_vec2 : unit -> GLenum.t
                           val unsigned_int_vec3 : unit -> GLenum.t
                           val unsigned_int_vec4 : unit -> GLenum.t
                           val unsigned_normalized : unit -> GLenum.t
                           val vertex_array_binding : unit -> GLenum.t
                           val vertex_attrib_array_divisor : unit -> GLenum.t
                           val vertex_attrib_array_integer : unit -> GLenum.t
                           val wait_failed : unit -> GLenum.t
                           val active_attributes : unit -> GLenum.t
                           val active_texture : unit -> GLenum.t
                           val active_uniforms : unit -> GLenum.t
                           val aliased_line_width_range : unit -> GLenum.t
                           val aliased_point_size_range : unit -> GLenum.t
                           val alpha : unit -> GLenum.t
                           val alpha_bits : unit -> GLenum.t
                           val always : unit -> GLenum.t
                           val array_buffer : unit -> GLenum.t
                           val array_buffer_binding : unit -> GLenum.t
                           val attached_shaders : unit -> GLenum.t
                           val back : unit -> GLenum.t
                           val blend : unit -> GLenum.t
                           val blend_color : unit -> GLenum.t
                           val blend_dst_alpha : unit -> GLenum.t
                           val blend_dst_rgb : unit -> GLenum.t
                           val blend_equation : unit -> GLenum.t
                           val blend_equation_alpha : unit -> GLenum.t
                           val blend_equation_rgb : unit -> GLenum.t
                           val blend_src_alpha : unit -> GLenum.t
                           val blend_src_rgb : unit -> GLenum.t
                           val blue_bits : unit -> GLenum.t
                           val bool : unit -> GLenum.t
                           val bool_vec2 : unit -> GLenum.t
                           val bool_vec3 : unit -> GLenum.t
                           val bool_vec4 : unit -> GLenum.t
                           val browser_default_webgl : unit -> GLenum.t
                           val buffer_size : unit -> GLenum.t
                           val buffer_usage : unit -> GLenum.t
                           val byte : unit -> GLenum.t
                           val ccw : unit -> GLenum.t
                           val clamp_to_edge : unit -> GLenum.t
                           val color_attachment0 : unit -> GLenum.t
                           val color_buffer_bit : unit -> GLenum.t
                           val color_clear_value : unit -> GLenum.t
                           val color_writemask : unit -> GLenum.t
                           val compile_status : unit -> GLenum.t
                           val compressed_texture_formats : unit -> GLenum.t
                           val constant_alpha : unit -> GLenum.t
                           val constant_color : unit -> GLenum.t
                           val context_lost_webgl : unit -> GLenum.t
                           val cull_face : unit -> GLenum.t
                           val cull_face_mode : unit -> GLenum.t
                           val current_program : unit -> GLenum.t
                           val current_vertex_attrib : unit -> GLenum.t
                           val cw : unit -> GLenum.t
                           val decr : unit -> GLenum.t
                           val decr_wrap : unit -> GLenum.t
                           val delete_status : unit -> GLenum.t
                           val depth_attachment : unit -> GLenum.t
                           val depth_bits : unit -> GLenum.t
                           val depth_buffer_bit : unit -> GLenum.t
                           val depth_clear_value : unit -> GLenum.t
                           val depth_component : unit -> GLenum.t
                           val depth_component16 : unit -> GLenum.t
                           val depth_func : unit -> GLenum.t
                           val depth_range : unit -> GLenum.t
                           val depth_stencil : unit -> GLenum.t
                           val depth_stencil_attachment : unit -> GLenum.t
                           val depth_test : unit -> GLenum.t
                           val depth_writemask : unit -> GLenum.t
                           val dither : unit -> GLenum.t
                           val dont_care : unit -> GLenum.t
                           val dst_alpha : unit -> GLenum.t
                           val dst_color : unit -> GLenum.t
                           val dynamic_draw : unit -> GLenum.t
                           val element_array_buffer : unit -> GLenum.t
                           val element_array_buffer_binding :
                             unit -> GLenum.t
                           val equal : unit -> GLenum.t
                           val fastest : unit -> GLenum.t
                           val float : unit -> GLenum.t
                           val float_mat2 : unit -> GLenum.t
                           val float_mat3 : unit -> GLenum.t
                           val float_mat4 : unit -> GLenum.t
                           val float_vec2 : unit -> GLenum.t
                           val float_vec3 : unit -> GLenum.t
                           val float_vec4 : unit -> GLenum.t
                           val fragment_shader : unit -> GLenum.t
                           val framebuffer : unit -> GLenum.t
                           val framebuffer_attachment_object_name :
                             unit -> GLenum.t
                           val framebuffer_attachment_object_type :
                             unit -> GLenum.t
                           val framebuffer_attachment_texture_cube_map_face :
                             unit -> GLenum.t
                           val framebuffer_attachment_texture_level :
                             unit -> GLenum.t
                           val framebuffer_binding : unit -> GLenum.t
                           val framebuffer_complete : unit -> GLenum.t
                           val framebuffer_incomplete_attachment :
                             unit -> GLenum.t
                           val framebuffer_incomplete_dimensions :
                             unit -> GLenum.t
                           val framebuffer_incomplete_missing_attachment :
                             unit -> GLenum.t
                           val framebuffer_unsupported : unit -> GLenum.t
                           val front : unit -> GLenum.t
                           val front_and_back : unit -> GLenum.t
                           val front_face : unit -> GLenum.t
                           val func_add : unit -> GLenum.t
                           val func_reverse_subtract : unit -> GLenum.t
                           val func_subtract : unit -> GLenum.t
                           val generate_mipmap_hint : unit -> GLenum.t
                           val gequal : unit -> GLenum.t
                           val greater : unit -> GLenum.t
                           val green_bits : unit -> GLenum.t
                           val high_float : unit -> GLenum.t
                           val high_int : unit -> GLenum.t
                           val implementation_color_read_format :
                             unit -> GLenum.t
                           val implementation_color_read_type :
                             unit -> GLenum.t
                           val incr : unit -> GLenum.t
                           val incr_wrap : unit -> GLenum.t
                           val int : unit -> GLenum.t
                           val int_vec2 : unit -> GLenum.t
                           val int_vec3 : unit -> GLenum.t
                           val int_vec4 : unit -> GLenum.t
                           val invalid_enum : unit -> GLenum.t
                           val invalid_framebuffer_operation :
                             unit -> GLenum.t
                           val invalid_operation : unit -> GLenum.t
                           val invalid_value : unit -> GLenum.t
                           val invert : unit -> GLenum.t
                           val keep : unit -> GLenum.t
                           val lequal : unit -> GLenum.t
                           val less : unit -> GLenum.t
                           val linear : unit -> GLenum.t
                           val linear_mipmap_linear : unit -> GLenum.t
                           val linear_mipmap_nearest : unit -> GLenum.t
                           val lines : unit -> GLenum.t
                           val line_loop : unit -> GLenum.t
                           val line_strip : unit -> GLenum.t
                           val line_width : unit -> GLenum.t
                           val link_status : unit -> GLenum.t
                           val low_float : unit -> GLenum.t
                           val low_int : unit -> GLenum.t
                           val luminance : unit -> GLenum.t
                           val luminance_alpha : unit -> GLenum.t
                           val max_combined_texture_image_units :
                             unit -> GLenum.t
                           val max_cube_map_texture_size : unit -> GLenum.t
                           val max_fragment_uniform_vectors :
                             unit -> GLenum.t
                           val max_renderbuffer_size : unit -> GLenum.t
                           val max_texture_image_units : unit -> GLenum.t
                           val max_texture_size : unit -> GLenum.t
                           val max_varying_vectors : unit -> GLenum.t
                           val max_vertex_attribs : unit -> GLenum.t
                           val max_vertex_texture_image_units :
                             unit -> GLenum.t
                           val max_vertex_uniform_vectors : unit -> GLenum.t
                           val max_viewport_dims : unit -> GLenum.t
                           val medium_float : unit -> GLenum.t
                           val medium_int : unit -> GLenum.t
                           val mirrored_repeat : unit -> GLenum.t
                           val nearest : unit -> GLenum.t
                           val nearest_mipmap_linear : unit -> GLenum.t
                           val nearest_mipmap_nearest : unit -> GLenum.t
                           val never : unit -> GLenum.t
                           val nicest : unit -> GLenum.t
                           val none : unit -> GLenum.t
                           val notequal : unit -> GLenum.t
                           val no_error : unit -> GLenum.t
                           val one : unit -> GLenum.t
                           val one_minus_constant_alpha : unit -> GLenum.t
                           val one_minus_constant_color : unit -> GLenum.t
                           val one_minus_dst_alpha : unit -> GLenum.t
                           val one_minus_dst_color : unit -> GLenum.t
                           val one_minus_src_alpha : unit -> GLenum.t
                           val one_minus_src_color : unit -> GLenum.t
                           val out_of_memory : unit -> GLenum.t
                           val pack_alignment : unit -> GLenum.t
                           val points : unit -> GLenum.t
                           val polygon_offset_factor : unit -> GLenum.t
                           val polygon_offset_fill : unit -> GLenum.t
                           val polygon_offset_units : unit -> GLenum.t
                           val red_bits : unit -> GLenum.t
                           val renderbuffer : unit -> GLenum.t
                           val renderbuffer_alpha_size : unit -> GLenum.t
                           val renderbuffer_binding : unit -> GLenum.t
                           val renderbuffer_blue_size : unit -> GLenum.t
                           val renderbuffer_depth_size : unit -> GLenum.t
                           val renderbuffer_green_size : unit -> GLenum.t
                           val renderbuffer_height : unit -> GLenum.t
                           val renderbuffer_internal_format :
                             unit -> GLenum.t
                           val renderbuffer_red_size : unit -> GLenum.t
                           val renderbuffer_stencil_size : unit -> GLenum.t
                           val renderbuffer_width : unit -> GLenum.t
                           val renderer : unit -> GLenum.t
                           val repeat : unit -> GLenum.t
                           val replace : unit -> GLenum.t
                           val rgb : unit -> GLenum.t
                           val rgb565 : unit -> GLenum.t
                           val rgb5_a1 : unit -> GLenum.t
                           val rgba : unit -> GLenum.t
                           val rgba4 : unit -> GLenum.t
                           val sampler_2d : unit -> GLenum.t
                           val sampler_cube : unit -> GLenum.t
                           val samples : unit -> GLenum.t
                           val sample_alpha_to_coverage : unit -> GLenum.t
                           val sample_buffers : unit -> GLenum.t
                           val sample_coverage : unit -> GLenum.t
                           val sample_coverage_invert : unit -> GLenum.t
                           val sample_coverage_value : unit -> GLenum.t
                           val scissor_box : unit -> GLenum.t
                           val scissor_test : unit -> GLenum.t
                           val shader_type : unit -> GLenum.t
                           val shading_language_version : unit -> GLenum.t
                           val short : unit -> GLenum.t
                           val src_alpha : unit -> GLenum.t
                           val src_alpha_saturate : unit -> GLenum.t
                           val src_color : unit -> GLenum.t
                           val static_draw : unit -> GLenum.t
                           val stencil_attachment : unit -> GLenum.t
                           val stencil_back_fail : unit -> GLenum.t
                           val stencil_back_func : unit -> GLenum.t
                           val stencil_back_pass_depth_fail :
                             unit -> GLenum.t
                           val stencil_back_pass_depth_pass :
                             unit -> GLenum.t
                           val stencil_back_ref : unit -> GLenum.t
                           val stencil_back_value_mask : unit -> GLenum.t
                           val stencil_back_writemask : unit -> GLenum.t
                           val stencil_bits : unit -> GLenum.t
                           val stencil_buffer_bit : unit -> GLenum.t
                           val stencil_clear_value : unit -> GLenum.t
                           val stencil_fail : unit -> GLenum.t
                           val stencil_func : unit -> GLenum.t
                           val stencil_index8 : unit -> GLenum.t
                           val stencil_pass_depth_fail : unit -> GLenum.t
                           val stencil_pass_depth_pass : unit -> GLenum.t
                           val stencil_ref : unit -> GLenum.t
                           val stencil_test : unit -> GLenum.t
                           val stencil_value_mask : unit -> GLenum.t
                           val stencil_writemask : unit -> GLenum.t
                           val stream_draw : unit -> GLenum.t
                           val subpixel_bits : unit -> GLenum.t
                           val texture : unit -> GLenum.t
                           val texture0 : unit -> GLenum.t
                           val texture1 : unit -> GLenum.t
                           val texture10 : unit -> GLenum.t
                           val texture11 : unit -> GLenum.t
                           val texture12 : unit -> GLenum.t
                           val texture13 : unit -> GLenum.t
                           val texture14 : unit -> GLenum.t
                           val texture15 : unit -> GLenum.t
                           val texture16 : unit -> GLenum.t
                           val texture17 : unit -> GLenum.t
                           val texture18 : unit -> GLenum.t
                           val texture19 : unit -> GLenum.t
                           val texture2 : unit -> GLenum.t
                           val texture20 : unit -> GLenum.t
                           val texture21 : unit -> GLenum.t
                           val texture22 : unit -> GLenum.t
                           val texture23 : unit -> GLenum.t
                           val texture24 : unit -> GLenum.t
                           val texture25 : unit -> GLenum.t
                           val texture26 : unit -> GLenum.t
                           val texture27 : unit -> GLenum.t
                           val texture28 : unit -> GLenum.t
                           val texture29 : unit -> GLenum.t
                           val texture3 : unit -> GLenum.t
                           val texture30 : unit -> GLenum.t
                           val texture31 : unit -> GLenum.t
                           val texture4 : unit -> GLenum.t
                           val texture5 : unit -> GLenum.t
                           val texture6 : unit -> GLenum.t
                           val texture7 : unit -> GLenum.t
                           val texture8 : unit -> GLenum.t
                           val texture9 : unit -> GLenum.t
                           val texture_2d : unit -> GLenum.t
                           val texture_binding_2d : unit -> GLenum.t
                           val texture_binding_cube_map : unit -> GLenum.t
                           val texture_cube_map : unit -> GLenum.t
                           val texture_cube_map_negative_x : unit -> GLenum.t
                           val texture_cube_map_negative_y : unit -> GLenum.t
                           val texture_cube_map_negative_z : unit -> GLenum.t
                           val texture_cube_map_positive_x : unit -> GLenum.t
                           val texture_cube_map_positive_y : unit -> GLenum.t
                           val texture_cube_map_positive_z : unit -> GLenum.t
                           val texture_mag_filter : unit -> GLenum.t
                           val texture_min_filter : unit -> GLenum.t
                           val texture_wrap_s : unit -> GLenum.t
                           val texture_wrap_t : unit -> GLenum.t
                           val triangles : unit -> GLenum.t
                           val triangle_fan : unit -> GLenum.t
                           val triangle_strip : unit -> GLenum.t
                           val unpack_alignment : unit -> GLenum.t
                           val unpack_colorspace_conversion_webgl :
                             unit -> GLenum.t
                           val unpack_flip_y_webgl : unit -> GLenum.t
                           val unpack_premultiply_alpha_webgl :
                             unit -> GLenum.t
                           val unsigned_byte : unit -> GLenum.t
                           val unsigned_int : unit -> GLenum.t
                           val unsigned_short : unit -> GLenum.t
                           val unsigned_short_4_4_4_4 : unit -> GLenum.t
                           val unsigned_short_5_5_5_1 : unit -> GLenum.t
                           val unsigned_short_5_6_5 : unit -> GLenum.t
                           val validate_status : unit -> GLenum.t
                           val vendor : unit -> GLenum.t
                           val version : unit -> GLenum.t
                           val vertex_attrib_array_buffer_binding :
                             unit -> GLenum.t
                           val vertex_attrib_array_enabled : unit -> GLenum.t
                           val vertex_attrib_array_normalized :
                             unit -> GLenum.t
                           val vertex_attrib_array_pointer : unit -> GLenum.t
                           val vertex_attrib_array_size : unit -> GLenum.t
                           val vertex_attrib_array_stride : unit -> GLenum.t
                           val vertex_attrib_array_type : unit -> GLenum.t
                           val vertex_shader : unit -> GLenum.t
                           val viewport : unit -> GLenum.t
                           val zero : unit -> GLenum.t
                         end =
  struct
    type t =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15599 : Ojs.t) -> t_of_js x15599
    and t_0_to_js : t_0 -> Ojs.t = fun (x15598 : t) -> t_to_js x15598
    type tags =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15602 : Ojs.t) -> intf_of_js __tags_of_js x15602
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15600 : __tags intf) -> intf_to_js __tags_to_js x15600
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") 
             [||])
    let (active_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORM_BLOCKS")
    let (already_signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALREADY_SIGNALED")
    let (any_samples_passed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED")
    let (any_samples_passed_conservative : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "COLOR")
    let (color_attachment1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT1")
    let (color_attachment10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT10")
    let (color_attachment11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT11")
    let (color_attachment12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT12")
    let (color_attachment13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT13")
    let (color_attachment14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT14")
    let (color_attachment15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT15")
    let (color_attachment2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT2")
    let (color_attachment3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT3")
    let (color_attachment4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT4")
    let (color_attachment5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT5")
    let (color_attachment6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT6")
    let (color_attachment7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT7")
    let (color_attachment8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT8")
    let (color_attachment9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT9")
    let (compare_ref_to_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPARE_REF_TO_TEXTURE")
    let (condition_satisfied : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONDITION_SATISFIED")
    let (copy_read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER")
    let (copy_read_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER_BINDING")
    let (copy_write_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER")
    let (copy_write_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER_BINDING")
    let (current_query : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_QUERY")
    let (depth : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DEPTH")
    let (depth24_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH24_STENCIL8")
    let (depth32f_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH32F_STENCIL8")
    let (depth_component24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT24")
    let (depth_component32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT32F")
    let (draw_buffer0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER0")
    let (draw_buffer1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER1")
    let (draw_buffer10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER10")
    let (draw_buffer11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER11")
    let (draw_buffer12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER12")
    let (draw_buffer13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER13")
    let (draw_buffer14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER14")
    let (draw_buffer15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER15")
    let (draw_buffer2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER2")
    let (draw_buffer3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER3")
    let (draw_buffer4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER4")
    let (draw_buffer5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER5")
    let (draw_buffer6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER6")
    let (draw_buffer7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER7")
    let (draw_buffer8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER8")
    let (draw_buffer9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER9")
    let (draw_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER")
    let (draw_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER_BINDING")
    let (dynamic_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_COPY")
    let (dynamic_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_READ")
    let (float_32_unsigned_int_24_8_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (fLOAT_MAT2x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x3")
    let (fLOAT_MAT2x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x4")
    let (fLOAT_MAT3x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x2")
    let (fLOAT_MAT3x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x4")
    let (fLOAT_MAT4x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x2")
    let (fLOAT_MAT4x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x3")
    let (fragment_shader_derivative_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (framebuffer_attachment_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (framebuffer_attachment_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (framebuffer_attachment_color_encoding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (framebuffer_attachment_component_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (framebuffer_attachment_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (framebuffer_attachment_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (framebuffer_attachment_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (framebuffer_attachment_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (framebuffer_attachment_texture_layer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (framebuffer_default : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_DEFAULT")
    let (framebuffer_incomplete_multisample : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (half_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HALF_FLOAT")
    let (interleaved_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INTERLEAVED_ATTRIBS")
    let (int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_2_10_10_10_REV")
    let (int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D")
    let (int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D_ARRAY")
    let (int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_3D")
    let (int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_CUBE")
    let (invalid_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_INDEX")
    let (max : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MAX")
    let (max_3d_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_3D_TEXTURE_SIZE")
    let (max_array_texture_layers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (max_client_wait_timeout_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (max_color_attachments : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COLOR_ATTACHMENTS")
    let (max_combined_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_combined_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (max_combined_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (max_draw_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_DRAW_BUFFERS")
    let (max_elements_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_INDICES")
    let (max_elements_vertices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_VERTICES")
    let (max_element_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENT_INDEX")
    let (max_fragment_input_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (max_fragment_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (max_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (max_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SAMPLES")
    let (max_server_wait_timeout : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SERVER_WAIT_TIMEOUT")
    let (max_texture_lod_bias : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_LOD_BIAS")
    let (max_transform_feedback_interleaved_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (max_transform_feedback_separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (max_transform_feedback_separate_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (max_uniform_block_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BLOCK_SIZE")
    let (max_uniform_buffer_bindings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (max_varying_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_COMPONENTS")
    let (max_vertex_output_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (max_vertex_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (max_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (min : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MIN")
    let (min_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OBJECT_TYPE")
    let (pack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ROW_LENGTH")
    let (pack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_PIXELS")
    let (pack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_ROWS")
    let (pixel_pack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER")
    let (pixel_pack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER_BINDING")
    let (pixel_unpack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER")
    let (pixel_unpack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (query_result : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT")
    let (query_result_available : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT_AVAILABLE")
    let (r11f_g11f_b10f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R11F_G11F_B10F")
    let (r16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16F")
    let (r16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16I")
    let (r16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16UI")
    let (r32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32F")
    let (r32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32I")
    let (r32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32UI")
    let (r8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8")
    let (r8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8I")
    let (r8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8UI")
    let (r8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R8_SNORM")
    let (rasterizer_discard : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RASTERIZER_DISCARD")
    let (read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_BUFFER")
    let (read_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER")
    let (read_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER_BINDING")
    let (red : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RED")
    let (red_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_INTEGER")
    let (renderbuffer_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_SAMPLES")
    let (rg : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG")
    let (rg16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16F")
    let (rg16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16I")
    let (rg16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG16UI")
    let (rg32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32F")
    let (rg32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32I")
    let (rg32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG32UI")
    let (rg8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8")
    let (rg8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8I")
    let (rg8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8UI")
    let (rg8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG8_SNORM")
    let (rgb10_a2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2")
    let (rgb10_a2ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2UI")
    let (rgb16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16F")
    let (rgb16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16I")
    let (rgb16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16UI")
    let (rgb32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32F")
    let (rgb32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32I")
    let (rgb32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32UI")
    let (rgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8")
    let (rgb8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8I")
    let (rgb8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8UI")
    let (rgb8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8_SNORM")
    let (rgb9_e5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB9_E5")
    let (rgba16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16F")
    let (rgba16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16I")
    let (rgba16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16UI")
    let (rgba32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32F")
    let (rgba32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32I")
    let (rgba32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32UI")
    let (rgba8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA8")
    let (rgba8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8I")
    let (rgba8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8UI")
    let (rgba8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8_SNORM")
    let (rgba_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA_INTEGER")
    let (rgb_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB_INTEGER")
    let (rg_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG_INTEGER")
    let (sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY")
    let (sampler_2d_array_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY_SHADOW")
    let (sampler_2d_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_SHADOW")
    let (sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_3D")
    let (sampler_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_BINDING")
    let (sampler_cube_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE_SHADOW")
    let (separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SEPARATE_ATTRIBS")
    let (signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNALED")
    let (signed_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNED_NORMALIZED")
    let (srgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB")
    let (srgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB8")
    let (srgb8_alpha8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRGB8_ALPHA8")
    let (static_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_COPY")
    let (static_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_READ")
    let (stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL")
    let (stream_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_COPY")
    let (stream_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_READ")
    let (sync_condition : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_CONDITION")
    let (sync_fence : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FENCE")
    let (sync_flags : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLAGS")
    let (sync_flush_commands_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLUSH_COMMANDS_BIT")
    let (sync_gpu_commands_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (sync_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_STATUS")
    let (texture_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D_ARRAY")
    let (texture_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_3D")
    let (texture_base_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BASE_LEVEL")
    let (texture_binding_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D_ARRAY")
    let (texture_binding_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_3D")
    let (texture_compare_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_FUNC")
    let (texture_compare_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_MODE")
    let (texture_immutable_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_FORMAT")
    let (texture_immutable_levels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_LEVELS")
    let (texture_max_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LEVEL")
    let (texture_max_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LOD")
    let (texture_min_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_LOD")
    let (texture_wrap_r : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_R")
    let (timeout_expired : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_EXPIRED")
    let (timeout_ignored : unit -> GLint64.t) =
      fun () ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_IGNORED")
    let (transform_feedback : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK")
    let (transform_feedback_active : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (transform_feedback_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BINDING")
    let (transform_feedback_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER")
    let (transform_feedback_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (transform_feedback_buffer_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (transform_feedback_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (transform_feedback_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (transform_feedback_paused : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PAUSED")
    let (transform_feedback_primitives_written : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (transform_feedback_varyings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (uniform_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_ARRAY_STRIDE")
    let (uniform_block_active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (uniform_block_active_uniform_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (uniform_block_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_BINDING")
    let (uniform_block_data_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_DATA_SIZE")
    let (uniform_block_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_INDEX")
    let (uniform_block_referenced_by_fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (uniform_block_referenced_by_vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (uniform_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER")
    let (uniform_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_BINDING")
    let (uniform_buffer_offset_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (uniform_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_SIZE")
    let (uniform_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_START")
    let (uniform_is_row_major : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_IS_ROW_MAJOR")
    let (uniform_matrix_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_MATRIX_STRIDE")
    let (uniform_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_OFFSET")
    let (uniform_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_SIZE")
    let (uniform_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_TYPE")
    let (unpack_image_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_IMAGE_HEIGHT")
    let (unpack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ROW_LENGTH")
    let (unpack_skip_images : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_IMAGES")
    let (unpack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_PIXELS")
    let (unpack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_ROWS")
    let (unsignaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNALED")
    let (unsigned_int_10f_11f_11f_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (unsigned_int_24_8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_24_8")
    let (unsigned_int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_2_10_10_10_REV")
    let (unsigned_int_5_9_9_9_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_5_9_9_9_REV")
    let (unsigned_int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D")
    let (unsigned_int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (unsigned_int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_3D")
    let (unsigned_int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (unsigned_int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC2")
    let (unsigned_int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC3")
    let (unsigned_int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC4")
    let (unsigned_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_NORMALIZED")
    let (vertex_array_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ARRAY_BINDING")
    let (vertex_attrib_array_divisor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (vertex_attrib_array_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (wait_failed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "WAIT_FAILED")
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ZERO")
  end
module rec
  AnonymousInterface108:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype :
                            t -> TransformStreamDefaultController.t_0
                          val set_prototype :
                            t -> TransformStreamDefaultController.t_0 -> unit
                          val create :
                            t -> TransformStreamDefaultController.t_0
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15605 : Ojs.t) -> x15605
    and t_to_js : t -> Ojs.t = fun (x15604 : Ojs.t) -> x15604
    let (get_prototype : t -> TransformStreamDefaultController.t_0) =
      fun (x15606 : t) ->
        TransformStreamDefaultController.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x15606) "prototype")
    let (set_prototype : t -> TransformStreamDefaultController.t_0 -> unit) =
      fun (x15607 : t) ->
        fun (x15608 : TransformStreamDefaultController.t_0) ->
          Ojs.set_prop_ascii (t_to_js x15607) "prototype"
            (TransformStreamDefaultController.t_0_to_js x15608)
    let (create : t -> TransformStreamDefaultController.t_0) =
      fun (x15609 : t) ->
        TransformStreamDefaultController.t_0_of_js
          (Ojs.new_obj (t_to_js x15609) [||])
  end
 and
  TransformStreamDefaultController:sig
                                     type 'O t =
                                       [
                                         `TransformStreamDefaultController of
                                           'O ]
                                         intf
                                     type 'O t_1 = 'O t
                                     type t_0 = any t
                                     [@@@js.stop ]
                                     type 'O tags =
                                       [
                                         `TransformStreamDefaultController of
                                           'O ]
                                     type 'O tags_1 = 'O tags
                                     type tags_0 = any tags
                                     [@@@js.start ]
                                     [@@@js.implem
                                       type 'O tags =
                                         [
                                           `TransformStreamDefaultController
                                             of 'O ]
                                       type 'O tags_1 = 'O tags
                                       type tags_0 = any tags]
                                     type ('tags, 'O) this =
                                       'tags intf constraint 'tags =
                                                   [>
                                                     `TransformStreamDefaultController
                                                       of 'O ]
                                     val t_to_js :
                                       ('O -> Ojs.t) -> 'O t -> Ojs.t
                                     val t_of_js :
                                       (Ojs.t -> 'O) -> Ojs.t -> 'O t
                                     val t_1_to_js :
                                       ('O -> Ojs.t) -> 'O t_1 -> Ojs.t
                                     val t_1_of_js :
                                       (Ojs.t -> 'O) -> Ojs.t -> 'O t_1
                                     val t_0_to_js : t_0 -> Ojs.t
                                     val t_0_of_js : Ojs.t -> t_0
                                     val get_desiredSize :
                                       ('tags, 'O) this -> float or_null
                                     val enqueue :
                                       ('tags, 'O) this ->
                                         ?chunk:'O -> unit -> unit
                                     val error :
                                       ('tags, 'O) this ->
                                         ?reason:any -> unit -> unit
                                     val terminate : ('tags, 'O) this -> unit
                                     val cast_from : ('tags, 'O) this -> 'O t
                                     val prototype : unit -> t_0
                                     val create : unit -> t_0
                                   end =
  struct
    type 'O t = [ `TransformStreamDefaultController of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x15612 : Ojs.t) -> t_of_js __O_of_js x15612
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x15610 : __O t) -> t_to_js __O_to_js x15610
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15616 : Ojs.t) -> t_of_js any_of_js x15616
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15614 : any t) -> t_to_js any_to_js x15614
    type 'O tags = [ `TransformStreamDefaultController of 'O ]
    type 'O tags_1 = 'O tags
    type tags_0 = any tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformStreamDefaultController of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15620 : Ojs.t) -> intf_of_js __tags_of_js x15620
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15618 : __tags intf) -> intf_to_js __tags_to_js x15618
    let (get_desiredSize : ('tags, 'O) this -> float or_null) =
      fun (x15622 : ('tags, 'O) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x15622)
             "desiredSize")
    let (enqueue : ('tags, 'O) this -> ?chunk:'O -> unit -> unit) =
      fun (x15629 : ('tags, 'O) this) ->
        fun ?chunk:(x15626 : 'O option) ->
          fun () ->
            ignore
              (let x15632 = this_to_js Obj.magic Obj.magic x15629 in
               Ojs.call (Ojs.get_prop_ascii x15632 "enqueue") "apply"
                 [|x15632;((let x15627 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15626 with
                             | Some x15628 ->
                                 ignore
                                   (Ojs.call x15627 "push"
                                      [|(Obj.magic x15628)|])
                             | None -> ());
                            x15627))|])
    let (error : ('tags, 'O) this -> ?reason:any -> unit -> unit) =
      fun (x15636 : ('tags, 'O) this) ->
        fun ?reason:(x15633 : any option) ->
          fun () ->
            ignore
              (let x15639 = this_to_js Obj.magic Obj.magic x15636 in
               Ojs.call (Ojs.get_prop_ascii x15639 "error") "apply"
                 [|x15639;((let x15634 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15633 with
                             | Some x15635 ->
                                 ignore
                                   (Ojs.call x15634 "push"
                                      [|(any_to_js x15635)|])
                             | None -> ());
                            x15634))|])
    let (terminate : ('tags, 'O) this -> unit) =
      fun (x15640 : ('tags, 'O) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x15640) "terminate" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") [||])
  end
module TransformerTransformCallback =
  struct
    type ('I, 'O) t = [ `TransformerTransformCallback of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15646 : Ojs.t) -> t_of_js __I_of_js __O_of_js x15646
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15643 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x15643
    type ('I, 'O) tags = [ `TransformerTransformCallback of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformerTransformCallback of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x15651 : Ojs.t) -> intf_of_js __tags_of_js x15651
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x15649 : __tags intf) -> intf_to_js __tags_to_js x15649
    let (apply :
      ('tags, 'I, 'O) this ->
        chunk:'I ->
          controller:'O TransformStreamDefaultController.t ->
            (unit, unit PromiseLike.t_1) union2)
      =
      fun (x15656 : ('tags, 'I, 'O) this) ->
        fun ~chunk:(x15653 : 'I) ->
          fun ~controller:(x15654 : 'O TransformStreamDefaultController.t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x15661 : Ojs.t) ->
                 PromiseLike.t_1_of_js Ojs.unit_of_js x15661)
              (Ojs.apply (this_to_js Obj.magic Obj.magic Obj.magic x15656)
                 [|(Obj.magic x15653);(TransformStreamDefaultController.t_to_js
                                         Obj.magic x15654)|])
    let cast_from = Obj.magic
  end
module TransformerStartCallback =
  struct
    type 'O t = [ `TransformerStartCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x15665 : Ojs.t) -> t_of_js __O_of_js x15665
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x15663 : __O t) -> t_to_js __O_to_js x15663
    type 'O tags = [ `TransformerStartCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15669 : Ojs.t) -> intf_of_js __tags_of_js x15669
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15667 : __tags intf) -> intf_to_js __tags_to_js x15667
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> any)
      =
      fun (x15673 : ('tags, 'O) this) ->
        fun ~controller:(x15671 : 'O TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x15673)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x15671)|])
    let cast_from = Obj.magic
  end
module TransformerFlushCallback =
  struct
    type 'O t = [ `TransformerFlushCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x15678 : Ojs.t) -> t_of_js __O_of_js x15678
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x15676 : __O t) -> t_to_js __O_to_js x15676
    type 'O tags = [ `TransformerFlushCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15682 : Ojs.t) -> intf_of_js __tags_of_js x15682
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15680 : __tags intf) -> intf_to_js __tags_to_js x15680
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t ->
          (unit, unit PromiseLike.t_1) union2)
      =
      fun (x15686 : ('tags, 'O) this) ->
        fun ~controller:(x15684 : 'O TransformStreamDefaultController.t) ->
          union2_of_js Ojs.unit_of_js
            (fun (x15690 : Ojs.t) ->
               PromiseLike.t_1_of_js Ojs.unit_of_js x15690)
            (Ojs.apply (this_to_js Obj.magic Obj.magic x15686)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x15684)|])
    let cast_from = Obj.magic
  end
module Transformer =
  struct
    type ('I, 'O) t = [ `Transformer of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15695 : Ojs.t) -> t_of_js __I_of_js __O_of_js x15695
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15692 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x15692
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x15701 : Ojs.t) -> t_of_js __I_of_js any_of_js x15701
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x15698 : (__I, any) t) -> t_to_js __I_to_js any_to_js x15698
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15707 : Ojs.t) -> t_of_js any_of_js any_of_js x15707
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15704 : (any, any) t) -> t_to_js any_to_js any_to_js x15704
    type ('I, 'O) tags = [ `Transformer of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x15712 : Ojs.t) -> intf_of_js __tags_of_js x15712
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x15710 : __tags intf) -> intf_to_js __tags_to_js x15710
    let (get_flush : ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t) =
      fun (x15714 : ('tags, 'I, 'O) this) ->
        TransformerFlushCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15714) "flush")
    let (set_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit) =
      fun (x15719 : ('tags, 'I, 'O) this) ->
        fun (x15720 : 'O TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15719) "flush"
            (TransformerFlushCallback.t_to_js Obj.magic x15720)
    let (get_readableType : ('tags, 'I, 'O) this -> never or_undefined) =
      fun (x15725 : ('tags, 'I, 'O) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15725) "readableType")
    let (set_readableType :
      ('tags, 'I, 'O) this -> never or_undefined -> unit) =
      fun (x15730 : ('tags, 'I, 'O) this) ->
        fun (x15731 : never or_undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15730) "readableType"
            (or_undefined_to_js never_to_js x15731)
    let (get_start : ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t) =
      fun (x15736 : ('tags, 'I, 'O) this) ->
        TransformerStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15736) "start")
    let (set_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit) =
      fun (x15741 : ('tags, 'I, 'O) this) ->
        fun (x15742 : 'O TransformerStartCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15741) "start"
            (TransformerStartCallback.t_to_js Obj.magic x15742)
    let (get_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t) =
      fun (x15747 : ('tags, 'I, 'O) this) ->
        TransformerTransformCallback.t_of_js Obj.magic Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15747) "transform")
    let (set_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit)
      =
      fun (x15753 : ('tags, 'I, 'O) this) ->
        fun (x15754 : ('I, 'O) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15753) "transform"
            (TransformerTransformCallback.t_to_js Obj.magic Obj.magic x15754)
    let (get_writableType : ('tags, 'I, 'O) this -> never or_undefined) =
      fun (x15760 : ('tags, 'I, 'O) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15760) "writableType")
    let (set_writableType :
      ('tags, 'I, 'O) this -> never or_undefined -> unit) =
      fun (x15765 : ('tags, 'I, 'O) this) ->
        fun (x15766 : never or_undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x15765) "writableType"
            (or_undefined_to_js never_to_js x15766)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface107:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TransformStream.t_0
                          val set_prototype :
                            t -> TransformStream.t_0 -> unit
                          val create :
                            t ->
                              ?transformer:('I, 'O) Transformer.t ->
                                ?writableStrategy:'I QueuingStrategy.t ->
                                  ?readableStrategy:'O QueuingStrategy.t ->
                                    unit -> ('I, 'O) TransformStream.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15772 : Ojs.t) -> x15772
    and t_to_js : t -> Ojs.t = fun (x15771 : Ojs.t) -> x15771
    let (get_prototype : t -> TransformStream.t_0) =
      fun (x15773 : t) ->
        TransformStream.t_0_of_js
          (Ojs.get_prop_ascii (t_to_js x15773) "prototype")
    let (set_prototype : t -> TransformStream.t_0 -> unit) =
      fun (x15774 : t) ->
        fun (x15775 : TransformStream.t_0) ->
          Ojs.set_prop_ascii (t_to_js x15774) "prototype"
            (TransformStream.t_0_to_js x15775)
    let (create :
      t ->
        ?transformer:('I, 'O) Transformer.t ->
          ?writableStrategy:'I QueuingStrategy.t ->
            ?readableStrategy:'O QueuingStrategy.t ->
              unit -> ('I, 'O) TransformStream.t)
      =
      fun (x15787 : t) ->
        fun ?transformer:(x15776 : ('I, 'O) Transformer.t option) ->
          fun ?writableStrategy:(x15777 : 'I QueuingStrategy.t option) ->
            fun ?readableStrategy:(x15778 : 'O QueuingStrategy.t option) ->
              fun () ->
                TransformStream.t_of_js Obj.magic Obj.magic
                  (Ojs.new_obj_arr (t_to_js x15787)
                     (let x15779 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15776 with
                       | Some x15784 ->
                           ignore
                             (Ojs.call x15779 "push"
                                [|(Transformer.t_to_js Obj.magic Obj.magic
                                     x15784)|])
                       | None -> ());
                      (match x15777 with
                       | Some x15782 ->
                           ignore
                             (Ojs.call x15779 "push"
                                [|(QueuingStrategy.t_to_js Obj.magic x15782)|])
                       | None -> ());
                      (match x15778 with
                       | Some x15780 ->
                           ignore
                             (Ojs.call x15779 "push"
                                [|(QueuingStrategy.t_to_js Obj.magic x15780)|])
                       | None -> ());
                      x15779))
  end
 and
  TransformStream:sig
                    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
                    type ('I, 'O) t_2 = ('I, 'O) t
                    type 'I t_1 = ('I, any) t
                    type t_0 = (any, any) t
                    [@@@js.stop ]
                    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
                    type ('I, 'O) tags_2 = ('I, 'O) tags
                    type 'I tags_1 = ('I, any) tags
                    type tags_0 = (any, any) tags
                    [@@@js.start ]
                    [@@@js.implem
                      type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
                      type ('I, 'O) tags_2 = ('I, 'O) tags
                      type 'I tags_1 = ('I, any) tags
                      type tags_0 = (any, any) tags]
                    type ('tags, 'I, 'O) this =
                      'tags intf constraint 'tags =
                                  [> `TransformStream of ('I * 'O) ]
                    val t_to_js :
                      ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t
                    val t_of_js :
                      (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t
                    val t_2_to_js :
                      ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t
                    val t_2_of_js :
                      (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2
                    val t_1_to_js : ('I -> Ojs.t) -> 'I t_1 -> Ojs.t
                    val t_1_of_js : (Ojs.t -> 'I) -> Ojs.t -> 'I t_1
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_readable :
                      ('tags, 'I, 'O) this -> 'O ReadableStream.t
                    val get_writable :
                      ('tags, 'I, 'O) this -> 'I WritableStream.t
                    val cast_from : ('tags, 'I, 'O) this -> ('I, 'O) t
                    val prototype : unit -> t_0
                    val create :
                      ?transformer:('I, 'O) Transformer.t ->
                        ?writableStrategy:'I QueuingStrategy.t ->
                          ?readableStrategy:'O QueuingStrategy.t ->
                            unit -> ('I, 'O) t
                  end =
  struct
    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x15793 : Ojs.t) -> t_of_js __I_of_js __O_of_js x15793
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x15790 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x15790
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x15799 : Ojs.t) -> t_of_js __I_of_js any_of_js x15799
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x15796 : (__I, any) t) -> t_to_js __I_to_js any_to_js x15796
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x15805 : Ojs.t) -> t_of_js any_of_js any_of_js x15805
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x15802 : (any, any) t) -> t_to_js any_to_js any_to_js x15802
    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x15810 : Ojs.t) -> intf_of_js __tags_of_js x15810
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x15808 : __tags intf) -> intf_to_js __tags_to_js x15808
    let (get_readable : ('tags, 'I, 'O) this -> 'O ReadableStream.t) =
      fun (x15812 : ('tags, 'I, 'O) this) ->
        ReadableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15812) "readable")
    let (get_writable : ('tags, 'I, 'O) this -> 'I WritableStream.t) =
      fun (x15817 : ('tags, 'I, 'O) this) ->
        WritableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x15817) "writable")
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TransformStream") "prototype")
    let (create :
      ?transformer:('I, 'O) Transformer.t ->
        ?writableStrategy:'I QueuingStrategy.t ->
          ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t)
      =
      fun ?transformer:(x15822 : ('I, 'O) Transformer.t option) ->
        fun ?writableStrategy:(x15823 : 'I QueuingStrategy.t option) ->
          fun ?readableStrategy:(x15824 : 'O QueuingStrategy.t option) ->
            fun () ->
              t_of_js Obj.magic Obj.magic
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "TransformStream")
                   (let x15825 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x15822 with
                     | Some x15830 ->
                         ignore
                           (Ojs.call x15825 "push"
                              [|(Transformer.t_to_js Obj.magic Obj.magic
                                   x15830)|])
                     | None -> ());
                    (match x15823 with
                     | Some x15828 ->
                         ignore
                           (Ojs.call x15825 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x15828)|])
                     | None -> ());
                    (match x15824 with
                     | Some x15826 ->
                         ignore
                           (Ojs.call x15825 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x15826)|])
                     | None -> ());
                    x15825))
  end
module rec
  AnonymousInterface106:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextMetrics.t
                          val set_prototype : t -> TextMetrics.t -> unit
                          val create : t -> TextMetrics.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15836 : Ojs.t) -> x15836
    and t_to_js : t -> Ojs.t = fun (x15835 : Ojs.t) -> x15835
    let (get_prototype : t -> TextMetrics.t) =
      fun (x15837 : t) ->
        TextMetrics.t_of_js (Ojs.get_prop_ascii (t_to_js x15837) "prototype")
    let (set_prototype : t -> TextMetrics.t -> unit) =
      fun (x15838 : t) ->
        fun (x15839 : TextMetrics.t) ->
          Ojs.set_prop_ascii (t_to_js x15838) "prototype"
            (TextMetrics.t_to_js x15839)
    let (create : t -> TextMetrics.t) =
      fun (x15840 : t) ->
        TextMetrics.t_of_js (Ojs.new_obj (t_to_js x15840) [||])
  end
 and
  TextMetrics:sig
                type t = [ `TextMetrics ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `TextMetrics ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem type tags = [ `TextMetrics ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `TextMetrics ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_actualBoundingBoxAscent : 'tags this -> float
                val get_actualBoundingBoxDescent : 'tags this -> float
                val get_actualBoundingBoxLeft : 'tags this -> float
                val get_actualBoundingBoxRight : 'tags this -> float
                val get_fontBoundingBoxAscent : 'tags this -> float
                val get_fontBoundingBoxDescent : 'tags this -> float
                val get_width : 'tags this -> float
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `TextMetrics ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15842 : Ojs.t) -> t_of_js x15842
    and t_0_to_js : t_0 -> Ojs.t = fun (x15841 : t) -> t_to_js x15841
    type tags = [ `TextMetrics ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15845 : Ojs.t) -> intf_of_js __tags_of_js x15845
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15843 : __tags intf) -> intf_to_js __tags_to_js x15843
    let (get_actualBoundingBoxAscent : 'tags this -> float) =
      fun (x15847 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15847)
             "actualBoundingBoxAscent")
    let (get_actualBoundingBoxDescent : 'tags this -> float) =
      fun (x15849 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15849)
             "actualBoundingBoxDescent")
    let (get_actualBoundingBoxLeft : 'tags this -> float) =
      fun (x15851 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15851)
             "actualBoundingBoxLeft")
    let (get_actualBoundingBoxRight : 'tags this -> float) =
      fun (x15853 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15853)
             "actualBoundingBoxRight")
    let (get_fontBoundingBoxAscent : 'tags this -> float) =
      fun (x15855 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15855)
             "fontBoundingBoxAscent")
    let (get_fontBoundingBoxDescent : 'tags this -> float) =
      fun (x15857 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15857)
             "fontBoundingBoxDescent")
    let (get_width : 'tags this -> float) =
      fun (x15859 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15859) "width")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextMetrics")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextMetrics") [||])
  end
module TextEncoderCommon =
  struct
    type t = [ `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15862 : Ojs.t) -> t_of_js x15862
    and t_0_to_js : t_0 -> Ojs.t = fun (x15861 : t) -> t_to_js x15861
    type tags = [ `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15865 : Ojs.t) -> intf_of_js __tags_of_js x15865
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15863 : __tags intf) -> intf_to_js __tags_to_js x15863
    let (get_encoding : 'tags this -> string) =
      fun (x15867 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15867) "encoding")
    let cast_from = Obj.magic
  end
module GenericTransformStream =
  struct
    type t = [ `GenericTransformStream ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15870 : Ojs.t) -> t_of_js x15870
    and t_0_to_js : t_0 -> Ojs.t = fun (x15869 : t) -> t_to_js x15869
    type tags = [ `GenericTransformStream ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GenericTransformStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15873 : Ojs.t) -> intf_of_js __tags_of_js x15873
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15871 : __tags intf) -> intf_to_js __tags_to_js x15871
    let (get_readable : 'tags this -> ReadableStream.t_0) =
      fun (x15875 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15875) "readable")
    let (get_writable : 'tags this -> WritableStream.t_0) =
      fun (x15877 : 'tags this) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15877) "writable")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface105:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextEncoderStream.t
                          val set_prototype :
                            t -> TextEncoderStream.t -> unit
                          val create : t -> TextEncoderStream.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15880 : Ojs.t) -> x15880
    and t_to_js : t -> Ojs.t = fun (x15879 : Ojs.t) -> x15879
    let (get_prototype : t -> TextEncoderStream.t) =
      fun (x15881 : t) ->
        TextEncoderStream.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15881) "prototype")
    let (set_prototype : t -> TextEncoderStream.t -> unit) =
      fun (x15882 : t) ->
        fun (x15883 : TextEncoderStream.t) ->
          Ojs.set_prop_ascii (t_to_js x15882) "prototype"
            (TextEncoderStream.t_to_js x15883)
    let (create : t -> TextEncoderStream.t) =
      fun (x15884 : t) ->
        TextEncoderStream.t_of_js (Ojs.new_obj (t_to_js x15884) [||])
  end
 and
  TextEncoderStream:sig
                      type t =
                        [ `GenericTransformStream  | `TextEncoderCommon 
                        | `TextEncoderStream ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags =
                        [ `GenericTransformStream  | `TextEncoderCommon 
                        | `TextEncoderStream ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags =
                          [ `GenericTransformStream  | `TextEncoderCommon 
                          | `TextEncoderStream ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `TextEncoderStream ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_readable :
                        'tags this -> Uint8Array.t_0 ReadableStream.t
                      val get_writable :
                        'tags this -> string WritableStream.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : unit -> t
                    end =
  struct
    type t =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15886 : Ojs.t) -> t_of_js x15886
    and t_0_to_js : t_0 -> Ojs.t = fun (x15885 : t) -> t_to_js x15885
    type tags =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15889 : Ojs.t) -> intf_of_js __tags_of_js x15889
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15887 : __tags intf) -> intf_to_js __tags_to_js x15887
    let (get_readable : 'tags this -> Uint8Array.t_0 ReadableStream.t) =
      fun (x15891 : 'tags this) ->
        ReadableStream.t_of_js Uint8Array.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15891) "readable")
    let (get_writable : 'tags this -> string WritableStream.t) =
      fun (x15894 : 'tags this) ->
        WritableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15894) "writable")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextEncoderStream") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
             [||])
  end
module TextEncoderEncodeIntoResult =
  struct
    type t = [ `TextEncoderEncodeIntoResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15898 : Ojs.t) -> t_of_js x15898
    and t_0_to_js : t_0 -> Ojs.t = fun (x15897 : t) -> t_to_js x15897
    type tags = [ `TextEncoderEncodeIntoResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15901 : Ojs.t) -> intf_of_js __tags_of_js x15901
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15899 : __tags intf) -> intf_to_js __tags_to_js x15899
    let (get_read : 'tags this -> float) =
      fun (x15903 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15903) "read")
    let (set_read : 'tags this -> float -> unit) =
      fun (x15905 : 'tags this) ->
        fun (x15906 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15905) "read"
            (Ojs.float_to_js x15906)
    let (get_written : 'tags this -> float) =
      fun (x15908 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15908) "written")
    let (set_written : 'tags this -> float -> unit) =
      fun (x15910 : 'tags this) ->
        fun (x15911 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15910) "written"
            (Ojs.float_to_js x15911)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface104:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextEncoder.t
                          val set_prototype : t -> TextEncoder.t -> unit
                          val create : t -> TextEncoder.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15914 : Ojs.t) -> x15914
    and t_to_js : t -> Ojs.t = fun (x15913 : Ojs.t) -> x15913
    let (get_prototype : t -> TextEncoder.t) =
      fun (x15915 : t) ->
        TextEncoder.t_of_js (Ojs.get_prop_ascii (t_to_js x15915) "prototype")
    let (set_prototype : t -> TextEncoder.t -> unit) =
      fun (x15916 : t) ->
        fun (x15917 : TextEncoder.t) ->
          Ojs.set_prop_ascii (t_to_js x15916) "prototype"
            (TextEncoder.t_to_js x15917)
    let (create : t -> TextEncoder.t) =
      fun (x15918 : t) ->
        TextEncoder.t_of_js (Ojs.new_obj (t_to_js x15918) [||])
  end
 and
  TextEncoder:sig
                type t = [ `TextEncoder  | `TextEncoderCommon ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `TextEncoder  | `TextEncoderCommon ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `TextEncoder  | `TextEncoderCommon ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `TextEncoder ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val encode :
                  'tags this -> ?input:string -> unit -> Uint8Array.t_0
                val encodeInto :
                  'tags this ->
                    source:string ->
                      destination:Uint8Array.t_0 ->
                        TextEncoderEncodeIntoResult.t
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `TextEncoder  | `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15920 : Ojs.t) -> t_of_js x15920
    and t_0_to_js : t_0 -> Ojs.t = fun (x15919 : t) -> t_to_js x15919
    type tags = [ `TextEncoder  | `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15923 : Ojs.t) -> intf_of_js __tags_of_js x15923
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15921 : __tags intf) -> intf_to_js __tags_to_js x15921
    let (encode : 'tags this -> ?input:string -> unit -> Uint8Array.t_0) =
      fun (x15928 : 'tags this) ->
        fun ?input:(x15925 : string option) ->
          fun () ->
            Uint8Array.t_0_of_js
              (let x15930 = this_to_js Obj.magic x15928 in
               Ojs.call (Ojs.get_prop_ascii x15930 "encode") "apply"
                 [|x15930;((let x15926 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x15925 with
                             | Some x15927 ->
                                 ignore
                                   (Ojs.call x15926 "push"
                                      [|(Ojs.string_to_js x15927)|])
                             | None -> ());
                            x15926))|])
    let (encodeInto :
      'tags this ->
        source:string ->
          destination:Uint8Array.t_0 -> TextEncoderEncodeIntoResult.t)
      =
      fun (x15933 : 'tags this) ->
        fun ~source:(x15931 : string) ->
          fun ~destination:(x15932 : Uint8Array.t_0) ->
            TextEncoderEncodeIntoResult.t_of_js
              (Ojs.call (this_to_js Obj.magic x15933) "encodeInto"
                 [|(Ojs.string_to_js x15931);(Uint8Array.t_0_to_js x15932)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextEncoder")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoder") [||])
  end
module TextDecoderOptions =
  struct
    type t = [ `TextDecoderOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15936 : Ojs.t) -> t_of_js x15936
    and t_0_to_js : t_0 -> Ojs.t = fun (x15935 : t) -> t_to_js x15935
    type tags = [ `TextDecoderOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15939 : Ojs.t) -> intf_of_js __tags_of_js x15939
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15937 : __tags intf) -> intf_to_js __tags_to_js x15937
    let (get_fatal : 'tags this -> bool) =
      fun (x15941 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15941) "fatal")
    let (set_fatal : 'tags this -> bool -> unit) =
      fun (x15943 : 'tags this) ->
        fun (x15944 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15943) "fatal"
            (Ojs.bool_to_js x15944)
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x15946 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15946) "ignoreBOM")
    let (set_ignoreBOM : 'tags this -> bool -> unit) =
      fun (x15948 : 'tags this) ->
        fun (x15949 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15948) "ignoreBOM"
            (Ojs.bool_to_js x15949)
    let cast_from = Obj.magic
  end
module TextDecoderCommon =
  struct
    type t = [ `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15952 : Ojs.t) -> t_of_js x15952
    and t_0_to_js : t_0 -> Ojs.t = fun (x15951 : t) -> t_to_js x15951
    type tags = [ `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15955 : Ojs.t) -> intf_of_js __tags_of_js x15955
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15953 : __tags intf) -> intf_to_js __tags_to_js x15953
    let (get_encoding : 'tags this -> string) =
      fun (x15957 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15957) "encoding")
    let (get_fatal : 'tags this -> bool) =
      fun (x15959 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15959) "fatal")
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x15961 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15961) "ignoreBOM")
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface103:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextDecoderStream.t
                          val set_prototype :
                            t -> TextDecoderStream.t -> unit
                          val create :
                            t ->
                              ?label:string ->
                                ?options:TextDecoderOptions.t ->
                                  unit -> TextDecoderStream.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15964 : Ojs.t) -> x15964
    and t_to_js : t -> Ojs.t = fun (x15963 : Ojs.t) -> x15963
    let (get_prototype : t -> TextDecoderStream.t) =
      fun (x15965 : t) ->
        TextDecoderStream.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15965) "prototype")
    let (set_prototype : t -> TextDecoderStream.t -> unit) =
      fun (x15966 : t) ->
        fun (x15967 : TextDecoderStream.t) ->
          Ojs.set_prop_ascii (t_to_js x15966) "prototype"
            (TextDecoderStream.t_to_js x15967)
    let (create :
      t ->
        ?label:string ->
          ?options:TextDecoderOptions.t -> unit -> TextDecoderStream.t)
      =
      fun (x15973 : t) ->
        fun ?label:(x15968 : string option) ->
          fun ?options:(x15969 : TextDecoderOptions.t option) ->
            fun () ->
              TextDecoderStream.t_of_js
                (Ojs.new_obj_arr (t_to_js x15973)
                   (let x15970 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x15968 with
                     | Some x15972 ->
                         ignore
                           (Ojs.call x15970 "push"
                              [|(Ojs.string_to_js x15972)|])
                     | None -> ());
                    (match x15969 with
                     | Some x15971 ->
                         ignore
                           (Ojs.call x15970 "push"
                              [|(TextDecoderOptions.t_to_js x15971)|])
                     | None -> ());
                    x15970))
  end
 and
  TextDecoderStream:sig
                      type t =
                        [ `GenericTransformStream  | `TextDecoderCommon 
                        | `TextDecoderStream ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags =
                        [ `GenericTransformStream  | `TextDecoderCommon 
                        | `TextDecoderStream ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags =
                          [ `GenericTransformStream  | `TextDecoderCommon 
                          | `TextDecoderStream ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `TextDecoderStream ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_readable :
                        'tags this -> string ReadableStream.t
                      val get_writable :
                        'tags this -> BufferSource.t WritableStream.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create :
                        ?label:string ->
                          ?options:TextDecoderOptions.t -> unit -> t
                    end =
  struct
    type t =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15975 : Ojs.t) -> t_of_js x15975
    and t_0_to_js : t_0 -> Ojs.t = fun (x15974 : t) -> t_to_js x15974
    type tags =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15978 : Ojs.t) -> intf_of_js __tags_of_js x15978
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15976 : __tags intf) -> intf_to_js __tags_to_js x15976
    let (get_readable : 'tags this -> string ReadableStream.t) =
      fun (x15980 : 'tags this) ->
        ReadableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15980) "readable")
    let (get_writable : 'tags this -> BufferSource.t WritableStream.t) =
      fun (x15983 : 'tags this) ->
        WritableStream.t_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15983) "writable")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextDecoderStream") "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x15986 : string option) ->
        fun ?options:(x15987 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
                 (let x15988 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x15986 with
                   | Some x15990 ->
                       ignore
                         (Ojs.call x15988 "push"
                            [|(Ojs.string_to_js x15990)|])
                   | None -> ());
                  (match x15987 with
                   | Some x15989 ->
                       ignore
                         (Ojs.call x15988 "push"
                            [|(TextDecoderOptions.t_to_js x15989)|])
                   | None -> ());
                  x15988))
  end
module TextDecodeOptions =
  struct
    type t = [ `TextDecodeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15992 : Ojs.t) -> t_of_js x15992
    and t_0_to_js : t_0 -> Ojs.t = fun (x15991 : t) -> t_to_js x15991
    type tags = [ `TextDecodeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15995 : Ojs.t) -> intf_of_js __tags_of_js x15995
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15993 : __tags intf) -> intf_to_js __tags_to_js x15993
    let (get_stream : 'tags this -> bool) =
      fun (x15997 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15997) "stream")
    let (set_stream : 'tags this -> bool -> unit) =
      fun (x15999 : 'tags this) ->
        fun (x16000 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15999) "stream"
            (Ojs.bool_to_js x16000)
    let cast_from = Obj.magic
  end
module rec
  AnonymousInterface102:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> TextDecoder.t
                          val set_prototype : t -> TextDecoder.t -> unit
                          val create :
                            t ->
                              ?label:string ->
                                ?options:TextDecoderOptions.t ->
                                  unit -> TextDecoder.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x16003 : Ojs.t) -> x16003
    and t_to_js : t -> Ojs.t = fun (x16002 : Ojs.t) -> x16002
    let (get_prototype : t -> TextDecoder.t) =
      fun (x16004 : t) ->
        TextDecoder.t_of_js (Ojs.get_prop_ascii (t_to_js x16004) "prototype")
    let (set_prototype : t -> TextDecoder.t -> unit) =
      fun (x16005 : t) ->
        fun (x16006 : TextDecoder.t) ->
          Ojs.set_prop_ascii (t_to_js x16005) "prototype"
            (TextDecoder.t_to_js x16006)
    let (create :
      t ->
        ?label:string ->
          ?options:TextDecoderOptions.t -> unit -> TextDecoder.t)
      =
      fun (x16012 : t) ->
        fun ?label:(x16007 : string option) ->
          fun ?options:(x16008 : TextDecoderOptions.t option) ->
            fun () ->
              TextDecoder.t_of_js
                (Ojs.new_obj_arr (t_to_js x16012)
                   (let x16009 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x16007 with
                     | Some x16011 ->
                         ignore
                           (Ojs.call x16009 "push"
                              [|(Ojs.string_to_js x16011)|])
                     | None -> ());
                    (match x16008 with
                     | Some x16010 ->
                         ignore
                           (Ojs.call x16009 "push"
                              [|(TextDecoderOptions.t_to_js x16010)|])
                     | None -> ());
                    x16009))
  end
 and
  TextDecoder:sig
                type t = [ `TextDecoder  | `TextDecoderCommon ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `TextDecoder  | `TextDecoderCommon ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `TextDecoder  | `TextDecoderCommon ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `TextDecoder ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val decode :
                  'tags this ->
                    ?input:BufferSource.t ->
                      ?options:TextDecodeOptions.t -> unit -> string
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create :
                  ?label:string -> ?options:TextDecoderOptions.t -> unit -> t
              end =
  struct
    type t = [ `TextDecoder  | `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16014 : Ojs.t) -> t_of_js x16014
    and t_0_to_js : t_0 -> Ojs.t = fun (x16013 : t) -> t_to_js x16013
    type tags = [ `TextDecoder  | `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x16017 : Ojs.t) -> intf_of_js __tags_of_js x16017
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x16015 : __tags intf) -> intf_to_js __tags_to_js x16015
    let (decode :
      'tags this ->
        ?input:BufferSource.t ->
          ?options:TextDecodeOptions.t -> unit -> string)
      =
      fun (x16024 : 'tags this) ->
        fun ?input:(x16019 : BufferSource.t option) ->
          fun ?options:(x16020 : TextDecodeOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x16026 = this_to_js Obj.magic x16024 in
                 Ojs.call (Ojs.get_prop_ascii x16026 "decode") "apply"
                   [|x16026;((let x16021 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x16019 with
                               | Some x16023 ->
                                   ignore
                                     (Ojs.call x16021 "push"
                                        [|(BufferSource.t_to_js x16023)|])
                               | None -> ());
                              (match x16020 with
                               | Some x16022 ->
                                   ignore
                                     (Ojs.call x16021 "push"
                                        [|(TextDecodeOptions.t_to_js x16022)|])
                               | None -> ());
                              x16021))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextDecoder")
             "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x16027 : string option) ->
        fun ?options:(x16028 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TextDecoder")
                 (let x16029 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x16027 with
                   | Some x16031 ->
                       ignore
                         (Ojs.call x16029 "push"
                            [|(Ojs.string_to_js x16031)|])
                   | None -> ());
                  (match x16028 with
                   | Some x16030 ->
                       ignore
                         (Ojs.call x16029 "push"
                            [|(TextDecoderOptions.t_to_js x16030)|])
                   | None -> ());
                  x16029))
  end
module rec
  AnonymousInterface101:sig
                          type t = private Ojs.t
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val get_prototype : t -> WebAssembly.Table.t
                          val set_prototype :
                            t -> WebAssembly.Table.t -> unit
                          val create :
                            t ->
                              descriptor:WebAssembly.TableDescriptor.t ->
                                ?value:any -> unit -> WebAssembly.Table.t
                        end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x16033 : Ojs.t) -> x16033
    and t_to_js : t -> Ojs.t = fun (x16032 : Ojs.t) -> x16032
    let (get_prototype : t -> WebAssembly.Table.t) =
      fun (x16034 : t) ->
        WebAssembly.Table.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16034) "prototype")
    let (set_prototype : t -> WebAssembly.Table.t -> unit) =
      fun (x16035 : t) ->
        fun (x16036 : WebAssembly.Table.t) ->
          Ojs.set_prop_ascii (t_to_js x16035) "prototype"
            (WebAssembly.Table.t_to_js x16036)
    let (create :
      t ->
        descriptor:WebAssembly.TableDescriptor.t ->
          ?value:any -> unit -> WebAssembly.Table.t)
      =
      fun (x16041 : t) ->
        fun ~descriptor:(x16037 : WebAssembly.TableDescriptor.t) ->
          fun ?value:(x16038 : any option) ->
            fun () ->
              WebAssembly.Table.t_of_js
                (Ojs.new_obj_arr (t_to_js x16041)
                   (let x16039 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x16039 "push"
                         [|(WebAssembly.TableDescriptor.t_to_js x16037)|]);
                    (match x16038 with
                     | Some x16040 ->
                         ignore
                           (Ojs.call x16039 "push" [|(any_to_js x16040)|])
                     | None -> ());
                    x16039))
  end
 and
  AnonymousInterface12:sig
                         type t = private Ojs.t
                         val t_to_js : t -> Ojs.t
                         val t_of_js : Ojs.t -> t
                         val get_prototype : t -> WebAssembly.CompileError.t
                         val set_prototype :
                           t -> WebAssembly.CompileError.t -> unit
                         val create : t -> WebAssembly.CompileError.t
                       end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x16043 : Ojs.t) -> x16043
    and t_to_js : t -> Ojs.t = fun (x16042 : Ojs.t) -> x16042
    let (get_prototype : t -> WebAssembly.CompileError.t) =
      fun (x16044 : t) ->
        WebAssembly.CompileError.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16044) "prototype")
    let (set_prototype : t -> WebAssembly.CompileError.t -> unit) =
      fun (x16045 : t) ->
        fun (x16046 : WebAssembly.CompileError.t) ->
          Ojs.set_prop_ascii (t_to_js x16045) "prototype"
            (WebAssembly.CompileError.t_to_js x16046)
    let (create : t -> WebAssembly.CompileError.t) =
      fun (x16047 : t) ->
        WebAssembly.CompileError.t_of_js (Ojs.new_obj (t_to_js x16047) [||])
  end and
       AnonymousInterface42:sig
                              type t = private Ojs.t
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val get_prototype : t -> WebAssembly.Global.t
                              val set_prototype :
                                t -> WebAssembly.Global.t -> unit
                              val create :
                                t ->
                                  descriptor:WebAssembly.GlobalDescriptor.t
                                    -> ?v:any -> unit -> WebAssembly.Global.t
                            end =
       struct
         type t = Ojs.t
         let rec t_of_js : Ojs.t -> t = fun (x16049 : Ojs.t) -> x16049
         and t_to_js : t -> Ojs.t = fun (x16048 : Ojs.t) -> x16048
         let (get_prototype : t -> WebAssembly.Global.t) =
           fun (x16050 : t) ->
             WebAssembly.Global.t_of_js
               (Ojs.get_prop_ascii (t_to_js x16050) "prototype")
         let (set_prototype : t -> WebAssembly.Global.t -> unit) =
           fun (x16051 : t) ->
             fun (x16052 : WebAssembly.Global.t) ->
               Ojs.set_prop_ascii (t_to_js x16051) "prototype"
                 (WebAssembly.Global.t_to_js x16052)
         let (create :
           t ->
             descriptor:WebAssembly.GlobalDescriptor.t ->
               ?v:any -> unit -> WebAssembly.Global.t)
           =
           fun (x16057 : t) ->
             fun ~descriptor:(x16053 : WebAssembly.GlobalDescriptor.t) ->
               fun ?v:(x16054 : any option) ->
                 fun () ->
                   WebAssembly.Global.t_of_js
                     (Ojs.new_obj_arr (t_to_js x16057)
                        (let x16055 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x16055 "push"
                              [|(WebAssembly.GlobalDescriptor.t_to_js x16053)|]);
                         (match x16054 with
                          | Some x16056 ->
                              ignore
                                (Ojs.call x16055 "push"
                                   [|(any_to_js x16056)|])
                          | None -> ());
                         x16055))
       end and
            AnonymousInterface58:sig
                                   type t = private Ojs.t
                                   val t_to_js : t -> Ojs.t
                                   val t_of_js : Ojs.t -> t
                                   val get_prototype :
                                     t -> WebAssembly.Instance.t
                                   val set_prototype :
                                     t -> WebAssembly.Instance.t -> unit
                                   val create :
                                     t ->
                                       module_:WebAssembly.Module.t ->
                                         ?importObject:WebAssembly.Imports.t
                                           -> unit -> WebAssembly.Instance.t
                                 end =
            struct
              type t = Ojs.t
              let rec t_of_js : Ojs.t -> t = fun (x16059 : Ojs.t) -> x16059
              and t_to_js : t -> Ojs.t = fun (x16058 : Ojs.t) -> x16058
              let (get_prototype : t -> WebAssembly.Instance.t) =
                fun (x16060 : t) ->
                  WebAssembly.Instance.t_of_js
                    (Ojs.get_prop_ascii (t_to_js x16060) "prototype")
              let (set_prototype : t -> WebAssembly.Instance.t -> unit) =
                fun (x16061 : t) ->
                  fun (x16062 : WebAssembly.Instance.t) ->
                    Ojs.set_prop_ascii (t_to_js x16061) "prototype"
                      (WebAssembly.Instance.t_to_js x16062)
              let (create :
                t ->
                  module_:WebAssembly.Module.t ->
                    ?importObject:WebAssembly.Imports.t ->
                      unit -> WebAssembly.Instance.t)
                =
                fun (x16067 : t) ->
                  fun ~module_:(x16063 : WebAssembly.Module.t) ->
                    fun ?importObject:(x16064 : WebAssembly.Imports.t option)
                      ->
                      fun () ->
                        WebAssembly.Instance.t_of_js
                          (Ojs.new_obj_arr (t_to_js x16067)
                             (let x16065 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x16065 "push"
                                   [|(WebAssembly.Module.t_to_js x16063)|]);
                              (match x16064 with
                               | Some x16066 ->
                                   ignore
                                     (Ojs.call x16065 "push"
                                        [|(WebAssembly.Imports.t_to_js x16066)|])
                               | None -> ());
                              x16065))
            end and
                 AnonymousInterface59:sig
                                        type t = private Ojs.t
                                        val t_to_js : t -> Ojs.t
                                        val t_of_js : Ojs.t -> t
                                        val get_prototype :
                                          t -> WebAssembly.LinkError.t
                                        val set_prototype :
                                          t ->
                                            WebAssembly.LinkError.t -> unit
                                        val create :
                                          t -> WebAssembly.LinkError.t
                                      end =
                 struct
                   type t = Ojs.t
                   let rec t_of_js : Ojs.t -> t =
                     fun (x16069 : Ojs.t) -> x16069
                   and t_to_js : t -> Ojs.t = fun (x16068 : Ojs.t) -> x16068
                   let (get_prototype : t -> WebAssembly.LinkError.t) =
                     fun (x16070 : t) ->
                       WebAssembly.LinkError.t_of_js
                         (Ojs.get_prop_ascii (t_to_js x16070) "prototype")
                   let (set_prototype : t -> WebAssembly.LinkError.t -> unit)
                     =
                     fun (x16071 : t) ->
                       fun (x16072 : WebAssembly.LinkError.t) ->
                         Ojs.set_prop_ascii (t_to_js x16071) "prototype"
                           (WebAssembly.LinkError.t_to_js x16072)
                   let (create : t -> WebAssembly.LinkError.t) =
                     fun (x16073 : t) ->
                       WebAssembly.LinkError.t_of_js
                         (Ojs.new_obj (t_to_js x16073) [||])
                 end and
                      AnonymousInterface61:sig
                                             type t = private Ojs.t
                                             val t_to_js : t -> Ojs.t
                                             val t_of_js : Ojs.t -> t
                                             val get_prototype :
                                               t -> WebAssembly.Memory.t
                                             val set_prototype :
                                               t ->
                                                 WebAssembly.Memory.t -> unit
                                             val create :
                                               t ->
                                                 descriptor:WebAssembly.MemoryDescriptor.t
                                                   -> WebAssembly.Memory.t
                                           end =
                      struct
                        type t = Ojs.t
                        let rec t_of_js : Ojs.t -> t =
                          fun (x16075 : Ojs.t) -> x16075
                        and t_to_js : t -> Ojs.t =
                          fun (x16074 : Ojs.t) -> x16074
                        let (get_prototype : t -> WebAssembly.Memory.t) =
                          fun (x16076 : t) ->
                            WebAssembly.Memory.t_of_js
                              (Ojs.get_prop_ascii (t_to_js x16076)
                                 "prototype")
                        let (set_prototype :
                          t -> WebAssembly.Memory.t -> unit) =
                          fun (x16077 : t) ->
                            fun (x16078 : WebAssembly.Memory.t) ->
                              Ojs.set_prop_ascii (t_to_js x16077) "prototype"
                                (WebAssembly.Memory.t_to_js x16078)
                        let (create :
                          t ->
                            descriptor:WebAssembly.MemoryDescriptor.t ->
                              WebAssembly.Memory.t)
                          =
                          fun (x16080 : t) ->
                            fun
                              ~descriptor:(x16079 :
                                            WebAssembly.MemoryDescriptor.t)
                              ->
                              WebAssembly.Memory.t_of_js
                                (Ojs.new_obj (t_to_js x16080)
                                   [|(WebAssembly.MemoryDescriptor.t_to_js
                                        x16079)|])
                      end and
                           AnonymousInterface65:sig
                                                  type t = private Ojs.t
                                                  val t_to_js : t -> Ojs.t
                                                  val t_of_js : Ojs.t -> t
                                                  val get_prototype :
                                                    t -> WebAssembly.Module.t
                                                  val set_prototype :
                                                    t ->
                                                      WebAssembly.Module.t ->
                                                        unit
                                                  val create :
                                                    t ->
                                                      bytes:BufferSource.t ->
                                                        WebAssembly.Module.t
                                                  val customSections :
                                                    t ->
                                                      moduleObject:WebAssembly.Module.t
                                                        ->
                                                        sectionName:string ->
                                                          ArrayBuffer.t_0
                                                            list
                                                  val exports :
                                                    t ->
                                                      moduleObject:WebAssembly.Module.t
                                                        ->
                                                        WebAssembly.ModuleExportDescriptor.t
                                                          list
                                                  val imports :
                                                    t ->
                                                      moduleObject:WebAssembly.Module.t
                                                        ->
                                                        WebAssembly.ModuleImportDescriptor.t
                                                          list
                                                end =
                           struct
                             type t = Ojs.t
                             let rec t_of_js : Ojs.t -> t =
                               fun (x16082 : Ojs.t) -> x16082
                             and t_to_js : t -> Ojs.t =
                               fun (x16081 : Ojs.t) -> x16081
                             let (get_prototype : t -> WebAssembly.Module.t)
                               =
                               fun (x16083 : t) ->
                                 WebAssembly.Module.t_of_js
                                   (Ojs.get_prop_ascii (t_to_js x16083)
                                      "prototype")
                             let (set_prototype :
                               t -> WebAssembly.Module.t -> unit) =
                               fun (x16084 : t) ->
                                 fun (x16085 : WebAssembly.Module.t) ->
                                   Ojs.set_prop_ascii (t_to_js x16084)
                                     "prototype"
                                     (WebAssembly.Module.t_to_js x16085)
                             let (create :
                               t ->
                                 bytes:BufferSource.t -> WebAssembly.Module.t)
                               =
                               fun (x16087 : t) ->
                                 fun ~bytes:(x16086 : BufferSource.t) ->
                                   WebAssembly.Module.t_of_js
                                     (Ojs.new_obj (t_to_js x16087)
                                        [|(BufferSource.t_to_js x16086)|])
                             let (customSections :
                               t ->
                                 moduleObject:WebAssembly.Module.t ->
                                   sectionName:string -> ArrayBuffer.t_0 list)
                               =
                               fun (x16090 : t) ->
                                 fun
                                   ~moduleObject:(x16088 :
                                                   WebAssembly.Module.t)
                                   ->
                                   fun ~sectionName:(x16089 : string) ->
                                     Ojs.list_of_js ArrayBuffer.t_0_of_js
                                       (Ojs.call (t_to_js x16090)
                                          "customSections"
                                          [|(WebAssembly.Module.t_to_js
                                               x16088);(Ojs.string_to_js
                                                          x16089)|])
                             let (exports :
                               t ->
                                 moduleObject:WebAssembly.Module.t ->
                                   WebAssembly.ModuleExportDescriptor.t list)
                               =
                               fun (x16093 : t) ->
                                 fun
                                   ~moduleObject:(x16092 :
                                                   WebAssembly.Module.t)
                                   ->
                                   Ojs.list_of_js
                                     WebAssembly.ModuleExportDescriptor.t_of_js
                                     (Ojs.call (t_to_js x16093) "exports"
                                        [|(WebAssembly.Module.t_to_js x16092)|])
                             let (imports :
                               t ->
                                 moduleObject:WebAssembly.Module.t ->
                                   WebAssembly.ModuleImportDescriptor.t list)
                               =
                               fun (x16096 : t) ->
                                 fun
                                   ~moduleObject:(x16095 :
                                                   WebAssembly.Module.t)
                                   ->
                                   Ojs.list_of_js
                                     WebAssembly.ModuleImportDescriptor.t_of_js
                                     (Ojs.call (t_to_js x16096) "imports"
                                        [|(WebAssembly.Module.t_to_js x16095)|])
                           end and
                                AnonymousInterface92:sig
                                                       type t = private Ojs.t
                                                       val t_to_js :
                                                         t -> Ojs.t
                                                       val t_of_js :
                                                         Ojs.t -> t
                                                       val get_prototype :
                                                         t ->
                                                           WebAssembly.RuntimeError.t
                                                       val set_prototype :
                                                         t ->
                                                           WebAssembly.RuntimeError.t
                                                             -> unit
                                                       val create :
                                                         t ->
                                                           WebAssembly.RuntimeError.t
                                                     end =
                                struct
                                  type t = Ojs.t
                                  let rec t_of_js : Ojs.t -> t =
                                    fun (x16099 : Ojs.t) -> x16099
                                  and t_to_js : t -> Ojs.t =
                                    fun (x16098 : Ojs.t) -> x16098
                                  let (get_prototype :
                                    t -> WebAssembly.RuntimeError.t) =
                                    fun (x16100 : t) ->
                                      WebAssembly.RuntimeError.t_of_js
                                        (Ojs.get_prop_ascii (t_to_js x16100)
                                           "prototype")
                                  let (set_prototype :
                                    t -> WebAssembly.RuntimeError.t -> unit)
                                    =
                                    fun (x16101 : t) ->
                                      fun
                                        (x16102 : WebAssembly.RuntimeError.t)
                                        ->
                                        Ojs.set_prop_ascii (t_to_js x16101)
                                          "prototype"
                                          (WebAssembly.RuntimeError.t_to_js
                                             x16102)
                                  let (create :
                                    t -> WebAssembly.RuntimeError.t) =
                                    fun (x16103 : t) ->
                                      WebAssembly.RuntimeError.t_of_js
                                        (Ojs.new_obj (t_to_js x16103) [||])
                                end and
                                     WebAssembly:sig
                                                   module ImportExportKind :
                                                   sig
                                                     type t =
                                                       [ `L_s79_function 
                                                       | `L_s82_global 
                                                       | `L_s114_memory 
                                                       | `L_s190_table ]
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module
                                                   ModuleImportDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_ModuleImportDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_ModuleImportDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_ModuleImportDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_ModuleImportDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_kind :
                                                       'tags this ->
                                                         ImportExportKind.t
                                                     val set_kind :
                                                       'tags this ->
                                                         ImportExportKind.t
                                                           -> unit
                                                     val get_module :
                                                       'tags this -> string
                                                     val set_module :
                                                       'tags this ->
                                                         string -> unit
                                                     val get_name :
                                                       'tags this -> string
                                                     val set_name :
                                                       'tags this ->
                                                         string -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module
                                                   ModuleExportDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_ModuleExportDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_ModuleExportDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_ModuleExportDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_ModuleExportDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_kind :
                                                       'tags this ->
                                                         ImportExportKind.t
                                                     val set_kind :
                                                       'tags this ->
                                                         ImportExportKind.t
                                                           -> unit
                                                     val get_name :
                                                       'tags this -> string
                                                     val set_name :
                                                       'tags this ->
                                                         string -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module Module :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_Module ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_Module ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Module
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Module
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       BufferSource.t -> t
                                                     val customSections :
                                                       moduleObject:t ->
                                                         sectionName:string
                                                           ->
                                                           ArrayBuffer.t_0
                                                             list
                                                     val exports :
                                                       t ->
                                                         ModuleExportDescriptor.t
                                                           list
                                                     val imports :
                                                       t ->
                                                         ModuleImportDescriptor.t
                                                           list
                                                   end
                                                   module TableKind :
                                                   sig
                                                     type t =
                                                       [ `L_s36_anyfunc 
                                                       | `L_s69_externref ]
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module TableDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_TableDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_TableDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_TableDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_TableDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_element :
                                                       'tags this ->
                                                         TableKind.t
                                                     val set_element :
                                                       'tags this ->
                                                         TableKind.t -> unit
                                                     val get_initial :
                                                       'tags this -> float
                                                     val set_initial :
                                                       'tags this ->
                                                         float -> unit
                                                     val get_maximum :
                                                       'tags this -> float
                                                     val set_maximum :
                                                       'tags this ->
                                                         float -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module Table :
                                                   sig
                                                     type t =
                                                       [ `WebAssembly_Table ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [ `WebAssembly_Table ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Table ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Table
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_length :
                                                       'tags this -> float
                                                     val get_ :
                                                       'tags this ->
                                                         index:float -> any
                                                     val grow :
                                                       'tags this ->
                                                         delta:float ->
                                                           ?value:any ->
                                                             unit -> float
                                                     val set_ :
                                                       'tags this ->
                                                         index:float ->
                                                           ?value:any ->
                                                             unit -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       descriptor:TableDescriptor.t
                                                         ->
                                                         ?value:any ->
                                                           unit -> t
                                                   end
                                                   module MemoryDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_MemoryDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_MemoryDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_MemoryDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_MemoryDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_initial :
                                                       'tags this -> float
                                                     val set_initial :
                                                       'tags this ->
                                                         float -> unit
                                                     val get_maximum :
                                                       'tags this -> float
                                                     val set_maximum :
                                                       'tags this ->
                                                         float -> unit
                                                     val get_shared :
                                                       'tags this -> bool
                                                     val set_shared :
                                                       'tags this ->
                                                         bool -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module Memory :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_Memory ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_Memory ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Memory
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Memory
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_buffer :
                                                       'tags this ->
                                                         ArrayBuffer.t_0
                                                     val grow :
                                                       'tags this ->
                                                         delta:float -> float
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       MemoryDescriptor.t ->
                                                         t
                                                   end
                                                   module ValueType :
                                                   sig
                                                     type t =
                                                       [ `L_s36_anyfunc 
                                                       | `L_s69_externref 
                                                       | `L_s70_f32 
                                                       | `L_s71_f64 
                                                       | `L_s88_i32 
                                                       | `L_s89_i64 ]
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module GlobalDescriptor :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_GlobalDescriptor
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_GlobalDescriptor
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_GlobalDescriptor
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_GlobalDescriptor
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_mutable :
                                                       'tags this -> bool
                                                     val set_mutable :
                                                       'tags this ->
                                                         bool -> unit
                                                     val get_value :
                                                       'tags this ->
                                                         ValueType.t
                                                     val set_value :
                                                       'tags this ->
                                                         ValueType.t -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module Global :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_Global ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_Global ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Global
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Global
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_value :
                                                       'tags this -> any
                                                     val set_value :
                                                       'tags this ->
                                                         any -> unit
                                                     val valueOf :
                                                       'tags this -> any
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       descriptor:GlobalDescriptor.t
                                                         ->
                                                         ?v:any -> unit -> t
                                                   end
                                                   module ExportValue :
                                                   sig
                                                     type t =
                                                       (untyped_function,
                                                         Global.t, Memory.t,
                                                         Table.t) union4
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module ImportValue :
                                                   sig
                                                     type t =
                                                       ExportValue.t
                                                         or_number
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module ModuleImports :
                                                   sig
                                                     type t =
                                                       (string,
                                                         ImportValue.t)
                                                         Record.t_2
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module Imports :
                                                   sig
                                                     type t =
                                                       (string,
                                                         ModuleImports.t)
                                                         Record.t_2
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module Exports :
                                                   sig
                                                     type t =
                                                       (string,
                                                         ExportValue.t)
                                                         Record.t_2
                                                     type t_0 = t
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                   end
                                                   module Instance :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_Instance
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_Instance
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_Instance
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_Instance
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_exports :
                                                       'tags this ->
                                                         Exports.t
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create :
                                                       module_:Module.t ->
                                                         ?importObject:Imports.t
                                                           -> unit -> t
                                                   end
                                                   module
                                                   WebAssemblyInstantiatedSource
                                                   :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_WebAssemblyInstantiatedSource
                                                           ]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_WebAssemblyInstantiatedSource
                                                           ]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_WebAssemblyInstantiatedSource
                                                             ]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_WebAssemblyInstantiatedSource
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val get_instance :
                                                       'tags this ->
                                                         Instance.t
                                                     val set_instance :
                                                       'tags this ->
                                                         Instance.t -> unit
                                                     val get_module :
                                                       'tags this -> Module.t
                                                     val set_module :
                                                       'tags this ->
                                                         Module.t -> unit
                                                     val cast_from :
                                                       'tags this -> t
                                                   end
                                                   module RuntimeError :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_RuntimeError
                                                            | Error.tags_0]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_RuntimeError
                                                            | Error.tags_0]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_RuntimeError
                                                              | Error.tags_0]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_RuntimeError
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create : unit -> t
                                                   end
                                                   module LinkError :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_LinkError
                                                            | Error.tags_0]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_LinkError
                                                            | Error.tags_0]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_LinkError
                                                              | Error.tags_0]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_LinkError
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create : unit -> t
                                                   end
                                                   module CompileError :
                                                   sig
                                                     type t =
                                                       [
                                                         `WebAssembly_CompileError
                                                            | Error.tags_0]
                                                         intf
                                                     type t_0 = t
                                                     [@@@js.stop ]
                                                     type tags =
                                                       [
                                                         `WebAssembly_CompileError
                                                            | Error.tags_0]
                                                     type tags_0 = tags
                                                     [@@@js.start ]
                                                     [@@@js.implem
                                                       type tags =
                                                         [
                                                           `WebAssembly_CompileError
                                                              | Error.tags_0]
                                                       type tags_0 = tags]
                                                     type 'tags this =
                                                       'tags intf constraint
                                                                   'tags =
                                                                   [>
                                                                    `WebAssembly_CompileError
                                                                    ]
                                                     val t_to_js : t -> Ojs.t
                                                     val t_of_js : Ojs.t -> t
                                                     val t_0_to_js :
                                                       t_0 -> Ojs.t
                                                     val t_0_of_js :
                                                       Ojs.t -> t_0
                                                     val cast_from :
                                                       'tags this -> t
                                                     val prototype :
                                                       unit -> t
                                                     val create : unit -> t
                                                   end
                                                   val compileError :
                                                     unit ->
                                                       AnonymousInterface12.t
                                                   val global :
                                                     unit ->
                                                       AnonymousInterface42.t
                                                   val instance :
                                                     unit ->
                                                       AnonymousInterface58.t
                                                   val linkError :
                                                     unit ->
                                                       AnonymousInterface59.t
                                                   val memory :
                                                     unit ->
                                                       AnonymousInterface61.t
                                                   val module_ :
                                                     unit ->
                                                       AnonymousInterface65.t
                                                   val runtimeError :
                                                     unit ->
                                                       AnonymousInterface92.t
                                                   val table :
                                                     unit ->
                                                       AnonymousInterface101.t
                                                   val compile :
                                                     BufferSource.t ->
                                                       Module.t Promise.t_1
                                                   val compileStreaming :
                                                     (Response.t,
                                                       Response.t
                                                         PromiseLike.t_1)
                                                       union2 ->
                                                       Module.t Promise.t_1
                                                   val instantiate :
                                                     bytes:BufferSource.t ->
                                                       ?importObject:Imports.t
                                                         ->
                                                         unit ->
                                                           WebAssemblyInstantiatedSource.t
                                                             Promise.t_1
                                                   val instantiate' :
                                                     moduleObject:Module.t ->
                                                       ?importObject:Imports.t
                                                         ->
                                                         unit ->
                                                           Instance.t
                                                             Promise.t_1
                                                   val instantiateStreaming :
                                                     source:(Response.t,
                                                       Response.t
                                                         PromiseLike.t_1)
                                                       union2 ->
                                                       ?importObject:Imports.t
                                                         ->
                                                         unit ->
                                                           WebAssemblyInstantiatedSource.t
                                                             Promise.t_1
                                                   val validate :
                                                     BufferSource.t -> bool
                                                 end =
                                     struct
                                       module ImportExportKind =
                                         struct
                                           type t =
                                             [ `L_s79_function 
                                             | `L_s82_global 
                                             | `L_s114_memory 
                                             | `L_s190_table ]
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16105 : Ojs.t) ->
                                               let x16106 = x16105 in
                                               match Ojs.string_of_js x16106
                                               with
                                               | "function" ->
                                                   `L_s79_function
                                               | "global" -> `L_s82_global
                                               | "memory" -> `L_s114_memory
                                               | "table" -> `L_s190_table
                                               | _ -> assert false
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16104 :
                                                 [ `L_s79_function 
                                                 | `L_s82_global 
                                                 | `L_s114_memory 
                                                 | `L_s190_table ])
                                               ->
                                               match x16104 with
                                               | `L_s79_function ->
                                                   Ojs.string_to_js
                                                     "function"
                                               | `L_s82_global ->
                                                   Ojs.string_to_js "global"
                                               | `L_s114_memory ->
                                                   Ojs.string_to_js "memory"
                                               | `L_s190_table ->
                                                   Ojs.string_to_js "table"
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16108 : Ojs.t) ->
                                               t_of_js x16108
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16107 : t) ->
                                               t_to_js x16107
                                         end
                                       module ModuleImportDescriptor =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_ModuleImportDescriptor
                                                 ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16110 : Ojs.t) ->
                                               t_of_js x16110
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16109 : t) ->
                                               t_to_js x16109
                                           type tags =
                                             [
                                               `WebAssembly_ModuleImportDescriptor
                                                 ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_ModuleImportDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16113 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16113
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16111 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16111
                                           let (get_kind :
                                             'tags this -> ImportExportKind.t)
                                             =
                                             fun (x16115 : 'tags this) ->
                                               ImportExportKind.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16115) "kind")
                                           let (set_kind :
                                             'tags this ->
                                               ImportExportKind.t -> unit)
                                             =
                                             fun (x16117 : 'tags this) ->
                                               fun
                                                 (x16118 :
                                                   ImportExportKind.t)
                                                 ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16117) "kind"
                                                   (ImportExportKind.t_to_js
                                                      x16118)
                                           let (get_module :
                                             'tags this -> string) =
                                             fun (x16120 : 'tags this) ->
                                               Ojs.string_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16120) "module")
                                           let (set_module :
                                             'tags this -> string -> unit) =
                                             fun (x16122 : 'tags this) ->
                                               fun (x16123 : string) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16122) "module"
                                                   (Ojs.string_to_js x16123)
                                           let (get_name :
                                             'tags this -> string) =
                                             fun (x16125 : 'tags this) ->
                                               Ojs.string_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16125) "name")
                                           let (set_name :
                                             'tags this -> string -> unit) =
                                             fun (x16127 : 'tags this) ->
                                               fun (x16128 : string) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16127) "name"
                                                   (Ojs.string_to_js x16128)
                                           let cast_from = Obj.magic
                                         end
                                       module ModuleExportDescriptor =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_ModuleExportDescriptor
                                                 ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16131 : Ojs.t) ->
                                               t_of_js x16131
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16130 : t) ->
                                               t_to_js x16130
                                           type tags =
                                             [
                                               `WebAssembly_ModuleExportDescriptor
                                                 ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_ModuleExportDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16134 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16134
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16132 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16132
                                           let (get_kind :
                                             'tags this -> ImportExportKind.t)
                                             =
                                             fun (x16136 : 'tags this) ->
                                               ImportExportKind.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16136) "kind")
                                           let (set_kind :
                                             'tags this ->
                                               ImportExportKind.t -> unit)
                                             =
                                             fun (x16138 : 'tags this) ->
                                               fun
                                                 (x16139 :
                                                   ImportExportKind.t)
                                                 ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16138) "kind"
                                                   (ImportExportKind.t_to_js
                                                      x16139)
                                           let (get_name :
                                             'tags this -> string) =
                                             fun (x16141 : 'tags this) ->
                                               Ojs.string_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16141) "name")
                                           let (set_name :
                                             'tags this -> string -> unit) =
                                             fun (x16143 : 'tags this) ->
                                               fun (x16144 : string) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16143) "name"
                                                   (Ojs.string_to_js x16144)
                                           let cast_from = Obj.magic
                                         end
                                       module Module =
                                         struct
                                           type t =
                                             [ `WebAssembly_Module ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16147 : Ojs.t) ->
                                               t_of_js x16147
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16146 : t) ->
                                               t_to_js x16146
                                           type tags =
                                             [ `WebAssembly_Module ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Module
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16150 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16150
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16148 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16148
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Module") "prototype")
                                           let (create : BufferSource.t -> t)
                                             =
                                             fun (x16152 : BufferSource.t) ->
                                               t_of_js
                                                 (Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Module")
                                                    [|(BufferSource.t_to_js
                                                         x16152)|])
                                           let (customSections :
                                             moduleObject:t ->
                                               sectionName:string ->
                                                 ArrayBuffer.t_0 list)
                                             =
                                             fun ~moduleObject:(x16153 : t)
                                               ->
                                               fun
                                                 ~sectionName:(x16154 :
                                                                string)
                                                 ->
                                                 Ojs.list_of_js
                                                   ArrayBuffer.t_0_of_js
                                                   (Ojs.call
                                                      (Ojs.get_prop_ascii
                                                         (Ojs.get_prop_ascii
                                                            Ojs.global
                                                            "WebAssembly")
                                                         "Module")
                                                      "customSections"
                                                      [|(t_to_js x16153);(
                                                        Ojs.string_to_js
                                                          x16154)|])
                                           let (exports :
                                             t ->
                                               ModuleExportDescriptor.t list)
                                             =
                                             fun (x16156 : t) ->
                                               Ojs.list_of_js
                                                 ModuleExportDescriptor.t_of_js
                                                 (Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Module") "exports"
                                                    [|(t_to_js x16156)|])
                                           let (imports :
                                             t ->
                                               ModuleImportDescriptor.t list)
                                             =
                                             fun (x16158 : t) ->
                                               Ojs.list_of_js
                                                 ModuleImportDescriptor.t_of_js
                                                 (Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Module") "imports"
                                                    [|(t_to_js x16158)|])
                                         end
                                       module TableKind =
                                         struct
                                           type t =
                                             [ `L_s36_anyfunc 
                                             | `L_s69_externref ]
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16161 : Ojs.t) ->
                                               let x16162 = x16161 in
                                               match Ojs.string_of_js x16162
                                               with
                                               | "anyfunc" -> `L_s36_anyfunc
                                               | "externref" ->
                                                   `L_s69_externref
                                               | _ -> assert false
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16160 :
                                                 [ `L_s36_anyfunc 
                                                 | `L_s69_externref ])
                                               ->
                                               match x16160 with
                                               | `L_s36_anyfunc ->
                                                   Ojs.string_to_js "anyfunc"
                                               | `L_s69_externref ->
                                                   Ojs.string_to_js
                                                     "externref"
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16164 : Ojs.t) ->
                                               t_of_js x16164
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16163 : t) ->
                                               t_to_js x16163
                                         end
                                       module TableDescriptor =
                                         struct
                                           type t =
                                             [ `WebAssembly_TableDescriptor ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16166 : Ojs.t) ->
                                               t_of_js x16166
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16165 : t) ->
                                               t_to_js x16165
                                           type tags =
                                             [ `WebAssembly_TableDescriptor ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_TableDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16169 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16169
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16167 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16167
                                           let (get_element :
                                             'tags this -> TableKind.t) =
                                             fun (x16171 : 'tags this) ->
                                               TableKind.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16171) "element")
                                           let (set_element :
                                             'tags this ->
                                               TableKind.t -> unit)
                                             =
                                             fun (x16173 : 'tags this) ->
                                               fun (x16174 : TableKind.t) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16173) "element"
                                                   (TableKind.t_to_js x16174)
                                           let (get_initial :
                                             'tags this -> float) =
                                             fun (x16176 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16176) "initial")
                                           let (set_initial :
                                             'tags this -> float -> unit) =
                                             fun (x16178 : 'tags this) ->
                                               fun (x16179 : float) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16178) "initial"
                                                   (Ojs.float_to_js x16179)
                                           let (get_maximum :
                                             'tags this -> float) =
                                             fun (x16181 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16181) "maximum")
                                           let (set_maximum :
                                             'tags this -> float -> unit) =
                                             fun (x16183 : 'tags this) ->
                                               fun (x16184 : float) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16183) "maximum"
                                                   (Ojs.float_to_js x16184)
                                           let cast_from = Obj.magic
                                         end
                                       module Table =
                                         struct
                                           type t =
                                             [ `WebAssembly_Table ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16187 : Ojs.t) ->
                                               t_of_js x16187
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16186 : t) ->
                                               t_to_js x16186
                                           type tags = [ `WebAssembly_Table ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Table ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16190 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16190
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16188 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16188
                                           let (get_length :
                                             'tags this -> float) =
                                             fun (x16192 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16192) "length")
                                           let (get_ :
                                             'tags this -> index:float -> any)
                                             =
                                             fun (x16195 : 'tags this) ->
                                               fun ~index:(x16194 : float) ->
                                                 any_of_js
                                                   (Ojs.call
                                                      (this_to_js Obj.magic
                                                         x16195) "get"
                                                      [|(Ojs.float_to_js
                                                           x16194)|])
                                           let (grow :
                                             'tags this ->
                                               delta:float ->
                                                 ?value:any -> unit -> float)
                                             =
                                             fun (x16201 : 'tags this) ->
                                               fun ~delta:(x16197 : float) ->
                                                 fun
                                                   ?value:(x16198 :
                                                            any option)
                                                   ->
                                                   fun () ->
                                                     Ojs.float_of_js
                                                       (let x16203 =
                                                          this_to_js
                                                            Obj.magic x16201 in
                                                        Ojs.call
                                                          (Ojs.get_prop_ascii
                                                             x16203 "grow")
                                                          "apply"
                                                          [|x16203;((
                                                            let x16199 =
                                                              Ojs.new_obj
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Array")
                                                                [||] in
                                                            ignore
                                                              (Ojs.call
                                                                 x16199
                                                                 "push"
                                                                 [|(Ojs.float_to_js
                                                                    x16197)|]);
                                                            (match x16198
                                                             with
                                                             | Some x16200 ->
                                                                 ignore
                                                                   (Ojs.call
                                                                    x16199
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x16200)|])
                                                             | None -> ());
                                                            x16199))|])
                                           let (set_ :
                                             'tags this ->
                                               index:float ->
                                                 ?value:any -> unit -> unit)
                                             =
                                             fun (x16208 : 'tags this) ->
                                               fun ~index:(x16204 : float) ->
                                                 fun
                                                   ?value:(x16205 :
                                                            any option)
                                                   ->
                                                   fun () ->
                                                     ignore
                                                       (let x16210 =
                                                          this_to_js
                                                            Obj.magic x16208 in
                                                        Ojs.call
                                                          (Ojs.get_prop_ascii
                                                             x16210 "set")
                                                          "apply"
                                                          [|x16210;((
                                                            let x16206 =
                                                              Ojs.new_obj
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Array")
                                                                [||] in
                                                            ignore
                                                              (Ojs.call
                                                                 x16206
                                                                 "push"
                                                                 [|(Ojs.float_to_js
                                                                    x16204)|]);
                                                            (match x16205
                                                             with
                                                             | Some x16207 ->
                                                                 ignore
                                                                   (Ojs.call
                                                                    x16206
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x16207)|])
                                                             | None -> ());
                                                            x16206))|])
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Table") "prototype")
                                           let (create :
                                             descriptor:TableDescriptor.t ->
                                               ?value:any -> unit -> t)
                                             =
                                             fun
                                               ~descriptor:(x16211 :
                                                             TableDescriptor.t)
                                               ->
                                               fun
                                                 ?value:(x16212 : any option)
                                                 ->
                                                 fun () ->
                                                   t_of_js
                                                     (Ojs.new_obj_arr
                                                        (Ojs.get_prop_ascii
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "WebAssembly")
                                                           "Table")
                                                        (let x16213 =
                                                           Ojs.new_obj
                                                             (Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Array") 
                                                             [||] in
                                                         ignore
                                                           (Ojs.call x16213
                                                              "push"
                                                              [|(TableDescriptor.t_to_js
                                                                   x16211)|]);
                                                         (match x16212 with
                                                          | Some x16214 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x16213
                                                                   "push"
                                                                   [|(
                                                                    any_to_js
                                                                    x16214)|])
                                                          | None -> ());
                                                         x16213))
                                         end
                                       module MemoryDescriptor =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_MemoryDescriptor ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16216 : Ojs.t) ->
                                               t_of_js x16216
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16215 : t) ->
                                               t_to_js x16215
                                           type tags =
                                             [
                                               `WebAssembly_MemoryDescriptor ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_MemoryDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16219 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16219
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16217 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16217
                                           let (get_initial :
                                             'tags this -> float) =
                                             fun (x16221 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16221) "initial")
                                           let (set_initial :
                                             'tags this -> float -> unit) =
                                             fun (x16223 : 'tags this) ->
                                               fun (x16224 : float) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16223) "initial"
                                                   (Ojs.float_to_js x16224)
                                           let (get_maximum :
                                             'tags this -> float) =
                                             fun (x16226 : 'tags this) ->
                                               Ojs.float_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16226) "maximum")
                                           let (set_maximum :
                                             'tags this -> float -> unit) =
                                             fun (x16228 : 'tags this) ->
                                               fun (x16229 : float) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16228) "maximum"
                                                   (Ojs.float_to_js x16229)
                                           let (get_shared :
                                             'tags this -> bool) =
                                             fun (x16231 : 'tags this) ->
                                               Ojs.bool_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16231) "shared")
                                           let (set_shared :
                                             'tags this -> bool -> unit) =
                                             fun (x16233 : 'tags this) ->
                                               fun (x16234 : bool) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16233) "shared"
                                                   (Ojs.bool_to_js x16234)
                                           let cast_from = Obj.magic
                                         end
                                       module Memory =
                                         struct
                                           type t =
                                             [ `WebAssembly_Memory ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16237 : Ojs.t) ->
                                               t_of_js x16237
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16236 : t) ->
                                               t_to_js x16236
                                           type tags =
                                             [ `WebAssembly_Memory ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Memory
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16240 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16240
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16238 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16238
                                           let (get_buffer :
                                             'tags this -> ArrayBuffer.t_0) =
                                             fun (x16242 : 'tags this) ->
                                               ArrayBuffer.t_0_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16242) "buffer")
                                           let (grow :
                                             'tags this ->
                                               delta:float -> float)
                                             =
                                             fun (x16245 : 'tags this) ->
                                               fun ~delta:(x16244 : float) ->
                                                 Ojs.float_of_js
                                                   (Ojs.call
                                                      (this_to_js Obj.magic
                                                         x16245) "grow"
                                                      [|(Ojs.float_to_js
                                                           x16244)|])
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Memory") "prototype")
                                           let (create :
                                             MemoryDescriptor.t -> t) =
                                             fun
                                               (x16247 : MemoryDescriptor.t)
                                               ->
                                               t_of_js
                                                 (Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Memory")
                                                    [|(MemoryDescriptor.t_to_js
                                                         x16247)|])
                                         end
                                       module ValueType =
                                         struct
                                           type t =
                                             [ `L_s36_anyfunc 
                                             | `L_s69_externref 
                                             | `L_s70_f32  | `L_s71_f64 
                                             | `L_s88_i32  | `L_s89_i64 ]
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16249 : Ojs.t) ->
                                               let x16250 = x16249 in
                                               match Ojs.string_of_js x16250
                                               with
                                               | "anyfunc" -> `L_s36_anyfunc
                                               | "externref" ->
                                                   `L_s69_externref
                                               | "f32" -> `L_s70_f32
                                               | "f64" -> `L_s71_f64
                                               | "i32" -> `L_s88_i32
                                               | "i64" -> `L_s89_i64
                                               | _ -> assert false
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16248 :
                                                 [ `L_s36_anyfunc 
                                                 | `L_s69_externref 
                                                 | `L_s70_f32  | `L_s71_f64 
                                                 | `L_s88_i32  | `L_s89_i64 ])
                                               ->
                                               match x16248 with
                                               | `L_s36_anyfunc ->
                                                   Ojs.string_to_js "anyfunc"
                                               | `L_s69_externref ->
                                                   Ojs.string_to_js
                                                     "externref"
                                               | `L_s70_f32 ->
                                                   Ojs.string_to_js "f32"
                                               | `L_s71_f64 ->
                                                   Ojs.string_to_js "f64"
                                               | `L_s88_i32 ->
                                                   Ojs.string_to_js "i32"
                                               | `L_s89_i64 ->
                                                   Ojs.string_to_js "i64"
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16252 : Ojs.t) ->
                                               t_of_js x16252
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16251 : t) ->
                                               t_to_js x16251
                                         end
                                       module GlobalDescriptor =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_GlobalDescriptor ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16254 : Ojs.t) ->
                                               t_of_js x16254
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16253 : t) ->
                                               t_to_js x16253
                                           type tags =
                                             [
                                               `WebAssembly_GlobalDescriptor ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_GlobalDescriptor
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16257 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16257
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16255 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16255
                                           let (get_mutable :
                                             'tags this -> bool) =
                                             fun (x16259 : 'tags this) ->
                                               Ojs.bool_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16259) "mutable")
                                           let (set_mutable :
                                             'tags this -> bool -> unit) =
                                             fun (x16261 : 'tags this) ->
                                               fun (x16262 : bool) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16261) "mutable"
                                                   (Ojs.bool_to_js x16262)
                                           let (get_value :
                                             'tags this -> ValueType.t) =
                                             fun (x16264 : 'tags this) ->
                                               ValueType.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16264) "value")
                                           let (set_value :
                                             'tags this ->
                                               ValueType.t -> unit)
                                             =
                                             fun (x16266 : 'tags this) ->
                                               fun (x16267 : ValueType.t) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16266) "value"
                                                   (ValueType.t_to_js x16267)
                                           let cast_from = Obj.magic
                                         end
                                       module Global =
                                         struct
                                           type t =
                                             [ `WebAssembly_Global ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16270 : Ojs.t) ->
                                               t_of_js x16270
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16269 : t) ->
                                               t_to_js x16269
                                           type tags =
                                             [ `WebAssembly_Global ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Global
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16273 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16273
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16271 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16271
                                           let (get_value :
                                             'tags this -> any) =
                                             fun (x16275 : 'tags this) ->
                                               any_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16275) "value")
                                           let (set_value :
                                             'tags this -> any -> unit) =
                                             fun (x16277 : 'tags this) ->
                                               fun (x16278 : any) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16277) "value"
                                                   (any_to_js x16278)
                                           let (valueOf : 'tags this -> any)
                                             =
                                             fun (x16280 : 'tags this) ->
                                               any_of_js
                                                 (Ojs.call
                                                    (this_to_js Obj.magic
                                                       x16280) "valueOf" 
                                                    [||])
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Global") "prototype")
                                           let (create :
                                             descriptor:GlobalDescriptor.t ->
                                               ?v:any -> unit -> t)
                                             =
                                             fun
                                               ~descriptor:(x16282 :
                                                             GlobalDescriptor.t)
                                               ->
                                               fun ?v:(x16283 : any option)
                                                 ->
                                                 fun () ->
                                                   t_of_js
                                                     (Ojs.new_obj_arr
                                                        (Ojs.get_prop_ascii
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "WebAssembly")
                                                           "Global")
                                                        (let x16284 =
                                                           Ojs.new_obj
                                                             (Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Array") 
                                                             [||] in
                                                         ignore
                                                           (Ojs.call x16284
                                                              "push"
                                                              [|(GlobalDescriptor.t_to_js
                                                                   x16282)|]);
                                                         (match x16283 with
                                                          | Some x16285 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x16284
                                                                   "push"
                                                                   [|(
                                                                    any_to_js
                                                                    x16285)|])
                                                          | None -> ());
                                                         x16284))
                                         end
                                       module ExportValue =
                                         struct
                                           type t =
                                             (untyped_function, Global.t,
                                               Memory.t, Table.t) union4
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16291 : Ojs.t) ->
                                               union4_of_js
                                                 untyped_function_of_js
                                                 Global.t_of_js
                                                 Memory.t_of_js Table.t_of_js
                                                 x16291
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16286 :
                                                 (untyped_function, Global.t,
                                                   Memory.t, Table.t) union4)
                                               ->
                                               union4_to_js
                                                 untyped_function_to_js
                                                 Global.t_to_js
                                                 Memory.t_to_js Table.t_to_js
                                                 x16286
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16297 : Ojs.t) ->
                                               t_of_js x16297
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16296 : t) ->
                                               t_to_js x16296
                                         end
                                       module ImportValue =
                                         struct
                                           type t = ExportValue.t or_number
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16300 : Ojs.t) ->
                                               or_number_of_js
                                                 ExportValue.t_of_js x16300
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16298 :
                                                 ExportValue.t or_number)
                                               ->
                                               or_number_to_js
                                                 ExportValue.t_to_js x16298
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16303 : Ojs.t) ->
                                               t_of_js x16303
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16302 : t) ->
                                               t_to_js x16302
                                         end
                                       module ModuleImports =
                                         struct
                                           type t =
                                             (string, ImportValue.t)
                                               Record.t_2
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16307 : Ojs.t) ->
                                               Record.t_2_of_js
                                                 Ojs.string_of_js
                                                 ImportValue.t_of_js x16307
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16304 :
                                                 (string, ImportValue.t)
                                                   Record.t_2)
                                               ->
                                               Record.t_2_to_js
                                                 Ojs.string_to_js
                                                 ImportValue.t_to_js x16304
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16311 : Ojs.t) ->
                                               t_of_js x16311
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16310 : t) ->
                                               t_to_js x16310
                                         end
                                       module Imports =
                                         struct
                                           type t =
                                             (string, ModuleImports.t)
                                               Record.t_2
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16315 : Ojs.t) ->
                                               Record.t_2_of_js
                                                 Ojs.string_of_js
                                                 ModuleImports.t_of_js x16315
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16312 :
                                                 (string, ModuleImports.t)
                                                   Record.t_2)
                                               ->
                                               Record.t_2_to_js
                                                 Ojs.string_to_js
                                                 ModuleImports.t_to_js x16312
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16319 : Ojs.t) ->
                                               t_of_js x16319
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16318 : t) ->
                                               t_to_js x16318
                                         end
                                       module Exports =
                                         struct
                                           type t =
                                             (string, ExportValue.t)
                                               Record.t_2
                                           let rec t_of_js : Ojs.t -> t =
                                             fun (x16323 : Ojs.t) ->
                                               Record.t_2_of_js
                                                 Ojs.string_of_js
                                                 ExportValue.t_of_js x16323
                                           and t_to_js : t -> Ojs.t =
                                             fun
                                               (x16320 :
                                                 (string, ExportValue.t)
                                                   Record.t_2)
                                               ->
                                               Record.t_2_to_js
                                                 Ojs.string_to_js
                                                 ExportValue.t_to_js x16320
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16327 : Ojs.t) ->
                                               t_of_js x16327
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16326 : t) ->
                                               t_to_js x16326
                                         end
                                       module Instance =
                                         struct
                                           type t =
                                             [ `WebAssembly_Instance ] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16329 : Ojs.t) ->
                                               t_of_js x16329
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16328 : t) ->
                                               t_to_js x16328
                                           type tags =
                                             [ `WebAssembly_Instance ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_Instance
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16332 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16332
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16330 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16330
                                           let (get_exports :
                                             'tags this -> Exports.t) =
                                             fun (x16334 : 'tags this) ->
                                               Exports.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16334) "exports")
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "Instance")
                                                    "prototype")
                                           let (create :
                                             module_:Module.t ->
                                               ?importObject:Imports.t ->
                                                 unit -> t)
                                             =
                                             fun ~module_:(x16336 : Module.t)
                                               ->
                                               fun
                                                 ?importObject:(x16337 :
                                                                 Imports.t
                                                                   option)
                                                 ->
                                                 fun () ->
                                                   t_of_js
                                                     (Ojs.new_obj_arr
                                                        (Ojs.get_prop_ascii
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "WebAssembly")
                                                           "Instance")
                                                        (let x16338 =
                                                           Ojs.new_obj
                                                             (Ojs.get_prop_ascii
                                                                Ojs.global
                                                                "Array") 
                                                             [||] in
                                                         ignore
                                                           (Ojs.call x16338
                                                              "push"
                                                              [|(Module.t_to_js
                                                                   x16336)|]);
                                                         (match x16337 with
                                                          | Some x16339 ->
                                                              ignore
                                                                (Ojs.call
                                                                   x16338
                                                                   "push"
                                                                   [|(
                                                                    Imports.t_to_js
                                                                    x16339)|])
                                                          | None -> ());
                                                         x16338))
                                         end
                                       module WebAssemblyInstantiatedSource =
                                         struct
                                           type t =
                                             [
                                               `WebAssembly_WebAssemblyInstantiatedSource
                                                 ]
                                               intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16341 : Ojs.t) ->
                                               t_of_js x16341
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16340 : t) ->
                                               t_to_js x16340
                                           type tags =
                                             [
                                               `WebAssembly_WebAssemblyInstantiatedSource
                                                 ]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_WebAssemblyInstantiatedSource
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16344 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16344
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16342 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16342
                                           let (get_instance :
                                             'tags this -> Instance.t) =
                                             fun (x16346 : 'tags this) ->
                                               Instance.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16346) "instance")
                                           let (set_instance :
                                             'tags this -> Instance.t -> unit)
                                             =
                                             fun (x16348 : 'tags this) ->
                                               fun (x16349 : Instance.t) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16348) "instance"
                                                   (Instance.t_to_js x16349)
                                           let (get_module :
                                             'tags this -> Module.t) =
                                             fun (x16351 : 'tags this) ->
                                               Module.t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (this_to_js Obj.magic
                                                       x16351) "module")
                                           let (set_module :
                                             'tags this -> Module.t -> unit)
                                             =
                                             fun (x16353 : 'tags this) ->
                                               fun (x16354 : Module.t) ->
                                                 Ojs.set_prop_ascii
                                                   (this_to_js Obj.magic
                                                      x16353) "module"
                                                   (Module.t_to_js x16354)
                                           let cast_from = Obj.magic
                                         end
                                       module RuntimeError =
                                         struct
                                           type t =
                                             [ `WebAssembly_RuntimeError 
                                             | Error.tags_0] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16357 : Ojs.t) ->
                                               t_of_js x16357
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16356 : t) ->
                                               t_to_js x16356
                                           type tags =
                                             [ `WebAssembly_RuntimeError 
                                             | Error.tags_0]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_RuntimeError
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16360 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16360
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16358 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16358
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "RuntimeError")
                                                    "prototype")
                                           let (create : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "RuntimeError") 
                                                    [||])
                                         end
                                       module LinkError =
                                         struct
                                           type t =
                                             [ `WebAssembly_LinkError 
                                             | Error.tags_0] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16363 : Ojs.t) ->
                                               t_of_js x16363
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16362 : t) ->
                                               t_to_js x16362
                                           type tags =
                                             [ `WebAssembly_LinkError 
                                             | Error.tags_0]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_LinkError
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16366 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16366
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16364 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16364
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "LinkError")
                                                    "prototype")
                                           let (create : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "LinkError") [||])
                                         end
                                       module CompileError =
                                         struct
                                           type t =
                                             [ `WebAssembly_CompileError 
                                             | Error.tags_0] intf
                                           let rec t_of_js : Ojs.t -> t =
                                             Obj.magic
                                           and t_to_js : t -> Ojs.t =
                                             Obj.magic
                                           type t_0 = t
                                           let rec t_0_of_js : Ojs.t -> t_0 =
                                             fun (x16369 : Ojs.t) ->
                                               t_of_js x16369
                                           and t_0_to_js : t_0 -> Ojs.t =
                                             fun (x16368 : t) ->
                                               t_to_js x16368
                                           type tags =
                                             [ `WebAssembly_CompileError 
                                             | Error.tags_0]
                                           type tags_0 = tags
                                           type 'tags this =
                                             'tags intf constraint 'tags =
                                                         [>
                                                           `WebAssembly_CompileError
                                                             ]
                                           let rec this_of_js :
                                             'tags .
                                               (Ojs.t -> 'tags) ->
                                                 Ojs.t -> 'tags this
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_of_js :
                                                 Ojs.t -> __tags)
                                               ->
                                               fun (x16372 : Ojs.t) ->
                                                 intf_of_js __tags_of_js
                                                   x16372
                                           and this_to_js :
                                             'tags .
                                               ('tags -> Ojs.t) ->
                                                 'tags this -> Ojs.t
                                             = fun (type __tags) ->
                                             fun
                                               (__tags_to_js :
                                                 __tags -> Ojs.t)
                                               ->
                                               fun (x16370 : __tags intf) ->
                                                 intf_to_js __tags_to_js
                                                   x16370
                                           let cast_from = Obj.magic
                                           let (prototype : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.get_prop_ascii
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "CompileError")
                                                    "prototype")
                                           let (create : unit -> t) =
                                             fun () ->
                                               t_of_js
                                                 (Ojs.new_obj
                                                    (Ojs.get_prop_ascii
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global
                                                          "WebAssembly")
                                                       "CompileError") 
                                                    [||])
                                         end
                                       let (compileError :
                                         unit -> AnonymousInterface12.t) =
                                         fun () ->
                                           AnonymousInterface12.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "CompileError")
                                       let (global :
                                         unit -> AnonymousInterface42.t) =
                                         fun () ->
                                           AnonymousInterface42.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Global")
                                       let (instance :
                                         unit -> AnonymousInterface58.t) =
                                         fun () ->
                                           AnonymousInterface58.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Instance")
                                       let (linkError :
                                         unit -> AnonymousInterface59.t) =
                                         fun () ->
                                           AnonymousInterface59.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "LinkError")
                                       let (memory :
                                         unit -> AnonymousInterface61.t) =
                                         fun () ->
                                           AnonymousInterface61.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Memory")
                                       let (module_ :
                                         unit -> AnonymousInterface65.t) =
                                         fun () ->
                                           AnonymousInterface65.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Module")
                                       let (runtimeError :
                                         unit -> AnonymousInterface92.t) =
                                         fun () ->
                                           AnonymousInterface92.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "RuntimeError")
                                       let (table :
                                         unit -> AnonymousInterface101.t) =
                                         fun () ->
                                           AnonymousInterface101.t_of_js
                                             (Ojs.get_prop_ascii
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "Table")
                                       let (compile :
                                         BufferSource.t ->
                                           Module.t Promise.t_1)
                                         =
                                         fun (x16374 : BufferSource.t) ->
                                           Promise.t_1_of_js Module.t_of_js
                                             (Ojs.call
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "compile"
                                                [|(BufferSource.t_to_js
                                                     x16374)|])
                                       let (compileStreaming :
                                         (Response.t,
                                           Response.t PromiseLike.t_1) union2
                                           -> Module.t Promise.t_1)
                                         =
                                         fun
                                           (x16376 :
                                             (Response.t,
                                               Response.t PromiseLike.t_1)
                                               union2)
                                           ->
                                           Promise.t_1_of_js Module.t_of_js
                                             (Ojs.call
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "compileStreaming"
                                                [|(union2_to_js
                                                     Response.t_to_js
                                                     (fun
                                                        (x16378 :
                                                          Response.t
                                                            PromiseLike.t_1)
                                                        ->
                                                        PromiseLike.t_1_to_js
                                                          Response.t_to_js
                                                          x16378) x16376)|])
                                       let (instantiate :
                                         bytes:BufferSource.t ->
                                           ?importObject:Imports.t ->
                                             unit ->
                                               WebAssemblyInstantiatedSource.t
                                                 Promise.t_1)
                                         =
                                         fun ~bytes:(x16381 : BufferSource.t)
                                           ->
                                           fun
                                             ?importObject:(x16382 :
                                                             Imports.t option)
                                             ->
                                             fun () ->
                                               Promise.t_1_of_js
                                                 WebAssemblyInstantiatedSource.t_of_js
                                                 (let x16385 =
                                                    Ojs.get_prop_ascii
                                                      Ojs.global
                                                      "WebAssembly" in
                                                  Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       x16385 "instantiate")
                                                    "apply"
                                                    [|x16385;((let x16383 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x16383
                                                                    "push"
                                                                    [|(
                                                                    BufferSource.t_to_js
                                                                    x16381)|]);
                                                               (match x16382
                                                                with
                                                                | Some x16384
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x16383
                                                                    "push"
                                                                    [|(
                                                                    Imports.t_to_js
                                                                    x16384)|])
                                                                | None -> ());
                                                               x16383))|])
                                       let (instantiate' :
                                         moduleObject:Module.t ->
                                           ?importObject:Imports.t ->
                                             unit -> Instance.t Promise.t_1)
                                         =
                                         fun
                                           ~moduleObject:(x16387 : Module.t)
                                           ->
                                           fun
                                             ?importObject:(x16388 :
                                                             Imports.t option)
                                             ->
                                             fun () ->
                                               Promise.t_1_of_js
                                                 Instance.t_of_js
                                                 (let x16391 =
                                                    Ojs.get_prop_ascii
                                                      Ojs.global
                                                      "WebAssembly" in
                                                  Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       x16391 "instantiate")
                                                    "apply"
                                                    [|x16391;((let x16389 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x16389
                                                                    "push"
                                                                    [|(
                                                                    Module.t_to_js
                                                                    x16387)|]);
                                                               (match x16388
                                                                with
                                                                | Some x16390
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x16389
                                                                    "push"
                                                                    [|(
                                                                    Imports.t_to_js
                                                                    x16390)|])
                                                                | None -> ());
                                                               x16389))|])
                                       let (instantiateStreaming :
                                         source:(Response.t,
                                           Response.t PromiseLike.t_1) union2
                                           ->
                                           ?importObject:Imports.t ->
                                             unit ->
                                               WebAssemblyInstantiatedSource.t
                                                 Promise.t_1)
                                         =
                                         fun
                                           ~source:(x16393 :
                                                     (Response.t,
                                                       Response.t
                                                         PromiseLike.t_1)
                                                       union2)
                                           ->
                                           fun
                                             ?importObject:(x16394 :
                                                             Imports.t option)
                                             ->
                                             fun () ->
                                               Promise.t_1_of_js
                                                 WebAssemblyInstantiatedSource.t_of_js
                                                 (let x16400 =
                                                    Ojs.get_prop_ascii
                                                      Ojs.global
                                                      "WebAssembly" in
                                                  Ojs.call
                                                    (Ojs.get_prop_ascii
                                                       x16400
                                                       "instantiateStreaming")
                                                    "apply"
                                                    [|x16400;((let x16395 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               ignore
                                                                 (Ojs.call
                                                                    x16395
                                                                    "push"
                                                                    [|(
                                                                    union2_to_js
                                                                    Response.t_to_js
                                                                    (fun
                                                                    (x16398 :
                                                                    Response.t
                                                                    PromiseLike.t_1)
                                                                    ->
                                                                    PromiseLike.t_1_to_js
                                                                    Response.t_to_js
                                                                    x16398)
                                                                    x16393)|]);
                                                               (match x16394
                                                                with
                                                                | Some x16396
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x16395
                                                                    "push"
                                                                    [|(
                                                                    Imports.t_to_js
                                                                    x16396)|])
                                                                | None -> ());
                                                               x16395))|])
                                       let (validate :
                                         BufferSource.t -> bool) =
                                         fun (x16402 : BufferSource.t) ->
                                           Ojs.bool_of_js
                                             (Ojs.call
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "WebAssembly")
                                                "validate"
                                                [|(BufferSource.t_to_js
                                                     x16402)|])
                                     end
module AbortSignalEventMap =
  struct
    type t = [ `AbortSignalEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16404 : Ojs.t) -> t_of_js x16404
    and t_0_to_js : t_0 -> Ojs.t = fun (x16403 : t) -> t_to_js x16403
    type tags = [ `AbortSignalEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x16407 : Ojs.t) -> intf_of_js __tags_of_js x16407
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x16405 : __tags intf) -> intf_to_js __tags_to_js x16405
    let (get_abort : 'tags this -> Event.t) =
      fun (x16409 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16409) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x16411 : 'tags this) ->
        fun (x16412 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x16411) "abort"
            (Event.t_to_js x16412)
    let cast_from = Obj.magic
  end
module rec
  AbortController:sig
                    type t = [ `AbortController ] intf
                    type t_0 = t
                    [@@@js.stop ]
                    type tags = [ `AbortController ]
                    type tags_0 = tags
                    [@@@js.start ]
                    [@@@js.implem
                      type tags = [ `AbortController ]
                      type tags_0 = tags]
                    type 'tags this =
                      'tags intf constraint 'tags = [> `AbortController ]
                    val t_to_js : t -> Ojs.t
                    val t_of_js : Ojs.t -> t
                    val t_0_to_js : t_0 -> Ojs.t
                    val t_0_of_js : Ojs.t -> t_0
                    val get_signal : 'tags this -> AbortSignal.t
                    val abort : 'tags this -> unit
                    val cast_from : 'tags this -> t
                    val prototype : unit -> t
                    val create : unit -> t
                  end =
  struct
    type t = [ `AbortController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x16415 : Ojs.t) -> t_of_js x16415
    and t_0_to_js : t_0 -> Ojs.t = fun (x16414 : t) -> t_to_js x16414
    type tags = [ `AbortController ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x16418 : Ojs.t) -> intf_of_js __tags_of_js x16418
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x16416 : __tags intf) -> intf_to_js __tags_to_js x16416
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x16420 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16420) "signal")
    let (abort : 'tags this -> unit) =
      fun (x16422 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x16422) "abort" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AbortController") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortController") [||])
  end
 and
  AnonymousInterface0:sig
                        type t = private Ojs.t
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val get_prototype : t -> AbortController.t
                        val set_prototype : t -> AbortController.t -> unit
                        val create : t -> AbortController.t
                      end =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x16425 : Ojs.t) -> x16425
    and t_to_js : t -> Ojs.t = fun (x16424 : Ojs.t) -> x16424
    let (get_prototype : t -> AbortController.t) =
      fun (x16426 : t) ->
        AbortController.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16426) "prototype")
    let (set_prototype : t -> AbortController.t -> unit) =
      fun (x16427 : t) ->
        fun (x16428 : AbortController.t) ->
          Ojs.set_prop_ascii (t_to_js x16427) "prototype"
            (AbortController.t_to_js x16428)
    let (create : t -> AbortController.t) =
      fun (x16429 : t) ->
        AbortController.t_of_js (Ojs.new_obj (t_to_js x16429) [||])
  end
let (importScripts : string list -> unit) =
  fun (x16430 : string list) ->
    ignore
      (let x16433 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16433 "importScripts") "apply"
         [|x16433;((let x16431 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x16432 : string) ->
                         ignore
                           (Ojs.call x16431 "push"
                              [|(Ojs.string_to_js x16432)|])) x16430;
                    x16431))|])
let (abortController : unit -> AnonymousInterface0.t) =
  fun () ->
    AnonymousInterface0.t_of_js
      (Ojs.get_prop_ascii Ojs.global "AbortController")
let (abortSignal : unit -> AnonymousInterface1.t) =
  fun () ->
    AnonymousInterface1.t_of_js (Ojs.get_prop_ascii Ojs.global "AbortSignal")
let (blob : unit -> AnonymousInterface2.t) =
  fun () ->
    AnonymousInterface2.t_of_js (Ojs.get_prop_ascii Ojs.global "Blob")
let (broadcastChannel : unit -> AnonymousInterface3.t) =
  fun () ->
    AnonymousInterface3.t_of_js
      (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
let (byteLengthQueuingStrategy : unit -> AnonymousInterface4.t) =
  fun () ->
    AnonymousInterface4.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
let (cache : unit -> AnonymousInterface5.t) =
  fun () ->
    AnonymousInterface5.t_of_js (Ojs.get_prop_ascii Ojs.global "Cache")
let (cacheStorage : unit -> AnonymousInterface6.t) =
  fun () ->
    AnonymousInterface6.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CacheStorage")
let (canvasGradient : unit -> AnonymousInterface7.t) =
  fun () ->
    AnonymousInterface7.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CanvasGradient")
let (canvasPattern : unit -> AnonymousInterface8.t) =
  fun () ->
    AnonymousInterface8.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
let (client : unit -> AnonymousInterface9.t) =
  fun () ->
    AnonymousInterface9.t_of_js (Ojs.get_prop_ascii Ojs.global "Client")
let (clients : unit -> AnonymousInterface10.t) =
  fun () ->
    AnonymousInterface10.t_of_js (Ojs.get_prop_ascii Ojs.global "Clients")
let (closeEvent : unit -> AnonymousInterface11.t) =
  fun () ->
    AnonymousInterface11.t_of_js (Ojs.get_prop_ascii Ojs.global "CloseEvent")
let (countQueuingStrategy : unit -> AnonymousInterface13.t) =
  fun () ->
    AnonymousInterface13.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
let (crypto : unit -> AnonymousInterface14.t) =
  fun () ->
    AnonymousInterface14.t_of_js (Ojs.get_prop_ascii Ojs.global "Crypto")
let (cryptoKey : unit -> AnonymousInterface15.t) =
  fun () ->
    AnonymousInterface15.t_of_js (Ojs.get_prop_ascii Ojs.global "CryptoKey")
let (customEvent : unit -> AnonymousInterface16.t) =
  fun () ->
    AnonymousInterface16.t_of_js
      (Ojs.get_prop_ascii Ojs.global "CustomEvent")
let (dOMException : unit -> AnonymousInterface17.t) =
  fun () ->
    AnonymousInterface17.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMException")
let (dOMMatrix : unit -> AnonymousInterface18.t) =
  fun () ->
    AnonymousInterface18.t_of_js (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
let (dOMMatrixReadOnly : unit -> AnonymousInterface19.t) =
  fun () ->
    AnonymousInterface19.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
let (dOMPoint : unit -> AnonymousInterface20.t) =
  fun () ->
    AnonymousInterface20.t_of_js (Ojs.get_prop_ascii Ojs.global "DOMPoint")
let (dOMPointReadOnly : unit -> AnonymousInterface21.t) =
  fun () ->
    AnonymousInterface21.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
let (dOMQuad : unit -> AnonymousInterface22.t) =
  fun () ->
    AnonymousInterface22.t_of_js (Ojs.get_prop_ascii Ojs.global "DOMQuad")
let (dOMRect : unit -> AnonymousInterface23.t) =
  fun () ->
    AnonymousInterface23.t_of_js (Ojs.get_prop_ascii Ojs.global "DOMRect")
let (dOMRectReadOnly : unit -> AnonymousInterface24.t) =
  fun () ->
    AnonymousInterface24.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
let (dOMStringList : unit -> AnonymousInterface25.t) =
  fun () ->
    AnonymousInterface25.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DOMStringList")
let (dedicatedWorkerGlobalScope : unit -> AnonymousInterface26.t) =
  fun () ->
    AnonymousInterface26.t_of_js
      (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
let (errorEvent : unit -> AnonymousInterface27.t) =
  fun () ->
    AnonymousInterface27.t_of_js (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
let (event : unit -> AnonymousInterface28.t) =
  fun () ->
    AnonymousInterface28.t_of_js (Ojs.get_prop_ascii Ojs.global "Event")
let (eventSource : unit -> AnonymousInterface29.t) =
  fun () ->
    AnonymousInterface29.t_of_js
      (Ojs.get_prop_ascii Ojs.global "EventSource")
let (eventTarget : unit -> AnonymousInterface30.t) =
  fun () ->
    AnonymousInterface30.t_of_js
      (Ojs.get_prop_ascii Ojs.global "EventTarget")
let (extendableEvent : unit -> AnonymousInterface31.t) =
  fun () ->
    AnonymousInterface31.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
let (extendableMessageEvent : unit -> AnonymousInterface32.t) =
  fun () ->
    AnonymousInterface32.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
let (fetchEvent : unit -> AnonymousInterface33.t) =
  fun () ->
    AnonymousInterface33.t_of_js (Ojs.get_prop_ascii Ojs.global "FetchEvent")
let (file : unit -> AnonymousInterface34.t) =
  fun () ->
    AnonymousInterface34.t_of_js (Ojs.get_prop_ascii Ojs.global "File")
let (fileList : unit -> AnonymousInterface35.t) =
  fun () ->
    AnonymousInterface35.t_of_js (Ojs.get_prop_ascii Ojs.global "FileList")
let (fileReader : unit -> AnonymousInterface36.t) =
  fun () ->
    AnonymousInterface36.t_of_js (Ojs.get_prop_ascii Ojs.global "FileReader")
let (fileReaderSync : unit -> AnonymousInterface37.t) =
  fun () ->
    AnonymousInterface37.t_of_js
      (Ojs.get_prop_ascii Ojs.global "FileReaderSync")
let (fontFace : unit -> AnonymousInterface38.t) =
  fun () ->
    AnonymousInterface38.t_of_js (Ojs.get_prop_ascii Ojs.global "FontFace")
let (fontFaceSet : unit -> AnonymousInterface39.t) =
  fun () ->
    AnonymousInterface39.t_of_js
      (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
let (fontFaceSetLoadEvent : unit -> AnonymousInterface40.t) =
  fun () ->
    AnonymousInterface40.t_of_js
      (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
let (formData : unit -> AnonymousInterface41.t) =
  fun () ->
    AnonymousInterface41.t_of_js (Ojs.get_prop_ascii Ojs.global "FormData")
let (headers : unit -> AnonymousInterface43.t) =
  fun () ->
    AnonymousInterface43.t_of_js (Ojs.get_prop_ascii Ojs.global "Headers")
let (iDBCursor : unit -> AnonymousInterface44.t) =
  fun () ->
    AnonymousInterface44.t_of_js (Ojs.get_prop_ascii Ojs.global "IDBCursor")
let (iDBCursorWithValue : unit -> AnonymousInterface45.t) =
  fun () ->
    AnonymousInterface45.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue")
let (iDBDatabase : unit -> AnonymousInterface46.t) =
  fun () ->
    AnonymousInterface46.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBDatabase")
let (iDBFactory : unit -> AnonymousInterface47.t) =
  fun () ->
    AnonymousInterface47.t_of_js (Ojs.get_prop_ascii Ojs.global "IDBFactory")
let (iDBIndex : unit -> AnonymousInterface48.t) =
  fun () ->
    AnonymousInterface48.t_of_js (Ojs.get_prop_ascii Ojs.global "IDBIndex")
let (iDBKeyRange : unit -> AnonymousInterface49.t) =
  fun () ->
    AnonymousInterface49.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
let (iDBObjectStore : unit -> AnonymousInterface50.t) =
  fun () ->
    AnonymousInterface50.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
let (iDBOpenDBRequest : unit -> AnonymousInterface51.t) =
  fun () ->
    AnonymousInterface51.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
let (iDBRequest : unit -> AnonymousInterface52.t) =
  fun () ->
    AnonymousInterface52.t_of_js (Ojs.get_prop_ascii Ojs.global "IDBRequest")
let (iDBTransaction : unit -> AnonymousInterface53.t) =
  fun () ->
    AnonymousInterface53.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBTransaction")
let (iDBVersionChangeEvent : unit -> AnonymousInterface54.t) =
  fun () ->
    AnonymousInterface54.t_of_js
      (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
let (imageBitmap : unit -> AnonymousInterface55.t) =
  fun () ->
    AnonymousInterface55.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
let (imageBitmapRenderingContext : unit -> AnonymousInterface56.t) =
  fun () ->
    AnonymousInterface56.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
let (imageData : unit -> AnonymousInterface57.t) =
  fun () ->
    AnonymousInterface57.t_of_js (Ojs.get_prop_ascii Ojs.global "ImageData")
let (mediaCapabilities : unit -> AnonymousInterface60.t) =
  fun () ->
    AnonymousInterface60.t_of_js
      (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
let (messageChannel : unit -> AnonymousInterface62.t) =
  fun () ->
    AnonymousInterface62.t_of_js
      (Ojs.get_prop_ascii Ojs.global "MessageChannel")
let (messageEvent : unit -> AnonymousInterface63.t) =
  fun () ->
    AnonymousInterface63.t_of_js
      (Ojs.get_prop_ascii Ojs.global "MessageEvent")
let (messagePort : unit -> AnonymousInterface64.t) =
  fun () ->
    AnonymousInterface64.t_of_js
      (Ojs.get_prop_ascii Ojs.global "MessagePort")
let (networkInformation : unit -> AnonymousInterface66.t) =
  fun () ->
    AnonymousInterface66.t_of_js
      (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
let (notification : unit -> AnonymousInterface67.t) =
  fun () ->
    AnonymousInterface67.t_of_js
      (Ojs.get_prop_ascii Ojs.global "Notification")
let (notificationEvent : unit -> AnonymousInterface68.t) =
  fun () ->
    AnonymousInterface68.t_of_js
      (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
let (path2D : unit -> AnonymousInterface69.t) =
  fun () ->
    AnonymousInterface69.t_of_js (Ojs.get_prop_ascii Ojs.global "Path2D")
let (performance : unit -> AnonymousInterface70.t) =
  fun () ->
    AnonymousInterface70.t_of_js
      (Ojs.get_prop_ascii Ojs.global "Performance")
let (performanceEntry : unit -> AnonymousInterface71.t) =
  fun () ->
    AnonymousInterface71.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
let (performanceMark : unit -> AnonymousInterface72.t) =
  fun () ->
    AnonymousInterface72.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
let (performanceMeasure : unit -> AnonymousInterface73.t) =
  fun () ->
    AnonymousInterface73.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
let (performanceObserver : unit -> AnonymousInterface74.t) =
  fun () ->
    AnonymousInterface74.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
let (performanceObserverEntryList : unit -> AnonymousInterface75.t) =
  fun () ->
    AnonymousInterface75.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
let (performanceResourceTiming : unit -> AnonymousInterface76.t) =
  fun () ->
    AnonymousInterface76.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
let (performanceServerTiming : unit -> AnonymousInterface77.t) =
  fun () ->
    AnonymousInterface77.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
let (permissionStatus : unit -> AnonymousInterface78.t) =
  fun () ->
    AnonymousInterface78.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
let (permissions : unit -> AnonymousInterface79.t) =
  fun () ->
    AnonymousInterface79.t_of_js
      (Ojs.get_prop_ascii Ojs.global "Permissions")
let (progressEvent : unit -> AnonymousInterface80.t) =
  fun () ->
    AnonymousInterface80.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
let (promiseRejectionEvent : unit -> AnonymousInterface81.t) =
  fun () ->
    AnonymousInterface81.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
let (pushEvent : unit -> AnonymousInterface82.t) =
  fun () ->
    AnonymousInterface82.t_of_js (Ojs.get_prop_ascii Ojs.global "PushEvent")
let (pushManager : unit -> AnonymousInterface83.t) =
  fun () ->
    AnonymousInterface83.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PushManager")
let (pushMessageData : unit -> AnonymousInterface84.t) =
  fun () ->
    AnonymousInterface84.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PushMessageData")
let (pushSubscription : unit -> AnonymousInterface85.t) =
  fun () ->
    AnonymousInterface85.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PushSubscription")
let (pushSubscriptionOptions : unit -> AnonymousInterface86.t) =
  fun () ->
    AnonymousInterface86.t_of_js
      (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
let (readableStream : unit -> AnonymousInterface87.t) =
  fun () ->
    AnonymousInterface87.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ReadableStream")
let (readableStreamDefaultController : unit -> AnonymousInterface88.t) =
  fun () ->
    AnonymousInterface88.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
let (readableStreamDefaultReader : unit -> AnonymousInterface89.t) =
  fun () ->
    AnonymousInterface89.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
let (request : unit -> AnonymousInterface90.t) =
  fun () ->
    AnonymousInterface90.t_of_js (Ojs.get_prop_ascii Ojs.global "Request")
let (response : unit -> AnonymousInterface91.t) =
  fun () ->
    AnonymousInterface91.t_of_js (Ojs.get_prop_ascii Ojs.global "Response")
let (securityPolicyViolationEvent : unit -> AnonymousInterface93.t) =
  fun () ->
    AnonymousInterface93.t_of_js
      (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
let (serviceWorker : unit -> AnonymousInterface94.t) =
  fun () ->
    AnonymousInterface94.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
let (serviceWorkerContainer : unit -> AnonymousInterface95.t) =
  fun () ->
    AnonymousInterface95.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
let (serviceWorkerGlobalScope : unit -> AnonymousInterface96.t) =
  fun () ->
    AnonymousInterface96.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
let (serviceWorkerRegistration : unit -> AnonymousInterface97.t) =
  fun () ->
    AnonymousInterface97.t_of_js
      (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
let (sharedWorkerGlobalScope : unit -> AnonymousInterface98.t) =
  fun () ->
    AnonymousInterface98.t_of_js
      (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
let (storageManager : unit -> AnonymousInterface99.t) =
  fun () ->
    AnonymousInterface99.t_of_js
      (Ojs.get_prop_ascii Ojs.global "StorageManager")
let (subtleCrypto : unit -> AnonymousInterface100.t) =
  fun () ->
    AnonymousInterface100.t_of_js
      (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
let (textDecoder : unit -> AnonymousInterface102.t) =
  fun () ->
    AnonymousInterface102.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextDecoder")
let (textDecoderStream : unit -> AnonymousInterface103.t) =
  fun () ->
    AnonymousInterface103.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
let (textEncoder : unit -> AnonymousInterface104.t) =
  fun () ->
    AnonymousInterface104.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextEncoder")
let (textEncoderStream : unit -> AnonymousInterface105.t) =
  fun () ->
    AnonymousInterface105.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
let (textMetrics : unit -> AnonymousInterface106.t) =
  fun () ->
    AnonymousInterface106.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TextMetrics")
let (transformStream : unit -> AnonymousInterface107.t) =
  fun () ->
    AnonymousInterface107.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TransformStream")
let (transformStreamDefaultController : unit -> AnonymousInterface108.t) =
  fun () ->
    AnonymousInterface108.t_of_js
      (Ojs.get_prop_ascii Ojs.global "TransformStreamDefaultController")
let (url : unit -> AnonymousInterface109.t) =
  fun () ->
    AnonymousInterface109.t_of_js (Ojs.get_prop_ascii Ojs.global "URL")
let (uRLSearchParams : unit -> AnonymousInterface110.t) =
  fun () ->
    AnonymousInterface110.t_of_js
      (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
let (webGL2RenderingContext : unit -> AnonymousInterface111.t) =
  fun () ->
    AnonymousInterface111.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
let (webGLActiveInfo : unit -> AnonymousInterface112.t) =
  fun () ->
    AnonymousInterface112.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo")
let (webGLBuffer : unit -> AnonymousInterface113.t) =
  fun () ->
    AnonymousInterface113.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
let (webGLContextEvent : unit -> AnonymousInterface114.t) =
  fun () ->
    AnonymousInterface114.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
let (webGLFramebuffer : unit -> AnonymousInterface115.t) =
  fun () ->
    AnonymousInterface115.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
let (webGLProgram : unit -> AnonymousInterface116.t) =
  fun () ->
    AnonymousInterface116.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
let (webGLQuery : unit -> AnonymousInterface117.t) =
  fun () ->
    AnonymousInterface117.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
let (webGLRenderbuffer : unit -> AnonymousInterface118.t) =
  fun () ->
    AnonymousInterface118.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
let (webGLRenderingContext : unit -> AnonymousInterface119.t) =
  fun () ->
    AnonymousInterface119.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
let (webGLSampler : unit -> AnonymousInterface120.t) =
  fun () ->
    AnonymousInterface120.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
let (webGLShader : unit -> AnonymousInterface121.t) =
  fun () ->
    AnonymousInterface121.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLShader")
let (webGLShaderPrecisionFormat : unit -> AnonymousInterface122.t) =
  fun () ->
    AnonymousInterface122.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
let (webGLSync : unit -> AnonymousInterface123.t) =
  fun () ->
    AnonymousInterface123.t_of_js (Ojs.get_prop_ascii Ojs.global "WebGLSync")
let (webGLTexture : unit -> AnonymousInterface124.t) =
  fun () ->
    AnonymousInterface124.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
let (webGLTransformFeedback : unit -> AnonymousInterface125.t) =
  fun () ->
    AnonymousInterface125.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
let (webGLUniformLocation : unit -> AnonymousInterface126.t) =
  fun () ->
    AnonymousInterface126.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
let (webGLVertexArrayObject : unit -> AnonymousInterface127.t) =
  fun () ->
    AnonymousInterface127.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
let (webSocket : unit -> AnonymousInterface128.t) =
  fun () ->
    AnonymousInterface128.t_of_js (Ojs.get_prop_ascii Ojs.global "WebSocket")
let (windowClient : unit -> AnonymousInterface129.t) =
  fun () ->
    AnonymousInterface129.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WindowClient")
let (worker : unit -> AnonymousInterface130.t) =
  fun () ->
    AnonymousInterface130.t_of_js (Ojs.get_prop_ascii Ojs.global "Worker")
let (workerGlobalScope : unit -> AnonymousInterface131.t) =
  fun () ->
    AnonymousInterface131.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
let (workerLocation : unit -> AnonymousInterface132.t) =
  fun () ->
    AnonymousInterface132.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WorkerLocation")
let (workerNavigator : unit -> AnonymousInterface133.t) =
  fun () ->
    AnonymousInterface133.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WorkerNavigator")
let (writableStream : unit -> AnonymousInterface134.t) =
  fun () ->
    AnonymousInterface134.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WritableStream")
let (writableStreamDefaultController : unit -> AnonymousInterface135.t) =
  fun () ->
    AnonymousInterface135.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
let (writableStreamDefaultWriter : unit -> AnonymousInterface136.t) =
  fun () ->
    AnonymousInterface136.t_of_js
      (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
let (xMLHttpRequest : unit -> AnonymousInterface137.t) =
  fun () ->
    AnonymousInterface137.t_of_js
      (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
let (xMLHttpRequestEventTarget : unit -> AnonymousInterface138.t) =
  fun () ->
    AnonymousInterface138.t_of_js
      (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget")
let (xMLHttpRequestUpload : unit -> AnonymousInterface139.t) =
  fun () ->
    AnonymousInterface139.t_of_js
      (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload")
let (console : unit -> Console.t) =
  fun () -> Console.t_of_js (Ojs.get_prop_ascii Ojs.global "console")
let (name : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "name")
let (onmessage :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16434 : Ojs.t) ->
         fun ~this:(x16435 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16436 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16434
                  [|(DedicatedWorkerGlobalScope.t_to_js x16435);(MessageEvent.t_0_to_js
                                                                   x16436)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessage")
let (onmessageerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16437 : Ojs.t) ->
         fun ~this:(x16438 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16439 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x16437
                  [|(DedicatedWorkerGlobalScope.t_to_js x16438);(MessageEvent.t_0_to_js
                                                                   x16439)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessageerror")
let (close : unit -> unit) =
  fun () -> ignore (Ojs.call Ojs.global "close" [||])
let (postMessage : message:any -> transfer:Transferable.t list -> unit) =
  fun ~message:(x16440 : any) ->
    fun ~transfer:(x16441 : Transferable.t list) ->
      ignore
        (Ojs.call Ojs.global "postMessage"
           [|(any_to_js x16440);(Ojs.list_to_js Transferable.t_to_js x16441)|])
let (postMessage' :
  message:any -> ?options:PostMessageOptions.t -> unit -> unit) =
  fun ~message:(x16443 : any) ->
    fun ?options:(x16444 : PostMessageOptions.t option) ->
      fun () ->
        ignore
          (let x16447 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16447 "postMessage") "apply"
             [|x16447;((let x16445 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16445 "push" [|(any_to_js x16443)|]);
                        (match x16444 with
                         | Some x16446 ->
                             ignore
                               (Ojs.call x16445 "push"
                                  [|(PostMessageOptions.t_to_js x16446)|])
                         | None -> ());
                        x16445))|])
let (dispatchEvent : Event.t -> bool) =
  fun (x16448 : Event.t) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "dispatchEvent" [|(Event.t_to_js x16448)|])
let (location : unit -> WorkerLocation.t) =
  fun () -> WorkerLocation.t_of_js (Ojs.get_prop_ascii Ojs.global "location")
let (navigator : unit -> WorkerNavigator.t) =
  fun () ->
    WorkerNavigator.t_of_js (Ojs.get_prop_ascii Ojs.global "navigator")
let (onerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:ErrorEvent.t -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16449 : Ojs.t) ->
         fun ~this:(x16450 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16451 : ErrorEvent.t) ->
             any_of_js
               (Ojs.apply x16449
                  [|(DedicatedWorkerGlobalScope.t_to_js x16450);(ErrorEvent.t_to_js
                                                                   x16451)|]))
      (Ojs.get_prop_ascii Ojs.global "onerror")
let (onlanguagechange :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x16452 : Ojs.t) ->
         fun ~this:(x16453 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16454 : Event.t) ->
             any_of_js
               (Ojs.apply x16452
                  [|(DedicatedWorkerGlobalScope.t_to_js x16453);(Event.t_to_js
                                                                   x16454)|]))
      (Ojs.get_prop_ascii Ojs.global "onlanguagechange")
let (onoffline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x16455 : Ojs.t) ->
         fun ~this:(x16456 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16457 : Event.t) ->
             any_of_js
               (Ojs.apply x16455
                  [|(DedicatedWorkerGlobalScope.t_to_js x16456);(Event.t_to_js
                                                                   x16457)|]))
      (Ojs.get_prop_ascii Ojs.global "onoffline")
let (ononline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x16458 : Ojs.t) ->
         fun ~this:(x16459 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16460 : Event.t) ->
             any_of_js
               (Ojs.apply x16458
                  [|(DedicatedWorkerGlobalScope.t_to_js x16459);(Event.t_to_js
                                                                   x16460)|]))
      (Ojs.get_prop_ascii Ojs.global "ononline")
let (onrejectionhandled :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16461 : Ojs.t) ->
         fun ~this:(x16462 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16463 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16461
                  [|(DedicatedWorkerGlobalScope.t_to_js x16462);(PromiseRejectionEvent.t_to_js
                                                                   x16463)|]))
      (Ojs.get_prop_ascii Ojs.global "onrejectionhandled")
let (onunhandledrejection :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x16464 : Ojs.t) ->
         fun ~this:(x16465 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x16466 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x16464
                  [|(DedicatedWorkerGlobalScope.t_to_js x16465);(PromiseRejectionEvent.t_to_js
                                                                   x16466)|]))
      (Ojs.get_prop_ascii Ojs.global "onunhandledrejection")
let (self : unit -> (WorkerGlobalScope.t, any) intersection2) =
  fun () ->
    intersection2_of_js WorkerGlobalScope.t_of_js any_of_js
      (Ojs.get_prop_ascii Ojs.global "self")
let (importScripts' : URL.t or_string list -> unit) =
  fun (x16469 : URL.t or_string list) ->
    ignore
      (let x16473 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x16473 "importScripts") "apply"
         [|x16473;((let x16470 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x16471 : URL.t or_string) ->
                         ignore
                           (Ojs.call x16470 "push"
                              [|(or_string_to_js URL.t_to_js x16471)|]))
                      x16469;
                    x16470))|])
let (fonts : unit -> FontFaceSet.t) =
  fun () -> FontFaceSet.t_of_js (Ojs.get_prop_ascii Ojs.global "fonts")
let (caches : unit -> CacheStorage.t) =
  fun () -> CacheStorage.t_of_js (Ojs.get_prop_ascii Ojs.global "caches")
let (crossOriginIsolated : unit -> bool) =
  fun () ->
    Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "crossOriginIsolated")
let (crypto' : unit -> Crypto.t) =
  fun () -> Crypto.t_of_js (Ojs.get_prop_ascii Ojs.global "crypto")
let (indexedDB : unit -> IDBFactory.t) =
  fun () -> IDBFactory.t_of_js (Ojs.get_prop_ascii Ojs.global "indexedDB")
let (isSecureContext : unit -> bool) =
  fun () -> Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "isSecureContext")
let (origin : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "origin")
let (performance' : unit -> Performance.t) =
  fun () -> Performance.t_of_js (Ojs.get_prop_ascii Ojs.global "performance")
let (atob : string -> string) =
  fun (x16474 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "atob" [|(Ojs.string_to_js x16474)|])
let (btoa : string -> string) =
  fun (x16475 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "btoa" [|(Ojs.string_to_js x16475)|])
let (clearInterval : ?handle:float -> unit -> unit) =
  fun ?handle:(x16476 : float option) ->
    fun () ->
      ignore
        (let x16479 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16479 "clearInterval") "apply"
           [|x16479;((let x16477 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16476 with
                       | Some x16478 ->
                           ignore
                             (Ojs.call x16477 "push"
                                [|(Ojs.float_to_js x16478)|])
                       | None -> ());
                      x16477))|])
let (clearTimeout : ?handle:float -> unit -> unit) =
  fun ?handle:(x16480 : float option) ->
    fun () ->
      ignore
        (let x16483 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x16483 "clearTimeout") "apply"
           [|x16483;((let x16481 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x16480 with
                       | Some x16482 ->
                           ignore
                             (Ojs.call x16481 "push"
                                [|(Ojs.float_to_js x16482)|])
                       | None -> ());
                      x16481))|])
let (createImageBitmap :
  image:ImageBitmapSource.t ->
    ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16484 : ImageBitmapSource.t) ->
    fun ?options:(x16485 : ImageBitmapOptions.t option) ->
      fun () ->
        Promise.t_1_of_js ImageBitmap.t_of_js
          (let x16488 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16488 "createImageBitmap") "apply"
             [|x16488;((let x16486 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16486 "push"
                             [|(ImageBitmapSource.t_to_js x16484)|]);
                        (match x16485 with
                         | Some x16487 ->
                             ignore
                               (Ojs.call x16486 "push"
                                  [|(ImageBitmapOptions.t_to_js x16487)|])
                         | None -> ());
                        x16486))|])
let (createImageBitmap' :
  image:ImageBitmapSource.t ->
    sx:float ->
      sy:float ->
        sw:float ->
          sh:float ->
            ?options:ImageBitmapOptions.t ->
              unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x16490 : ImageBitmapSource.t) ->
    fun ~sx:(x16491 : float) ->
      fun ~sy:(x16492 : float) ->
        fun ~sw:(x16493 : float) ->
          fun ~sh:(x16494 : float) ->
            fun ?options:(x16495 : ImageBitmapOptions.t option) ->
              fun () ->
                Promise.t_1_of_js ImageBitmap.t_of_js
                  (let x16498 = Ojs.global in
                   Ojs.call (Ojs.get_prop_ascii x16498 "createImageBitmap")
                     "apply"
                     [|x16498;((let x16496 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x16496 "push"
                                     [|(ImageBitmapSource.t_to_js x16490)|]);
                                ignore
                                  (Ojs.call x16496 "push"
                                     [|(Ojs.float_to_js x16491)|]);
                                ignore
                                  (Ojs.call x16496 "push"
                                     [|(Ojs.float_to_js x16492)|]);
                                ignore
                                  (Ojs.call x16496 "push"
                                     [|(Ojs.float_to_js x16493)|]);
                                ignore
                                  (Ojs.call x16496 "push"
                                     [|(Ojs.float_to_js x16494)|]);
                                (match x16495 with
                                 | Some x16497 ->
                                     ignore
                                       (Ojs.call x16496 "push"
                                          [|(ImageBitmapOptions.t_to_js
                                               x16497)|])
                                 | None -> ());
                                x16496))|])
let (fetch :
  input:RequestInfo.t ->
    ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
  =
  fun ~input:(x16500 : RequestInfo.t) ->
    fun ?init:(x16501 : RequestInit.t option) ->
      fun () ->
        Promise.t_1_of_js Response.t_of_js
          (let x16504 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x16504 "fetch") "apply"
             [|x16504;((let x16502 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x16502 "push"
                             [|(RequestInfo.t_to_js x16500)|]);
                        (match x16501 with
                         | Some x16503 ->
                             ignore
                               (Ojs.call x16502 "push"
                                  [|(RequestInit.t_to_js x16503)|])
                         | None -> ());
                        x16502))|])
let (queueMicrotask : VoidFunction.t -> unit) =
  fun (x16506 : VoidFunction.t) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask" [|(VoidFunction.t_to_js x16506)|])
let (setInterval :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16507 : TimerHandler.t) ->
    fun ?timeout:(x16508 : float option) ->
      fun ~arguments:(x16509 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16513 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16513 "setInterval") "apply"
               [|x16513;((let x16510 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16510 "push"
                               [|(TimerHandler.t_to_js x16507)|]);
                          (match x16508 with
                           | Some x16512 ->
                               ignore
                                 (Ojs.call x16510 "push"
                                    [|(Ojs.float_to_js x16512)|])
                           | None -> ());
                          List.iter
                            (fun (x16511 : any) ->
                               ignore
                                 (Ojs.call x16510 "push"
                                    [|(any_to_js x16511)|])) x16509;
                          x16510))|])
let (setTimeout :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x16514 : TimerHandler.t) ->
    fun ?timeout:(x16515 : float option) ->
      fun ~arguments:(x16516 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x16520 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16520 "setTimeout") "apply"
               [|x16520;((let x16517 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16517 "push"
                               [|(TimerHandler.t_to_js x16514)|]);
                          (match x16515 with
                           | Some x16519 ->
                               ignore
                                 (Ojs.call x16517 "push"
                                    [|(Ojs.float_to_js x16519)|])
                           | None -> ());
                          List.iter
                            (fun (x16518 : any) ->
                               ignore
                                 (Ojs.call x16517 "push"
                                    [|(any_to_js x16518)|])) x16516;
                          x16517))|])
let (cancelAnimationFrame : float -> unit) =
  fun (x16521 : float) ->
    ignore
      (Ojs.call Ojs.global "cancelAnimationFrame"
         [|(Ojs.float_to_js x16521)|])
let (requestAnimationFrame : FrameRequestCallback.t -> float) =
  fun (x16522 : FrameRequestCallback.t) ->
    Ojs.float_of_js
      (Ojs.call Ojs.global "requestAnimationFrame"
         [|(FrameRequestCallback.t_to_js x16522)|])
let (addEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x16523 : 'K) ->
    fun
      ~listener:(x16524 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun ?options:(x16525 : AddEventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x16531 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16531 "addEventListener") "apply"
               [|x16531;((let x16526 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16526 "push" [|(Obj.magic x16523)|]);
                          ignore
                            (Ojs.call x16526 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16529 : Ojs.t) ->
                                       fun (x16530 : Ojs.t) ->
                                         any_to_js
                                           (x16524
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16529)
                                              ~ev:(any_of_js x16530))))|]);
                          (match x16525 with
                           | Some x16527 ->
                               ignore
                                 (Ojs.call x16526 "push"
                                    [|(or_boolean_to_js
                                         AddEventListenerOptions.t_to_js
                                         x16527)|])
                           | None -> ());
                          x16526))|])
let (addEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x16532 : string) ->
    fun ~listener:(x16533 : EventListenerOrEventListenerObject.t) ->
      fun ?options:(x16534 : AddEventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x16538 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16538 "addEventListener") "apply"
               [|x16538;((let x16535 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16535 "push"
                               [|(Ojs.string_to_js x16532)|]);
                          ignore
                            (Ojs.call x16535 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16533)|]);
                          (match x16534 with
                           | Some x16536 ->
                               ignore
                                 (Ojs.call x16535 "push"
                                    [|(or_boolean_to_js
                                         AddEventListenerOptions.t_to_js
                                         x16536)|])
                           | None -> ());
                          x16535))|])
let (removeEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:EventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x16539 : 'K) ->
    fun
      ~listener:(x16540 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun ?options:(x16541 : EventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x16547 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16547 "removeEventListener")
               "apply"
               [|x16547;((let x16542 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16542 "push" [|(Obj.magic x16539)|]);
                          ignore
                            (Ojs.call x16542 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x16545 : Ojs.t) ->
                                       fun (x16546 : Ojs.t) ->
                                         any_to_js
                                           (x16540
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x16545)
                                              ~ev:(any_of_js x16546))))|]);
                          (match x16541 with
                           | Some x16543 ->
                               ignore
                                 (Ojs.call x16542 "push"
                                    [|(or_boolean_to_js
                                         EventListenerOptions.t_to_js x16543)|])
                           | None -> ());
                          x16542))|])
let (removeEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:EventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x16548 : string) ->
    fun ~listener:(x16549 : EventListenerOrEventListenerObject.t) ->
      fun ?options:(x16550 : EventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x16554 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x16554 "removeEventListener")
               "apply"
               [|x16554;((let x16551 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x16551 "push"
                               [|(Ojs.string_to_js x16548)|]);
                          ignore
                            (Ojs.call x16551 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x16549)|]);
                          (match x16550 with
                           | Some x16552 ->
                               ignore
                                 (Ojs.call x16551 "push"
                                    [|(or_boolean_to_js
                                         EventListenerOptions.t_to_js x16552)|])
                           | None -> ());
                          x16551))|])

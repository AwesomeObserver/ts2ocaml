[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_min
open Ts2ocaml_es
module DOMHighResTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> Ojs.float_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : float) -> Ojs.float_to_js x1
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4 : Ojs.t) -> t_of_js x4
    and t_0_to_js : t_0 -> Ojs.t = fun (x3 : t) -> t_to_js x3
  end
module PerformanceMeasureOptions =
  struct
    type t = [ `PerformanceMeasureOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6 : Ojs.t) -> t_of_js x6
    and t_0_to_js : t_0 -> Ojs.t = fun (x5 : t) -> t_to_js x5
    type tags = [ `PerformanceMeasureOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9 : Ojs.t) -> intf_of_js __tags_of_js x9
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7 : __tags intf) -> intf_to_js __tags_to_js x7
    let (get_detail : 'tags this -> any) =
      fun (x11 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x13 : 'tags this) ->
        fun (x14 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13) "detail"
            (any_to_js x14)
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x16 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16) "duration")
    let (set_duration : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x18 : 'tags this) ->
        fun (x19 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x18) "duration"
            (DOMHighResTimeStamp.t_to_js x19)
    let (get_end : 'tags this -> DOMHighResTimeStamp.t or_string) =
      fun (x21 : 'tags this) ->
        or_string_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x21) "end")
    let (set_end : 'tags this -> DOMHighResTimeStamp.t or_string -> unit) =
      fun (x24 : 'tags this) ->
        fun (x25 : DOMHighResTimeStamp.t or_string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x24) "end"
            (or_string_to_js DOMHighResTimeStamp.t_to_js x25)
    let (get_start : 'tags this -> DOMHighResTimeStamp.t or_string) =
      fun (x28 : 'tags this) ->
        or_string_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x28) "start")
    let (set_start : 'tags this -> DOMHighResTimeStamp.t or_string -> unit) =
      fun (x31 : 'tags this) ->
        fun (x32 : DOMHighResTimeStamp.t or_string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x31) "start"
            (or_string_to_js DOMHighResTimeStamp.t_to_js x32)
    let (create :
      detail:any ->
        duration:DOMHighResTimeStamp.t ->
          end_:DOMHighResTimeStamp.t or_string ->
            start:DOMHighResTimeStamp.t or_string -> unit -> t)
      =
      fun ~detail:(x35 : any) ->
        fun ~duration:(x36 : DOMHighResTimeStamp.t) ->
          fun ~end_:(x37 : DOMHighResTimeStamp.t or_string) ->
            fun ~start:(x38 : DOMHighResTimeStamp.t or_string) ->
              fun () ->
                let x39 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x39 "detail" (any_to_js x35);
                Ojs.set_prop_ascii x39 "duration"
                  (DOMHighResTimeStamp.t_to_js x36);
                Ojs.set_prop_ascii x39 "end"
                  (or_string_to_js DOMHighResTimeStamp.t_to_js x37);
                Ojs.set_prop_ascii x39 "start"
                  (or_string_to_js DOMHighResTimeStamp.t_to_js x38);
                t_of_js x39
    let cast_from = Obj.magic
  end
module PerformanceEntry =
  struct
    type t = [ `PerformanceEntry ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x43 : Ojs.t) -> t_of_js x43
    and t_0_to_js : t_0 -> Ojs.t = fun (x42 : t) -> t_to_js x42
    type tags = [ `PerformanceEntry ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x46 : Ojs.t) -> intf_of_js __tags_of_js x46
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x44 : __tags intf) -> intf_to_js __tags_to_js x44
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x48 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x48) "duration")
    let (get_entryType : 'tags this -> string) =
      fun (x50 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x50) "entryType")
    let (get_name : 'tags this -> string) =
      fun (x52 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x52) "name")
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x54 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x54) "startTime")
    let (toJSON : 'tags this -> any) =
      fun (x56 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x56) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceEntry") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
             [||])
  end
module PerformanceMeasure =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMeasure ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x59 : Ojs.t) -> t_of_js x59
    and t_0_to_js : t_0 -> Ojs.t = fun (x58 : t) -> t_to_js x58
    type tags = [ `PerformanceEntry  | `PerformanceMeasure ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x62 : Ojs.t) -> intf_of_js __tags_of_js x62
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x60 : __tags intf) -> intf_to_js __tags_to_js x60
    let (get_detail : 'tags this -> any) =
      fun (x64 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x64) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x66 : any) ->
        fun () ->
          let x67 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x67 "detail" (any_to_js x66); t_of_js x67
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
             [||])
  end
module PerformanceMarkOptions =
  struct
    type t = [ `PerformanceMarkOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x69 : Ojs.t) -> t_of_js x69
    and t_0_to_js : t_0 -> Ojs.t = fun (x68 : t) -> t_to_js x68
    type tags = [ `PerformanceMarkOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x72 : Ojs.t) -> intf_of_js __tags_of_js x72
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x70 : __tags intf) -> intf_to_js __tags_to_js x70
    let (get_detail : 'tags this -> any) =
      fun (x74 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x74) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x76 : 'tags this) ->
        fun (x77 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x76) "detail"
            (any_to_js x77)
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x79 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x79) "startTime")
    let (set_startTime : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x81 : 'tags this) ->
        fun (x82 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x81) "startTime"
            (DOMHighResTimeStamp.t_to_js x82)
    let (create : detail:any -> startTime:DOMHighResTimeStamp.t -> unit -> t)
      =
      fun ~detail:(x84 : any) ->
        fun ~startTime:(x85 : DOMHighResTimeStamp.t) ->
          fun () ->
            let x86 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x86 "detail" (any_to_js x84);
            Ojs.set_prop_ascii x86 "startTime"
              (DOMHighResTimeStamp.t_to_js x85);
            t_of_js x86
    let cast_from = Obj.magic
  end
module PerformanceMark =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x88 : Ojs.t) -> t_of_js x88
    and t_0_to_js : t_0 -> Ojs.t = fun (x87 : t) -> t_to_js x87
    type tags = [ `PerformanceEntry  | `PerformanceMark ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x91 : Ojs.t) -> intf_of_js __tags_of_js x91
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x89 : __tags intf) -> intf_to_js __tags_to_js x89
    let (get_detail : 'tags this -> any) =
      fun (x93 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x93) "detail")
    let (create : detail:any -> unit -> t) =
      fun ~detail:(x95 : any) ->
        fun () ->
          let x96 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x96 "detail" (any_to_js x95); t_of_js x96
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMark") "prototype")
    let (create' :
      markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t)
      =
      fun ~markName:(x97 : string) ->
        fun ?markOptions:(x98 : PerformanceMarkOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
                 (let x99 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x99 "push" [|(Ojs.string_to_js x97)|]);
                  (match x98 with
                   | Some x100 ->
                       ignore
                         (Ojs.call x99 "push"
                            [|(PerformanceMarkOptions.t_to_js x100)|])
                   | None -> ());
                  x99))
  end
module PerformanceEntryList =
  struct
    type t = PerformanceEntry.t list
    let rec t_of_js : Ojs.t -> t =
      fun (x103 : Ojs.t) -> Ojs.list_of_js PerformanceEntry.t_of_js x103
    and t_to_js : t -> Ojs.t =
      fun (x101 : PerformanceEntry.t list) ->
        Ojs.list_to_js PerformanceEntry.t_to_js x101
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x106 : Ojs.t) -> t_of_js x106
    and t_0_to_js : t_0 -> Ojs.t = fun (x105 : t) -> t_to_js x105
  end
module EventInit =
  struct
    type t = [ `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x108 : Ojs.t) -> t_of_js x108
    and t_0_to_js : t_0 -> Ojs.t = fun (x107 : t) -> t_to_js x107
    type tags = [ `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x111 : Ojs.t) -> intf_of_js __tags_of_js x111
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x109 : __tags intf) -> intf_to_js __tags_to_js x109
    let (get_bubbles : 'tags this -> bool) =
      fun (x113 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x113) "bubbles")
    let (set_bubbles : 'tags this -> bool -> unit) =
      fun (x115 : 'tags this) ->
        fun (x116 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x115) "bubbles"
            (Ojs.bool_to_js x116)
    let (get_cancelable : 'tags this -> bool) =
      fun (x118 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x118) "cancelable")
    let (set_cancelable : 'tags this -> bool -> unit) =
      fun (x120 : 'tags this) ->
        fun (x121 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x120) "cancelable"
            (Ojs.bool_to_js x121)
    let (get_composed : 'tags this -> bool) =
      fun (x123 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x123) "composed")
    let (set_composed : 'tags this -> bool -> unit) =
      fun (x125 : 'tags this) ->
        fun (x126 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x125) "composed"
            (Ojs.bool_to_js x126)
    let (create :
      bubbles:bool -> cancelable:bool -> composed:bool -> unit -> t) =
      fun ~bubbles:(x128 : bool) ->
        fun ~cancelable:(x129 : bool) ->
          fun ~composed:(x130 : bool) ->
            fun () ->
              let x131 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x131 "bubbles" (Ojs.bool_to_js x128);
              Ojs.set_prop_ascii x131 "cancelable" (Ojs.bool_to_js x129);
              Ojs.set_prop_ascii x131 "composed" (Ojs.bool_to_js x130);
              t_of_js x131
    let cast_from = Obj.magic
  end
module EventListenerOptions =
  struct
    type t = [ `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x133 : Ojs.t) -> t_of_js x133
    and t_0_to_js : t_0 -> Ojs.t = fun (x132 : t) -> t_to_js x132
    type tags = [ `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x136 : Ojs.t) -> intf_of_js __tags_of_js x136
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x134 : __tags intf) -> intf_to_js __tags_to_js x134
    let (get_capture : 'tags this -> bool) =
      fun (x138 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x138) "capture")
    let (set_capture : 'tags this -> bool -> unit) =
      fun (x140 : 'tags this) ->
        fun (x141 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x140) "capture"
            (Ojs.bool_to_js x141)
    let (create : capture:bool -> unit -> t) =
      fun ~capture:(x143 : bool) ->
        fun () ->
          let x144 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x144 "capture" (Ojs.bool_to_js x143);
          t_of_js x144
    let cast_from = Obj.magic
  end
module rec
  AbortSignal:sig
                type t = [ `AbortSignal  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `AbortSignal  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `AbortSignal  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `AbortSignal ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_aborted : 'tags this -> bool
                val get_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `AbortSignal  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x146 : Ojs.t) -> t_of_js x146
    and t_0_to_js : t_0 -> Ojs.t = fun (x145 : t) -> t_to_js x145
    type tags = [ `AbortSignal  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x149 : Ojs.t) -> intf_of_js __tags_of_js x149
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x147 : __tags intf) -> intf_to_js __tags_to_js x147
    let (get_aborted : 'tags this -> bool) =
      fun (x151 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x151) "aborted")
    let (get_onabort : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x153 : 'tags this) ->
        or_null_of_js
          (fun (x155 : Ojs.t) ->
             fun ~this:(x156 : t) ->
               fun ~ev:(x157 : Event.t) ->
                 any_of_js
                   (Ojs.apply x155 [|(t_to_js x156);(Event.t_to_js x157)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x153) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x158 : 'tags this) ->
        fun (x159 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x158) "onabort"
            (or_null_to_js
               (fun (x160 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x161 : Ojs.t) ->
                       fun (x162 : Ojs.t) ->
                         any_to_js
                           (x160 ~this:(t_of_js x161)
                              ~ev:(Event.t_of_js x162)))) x159)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x172 : 'tags this) ->
        fun ~type_:(x164 : 'K) ->
          fun ~listener:(x165 : this:t -> ev:any -> any) ->
            fun ?options:(x166 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x174 = this_to_js Obj.magic x172 in
                   Ojs.call (Ojs.get_prop_ascii x174 "addEventListener")
                     "apply"
                     [|x174;((let x167 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x167 "push" [|(Obj.magic x164)|]);
                              ignore
                                (Ojs.call x167 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x170 : Ojs.t) ->
                                           fun (x171 : Ojs.t) ->
                                             any_to_js
                                               (x165 ~this:(t_of_js x170)
                                                  ~ev:(any_of_js x171))))|]);
                              (match x166 with
                               | Some x168 ->
                                   ignore
                                     (Ojs.call x167 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x168)|])
                               | None -> ());
                              x167))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x181 : 'tags this) ->
        fun ~type_:(x175 : string) ->
          fun ~listener:(x176 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x177 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x183 = this_to_js Obj.magic x181 in
                   Ojs.call (Ojs.get_prop_ascii x183 "addEventListener")
                     "apply"
                     [|x183;((let x178 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x178 "push"
                                   [|(Ojs.string_to_js x175)|]);
                              ignore
                                (Ojs.call x178 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x176)|]);
                              (match x177 with
                               | Some x179 ->
                                   ignore
                                     (Ojs.call x178 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x179)|])
                               | None -> ());
                              x178))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x192 : 'tags this) ->
        fun ~type_:(x184 : 'K) ->
          fun ~listener:(x185 : this:t -> ev:any -> any) ->
            fun ?options:(x186 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x194 = this_to_js Obj.magic x192 in
                   Ojs.call (Ojs.get_prop_ascii x194 "removeEventListener")
                     "apply"
                     [|x194;((let x187 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x187 "push" [|(Obj.magic x184)|]);
                              ignore
                                (Ojs.call x187 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x190 : Ojs.t) ->
                                           fun (x191 : Ojs.t) ->
                                             any_to_js
                                               (x185 ~this:(t_of_js x190)
                                                  ~ev:(any_of_js x191))))|]);
                              (match x186 with
                               | Some x188 ->
                                   ignore
                                     (Ojs.call x187 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x188)|])
                               | None -> ());
                              x187))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x201 : 'tags this) ->
        fun ~type_:(x195 : string) ->
          fun ~listener:(x196 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x197 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x203 = this_to_js Obj.magic x201 in
                   Ojs.call (Ojs.get_prop_ascii x203 "removeEventListener")
                     "apply"
                     [|x203;((let x198 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x198 "push"
                                   [|(Ojs.string_to_js x195)|]);
                              ignore
                                (Ojs.call x198 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x196)|]);
                              (match x197 with
                               | Some x199 ->
                                   ignore
                                     (Ojs.call x198 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x199)|])
                               | None -> ());
                              x198))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "AbortSignal")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortSignal") [||])
  end
 and
  AddEventListenerOptions:sig
                            type t =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `AddEventListenerOptions 
                                | `EventListenerOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `AddEventListenerOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_once : 'tags this -> bool
                            val set_once : 'tags this -> bool -> unit
                            val get_passive : 'tags this -> bool
                            val set_passive : 'tags this -> bool -> unit
                            val get_signal : 'tags this -> AbortSignal.t
                            val set_signal :
                              'tags this -> AbortSignal.t -> unit
                            val create :
                              once:bool ->
                                passive:bool ->
                                  signal:AbortSignal.t -> unit -> t
                            val cast_from : 'tags this -> t
                          end =
  struct
    type t = [ `AddEventListenerOptions  | `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x205 : Ojs.t) -> t_of_js x205
    and t_0_to_js : t_0 -> Ojs.t = fun (x204 : t) -> t_to_js x204
    type tags = [ `AddEventListenerOptions  | `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AddEventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x208 : Ojs.t) -> intf_of_js __tags_of_js x208
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x206 : __tags intf) -> intf_to_js __tags_to_js x206
    let (get_once : 'tags this -> bool) =
      fun (x210 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x210) "once")
    let (set_once : 'tags this -> bool -> unit) =
      fun (x212 : 'tags this) ->
        fun (x213 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x212) "once"
            (Ojs.bool_to_js x213)
    let (get_passive : 'tags this -> bool) =
      fun (x215 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x215) "passive")
    let (set_passive : 'tags this -> bool -> unit) =
      fun (x217 : 'tags this) ->
        fun (x218 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x217) "passive"
            (Ojs.bool_to_js x218)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x220 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x220) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x222 : 'tags this) ->
        fun (x223 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x222) "signal"
            (AbortSignal.t_to_js x223)
    let (create :
      once:bool -> passive:bool -> signal:AbortSignal.t -> unit -> t) =
      fun ~once:(x225 : bool) ->
        fun ~passive:(x226 : bool) ->
          fun ~signal:(x227 : AbortSignal.t) ->
            fun () ->
              let x228 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x228 "once" (Ojs.bool_to_js x225);
              Ojs.set_prop_ascii x228 "passive" (Ojs.bool_to_js x226);
              Ojs.set_prop_ascii x228 "signal" (AbortSignal.t_to_js x227);
              t_of_js x228
    let cast_from = Obj.magic
  end and
       Event:sig
               type t = [ `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `Event ]
                 type tags_0 = tags]
               type 'tags this = 'tags intf constraint 'tags = [> `Event ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_bubbles : 'tags this -> bool
               val get_cancelBubble : 'tags this -> bool
               val set_cancelBubble : 'tags this -> bool -> unit
               val get_cancelable : 'tags this -> bool
               val get_composed : 'tags this -> bool
               val get_currentTarget : 'tags this -> EventTarget.t or_null
               val get_defaultPrevented : 'tags this -> bool
               val get_eventPhase : 'tags this -> float
               val get_isTrusted : 'tags this -> bool
               val get_returnValue : 'tags this -> bool
               val set_returnValue : 'tags this -> bool -> unit
               val get_srcElement : 'tags this -> EventTarget.t or_null
               val get_target : 'tags this -> EventTarget.t or_null
               val get_timeStamp : 'tags this -> DOMHighResTimeStamp.t
               val get_type : 'tags this -> string
               val composedPath : 'tags this -> EventTarget.t list
               val initEvent :
                 'tags this ->
                   type_:string ->
                     ?bubbles:bool -> ?cancelable:bool -> unit -> unit
               val preventDefault : 'tags this -> unit
               val stopImmediatePropagation : 'tags this -> unit
               val stopPropagation : 'tags this -> unit
               val get_AT_TARGET : 'tags this -> float
               val get_BUBBLING_PHASE : 'tags this -> float
               val get_CAPTURING_PHASE : 'tags this -> float
               val get_NONE : 'tags this -> float
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:EventInit.t -> unit -> t
               val at_target : unit -> float
               val bubbling_phase : unit -> float
               val capturing_phase : unit -> float
               val none : unit -> float
             end =
       struct
         type t = [ `Event ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x230 : Ojs.t) -> t_of_js x230
         and t_0_to_js : t_0 -> Ojs.t = fun (x229 : t) -> t_to_js x229
         type tags = [ `Event ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `Event ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x233 : Ojs.t) -> intf_of_js __tags_of_js x233
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x231 : __tags intf) -> intf_to_js __tags_to_js x231
         let (get_bubbles : 'tags this -> bool) =
           fun (x235 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x235) "bubbles")
         let (get_cancelBubble : 'tags this -> bool) =
           fun (x237 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x237) "cancelBubble")
         let (set_cancelBubble : 'tags this -> bool -> unit) =
           fun (x239 : 'tags this) ->
             fun (x240 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x239) "cancelBubble"
                 (Ojs.bool_to_js x240)
         let (get_cancelable : 'tags this -> bool) =
           fun (x242 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x242) "cancelable")
         let (get_composed : 'tags this -> bool) =
           fun (x244 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x244) "composed")
         let (get_currentTarget : 'tags this -> EventTarget.t or_null) =
           fun (x246 : 'tags this) ->
             or_null_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x246)
                  "currentTarget")
         let (get_defaultPrevented : 'tags this -> bool) =
           fun (x249 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x249)
                  "defaultPrevented")
         let (get_eventPhase : 'tags this -> float) =
           fun (x251 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x251) "eventPhase")
         let (get_isTrusted : 'tags this -> bool) =
           fun (x253 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x253) "isTrusted")
         let (get_returnValue : 'tags this -> bool) =
           fun (x255 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x255) "returnValue")
         let (set_returnValue : 'tags this -> bool -> unit) =
           fun (x257 : 'tags this) ->
             fun (x258 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x257) "returnValue"
                 (Ojs.bool_to_js x258)
         let (get_srcElement : 'tags this -> EventTarget.t or_null) =
           fun (x260 : 'tags this) ->
             or_null_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x260) "srcElement")
         let (get_target : 'tags this -> EventTarget.t or_null) =
           fun (x263 : 'tags this) ->
             or_null_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x263) "target")
         let (get_timeStamp : 'tags this -> DOMHighResTimeStamp.t) =
           fun (x266 : 'tags this) ->
             DOMHighResTimeStamp.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x266) "timeStamp")
         let (get_type : 'tags this -> string) =
           fun (x268 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x268) "type")
         let (composedPath : 'tags this -> EventTarget.t list) =
           fun (x270 : 'tags this) ->
             Ojs.list_of_js EventTarget.t_of_js
               (Ojs.call (this_to_js Obj.magic x270) "composedPath" [||])
         let (initEvent :
           'tags this ->
             type_:string ->
               ?bubbles:bool -> ?cancelable:bool -> unit -> unit)
           =
           fun (x279 : 'tags this) ->
             fun ~type_:(x273 : string) ->
               fun ?bubbles:(x274 : bool option) ->
                 fun ?cancelable:(x275 : bool option) ->
                   fun () ->
                     ignore
                       (let x281 = this_to_js Obj.magic x279 in
                        Ojs.call (Ojs.get_prop_ascii x281 "initEvent")
                          "apply"
                          [|x281;((let x276 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x276 "push"
                                        [|(Ojs.string_to_js x273)|]);
                                   (match x274 with
                                    | Some x278 ->
                                        ignore
                                          (Ojs.call x276 "push"
                                             [|(Ojs.bool_to_js x278)|])
                                    | None -> ());
                                   (match x275 with
                                    | Some x277 ->
                                        ignore
                                          (Ojs.call x276 "push"
                                             [|(Ojs.bool_to_js x277)|])
                                    | None -> ());
                                   x276))|])
         let (preventDefault : 'tags this -> unit) =
           fun (x282 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x282) "preventDefault" [||])
         let (stopImmediatePropagation : 'tags this -> unit) =
           fun (x284 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x284)
                  "stopImmediatePropagation" [||])
         let (stopPropagation : 'tags this -> unit) =
           fun (x286 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x286) "stopPropagation" [||])
         let (get_AT_TARGET : 'tags this -> float) =
           fun (x288 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x288) "AT_TARGET")
         let (get_BUBBLING_PHASE : 'tags this -> float) =
           fun (x290 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x290)
                  "BUBBLING_PHASE")
         let (get_CAPTURING_PHASE : 'tags this -> float) =
           fun (x292 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x292)
                  "CAPTURING_PHASE")
         let (get_NONE : 'tags this -> float) =
           fun (x294 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x294) "NONE")
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "prototype")
         let (create :
           type_:string -> ?eventInitDict:EventInit.t -> unit -> t) =
           fun ~type_:(x296 : string) ->
             fun ?eventInitDict:(x297 : EventInit.t option) ->
               fun () ->
                 t_of_js
                   (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Event")
                      (let x298 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       ignore
                         (Ojs.call x298 "push" [|(Ojs.string_to_js x296)|]);
                       (match x297 with
                        | Some x299 ->
                            ignore
                              (Ojs.call x298 "push"
                                 [|(EventInit.t_to_js x299)|])
                        | None -> ());
                       x298))
         let (at_target : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "AT_TARGET")
         let (bubbling_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "BUBBLING_PHASE")
         let (capturing_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "CAPTURING_PHASE")
         let (none : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "NONE")
       end and
            EventListener:sig
                            type t = [ `EventListener ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `EventListener ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `EventListener ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `EventListener ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val apply : 'tags this -> evt:Event.t -> unit
                            val cast_from : 'tags this -> t
                          end =
            struct
              type t = [ `EventListener ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x301 : Ojs.t) -> t_of_js x301
              and t_0_to_js : t_0 -> Ojs.t = fun (x300 : t) -> t_to_js x300
              type tags = [ `EventListener ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `EventListener ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x304 : Ojs.t) -> intf_of_js __tags_of_js x304
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x302 : __tags intf) -> intf_to_js __tags_to_js x302
              let (apply : 'tags this -> evt:Event.t -> unit) =
                fun (x307 : 'tags this) ->
                  fun ~evt:(x306 : Event.t) ->
                    ignore
                      (Ojs.apply (this_to_js Obj.magic x307)
                         [|(Event.t_to_js x306)|])
              let cast_from = Obj.magic
            end and
                 EventListenerObject:sig
                                       type t = [ `EventListenerObject ] intf
                                       type t_0 = t
                                       [@@@js.stop ]
                                       type tags = [ `EventListenerObject ]
                                       type tags_0 = tags
                                       [@@@js.start ]
                                       [@@@js.implem
                                         type tags = [ `EventListenerObject ]
                                         type tags_0 = tags]
                                       type 'tags this =
                                         'tags intf constraint 'tags =
                                                     [>
                                                       `EventListenerObject ]
                                       val t_to_js : t -> Ojs.t
                                       val t_of_js : Ojs.t -> t
                                       val t_0_to_js : t_0 -> Ojs.t
                                       val t_0_of_js : Ojs.t -> t_0
                                       val handleEvent :
                                         'tags this ->
                                           object_:Event.t -> unit
                                       val cast_from : 'tags this -> t
                                     end =
                 struct
                   type t = [ `EventListenerObject ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x310 : Ojs.t) -> t_of_js x310
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x309 : t) -> t_to_js x309
                   type tags = [ `EventListenerObject ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `EventListenerObject ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x313 : Ojs.t) -> intf_of_js __tags_of_js x313
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x311 : __tags intf) ->
                         intf_to_js __tags_to_js x311
                   let (handleEvent : 'tags this -> object_:Event.t -> unit)
                     =
                     fun (x316 : 'tags this) ->
                       fun ~object_:(x315 : Event.t) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x316)
                              "handleEvent" [|(Event.t_to_js x315)|])
                   let cast_from = Obj.magic
                 end and
                      EventListenerOrEventListenerObject:sig
                                                           type t =
                                                             (EventListener.t,
                                                               EventListenerObject.t)
                                                               union2
                                                           type t_0 = t
                                                           val t_to_js :
                                                             t -> Ojs.t
                                                           val t_of_js :
                                                             Ojs.t -> t
                                                           val t_0_to_js :
                                                             t_0 -> Ojs.t
                                                           val t_0_of_js :
                                                             Ojs.t -> t_0
                                                         end =
                      struct
                        type t =
                          (EventListener.t, EventListenerObject.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x321 : Ojs.t) ->
                            union2_of_js EventListener.t_of_js
                              EventListenerObject.t_of_js x321
                        and t_to_js : t -> Ojs.t =
                          fun
                            (x318 :
                              (EventListener.t, EventListenerObject.t) union2)
                            ->
                            union2_to_js EventListener.t_to_js
                              EventListenerObject.t_to_js x318
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x325 : Ojs.t) -> t_of_js x325
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x324 : t) -> t_to_js x324
                      end and
                           EventTarget:sig
                                         type t = [ `EventTarget ] intf
                                         type t_0 = t
                                         [@@@js.stop ]
                                         type tags = [ `EventTarget ]
                                         type tags_0 = tags
                                         [@@@js.start ]
                                         [@@@js.implem
                                           type tags = [ `EventTarget ]
                                           type tags_0 = tags]
                                         type 'tags this =
                                           'tags intf constraint 'tags =
                                                       [> `EventTarget ]
                                         val t_to_js : t -> Ojs.t
                                         val t_of_js : Ojs.t -> t
                                         val t_0_to_js : t_0 -> Ojs.t
                                         val t_0_of_js : Ojs.t -> t_0
                                         val addEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 or_null ->
                                                 ?options:AddEventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val dispatchEvent :
                                           'tags this ->
                                             event:Event.t -> bool
                                         val removeEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 or_null ->
                                                 ?options:EventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val cast_from : 'tags this -> t
                                         val prototype : unit -> t
                                         val create : unit -> t
                                       end =
                           struct
                             type t = [ `EventTarget ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x327 : Ojs.t) -> t_of_js x327
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x326 : t) -> t_to_js x326
                             type tags = [ `EventTarget ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `EventTarget ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x330 : Ojs.t) ->
                                   intf_of_js __tags_of_js x330
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x328 : __tags intf) ->
                                   intf_to_js __tags_to_js x328
                             let (addEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     or_null ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x339 : 'tags this) ->
                                 fun ~type_:(x332 : string) ->
                                   fun
                                     ~callback:(x333 :
                                                 EventListenerOrEventListenerObject.t
                                                   or_null)
                                     ->
                                     fun
                                       ?options:(x334 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x341 =
                                              this_to_js Obj.magic x339 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x341
                                                 "addEventListener") "apply"
                                              [|x341;((let x335 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x335
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x332)|]);
                                                       ignore
                                                         (Ojs.call x335
                                                            "push"
                                                            [|(or_null_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x333)|]);
                                                       (match x334 with
                                                        | Some x336 ->
                                                            ignore
                                                              (Ojs.call x335
                                                                 "push"
                                                                 [|(or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x336)|])
                                                        | None -> ());
                                                       x335))|])
                             let (dispatchEvent :
                               'tags this -> event:Event.t -> bool) =
                               fun (x343 : 'tags this) ->
                                 fun ~event:(x342 : Event.t) ->
                                   Ojs.bool_of_js
                                     (Ojs.call (this_to_js Obj.magic x343)
                                        "dispatchEvent"
                                        [|(Event.t_to_js x342)|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     or_null ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x352 : 'tags this) ->
                                 fun ~type_:(x345 : string) ->
                                   fun
                                     ~callback:(x346 :
                                                 EventListenerOrEventListenerObject.t
                                                   or_null)
                                     ->
                                     fun
                                       ?options:(x347 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x354 =
                                              this_to_js Obj.magic x352 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x354
                                                 "removeEventListener")
                                              "apply"
                                              [|x354;((let x348 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x348
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x345)|]);
                                                       ignore
                                                         (Ojs.call x348
                                                            "push"
                                                            [|(or_null_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x346)|]);
                                                       (match x347 with
                                                        | Some x349 ->
                                                            ignore
                                                              (Ojs.call x348
                                                                 "push"
                                                                 [|(or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x349)|])
                                                        | None -> ());
                                                       x348))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") [||])
                           end
module Performance =
  struct
    type t = [ `EventTarget  | `Performance ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x356 : Ojs.t) -> t_of_js x356
    and t_0_to_js : t_0 -> Ojs.t = fun (x355 : t) -> t_to_js x355
    type tags = [ `EventTarget  | `Performance ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x359 : Ojs.t) -> intf_of_js __tags_of_js x359
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x357 : __tags intf) -> intf_to_js __tags_to_js x357
    let (get_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x361 : 'tags this) ->
        or_null_of_js
          (fun (x363 : Ojs.t) ->
             fun ~this:(x364 : t) ->
               fun ~ev:(x365 : Event.t) ->
                 any_of_js
                   (Ojs.apply x363 [|(t_to_js x364);(Event.t_to_js x365)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x361)
             "onresourcetimingbufferfull")
    let (set_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x366 : 'tags this) ->
        fun (x367 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x366)
            "onresourcetimingbufferfull"
            (or_null_to_js
               (fun (x368 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x369 : Ojs.t) ->
                       fun (x370 : Ojs.t) ->
                         any_to_js
                           (x368 ~this:(t_of_js x369)
                              ~ev:(Event.t_of_js x370)))) x367)
    let (get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x372 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x372) "timeOrigin")
    let (clearMarks : 'tags this -> ?markName:string -> unit -> unit) =
      fun (x377 : 'tags this) ->
        fun ?markName:(x374 : string option) ->
          fun () ->
            ignore
              (let x379 = this_to_js Obj.magic x377 in
               Ojs.call (Ojs.get_prop_ascii x379 "clearMarks") "apply"
                 [|x379;((let x375 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x374 with
                           | Some x376 ->
                               ignore
                                 (Ojs.call x375 "push"
                                    [|(Ojs.string_to_js x376)|])
                           | None -> ());
                          x375))|])
    let (clearMeasures : 'tags this -> ?measureName:string -> unit -> unit) =
      fun (x383 : 'tags this) ->
        fun ?measureName:(x380 : string option) ->
          fun () ->
            ignore
              (let x385 = this_to_js Obj.magic x383 in
               Ojs.call (Ojs.get_prop_ascii x385 "clearMeasures") "apply"
                 [|x385;((let x381 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x380 with
                           | Some x382 ->
                               ignore
                                 (Ojs.call x381 "push"
                                    [|(Ojs.string_to_js x382)|])
                           | None -> ());
                          x381))|])
    let (clearResourceTimings : 'tags this -> unit) =
      fun (x386 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x386) "clearResourceTimings" [||])
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x388 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x388) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x394 : 'tags this) ->
        fun ~name:(x390 : string) ->
          fun ?type_:(x391 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x396 = this_to_js Obj.magic x394 in
                 Ojs.call (Ojs.get_prop_ascii x396 "getEntriesByName")
                   "apply"
                   [|x396;((let x392 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x392 "push"
                                 [|(Ojs.string_to_js x390)|]);
                            (match x391 with
                             | Some x393 ->
                                 ignore
                                   (Ojs.call x392 "push"
                                      [|(Ojs.string_to_js x393)|])
                             | None -> ());
                            x392))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x398 : 'tags this) ->
        fun ~type_:(x397 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x398) "getEntriesByType"
               [|(Ojs.string_to_js x397)|])
    let (mark :
      'tags this ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x404 : 'tags this) ->
        fun ~markName:(x400 : string) ->
          fun ?markOptions:(x401 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (let x406 = this_to_js Obj.magic x404 in
                 Ojs.call (Ojs.get_prop_ascii x406 "mark") "apply"
                   [|x406;((let x402 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x402 "push"
                                 [|(Ojs.string_to_js x400)|]);
                            (match x401 with
                             | Some x403 ->
                                 ignore
                                   (Ojs.call x402 "push"
                                      [|(PerformanceMarkOptions.t_to_js x403)|])
                             | None -> ());
                            x402))|])
    let (measure :
      'tags this ->
        measureName:string ->
          ?startOrMeasureOptions:PerformanceMeasureOptions.t or_string ->
            ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun (x414 : 'tags this) ->
        fun ~measureName:(x407 : string) ->
          fun
            ?startOrMeasureOptions:(x408 :
                                     PerformanceMeasureOptions.t or_string
                                       option)
            ->
            fun ?endMark:(x409 : string option) ->
              fun () ->
                PerformanceMeasure.t_of_js
                  (let x416 = this_to_js Obj.magic x414 in
                   Ojs.call (Ojs.get_prop_ascii x416 "measure") "apply"
                     [|x416;((let x410 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x410 "push"
                                   [|(Ojs.string_to_js x407)|]);
                              (match x408 with
                               | Some x412 ->
                                   ignore
                                     (Ojs.call x410 "push"
                                        [|(or_string_to_js
                                             PerformanceMeasureOptions.t_to_js
                                             x412)|])
                               | None -> ());
                              (match x409 with
                               | Some x411 ->
                                   ignore
                                     (Ojs.call x410 "push"
                                        [|(Ojs.string_to_js x411)|])
                               | None -> ());
                              x410))|])
    let (now : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x417 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (this_to_js Obj.magic x417) "now" [||])
    let (setResourceTimingBufferSize : 'tags this -> maxSize:float -> unit) =
      fun (x420 : 'tags this) ->
        fun ~maxSize:(x419 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x420)
               "setResourceTimingBufferSize" [|(Ojs.float_to_js x419)|])
    let (toJSON : 'tags this -> any) =
      fun (x422 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x422) "toJSON" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x432 : 'tags this) ->
        fun ~type_:(x424 : 'K) ->
          fun ~listener:(x425 : this:t -> ev:any -> any) ->
            fun ?options:(x426 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x434 = this_to_js Obj.magic x432 in
                   Ojs.call (Ojs.get_prop_ascii x434 "addEventListener")
                     "apply"
                     [|x434;((let x427 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x427 "push" [|(Obj.magic x424)|]);
                              ignore
                                (Ojs.call x427 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x430 : Ojs.t) ->
                                           fun (x431 : Ojs.t) ->
                                             any_to_js
                                               (x425 ~this:(t_of_js x430)
                                                  ~ev:(any_of_js x431))))|]);
                              (match x426 with
                               | Some x428 ->
                                   ignore
                                     (Ojs.call x427 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x428)|])
                               | None -> ());
                              x427))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x441 : 'tags this) ->
        fun ~type_:(x435 : string) ->
          fun ~listener:(x436 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x437 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x443 = this_to_js Obj.magic x441 in
                   Ojs.call (Ojs.get_prop_ascii x443 "addEventListener")
                     "apply"
                     [|x443;((let x438 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x438 "push"
                                   [|(Ojs.string_to_js x435)|]);
                              ignore
                                (Ojs.call x438 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x436)|]);
                              (match x437 with
                               | Some x439 ->
                                   ignore
                                     (Ojs.call x438 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x439)|])
                               | None -> ());
                              x438))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x452 : 'tags this) ->
        fun ~type_:(x444 : 'K) ->
          fun ~listener:(x445 : this:t -> ev:any -> any) ->
            fun ?options:(x446 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x454 = this_to_js Obj.magic x452 in
                   Ojs.call (Ojs.get_prop_ascii x454 "removeEventListener")
                     "apply"
                     [|x454;((let x447 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x447 "push" [|(Obj.magic x444)|]);
                              ignore
                                (Ojs.call x447 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x450 : Ojs.t) ->
                                           fun (x451 : Ojs.t) ->
                                             any_to_js
                                               (x445 ~this:(t_of_js x450)
                                                  ~ev:(any_of_js x451))))|]);
                              (match x446 with
                               | Some x448 ->
                                   ignore
                                     (Ojs.call x447 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x448)|])
                               | None -> ());
                              x447))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x461 : 'tags this) ->
        fun ~type_:(x455 : string) ->
          fun ~listener:(x456 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x457 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x463 = this_to_js Obj.magic x461 in
                   Ojs.call (Ojs.get_prop_ascii x463 "removeEventListener")
                     "apply"
                     [|x463;((let x458 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x458 "push"
                                   [|(Ojs.string_to_js x455)|]);
                              ignore
                                (Ojs.call x458 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x456)|]);
                              (match x457 with
                               | Some x459 ->
                                   ignore
                                     (Ojs.call x458 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x459)|])
                               | None -> ());
                              x458))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Performance")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Performance") [||])
  end
module PerformanceStatic =
  struct
    let (onresourcetimingbufferfull :
      unit -> (this:Performance.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x464 : Ojs.t) ->
             fun ~this:(x465 : Performance.t) ->
               fun ~ev:(x466 : Event.t) ->
                 any_of_js
                   (Ojs.apply x464
                      [|(Performance.t_to_js x465);(Event.t_to_js x466)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "onresourcetimingbufferfull")
    let (timeOrigin : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "timeOrigin")
    let (clearMarks : ?markName:string -> unit -> unit) =
      fun ?markName:(x467 : string option) ->
        fun () ->
          ignore
            (let x470 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x470 "clearMarks") "apply"
               [|x470;((let x468 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x467 with
                         | Some x469 ->
                             ignore
                               (Ojs.call x468 "push"
                                  [|(Ojs.string_to_js x469)|])
                         | None -> ());
                        x468))|])
    let (clearMeasures : ?measureName:string -> unit -> unit) =
      fun ?measureName:(x471 : string option) ->
        fun () ->
          ignore
            (let x474 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x474 "clearMeasures") "apply"
               [|x474;((let x472 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x471 with
                         | Some x473 ->
                             ignore
                               (Ojs.call x472 "push"
                                  [|(Ojs.string_to_js x473)|])
                         | None -> ());
                        x472))|])
    let (clearResourceTimings : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "clearResourceTimings" [||])
    let (getEntries : unit -> PerformanceEntryList.t) =
      fun () ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntries" [||])
    let (getEntriesByName :
      name:string -> ?type_:string -> unit -> PerformanceEntryList.t) =
      fun ~name:(x475 : string) ->
        fun ?type_:(x476 : string option) ->
          fun () ->
            PerformanceEntryList.t_of_js
              (let x479 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x479 "getEntriesByName") "apply"
                 [|x479;((let x477 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x477 "push" [|(Ojs.string_to_js x475)|]);
                          (match x476 with
                           | Some x478 ->
                               ignore
                                 (Ojs.call x477 "push"
                                    [|(Ojs.string_to_js x478)|])
                           | None -> ());
                          x477))|])
    let (getEntriesByType : string -> PerformanceEntryList.t) =
      fun (x480 : string) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntriesByType" [|(Ojs.string_to_js x480)|])
    let (mark :
      markName:string ->
        ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun ~markName:(x481 : string) ->
        fun ?markOptions:(x482 : PerformanceMarkOptions.t option) ->
          fun () ->
            PerformanceMark.t_of_js
              (let x485 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x485 "mark") "apply"
                 [|x485;((let x483 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x483 "push" [|(Ojs.string_to_js x481)|]);
                          (match x482 with
                           | Some x484 ->
                               ignore
                                 (Ojs.call x483 "push"
                                    [|(PerformanceMarkOptions.t_to_js x484)|])
                           | None -> ());
                          x483))|])
    let (measure :
      measureName:string ->
        ?startOrMeasureOptions:PerformanceMeasureOptions.t or_string ->
          ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun ~measureName:(x486 : string) ->
        fun
          ?startOrMeasureOptions:(x487 :
                                   PerformanceMeasureOptions.t or_string
                                     option)
          ->
          fun ?endMark:(x488 : string option) ->
            fun () ->
              PerformanceMeasure.t_of_js
                (let x493 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x493 "measure") "apply"
                   [|x493;((let x489 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x489 "push"
                                 [|(Ojs.string_to_js x486)|]);
                            (match x487 with
                             | Some x491 ->
                                 ignore
                                   (Ojs.call x489 "push"
                                      [|(or_string_to_js
                                           PerformanceMeasureOptions.t_to_js
                                           x491)|])
                             | None -> ());
                            (match x488 with
                             | Some x490 ->
                                 ignore
                                   (Ojs.call x489 "push"
                                      [|(Ojs.string_to_js x490)|])
                             | None -> ());
                            x489))|])
    let (now : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "now" [||])
    let (setResourceTimingBufferSize : float -> unit) =
      fun (x494 : float) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "setResourceTimingBufferSize" [|(Ojs.float_to_js x494)|])
    let (toJSON : unit -> any) =
      fun () ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "toJSON"
             [||])
    let (addEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x495 : 'K) ->
        fun ~listener:(x496 : this:Performance.t -> ev:any -> any) ->
          fun ?options:(x497 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x503 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x503 "addEventListener")
                   "apply"
                   [|x503;((let x498 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x498 "push" [|(Obj.magic x495)|]);
                            ignore
                              (Ojs.call x498 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x501 : Ojs.t) ->
                                         fun (x502 : Ojs.t) ->
                                           any_to_js
                                             (x496
                                                ~this:(Performance.t_of_js
                                                         x501)
                                                ~ev:(any_of_js x502))))|]);
                            (match x497 with
                             | Some x499 ->
                                 ignore
                                   (Ojs.call x498 "push"
                                      [|(or_boolean_to_js
                                           AddEventListenerOptions.t_to_js
                                           x499)|])
                             | None -> ());
                            x498))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x504 : string) ->
        fun ~listener:(x505 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x506 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x510 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x510 "addEventListener")
                   "apply"
                   [|x510;((let x507 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x507 "push"
                                 [|(Ojs.string_to_js x504)|]);
                            ignore
                              (Ojs.call x507 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x505)|]);
                            (match x506 with
                             | Some x508 ->
                                 ignore
                                   (Ojs.call x507 "push"
                                      [|(or_boolean_to_js
                                           AddEventListenerOptions.t_to_js
                                           x508)|])
                             | None -> ());
                            x507))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x511 : 'K) ->
        fun ~listener:(x512 : this:Performance.t -> ev:any -> any) ->
          fun ?options:(x513 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x519 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x519 "removeEventListener")
                   "apply"
                   [|x519;((let x514 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x514 "push" [|(Obj.magic x511)|]);
                            ignore
                              (Ojs.call x514 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x517 : Ojs.t) ->
                                         fun (x518 : Ojs.t) ->
                                           any_to_js
                                             (x512
                                                ~this:(Performance.t_of_js
                                                         x517)
                                                ~ev:(any_of_js x518))))|]);
                            (match x513 with
                             | Some x515 ->
                                 ignore
                                   (Ojs.call x514 "push"
                                      [|(or_boolean_to_js
                                           EventListenerOptions.t_to_js x515)|])
                             | None -> ());
                            x514))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x520 : string) ->
        fun ~listener:(x521 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x522 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x526 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x526 "removeEventListener")
                   "apply"
                   [|x526;((let x523 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x523 "push"
                                 [|(Ojs.string_to_js x520)|]);
                            ignore
                              (Ojs.call x523 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x521)|]);
                            (match x522 with
                             | Some x524 ->
                                 ignore
                                   (Ojs.call x523 "push"
                                      [|(or_boolean_to_js
                                           EventListenerOptions.t_to_js x524)|])
                             | None -> ());
                            x523))|])
  end
module StorageEstimate =
  struct
    type t = [ `StorageEstimate ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x528 : Ojs.t) -> t_of_js x528
    and t_0_to_js : t_0 -> Ojs.t = fun (x527 : t) -> t_to_js x527
    type tags = [ `StorageEstimate ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x531 : Ojs.t) -> intf_of_js __tags_of_js x531
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x529 : __tags intf) -> intf_to_js __tags_to_js x529
    let (get_quota : 'tags this -> float) =
      fun (x533 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x533) "quota")
    let (set_quota : 'tags this -> float -> unit) =
      fun (x535 : 'tags this) ->
        fun (x536 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x535) "quota"
            (Ojs.float_to_js x536)
    let (get_usage : 'tags this -> float) =
      fun (x538 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x538) "usage")
    let (set_usage : 'tags this -> float -> unit) =
      fun (x540 : 'tags this) ->
        fun (x541 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x540) "usage"
            (Ojs.float_to_js x541)
    let (create : quota:float -> usage:float -> unit -> t) =
      fun ~quota:(x543 : float) ->
        fun ~usage:(x544 : float) ->
          fun () ->
            let x545 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x545 "quota" (Ojs.float_to_js x543);
            Ojs.set_prop_ascii x545 "usage" (Ojs.float_to_js x544);
            t_of_js x545
    let cast_from = Obj.magic
  end
module StorageManager =
  struct
    type t = [ `StorageManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x547 : Ojs.t) -> t_of_js x547
    and t_0_to_js : t_0 -> Ojs.t = fun (x546 : t) -> t_to_js x546
    type tags = [ `StorageManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x550 : Ojs.t) -> intf_of_js __tags_of_js x550
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x548 : __tags intf) -> intf_to_js __tags_to_js x548
    let (estimate : 'tags this -> StorageEstimate.t Promise.t_1) =
      fun (x552 : 'tags this) ->
        Promise.t_1_of_js StorageEstimate.t_of_js
          (Ojs.call (this_to_js Obj.magic x552) "estimate" [||])
    let (persisted : 'tags this -> bool Promise.t_1) =
      fun (x555 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x555) "persisted" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "StorageManager") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "StorageManager") [||])
  end
module NavigatorStorage =
  struct
    type t = [ `NavigatorStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x559 : Ojs.t) -> t_of_js x559
    and t_0_to_js : t_0 -> Ojs.t = fun (x558 : t) -> t_to_js x558
    type tags = [ `NavigatorStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x562 : Ojs.t) -> intf_of_js __tags_of_js x562
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x560 : __tags intf) -> intf_to_js __tags_to_js x560
    let (get_storage : 'tags this -> StorageManager.t) =
      fun (x564 : 'tags this) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x564) "storage")
    let (create : storage:StorageManager.t -> unit -> t) =
      fun ~storage:(x566 : StorageManager.t) ->
        fun () ->
          let x567 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x567 "storage" (StorageManager.t_to_js x566);
          t_of_js x567
    let cast_from = Obj.magic
  end
module NavigatorOnLine =
  struct
    type t = [ `NavigatorOnLine ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x569 : Ojs.t) -> t_of_js x569
    and t_0_to_js : t_0 -> Ojs.t = fun (x568 : t) -> t_to_js x568
    type tags = [ `NavigatorOnLine ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x572 : Ojs.t) -> intf_of_js __tags_of_js x572
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x570 : __tags intf) -> intf_to_js __tags_to_js x570
    let (get_onLine : 'tags this -> bool) =
      fun (x574 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x574) "onLine")
    let (create : onLine:bool -> unit -> t) =
      fun ~onLine:(x576 : bool) ->
        fun () ->
          let x577 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x577 "onLine" (Ojs.bool_to_js x576);
          t_of_js x577
    let cast_from = Obj.magic
  end
module ConnectionType =
  struct
    type t =
      [ `L_s116_mixed  | `L_s128_none  | `L_s142_other  | `L_s196_unknown 
      | `L_s207_wifi  | `L_s46_bluetooth  | `L_s47_cellular 
      | `L_s68_ethernet ]
    let rec t_of_js : Ojs.t -> t =
      fun (x579 : Ojs.t) ->
        let x580 = x579 in
        match Ojs.string_of_js x580 with
        | "mixed" -> `L_s116_mixed
        | "none" -> `L_s128_none
        | "other" -> `L_s142_other
        | "unknown" -> `L_s196_unknown
        | "wifi" -> `L_s207_wifi
        | "bluetooth" -> `L_s46_bluetooth
        | "cellular" -> `L_s47_cellular
        | "ethernet" -> `L_s68_ethernet
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x578 :
          [ `L_s116_mixed  | `L_s128_none  | `L_s142_other 
          | `L_s196_unknown  | `L_s207_wifi  | `L_s46_bluetooth 
          | `L_s47_cellular  | `L_s68_ethernet ])
        ->
        match x578 with
        | `L_s116_mixed -> Ojs.string_to_js "mixed"
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s142_other -> Ojs.string_to_js "other"
        | `L_s196_unknown -> Ojs.string_to_js "unknown"
        | `L_s207_wifi -> Ojs.string_to_js "wifi"
        | `L_s46_bluetooth -> Ojs.string_to_js "bluetooth"
        | `L_s47_cellular -> Ojs.string_to_js "cellular"
        | `L_s68_ethernet -> Ojs.string_to_js "ethernet"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x582 : Ojs.t) -> t_of_js x582
    and t_0_to_js : t_0 -> Ojs.t = fun (x581 : t) -> t_to_js x581
  end
module NetworkInformation =
  struct
    type t = [ `EventTarget  | `NetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x584 : Ojs.t) -> t_of_js x584
    and t_0_to_js : t_0 -> Ojs.t = fun (x583 : t) -> t_to_js x583
    type tags = [ `EventTarget  | `NetworkInformation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x587 : Ojs.t) -> intf_of_js __tags_of_js x587
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x585 : __tags intf) -> intf_to_js __tags_to_js x585
    let (get_type : 'tags this -> ConnectionType.t) =
      fun (x589 : 'tags this) ->
        ConnectionType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x589) "type")
    let (create : type_:ConnectionType.t -> unit -> t) =
      fun ~type_:(x591 : ConnectionType.t) ->
        fun () ->
          let x592 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x592 "type" (ConnectionType.t_to_js x591);
          t_of_js x592
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NetworkInformation") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
             [||])
  end
module NavigatorNetworkInformation =
  struct
    type t = [ `NavigatorNetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x594 : Ojs.t) -> t_of_js x594
    and t_0_to_js : t_0 -> Ojs.t = fun (x593 : t) -> t_to_js x593
    type tags = [ `NavigatorNetworkInformation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorNetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x597 : Ojs.t) -> intf_of_js __tags_of_js x597
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x595 : __tags intf) -> intf_to_js __tags_to_js x595
    let (get_connection : 'tags this -> NetworkInformation.t) =
      fun (x599 : 'tags this) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x599) "connection")
    let (create : connection:NetworkInformation.t -> unit -> t) =
      fun ~connection:(x601 : NetworkInformation.t) ->
        fun () ->
          let x602 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x602 "connection"
            (NetworkInformation.t_to_js x601);
          t_of_js x602
    let cast_from = Obj.magic
  end
module NavigatorLanguage =
  struct
    type t = [ `NavigatorLanguage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x604 : Ojs.t) -> t_of_js x604
    and t_0_to_js : t_0 -> Ojs.t = fun (x603 : t) -> t_to_js x603
    type tags = [ `NavigatorLanguage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x607 : Ojs.t) -> intf_of_js __tags_of_js x607
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x605 : __tags intf) -> intf_to_js __tags_to_js x605
    let (get_language : 'tags this -> string) =
      fun (x609 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x609) "language")
    let (get_languages : 'tags this -> string list) =
      fun (x611 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x611) "languages")
    let (create : language:string -> languages:string list -> unit -> t) =
      fun ~language:(x614 : string) ->
        fun ~languages:(x615 : string list) ->
          fun () ->
            let x616 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x616 "language" (Ojs.string_to_js x614);
            Ojs.set_prop_ascii x616 "languages"
              (Ojs.list_to_js Ojs.string_to_js x615);
            t_of_js x616
    let cast_from = Obj.magic
  end
module NavigatorID =
  struct
    type t = [ `NavigatorID ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x619 : Ojs.t) -> t_of_js x619
    and t_0_to_js : t_0 -> Ojs.t = fun (x618 : t) -> t_to_js x618
    type tags = [ `NavigatorID ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x622 : Ojs.t) -> intf_of_js __tags_of_js x622
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x620 : __tags intf) -> intf_to_js __tags_to_js x620
    let (get_appCodeName : 'tags this -> string) =
      fun (x624 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x624) "appCodeName")
    let (get_appName : 'tags this -> string) =
      fun (x626 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x626) "appName")
    let (get_appVersion : 'tags this -> string) =
      fun (x628 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x628) "appVersion")
    let (get_platform : 'tags this -> string) =
      fun (x630 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x630) "platform")
    let (get_product : 'tags this -> string) =
      fun (x632 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x632) "product")
    let (get_userAgent : 'tags this -> string) =
      fun (x634 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x634) "userAgent")
    let (create :
      appCodeName:string ->
        appName:string ->
          appVersion:string ->
            platform:string ->
              product:string -> userAgent:string -> unit -> t)
      =
      fun ~appCodeName:(x636 : string) ->
        fun ~appName:(x637 : string) ->
          fun ~appVersion:(x638 : string) ->
            fun ~platform:(x639 : string) ->
              fun ~product:(x640 : string) ->
                fun ~userAgent:(x641 : string) ->
                  fun () ->
                    let x642 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x642 "appCodeName"
                      (Ojs.string_to_js x636);
                    Ojs.set_prop_ascii x642 "appName" (Ojs.string_to_js x637);
                    Ojs.set_prop_ascii x642 "appVersion"
                      (Ojs.string_to_js x638);
                    Ojs.set_prop_ascii x642 "platform"
                      (Ojs.string_to_js x639);
                    Ojs.set_prop_ascii x642 "product" (Ojs.string_to_js x640);
                    Ojs.set_prop_ascii x642 "userAgent"
                      (Ojs.string_to_js x641);
                    t_of_js x642
    let cast_from = Obj.magic
  end
module NavigatorConcurrentHardware =
  struct
    type t = [ `NavigatorConcurrentHardware ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x644 : Ojs.t) -> t_of_js x644
    and t_0_to_js : t_0 -> Ojs.t = fun (x643 : t) -> t_to_js x643
    type tags = [ `NavigatorConcurrentHardware ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x647 : Ojs.t) -> intf_of_js __tags_of_js x647
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x645 : __tags intf) -> intf_to_js __tags_to_js x645
    let (get_hardwareConcurrency : 'tags this -> float) =
      fun (x649 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x649)
             "hardwareConcurrency")
    let (create : hardwareConcurrency:float -> unit -> t) =
      fun ~hardwareConcurrency:(x651 : float) ->
        fun () ->
          let x652 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x652 "hardwareConcurrency"
            (Ojs.float_to_js x651);
          t_of_js x652
    let cast_from = Obj.magic
  end
module MediaEncodingType =
  struct
    type t = [ `L_s165_record  | `L_s206_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x654 : Ojs.t) ->
        let x655 = x654 in
        match Ojs.string_of_js x655 with
        | "record" -> `L_s165_record
        | "webrtc" -> `L_s206_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x653 : [ `L_s165_record  | `L_s206_webrtc ]) ->
        match x653 with
        | `L_s165_record -> Ojs.string_to_js "record"
        | `L_s206_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x657 : Ojs.t) -> t_of_js x657
    and t_0_to_js : t_0 -> Ojs.t = fun (x656 : t) -> t_to_js x656
  end
module TransferFunction =
  struct
    type t = [ `L_s151_pq  | `L_s183_srgb  | `L_s86_hlg ]
    let rec t_of_js : Ojs.t -> t =
      fun (x659 : Ojs.t) ->
        let x660 = x659 in
        match Ojs.string_of_js x660 with
        | "pq" -> `L_s151_pq
        | "srgb" -> `L_s183_srgb
        | "hlg" -> `L_s86_hlg
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x658 : [ `L_s151_pq  | `L_s183_srgb  | `L_s86_hlg ]) ->
        match x658 with
        | `L_s151_pq -> Ojs.string_to_js "pq"
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
        | `L_s86_hlg -> Ojs.string_to_js "hlg"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x662 : Ojs.t) -> t_of_js x662
    and t_0_to_js : t_0 -> Ojs.t = fun (x661 : t) -> t_to_js x661
  end
module HdrMetadataType =
  struct
    type t =
      [ `L_s179_smpteSt2086  | `L_s180_smpteSt2094_10 
      | `L_s181_smpteSt2094_40 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x664 : Ojs.t) ->
        let x665 = x664 in
        match Ojs.string_of_js x665 with
        | "smpteSt2086" -> `L_s179_smpteSt2086
        | "smpteSt2094-10" -> `L_s180_smpteSt2094_10
        | "smpteSt2094-40" -> `L_s181_smpteSt2094_40
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x663 :
          [ `L_s179_smpteSt2086  | `L_s180_smpteSt2094_10 
          | `L_s181_smpteSt2094_40 ])
        ->
        match x663 with
        | `L_s179_smpteSt2086 -> Ojs.string_to_js "smpteSt2086"
        | `L_s180_smpteSt2094_10 -> Ojs.string_to_js "smpteSt2094-10"
        | `L_s181_smpteSt2094_40 -> Ojs.string_to_js "smpteSt2094-40"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x667 : Ojs.t) -> t_of_js x667
    and t_0_to_js : t_0 -> Ojs.t = fun (x666 : t) -> t_to_js x666
  end
module ColorGamut =
  struct
    type t = [ `L_s144_p3  | `L_s164_rec2020  | `L_s183_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x669 : Ojs.t) ->
        let x670 = x669 in
        match Ojs.string_of_js x670 with
        | "p3" -> `L_s144_p3
        | "rec2020" -> `L_s164_rec2020
        | "srgb" -> `L_s183_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x668 : [ `L_s144_p3  | `L_s164_rec2020  | `L_s183_srgb ]) ->
        match x668 with
        | `L_s144_p3 -> Ojs.string_to_js "p3"
        | `L_s164_rec2020 -> Ojs.string_to_js "rec2020"
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x672 : Ojs.t) -> t_of_js x672
    and t_0_to_js : t_0 -> Ojs.t = fun (x671 : t) -> t_to_js x671
  end
module VideoConfiguration =
  struct
    type t = [ `VideoConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x674 : Ojs.t) -> t_of_js x674
    and t_0_to_js : t_0 -> Ojs.t = fun (x673 : t) -> t_to_js x673
    type tags = [ `VideoConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x677 : Ojs.t) -> intf_of_js __tags_of_js x677
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x675 : __tags intf) -> intf_to_js __tags_to_js x675
    let (get_bitrate : 'tags this -> float) =
      fun (x679 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x679) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x681 : 'tags this) ->
        fun (x682 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x681) "bitrate"
            (Ojs.float_to_js x682)
    let (get_colorGamut : 'tags this -> ColorGamut.t) =
      fun (x684 : 'tags this) ->
        ColorGamut.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x684) "colorGamut")
    let (set_colorGamut : 'tags this -> ColorGamut.t -> unit) =
      fun (x686 : 'tags this) ->
        fun (x687 : ColorGamut.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x686) "colorGamut"
            (ColorGamut.t_to_js x687)
    let (get_contentType : 'tags this -> string) =
      fun (x689 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x689) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x691 : 'tags this) ->
        fun (x692 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x691) "contentType"
            (Ojs.string_to_js x692)
    let (get_framerate : 'tags this -> float) =
      fun (x694 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x694) "framerate")
    let (set_framerate : 'tags this -> float -> unit) =
      fun (x696 : 'tags this) ->
        fun (x697 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x696) "framerate"
            (Ojs.float_to_js x697)
    let (get_hdrMetadataType : 'tags this -> HdrMetadataType.t) =
      fun (x699 : 'tags this) ->
        HdrMetadataType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x699) "hdrMetadataType")
    let (set_hdrMetadataType : 'tags this -> HdrMetadataType.t -> unit) =
      fun (x701 : 'tags this) ->
        fun (x702 : HdrMetadataType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x701) "hdrMetadataType"
            (HdrMetadataType.t_to_js x702)
    let (get_height : 'tags this -> float) =
      fun (x704 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x704) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x706 : 'tags this) ->
        fun (x707 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x706) "height"
            (Ojs.float_to_js x707)
    let (get_scalabilityMode : 'tags this -> string) =
      fun (x709 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x709) "scalabilityMode")
    let (set_scalabilityMode : 'tags this -> string -> unit) =
      fun (x711 : 'tags this) ->
        fun (x712 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x711) "scalabilityMode"
            (Ojs.string_to_js x712)
    let (get_transferFunction : 'tags this -> TransferFunction.t) =
      fun (x714 : 'tags this) ->
        TransferFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x714) "transferFunction")
    let (set_transferFunction : 'tags this -> TransferFunction.t -> unit) =
      fun (x716 : 'tags this) ->
        fun (x717 : TransferFunction.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x716) "transferFunction"
            (TransferFunction.t_to_js x717)
    let (get_width : 'tags this -> float) =
      fun (x719 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x719) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x721 : 'tags this) ->
        fun (x722 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x721) "width"
            (Ojs.float_to_js x722)
    let (create :
      bitrate:float ->
        colorGamut:ColorGamut.t ->
          contentType:string ->
            framerate:float ->
              hdrMetadataType:HdrMetadataType.t ->
                height:float ->
                  scalabilityMode:string ->
                    transferFunction:TransferFunction.t ->
                      width:float -> unit -> t)
      =
      fun ~bitrate:(x724 : float) ->
        fun ~colorGamut:(x725 : ColorGamut.t) ->
          fun ~contentType:(x726 : string) ->
            fun ~framerate:(x727 : float) ->
              fun ~hdrMetadataType:(x728 : HdrMetadataType.t) ->
                fun ~height:(x729 : float) ->
                  fun ~scalabilityMode:(x730 : string) ->
                    fun ~transferFunction:(x731 : TransferFunction.t) ->
                      fun ~width:(x732 : float) ->
                        fun () ->
                          let x733 = Ojs.empty_obj () in
                          Ojs.set_prop_ascii x733 "bitrate"
                            (Ojs.float_to_js x724);
                          Ojs.set_prop_ascii x733 "colorGamut"
                            (ColorGamut.t_to_js x725);
                          Ojs.set_prop_ascii x733 "contentType"
                            (Ojs.string_to_js x726);
                          Ojs.set_prop_ascii x733 "framerate"
                            (Ojs.float_to_js x727);
                          Ojs.set_prop_ascii x733 "hdrMetadataType"
                            (HdrMetadataType.t_to_js x728);
                          Ojs.set_prop_ascii x733 "height"
                            (Ojs.float_to_js x729);
                          Ojs.set_prop_ascii x733 "scalabilityMode"
                            (Ojs.string_to_js x730);
                          Ojs.set_prop_ascii x733 "transferFunction"
                            (TransferFunction.t_to_js x731);
                          Ojs.set_prop_ascii x733 "width"
                            (Ojs.float_to_js x732);
                          t_of_js x733
    let cast_from = Obj.magic
  end
module AudioConfiguration =
  struct
    type t = [ `AudioConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x735 : Ojs.t) -> t_of_js x735
    and t_0_to_js : t_0 -> Ojs.t = fun (x734 : t) -> t_to_js x734
    type tags = [ `AudioConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x738 : Ojs.t) -> intf_of_js __tags_of_js x738
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x736 : __tags intf) -> intf_to_js __tags_to_js x736
    let (get_bitrate : 'tags this -> float) =
      fun (x740 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x740) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x742 : 'tags this) ->
        fun (x743 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x742) "bitrate"
            (Ojs.float_to_js x743)
    let (get_channels : 'tags this -> string) =
      fun (x745 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x745) "channels")
    let (set_channels : 'tags this -> string -> unit) =
      fun (x747 : 'tags this) ->
        fun (x748 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x747) "channels"
            (Ojs.string_to_js x748)
    let (get_contentType : 'tags this -> string) =
      fun (x750 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x750) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x752 : 'tags this) ->
        fun (x753 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x752) "contentType"
            (Ojs.string_to_js x753)
    let (get_samplerate : 'tags this -> float) =
      fun (x755 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x755) "samplerate")
    let (set_samplerate : 'tags this -> float -> unit) =
      fun (x757 : 'tags this) ->
        fun (x758 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x757) "samplerate"
            (Ojs.float_to_js x758)
    let (get_spatialRendering : 'tags this -> bool) =
      fun (x760 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x760) "spatialRendering")
    let (set_spatialRendering : 'tags this -> bool -> unit) =
      fun (x762 : 'tags this) ->
        fun (x763 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x762) "spatialRendering"
            (Ojs.bool_to_js x763)
    let (create :
      bitrate:float ->
        channels:string ->
          contentType:string ->
            samplerate:float -> spatialRendering:bool -> unit -> t)
      =
      fun ~bitrate:(x765 : float) ->
        fun ~channels:(x766 : string) ->
          fun ~contentType:(x767 : string) ->
            fun ~samplerate:(x768 : float) ->
              fun ~spatialRendering:(x769 : bool) ->
                fun () ->
                  let x770 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x770 "bitrate" (Ojs.float_to_js x765);
                  Ojs.set_prop_ascii x770 "channels" (Ojs.string_to_js x766);
                  Ojs.set_prop_ascii x770 "contentType"
                    (Ojs.string_to_js x767);
                  Ojs.set_prop_ascii x770 "samplerate" (Ojs.float_to_js x768);
                  Ojs.set_prop_ascii x770 "spatialRendering"
                    (Ojs.bool_to_js x769);
                  t_of_js x770
    let cast_from = Obj.magic
  end
module MediaConfiguration =
  struct
    type t = [ `MediaConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x772 : Ojs.t) -> t_of_js x772
    and t_0_to_js : t_0 -> Ojs.t = fun (x771 : t) -> t_to_js x771
    type tags = [ `MediaConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x775 : Ojs.t) -> intf_of_js __tags_of_js x775
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x773 : __tags intf) -> intf_to_js __tags_to_js x773
    let (get_audio : 'tags this -> AudioConfiguration.t) =
      fun (x777 : 'tags this) ->
        AudioConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x777) "audio")
    let (set_audio : 'tags this -> AudioConfiguration.t -> unit) =
      fun (x779 : 'tags this) ->
        fun (x780 : AudioConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x779) "audio"
            (AudioConfiguration.t_to_js x780)
    let (get_video : 'tags this -> VideoConfiguration.t) =
      fun (x782 : 'tags this) ->
        VideoConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x782) "video")
    let (set_video : 'tags this -> VideoConfiguration.t -> unit) =
      fun (x784 : 'tags this) ->
        fun (x785 : VideoConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x784) "video"
            (VideoConfiguration.t_to_js x785)
    let (create :
      audio:AudioConfiguration.t -> video:VideoConfiguration.t -> unit -> t)
      =
      fun ~audio:(x787 : AudioConfiguration.t) ->
        fun ~video:(x788 : VideoConfiguration.t) ->
          fun () ->
            let x789 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x789 "audio" (AudioConfiguration.t_to_js x787);
            Ojs.set_prop_ascii x789 "video" (VideoConfiguration.t_to_js x788);
            t_of_js x789
    let cast_from = Obj.magic
  end
module MediaEncodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaEncodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x791 : Ojs.t) -> t_of_js x791
    and t_0_to_js : t_0 -> Ojs.t = fun (x790 : t) -> t_to_js x790
    type tags = [ `MediaConfiguration  | `MediaEncodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x794 : Ojs.t) -> intf_of_js __tags_of_js x794
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x792 : __tags intf) -> intf_to_js __tags_to_js x792
    let (get_type : 'tags this -> MediaEncodingType.t) =
      fun (x796 : 'tags this) ->
        MediaEncodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x796) "type")
    let (set_type : 'tags this -> MediaEncodingType.t -> unit) =
      fun (x798 : 'tags this) ->
        fun (x799 : MediaEncodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x798) "type"
            (MediaEncodingType.t_to_js x799)
    let (create : type_:MediaEncodingType.t -> unit -> t) =
      fun ~type_:(x801 : MediaEncodingType.t) ->
        fun () ->
          let x802 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x802 "type" (MediaEncodingType.t_to_js x801);
          t_of_js x802
    let cast_from = Obj.magic
  end
module MediaCapabilitiesInfo =
  struct
    type t = [ `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x804 : Ojs.t) -> t_of_js x804
    and t_0_to_js : t_0 -> Ojs.t = fun (x803 : t) -> t_to_js x803
    type tags = [ `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x807 : Ojs.t) -> intf_of_js __tags_of_js x807
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x805 : __tags intf) -> intf_to_js __tags_to_js x805
    let (get_powerEfficient : 'tags this -> bool) =
      fun (x809 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x809) "powerEfficient")
    let (set_powerEfficient : 'tags this -> bool -> unit) =
      fun (x811 : 'tags this) ->
        fun (x812 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x811) "powerEfficient"
            (Ojs.bool_to_js x812)
    let (get_smooth : 'tags this -> bool) =
      fun (x814 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x814) "smooth")
    let (set_smooth : 'tags this -> bool -> unit) =
      fun (x816 : 'tags this) ->
        fun (x817 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x816) "smooth"
            (Ojs.bool_to_js x817)
    let (get_supported : 'tags this -> bool) =
      fun (x819 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x819) "supported")
    let (set_supported : 'tags this -> bool -> unit) =
      fun (x821 : 'tags this) ->
        fun (x822 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x821) "supported"
            (Ojs.bool_to_js x822)
    let (create :
      powerEfficient:bool -> smooth:bool -> supported:bool -> unit -> t) =
      fun ~powerEfficient:(x824 : bool) ->
        fun ~smooth:(x825 : bool) ->
          fun ~supported:(x826 : bool) ->
            fun () ->
              let x827 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x827 "powerEfficient" (Ojs.bool_to_js x824);
              Ojs.set_prop_ascii x827 "smooth" (Ojs.bool_to_js x825);
              Ojs.set_prop_ascii x827 "supported" (Ojs.bool_to_js x826);
              t_of_js x827
    let cast_from = Obj.magic
  end
module MediaCapabilitiesEncodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x829 : Ojs.t) -> t_of_js x829
    and t_0_to_js : t_0 -> Ojs.t = fun (x828 : t) -> t_to_js x828
    type tags = [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x832 : Ojs.t) -> intf_of_js __tags_of_js x832
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x830 : __tags intf) -> intf_to_js __tags_to_js x830
    let (get_configuration : 'tags this -> MediaEncodingConfiguration.t) =
      fun (x834 : 'tags this) ->
        MediaEncodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x834) "configuration")
    let (set_configuration :
      'tags this -> MediaEncodingConfiguration.t -> unit) =
      fun (x836 : 'tags this) ->
        fun (x837 : MediaEncodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x836) "configuration"
            (MediaEncodingConfiguration.t_to_js x837)
    let (create : configuration:MediaEncodingConfiguration.t -> unit -> t) =
      fun ~configuration:(x839 : MediaEncodingConfiguration.t) ->
        fun () ->
          let x840 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x840 "configuration"
            (MediaEncodingConfiguration.t_to_js x839);
          t_of_js x840
    let cast_from = Obj.magic
  end
module MediaDecodingType =
  struct
    type t = [ `L_s111_media_source  | `L_s206_webrtc  | `L_s73_file ]
    let rec t_of_js : Ojs.t -> t =
      fun (x842 : Ojs.t) ->
        let x843 = x842 in
        match Ojs.string_of_js x843 with
        | "media-source" -> `L_s111_media_source
        | "webrtc" -> `L_s206_webrtc
        | "file" -> `L_s73_file
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x841 : [ `L_s111_media_source  | `L_s206_webrtc  | `L_s73_file ])
        ->
        match x841 with
        | `L_s111_media_source -> Ojs.string_to_js "media-source"
        | `L_s206_webrtc -> Ojs.string_to_js "webrtc"
        | `L_s73_file -> Ojs.string_to_js "file"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x845 : Ojs.t) -> t_of_js x845
    and t_0_to_js : t_0 -> Ojs.t = fun (x844 : t) -> t_to_js x844
  end
module MediaDecodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaDecodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x847 : Ojs.t) -> t_of_js x847
    and t_0_to_js : t_0 -> Ojs.t = fun (x846 : t) -> t_to_js x846
    type tags = [ `MediaConfiguration  | `MediaDecodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x850 : Ojs.t) -> intf_of_js __tags_of_js x850
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x848 : __tags intf) -> intf_to_js __tags_to_js x848
    let (get_type : 'tags this -> MediaDecodingType.t) =
      fun (x852 : 'tags this) ->
        MediaDecodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x852) "type")
    let (set_type : 'tags this -> MediaDecodingType.t -> unit) =
      fun (x854 : 'tags this) ->
        fun (x855 : MediaDecodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x854) "type"
            (MediaDecodingType.t_to_js x855)
    let (create : type_:MediaDecodingType.t -> unit -> t) =
      fun ~type_:(x857 : MediaDecodingType.t) ->
        fun () ->
          let x858 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x858 "type" (MediaDecodingType.t_to_js x857);
          t_of_js x858
    let cast_from = Obj.magic
  end
module MediaCapabilitiesDecodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x860 : Ojs.t) -> t_of_js x860
    and t_0_to_js : t_0 -> Ojs.t = fun (x859 : t) -> t_to_js x859
    type tags = [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x863 : Ojs.t) -> intf_of_js __tags_of_js x863
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x861 : __tags intf) -> intf_to_js __tags_to_js x861
    let (get_configuration : 'tags this -> MediaDecodingConfiguration.t) =
      fun (x865 : 'tags this) ->
        MediaDecodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x865) "configuration")
    let (set_configuration :
      'tags this -> MediaDecodingConfiguration.t -> unit) =
      fun (x867 : 'tags this) ->
        fun (x868 : MediaDecodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x867) "configuration"
            (MediaDecodingConfiguration.t_to_js x868)
    let (create : configuration:MediaDecodingConfiguration.t -> unit -> t) =
      fun ~configuration:(x870 : MediaDecodingConfiguration.t) ->
        fun () ->
          let x871 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x871 "configuration"
            (MediaDecodingConfiguration.t_to_js x870);
          t_of_js x871
    let cast_from = Obj.magic
  end
module MediaCapabilities =
  struct
    type t = [ `MediaCapabilities ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x873 : Ojs.t) -> t_of_js x873
    and t_0_to_js : t_0 -> Ojs.t = fun (x872 : t) -> t_to_js x872
    type tags = [ `MediaCapabilities ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x876 : Ojs.t) -> intf_of_js __tags_of_js x876
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x874 : __tags intf) -> intf_to_js __tags_to_js x874
    let (decodingInfo :
      'tags this ->
        configuration:MediaDecodingConfiguration.t ->
          MediaCapabilitiesDecodingInfo.t Promise.t_1)
      =
      fun (x879 : 'tags this) ->
        fun ~configuration:(x878 : MediaDecodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesDecodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x879) "decodingInfo"
               [|(MediaDecodingConfiguration.t_to_js x878)|])
    let (encodingInfo :
      'tags this ->
        configuration:MediaEncodingConfiguration.t ->
          MediaCapabilitiesEncodingInfo.t Promise.t_1)
      =
      fun (x883 : 'tags this) ->
        fun ~configuration:(x882 : MediaEncodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesEncodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x883) "encodingInfo"
               [|(MediaEncodingConfiguration.t_to_js x882)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MediaCapabilities") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
             [||])
  end
module NavigatorStatic =
  struct
    let (mediaCapabilities : unit -> MediaCapabilities.t) =
      fun () ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "navigator")
             "mediaCapabilities")
  end
module LocationStatic =
  struct
    let (hash : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hash")
    let (host : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "host")
    let (hostname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hostname")
    let (href : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "href")
    let (toString : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "location") "toString"
             [||])
    let (origin : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "origin")
    let (pathname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "pathname")
    let (port : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "port")
    let (protocol : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "protocol")
    let (search : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "search")
  end
module IDBVersionChangeEventInit =
  struct
    type t = [ `EventInit  | `IDBVersionChangeEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x887 : Ojs.t) -> t_of_js x887
    and t_0_to_js : t_0 -> Ojs.t = fun (x886 : t) -> t_to_js x886
    type tags = [ `EventInit  | `IDBVersionChangeEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x890 : Ojs.t) -> intf_of_js __tags_of_js x890
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x888 : __tags intf) -> intf_to_js __tags_to_js x888
    let (get_newVersion : 'tags this -> float or_null) =
      fun (x892 : 'tags this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x892) "newVersion")
    let (set_newVersion : 'tags this -> float or_null -> unit) =
      fun (x895 : 'tags this) ->
        fun (x896 : float or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x895) "newVersion"
            (or_null_to_js Ojs.float_to_js x896)
    let (get_oldVersion : 'tags this -> float) =
      fun (x899 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x899) "oldVersion")
    let (set_oldVersion : 'tags this -> float -> unit) =
      fun (x901 : 'tags this) ->
        fun (x902 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x901) "oldVersion"
            (Ojs.float_to_js x902)
    let (create : ?newVersion:float -> oldVersion:float -> unit -> t) =
      fun ?newVersion:(x904 : float option) ->
        fun ~oldVersion:(x905 : float) ->
          fun () ->
            let x906 = Ojs.empty_obj () in
            (match x904 with
             | Some x907 ->
                 Ojs.set_prop_ascii x906 "newVersion" (Ojs.float_to_js x907)
             | None -> ());
            Ojs.set_prop_ascii x906 "oldVersion" (Ojs.float_to_js x905);
            t_of_js x906
    let cast_from = Obj.magic
  end
module IDBVersionChangeEvent =
  struct
    type t = [ `Event  | `IDBVersionChangeEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x909 : Ojs.t) -> t_of_js x909
    and t_0_to_js : t_0 -> Ojs.t = fun (x908 : t) -> t_to_js x908
    type tags = [ `Event  | `IDBVersionChangeEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x912 : Ojs.t) -> intf_of_js __tags_of_js x912
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x910 : __tags intf) -> intf_to_js __tags_to_js x910
    let (get_newVersion : 'tags this -> float or_null) =
      fun (x914 : 'tags this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x914) "newVersion")
    let (get_oldVersion : 'tags this -> float) =
      fun (x917 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x917) "oldVersion")
    let (create : ?newVersion:float -> oldVersion:float -> unit -> t) =
      fun ?newVersion:(x919 : float option) ->
        fun ~oldVersion:(x920 : float) ->
          fun () ->
            let x921 = Ojs.empty_obj () in
            (match x919 with
             | Some x922 ->
                 Ojs.set_prop_ascii x921 "newVersion" (Ojs.float_to_js x922)
             | None -> ());
            Ojs.set_prop_ascii x921 "oldVersion" (Ojs.float_to_js x920);
            t_of_js x921
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t)
      =
      fun ~type_:(x923 : string) ->
        fun ?eventInitDict:(x924 : IDBVersionChangeEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
                 (let x925 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x925 "push" [|(Ojs.string_to_js x923)|]);
                  (match x924 with
                   | Some x926 ->
                       ignore
                         (Ojs.call x925 "push"
                            [|(IDBVersionChangeEventInit.t_to_js x926)|])
                   | None -> ());
                  x925))
  end
module IDBObjectStoreParameters =
  struct
    type t = [ `IDBObjectStoreParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x928 : Ojs.t) -> t_of_js x928
    and t_0_to_js : t_0 -> Ojs.t = fun (x927 : t) -> t_to_js x927
    type tags = [ `IDBObjectStoreParameters ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x931 : Ojs.t) -> intf_of_js __tags_of_js x931
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x929 : __tags intf) -> intf_to_js __tags_to_js x929
    let (get_autoIncrement : 'tags this -> bool) =
      fun (x933 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x933) "autoIncrement")
    let (set_autoIncrement : 'tags this -> bool -> unit) =
      fun (x935 : 'tags this) ->
        fun (x936 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x935) "autoIncrement"
            (Ojs.bool_to_js x936)
    let (get_keyPath : 'tags this -> string list or_string or_null) =
      fun (x938 : 'tags this) ->
        or_null_of_js
          (fun (x940 : Ojs.t) ->
             or_string_of_js
               (fun (x941 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x941)
               x940)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x938) "keyPath")
    let (set_keyPath : 'tags this -> string list or_string or_null -> unit) =
      fun (x943 : 'tags this) ->
        fun (x944 : string list or_string or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x943) "keyPath"
            (or_null_to_js
               (fun (x945 : string list or_string) ->
                  or_string_to_js
                    (fun (x946 : string list) ->
                       Ojs.list_to_js Ojs.string_to_js x946) x945) x944)
    let (create :
      autoIncrement:bool -> ?keyPath:string list or_string -> unit -> t) =
      fun ~autoIncrement:(x949 : bool) ->
        fun ?keyPath:(x950 : string list or_string option) ->
          fun () ->
            let x951 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x951 "autoIncrement" (Ojs.bool_to_js x949);
            (match x950 with
             | Some x952 ->
                 Ojs.set_prop_ascii x951 "keyPath"
                   (or_string_to_js
                      (fun (x953 : string list) ->
                         Ojs.list_to_js Ojs.string_to_js x953) x952)
             | None -> ());
            t_of_js x951
    let cast_from = Obj.magic
  end
module IDBIndexParameters =
  struct
    type t = [ `IDBIndexParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x956 : Ojs.t) -> t_of_js x956
    and t_0_to_js : t_0 -> Ojs.t = fun (x955 : t) -> t_to_js x955
    type tags = [ `IDBIndexParameters ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x959 : Ojs.t) -> intf_of_js __tags_of_js x959
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x957 : __tags intf) -> intf_to_js __tags_to_js x957
    let (get_multiEntry : 'tags this -> bool) =
      fun (x961 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x961) "multiEntry")
    let (set_multiEntry : 'tags this -> bool -> unit) =
      fun (x963 : 'tags this) ->
        fun (x964 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x963) "multiEntry"
            (Ojs.bool_to_js x964)
    let (get_unique : 'tags this -> bool) =
      fun (x966 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x966) "unique")
    let (set_unique : 'tags this -> bool -> unit) =
      fun (x968 : 'tags this) ->
        fun (x969 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x968) "unique"
            (Ojs.bool_to_js x969)
    let (create : multiEntry:bool -> unique:bool -> unit -> t) =
      fun ~multiEntry:(x971 : bool) ->
        fun ~unique:(x972 : bool) ->
          fun () ->
            let x973 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x973 "multiEntry" (Ojs.bool_to_js x971);
            Ojs.set_prop_ascii x973 "unique" (Ojs.bool_to_js x972);
            t_of_js x973
    let cast_from = Obj.magic
  end
module BufferSource =
  struct
    type t = never
    let rec t_of_js : Ojs.t -> t = fun (x975 : Ojs.t) -> never_of_js x975
    and t_to_js : t -> Ojs.t = fun (x974 : never) -> never_to_js x974
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x977 : Ojs.t) -> t_of_js x977
    and t_0_to_js : t_0 -> Ojs.t = fun (x976 : t) -> t_to_js x976
  end
module IDBValidKey =
  struct
    type t = t list or_string or_number
    let rec t_of_js : Ojs.t -> t =
      fun (x982 : Ojs.t) ->
        or_number_of_js
          (fun (x983 : Ojs.t) ->
             or_string_of_js
               (fun (x984 : Ojs.t) -> Ojs.list_of_js t_of_js x984) x983) x982
    and t_to_js : t -> Ojs.t =
      fun (x978 : t list or_string or_number) ->
        or_number_to_js
          (fun (x979 : t list or_string) ->
             or_string_to_js
               (fun (x980 : t list) -> Ojs.list_to_js t_to_js x980) x979)
          x978
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x987 : Ojs.t) -> t_of_js x987
    and t_0_to_js : t_0 -> Ojs.t = fun (x986 : t) -> t_to_js x986
  end
module IDBTransactionMode =
  struct
    type t =
      [ `L_s161_readonly  | `L_s162_readwrite  | `L_s203_versionchange ]
    let rec t_of_js : Ojs.t -> t =
      fun (x989 : Ojs.t) ->
        let x990 = x989 in
        match Ojs.string_of_js x990 with
        | "readonly" -> `L_s161_readonly
        | "readwrite" -> `L_s162_readwrite
        | "versionchange" -> `L_s203_versionchange
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x988 :
          [ `L_s161_readonly  | `L_s162_readwrite  | `L_s203_versionchange ])
        ->
        match x988 with
        | `L_s161_readonly -> Ojs.string_to_js "readonly"
        | `L_s162_readwrite -> Ojs.string_to_js "readwrite"
        | `L_s203_versionchange -> Ojs.string_to_js "versionchange"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x992 : Ojs.t) -> t_of_js x992
    and t_0_to_js : t_0 -> Ojs.t = fun (x991 : t) -> t_to_js x991
  end
module IDBRequestReadyState =
  struct
    type t = [ `L_s147_pending  | `L_s63_done ]
    let rec t_of_js : Ojs.t -> t =
      fun (x994 : Ojs.t) ->
        let x995 = x994 in
        match Ojs.string_of_js x995 with
        | "pending" -> `L_s147_pending
        | "done" -> `L_s63_done
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x993 : [ `L_s147_pending  | `L_s63_done ]) ->
        match x993 with
        | `L_s147_pending -> Ojs.string_to_js "pending"
        | `L_s63_done -> Ojs.string_to_js "done"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x997 : Ojs.t) -> t_of_js x997
    and t_0_to_js : t_0 -> Ojs.t = fun (x996 : t) -> t_to_js x996
  end
module IDBKeyRange =
  struct
    type t = [ `IDBKeyRange ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x999 : Ojs.t) -> t_of_js x999
    and t_0_to_js : t_0 -> Ojs.t = fun (x998 : t) -> t_to_js x998
    type tags = [ `IDBKeyRange ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1002 : Ojs.t) -> intf_of_js __tags_of_js x1002
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1000 : __tags intf) -> intf_to_js __tags_to_js x1000
    let (get_lower : 'tags this -> any) =
      fun (x1004 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1004) "lower")
    let (get_lowerOpen : 'tags this -> bool) =
      fun (x1006 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1006) "lowerOpen")
    let (get_upper : 'tags this -> any) =
      fun (x1008 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1008) "upper")
    let (get_upperOpen : 'tags this -> bool) =
      fun (x1010 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1010) "upperOpen")
    let (includes : 'tags this -> key:any -> bool) =
      fun (x1013 : 'tags this) ->
        fun ~key:(x1012 : any) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1013) "includes"
               [|(any_to_js x1012)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") [||])
    let (bound :
      lower:any ->
        upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t)
      =
      fun ~lower:(x1015 : any) ->
        fun ~upper:(x1016 : any) ->
          fun ?lowerOpen:(x1017 : bool option) ->
            fun ?upperOpen:(x1018 : bool option) ->
              fun () ->
                t_of_js
                  (let x1022 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
                   Ojs.call (Ojs.get_prop_ascii x1022 "bound") "apply"
                     [|x1022;((let x1019 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1019 "push" [|(any_to_js x1015)|]);
                               ignore
                                 (Ojs.call x1019 "push" [|(any_to_js x1016)|]);
                               (match x1017 with
                                | Some x1021 ->
                                    ignore
                                      (Ojs.call x1019 "push"
                                         [|(Ojs.bool_to_js x1021)|])
                                | None -> ());
                               (match x1018 with
                                | Some x1020 ->
                                    ignore
                                      (Ojs.call x1019 "push"
                                         [|(Ojs.bool_to_js x1020)|])
                                | None -> ());
                               x1019))|])
    let (lowerBound : lower:any -> ?open_:bool -> unit -> t) =
      fun ~lower:(x1023 : any) ->
        fun ?open_:(x1024 : bool option) ->
          fun () ->
            t_of_js
              (let x1027 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1027 "lowerBound") "apply"
                 [|x1027;((let x1025 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1025 "push" [|(any_to_js x1023)|]);
                           (match x1024 with
                            | Some x1026 ->
                                ignore
                                  (Ojs.call x1025 "push"
                                     [|(Ojs.bool_to_js x1026)|])
                            | None -> ());
                           x1025))|])
    let (only : any -> t) =
      fun (x1028 : any) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") "only"
             [|(any_to_js x1028)|])
    let (upperBound : upper:any -> ?open_:bool -> unit -> t) =
      fun ~upper:(x1029 : any) ->
        fun ?open_:(x1030 : bool option) ->
          fun () ->
            t_of_js
              (let x1033 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x1033 "upperBound") "apply"
                 [|x1033;((let x1031 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1031 "push" [|(any_to_js x1029)|]);
                           (match x1030 with
                            | Some x1032 ->
                                ignore
                                  (Ojs.call x1031 "push"
                                     [|(Ojs.bool_to_js x1032)|])
                            | None -> ());
                           x1031))|])
  end
module IDBCursorDirection =
  struct
    type t =
      [ `L_s121_next  | `L_s122_nextunique  | `L_s153_prev 
      | `L_s154_prevunique ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1035 : Ojs.t) ->
        let x1036 = x1035 in
        match Ojs.string_of_js x1036 with
        | "next" -> `L_s121_next
        | "nextunique" -> `L_s122_nextunique
        | "prev" -> `L_s153_prev
        | "prevunique" -> `L_s154_prevunique
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1034 :
          [ `L_s121_next  | `L_s122_nextunique  | `L_s153_prev 
          | `L_s154_prevunique ])
        ->
        match x1034 with
        | `L_s121_next -> Ojs.string_to_js "next"
        | `L_s122_nextunique -> Ojs.string_to_js "nextunique"
        | `L_s153_prev -> Ojs.string_to_js "prev"
        | `L_s154_prevunique -> Ojs.string_to_js "prevunique"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1038 : Ojs.t) -> t_of_js x1038
    and t_0_to_js : t_0 -> Ojs.t = fun (x1037 : t) -> t_to_js x1037
  end
module DOMStringList =
  struct
    type t =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1040 : Ojs.t) -> t_of_js x1040
    and t_0_to_js : t_0 -> Ojs.t = fun (x1039 : t) -> t_to_js x1039
    type tags =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1043 : Ojs.t) -> intf_of_js __tags_of_js x1043
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1041 : __tags intf) -> intf_to_js __tags_to_js x1041
    let (get_length : 'tags this -> float) =
      fun (x1045 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1045) "length")
    let (contains : 'tags this -> string:string -> bool) =
      fun (x1048 : 'tags this) ->
        fun ~string:(x1047 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x1048) "contains"
               [|(Ojs.string_to_js x1047)|])
    let (item : 'tags this -> index:float -> string or_null) =
      fun (x1051 : 'tags this) ->
        fun ~index:(x1050 : float) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x1051) "item"
               [|(Ojs.float_to_js x1050)|])
    let (get : 'tags this -> float -> string) =
      fun (x1054 : 'tags this) ->
        fun (x1056 : float) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x1054)
               (Ojs.float_to_js x1056))
    let (set : 'tags this -> float -> string -> unit) =
      fun (x1057 : 'tags this) ->
        fun (x1059 : float) ->
          fun (x1060 : string) ->
            Ojs.set_prop (this_to_js Obj.magic x1057) (Ojs.float_to_js x1059)
              (Ojs.string_to_js x1060)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMStringList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "DOMStringList") [||])
  end
module DOMException =
  struct
    type t = [ `DOMException ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1062 : Ojs.t) -> t_of_js x1062
    and t_0_to_js : t_0 -> Ojs.t = fun (x1061 : t) -> t_to_js x1061
    type tags = [ `DOMException ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1065 : Ojs.t) -> intf_of_js __tags_of_js x1065
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1063 : __tags intf) -> intf_to_js __tags_to_js x1063
    let (get_code : 'tags this -> float) =
      fun (x1067 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1067) "code")
    let (get_message : 'tags this -> string) =
      fun (x1069 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1069) "message")
    let (get_name : 'tags this -> string) =
      fun (x1071 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1071) "name")
    let (get_ABORT_ERR : 'tags this -> float) =
      fun (x1073 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1073) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : 'tags this -> float) =
      fun (x1075 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1075) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : 'tags this -> float) =
      fun (x1077 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1077)
             "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : 'tags this -> float) =
      fun (x1079 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1079)
             "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : 'tags this -> float) =
      fun (x1081 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1081) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : 'tags this -> float) =
      fun (x1083 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1083)
             "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : 'tags this -> float) =
      fun (x1085 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1085)
             "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : 'tags this -> float) =
      fun (x1087 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1087)
             "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : 'tags this -> float) =
      fun (x1089 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1089)
             "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : 'tags this -> float) =
      fun (x1091 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1091)
             "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : 'tags this -> float) =
      fun (x1093 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1093)
             "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : 'tags this -> float) =
      fun (x1095 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1095) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : 'tags this -> float) =
      fun (x1097 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1097) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : 'tags this -> float) =
      fun (x1099 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1099) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : 'tags this -> float) =
      fun (x1101 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1101)
             "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : 'tags this -> float) =
      fun (x1103 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1103)
             "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float) =
      fun (x1105 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1105)
             "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : 'tags this -> float) =
      fun (x1107 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1107)
             "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : 'tags this -> float) =
      fun (x1109 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1109) "SECURITY_ERR")
    let (get_SYNTAX_ERR : 'tags this -> float) =
      fun (x1111 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1111) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : 'tags this -> float) =
      fun (x1113 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1113) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : 'tags this -> float) =
      fun (x1115 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1115)
             "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : 'tags this -> float) =
      fun (x1117 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1117) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : 'tags this -> float) =
      fun (x1119 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1119) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : 'tags this -> float) =
      fun (x1121 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1121)
             "WRONG_DOCUMENT_ERR")
    let (create :
      code:float ->
        message:string ->
          name:string ->
            abort_err:float ->
              data_clone_err:float ->
                domstring_size_err:float ->
                  hierarchy_request_err:float ->
                    index_size_err:float ->
                      inuse_attribute_err:float ->
                        invalid_access_err:float ->
                          invalid_character_err:float ->
                            invalid_modification_err:float ->
                              invalid_node_type_err:float ->
                                invalid_state_err:float ->
                                  namespace_err:float ->
                                    network_err:float ->
                                      not_found_err:float ->
                                        not_supported_err:float ->
                                          no_data_allowed_err:float ->
                                            no_modification_allowed_err:float
                                              ->
                                              quota_exceeded_err:float ->
                                                security_err:float ->
                                                  syntax_err:float ->
                                                    timeout_err:float ->
                                                      type_mismatch_err:float
                                                        ->
                                                        url_mismatch_err:float
                                                          ->
                                                          validation_err:float
                                                            ->
                                                            wrong_document_err:float
                                                              -> unit -> t)
      =
      fun ~code:(x1123 : float) ->
        fun ~message:(x1124 : string) ->
          fun ~name:(x1125 : string) ->
            fun ~abort_err:(x1126 : float) ->
              fun ~data_clone_err:(x1127 : float) ->
                fun ~domstring_size_err:(x1128 : float) ->
                  fun ~hierarchy_request_err:(x1129 : float) ->
                    fun ~index_size_err:(x1130 : float) ->
                      fun ~inuse_attribute_err:(x1131 : float) ->
                        fun ~invalid_access_err:(x1132 : float) ->
                          fun ~invalid_character_err:(x1133 : float) ->
                            fun ~invalid_modification_err:(x1134 : float) ->
                              fun ~invalid_node_type_err:(x1135 : float) ->
                                fun ~invalid_state_err:(x1136 : float) ->
                                  fun ~namespace_err:(x1137 : float) ->
                                    fun ~network_err:(x1138 : float) ->
                                      fun ~not_found_err:(x1139 : float) ->
                                        fun
                                          ~not_supported_err:(x1140 : float)
                                          ->
                                          fun
                                            ~no_data_allowed_err:(x1141 :
                                                                   float)
                                            ->
                                            fun
                                              ~no_modification_allowed_err:
                                              (x1142 : float) ->
                                              fun
                                                ~quota_exceeded_err:(x1143 :
                                                                    float)
                                                ->
                                                fun
                                                  ~security_err:(x1144 :
                                                                  float)
                                                  ->
                                                  fun
                                                    ~syntax_err:(x1145 :
                                                                  float)
                                                    ->
                                                    fun
                                                      ~timeout_err:(x1146 :
                                                                    float)
                                                      ->
                                                      fun
                                                        ~type_mismatch_err:
                                                        (x1147 : float) ->
                                                        fun
                                                          ~url_mismatch_err:
                                                          (x1148 : float) ->
                                                          fun
                                                            ~validation_err:
                                                            (x1149 : 
                                                              float)
                                                            ->
                                                            fun
                                                              ~wrong_document_err:
                                                              (x1150 : 
                                                                float)
                                                              ->
                                                              fun () ->
                                                                let x1151 =
                                                                  Ojs.empty_obj
                                                                    () in
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "code"
                                                                  (Ojs.float_to_js
                                                                    x1123);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "message"
                                                                  (Ojs.string_to_js
                                                                    x1124);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "name"
                                                                  (Ojs.string_to_js
                                                                    x1125);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "ABORT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1126);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "DATA_CLONE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1127);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "DOMSTRING_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1128);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "HIERARCHY_REQUEST_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1129);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "INDEX_SIZE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1130);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "INUSE_ATTRIBUTE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1131);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "INVALID_ACCESS_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1132);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "INVALID_CHARACTER_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1133);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "INVALID_MODIFICATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1134);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "INVALID_NODE_TYPE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1135);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "INVALID_STATE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1136);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "NAMESPACE_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1137);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "NETWORK_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1138);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "NOT_FOUND_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1139);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "NOT_SUPPORTED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1140);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "NO_DATA_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1141);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "NO_MODIFICATION_ALLOWED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1142);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "QUOTA_EXCEEDED_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1143);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "SECURITY_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1144);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "SYNTAX_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1145);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "TIMEOUT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1146);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "TYPE_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1147);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "URL_MISMATCH_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1148);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "VALIDATION_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1149);
                                                                Ojs.set_prop_ascii
                                                                  x1151
                                                                  "WRONG_DOCUMENT_ERR"
                                                                  (Ojs.float_to_js
                                                                    x1150);
                                                                t_of_js x1151
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "prototype")
    let (create' : ?message:string -> ?name:string -> unit -> t) =
      fun ?message:(x1152 : string option) ->
        fun ?name:(x1153 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMException")
                 (let x1154 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1152 with
                   | Some x1156 ->
                       ignore
                         (Ojs.call x1154 "push" [|(Ojs.string_to_js x1156)|])
                   | None -> ());
                  (match x1153 with
                   | Some x1155 ->
                       ignore
                         (Ojs.call x1154 "push" [|(Ojs.string_to_js x1155)|])
                   | None -> ());
                  x1154))
    let (abort_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "ABORT_ERR")
    let (data_clone_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DATA_CLONE_ERR")
    let (domstring_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DOMSTRING_SIZE_ERR")
    let (hierarchy_request_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "HIERARCHY_REQUEST_ERR")
    let (index_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INDEX_SIZE_ERR")
    let (inuse_attribute_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INUSE_ATTRIBUTE_ERR")
    let (invalid_access_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_ACCESS_ERR")
    let (invalid_character_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_CHARACTER_ERR")
    let (invalid_modification_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_MODIFICATION_ERR")
    let (invalid_node_type_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_NODE_TYPE_ERR")
    let (invalid_state_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_STATE_ERR")
    let (namespace_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NAMESPACE_ERR")
    let (network_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NETWORK_ERR")
    let (not_found_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_FOUND_ERR")
    let (not_supported_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_SUPPORTED_ERR")
    let (no_data_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_DATA_ALLOWED_ERR")
    let (no_modification_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_MODIFICATION_ALLOWED_ERR")
    let (quota_exceeded_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "QUOTA_EXCEEDED_ERR")
    let (security_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SECURITY_ERR")
    let (syntax_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SYNTAX_ERR")
    let (timeout_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TIMEOUT_ERR")
    let (type_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TYPE_MISMATCH_ERR")
    let (url_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "URL_MISMATCH_ERR")
    let (validation_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "VALIDATION_ERR")
    let (wrong_document_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "WRONG_DOCUMENT_ERR")
  end
module rec
  IDBCursor:sig
              type t = [ `IDBCursor ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `IDBCursor ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `IDBCursor ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_direction : 'tags this -> IDBCursorDirection.t
              val get_key : 'tags this -> IDBValidKey.t
              val get_primaryKey : 'tags this -> IDBValidKey.t
              val get_request : 'tags this -> IDBRequest.t_0
              val get_source :
                'tags this -> (IDBIndex.t, IDBObjectStore.t) union2
              val advance : 'tags this -> count:float -> unit
              val continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit
              val continuePrimaryKey :
                'tags this ->
                  key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit
              val delete : 'tags this -> never or_undefined IDBRequest.t
              val update :
                'tags this -> value:any -> IDBValidKey.t IDBRequest.t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `IDBCursor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1158 : Ojs.t) -> t_of_js x1158
    and t_0_to_js : t_0 -> Ojs.t = fun (x1157 : t) -> t_to_js x1157
    type tags = [ `IDBCursor ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1161 : Ojs.t) -> intf_of_js __tags_of_js x1161
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1159 : __tags intf) -> intf_to_js __tags_to_js x1159
    let (get_direction : 'tags this -> IDBCursorDirection.t) =
      fun (x1163 : 'tags this) ->
        IDBCursorDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1163) "direction")
    let (get_key : 'tags this -> IDBValidKey.t) =
      fun (x1165 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1165) "key")
    let (get_primaryKey : 'tags this -> IDBValidKey.t) =
      fun (x1167 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1167) "primaryKey")
    let (get_request : 'tags this -> IDBRequest.t_0) =
      fun (x1169 : 'tags this) ->
        IDBRequest.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1169) "request")
    let (get_source : 'tags this -> (IDBIndex.t, IDBObjectStore.t) union2) =
      fun (x1171 : 'tags this) ->
        union2_of_js IDBIndex.t_of_js IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1171) "source")
    let (advance : 'tags this -> count:float -> unit) =
      fun (x1176 : 'tags this) ->
        fun ~count:(x1175 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x1176) "advance"
               [|(Ojs.float_to_js x1175)|])
    let (continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit) =
      fun (x1181 : 'tags this) ->
        fun ?key:(x1178 : IDBValidKey.t option) ->
          fun () ->
            ignore
              (let x1183 = this_to_js Obj.magic x1181 in
               Ojs.call (Ojs.get_prop_ascii x1183 "continue") "apply"
                 [|x1183;((let x1179 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1178 with
                            | Some x1180 ->
                                ignore
                                  (Ojs.call x1179 "push"
                                     [|(IDBValidKey.t_to_js x1180)|])
                            | None -> ());
                           x1179))|])
    let (continuePrimaryKey :
      'tags this -> key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit) =
      fun (x1186 : 'tags this) ->
        fun ~key:(x1184 : IDBValidKey.t) ->
          fun ~primaryKey:(x1185 : IDBValidKey.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x1186) "continuePrimaryKey"
                 [|(IDBValidKey.t_to_js x1184);(IDBValidKey.t_to_js x1185)|])
    let (delete : 'tags this -> never or_undefined IDBRequest.t) =
      fun (x1188 : 'tags this) ->
        IDBRequest.t_of_js
          (fun (x1190 : Ojs.t) -> or_undefined_of_js never_of_js x1190)
          (Ojs.call (this_to_js Obj.magic x1188) "delete" [||])
    let (update : 'tags this -> value:any -> IDBValidKey.t IDBRequest.t) =
      fun (x1193 : 'tags this) ->
        fun ~value:(x1192 : any) ->
          IDBRequest.t_of_js IDBValidKey.t_of_js
            (Ojs.call (this_to_js Obj.magic x1193) "update"
               [|(any_to_js x1192)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBCursor")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursor") [||])
  end
 and
  IDBCursorWithValue:sig
                       type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `IDBCursorWithValue ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_value : 'tags this -> any
                       val create : value:any -> unit -> t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create' : unit -> t
                     end =
  struct
    type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1197 : Ojs.t) -> t_of_js x1197
    and t_0_to_js : t_0 -> Ojs.t = fun (x1196 : t) -> t_to_js x1196
    type tags = [ `IDBCursor  | `IDBCursorWithValue ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursorWithValue ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1200 : Ojs.t) -> intf_of_js __tags_of_js x1200
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1198 : __tags intf) -> intf_to_js __tags_to_js x1198
    let (get_value : 'tags this -> any) =
      fun (x1202 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1202) "value")
    let (create : value:any -> unit -> t) =
      fun ~value:(x1204 : any) ->
        fun () ->
          let x1205 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x1205 "value" (any_to_js x1204); t_of_js x1205
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue")
             [||])
  end and
       IDBDatabase:sig
                     type t = [ `EventTarget  | `IDBDatabase ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `EventTarget  | `IDBDatabase ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `EventTarget  | `IDBDatabase ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `IDBDatabase ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_name : 'tags this -> string
                     val get_objectStoreNames : 'tags this -> DOMStringList.t
                     val get_onabort :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onabort :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_onclose :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onclose :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_onerror :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onerror :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any)
                           or_null
                     val set_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any)
                           or_null -> unit
                     val get_version : 'tags this -> float
                     val close : 'tags this -> unit
                     val createObjectStore :
                       'tags this ->
                         name:string ->
                           ?options:IDBObjectStoreParameters.t ->
                             unit -> IDBObjectStore.t
                     val deleteObjectStore :
                       'tags this -> name:string -> unit
                     val transaction :
                       'tags this ->
                         storeNames:string list or_string ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val transaction' :
                       'tags this ->
                         storeNames:string Iterable.t_1 or_string ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
       struct
         type t = [ `EventTarget  | `IDBDatabase ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x1207 : Ojs.t) -> t_of_js x1207
         and t_0_to_js : t_0 -> Ojs.t = fun (x1206 : t) -> t_to_js x1206
         type tags = [ `EventTarget  | `IDBDatabase ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabase ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x1210 : Ojs.t) -> intf_of_js __tags_of_js x1210
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x1208 : __tags intf) -> intf_to_js __tags_to_js x1208
         let (get_name : 'tags this -> string) =
           fun (x1212 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1212) "name")
         let (get_objectStoreNames : 'tags this -> DOMStringList.t) =
           fun (x1214 : 'tags this) ->
             DOMStringList.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1214)
                  "objectStoreNames")
         let (get_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) or_null) =
           fun (x1216 : 'tags this) ->
             or_null_of_js
               (fun (x1218 : Ojs.t) ->
                  fun ~this:(x1219 : t) ->
                    fun ~ev:(x1220 : Event.t) ->
                      any_of_js
                        (Ojs.apply x1218
                           [|(t_to_js x1219);(Event.t_to_js x1220)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1216) "onabort")
         let (set_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
           fun (x1221 : 'tags this) ->
             fun (x1222 : (this:t -> ev:Event.t -> any) or_null) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1221) "onabort"
                 (or_null_to_js
                    (fun (x1223 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x1224 : Ojs.t) ->
                            fun (x1225 : Ojs.t) ->
                              any_to_js
                                (x1223 ~this:(t_of_js x1224)
                                   ~ev:(Event.t_of_js x1225)))) x1222)
         let (get_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) or_null) =
           fun (x1227 : 'tags this) ->
             or_null_of_js
               (fun (x1229 : Ojs.t) ->
                  fun ~this:(x1230 : t) ->
                    fun ~ev:(x1231 : Event.t) ->
                      any_of_js
                        (Ojs.apply x1229
                           [|(t_to_js x1230);(Event.t_to_js x1231)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1227) "onclose")
         let (set_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
           fun (x1232 : 'tags this) ->
             fun (x1233 : (this:t -> ev:Event.t -> any) or_null) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1232) "onclose"
                 (or_null_to_js
                    (fun (x1234 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x1235 : Ojs.t) ->
                            fun (x1236 : Ojs.t) ->
                              any_to_js
                                (x1234 ~this:(t_of_js x1235)
                                   ~ev:(Event.t_of_js x1236)))) x1233)
         let (get_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) or_null) =
           fun (x1238 : 'tags this) ->
             or_null_of_js
               (fun (x1240 : Ojs.t) ->
                  fun ~this:(x1241 : t) ->
                    fun ~ev:(x1242 : Event.t) ->
                      any_of_js
                        (Ojs.apply x1240
                           [|(t_to_js x1241);(Event.t_to_js x1242)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1238) "onerror")
         let (set_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
           fun (x1243 : 'tags this) ->
             fun (x1244 : (this:t -> ev:Event.t -> any) or_null) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1243) "onerror"
                 (or_null_to_js
                    (fun (x1245 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x1246 : Ojs.t) ->
                            fun (x1247 : Ojs.t) ->
                              any_to_js
                                (x1245 ~this:(t_of_js x1246)
                                   ~ev:(Event.t_of_js x1247)))) x1244)
         let (get_onversionchange :
           'tags this ->
             (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null)
           =
           fun (x1249 : 'tags this) ->
             or_null_of_js
               (fun (x1251 : Ojs.t) ->
                  fun ~this:(x1252 : t) ->
                    fun ~ev:(x1253 : IDBVersionChangeEvent.t) ->
                      any_of_js
                        (Ojs.apply x1251
                           [|(t_to_js x1252);(IDBVersionChangeEvent.t_to_js
                                                x1253)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1249)
                  "onversionchange")
         let (set_onversionchange :
           'tags this ->
             (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null -> unit)
           =
           fun (x1254 : 'tags this) ->
             fun
               (x1255 :
                 (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null)
               ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1254)
                 "onversionchange"
                 (or_null_to_js
                    (fun
                       (x1256 : this:t -> ev:IDBVersionChangeEvent.t -> any)
                       ->
                       Ojs.fun_to_js 2
                         (fun (x1257 : Ojs.t) ->
                            fun (x1258 : Ojs.t) ->
                              any_to_js
                                (x1256 ~this:(t_of_js x1257)
                                   ~ev:(IDBVersionChangeEvent.t_of_js x1258))))
                    x1255)
         let (get_version : 'tags this -> float) =
           fun (x1260 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1260) "version")
         let (close : 'tags this -> unit) =
           fun (x1262 : 'tags this) ->
             ignore (Ojs.call (this_to_js Obj.magic x1262) "close" [||])
         let (createObjectStore :
           'tags this ->
             name:string ->
               ?options:IDBObjectStoreParameters.t ->
                 unit -> IDBObjectStore.t)
           =
           fun (x1268 : 'tags this) ->
             fun ~name:(x1264 : string) ->
               fun ?options:(x1265 : IDBObjectStoreParameters.t option) ->
                 fun () ->
                   IDBObjectStore.t_of_js
                     (let x1270 = this_to_js Obj.magic x1268 in
                      Ojs.call (Ojs.get_prop_ascii x1270 "createObjectStore")
                        "apply"
                        [|x1270;((let x1266 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x1266 "push"
                                       [|(Ojs.string_to_js x1264)|]);
                                  (match x1265 with
                                   | Some x1267 ->
                                       ignore
                                         (Ojs.call x1266 "push"
                                            [|(IDBObjectStoreParameters.t_to_js
                                                 x1267)|])
                                   | None -> ());
                                  x1266))|])
         let (deleteObjectStore : 'tags this -> name:string -> unit) =
           fun (x1272 : 'tags this) ->
             fun ~name:(x1271 : string) ->
               ignore
                 (Ojs.call (this_to_js Obj.magic x1272) "deleteObjectStore"
                    [|(Ojs.string_to_js x1271)|])
         let (transaction :
           'tags this ->
             storeNames:string list or_string ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x1280 : 'tags this) ->
             fun ~storeNames:(x1274 : string list or_string) ->
               fun ?mode:(x1275 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x1282 = this_to_js Obj.magic x1280 in
                      Ojs.call (Ojs.get_prop_ascii x1282 "transaction")
                        "apply"
                        [|x1282;((let x1276 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x1276 "push"
                                       [|(or_string_to_js
                                            (fun (x1278 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1278)
                                            x1274)|]);
                                  (match x1275 with
                                   | Some x1277 ->
                                       ignore
                                         (Ojs.call x1276 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x1277)|])
                                   | None -> ());
                                  x1276))|])
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:AddEventListenerOptions.t or_boolean ->
                   unit -> unit)
           =
           fun (x1291 : 'tags this) ->
             fun ~type_:(x1283 : 'K) ->
               fun ~listener:(x1284 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x1285 :
                              AddEventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x1293 = this_to_js Obj.magic x1291 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1293 "addEventListener")
                          "apply"
                          [|x1293;((let x1286 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1286 "push"
                                         [|(Obj.magic x1283)|]);
                                    ignore
                                      (Ojs.call x1286 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x1289 : Ojs.t) ->
                                                 fun (x1290 : Ojs.t) ->
                                                   any_to_js
                                                     (x1284
                                                        ~this:(t_of_js x1289)
                                                        ~ev:(any_of_js x1290))))|]);
                                    (match x1285 with
                                     | Some x1287 ->
                                         ignore
                                           (Ojs.call x1286 "push"
                                              [|(or_boolean_to_js
                                                   AddEventListenerOptions.t_to_js
                                                   x1287)|])
                                     | None -> ());
                                    x1286))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:AddEventListenerOptions.t or_boolean ->
                   unit -> unit)
           =
           fun (x1300 : 'tags this) ->
             fun ~type_:(x1294 : string) ->
               fun ~listener:(x1295 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x1296 :
                              AddEventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x1302 = this_to_js Obj.magic x1300 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1302 "addEventListener")
                          "apply"
                          [|x1302;((let x1297 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1297 "push"
                                         [|(Ojs.string_to_js x1294)|]);
                                    ignore
                                      (Ojs.call x1297 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x1295)|]);
                                    (match x1296 with
                                     | Some x1298 ->
                                         ignore
                                           (Ojs.call x1297 "push"
                                              [|(or_boolean_to_js
                                                   AddEventListenerOptions.t_to_js
                                                   x1298)|])
                                     | None -> ());
                                    x1297))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:EventListenerOptions.t or_boolean -> unit -> unit)
           =
           fun (x1311 : 'tags this) ->
             fun ~type_:(x1303 : 'K) ->
               fun ~listener:(x1304 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x1305 :
                              EventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x1313 = this_to_js Obj.magic x1311 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1313 "removeEventListener")
                          "apply"
                          [|x1313;((let x1306 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1306 "push"
                                         [|(Obj.magic x1303)|]);
                                    ignore
                                      (Ojs.call x1306 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x1309 : Ojs.t) ->
                                                 fun (x1310 : Ojs.t) ->
                                                   any_to_js
                                                     (x1304
                                                        ~this:(t_of_js x1309)
                                                        ~ev:(any_of_js x1310))))|]);
                                    (match x1305 with
                                     | Some x1307 ->
                                         ignore
                                           (Ojs.call x1306 "push"
                                              [|(or_boolean_to_js
                                                   EventListenerOptions.t_to_js
                                                   x1307)|])
                                     | None -> ());
                                    x1306))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:EventListenerOptions.t or_boolean -> unit -> unit)
           =
           fun (x1320 : 'tags this) ->
             fun ~type_:(x1314 : string) ->
               fun ~listener:(x1315 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x1316 :
                              EventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x1322 = this_to_js Obj.magic x1320 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1322 "removeEventListener")
                          "apply"
                          [|x1322;((let x1317 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1317 "push"
                                         [|(Ojs.string_to_js x1314)|]);
                                    ignore
                                      (Ojs.call x1317 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x1315)|]);
                                    (match x1316 with
                                     | Some x1318 ->
                                         ignore
                                           (Ojs.call x1317 "push"
                                              [|(or_boolean_to_js
                                                   EventListenerOptions.t_to_js
                                                   x1318)|])
                                     | None -> ());
                                    x1317))|])
         let (transaction' :
           'tags this ->
             storeNames:string Iterable.t_1 or_string ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x1329 : 'tags this) ->
             fun ~storeNames:(x1323 : string Iterable.t_1 or_string) ->
               fun ?mode:(x1324 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x1331 = this_to_js Obj.magic x1329 in
                      Ojs.call (Ojs.get_prop_ascii x1331 "transaction")
                        "apply"
                        [|x1331;((let x1325 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x1325 "push"
                                       [|(or_string_to_js
                                            (fun
                                               (x1327 : string Iterable.t_1)
                                               ->
                                               Iterable.t_1_to_js
                                                 Ojs.string_to_js x1327)
                                            x1323)|]);
                                  (match x1324 with
                                   | Some x1326 ->
                                       ignore
                                         (Ojs.call x1325 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x1326)|])
                                   | None -> ());
                                  x1325))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "IDBDatabase") "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBDatabase")
                  [||])
       end and
            IDBIndex:sig
                       type t = [ `IDBIndex ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBIndex ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBIndex ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags = [> `IDBIndex ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_keyPath : 'tags this -> string list or_string
                       val get_multiEntry : 'tags this -> bool
                       val get_name : 'tags this -> string
                       val set_name : 'tags this -> string -> unit
                       val get_objectStore : 'tags this -> IDBObjectStore.t
                       val get_unique : 'tags this -> bool
                       val count :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                             unit -> float IDBRequest.t
                       val get_ :
                         'tags this ->
                           query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                             any IDBRequest.t
                       val getAll :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2
                             or_null ->
                             ?count:float -> unit -> any list IDBRequest.t
                       val getAllKeys :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2
                             or_null ->
                             ?count:float ->
                               unit -> IDBValidKey.t list IDBRequest.t
                       val getKey :
                         'tags this ->
                           query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                             IDBValidKey.t or_undefined IDBRequest.t
                       val openCursor :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2
                             or_null ->
                             ?direction:IDBCursorDirection.t ->
                               unit ->
                                 IDBCursorWithValue.t or_null IDBRequest.t
                       val openKeyCursor :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2
                             or_null ->
                             ?direction:IDBCursorDirection.t ->
                               unit -> IDBCursor.t or_null IDBRequest.t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
            struct
              type t = [ `IDBIndex ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x1333 : Ojs.t) -> t_of_js x1333
              and t_0_to_js : t_0 -> Ojs.t = fun (x1332 : t) -> t_to_js x1332
              type tags = [ `IDBIndex ]
              type tags_0 = tags
              type 'tags this = 'tags intf constraint 'tags = [> `IDBIndex ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x1336 : Ojs.t) -> intf_of_js __tags_of_js x1336
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x1334 : __tags intf) -> intf_to_js __tags_to_js x1334
              let (get_keyPath : 'tags this -> string list or_string) =
                fun (x1338 : 'tags this) ->
                  or_string_of_js
                    (fun (x1340 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x1340)
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1338)
                       "keyPath")
              let (get_multiEntry : 'tags this -> bool) =
                fun (x1342 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1342)
                       "multiEntry")
              let (get_name : 'tags this -> string) =
                fun (x1344 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1344) "name")
              let (set_name : 'tags this -> string -> unit) =
                fun (x1346 : 'tags this) ->
                  fun (x1347 : string) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x1346) "name"
                      (Ojs.string_to_js x1347)
              let (get_objectStore : 'tags this -> IDBObjectStore.t) =
                fun (x1349 : 'tags this) ->
                  IDBObjectStore.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1349)
                       "objectStore")
              let (get_unique : 'tags this -> bool) =
                fun (x1351 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1351) "unique")
              let (count :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                    unit -> float IDBRequest.t)
                =
                fun (x1358 : 'tags this) ->
                  fun
                    ?query:(x1353 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 option)
                    ->
                    fun () ->
                      IDBRequest.t_of_js Ojs.float_of_js
                        (let x1360 = this_to_js Obj.magic x1358 in
                         Ojs.call (Ojs.get_prop_ascii x1360 "count") "apply"
                           [|x1360;((let x1354 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x1353 with
                                      | Some x1355 ->
                                          ignore
                                            (Ojs.call x1354 "push"
                                               [|(union2_to_js
                                                    IDBKeyRange.t_to_js
                                                    IDBValidKey.t_to_js x1355)|])
                                      | None -> ());
                                     x1354))|])
              let (get_ :
                'tags this ->
                  query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                    any IDBRequest.t)
                =
                fun (x1365 : 'tags this) ->
                  fun ~query:(x1362 : (IDBKeyRange.t, IDBValidKey.t) union2)
                    ->
                    IDBRequest.t_of_js any_of_js
                      (Ojs.call (this_to_js Obj.magic x1365) "get"
                         [|(union2_to_js IDBKeyRange.t_to_js
                              IDBValidKey.t_to_js x1362)|])
              let (getAll :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null ->
                    ?count:float -> unit -> any list IDBRequest.t)
                =
                fun (x1376 : 'tags this) ->
                  fun
                    ?query:(x1368 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 or_null
                               option)
                    ->
                    fun ?count:(x1369 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1379 : Ojs.t) ->
                             Ojs.list_of_js any_of_js x1379)
                          (let x1378 = this_to_js Obj.magic x1376 in
                           Ojs.call (Ojs.get_prop_ascii x1378 "getAll")
                             "apply"
                             [|x1378;((let x1370 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1368 with
                                        | Some x1372 ->
                                            ignore
                                              (Ojs.call x1370 "push"
                                                 [|(or_null_to_js
                                                      (fun
                                                         (x1373 :
                                                           (IDBKeyRange.t,
                                                             IDBValidKey.t)
                                                             union2)
                                                         ->
                                                         union2_to_js
                                                           IDBKeyRange.t_to_js
                                                           IDBValidKey.t_to_js
                                                           x1373) x1372)|])
                                        | None -> ());
                                       (match x1369 with
                                        | Some x1371 ->
                                            ignore
                                              (Ojs.call x1370 "push"
                                                 [|(Ojs.float_to_js x1371)|])
                                        | None -> ());
                                       x1370))|])
              let (getAllKeys :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null ->
                    ?count:float -> unit -> IDBValidKey.t list IDBRequest.t)
                =
                fun (x1389 : 'tags this) ->
                  fun
                    ?query:(x1381 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 or_null
                               option)
                    ->
                    fun ?count:(x1382 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1392 : Ojs.t) ->
                             Ojs.list_of_js IDBValidKey.t_of_js x1392)
                          (let x1391 = this_to_js Obj.magic x1389 in
                           Ojs.call (Ojs.get_prop_ascii x1391 "getAllKeys")
                             "apply"
                             [|x1391;((let x1383 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1381 with
                                        | Some x1385 ->
                                            ignore
                                              (Ojs.call x1383 "push"
                                                 [|(or_null_to_js
                                                      (fun
                                                         (x1386 :
                                                           (IDBKeyRange.t,
                                                             IDBValidKey.t)
                                                             union2)
                                                         ->
                                                         union2_to_js
                                                           IDBKeyRange.t_to_js
                                                           IDBValidKey.t_to_js
                                                           x1386) x1385)|])
                                        | None -> ());
                                       (match x1382 with
                                        | Some x1384 ->
                                            ignore
                                              (Ojs.call x1383 "push"
                                                 [|(Ojs.float_to_js x1384)|])
                                        | None -> ());
                                       x1383))|])
              let (getKey :
                'tags this ->
                  query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                    IDBValidKey.t or_undefined IDBRequest.t)
                =
                fun (x1397 : 'tags this) ->
                  fun ~query:(x1394 : (IDBKeyRange.t, IDBValidKey.t) union2)
                    ->
                    IDBRequest.t_of_js
                      (fun (x1399 : Ojs.t) ->
                         or_undefined_of_js IDBValidKey.t_of_js x1399)
                      (Ojs.call (this_to_js Obj.magic x1397) "getKey"
                         [|(union2_to_js IDBKeyRange.t_to_js
                              IDBValidKey.t_to_js x1394)|])
              let (openCursor :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursorWithValue.t or_null IDBRequest.t)
                =
                fun (x1409 : 'tags this) ->
                  fun
                    ?query:(x1401 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 or_null
                               option)
                    ->
                    fun ?direction:(x1402 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1412 : Ojs.t) ->
                             or_null_of_js IDBCursorWithValue.t_of_js x1412)
                          (let x1411 = this_to_js Obj.magic x1409 in
                           Ojs.call (Ojs.get_prop_ascii x1411 "openCursor")
                             "apply"
                             [|x1411;((let x1403 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1401 with
                                        | Some x1405 ->
                                            ignore
                                              (Ojs.call x1403 "push"
                                                 [|(or_null_to_js
                                                      (fun
                                                         (x1406 :
                                                           (IDBKeyRange.t,
                                                             IDBValidKey.t)
                                                             union2)
                                                         ->
                                                         union2_to_js
                                                           IDBKeyRange.t_to_js
                                                           IDBValidKey.t_to_js
                                                           x1406) x1405)|])
                                        | None -> ());
                                       (match x1402 with
                                        | Some x1404 ->
                                            ignore
                                              (Ojs.call x1403 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x1404)|])
                                        | None -> ());
                                       x1403))|])
              let (openKeyCursor :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursor.t or_null IDBRequest.t)
                =
                fun (x1422 : 'tags this) ->
                  fun
                    ?query:(x1414 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 or_null
                               option)
                    ->
                    fun ?direction:(x1415 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1425 : Ojs.t) ->
                             or_null_of_js IDBCursor.t_of_js x1425)
                          (let x1424 = this_to_js Obj.magic x1422 in
                           Ojs.call
                             (Ojs.get_prop_ascii x1424 "openKeyCursor")
                             "apply"
                             [|x1424;((let x1416 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1414 with
                                        | Some x1418 ->
                                            ignore
                                              (Ojs.call x1416 "push"
                                                 [|(or_null_to_js
                                                      (fun
                                                         (x1419 :
                                                           (IDBKeyRange.t,
                                                             IDBValidKey.t)
                                                             union2)
                                                         ->
                                                         union2_to_js
                                                           IDBKeyRange.t_to_js
                                                           IDBValidKey.t_to_js
                                                           x1419) x1418)|])
                                        | None -> ());
                                       (match x1415 with
                                        | Some x1417 ->
                                            ignore
                                              (Ojs.call x1416 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x1417)|])
                                        | None -> ());
                                       x1416))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "IDBIndex") "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBIndex")
                       [||])
            end and
                 IDBObjectStore:sig
                                  type t = [ `IDBObjectStore ] intf
                                  type t_0 = t
                                  [@@@js.stop ]
                                  type tags = [ `IDBObjectStore ]
                                  type tags_0 = tags
                                  [@@@js.start ]
                                  [@@@js.implem
                                    type tags = [ `IDBObjectStore ]
                                    type tags_0 = tags]
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `IDBObjectStore ]
                                  val t_to_js : t -> Ojs.t
                                  val t_of_js : Ojs.t -> t
                                  val t_0_to_js : t_0 -> Ojs.t
                                  val t_0_of_js : Ojs.t -> t_0
                                  val get_autoIncrement : 'tags this -> bool
                                  val get_indexNames :
                                    'tags this -> DOMStringList.t
                                  val get_keyPath :
                                    'tags this -> string list or_string
                                  val get_name : 'tags this -> string
                                  val set_name : 'tags this -> string -> unit
                                  val get_transaction :
                                    'tags this -> IDBTransaction.t
                                  val add :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val clear :
                                    'tags this ->
                                      never or_undefined IDBRequest.t
                                  val count :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 -> unit -> float IDBRequest.t
                                  val createIndex :
                                    'tags this ->
                                      name:string ->
                                        keyPath:string list or_string ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val delete :
                                    'tags this ->
                                      query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 ->
                                        never or_undefined IDBRequest.t
                                  val deleteIndex :
                                    'tags this -> name:string -> unit
                                  val get_ :
                                    'tags this ->
                                      query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 -> any IDBRequest.t
                                  val getAll :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 or_null ->
                                        ?count:float ->
                                          unit -> any list IDBRequest.t
                                  val getAllKeys :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 or_null ->
                                        ?count:float ->
                                          unit ->
                                            IDBValidKey.t list IDBRequest.t
                                  val getKey :
                                    'tags this ->
                                      query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 ->
                                        IDBValidKey.t or_undefined
                                          IDBRequest.t
                                  val index :
                                    'tags this -> name:string -> IDBIndex.t
                                  val openCursor :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 or_null ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursorWithValue.t or_null
                                              IDBRequest.t
                                  val openKeyCursor :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 or_null ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursor.t or_null IDBRequest.t
                                  val put :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val createIndex' :
                                    'tags this ->
                                      name:string ->
                                        keyPath:string Iterable.t_1 or_string
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val cast_from : 'tags this -> t
                                  val prototype : unit -> t
                                  val create : unit -> t
                                end =
                 struct
                   type t = [ `IDBObjectStore ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x1428 : Ojs.t) -> t_of_js x1428
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x1427 : t) -> t_to_js x1427
                   type tags = [ `IDBObjectStore ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `IDBObjectStore ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x1431 : Ojs.t) -> intf_of_js __tags_of_js x1431
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x1429 : __tags intf) ->
                         intf_to_js __tags_to_js x1429
                   let (get_autoIncrement : 'tags this -> bool) =
                     fun (x1433 : 'tags this) ->
                       Ojs.bool_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1433)
                            "autoIncrement")
                   let (get_indexNames : 'tags this -> DOMStringList.t) =
                     fun (x1435 : 'tags this) ->
                       DOMStringList.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1435)
                            "indexNames")
                   let (get_keyPath : 'tags this -> string list or_string) =
                     fun (x1437 : 'tags this) ->
                       or_string_of_js
                         (fun (x1439 : Ojs.t) ->
                            Ojs.list_of_js Ojs.string_of_js x1439)
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1437)
                            "keyPath")
                   let (get_name : 'tags this -> string) =
                     fun (x1441 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1441)
                            "name")
                   let (set_name : 'tags this -> string -> unit) =
                     fun (x1443 : 'tags this) ->
                       fun (x1444 : string) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x1443)
                           "name" (Ojs.string_to_js x1444)
                   let (get_transaction : 'tags this -> IDBTransaction.t) =
                     fun (x1446 : 'tags this) ->
                       IDBTransaction.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1446)
                            "transaction")
                   let (add :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x1452 : 'tags this) ->
                       fun ~value:(x1448 : any) ->
                         fun ?key:(x1449 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x1454 = this_to_js Obj.magic x1452 in
                                Ojs.call (Ojs.get_prop_ascii x1454 "add")
                                  "apply"
                                  [|x1454;((let x1450 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x1450 "push"
                                                 [|(any_to_js x1448)|]);
                                            (match x1449 with
                                             | Some x1451 ->
                                                 ignore
                                                   (Ojs.call x1450 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x1451)|])
                                             | None -> ());
                                            x1450))|])
                   let (clear :
                     'tags this -> never or_undefined IDBRequest.t) =
                     fun (x1456 : 'tags this) ->
                       IDBRequest.t_of_js
                         (fun (x1458 : Ojs.t) ->
                            or_undefined_of_js never_of_js x1458)
                         (Ojs.call (this_to_js Obj.magic x1456) "clear" [||])
                   let (count :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                         unit -> float IDBRequest.t)
                     =
                     fun (x1465 : 'tags this) ->
                       fun
                         ?query:(x1460 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    option)
                         ->
                         fun () ->
                           IDBRequest.t_of_js Ojs.float_of_js
                             (let x1467 = this_to_js Obj.magic x1465 in
                              Ojs.call (Ojs.get_prop_ascii x1467 "count")
                                "apply"
                                [|x1467;((let x1461 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x1460 with
                                           | Some x1462 ->
                                               ignore
                                                 (Ojs.call x1461 "push"
                                                    [|(union2_to_js
                                                         IDBKeyRange.t_to_js
                                                         IDBValidKey.t_to_js
                                                         x1462)|])
                                           | None -> ());
                                          x1461))|])
                   let (createIndex :
                     'tags this ->
                       name:string ->
                         keyPath:string list or_string ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x1476 : 'tags this) ->
                       fun ~name:(x1469 : string) ->
                         fun ~keyPath:(x1470 : string list or_string) ->
                           fun ?options:(x1471 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x1478 = this_to_js Obj.magic x1476 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x1478 "createIndex")
                                    "apply"
                                    [|x1478;((let x1472 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x1472 "push"
                                                   [|(Ojs.string_to_js x1469)|]);
                                              ignore
                                                (Ojs.call x1472 "push"
                                                   [|(or_string_to_js
                                                        (fun
                                                           (x1474 :
                                                             string list)
                                                           ->
                                                           Ojs.list_to_js
                                                             Ojs.string_to_js
                                                             x1474) x1470)|]);
                                              (match x1471 with
                                               | Some x1473 ->
                                                   ignore
                                                     (Ojs.call x1472 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x1473)|])
                                               | None -> ());
                                              x1472))|])
                   let (delete :
                     'tags this ->
                       query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                         never or_undefined IDBRequest.t)
                     =
                     fun (x1482 : 'tags this) ->
                       fun
                         ~query:(x1479 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2)
                         ->
                         IDBRequest.t_of_js
                           (fun (x1484 : Ojs.t) ->
                              or_undefined_of_js never_of_js x1484)
                           (Ojs.call (this_to_js Obj.magic x1482) "delete"
                              [|(union2_to_js IDBKeyRange.t_to_js
                                   IDBValidKey.t_to_js x1479)|])
                   let (deleteIndex : 'tags this -> name:string -> unit) =
                     fun (x1487 : 'tags this) ->
                       fun ~name:(x1486 : string) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x1487)
                              "deleteIndex" [|(Ojs.string_to_js x1486)|])
                   let (get_ :
                     'tags this ->
                       query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                         any IDBRequest.t)
                     =
                     fun (x1492 : 'tags this) ->
                       fun
                         ~query:(x1489 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2)
                         ->
                         IDBRequest.t_of_js any_of_js
                           (Ojs.call (this_to_js Obj.magic x1492) "get"
                              [|(union2_to_js IDBKeyRange.t_to_js
                                   IDBValidKey.t_to_js x1489)|])
                   let (getAll :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null
                         -> ?count:float -> unit -> any list IDBRequest.t)
                     =
                     fun (x1503 : 'tags this) ->
                       fun
                         ?query:(x1495 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    or_null option)
                         ->
                         fun ?count:(x1496 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1506 : Ojs.t) ->
                                  Ojs.list_of_js any_of_js x1506)
                               (let x1505 = this_to_js Obj.magic x1503 in
                                Ojs.call (Ojs.get_prop_ascii x1505 "getAll")
                                  "apply"
                                  [|x1505;((let x1497 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1495 with
                                             | Some x1499 ->
                                                 ignore
                                                   (Ojs.call x1497 "push"
                                                      [|(or_null_to_js
                                                           (fun
                                                              (x1500 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                              ->
                                                              union2_to_js
                                                                IDBKeyRange.t_to_js
                                                                IDBValidKey.t_to_js
                                                                x1500) x1499)|])
                                             | None -> ());
                                            (match x1496 with
                                             | Some x1498 ->
                                                 ignore
                                                   (Ojs.call x1497 "push"
                                                      [|(Ojs.float_to_js
                                                           x1498)|])
                                             | None -> ());
                                            x1497))|])
                   let (getAllKeys :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null
                         ->
                         ?count:float ->
                           unit -> IDBValidKey.t list IDBRequest.t)
                     =
                     fun (x1516 : 'tags this) ->
                       fun
                         ?query:(x1508 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    or_null option)
                         ->
                         fun ?count:(x1509 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1519 : Ojs.t) ->
                                  Ojs.list_of_js IDBValidKey.t_of_js x1519)
                               (let x1518 = this_to_js Obj.magic x1516 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1518 "getAllKeys")
                                  "apply"
                                  [|x1518;((let x1510 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1508 with
                                             | Some x1512 ->
                                                 ignore
                                                   (Ojs.call x1510 "push"
                                                      [|(or_null_to_js
                                                           (fun
                                                              (x1513 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                              ->
                                                              union2_to_js
                                                                IDBKeyRange.t_to_js
                                                                IDBValidKey.t_to_js
                                                                x1513) x1512)|])
                                             | None -> ());
                                            (match x1509 with
                                             | Some x1511 ->
                                                 ignore
                                                   (Ojs.call x1510 "push"
                                                      [|(Ojs.float_to_js
                                                           x1511)|])
                                             | None -> ());
                                            x1510))|])
                   let (getKey :
                     'tags this ->
                       query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                         IDBValidKey.t or_undefined IDBRequest.t)
                     =
                     fun (x1524 : 'tags this) ->
                       fun
                         ~query:(x1521 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2)
                         ->
                         IDBRequest.t_of_js
                           (fun (x1526 : Ojs.t) ->
                              or_undefined_of_js IDBValidKey.t_of_js x1526)
                           (Ojs.call (this_to_js Obj.magic x1524) "getKey"
                              [|(union2_to_js IDBKeyRange.t_to_js
                                   IDBValidKey.t_to_js x1521)|])
                   let (index : 'tags this -> name:string -> IDBIndex.t) =
                     fun (x1529 : 'tags this) ->
                       fun ~name:(x1528 : string) ->
                         IDBIndex.t_of_js
                           (Ojs.call (this_to_js Obj.magic x1529) "index"
                              [|(Ojs.string_to_js x1528)|])
                   let (openCursor :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursorWithValue.t or_null IDBRequest.t)
                     =
                     fun (x1539 : 'tags this) ->
                       fun
                         ?query:(x1531 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    or_null option)
                         ->
                         fun ?direction:(x1532 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1542 : Ojs.t) ->
                                  or_null_of_js IDBCursorWithValue.t_of_js
                                    x1542)
                               (let x1541 = this_to_js Obj.magic x1539 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1541 "openCursor")
                                  "apply"
                                  [|x1541;((let x1533 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1531 with
                                             | Some x1535 ->
                                                 ignore
                                                   (Ojs.call x1533 "push"
                                                      [|(or_null_to_js
                                                           (fun
                                                              (x1536 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                              ->
                                                              union2_to_js
                                                                IDBKeyRange.t_to_js
                                                                IDBValidKey.t_to_js
                                                                x1536) x1535)|])
                                             | None -> ());
                                            (match x1532 with
                                             | Some x1534 ->
                                                 ignore
                                                   (Ojs.call x1533 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x1534)|])
                                             | None -> ());
                                            x1533))|])
                   let (openKeyCursor :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursor.t or_null IDBRequest.t)
                     =
                     fun (x1552 : 'tags this) ->
                       fun
                         ?query:(x1544 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    or_null option)
                         ->
                         fun ?direction:(x1545 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1555 : Ojs.t) ->
                                  or_null_of_js IDBCursor.t_of_js x1555)
                               (let x1554 = this_to_js Obj.magic x1552 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1554 "openKeyCursor")
                                  "apply"
                                  [|x1554;((let x1546 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1544 with
                                             | Some x1548 ->
                                                 ignore
                                                   (Ojs.call x1546 "push"
                                                      [|(or_null_to_js
                                                           (fun
                                                              (x1549 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                              ->
                                                              union2_to_js
                                                                IDBKeyRange.t_to_js
                                                                IDBValidKey.t_to_js
                                                                x1549) x1548)|])
                                             | None -> ());
                                            (match x1545 with
                                             | Some x1547 ->
                                                 ignore
                                                   (Ojs.call x1546 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x1547)|])
                                             | None -> ());
                                            x1546))|])
                   let (put :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x1561 : 'tags this) ->
                       fun ~value:(x1557 : any) ->
                         fun ?key:(x1558 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x1563 = this_to_js Obj.magic x1561 in
                                Ojs.call (Ojs.get_prop_ascii x1563 "put")
                                  "apply"
                                  [|x1563;((let x1559 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x1559 "push"
                                                 [|(any_to_js x1557)|]);
                                            (match x1558 with
                                             | Some x1560 ->
                                                 ignore
                                                   (Ojs.call x1559 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x1560)|])
                                             | None -> ());
                                            x1559))|])
                   let (createIndex' :
                     'tags this ->
                       name:string ->
                         keyPath:string Iterable.t_1 or_string ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x1572 : 'tags this) ->
                       fun ~name:(x1565 : string) ->
                         fun ~keyPath:(x1566 : string Iterable.t_1 or_string)
                           ->
                           fun ?options:(x1567 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x1574 = this_to_js Obj.magic x1572 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x1574 "createIndex")
                                    "apply"
                                    [|x1574;((let x1568 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x1568 "push"
                                                   [|(Ojs.string_to_js x1565)|]);
                                              ignore
                                                (Ojs.call x1568 "push"
                                                   [|(or_string_to_js
                                                        (fun
                                                           (x1570 :
                                                             string
                                                               Iterable.t_1)
                                                           ->
                                                           Iterable.t_1_to_js
                                                             Ojs.string_to_js
                                                             x1570) x1566)|]);
                                              (match x1567 with
                                               | Some x1569 ->
                                                   ignore
                                                     (Ojs.call x1568 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x1569)|])
                                               | None -> ());
                                              x1568))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            [||])
                 end and
                      IDBRequest:sig
                                   type 'T t =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                       intf
                                   type 'T t_1 = 'T t
                                   type t_0 = any t
                                   [@@@js.stop ]
                                   type 'T tags =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                   type 'T tags_1 = 'T tags
                                   type tags_0 = any tags
                                   [@@@js.start ]
                                   [@@@js.implem
                                     type 'T tags =
                                       [ `EventTarget  | `IDBRequest of 'T ]
                                     type 'T tags_1 = 'T tags
                                     type tags_0 = any tags]
                                   type ('tags, 'T) this =
                                     'tags intf constraint 'tags =
                                                 [> `IDBRequest of 'T ]
                                   val t_to_js :
                                     ('T -> Ojs.t) -> 'T t -> Ojs.t
                                   val t_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t
                                   val t_1_to_js :
                                     ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                                   val t_1_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                                   val t_0_to_js : t_0 -> Ojs.t
                                   val t_0_of_js : Ojs.t -> t_0
                                   val get_error :
                                     ('tags, 'T) this ->
                                       DOMException.t or_null
                                   val get_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         or_null
                                   val set_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         or_null -> unit
                                   val get_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         or_null
                                   val set_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         or_null -> unit
                                   val get_readyState :
                                     ('tags, 'T) this ->
                                       IDBRequestReadyState.t
                                   val get_result : ('tags, 'T) this -> 'T
                                   val get_source :
                                     ('tags, 'T) this ->
                                       (IDBCursor.t, IDBIndex.t,
                                         IDBObjectStore.t) union3
                                   val get_transaction :
                                     ('tags, 'T) this ->
                                       IDBTransaction.t or_null
                                   val addEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:AddEventListenerOptions.t
                                             or_boolean -> unit -> unit
                                   val addEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:AddEventListenerOptions.t
                                             or_boolean -> unit -> unit
                                   val removeEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:EventListenerOptions.t
                                             or_boolean -> unit -> unit
                                   val removeEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:EventListenerOptions.t
                                             or_boolean -> unit -> unit
                                   val cast_from : ('tags, 'T) this -> 'T t
                                   val prototype : unit -> t_0
                                   val create : unit -> t_0
                                 end =
                      struct
                        type 'T t =
                          [ `EventTarget  | `IDBRequest of 'T ] intf
                        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t
                          = fun _T -> Obj.magic
                        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                          fun _T -> Obj.magic
                        type 'T t_1 = 'T t
                        let rec t_1_of_js :
                          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
                          __T) ->
                          fun (__T_of_js : Ojs.t -> __T) ->
                            fun (x1577 : Ojs.t) -> t_of_js __T_of_js x1577
                        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                          = fun (type __T) ->
                          fun (__T_to_js : __T -> Ojs.t) ->
                            fun (x1575 : __T t) -> t_to_js __T_to_js x1575
                        type t_0 = any t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x1581 : Ojs.t) -> t_of_js any_of_js x1581
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x1579 : any t) -> t_to_js any_to_js x1579
                        type 'T tags = [ `EventTarget  | `IDBRequest of 'T ]
                        type 'T tags_1 = 'T tags
                        type tags_0 = any tags
                        type ('tags, 'T) this =
                          'tags intf constraint 'tags =
                                      [> `IDBRequest of 'T ]
                        let rec this_of_js :
                          'tags 'T .
                            (Ojs.t -> 'tags) ->
                              (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                          = fun (type __tags) -> fun (type __T) ->
                          fun (__tags_of_js : Ojs.t -> __tags) ->
                            fun (__T_of_js : Ojs.t -> __T) ->
                              fun (x1585 : Ojs.t) ->
                                intf_of_js __tags_of_js x1585
                        and this_to_js :
                          'tags 'T .
                            ('tags -> Ojs.t) ->
                              ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                          = fun (type __tags) -> fun (type __T) ->
                          fun (__tags_to_js : __tags -> Ojs.t) ->
                            fun (__T_to_js : __T -> Ojs.t) ->
                              fun (x1583 : __tags intf) ->
                                intf_to_js __tags_to_js x1583
                        let (get_error :
                          ('tags, 'T) this -> DOMException.t or_null) =
                          fun (x1587 : ('tags, 'T) this) ->
                            or_null_of_js DOMException.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1587)
                                 "error")
                        let (get_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) or_null)
                          =
                          fun (x1591 : ('tags, 'T) this) ->
                            or_null_of_js
                              (fun (x1594 : Ojs.t) ->
                                 fun ~this:(x1595 : 'T t) ->
                                   fun ~ev:(x1597 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x1594
                                          [|(t_to_js Obj.magic x1595);(
                                            Event.t_to_js x1597)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1591)
                                 "onerror")
                        let (set_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) or_null -> unit)
                          =
                          fun (x1598 : ('tags, 'T) this) ->
                            fun
                              (x1599 :
                                (this:'T t -> ev:Event.t -> any) or_null)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x1598)
                                "onerror"
                                (or_null_to_js
                                   (fun
                                      (x1600 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x1601 : Ojs.t) ->
                                           fun (x1603 : Ojs.t) ->
                                             any_to_js
                                               (x1600
                                                  ~this:(t_of_js Obj.magic
                                                           x1601)
                                                  ~ev:(Event.t_of_js x1603))))
                                   x1599)
                        let (get_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) or_null)
                          =
                          fun (x1606 : ('tags, 'T) this) ->
                            or_null_of_js
                              (fun (x1609 : Ojs.t) ->
                                 fun ~this:(x1610 : 'T t) ->
                                   fun ~ev:(x1612 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x1609
                                          [|(t_to_js Obj.magic x1610);(
                                            Event.t_to_js x1612)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1606)
                                 "onsuccess")
                        let (set_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) or_null -> unit)
                          =
                          fun (x1613 : ('tags, 'T) this) ->
                            fun
                              (x1614 :
                                (this:'T t -> ev:Event.t -> any) or_null)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x1613)
                                "onsuccess"
                                (or_null_to_js
                                   (fun
                                      (x1615 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x1616 : Ojs.t) ->
                                           fun (x1618 : Ojs.t) ->
                                             any_to_js
                                               (x1615
                                                  ~this:(t_of_js Obj.magic
                                                           x1616)
                                                  ~ev:(Event.t_of_js x1618))))
                                   x1614)
                        let (get_readyState :
                          ('tags, 'T) this -> IDBRequestReadyState.t) =
                          fun (x1621 : ('tags, 'T) this) ->
                            IDBRequestReadyState.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1621)
                                 "readyState")
                        let (get_result : ('tags, 'T) this -> 'T) =
                          fun (x1624 : ('tags, 'T) this) ->
                            Obj.magic
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1624)
                                 "result")
                        let (get_source :
                          ('tags, 'T) this ->
                            (IDBCursor.t, IDBIndex.t, IDBObjectStore.t)
                              union3)
                          =
                          fun (x1627 : ('tags, 'T) this) ->
                            union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
                              IDBObjectStore.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1627)
                                 "source")
                        let (get_transaction :
                          ('tags, 'T) this -> IDBTransaction.t or_null) =
                          fun (x1633 : ('tags, 'T) this) ->
                            or_null_of_js IDBTransaction.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1633)
                                 "transaction")
                        let (addEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:AddEventListenerOptions.t or_boolean
                                  -> unit -> unit)
                          =
                          fun (x1646 : ('tags, 'T) this) ->
                            fun ~type_:(x1637 : 'K) ->
                              fun
                                ~listener:(x1638 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x1639 :
                                             AddEventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1649 =
                                         this_to_js Obj.magic Obj.magic x1646 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1649
                                            "addEventListener") "apply"
                                         [|x1649;((let x1640 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1640 "push"
                                                        [|(Obj.magic x1637)|]);
                                                   ignore
                                                     (Ojs.call x1640 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1643 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1645 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x1638
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1643)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1645))))|]);
                                                   (match x1639 with
                                                    | Some x1641 ->
                                                        ignore
                                                          (Ojs.call x1640
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  AddEventListenerOptions.t_to_js
                                                                  x1641)|])
                                                    | None -> ());
                                                   x1640))|])
                        let (addEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:AddEventListenerOptions.t or_boolean
                                  -> unit -> unit)
                          =
                          fun (x1656 : ('tags, 'T) this) ->
                            fun ~type_:(x1650 : string) ->
                              fun
                                ~listener:(x1651 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x1652 :
                                             AddEventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1659 =
                                         this_to_js Obj.magic Obj.magic x1656 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1659
                                            "addEventListener") "apply"
                                         [|x1659;((let x1653 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1653 "push"
                                                        [|(Ojs.string_to_js
                                                             x1650)|]);
                                                   ignore
                                                     (Ojs.call x1653 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x1651)|]);
                                                   (match x1652 with
                                                    | Some x1654 ->
                                                        ignore
                                                          (Ojs.call x1653
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  AddEventListenerOptions.t_to_js
                                                                  x1654)|])
                                                    | None -> ());
                                                   x1653))|])
                        let (removeEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:EventListenerOptions.t or_boolean ->
                                  unit -> unit)
                          =
                          fun (x1669 : ('tags, 'T) this) ->
                            fun ~type_:(x1660 : 'K) ->
                              fun
                                ~listener:(x1661 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x1662 :
                                             EventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1672 =
                                         this_to_js Obj.magic Obj.magic x1669 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1672
                                            "removeEventListener") "apply"
                                         [|x1672;((let x1663 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1663 "push"
                                                        [|(Obj.magic x1660)|]);
                                                   ignore
                                                     (Ojs.call x1663 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1666 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1668 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x1661
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1666)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1668))))|]);
                                                   (match x1662 with
                                                    | Some x1664 ->
                                                        ignore
                                                          (Ojs.call x1663
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  EventListenerOptions.t_to_js
                                                                  x1664)|])
                                                    | None -> ());
                                                   x1663))|])
                        let (removeEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:EventListenerOptions.t or_boolean ->
                                  unit -> unit)
                          =
                          fun (x1679 : ('tags, 'T) this) ->
                            fun ~type_:(x1673 : string) ->
                              fun
                                ~listener:(x1674 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x1675 :
                                             EventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1682 =
                                         this_to_js Obj.magic Obj.magic x1679 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1682
                                            "removeEventListener") "apply"
                                         [|x1682;((let x1676 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1676 "push"
                                                        [|(Ojs.string_to_js
                                                             x1673)|]);
                                                   ignore
                                                     (Ojs.call x1676 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x1674)|]);
                                                   (match x1675 with
                                                    | Some x1677 ->
                                                        ignore
                                                          (Ojs.call x1676
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  EventListenerOptions.t_to_js
                                                                  x1677)|])
                                                    | None -> ());
                                                   x1676))|])
                        let cast_from = Obj.magic
                        let (prototype : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 "prototype")
                        let (create : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 [||])
                      end and
                           IDBTransaction:sig
                                            type t =
                                              [ `EventTarget 
                                              | `IDBTransaction ] intf
                                            type t_0 = t
                                            [@@@js.stop ]
                                            type tags =
                                              [ `EventTarget 
                                              | `IDBTransaction ]
                                            type tags_0 = tags
                                            [@@@js.start ]
                                            [@@@js.implem
                                              type tags =
                                                [ `EventTarget 
                                                | `IDBTransaction ]
                                              type tags_0 = tags]
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [>
                                                            `IDBTransaction ]
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val t_0_to_js : t_0 -> Ojs.t
                                            val t_0_of_js : Ojs.t -> t_0
                                            val get_db :
                                              'tags this -> IDBDatabase.t
                                            val get_error :
                                              'tags this ->
                                                DOMException.t or_null
                                            val get_mode :
                                              'tags this ->
                                                IDBTransactionMode.t
                                            val get_objectStoreNames :
                                              'tags this -> DOMStringList.t
                                            val get_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null
                                            val set_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit
                                            val get_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null
                                            val set_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit
                                            val get_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null
                                            val set_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit
                                            val abort : 'tags this -> unit
                                            val commit : 'tags this -> unit
                                            val objectStore :
                                              'tags this ->
                                                name:string ->
                                                  IDBObjectStore.t
                                            val addEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit
                                            val addEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit
                                            val removeEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit
                                            val removeEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit
                                            val cast_from : 'tags this -> t
                                            val prototype : unit -> t
                                            val create : unit -> t
                                          end =
                           struct
                             type t =
                               [ `EventTarget  | `IDBTransaction ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x1684 : Ojs.t) -> t_of_js x1684
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x1683 : t) -> t_to_js x1683
                             type tags = [ `EventTarget  | `IDBTransaction ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `IDBTransaction ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x1687 : Ojs.t) ->
                                   intf_of_js __tags_of_js x1687
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x1685 : __tags intf) ->
                                   intf_to_js __tags_to_js x1685
                             let (get_db : 'tags this -> IDBDatabase.t) =
                               fun (x1689 : 'tags this) ->
                                 IDBDatabase.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1689) "db")
                             let (get_error :
                               'tags this -> DOMException.t or_null) =
                               fun (x1691 : 'tags this) ->
                                 or_null_of_js DOMException.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1691) "error")
                             let (get_mode :
                               'tags this -> IDBTransactionMode.t) =
                               fun (x1694 : 'tags this) ->
                                 IDBTransactionMode.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1694) "mode")
                             let (get_objectStoreNames :
                               'tags this -> DOMStringList.t) =
                               fun (x1696 : 'tags this) ->
                                 DOMStringList.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1696)
                                      "objectStoreNames")
                             let (get_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null)
                               =
                               fun (x1698 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x1700 : Ojs.t) ->
                                      fun ~this:(x1701 : t) ->
                                        fun ~ev:(x1702 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x1700
                                               [|(t_to_js x1701);(Event.t_to_js
                                                                    x1702)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1698) "onabort")
                             let (set_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null ->
                                   unit)
                               =
                               fun (x1703 : 'tags this) ->
                                 fun
                                   (x1704 :
                                     (this:t -> ev:Event.t -> any) or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x1703) "onabort"
                                     (or_null_to_js
                                        (fun
                                           (x1705 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x1706 : Ojs.t) ->
                                                fun (x1707 : Ojs.t) ->
                                                  any_to_js
                                                    (x1705
                                                       ~this:(t_of_js x1706)
                                                       ~ev:(Event.t_of_js
                                                              x1707)))) x1704)
                             let (get_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null)
                               =
                               fun (x1709 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x1711 : Ojs.t) ->
                                      fun ~this:(x1712 : t) ->
                                        fun ~ev:(x1713 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x1711
                                               [|(t_to_js x1712);(Event.t_to_js
                                                                    x1713)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1709)
                                      "oncomplete")
                             let (set_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null ->
                                   unit)
                               =
                               fun (x1714 : 'tags this) ->
                                 fun
                                   (x1715 :
                                     (this:t -> ev:Event.t -> any) or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x1714)
                                     "oncomplete"
                                     (or_null_to_js
                                        (fun
                                           (x1716 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x1717 : Ojs.t) ->
                                                fun (x1718 : Ojs.t) ->
                                                  any_to_js
                                                    (x1716
                                                       ~this:(t_of_js x1717)
                                                       ~ev:(Event.t_of_js
                                                              x1718)))) x1715)
                             let (get_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null)
                               =
                               fun (x1720 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x1722 : Ojs.t) ->
                                      fun ~this:(x1723 : t) ->
                                        fun ~ev:(x1724 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x1722
                                               [|(t_to_js x1723);(Event.t_to_js
                                                                    x1724)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1720) "onerror")
                             let (set_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null ->
                                   unit)
                               =
                               fun (x1725 : 'tags this) ->
                                 fun
                                   (x1726 :
                                     (this:t -> ev:Event.t -> any) or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x1725) "onerror"
                                     (or_null_to_js
                                        (fun
                                           (x1727 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x1728 : Ojs.t) ->
                                                fun (x1729 : Ojs.t) ->
                                                  any_to_js
                                                    (x1727
                                                       ~this:(t_of_js x1728)
                                                       ~ev:(Event.t_of_js
                                                              x1729)))) x1726)
                             let (abort : 'tags this -> unit) =
                               fun (x1731 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x1731)
                                      "abort" [||])
                             let (commit : 'tags this -> unit) =
                               fun (x1733 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x1733)
                                      "commit" [||])
                             let (objectStore :
                               'tags this -> name:string -> IDBObjectStore.t)
                               =
                               fun (x1736 : 'tags this) ->
                                 fun ~name:(x1735 : string) ->
                                   IDBObjectStore.t_of_js
                                     (Ojs.call (this_to_js Obj.magic x1736)
                                        "objectStore"
                                        [|(Ojs.string_to_js x1735)|])
                             let (addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x1746 : 'tags this) ->
                                 fun ~type_:(x1738 : 'K) ->
                                   fun
                                     ~listener:(x1739 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x1740 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1748 =
                                              this_to_js Obj.magic x1746 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1748
                                                 "addEventListener") "apply"
                                              [|x1748;((let x1741 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1741
                                                             "push"
                                                             [|(Obj.magic
                                                                  x1738)|]);
                                                        ignore
                                                          (Ojs.call x1741
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x1744 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1745 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1739
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1744)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1745))))|]);
                                                        (match x1740 with
                                                         | Some x1742 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1741
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1742)|])
                                                         | None -> ());
                                                        x1741))|])
                             let (addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x1755 : 'tags this) ->
                                 fun ~type_:(x1749 : string) ->
                                   fun
                                     ~listener:(x1750 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x1751 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1757 =
                                              this_to_js Obj.magic x1755 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1757
                                                 "addEventListener") "apply"
                                              [|x1757;((let x1752 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1752
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x1749)|]);
                                                        ignore
                                                          (Ojs.call x1752
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x1750)|]);
                                                        (match x1751 with
                                                         | Some x1753 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1752
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1753)|])
                                                         | None -> ());
                                                        x1752))|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x1766 : 'tags this) ->
                                 fun ~type_:(x1758 : 'K) ->
                                   fun
                                     ~listener:(x1759 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x1760 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1768 =
                                              this_to_js Obj.magic x1766 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1768
                                                 "removeEventListener")
                                              "apply"
                                              [|x1768;((let x1761 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1761
                                                             "push"
                                                             [|(Obj.magic
                                                                  x1758)|]);
                                                        ignore
                                                          (Ojs.call x1761
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x1764 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1765 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1759
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1764)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1765))))|]);
                                                        (match x1760 with
                                                         | Some x1762 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1761
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1762)|])
                                                         | None -> ());
                                                        x1761))|])
                             let (removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x1775 : 'tags this) ->
                                 fun ~type_:(x1769 : string) ->
                                   fun
                                     ~listener:(x1770 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x1771 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1777 =
                                              this_to_js Obj.magic x1775 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1777
                                                 "removeEventListener")
                                              "apply"
                                              [|x1777;((let x1772 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1772
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x1769)|]);
                                                        ignore
                                                          (Ojs.call x1772
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x1770)|]);
                                                        (match x1771 with
                                                         | Some x1773 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1772
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1773)|])
                                                         | None -> ());
                                                        x1772))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") [||])
                           end
module IDBOpenDBRequest =
  struct
    type t =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1779 : Ojs.t) -> t_of_js x1779
    and t_0_to_js : t_0 -> Ojs.t = fun (x1778 : t) -> t_to_js x1778
    type tags =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1782 : Ojs.t) -> intf_of_js __tags_of_js x1782
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1780 : __tags intf) -> intf_to_js __tags_to_js x1780
    let (get_onblocked : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x1784 : 'tags this) ->
        or_null_of_js
          (fun (x1786 : Ojs.t) ->
             fun ~this:(x1787 : t) ->
               fun ~ev:(x1788 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1786 [|(t_to_js x1787);(Event.t_to_js x1788)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1784) "onblocked")
    let (set_onblocked :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x1789 : 'tags this) ->
        fun (x1790 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1789) "onblocked"
            (or_null_to_js
               (fun (x1791 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1792 : Ojs.t) ->
                       fun (x1793 : Ojs.t) ->
                         any_to_js
                           (x1791 ~this:(t_of_js x1792)
                              ~ev:(Event.t_of_js x1793)))) x1790)
    let (get_onupgradeneeded :
      'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null) =
      fun (x1795 : 'tags this) ->
        or_null_of_js
          (fun (x1797 : Ojs.t) ->
             fun ~this:(x1798 : t) ->
               fun ~ev:(x1799 : IDBVersionChangeEvent.t) ->
                 any_of_js
                   (Ojs.apply x1797
                      [|(t_to_js x1798);(IDBVersionChangeEvent.t_to_js x1799)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1795) "onupgradeneeded")
    let (set_onupgradeneeded :
      'tags this ->
        (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null -> unit)
      =
      fun (x1800 : 'tags this) ->
        fun (x1801 : (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1800) "onupgradeneeded"
            (or_null_to_js
               (fun (x1802 : this:t -> ev:IDBVersionChangeEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1803 : Ojs.t) ->
                       fun (x1804 : Ojs.t) ->
                         any_to_js
                           (x1802 ~this:(t_of_js x1803)
                              ~ev:(IDBVersionChangeEvent.t_of_js x1804))))
               x1801)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1814 : 'tags this) ->
        fun ~type_:(x1806 : 'K) ->
          fun ~listener:(x1807 : this:t -> ev:any -> any) ->
            fun
              ?options:(x1808 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1816 = this_to_js Obj.magic x1814 in
                   Ojs.call (Ojs.get_prop_ascii x1816 "addEventListener")
                     "apply"
                     [|x1816;((let x1809 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1809 "push" [|(Obj.magic x1806)|]);
                               ignore
                                 (Ojs.call x1809 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1812 : Ojs.t) ->
                                            fun (x1813 : Ojs.t) ->
                                              any_to_js
                                                (x1807 ~this:(t_of_js x1812)
                                                   ~ev:(any_of_js x1813))))|]);
                               (match x1808 with
                                | Some x1810 ->
                                    ignore
                                      (Ojs.call x1809 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1810)|])
                                | None -> ());
                               x1809))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1823 : 'tags this) ->
        fun ~type_:(x1817 : string) ->
          fun ~listener:(x1818 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x1819 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1825 = this_to_js Obj.magic x1823 in
                   Ojs.call (Ojs.get_prop_ascii x1825 "addEventListener")
                     "apply"
                     [|x1825;((let x1820 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1820 "push"
                                    [|(Ojs.string_to_js x1817)|]);
                               ignore
                                 (Ojs.call x1820 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1818)|]);
                               (match x1819 with
                                | Some x1821 ->
                                    ignore
                                      (Ojs.call x1820 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1821)|])
                                | None -> ());
                               x1820))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1834 : 'tags this) ->
        fun ~type_:(x1826 : 'K) ->
          fun ~listener:(x1827 : this:t -> ev:any -> any) ->
            fun ?options:(x1828 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1836 = this_to_js Obj.magic x1834 in
                   Ojs.call (Ojs.get_prop_ascii x1836 "removeEventListener")
                     "apply"
                     [|x1836;((let x1829 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1829 "push" [|(Obj.magic x1826)|]);
                               ignore
                                 (Ojs.call x1829 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1832 : Ojs.t) ->
                                            fun (x1833 : Ojs.t) ->
                                              any_to_js
                                                (x1827 ~this:(t_of_js x1832)
                                                   ~ev:(any_of_js x1833))))|]);
                               (match x1828 with
                                | Some x1830 ->
                                    ignore
                                      (Ojs.call x1829 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1830)|])
                                | None -> ());
                               x1829))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1843 : 'tags this) ->
        fun ~type_:(x1837 : string) ->
          fun ~listener:(x1838 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x1839 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1845 = this_to_js Obj.magic x1843 in
                   Ojs.call (Ojs.get_prop_ascii x1845 "removeEventListener")
                     "apply"
                     [|x1845;((let x1840 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1840 "push"
                                    [|(Ojs.string_to_js x1837)|]);
                               ignore
                                 (Ojs.call x1840 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1838)|]);
                               (match x1839 with
                                | Some x1841 ->
                                    ignore
                                      (Ojs.call x1840 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1841)|])
                                | None -> ());
                               x1840))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
             [||])
  end
module IDBDatabaseInfo =
  struct
    type t = [ `IDBDatabaseInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1847 : Ojs.t) -> t_of_js x1847
    and t_0_to_js : t_0 -> Ojs.t = fun (x1846 : t) -> t_to_js x1846
    type tags = [ `IDBDatabaseInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1850 : Ojs.t) -> intf_of_js __tags_of_js x1850
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1848 : __tags intf) -> intf_to_js __tags_to_js x1848
    let (get_name : 'tags this -> string) =
      fun (x1852 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1852) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x1854 : 'tags this) ->
        fun (x1855 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1854) "name"
            (Ojs.string_to_js x1855)
    let (get_version : 'tags this -> float) =
      fun (x1857 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1857) "version")
    let (set_version : 'tags this -> float -> unit) =
      fun (x1859 : 'tags this) ->
        fun (x1860 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1859) "version"
            (Ojs.float_to_js x1860)
    let (create : name:string -> version:float -> unit -> t) =
      fun ~name:(x1862 : string) ->
        fun ~version:(x1863 : float) ->
          fun () ->
            let x1864 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x1864 "name" (Ojs.string_to_js x1862);
            Ojs.set_prop_ascii x1864 "version" (Ojs.float_to_js x1863);
            t_of_js x1864
    let cast_from = Obj.magic
  end
module IndexedDBStatic =
  struct
    let (cmp : first:any -> second:any -> float) =
      fun ~first:(x1865 : any) ->
        fun ~second:(x1866 : any) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "cmp"
               [|(any_to_js x1865);(any_to_js x1866)|])
    let (databases : unit -> IDBDatabaseInfo.t list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x1867 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x1867)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "databases"
             [||])
    let (deleteDatabase : string -> IDBOpenDBRequest.t) =
      fun (x1869 : string) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB")
             "deleteDatabase" [|(Ojs.string_to_js x1869)|])
    let (open_ : name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun ~name:(x1870 : string) ->
        fun ?version:(x1871 : float option) ->
          fun () ->
            IDBOpenDBRequest.t_of_js
              (let x1874 = Ojs.get_prop_ascii Ojs.global "indexedDB" in
               Ojs.call (Ojs.get_prop_ascii x1874 "open") "apply"
                 [|x1874;((let x1872 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1872 "push"
                                [|(Ojs.string_to_js x1870)|]);
                           (match x1871 with
                            | Some x1873 ->
                                ignore
                                  (Ojs.call x1872 "push"
                                     [|(Ojs.float_to_js x1873)|])
                            | None -> ());
                           x1872))|])
  end
module FontFaceSetLoadStatus =
  struct
    type t = [ `L_s100_loaded  | `L_s102_loading ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1876 : Ojs.t) ->
        let x1877 = x1876 in
        match Ojs.string_of_js x1877 with
        | "loaded" -> `L_s100_loaded
        | "loading" -> `L_s102_loading
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1875 : [ `L_s100_loaded  | `L_s102_loading ]) ->
        match x1875 with
        | `L_s100_loaded -> Ojs.string_to_js "loaded"
        | `L_s102_loading -> Ojs.string_to_js "loading"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1879 : Ojs.t) -> t_of_js x1879
    and t_0_to_js : t_0 -> Ojs.t = fun (x1878 : t) -> t_to_js x1878
  end
module FontFaceLoadStatus =
  struct
    type t =
      [ `L_s100_loaded  | `L_s102_loading  | `L_s197_unloaded 
      | `L_s67_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1881 : Ojs.t) ->
        let x1882 = x1881 in
        match Ojs.string_of_js x1882 with
        | "loaded" -> `L_s100_loaded
        | "loading" -> `L_s102_loading
        | "unloaded" -> `L_s197_unloaded
        | "error" -> `L_s67_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1880 :
          [ `L_s100_loaded  | `L_s102_loading  | `L_s197_unloaded 
          | `L_s67_error ])
        ->
        match x1880 with
        | `L_s100_loaded -> Ojs.string_to_js "loaded"
        | `L_s102_loading -> Ojs.string_to_js "loading"
        | `L_s197_unloaded -> Ojs.string_to_js "unloaded"
        | `L_s67_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1884 : Ojs.t) -> t_of_js x1884
    and t_0_to_js : t_0 -> Ojs.t = fun (x1883 : t) -> t_to_js x1883
  end
module FontFaceDescriptors =
  struct
    type t = [ `FontFaceDescriptors ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1886 : Ojs.t) -> t_of_js x1886
    and t_0_to_js : t_0 -> Ojs.t = fun (x1885 : t) -> t_to_js x1885
    type tags = [ `FontFaceDescriptors ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1889 : Ojs.t) -> intf_of_js __tags_of_js x1889
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1887 : __tags intf) -> intf_to_js __tags_to_js x1887
    let (get_display : 'tags this -> string) =
      fun (x1891 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1891) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x1893 : 'tags this) ->
        fun (x1894 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1893) "display"
            (Ojs.string_to_js x1894)
    let (get_featureSettings : 'tags this -> string) =
      fun (x1896 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1896) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x1898 : 'tags this) ->
        fun (x1899 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1898) "featureSettings"
            (Ojs.string_to_js x1899)
    let (get_stretch : 'tags this -> string) =
      fun (x1901 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1901) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x1903 : 'tags this) ->
        fun (x1904 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1903) "stretch"
            (Ojs.string_to_js x1904)
    let (get_style : 'tags this -> string) =
      fun (x1906 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1906) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x1908 : 'tags this) ->
        fun (x1909 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1908) "style"
            (Ojs.string_to_js x1909)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x1911 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1911) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x1913 : 'tags this) ->
        fun (x1914 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1913) "unicodeRange"
            (Ojs.string_to_js x1914)
    let (get_variant : 'tags this -> string) =
      fun (x1916 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1916) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x1918 : 'tags this) ->
        fun (x1919 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1918) "variant"
            (Ojs.string_to_js x1919)
    let (get_weight : 'tags this -> string) =
      fun (x1921 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1921) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x1923 : 'tags this) ->
        fun (x1924 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1923) "weight"
            (Ojs.string_to_js x1924)
    let (create :
      display:string ->
        featureSettings:string ->
          stretch:string ->
            style:string ->
              unicodeRange:string ->
                variant:string -> weight:string -> unit -> t)
      =
      fun ~display:(x1926 : string) ->
        fun ~featureSettings:(x1927 : string) ->
          fun ~stretch:(x1928 : string) ->
            fun ~style:(x1929 : string) ->
              fun ~unicodeRange:(x1930 : string) ->
                fun ~variant:(x1931 : string) ->
                  fun ~weight:(x1932 : string) ->
                    fun () ->
                      let x1933 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x1933 "display"
                        (Ojs.string_to_js x1926);
                      Ojs.set_prop_ascii x1933 "featureSettings"
                        (Ojs.string_to_js x1927);
                      Ojs.set_prop_ascii x1933 "stretch"
                        (Ojs.string_to_js x1928);
                      Ojs.set_prop_ascii x1933 "style"
                        (Ojs.string_to_js x1929);
                      Ojs.set_prop_ascii x1933 "unicodeRange"
                        (Ojs.string_to_js x1930);
                      Ojs.set_prop_ascii x1933 "variant"
                        (Ojs.string_to_js x1931);
                      Ojs.set_prop_ascii x1933 "weight"
                        (Ojs.string_to_js x1932);
                      t_of_js x1933
    let cast_from = Obj.magic
  end
module BinaryData =
  struct
    type t = never
    let rec t_of_js : Ojs.t -> t = fun (x1935 : Ojs.t) -> never_of_js x1935
    and t_to_js : t -> Ojs.t = fun (x1934 : never) -> never_to_js x1934
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1937 : Ojs.t) -> t_of_js x1937
    and t_0_to_js : t_0 -> Ojs.t = fun (x1936 : t) -> t_to_js x1936
  end
module FontFace =
  struct
    type t = [ `FontFace ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1939 : Ojs.t) -> t_of_js x1939
    and t_0_to_js : t_0 -> Ojs.t = fun (x1938 : t) -> t_to_js x1938
    type tags = [ `FontFace ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1942 : Ojs.t) -> intf_of_js __tags_of_js x1942
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1940 : __tags intf) -> intf_to_js __tags_to_js x1940
    let (get_ascentOverride : 'tags this -> string) =
      fun (x1944 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1944) "ascentOverride")
    let (set_ascentOverride : 'tags this -> string -> unit) =
      fun (x1946 : 'tags this) ->
        fun (x1947 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1946) "ascentOverride"
            (Ojs.string_to_js x1947)
    let (get_descentOverride : 'tags this -> string) =
      fun (x1949 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1949) "descentOverride")
    let (set_descentOverride : 'tags this -> string -> unit) =
      fun (x1951 : 'tags this) ->
        fun (x1952 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1951) "descentOverride"
            (Ojs.string_to_js x1952)
    let (get_display : 'tags this -> string) =
      fun (x1954 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1954) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x1956 : 'tags this) ->
        fun (x1957 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1956) "display"
            (Ojs.string_to_js x1957)
    let (get_family : 'tags this -> string) =
      fun (x1959 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1959) "family")
    let (set_family : 'tags this -> string -> unit) =
      fun (x1961 : 'tags this) ->
        fun (x1962 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1961) "family"
            (Ojs.string_to_js x1962)
    let (get_featureSettings : 'tags this -> string) =
      fun (x1964 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1964) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x1966 : 'tags this) ->
        fun (x1967 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1966) "featureSettings"
            (Ojs.string_to_js x1967)
    let (get_lineGapOverride : 'tags this -> string) =
      fun (x1969 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1969) "lineGapOverride")
    let (set_lineGapOverride : 'tags this -> string -> unit) =
      fun (x1971 : 'tags this) ->
        fun (x1972 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1971) "lineGapOverride"
            (Ojs.string_to_js x1972)
    let (get_loaded : 'tags this -> t Promise.t_1) =
      fun (x1974 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1974) "loaded")
    let (get_status : 'tags this -> FontFaceLoadStatus.t) =
      fun (x1977 : 'tags this) ->
        FontFaceLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1977) "status")
    let (get_stretch : 'tags this -> string) =
      fun (x1979 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1979) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x1981 : 'tags this) ->
        fun (x1982 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1981) "stretch"
            (Ojs.string_to_js x1982)
    let (get_style : 'tags this -> string) =
      fun (x1984 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1984) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x1986 : 'tags this) ->
        fun (x1987 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1986) "style"
            (Ojs.string_to_js x1987)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x1989 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1989) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x1991 : 'tags this) ->
        fun (x1992 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1991) "unicodeRange"
            (Ojs.string_to_js x1992)
    let (get_variant : 'tags this -> string) =
      fun (x1994 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1994) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x1996 : 'tags this) ->
        fun (x1997 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1996) "variant"
            (Ojs.string_to_js x1997)
    let (get_variationSettings : 'tags this -> string) =
      fun (x1999 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1999)
             "variationSettings")
    let (set_variationSettings : 'tags this -> string -> unit) =
      fun (x2001 : 'tags this) ->
        fun (x2002 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2001) "variationSettings"
            (Ojs.string_to_js x2002)
    let (get_weight : 'tags this -> string) =
      fun (x2004 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2004) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x2006 : 'tags this) ->
        fun (x2007 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2006) "weight"
            (Ojs.string_to_js x2007)
    let (load : 'tags this -> t Promise.t_1) =
      fun (x2009 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x2009) "load" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFace")
             "prototype")
    let (create :
      family:string ->
        source:BinaryData.t or_string ->
          ?descriptors:FontFaceDescriptors.t -> unit -> t)
      =
      fun ~family:(x2012 : string) ->
        fun ~source:(x2013 : BinaryData.t or_string) ->
          fun ?descriptors:(x2014 : FontFaceDescriptors.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "FontFace")
                   (let x2015 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2015 "push" [|(Ojs.string_to_js x2012)|]);
                    ignore
                      (Ojs.call x2015 "push"
                         [|(or_string_to_js BinaryData.t_to_js x2013)|]);
                    (match x2014 with
                     | Some x2016 ->
                         ignore
                           (Ojs.call x2015 "push"
                              [|(FontFaceDescriptors.t_to_js x2016)|])
                     | None -> ());
                    x2015))
  end
module FontFaceSet =
  struct
    type t = [ `EventTarget  | `FontFaceSet ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2019 : Ojs.t) -> t_of_js x2019
    and t_0_to_js : t_0 -> Ojs.t = fun (x2018 : t) -> t_to_js x2018
    type tags = [ `EventTarget  | `FontFaceSet ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2022 : Ojs.t) -> intf_of_js __tags_of_js x2022
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2020 : __tags intf) -> intf_to_js __tags_to_js x2020
    let (get_onloading : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x2024 : 'tags this) ->
        or_null_of_js
          (fun (x2026 : Ojs.t) ->
             fun ~this:(x2027 : t) ->
               fun ~ev:(x2028 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2026 [|(t_to_js x2027);(Event.t_to_js x2028)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2024) "onloading")
    let (set_onloading :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x2029 : 'tags this) ->
        fun (x2030 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2029) "onloading"
            (or_null_to_js
               (fun (x2031 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2032 : Ojs.t) ->
                       fun (x2033 : Ojs.t) ->
                         any_to_js
                           (x2031 ~this:(t_of_js x2032)
                              ~ev:(Event.t_of_js x2033)))) x2030)
    let (get_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x2035 : 'tags this) ->
        or_null_of_js
          (fun (x2037 : Ojs.t) ->
             fun ~this:(x2038 : t) ->
               fun ~ev:(x2039 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2037 [|(t_to_js x2038);(Event.t_to_js x2039)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2035) "onloadingdone")
    let (set_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x2040 : 'tags this) ->
        fun (x2041 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2040) "onloadingdone"
            (or_null_to_js
               (fun (x2042 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2043 : Ojs.t) ->
                       fun (x2044 : Ojs.t) ->
                         any_to_js
                           (x2042 ~this:(t_of_js x2043)
                              ~ev:(Event.t_of_js x2044)))) x2041)
    let (get_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x2046 : 'tags this) ->
        or_null_of_js
          (fun (x2048 : Ojs.t) ->
             fun ~this:(x2049 : t) ->
               fun ~ev:(x2050 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2048 [|(t_to_js x2049);(Event.t_to_js x2050)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2046) "onloadingerror")
    let (set_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x2051 : 'tags this) ->
        fun (x2052 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2051) "onloadingerror"
            (or_null_to_js
               (fun (x2053 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x2054 : Ojs.t) ->
                       fun (x2055 : Ojs.t) ->
                         any_to_js
                           (x2053 ~this:(t_of_js x2054)
                              ~ev:(Event.t_of_js x2055)))) x2052)
    let (get_ready : 'tags this -> t Promise.t_1) =
      fun (x2057 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2057) "ready")
    let (get_status : 'tags this -> FontFaceSetLoadStatus.t) =
      fun (x2060 : 'tags this) ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2060) "status")
    let (check : 'tags this -> font:string -> ?text:string -> unit -> bool) =
      fun (x2066 : 'tags this) ->
        fun ~font:(x2062 : string) ->
          fun ?text:(x2063 : string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2068 = this_to_js Obj.magic x2066 in
                 Ojs.call (Ojs.get_prop_ascii x2068 "check") "apply"
                   [|x2068;((let x2064 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2064 "push"
                                  [|(Ojs.string_to_js x2062)|]);
                             (match x2063 with
                              | Some x2065 ->
                                  ignore
                                    (Ojs.call x2064 "push"
                                       [|(Ojs.string_to_js x2065)|])
                              | None -> ());
                             x2064))|])
    let (load :
      'tags this ->
        font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1)
      =
      fun (x2073 : 'tags this) ->
        fun ~font:(x2069 : string) ->
          fun ?text:(x2070 : string option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x2076 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2076)
                (let x2075 = this_to_js Obj.magic x2073 in
                 Ojs.call (Ojs.get_prop_ascii x2075 "load") "apply"
                   [|x2075;((let x2071 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2071 "push"
                                  [|(Ojs.string_to_js x2069)|]);
                             (match x2070 with
                              | Some x2072 ->
                                  ignore
                                    (Ojs.call x2071 "push"
                                       [|(Ojs.string_to_js x2072)|])
                              | None -> ());
                             x2071))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x2085 : 'tags this) ->
        fun
          ~callbackfn:(x2078 :
                        value:FontFace.t ->
                          key:FontFace.t -> parent:t -> unit)
          ->
          fun ?thisArg:(x2079 : any option) ->
            fun () ->
              ignore
                (let x2087 = this_to_js Obj.magic x2085 in
                 Ojs.call (Ojs.get_prop_ascii x2087 "forEach") "apply"
                   [|x2087;((let x2080 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2080 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2082 : Ojs.t) ->
                                          fun (x2083 : Ojs.t) ->
                                            fun (x2084 : Ojs.t) ->
                                              x2078
                                                ~value:(FontFace.t_of_js
                                                          x2082)
                                                ~key:(FontFace.t_of_js x2083)
                                                ~parent:(t_of_js x2084)))|]);
                             (match x2079 with
                              | Some x2081 ->
                                  ignore
                                    (Ojs.call x2080 "push"
                                       [|(any_to_js x2081)|])
                              | None -> ());
                             x2080))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2096 : 'tags this) ->
        fun ~type_:(x2088 : 'K) ->
          fun ~listener:(x2089 : this:t -> ev:any -> any) ->
            fun
              ?options:(x2090 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2098 = this_to_js Obj.magic x2096 in
                   Ojs.call (Ojs.get_prop_ascii x2098 "addEventListener")
                     "apply"
                     [|x2098;((let x2091 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2091 "push" [|(Obj.magic x2088)|]);
                               ignore
                                 (Ojs.call x2091 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2094 : Ojs.t) ->
                                            fun (x2095 : Ojs.t) ->
                                              any_to_js
                                                (x2089 ~this:(t_of_js x2094)
                                                   ~ev:(any_of_js x2095))))|]);
                               (match x2090 with
                                | Some x2092 ->
                                    ignore
                                      (Ojs.call x2091 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x2092)|])
                                | None -> ());
                               x2091))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2105 : 'tags this) ->
        fun ~type_:(x2099 : string) ->
          fun ~listener:(x2100 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x2101 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2107 = this_to_js Obj.magic x2105 in
                   Ojs.call (Ojs.get_prop_ascii x2107 "addEventListener")
                     "apply"
                     [|x2107;((let x2102 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2102 "push"
                                    [|(Ojs.string_to_js x2099)|]);
                               ignore
                                 (Ojs.call x2102 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2100)|]);
                               (match x2101 with
                                | Some x2103 ->
                                    ignore
                                      (Ojs.call x2102 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x2103)|])
                                | None -> ());
                               x2102))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2116 : 'tags this) ->
        fun ~type_:(x2108 : 'K) ->
          fun ~listener:(x2109 : this:t -> ev:any -> any) ->
            fun ?options:(x2110 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2118 = this_to_js Obj.magic x2116 in
                   Ojs.call (Ojs.get_prop_ascii x2118 "removeEventListener")
                     "apply"
                     [|x2118;((let x2111 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2111 "push" [|(Obj.magic x2108)|]);
                               ignore
                                 (Ojs.call x2111 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2114 : Ojs.t) ->
                                            fun (x2115 : Ojs.t) ->
                                              any_to_js
                                                (x2109 ~this:(t_of_js x2114)
                                                   ~ev:(any_of_js x2115))))|]);
                               (match x2110 with
                                | Some x2112 ->
                                    ignore
                                      (Ojs.call x2111 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x2112)|])
                                | None -> ());
                               x2111))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x2125 : 'tags this) ->
        fun ~type_:(x2119 : string) ->
          fun ~listener:(x2120 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x2121 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x2127 = this_to_js Obj.magic x2125 in
                   Ojs.call (Ojs.get_prop_ascii x2127 "removeEventListener")
                     "apply"
                     [|x2127;((let x2122 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2122 "push"
                                    [|(Ojs.string_to_js x2119)|]);
                               ignore
                                 (Ojs.call x2122 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x2120)|]);
                               (match x2121 with
                                | Some x2123 ->
                                    ignore
                                      (Ojs.call x2122 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x2123)|])
                                | None -> ());
                               x2122))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             "prototype")
    let (create : FontFace.t list -> t) =
      fun (x2128 : FontFace.t list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             [|(Ojs.list_to_js FontFace.t_to_js x2128)|])
  end
module FontsStatic =
  struct
    let (onloading :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x2130 : Ojs.t) ->
             fun ~this:(x2131 : FontFaceSet.t) ->
               fun ~ev:(x2132 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2130
                      [|(FontFaceSet.t_to_js x2131);(Event.t_to_js x2132)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloading")
    let (onloadingdone :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x2133 : Ojs.t) ->
             fun ~this:(x2134 : FontFaceSet.t) ->
               fun ~ev:(x2135 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2133
                      [|(FontFaceSet.t_to_js x2134);(Event.t_to_js x2135)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingdone")
    let (onloadingerror :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x2136 : Ojs.t) ->
             fun ~this:(x2137 : FontFaceSet.t) ->
               fun ~ev:(x2138 : Event.t) ->
                 any_of_js
                   (Ojs.apply x2136
                      [|(FontFaceSet.t_to_js x2137);(Event.t_to_js x2138)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingerror")
    let (ready : unit -> FontFaceSet.t Promise.t_1) =
      fun () ->
        Promise.t_1_of_js FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts") "ready")
    let (status : unit -> FontFaceSetLoadStatus.t) =
      fun () ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "status")
    let (check : font:string -> ?text:string -> unit -> bool) =
      fun ~font:(x2140 : string) ->
        fun ?text:(x2141 : string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x2144 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2144 "check") "apply"
                 [|x2144;((let x2142 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2142 "push"
                                [|(Ojs.string_to_js x2140)|]);
                           (match x2141 with
                            | Some x2143 ->
                                ignore
                                  (Ojs.call x2142 "push"
                                     [|(Ojs.string_to_js x2143)|])
                            | None -> ());
                           x2142))|])
    let (load :
      font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1) =
      fun ~font:(x2145 : string) ->
        fun ?text:(x2146 : string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x2150 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2150)
              (let x2149 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2149 "load") "apply"
                 [|x2149;((let x2147 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2147 "push"
                                [|(Ojs.string_to_js x2145)|]);
                           (match x2146 with
                            | Some x2148 ->
                                ignore
                                  (Ojs.call x2147 "push"
                                     [|(Ojs.string_to_js x2148)|])
                            | None -> ());
                           x2147))|])
    let (forEach :
      callbackfn:(value:FontFace.t ->
                    key:FontFace.t -> parent:FontFaceSet.t -> unit)
        -> ?thisArg:any -> unit -> unit)
      =
      fun
        ~callbackfn:(x2152 :
                      value:FontFace.t ->
                        key:FontFace.t -> parent:FontFaceSet.t -> unit)
        ->
        fun ?thisArg:(x2153 : any option) ->
          fun () ->
            ignore
              (let x2159 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2159 "forEach") "apply"
                 [|x2159;((let x2154 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2154 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x2156 : Ojs.t) ->
                                        fun (x2157 : Ojs.t) ->
                                          fun (x2158 : Ojs.t) ->
                                            x2152
                                              ~value:(FontFace.t_of_js x2156)
                                              ~key:(FontFace.t_of_js x2157)
                                              ~parent:(FontFaceSet.t_of_js
                                                         x2158)))|]);
                           (match x2153 with
                            | Some x2155 ->
                                ignore
                                  (Ojs.call x2154 "push"
                                     [|(any_to_js x2155)|])
                            | None -> ());
                           x2154))|])
    let (addEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2160 : 'K) ->
        fun ~listener:(x2161 : this:FontFaceSet.t -> ev:any -> any) ->
          fun ?options:(x2162 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x2168 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2168 "addEventListener")
                   "apply"
                   [|x2168;((let x2163 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2163 "push" [|(Obj.magic x2160)|]);
                             ignore
                               (Ojs.call x2163 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2166 : Ojs.t) ->
                                          fun (x2167 : Ojs.t) ->
                                            any_to_js
                                              (x2161
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2166)
                                                 ~ev:(any_of_js x2167))))|]);
                             (match x2162 with
                              | Some x2164 ->
                                  ignore
                                    (Ojs.call x2163 "push"
                                       [|(or_boolean_to_js
                                            AddEventListenerOptions.t_to_js
                                            x2164)|])
                              | None -> ());
                             x2163))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2169 : string) ->
        fun ~listener:(x2170 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x2171 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x2175 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2175 "addEventListener")
                   "apply"
                   [|x2175;((let x2172 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2172 "push"
                                  [|(Ojs.string_to_js x2169)|]);
                             ignore
                               (Ojs.call x2172 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2170)|]);
                             (match x2171 with
                              | Some x2173 ->
                                  ignore
                                    (Ojs.call x2172 "push"
                                       [|(or_boolean_to_js
                                            AddEventListenerOptions.t_to_js
                                            x2173)|])
                              | None -> ());
                             x2172))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2176 : 'K) ->
        fun ~listener:(x2177 : this:FontFaceSet.t -> ev:any -> any) ->
          fun ?options:(x2178 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x2184 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2184 "removeEventListener")
                   "apply"
                   [|x2184;((let x2179 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2179 "push" [|(Obj.magic x2176)|]);
                             ignore
                               (Ojs.call x2179 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2182 : Ojs.t) ->
                                          fun (x2183 : Ojs.t) ->
                                            any_to_js
                                              (x2177
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2182)
                                                 ~ev:(any_of_js x2183))))|]);
                             (match x2178 with
                              | Some x2180 ->
                                  ignore
                                    (Ojs.call x2179 "push"
                                       [|(or_boolean_to_js
                                            EventListenerOptions.t_to_js
                                            x2180)|])
                              | None -> ());
                             x2179))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2185 : string) ->
        fun ~listener:(x2186 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x2187 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x2191 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2191 "removeEventListener")
                   "apply"
                   [|x2191;((let x2188 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2188 "push"
                                  [|(Ojs.string_to_js x2185)|]);
                             ignore
                               (Ojs.call x2188 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2186)|]);
                             (match x2187 with
                              | Some x2189 ->
                                  ignore
                                    (Ojs.call x2188 "push"
                                       [|(or_boolean_to_js
                                            EventListenerOptions.t_to_js
                                            x2189)|])
                              | None -> ());
                             x2188))|])
  end
module Algorithm =
  struct
    type t = [ `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2193 : Ojs.t) -> t_of_js x2193
    and t_0_to_js : t_0 -> Ojs.t = fun (x2192 : t) -> t_to_js x2192
    type tags = [ `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2196 : Ojs.t) -> intf_of_js __tags_of_js x2196
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2194 : __tags intf) -> intf_to_js __tags_to_js x2194
    let (get_name : 'tags this -> string) =
      fun (x2198 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2198) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2200 : 'tags this) ->
        fun (x2201 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2200) "name"
            (Ojs.string_to_js x2201)
    let (create : name:string -> unit -> t) =
      fun ~name:(x2203 : string) ->
        fun () ->
          let x2204 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2204 "name" (Ojs.string_to_js x2203);
          t_of_js x2204
    let cast_from = Obj.magic
  end
module RsaPssParams =
  struct
    type t = [ `Algorithm  | `RsaPssParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2206 : Ojs.t) -> t_of_js x2206
    and t_0_to_js : t_0 -> Ojs.t = fun (x2205 : t) -> t_to_js x2205
    type tags = [ `Algorithm  | `RsaPssParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2209 : Ojs.t) -> intf_of_js __tags_of_js x2209
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2207 : __tags intf) -> intf_to_js __tags_to_js x2207
    let (get_saltLength : 'tags this -> float) =
      fun (x2211 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2211) "saltLength")
    let (set_saltLength : 'tags this -> float -> unit) =
      fun (x2213 : 'tags this) ->
        fun (x2214 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2213) "saltLength"
            (Ojs.float_to_js x2214)
    let (create : saltLength:float -> unit -> t) =
      fun ~saltLength:(x2216 : float) ->
        fun () ->
          let x2217 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2217 "saltLength" (Ojs.float_to_js x2216);
          t_of_js x2217
    let cast_from = Obj.magic
  end
module RsaOaepParams =
  struct
    type t = [ `Algorithm  | `RsaOaepParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2219 : Ojs.t) -> t_of_js x2219
    and t_0_to_js : t_0 -> Ojs.t = fun (x2218 : t) -> t_to_js x2218
    type tags = [ `Algorithm  | `RsaOaepParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2222 : Ojs.t) -> intf_of_js __tags_of_js x2222
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2220 : __tags intf) -> intf_to_js __tags_to_js x2220
    let (get_label : 'tags this -> BufferSource.t) =
      fun (x2224 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2224) "label")
    let (set_label : 'tags this -> BufferSource.t -> unit) =
      fun (x2226 : 'tags this) ->
        fun (x2227 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2226) "label"
            (BufferSource.t_to_js x2227)
    let (create : label:BufferSource.t -> unit -> t) =
      fun ~label:(x2229 : BufferSource.t) ->
        fun () ->
          let x2230 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2230 "label" (BufferSource.t_to_js x2229);
          t_of_js x2230
    let cast_from = Obj.magic
  end
module BigInteger =
  struct
    type t = Uint8Array.t_0
    let rec t_of_js : Ojs.t -> t =
      fun (x2232 : Ojs.t) -> Uint8Array.t_0_of_js x2232
    and t_to_js : t -> Ojs.t =
      fun (x2231 : Uint8Array.t_0) -> Uint8Array.t_0_to_js x2231
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2234 : Ojs.t) -> t_of_js x2234
    and t_0_to_js : t_0 -> Ojs.t = fun (x2233 : t) -> t_to_js x2233
  end
module RsaKeyGenParams =
  struct
    type t = [ `Algorithm  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2236 : Ojs.t) -> t_of_js x2236
    and t_0_to_js : t_0 -> Ojs.t = fun (x2235 : t) -> t_to_js x2235
    type tags = [ `Algorithm  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2239 : Ojs.t) -> intf_of_js __tags_of_js x2239
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2237 : __tags intf) -> intf_to_js __tags_to_js x2237
    let (get_modulusLength : 'tags this -> float) =
      fun (x2241 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2241) "modulusLength")
    let (set_modulusLength : 'tags this -> float -> unit) =
      fun (x2243 : 'tags this) ->
        fun (x2244 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2243) "modulusLength"
            (Ojs.float_to_js x2244)
    let (get_publicExponent : 'tags this -> BigInteger.t) =
      fun (x2246 : 'tags this) ->
        BigInteger.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2246) "publicExponent")
    let (set_publicExponent : 'tags this -> BigInteger.t -> unit) =
      fun (x2248 : 'tags this) ->
        fun (x2249 : BigInteger.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2248) "publicExponent"
            (BigInteger.t_to_js x2249)
    let (create :
      modulusLength:float -> publicExponent:BigInteger.t -> unit -> t) =
      fun ~modulusLength:(x2251 : float) ->
        fun ~publicExponent:(x2252 : BigInteger.t) ->
          fun () ->
            let x2253 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2253 "modulusLength" (Ojs.float_to_js x2251);
            Ojs.set_prop_ascii x2253 "publicExponent"
              (BigInteger.t_to_js x2252);
            t_of_js x2253
    let cast_from = Obj.magic
  end
module AlgorithmIdentifier =
  struct
    type t = Algorithm.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x2256 : Ojs.t) -> or_string_of_js Algorithm.t_of_js x2256
    and t_to_js : t -> Ojs.t =
      fun (x2254 : Algorithm.t or_string) ->
        or_string_to_js Algorithm.t_to_js x2254
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2259 : Ojs.t) -> t_of_js x2259
    and t_0_to_js : t_0 -> Ojs.t = fun (x2258 : t) -> t_to_js x2258
  end
module HashAlgorithmIdentifier =
  struct
    type t = AlgorithmIdentifier.t
    let rec t_of_js : Ojs.t -> t =
      fun (x2261 : Ojs.t) -> AlgorithmIdentifier.t_of_js x2261
    and t_to_js : t -> Ojs.t =
      fun (x2260 : AlgorithmIdentifier.t) ->
        AlgorithmIdentifier.t_to_js x2260
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2263 : Ojs.t) -> t_of_js x2263
    and t_0_to_js : t_0 -> Ojs.t = fun (x2262 : t) -> t_to_js x2262
  end
module RsaHashedKeyGenParams =
  struct
    type t =
      [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2265 : Ojs.t) -> t_of_js x2265
    and t_0_to_js : t_0 -> Ojs.t = fun (x2264 : t) -> t_to_js x2264
    type tags = [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2268 : Ojs.t) -> intf_of_js __tags_of_js x2268
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2266 : __tags intf) -> intf_to_js __tags_to_js x2266
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2270 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2270) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2272 : 'tags this) ->
        fun (x2273 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2272) "hash"
            (HashAlgorithmIdentifier.t_to_js x2273)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x2275 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x2276 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2276 "hash"
            (HashAlgorithmIdentifier.t_to_js x2275);
          t_of_js x2276
    let cast_from = Obj.magic
  end
module RsaHashedImportParams =
  struct
    type t = [ `Algorithm  | `RsaHashedImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2278 : Ojs.t) -> t_of_js x2278
    and t_0_to_js : t_0 -> Ojs.t = fun (x2277 : t) -> t_to_js x2277
    type tags = [ `Algorithm  | `RsaHashedImportParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2281 : Ojs.t) -> intf_of_js __tags_of_js x2281
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2279 : __tags intf) -> intf_to_js __tags_to_js x2279
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2283 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2283) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2285 : 'tags this) ->
        fun (x2286 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2285) "hash"
            (HashAlgorithmIdentifier.t_to_js x2286)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x2288 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x2289 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2289 "hash"
            (HashAlgorithmIdentifier.t_to_js x2288);
          t_of_js x2289
    let cast_from = Obj.magic
  end
module Pbkdf2Params =
  struct
    type t = [ `Algorithm  | `Pbkdf2Params ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2291 : Ojs.t) -> t_of_js x2291
    and t_0_to_js : t_0 -> Ojs.t = fun (x2290 : t) -> t_to_js x2290
    type tags = [ `Algorithm  | `Pbkdf2Params ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2294 : Ojs.t) -> intf_of_js __tags_of_js x2294
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2292 : __tags intf) -> intf_to_js __tags_to_js x2292
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2296 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2296) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2298 : 'tags this) ->
        fun (x2299 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2298) "hash"
            (HashAlgorithmIdentifier.t_to_js x2299)
    let (get_iterations : 'tags this -> float) =
      fun (x2301 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2301) "iterations")
    let (set_iterations : 'tags this -> float -> unit) =
      fun (x2303 : 'tags this) ->
        fun (x2304 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2303) "iterations"
            (Ojs.float_to_js x2304)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2306 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2306) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2308 : 'tags this) ->
        fun (x2309 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2308) "salt"
            (BufferSource.t_to_js x2309)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        iterations:float -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x2311 : HashAlgorithmIdentifier.t) ->
        fun ~iterations:(x2312 : float) ->
          fun ~salt:(x2313 : BufferSource.t) ->
            fun () ->
              let x2314 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x2314 "hash"
                (HashAlgorithmIdentifier.t_to_js x2311);
              Ojs.set_prop_ascii x2314 "iterations" (Ojs.float_to_js x2312);
              Ojs.set_prop_ascii x2314 "salt" (BufferSource.t_to_js x2313);
              t_of_js x2314
    let cast_from = Obj.magic
  end
module KeyFormat =
  struct
    type t = [ `L_s150_pkcs8  | `L_s160_raw  | `L_s182_spki  | `L_s97_jwk ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2316 : Ojs.t) ->
        let x2317 = x2316 in
        match Ojs.string_of_js x2317 with
        | "pkcs8" -> `L_s150_pkcs8
        | "raw" -> `L_s160_raw
        | "spki" -> `L_s182_spki
        | "jwk" -> `L_s97_jwk
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2315 :
          [ `L_s150_pkcs8  | `L_s160_raw  | `L_s182_spki  | `L_s97_jwk ])
        ->
        match x2315 with
        | `L_s150_pkcs8 -> Ojs.string_to_js "pkcs8"
        | `L_s160_raw -> Ojs.string_to_js "raw"
        | `L_s182_spki -> Ojs.string_to_js "spki"
        | `L_s97_jwk -> Ojs.string_to_js "jwk"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2319 : Ojs.t) -> t_of_js x2319
    and t_0_to_js : t_0 -> Ojs.t = fun (x2318 : t) -> t_to_js x2318
  end
module RsaOtherPrimesInfo =
  struct
    type t = [ `RsaOtherPrimesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2321 : Ojs.t) -> t_of_js x2321
    and t_0_to_js : t_0 -> Ojs.t = fun (x2320 : t) -> t_to_js x2320
    type tags = [ `RsaOtherPrimesInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2324 : Ojs.t) -> intf_of_js __tags_of_js x2324
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2322 : __tags intf) -> intf_to_js __tags_to_js x2322
    let (get_d : 'tags this -> string) =
      fun (x2326 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2326) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2328 : 'tags this) ->
        fun (x2329 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2328) "d"
            (Ojs.string_to_js x2329)
    let (get_r : 'tags this -> string) =
      fun (x2331 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2331) "r")
    let (set_r : 'tags this -> string -> unit) =
      fun (x2333 : 'tags this) ->
        fun (x2334 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2333) "r"
            (Ojs.string_to_js x2334)
    let (get_t : 'tags this -> string) =
      fun (x2336 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2336) "t")
    let (set_t : 'tags this -> string -> unit) =
      fun (x2338 : 'tags this) ->
        fun (x2339 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2338) "t"
            (Ojs.string_to_js x2339)
    let (create : d:string -> r:string -> t:string -> unit -> t) =
      fun ~d:(x2341 : string) ->
        fun ~r:(x2342 : string) ->
          fun ~t:(x2343 : string) ->
            fun () ->
              let x2344 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x2344 "d" (Ojs.string_to_js x2341);
              Ojs.set_prop_ascii x2344 "r" (Ojs.string_to_js x2342);
              Ojs.set_prop_ascii x2344 "t" (Ojs.string_to_js x2343);
              t_of_js x2344
    let cast_from = Obj.magic
  end
module JsonWebKey =
  struct
    type t = [ `JsonWebKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2346 : Ojs.t) -> t_of_js x2346
    and t_0_to_js : t_0 -> Ojs.t = fun (x2345 : t) -> t_to_js x2345
    type tags = [ `JsonWebKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2349 : Ojs.t) -> intf_of_js __tags_of_js x2349
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2347 : __tags intf) -> intf_to_js __tags_to_js x2347
    let (get_alg : 'tags this -> string) =
      fun (x2351 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2351) "alg")
    let (set_alg : 'tags this -> string -> unit) =
      fun (x2353 : 'tags this) ->
        fun (x2354 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2353) "alg"
            (Ojs.string_to_js x2354)
    let (get_crv : 'tags this -> string) =
      fun (x2356 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2356) "crv")
    let (set_crv : 'tags this -> string -> unit) =
      fun (x2358 : 'tags this) ->
        fun (x2359 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2358) "crv"
            (Ojs.string_to_js x2359)
    let (get_d : 'tags this -> string) =
      fun (x2361 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2361) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2363 : 'tags this) ->
        fun (x2364 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2363) "d"
            (Ojs.string_to_js x2364)
    let (get_dp : 'tags this -> string) =
      fun (x2366 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2366) "dp")
    let (set_dp : 'tags this -> string -> unit) =
      fun (x2368 : 'tags this) ->
        fun (x2369 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2368) "dp"
            (Ojs.string_to_js x2369)
    let (get_dq : 'tags this -> string) =
      fun (x2371 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2371) "dq")
    let (set_dq : 'tags this -> string -> unit) =
      fun (x2373 : 'tags this) ->
        fun (x2374 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2373) "dq"
            (Ojs.string_to_js x2374)
    let (get_e : 'tags this -> string) =
      fun (x2376 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2376) "e")
    let (set_e : 'tags this -> string -> unit) =
      fun (x2378 : 'tags this) ->
        fun (x2379 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2378) "e"
            (Ojs.string_to_js x2379)
    let (get_ext : 'tags this -> bool) =
      fun (x2381 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2381) "ext")
    let (set_ext : 'tags this -> bool -> unit) =
      fun (x2383 : 'tags this) ->
        fun (x2384 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2383) "ext"
            (Ojs.bool_to_js x2384)
    let (get_k : 'tags this -> string) =
      fun (x2386 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2386) "k")
    let (set_k : 'tags this -> string -> unit) =
      fun (x2388 : 'tags this) ->
        fun (x2389 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2388) "k"
            (Ojs.string_to_js x2389)
    let (get_key_ops : 'tags this -> string list) =
      fun (x2391 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2391) "key_ops")
    let (set_key_ops : 'tags this -> string list -> unit) =
      fun (x2394 : 'tags this) ->
        fun (x2395 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2394) "key_ops"
            (Ojs.list_to_js Ojs.string_to_js x2395)
    let (get_kty : 'tags this -> string) =
      fun (x2398 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2398) "kty")
    let (set_kty : 'tags this -> string -> unit) =
      fun (x2400 : 'tags this) ->
        fun (x2401 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2400) "kty"
            (Ojs.string_to_js x2401)
    let (get_n : 'tags this -> string) =
      fun (x2403 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2403) "n")
    let (set_n : 'tags this -> string -> unit) =
      fun (x2405 : 'tags this) ->
        fun (x2406 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2405) "n"
            (Ojs.string_to_js x2406)
    let (get_oth : 'tags this -> RsaOtherPrimesInfo.t list) =
      fun (x2408 : 'tags this) ->
        Ojs.list_of_js RsaOtherPrimesInfo.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2408) "oth")
    let (set_oth : 'tags this -> RsaOtherPrimesInfo.t list -> unit) =
      fun (x2411 : 'tags this) ->
        fun (x2412 : RsaOtherPrimesInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2411) "oth"
            (Ojs.list_to_js RsaOtherPrimesInfo.t_to_js x2412)
    let (get_p : 'tags this -> string) =
      fun (x2415 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2415) "p")
    let (set_p : 'tags this -> string -> unit) =
      fun (x2417 : 'tags this) ->
        fun (x2418 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2417) "p"
            (Ojs.string_to_js x2418)
    let (get_q : 'tags this -> string) =
      fun (x2420 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2420) "q")
    let (set_q : 'tags this -> string -> unit) =
      fun (x2422 : 'tags this) ->
        fun (x2423 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2422) "q"
            (Ojs.string_to_js x2423)
    let (get_qi : 'tags this -> string) =
      fun (x2425 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2425) "qi")
    let (set_qi : 'tags this -> string -> unit) =
      fun (x2427 : 'tags this) ->
        fun (x2428 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2427) "qi"
            (Ojs.string_to_js x2428)
    let (get_use : 'tags this -> string) =
      fun (x2430 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2430) "use")
    let (set_use : 'tags this -> string -> unit) =
      fun (x2432 : 'tags this) ->
        fun (x2433 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2432) "use"
            (Ojs.string_to_js x2433)
    let (get_x : 'tags this -> string) =
      fun (x2435 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2435) "x")
    let (set_x : 'tags this -> string -> unit) =
      fun (x2437 : 'tags this) ->
        fun (x2438 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2437) "x"
            (Ojs.string_to_js x2438)
    let (get_y : 'tags this -> string) =
      fun (x2440 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2440) "y")
    let (set_y : 'tags this -> string -> unit) =
      fun (x2442 : 'tags this) ->
        fun (x2443 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2442) "y"
            (Ojs.string_to_js x2443)
    let (create :
      alg:string ->
        crv:string ->
          d:string ->
            dp:string ->
              dq:string ->
                e:string ->
                  ext:bool ->
                    k:string ->
                      key_ops:string list ->
                        kty:string ->
                          n:string ->
                            oth:RsaOtherPrimesInfo.t list ->
                              p:string ->
                                q:string ->
                                  qi:string ->
                                    use:string ->
                                      x:string -> y:string -> unit -> t)
      =
      fun ~alg:(x2445 : string) ->
        fun ~crv:(x2446 : string) ->
          fun ~d:(x2447 : string) ->
            fun ~dp:(x2448 : string) ->
              fun ~dq:(x2449 : string) ->
                fun ~e:(x2450 : string) ->
                  fun ~ext:(x2451 : bool) ->
                    fun ~k:(x2452 : string) ->
                      fun ~key_ops:(x2453 : string list) ->
                        fun ~kty:(x2454 : string) ->
                          fun ~n:(x2455 : string) ->
                            fun ~oth:(x2456 : RsaOtherPrimesInfo.t list) ->
                              fun ~p:(x2457 : string) ->
                                fun ~q:(x2458 : string) ->
                                  fun ~qi:(x2459 : string) ->
                                    fun ~use:(x2460 : string) ->
                                      fun ~x:(x2461 : string) ->
                                        fun ~y:(x2462 : string) ->
                                          fun () ->
                                            let x2463 = Ojs.empty_obj () in
                                            Ojs.set_prop_ascii x2463 "alg"
                                              (Ojs.string_to_js x2445);
                                            Ojs.set_prop_ascii x2463 "crv"
                                              (Ojs.string_to_js x2446);
                                            Ojs.set_prop_ascii x2463 "d"
                                              (Ojs.string_to_js x2447);
                                            Ojs.set_prop_ascii x2463 "dp"
                                              (Ojs.string_to_js x2448);
                                            Ojs.set_prop_ascii x2463 "dq"
                                              (Ojs.string_to_js x2449);
                                            Ojs.set_prop_ascii x2463 "e"
                                              (Ojs.string_to_js x2450);
                                            Ojs.set_prop_ascii x2463 "ext"
                                              (Ojs.bool_to_js x2451);
                                            Ojs.set_prop_ascii x2463 "k"
                                              (Ojs.string_to_js x2452);
                                            Ojs.set_prop_ascii x2463 "keyOps"
                                              (Ojs.list_to_js
                                                 Ojs.string_to_js x2453);
                                            Ojs.set_prop_ascii x2463 "kty"
                                              (Ojs.string_to_js x2454);
                                            Ojs.set_prop_ascii x2463 "n"
                                              (Ojs.string_to_js x2455);
                                            Ojs.set_prop_ascii x2463 "oth"
                                              (Ojs.list_to_js
                                                 RsaOtherPrimesInfo.t_to_js
                                                 x2456);
                                            Ojs.set_prop_ascii x2463 "p"
                                              (Ojs.string_to_js x2457);
                                            Ojs.set_prop_ascii x2463 "q"
                                              (Ojs.string_to_js x2458);
                                            Ojs.set_prop_ascii x2463 "qi"
                                              (Ojs.string_to_js x2459);
                                            Ojs.set_prop_ascii x2463 "use"
                                              (Ojs.string_to_js x2460);
                                            Ojs.set_prop_ascii x2463 "x"
                                              (Ojs.string_to_js x2461);
                                            Ojs.set_prop_ascii x2463 "y"
                                              (Ojs.string_to_js x2462);
                                            t_of_js x2463
    let cast_from = Obj.magic
  end
module HmacKeyGenParams =
  struct
    type t = [ `Algorithm  | `HmacKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2467 : Ojs.t) -> t_of_js x2467
    and t_0_to_js : t_0 -> Ojs.t = fun (x2466 : t) -> t_to_js x2466
    type tags = [ `Algorithm  | `HmacKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2470 : Ojs.t) -> intf_of_js __tags_of_js x2470
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2468 : __tags intf) -> intf_to_js __tags_to_js x2468
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2472 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2472) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2474 : 'tags this) ->
        fun (x2475 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2474) "hash"
            (HashAlgorithmIdentifier.t_to_js x2475)
    let (get_length : 'tags this -> float) =
      fun (x2477 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2477) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2479 : 'tags this) ->
        fun (x2480 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2479) "length"
            (Ojs.float_to_js x2480)
    let (create :
      hash:HashAlgorithmIdentifier.t -> length:float -> unit -> t) =
      fun ~hash:(x2482 : HashAlgorithmIdentifier.t) ->
        fun ~length:(x2483 : float) ->
          fun () ->
            let x2484 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2484 "hash"
              (HashAlgorithmIdentifier.t_to_js x2482);
            Ojs.set_prop_ascii x2484 "length" (Ojs.float_to_js x2483);
            t_of_js x2484
    let cast_from = Obj.magic
  end
module HmacImportParams =
  struct
    type t = [ `Algorithm  | `HmacImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2486 : Ojs.t) -> t_of_js x2486
    and t_0_to_js : t_0 -> Ojs.t = fun (x2485 : t) -> t_to_js x2485
    type tags = [ `Algorithm  | `HmacImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2489 : Ojs.t) -> intf_of_js __tags_of_js x2489
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2487 : __tags intf) -> intf_to_js __tags_to_js x2487
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2491 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2491) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2493 : 'tags this) ->
        fun (x2494 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2493) "hash"
            (HashAlgorithmIdentifier.t_to_js x2494)
    let (get_length : 'tags this -> float) =
      fun (x2496 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2496) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2498 : 'tags this) ->
        fun (x2499 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2498) "length"
            (Ojs.float_to_js x2499)
    let (create :
      hash:HashAlgorithmIdentifier.t -> length:float -> unit -> t) =
      fun ~hash:(x2501 : HashAlgorithmIdentifier.t) ->
        fun ~length:(x2502 : float) ->
          fun () ->
            let x2503 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2503 "hash"
              (HashAlgorithmIdentifier.t_to_js x2501);
            Ojs.set_prop_ascii x2503 "length" (Ojs.float_to_js x2502);
            t_of_js x2503
    let cast_from = Obj.magic
  end
module HkdfParams =
  struct
    type t = [ `Algorithm  | `HkdfParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2505 : Ojs.t) -> t_of_js x2505
    and t_0_to_js : t_0 -> Ojs.t = fun (x2504 : t) -> t_to_js x2504
    type tags = [ `Algorithm  | `HkdfParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2508 : Ojs.t) -> intf_of_js __tags_of_js x2508
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2506 : __tags intf) -> intf_to_js __tags_to_js x2506
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2510 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2510) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2512 : 'tags this) ->
        fun (x2513 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2512) "hash"
            (HashAlgorithmIdentifier.t_to_js x2513)
    let (get_info : 'tags this -> BufferSource.t) =
      fun (x2515 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2515) "info")
    let (set_info : 'tags this -> BufferSource.t -> unit) =
      fun (x2517 : 'tags this) ->
        fun (x2518 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2517) "info"
            (BufferSource.t_to_js x2518)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2520 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2520) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2522 : 'tags this) ->
        fun (x2523 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2522) "salt"
            (BufferSource.t_to_js x2523)
    let (create :
      hash:HashAlgorithmIdentifier.t ->
        info:BufferSource.t -> salt:BufferSource.t -> unit -> t)
      =
      fun ~hash:(x2525 : HashAlgorithmIdentifier.t) ->
        fun ~info:(x2526 : BufferSource.t) ->
          fun ~salt:(x2527 : BufferSource.t) ->
            fun () ->
              let x2528 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x2528 "hash"
                (HashAlgorithmIdentifier.t_to_js x2525);
              Ojs.set_prop_ascii x2528 "info" (BufferSource.t_to_js x2526);
              Ojs.set_prop_ascii x2528 "salt" (BufferSource.t_to_js x2527);
              t_of_js x2528
    let cast_from = Obj.magic
  end
module EcdsaParams =
  struct
    type t = [ `Algorithm  | `EcdsaParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2530 : Ojs.t) -> t_of_js x2530
    and t_0_to_js : t_0 -> Ojs.t = fun (x2529 : t) -> t_to_js x2529
    type tags = [ `Algorithm  | `EcdsaParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2533 : Ojs.t) -> intf_of_js __tags_of_js x2533
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2531 : __tags intf) -> intf_to_js __tags_to_js x2531
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2535 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2535) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2537 : 'tags this) ->
        fun (x2538 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2537) "hash"
            (HashAlgorithmIdentifier.t_to_js x2538)
    let (create : hash:HashAlgorithmIdentifier.t -> unit -> t) =
      fun ~hash:(x2540 : HashAlgorithmIdentifier.t) ->
        fun () ->
          let x2541 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2541 "hash"
            (HashAlgorithmIdentifier.t_to_js x2540);
          t_of_js x2541
    let cast_from = Obj.magic
  end
module KeyUsage =
  struct
    type t =
      [ `L_s178_sign  | `L_s199_unwrapKey  | `L_s202_verify 
      | `L_s210_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
      | `L_s60_deriveKey  | `L_s65_encrypt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2543 : Ojs.t) ->
        let x2544 = x2543 in
        match Ojs.string_of_js x2544 with
        | "sign" -> `L_s178_sign
        | "unwrapKey" -> `L_s199_unwrapKey
        | "verify" -> `L_s202_verify
        | "wrapKey" -> `L_s210_wrapKey
        | "decrypt" -> `L_s56_decrypt
        | "deriveBits" -> `L_s59_deriveBits
        | "deriveKey" -> `L_s60_deriveKey
        | "encrypt" -> `L_s65_encrypt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2542 :
          [ `L_s178_sign  | `L_s199_unwrapKey  | `L_s202_verify 
          | `L_s210_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
          | `L_s60_deriveKey  | `L_s65_encrypt ])
        ->
        match x2542 with
        | `L_s178_sign -> Ojs.string_to_js "sign"
        | `L_s199_unwrapKey -> Ojs.string_to_js "unwrapKey"
        | `L_s202_verify -> Ojs.string_to_js "verify"
        | `L_s210_wrapKey -> Ojs.string_to_js "wrapKey"
        | `L_s56_decrypt -> Ojs.string_to_js "decrypt"
        | `L_s59_deriveBits -> Ojs.string_to_js "deriveBits"
        | `L_s60_deriveKey -> Ojs.string_to_js "deriveKey"
        | `L_s65_encrypt -> Ojs.string_to_js "encrypt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2546 : Ojs.t) -> t_of_js x2546
    and t_0_to_js : t_0 -> Ojs.t = fun (x2545 : t) -> t_to_js x2545
  end
module KeyType =
  struct
    type t = [ `L_s155_private  | `L_s158_public  | `L_s175_secret ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2548 : Ojs.t) ->
        let x2549 = x2548 in
        match Ojs.string_of_js x2549 with
        | "private" -> `L_s155_private
        | "public" -> `L_s158_public
        | "secret" -> `L_s175_secret
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x2547 : [ `L_s155_private  | `L_s158_public  | `L_s175_secret ])
        ->
        match x2547 with
        | `L_s155_private -> Ojs.string_to_js "private"
        | `L_s158_public -> Ojs.string_to_js "public"
        | `L_s175_secret -> Ojs.string_to_js "secret"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2551 : Ojs.t) -> t_of_js x2551
    and t_0_to_js : t_0 -> Ojs.t = fun (x2550 : t) -> t_to_js x2550
  end
module KeyAlgorithm =
  struct
    type t = [ `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2553 : Ojs.t) -> t_of_js x2553
    and t_0_to_js : t_0 -> Ojs.t = fun (x2552 : t) -> t_to_js x2552
    type tags = [ `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2556 : Ojs.t) -> intf_of_js __tags_of_js x2556
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2554 : __tags intf) -> intf_to_js __tags_to_js x2554
    let (get_name : 'tags this -> string) =
      fun (x2558 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2558) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2560 : 'tags this) ->
        fun (x2561 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2560) "name"
            (Ojs.string_to_js x2561)
    let (create : name:string -> unit -> t) =
      fun ~name:(x2563 : string) ->
        fun () ->
          let x2564 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2564 "name" (Ojs.string_to_js x2563);
          t_of_js x2564
    let cast_from = Obj.magic
  end
module CryptoKey =
  struct
    type t = [ `CryptoKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2566 : Ojs.t) -> t_of_js x2566
    and t_0_to_js : t_0 -> Ojs.t = fun (x2565 : t) -> t_to_js x2565
    type tags = [ `CryptoKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2569 : Ojs.t) -> intf_of_js __tags_of_js x2569
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2567 : __tags intf) -> intf_to_js __tags_to_js x2567
    let (get_algorithm : 'tags this -> KeyAlgorithm.t) =
      fun (x2571 : 'tags this) ->
        KeyAlgorithm.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2571) "algorithm")
    let (get_extractable : 'tags this -> bool) =
      fun (x2573 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2573) "extractable")
    let (get_type : 'tags this -> KeyType.t) =
      fun (x2575 : 'tags this) ->
        KeyType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2575) "type")
    let (get_usages : 'tags this -> KeyUsage.t list) =
      fun (x2577 : 'tags this) ->
        Ojs.list_of_js KeyUsage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2577) "usages")
    let (create :
      algorithm:KeyAlgorithm.t ->
        extractable:bool ->
          type_:KeyType.t -> usages:KeyUsage.t list -> unit -> t)
      =
      fun ~algorithm:(x2580 : KeyAlgorithm.t) ->
        fun ~extractable:(x2581 : bool) ->
          fun ~type_:(x2582 : KeyType.t) ->
            fun ~usages:(x2583 : KeyUsage.t list) ->
              fun () ->
                let x2584 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x2584 "algorithm"
                  (KeyAlgorithm.t_to_js x2580);
                Ojs.set_prop_ascii x2584 "extractable" (Ojs.bool_to_js x2581);
                Ojs.set_prop_ascii x2584 "type" (KeyType.t_to_js x2582);
                Ojs.set_prop_ascii x2584 "usages"
                  (Ojs.list_to_js KeyUsage.t_to_js x2583);
                t_of_js x2584
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CryptoKey")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CryptoKey") [||])
  end
module EcdhKeyDeriveParams =
  struct
    type t = [ `Algorithm  | `EcdhKeyDeriveParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2587 : Ojs.t) -> t_of_js x2587
    and t_0_to_js : t_0 -> Ojs.t = fun (x2586 : t) -> t_to_js x2586
    type tags = [ `Algorithm  | `EcdhKeyDeriveParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2590 : Ojs.t) -> intf_of_js __tags_of_js x2590
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2588 : __tags intf) -> intf_to_js __tags_to_js x2588
    let (get_public : 'tags this -> CryptoKey.t) =
      fun (x2592 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2592) "public")
    let (set_public : 'tags this -> CryptoKey.t -> unit) =
      fun (x2594 : 'tags this) ->
        fun (x2595 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2594) "public"
            (CryptoKey.t_to_js x2595)
    let (create : public:CryptoKey.t -> unit -> t) =
      fun ~public:(x2597 : CryptoKey.t) ->
        fun () ->
          let x2598 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2598 "public" (CryptoKey.t_to_js x2597);
          t_of_js x2598
    let cast_from = Obj.magic
  end
module NamedCurve =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x2600 : Ojs.t) -> Ojs.string_of_js x2600
    and t_to_js : t -> Ojs.t = fun (x2599 : string) -> Ojs.string_to_js x2599
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2602 : Ojs.t) -> t_of_js x2602
    and t_0_to_js : t_0 -> Ojs.t = fun (x2601 : t) -> t_to_js x2601
  end
module EcKeyImportParams =
  struct
    type t = [ `Algorithm  | `EcKeyImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2604 : Ojs.t) -> t_of_js x2604
    and t_0_to_js : t_0 -> Ojs.t = fun (x2603 : t) -> t_to_js x2603
    type tags = [ `Algorithm  | `EcKeyImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2607 : Ojs.t) -> intf_of_js __tags_of_js x2607
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2605 : __tags intf) -> intf_to_js __tags_to_js x2605
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2609 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2609) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2611 : 'tags this) ->
        fun (x2612 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2611) "namedCurve"
            (NamedCurve.t_to_js x2612)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x2614 : NamedCurve.t) ->
        fun () ->
          let x2615 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2615 "namedCurve" (NamedCurve.t_to_js x2614);
          t_of_js x2615
    let cast_from = Obj.magic
  end
module EcKeyGenParams =
  struct
    type t = [ `Algorithm  | `EcKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2617 : Ojs.t) -> t_of_js x2617
    and t_0_to_js : t_0 -> Ojs.t = fun (x2616 : t) -> t_to_js x2616
    type tags = [ `Algorithm  | `EcKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2620 : Ojs.t) -> intf_of_js __tags_of_js x2620
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2618 : __tags intf) -> intf_to_js __tags_to_js x2618
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2622 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2622) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2624 : 'tags this) ->
        fun (x2625 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2624) "namedCurve"
            (NamedCurve.t_to_js x2625)
    let (create : namedCurve:NamedCurve.t -> unit -> t) =
      fun ~namedCurve:(x2627 : NamedCurve.t) ->
        fun () ->
          let x2628 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2628 "namedCurve" (NamedCurve.t_to_js x2627);
          t_of_js x2628
    let cast_from = Obj.magic
  end
module CryptoKeyPair =
  struct
    type t = [ `CryptoKeyPair ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2630 : Ojs.t) -> t_of_js x2630
    and t_0_to_js : t_0 -> Ojs.t = fun (x2629 : t) -> t_to_js x2629
    type tags = [ `CryptoKeyPair ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2633 : Ojs.t) -> intf_of_js __tags_of_js x2633
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2631 : __tags intf) -> intf_to_js __tags_to_js x2631
    let (get_privateKey : 'tags this -> CryptoKey.t) =
      fun (x2635 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2635) "privateKey")
    let (set_privateKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2637 : 'tags this) ->
        fun (x2638 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2637) "privateKey"
            (CryptoKey.t_to_js x2638)
    let (get_publicKey : 'tags this -> CryptoKey.t) =
      fun (x2640 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2640) "publicKey")
    let (set_publicKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2642 : 'tags this) ->
        fun (x2643 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2642) "publicKey"
            (CryptoKey.t_to_js x2643)
    let (create :
      privateKey:CryptoKey.t -> publicKey:CryptoKey.t -> unit -> t) =
      fun ~privateKey:(x2645 : CryptoKey.t) ->
        fun ~publicKey:(x2646 : CryptoKey.t) ->
          fun () ->
            let x2647 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2647 "privateKey" (CryptoKey.t_to_js x2645);
            Ojs.set_prop_ascii x2647 "publicKey" (CryptoKey.t_to_js x2646);
            t_of_js x2647
    let cast_from = Obj.magic
  end
module AesKeyGenParams =
  struct
    type t = [ `AesKeyGenParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2649 : Ojs.t) -> t_of_js x2649
    and t_0_to_js : t_0 -> Ojs.t = fun (x2648 : t) -> t_to_js x2648
    type tags = [ `AesKeyGenParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2652 : Ojs.t) -> intf_of_js __tags_of_js x2652
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2650 : __tags intf) -> intf_to_js __tags_to_js x2650
    let (get_length : 'tags this -> float) =
      fun (x2654 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2654) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2656 : 'tags this) ->
        fun (x2657 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2656) "length"
            (Ojs.float_to_js x2657)
    let (create : length:float -> unit -> t) =
      fun ~length:(x2659 : float) ->
        fun () ->
          let x2660 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2660 "length" (Ojs.float_to_js x2659);
          t_of_js x2660
    let cast_from = Obj.magic
  end
module AesKeyAlgorithm =
  struct
    type t = [ `AesKeyAlgorithm  | `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2662 : Ojs.t) -> t_of_js x2662
    and t_0_to_js : t_0 -> Ojs.t = fun (x2661 : t) -> t_to_js x2661
    type tags = [ `AesKeyAlgorithm  | `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2665 : Ojs.t) -> intf_of_js __tags_of_js x2665
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2663 : __tags intf) -> intf_to_js __tags_to_js x2663
    let (get_length : 'tags this -> float) =
      fun (x2667 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2667) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2669 : 'tags this) ->
        fun (x2670 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2669) "length"
            (Ojs.float_to_js x2670)
    let (create : length:float -> unit -> t) =
      fun ~length:(x2672 : float) ->
        fun () ->
          let x2673 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2673 "length" (Ojs.float_to_js x2672);
          t_of_js x2673
    let cast_from = Obj.magic
  end
module AesGcmParams =
  struct
    type t = [ `AesGcmParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2675 : Ojs.t) -> t_of_js x2675
    and t_0_to_js : t_0 -> Ojs.t = fun (x2674 : t) -> t_to_js x2674
    type tags = [ `AesGcmParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2678 : Ojs.t) -> intf_of_js __tags_of_js x2678
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2676 : __tags intf) -> intf_to_js __tags_to_js x2676
    let (get_additionalData : 'tags this -> BufferSource.t) =
      fun (x2680 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2680) "additionalData")
    let (set_additionalData : 'tags this -> BufferSource.t -> unit) =
      fun (x2682 : 'tags this) ->
        fun (x2683 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2682) "additionalData"
            (BufferSource.t_to_js x2683)
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2685 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2685) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2687 : 'tags this) ->
        fun (x2688 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2687) "iv"
            (BufferSource.t_to_js x2688)
    let (get_tagLength : 'tags this -> float) =
      fun (x2690 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2690) "tagLength")
    let (set_tagLength : 'tags this -> float -> unit) =
      fun (x2692 : 'tags this) ->
        fun (x2693 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2692) "tagLength"
            (Ojs.float_to_js x2693)
    let (create :
      additionalData:BufferSource.t ->
        iv:BufferSource.t -> tagLength:float -> unit -> t)
      =
      fun ~additionalData:(x2695 : BufferSource.t) ->
        fun ~iv:(x2696 : BufferSource.t) ->
          fun ~tagLength:(x2697 : float) ->
            fun () ->
              let x2698 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x2698 "additionalData"
                (BufferSource.t_to_js x2695);
              Ojs.set_prop_ascii x2698 "iv" (BufferSource.t_to_js x2696);
              Ojs.set_prop_ascii x2698 "tagLength" (Ojs.float_to_js x2697);
              t_of_js x2698
    let cast_from = Obj.magic
  end
module AesDerivedKeyParams =
  struct
    type t = [ `AesDerivedKeyParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2700 : Ojs.t) -> t_of_js x2700
    and t_0_to_js : t_0 -> Ojs.t = fun (x2699 : t) -> t_to_js x2699
    type tags = [ `AesDerivedKeyParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2703 : Ojs.t) -> intf_of_js __tags_of_js x2703
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2701 : __tags intf) -> intf_to_js __tags_to_js x2701
    let (get_length : 'tags this -> float) =
      fun (x2705 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2705) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2707 : 'tags this) ->
        fun (x2708 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2707) "length"
            (Ojs.float_to_js x2708)
    let (create : length:float -> unit -> t) =
      fun ~length:(x2710 : float) ->
        fun () ->
          let x2711 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2711 "length" (Ojs.float_to_js x2710);
          t_of_js x2711
    let cast_from = Obj.magic
  end
module AesCtrParams =
  struct
    type t = [ `AesCtrParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2713 : Ojs.t) -> t_of_js x2713
    and t_0_to_js : t_0 -> Ojs.t = fun (x2712 : t) -> t_to_js x2712
    type tags = [ `AesCtrParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2716 : Ojs.t) -> intf_of_js __tags_of_js x2716
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2714 : __tags intf) -> intf_to_js __tags_to_js x2714
    let (get_counter : 'tags this -> BufferSource.t) =
      fun (x2718 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2718) "counter")
    let (set_counter : 'tags this -> BufferSource.t -> unit) =
      fun (x2720 : 'tags this) ->
        fun (x2721 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2720) "counter"
            (BufferSource.t_to_js x2721)
    let (get_length : 'tags this -> float) =
      fun (x2723 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2723) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2725 : 'tags this) ->
        fun (x2726 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2725) "length"
            (Ojs.float_to_js x2726)
    let (create : counter:BufferSource.t -> length:float -> unit -> t) =
      fun ~counter:(x2728 : BufferSource.t) ->
        fun ~length:(x2729 : float) ->
          fun () ->
            let x2730 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x2730 "counter" (BufferSource.t_to_js x2728);
            Ojs.set_prop_ascii x2730 "length" (Ojs.float_to_js x2729);
            t_of_js x2730
    let cast_from = Obj.magic
  end
module AesCbcParams =
  struct
    type t = [ `AesCbcParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2732 : Ojs.t) -> t_of_js x2732
    and t_0_to_js : t_0 -> Ojs.t = fun (x2731 : t) -> t_to_js x2731
    type tags = [ `AesCbcParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2735 : Ojs.t) -> intf_of_js __tags_of_js x2735
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2733 : __tags intf) -> intf_to_js __tags_to_js x2733
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2737 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2737) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2739 : 'tags this) ->
        fun (x2740 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2739) "iv"
            (BufferSource.t_to_js x2740)
    let (create : iv:BufferSource.t -> unit -> t) =
      fun ~iv:(x2742 : BufferSource.t) ->
        fun () ->
          let x2743 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x2743 "iv" (BufferSource.t_to_js x2742);
          t_of_js x2743
    let cast_from = Obj.magic
  end
module SubtleCrypto =
  struct
    type t = [ `SubtleCrypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2745 : Ojs.t) -> t_of_js x2745
    and t_0_to_js : t_0 -> Ojs.t = fun (x2744 : t) -> t_to_js x2744
    type tags = [ `SubtleCrypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2748 : Ojs.t) -> intf_of_js __tags_of_js x2748
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2746 : __tags intf) -> intf_to_js __tags_to_js x2746
    let (decrypt :
      'tags this ->
        algorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
          AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
          key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2758 : 'tags this) ->
        fun
          ~algorithm:(x2750 :
                       (AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                         AlgorithmIdentifier.t, RsaOaepParams.t) union5)
          ->
          fun ~key:(x2756 : CryptoKey.t) ->
            fun ~data:(x2757 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2758) "decrypt"
                   [|(union5_to_js AesCbcParams.t_to_js AesCtrParams.t_to_js
                        AesGcmParams.t_to_js AlgorithmIdentifier.t_to_js
                        RsaOaepParams.t_to_js x2750);(CryptoKey.t_to_js x2756);(
                     BufferSource.t_to_js x2757)|])
    let (deriveBits :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2768 : 'tags this) ->
        fun
          ~algorithm:(x2761 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2766 : CryptoKey.t) ->
            fun ~length:(x2767 : float) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x2768) "deriveBits"
                   [|(union4_to_js AlgorithmIdentifier.t_to_js
                        EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                        Pbkdf2Params.t_to_js x2761);(CryptoKey.t_to_js x2766);(
                     Ojs.float_to_js x2767)|])
    let (deriveKey :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t ->
            derivedKeyType:(AesDerivedKeyParams.t, AlgorithmIdentifier.t,
              HkdfParams.t, HmacImportParams.t, Pbkdf2Params.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2786 : 'tags this) ->
        fun
          ~algorithm:(x2771 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2776 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2777 :
                                (AesDerivedKeyParams.t,
                                  AlgorithmIdentifier.t, HkdfParams.t,
                                  HmacImportParams.t, Pbkdf2Params.t) union5)
              ->
              fun ~extractable:(x2783 : bool) ->
                fun ~keyUsages:(x2784 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2786) "deriveKey"
                       [|(union4_to_js AlgorithmIdentifier.t_to_js
                            EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                            Pbkdf2Params.t_to_js x2771);(CryptoKey.t_to_js
                                                           x2776);(union5_to_js
                                                                    AesDerivedKeyParams.t_to_js
                                                                    AlgorithmIdentifier.t_to_js
                                                                    HkdfParams.t_to_js
                                                                    HmacImportParams.t_to_js
                                                                    Pbkdf2Params.t_to_js
                                                                    x2777);(
                         Ojs.bool_to_js x2783);(Ojs.list_to_js
                                                  KeyUsage.t_to_js x2784)|])
    let (digest :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2791 : 'tags this) ->
        fun ~algorithm:(x2789 : AlgorithmIdentifier.t) ->
          fun ~data:(x2790 : BufferSource.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2791) "digest"
                 [|(AlgorithmIdentifier.t_to_js x2789);(BufferSource.t_to_js
                                                          x2790)|])
    let (encrypt :
      'tags this ->
        algorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
          AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
          key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2802 : 'tags this) ->
        fun
          ~algorithm:(x2794 :
                       (AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                         AlgorithmIdentifier.t, RsaOaepParams.t) union5)
          ->
          fun ~key:(x2800 : CryptoKey.t) ->
            fun ~data:(x2801 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2802) "encrypt"
                   [|(union5_to_js AesCbcParams.t_to_js AesCtrParams.t_to_js
                        AesGcmParams.t_to_js AlgorithmIdentifier.t_to_js
                        RsaOaepParams.t_to_js x2794);(CryptoKey.t_to_js x2800);(
                     BufferSource.t_to_js x2801)|])
    let (exportKey :
      'tags this ->
        format:[ `L_s97_jwk ] -> key:CryptoKey.t -> JsonWebKey.t Promise.t_1)
      =
      fun (x2807 : 'tags this) ->
        fun ~format:(x2805 : [ `L_s97_jwk ]) ->
          fun ~key:(x2806 : CryptoKey.t) ->
            Promise.t_1_of_js JsonWebKey.t_of_js
              (Ojs.call (this_to_js Obj.magic x2807) "exportKey"
                 [|((match x2805 with | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                   CryptoKey.t_to_js x2806)|])
    let (exportKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2814 : 'tags this) ->
        fun ~format:(x2810 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~key:(x2813 : CryptoKey.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2814) "exportKey"
                 [|(Exclude.t_2_to_js KeyFormat.t_to_js
                      (fun (x2812 : [ `L_s97_jwk ]) ->
                         match x2812 with
                         | `L_s97_jwk -> Ojs.string_to_js "jwk") x2810);(
                   CryptoKey.t_to_js x2813)|])
    let (generateKey :
      'tags this ->
        algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2823 : 'tags this) ->
        fun
          ~algorithm:(x2817 :
                       (EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2)
          ->
          fun ~extractable:(x2820 : bool) ->
            fun ~keyUsages:(x2821 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2823) "generateKey"
                   [|(union2_to_js EcKeyGenParams.t_to_js
                        RsaHashedKeyGenParams.t_to_js x2817);(Ojs.bool_to_js
                                                                x2820);(
                     Ojs.list_to_js KeyUsage.t_to_js x2821)|])
    let (generateKey' :
      'tags this ->
        algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t, Pbkdf2Params.t)
          union3 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2833 : 'tags this) ->
        fun
          ~algorithm:(x2826 :
                       (AesKeyGenParams.t, HmacKeyGenParams.t,
                         Pbkdf2Params.t) union3)
          ->
          fun ~extractable:(x2830 : bool) ->
            fun ~keyUsages:(x2831 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2833) "generateKey"
                   [|(union3_to_js AesKeyGenParams.t_to_js
                        HmacKeyGenParams.t_to_js Pbkdf2Params.t_to_js x2826);(
                     Ojs.bool_to_js x2830);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2831)|])
    let (generateKey'' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t list ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x2840 : 'tags this) ->
        fun ~algorithm:(x2836 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2837 : bool) ->
            fun ~keyUsages:(x2838 : KeyUsage.t list) ->
              Promise.t_1_of_js
                (fun (x2842 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x2842)
                (Ojs.call (this_to_js Obj.magic x2840) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2836);(Ojs.bool_to_js
                                                            x2837);(Ojs.list_to_js
                                                                    KeyUsage.t_to_js
                                                                    x2838)|])
    let (importKey :
      'tags this ->
        format:[ `L_s97_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2856 : 'tags this) ->
        fun ~format:(x2845 : [ `L_s97_jwk ]) ->
          fun ~keyData:(x2846 : JsonWebKey.t) ->
            fun
              ~algorithm:(x2847 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2853 : bool) ->
                fun ~keyUsages:(x2854 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2856) "importKey"
                       [|((match x2845 with
                           | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x2846);(union5_to_js
                                                      AesKeyAlgorithm.t_to_js
                                                      AlgorithmIdentifier.t_to_js
                                                      EcKeyImportParams.t_to_js
                                                      HmacImportParams.t_to_js
                                                      RsaHashedImportParams.t_to_js
                                                      x2847);(Ojs.bool_to_js
                                                                x2853);(
                         Ojs.list_to_js KeyUsage.t_to_js x2854)|])
    let (importKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2872 : 'tags this) ->
        fun ~format:(x2859 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x2862 : BufferSource.t) ->
            fun
              ~algorithm:(x2863 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2869 : bool) ->
                fun ~keyUsages:(x2870 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2872) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x2861 : [ `L_s97_jwk ]) ->
                               match x2861 with
                               | `L_s97_jwk -> Ojs.string_to_js "jwk") x2859);(
                         BufferSource.t_to_js x2862);(union5_to_js
                                                        AesKeyAlgorithm.t_to_js
                                                        AlgorithmIdentifier.t_to_js
                                                        EcKeyImportParams.t_to_js
                                                        HmacImportParams.t_to_js
                                                        RsaHashedImportParams.t_to_js
                                                        x2863);(Ojs.bool_to_js
                                                                  x2869);(
                         Ojs.list_to_js KeyUsage.t_to_js x2870)|])
    let (sign :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
          union3 ->
          key:CryptoKey.t ->
            data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2881 : 'tags this) ->
        fun
          ~algorithm:(x2875 :
                       (AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
                         union3)
          ->
          fun ~key:(x2879 : CryptoKey.t) ->
            fun ~data:(x2880 : BufferSource.t) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x2881) "sign"
                   [|(union3_to_js AlgorithmIdentifier.t_to_js
                        EcdsaParams.t_to_js RsaPssParams.t_to_js x2875);(
                     CryptoKey.t_to_js x2879);(BufferSource.t_to_js x2880)|])
    let (unwrapKey :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                AesGcmParams.t, AlgorithmIdentifier.t, RsaOaepParams.t)
                union5 ->
                unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                  AlgorithmIdentifier.t, EcKeyImportParams.t,
                  HmacImportParams.t, RsaHashedImportParams.t) union5 ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2902 : 'tags this) ->
        fun ~format:(x2884 : KeyFormat.t) ->
          fun ~wrappedKey:(x2885 : BufferSource.t) ->
            fun ~unwrappingKey:(x2886 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x2887 :
                                   (AesCbcParams.t, AesCtrParams.t,
                                     AesGcmParams.t, AlgorithmIdentifier.t,
                                     RsaOaepParams.t) union5)
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x2893 :
                                           (AesKeyAlgorithm.t,
                                             AlgorithmIdentifier.t,
                                             EcKeyImportParams.t,
                                             HmacImportParams.t,
                                             RsaHashedImportParams.t) union5)
                  ->
                  fun ~extractable:(x2899 : bool) ->
                    fun ~keyUsages:(x2900 : KeyUsage.t list) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x2902) "unwrapKey"
                           [|(KeyFormat.t_to_js x2884);(BufferSource.t_to_js
                                                          x2885);(CryptoKey.t_to_js
                                                                    x2886);(
                             union5_to_js AesCbcParams.t_to_js
                               AesCtrParams.t_to_js AesGcmParams.t_to_js
                               AlgorithmIdentifier.t_to_js
                               RsaOaepParams.t_to_js x2887);(union5_to_js
                                                               AesKeyAlgorithm.t_to_js
                                                               AlgorithmIdentifier.t_to_js
                                                               EcKeyImportParams.t_to_js
                                                               HmacImportParams.t_to_js
                                                               RsaHashedImportParams.t_to_js
                                                               x2893);(
                             Ojs.bool_to_js x2899);(Ojs.list_to_js
                                                      KeyUsage.t_to_js x2900)|])
    let (verify :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
          union3 ->
          key:CryptoKey.t ->
            signature:BufferSource.t ->
              data:BufferSource.t -> bool Promise.t_1)
      =
      fun (x2912 : 'tags this) ->
        fun
          ~algorithm:(x2905 :
                       (AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
                         union3)
          ->
          fun ~key:(x2909 : CryptoKey.t) ->
            fun ~signature:(x2910 : BufferSource.t) ->
              fun ~data:(x2911 : BufferSource.t) ->
                Promise.t_1_of_js Ojs.bool_of_js
                  (Ojs.call (this_to_js Obj.magic x2912) "verify"
                     [|(union3_to_js AlgorithmIdentifier.t_to_js
                          EcdsaParams.t_to_js RsaPssParams.t_to_js x2905);(
                       CryptoKey.t_to_js x2909);(BufferSource.t_to_js x2910);(
                       BufferSource.t_to_js x2911)|])
    let (wrapKey :
      'tags this ->
        format:KeyFormat.t ->
          key:CryptoKey.t ->
            wrappingKey:CryptoKey.t ->
              wrapAlgorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
                ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2924 : 'tags this) ->
        fun ~format:(x2915 : KeyFormat.t) ->
          fun ~key:(x2916 : CryptoKey.t) ->
            fun ~wrappingKey:(x2917 : CryptoKey.t) ->
              fun
                ~wrapAlgorithm:(x2918 :
                                 (AesCbcParams.t, AesCtrParams.t,
                                   AesGcmParams.t, AlgorithmIdentifier.t,
                                   RsaOaepParams.t) union5)
                ->
                Promise.t_1_of_js ArrayBuffer.t_0_of_js
                  (Ojs.call (this_to_js Obj.magic x2924) "wrapKey"
                     [|(KeyFormat.t_to_js x2915);(CryptoKey.t_to_js x2916);(
                       CryptoKey.t_to_js x2917);(union5_to_js
                                                   AesCbcParams.t_to_js
                                                   AesCtrParams.t_to_js
                                                   AesGcmParams.t_to_js
                                                   AlgorithmIdentifier.t_to_js
                                                   RsaOaepParams.t_to_js
                                                   x2918)|])
    let (deriveKey' :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t ->
            derivedKeyType:(AesDerivedKeyParams.t, AlgorithmIdentifier.t,
              HkdfParams.t, HmacImportParams.t, Pbkdf2Params.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x2942 : 'tags this) ->
        fun
          ~algorithm:(x2927 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2932 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2933 :
                                (AesDerivedKeyParams.t,
                                  AlgorithmIdentifier.t, HkdfParams.t,
                                  HmacImportParams.t, Pbkdf2Params.t) union5)
              ->
              fun ~extractable:(x2939 : bool) ->
                fun ~keyUsages:(x2940 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2942) "deriveKey"
                       [|(union4_to_js AlgorithmIdentifier.t_to_js
                            EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                            Pbkdf2Params.t_to_js x2927);(CryptoKey.t_to_js
                                                           x2932);(union5_to_js
                                                                    AesDerivedKeyParams.t_to_js
                                                                    AlgorithmIdentifier.t_to_js
                                                                    HkdfParams.t_to_js
                                                                    HmacImportParams.t_to_js
                                                                    Pbkdf2Params.t_to_js
                                                                    x2933);(
                         Ojs.bool_to_js x2939);(Iterable.t_1_to_js
                                                  KeyUsage.t_to_js x2940)|])
    let (generateKey''' :
      'tags this ->
        algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2951 : 'tags this) ->
        fun
          ~algorithm:(x2945 :
                       (EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2)
          ->
          fun ~extractable:(x2948 : bool) ->
            fun ~keyUsages:(x2949 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2951) "generateKey"
                   [|(union2_to_js EcKeyGenParams.t_to_js
                        RsaHashedKeyGenParams.t_to_js x2945);(Ojs.bool_to_js
                                                                x2948);(
                     Ojs.list_to_js KeyUsage.t_to_js x2949)|])
    let (generateKey'''' :
      'tags this ->
        algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t, Pbkdf2Params.t)
          union3 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2961 : 'tags this) ->
        fun
          ~algorithm:(x2954 :
                       (AesKeyGenParams.t, HmacKeyGenParams.t,
                         Pbkdf2Params.t) union3)
          ->
          fun ~extractable:(x2958 : bool) ->
            fun ~keyUsages:(x2959 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2961) "generateKey"
                   [|(union3_to_js AesKeyGenParams.t_to_js
                        HmacKeyGenParams.t_to_js Pbkdf2Params.t_to_js x2954);(
                     Ojs.bool_to_js x2958);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2959)|])
    let (generateKey''''' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t Iterable.t_1 ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x2968 : 'tags this) ->
        fun ~algorithm:(x2964 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2965 : bool) ->
            fun ~keyUsages:(x2966 : KeyUsage.t Iterable.t_1) ->
              Promise.t_1_of_js
                (fun (x2970 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x2970)
                (Ojs.call (this_to_js Obj.magic x2968) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2964);(Ojs.bool_to_js
                                                            x2965);(Iterable.t_1_to_js
                                                                    KeyUsage.t_to_js
                                                                    x2966)|])
    let (importKey'' :
      'tags this ->
        format:[ `L_s97_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2984 : 'tags this) ->
        fun ~format:(x2973 : [ `L_s97_jwk ]) ->
          fun ~keyData:(x2974 : JsonWebKey.t) ->
            fun
              ~algorithm:(x2975 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2981 : bool) ->
                fun ~keyUsages:(x2982 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2984) "importKey"
                       [|((match x2973 with
                           | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x2974);(union5_to_js
                                                      AesKeyAlgorithm.t_to_js
                                                      AlgorithmIdentifier.t_to_js
                                                      EcKeyImportParams.t_to_js
                                                      HmacImportParams.t_to_js
                                                      RsaHashedImportParams.t_to_js
                                                      x2975);(Ojs.bool_to_js
                                                                x2981);(
                         Ojs.list_to_js KeyUsage.t_to_js x2982)|])
    let (importKey''' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x3000 : 'tags this) ->
        fun ~format:(x2987 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x2990 : BufferSource.t) ->
            fun
              ~algorithm:(x2991 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2997 : bool) ->
                fun ~keyUsages:(x2998 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x3000) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x2989 : [ `L_s97_jwk ]) ->
                               match x2989 with
                               | `L_s97_jwk -> Ojs.string_to_js "jwk") x2987);(
                         BufferSource.t_to_js x2990);(union5_to_js
                                                        AesKeyAlgorithm.t_to_js
                                                        AlgorithmIdentifier.t_to_js
                                                        EcKeyImportParams.t_to_js
                                                        HmacImportParams.t_to_js
                                                        RsaHashedImportParams.t_to_js
                                                        x2991);(Ojs.bool_to_js
                                                                  x2997);(
                         Iterable.t_1_to_js KeyUsage.t_to_js x2998)|])
    let (unwrapKey' :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                AesGcmParams.t, AlgorithmIdentifier.t, RsaOaepParams.t)
                union5 ->
                unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                  AlgorithmIdentifier.t, EcKeyImportParams.t,
                  HmacImportParams.t, RsaHashedImportParams.t) union5 ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t Iterable.t_1 ->
                      CryptoKey.t Promise.t_1)
      =
      fun (x3021 : 'tags this) ->
        fun ~format:(x3003 : KeyFormat.t) ->
          fun ~wrappedKey:(x3004 : BufferSource.t) ->
            fun ~unwrappingKey:(x3005 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x3006 :
                                   (AesCbcParams.t, AesCtrParams.t,
                                     AesGcmParams.t, AlgorithmIdentifier.t,
                                     RsaOaepParams.t) union5)
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x3012 :
                                           (AesKeyAlgorithm.t,
                                             AlgorithmIdentifier.t,
                                             EcKeyImportParams.t,
                                             HmacImportParams.t,
                                             RsaHashedImportParams.t) union5)
                  ->
                  fun ~extractable:(x3018 : bool) ->
                    fun ~keyUsages:(x3019 : KeyUsage.t Iterable.t_1) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x3021) "unwrapKey"
                           [|(KeyFormat.t_to_js x3003);(BufferSource.t_to_js
                                                          x3004);(CryptoKey.t_to_js
                                                                    x3005);(
                             union5_to_js AesCbcParams.t_to_js
                               AesCtrParams.t_to_js AesGcmParams.t_to_js
                               AlgorithmIdentifier.t_to_js
                               RsaOaepParams.t_to_js x3006);(union5_to_js
                                                               AesKeyAlgorithm.t_to_js
                                                               AlgorithmIdentifier.t_to_js
                                                               EcKeyImportParams.t_to_js
                                                               HmacImportParams.t_to_js
                                                               RsaHashedImportParams.t_to_js
                                                               x3012);(
                             Ojs.bool_to_js x3018);(Iterable.t_1_to_js
                                                      KeyUsage.t_to_js x3019)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SubtleCrypto") [||])
  end
module CryptoStatic =
  struct
    let (subtle : unit -> SubtleCrypto.t) =
      fun () ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "crypto")
             "subtle")
    let (getRandomValues : 'T -> 'T) =
      fun (x3024 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto")
             "getRandomValues" [|(Obj.magic x3024)|])
  end
module ConsoleStatic =
  struct
    let (assert_ : ?condition:bool -> data:any list -> unit -> unit) =
      fun ?condition:(x3025 : bool option) ->
        fun ~data:(x3026 : any list) ->
          fun () ->
            ignore
              (let x3030 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3030 "assert") "apply"
                 [|x3030;((let x3027 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3025 with
                            | Some x3029 ->
                                ignore
                                  (Ojs.call x3027 "push"
                                     [|(Ojs.bool_to_js x3029)|])
                            | None -> ());
                           List.iter
                             (fun (x3028 : any) ->
                                ignore
                                  (Ojs.call x3027 "push"
                                     [|(any_to_js x3028)|])) x3026;
                           x3027))|])
    let (clear : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "clear" [||])
    let (count : ?label:string -> unit -> unit) =
      fun ?label:(x3031 : string option) ->
        fun () ->
          ignore
            (let x3034 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3034 "count") "apply"
               [|x3034;((let x3032 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3031 with
                          | Some x3033 ->
                              ignore
                                (Ojs.call x3032 "push"
                                   [|(Ojs.string_to_js x3033)|])
                          | None -> ());
                         x3032))|])
    let (countReset : ?label:string -> unit -> unit) =
      fun ?label:(x3035 : string option) ->
        fun () ->
          ignore
            (let x3038 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3038 "countReset") "apply"
               [|x3038;((let x3036 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3035 with
                          | Some x3037 ->
                              ignore
                                (Ojs.call x3036 "push"
                                   [|(Ojs.string_to_js x3037)|])
                          | None -> ());
                         x3036))|])
    let (debug : any list -> unit) =
      fun (x3039 : any list) ->
        ignore
          (let x3042 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3042 "debug") "apply"
             [|x3042;((let x3040 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3041 : any) ->
                            ignore
                              (Ojs.call x3040 "push" [|(any_to_js x3041)|]))
                         x3039;
                       x3040))|])
    let (dir : ?item:any -> ?options:any -> unit -> unit) =
      fun ?item:(x3043 : any option) ->
        fun ?options:(x3044 : any option) ->
          fun () ->
            ignore
              (let x3048 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3048 "dir") "apply"
                 [|x3048;((let x3045 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3043 with
                            | Some x3047 ->
                                ignore
                                  (Ojs.call x3045 "push"
                                     [|(any_to_js x3047)|])
                            | None -> ());
                           (match x3044 with
                            | Some x3046 ->
                                ignore
                                  (Ojs.call x3045 "push"
                                     [|(any_to_js x3046)|])
                            | None -> ());
                           x3045))|])
    let (dirxml : any list -> unit) =
      fun (x3049 : any list) ->
        ignore
          (let x3052 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3052 "dirxml") "apply"
             [|x3052;((let x3050 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3051 : any) ->
                            ignore
                              (Ojs.call x3050 "push" [|(any_to_js x3051)|]))
                         x3049;
                       x3050))|])
    let (error : any list -> unit) =
      fun (x3053 : any list) ->
        ignore
          (let x3056 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3056 "error") "apply"
             [|x3056;((let x3054 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3055 : any) ->
                            ignore
                              (Ojs.call x3054 "push" [|(any_to_js x3055)|]))
                         x3053;
                       x3054))|])
    let (group : any list -> unit) =
      fun (x3057 : any list) ->
        ignore
          (let x3060 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3060 "group") "apply"
             [|x3060;((let x3058 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3059 : any) ->
                            ignore
                              (Ojs.call x3058 "push" [|(any_to_js x3059)|]))
                         x3057;
                       x3058))|])
    let (groupCollapsed : any list -> unit) =
      fun (x3061 : any list) ->
        ignore
          (let x3064 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3064 "groupCollapsed") "apply"
             [|x3064;((let x3062 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3063 : any) ->
                            ignore
                              (Ojs.call x3062 "push" [|(any_to_js x3063)|]))
                         x3061;
                       x3062))|])
    let (groupEnd : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "groupEnd" [||])
    let (info : any list -> unit) =
      fun (x3065 : any list) ->
        ignore
          (let x3068 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3068 "info") "apply"
             [|x3068;((let x3066 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3067 : any) ->
                            ignore
                              (Ojs.call x3066 "push" [|(any_to_js x3067)|]))
                         x3065;
                       x3066))|])
    let (log : any list -> unit) =
      fun (x3069 : any list) ->
        ignore
          (let x3072 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3072 "log") "apply"
             [|x3072;((let x3070 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3071 : any) ->
                            ignore
                              (Ojs.call x3070 "push" [|(any_to_js x3071)|]))
                         x3069;
                       x3070))|])
    let (table : ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun ?tabularData:(x3073 : any option) ->
        fun ?properties:(x3074 : string list option) ->
          fun () ->
            ignore
              (let x3079 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3079 "table") "apply"
                 [|x3079;((let x3075 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3073 with
                            | Some x3078 ->
                                ignore
                                  (Ojs.call x3075 "push"
                                     [|(any_to_js x3078)|])
                            | None -> ());
                           (match x3074 with
                            | Some x3076 ->
                                ignore
                                  (Ojs.call x3075 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x3076)|])
                            | None -> ());
                           x3075))|])
    let (time : ?label:string -> unit -> unit) =
      fun ?label:(x3080 : string option) ->
        fun () ->
          ignore
            (let x3083 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3083 "time") "apply"
               [|x3083;((let x3081 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3080 with
                          | Some x3082 ->
                              ignore
                                (Ojs.call x3081 "push"
                                   [|(Ojs.string_to_js x3082)|])
                          | None -> ());
                         x3081))|])
    let (timeEnd : ?label:string -> unit -> unit) =
      fun ?label:(x3084 : string option) ->
        fun () ->
          ignore
            (let x3087 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3087 "timeEnd") "apply"
               [|x3087;((let x3085 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3084 with
                          | Some x3086 ->
                              ignore
                                (Ojs.call x3085 "push"
                                   [|(Ojs.string_to_js x3086)|])
                          | None -> ());
                         x3085))|])
    let (timeLog : ?label:string -> data:any list -> unit -> unit) =
      fun ?label:(x3088 : string option) ->
        fun ~data:(x3089 : any list) ->
          fun () ->
            ignore
              (let x3093 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x3093 "timeLog") "apply"
                 [|x3093;((let x3090 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3088 with
                            | Some x3092 ->
                                ignore
                                  (Ojs.call x3090 "push"
                                     [|(Ojs.string_to_js x3092)|])
                            | None -> ());
                           List.iter
                             (fun (x3091 : any) ->
                                ignore
                                  (Ojs.call x3090 "push"
                                     [|(any_to_js x3091)|])) x3089;
                           x3090))|])
    let (timeStamp : ?label:string -> unit -> unit) =
      fun ?label:(x3094 : string option) ->
        fun () ->
          ignore
            (let x3097 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x3097 "timeStamp") "apply"
               [|x3097;((let x3095 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x3094 with
                          | Some x3096 ->
                              ignore
                                (Ojs.call x3095 "push"
                                   [|(Ojs.string_to_js x3096)|])
                          | None -> ());
                         x3095))|])
    let (trace : any list -> unit) =
      fun (x3098 : any list) ->
        ignore
          (let x3101 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3101 "trace") "apply"
             [|x3101;((let x3099 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3100 : any) ->
                            ignore
                              (Ojs.call x3099 "push" [|(any_to_js x3100)|]))
                         x3098;
                       x3099))|])
    let (warn : any list -> unit) =
      fun (x3102 : any list) ->
        ignore
          (let x3105 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x3105 "warn") "apply"
             [|x3105;((let x3103 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3104 : any) ->
                            ignore
                              (Ojs.call x3103 "push" [|(any_to_js x3104)|]))
                         x3102;
                       x3103))|])
  end
module CacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3107 : Ojs.t) -> t_of_js x3107
    and t_0_to_js : t_0 -> Ojs.t = fun (x3106 : t) -> t_to_js x3106
    type tags = [ `CacheQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3110 : Ojs.t) -> intf_of_js __tags_of_js x3110
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3108 : __tags intf) -> intf_to_js __tags_to_js x3108
    let (get_ignoreMethod : 'tags this -> bool) =
      fun (x3112 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3112) "ignoreMethod")
    let (set_ignoreMethod : 'tags this -> bool -> unit) =
      fun (x3114 : 'tags this) ->
        fun (x3115 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3114) "ignoreMethod"
            (Ojs.bool_to_js x3115)
    let (get_ignoreSearch : 'tags this -> bool) =
      fun (x3117 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3117) "ignoreSearch")
    let (set_ignoreSearch : 'tags this -> bool -> unit) =
      fun (x3119 : 'tags this) ->
        fun (x3120 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3119) "ignoreSearch"
            (Ojs.bool_to_js x3120)
    let (get_ignoreVary : 'tags this -> bool) =
      fun (x3122 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3122) "ignoreVary")
    let (set_ignoreVary : 'tags this -> bool -> unit) =
      fun (x3124 : 'tags this) ->
        fun (x3125 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3124) "ignoreVary"
            (Ojs.bool_to_js x3125)
    let (create :
      ignoreMethod:bool -> ignoreSearch:bool -> ignoreVary:bool -> unit -> t)
      =
      fun ~ignoreMethod:(x3127 : bool) ->
        fun ~ignoreSearch:(x3128 : bool) ->
          fun ~ignoreVary:(x3129 : bool) ->
            fun () ->
              let x3130 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x3130 "ignoreMethod" (Ojs.bool_to_js x3127);
              Ojs.set_prop_ascii x3130 "ignoreSearch" (Ojs.bool_to_js x3128);
              Ojs.set_prop_ascii x3130 "ignoreVary" (Ojs.bool_to_js x3129);
              t_of_js x3130
    let cast_from = Obj.magic
  end
module MultiCacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions  | `MultiCacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3132 : Ojs.t) -> t_of_js x3132
    and t_0_to_js : t_0 -> Ojs.t = fun (x3131 : t) -> t_to_js x3131
    type tags = [ `CacheQueryOptions  | `MultiCacheQueryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3135 : Ojs.t) -> intf_of_js __tags_of_js x3135
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3133 : __tags intf) -> intf_to_js __tags_to_js x3133
    let (get_cacheName : 'tags this -> string) =
      fun (x3137 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3137) "cacheName")
    let (set_cacheName : 'tags this -> string -> unit) =
      fun (x3139 : 'tags this) ->
        fun (x3140 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3139) "cacheName"
            (Ojs.string_to_js x3140)
    let (create : cacheName:string -> unit -> t) =
      fun ~cacheName:(x3142 : string) ->
        fun () ->
          let x3143 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x3143 "cacheName" (Ojs.string_to_js x3142);
          t_of_js x3143
    let cast_from = Obj.magic
  end
module URLSearchParams =
  struct
    type t =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3145 : Ojs.t) -> t_of_js x3145
    and t_0_to_js : t_0 -> Ojs.t = fun (x3144 : t) -> t_to_js x3144
    type tags =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3148 : Ojs.t) -> intf_of_js __tags_of_js x3148
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3146 : __tags intf) -> intf_to_js __tags_to_js x3146
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x3152 : 'tags this) ->
        fun ~name:(x3150 : string) ->
          fun ~value:(x3151 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3152) "append"
                 [|(Ojs.string_to_js x3150);(Ojs.string_to_js x3151)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x3155 : 'tags this) ->
        fun ~name:(x3154 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x3155) "delete"
               [|(Ojs.string_to_js x3154)|])
    let (get_ : 'tags this -> name:string -> string or_null) =
      fun (x3158 : 'tags this) ->
        fun ~name:(x3157 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3158) "get"
               [|(Ojs.string_to_js x3157)|])
    let (getAll : 'tags this -> name:string -> string list) =
      fun (x3162 : 'tags this) ->
        fun ~name:(x3161 : string) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3162) "getAll"
               [|(Ojs.string_to_js x3161)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x3166 : 'tags this) ->
        fun ~name:(x3165 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x3166) "has"
               [|(Ojs.string_to_js x3165)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x3170 : 'tags this) ->
        fun ~name:(x3168 : string) ->
          fun ~value:(x3169 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3170) "set"
                 [|(Ojs.string_to_js x3168);(Ojs.string_to_js x3169)|])
    let (sort : 'tags this -> unit) =
      fun (x3172 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x3172) "sort" [||])
    let (toString : 'tags this -> string) =
      fun (x3174 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3174) "toString" [||])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3183 : 'tags this) ->
        fun
          ~callbackfn:(x3176 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x3177 : any option) ->
            fun () ->
              ignore
                (let x3185 = this_to_js Obj.magic x3183 in
                 Ojs.call (Ojs.get_prop_ascii x3185 "forEach") "apply"
                   [|x3185;((let x3178 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3178 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3180 : Ojs.t) ->
                                          fun (x3181 : Ojs.t) ->
                                            fun (x3182 : Ojs.t) ->
                                              x3176
                                                ~value:(Ojs.string_of_js
                                                          x3180)
                                                ~key:(Ojs.string_of_js x3181)
                                                ~parent:(t_of_js x3182)))|]);
                             (match x3177 with
                              | Some x3179 ->
                                  ignore
                                    (Ojs.call x3178 "push"
                                       [|(any_to_js x3179)|])
                              | None -> ());
                             x3178))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x3186 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x3188 : Ojs.t) ->
             let x3189 = x3188 in
             ((Ojs.string_of_js (Ojs.array_get x3189 0)),
               (Ojs.string_of_js (Ojs.array_get x3189 1))))
          (Ojs.call (this_to_js Obj.magic x3186) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x3190 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3190) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x3193 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3193) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "URLSearchParams") "prototype")
    let (create : ?init:(t, string list) or_array or_string -> unit -> t) =
      fun ?init:(x3196 : (t, string list) or_array or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
               (let x3197 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3196 with
                 | Some x3198 ->
                     ignore
                       (Ojs.call x3197 "push"
                          [|(or_string_to_js
                               (fun (x3199 : (t, string list) or_array) ->
                                  or_array_to_js t_to_js
                                    (fun (x3201 : string list) ->
                                       Ojs.list_to_js Ojs.string_to_js x3201)
                                    x3199) x3198)|])
                 | None -> ());
                x3197))
    let (toString' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
             "toString" [||])
  end
module ReadableStreamDefaultController =
  struct
    type 'R t = [ `ReadableStreamDefaultController of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3205 : Ojs.t) -> t_of_js __R_of_js x3205
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3203 : __R t) -> t_to_js __R_to_js x3203
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3209 : Ojs.t) -> t_of_js any_of_js x3209
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3207 : any t) -> t_to_js any_to_js x3207
    type 'R tags = [ `ReadableStreamDefaultController of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultController of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3213 : Ojs.t) -> intf_of_js __tags_of_js x3213
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3211 : __tags intf) -> intf_to_js __tags_to_js x3211
    let (get_desiredSize : ('tags, 'R) this -> float or_null) =
      fun (x3215 : ('tags, 'R) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3215)
             "desiredSize")
    let (close : ('tags, 'R) this -> unit) =
      fun (x3219 : ('tags, 'R) this) ->
        ignore (Ojs.call (this_to_js Obj.magic Obj.magic x3219) "close" [||])
    let (enqueue : ('tags, 'R) this -> ?chunk:'R -> unit -> unit) =
      fun (x3225 : ('tags, 'R) this) ->
        fun ?chunk:(x3222 : 'R option) ->
          fun () ->
            ignore
              (let x3228 = this_to_js Obj.magic Obj.magic x3225 in
               Ojs.call (Ojs.get_prop_ascii x3228 "enqueue") "apply"
                 [|x3228;((let x3223 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3222 with
                            | Some x3224 ->
                                ignore
                                  (Ojs.call x3223 "push"
                                     [|(Obj.magic x3224)|])
                            | None -> ());
                           x3223))|])
    let (error : ('tags, 'R) this -> ?e:any -> unit -> unit) =
      fun (x3232 : ('tags, 'R) this) ->
        fun ?e:(x3229 : any option) ->
          fun () ->
            ignore
              (let x3235 = this_to_js Obj.magic Obj.magic x3232 in
               Ojs.call (Ojs.get_prop_ascii x3235 "error") "apply"
                 [|x3235;((let x3230 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3229 with
                            | Some x3231 ->
                                ignore
                                  (Ojs.call x3230 "push"
                                     [|(any_to_js x3231)|])
                            | None -> ());
                           x3230))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             [||])
  end
module ReadableStreamController =
  struct
    type 'T t = 'T ReadableStreamDefaultController.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3238 : Ojs.t) ->
          ReadableStreamDefaultController.t_of_js __T_of_js x3238
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3236 : __T ReadableStreamDefaultController.t) ->
          ReadableStreamDefaultController.t_to_js __T_to_js x3236
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3242 : Ojs.t) -> t_of_js __T_of_js x3242
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3240 : __T t) -> t_to_js __T_to_js x3240
  end
module UnderlyingSourceStartCallback =
  struct
    type 'R t = [ `UnderlyingSourceStartCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3246 : Ojs.t) -> t_of_js __R_of_js x3246
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3244 : __R t) -> t_to_js __R_to_js x3244
    type 'R tags = [ `UnderlyingSourceStartCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3250 : Ojs.t) -> intf_of_js __tags_of_js x3250
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3248 : __tags intf) -> intf_to_js __tags_to_js x3248
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any) =
      fun (x3254 : ('tags, 'R) this) ->
        fun ~controller:(x3252 : 'R ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3254)
               [|(ReadableStreamController.t_to_js Obj.magic x3252)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourcePullCallback =
  struct
    type 'R t = [ `UnderlyingSourcePullCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3259 : Ojs.t) -> t_of_js __R_of_js x3259
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3257 : __R t) -> t_to_js __R_to_js x3257
    type 'R tags = [ `UnderlyingSourcePullCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3263 : Ojs.t) -> intf_of_js __tags_of_js x3263
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3261 : __tags intf) -> intf_to_js __tags_to_js x3261
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> unit) =
      fun (x3267 : ('tags, 'R) this) ->
        fun ~controller:(x3265 : 'R ReadableStreamController.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3267)
               [|(ReadableStreamController.t_to_js Obj.magic x3265)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourceCancelCallback =
  struct
    type t = [ `UnderlyingSourceCancelCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3271 : Ojs.t) -> t_of_js x3271
    and t_0_to_js : t_0 -> Ojs.t = fun (x3270 : t) -> t_to_js x3270
    type tags = [ `UnderlyingSourceCancelCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3274 : Ojs.t) -> intf_of_js __tags_of_js x3274
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3272 : __tags intf) -> intf_to_js __tags_to_js x3272
    let (apply : 'tags this -> ?reason:any -> unit -> unit) =
      fun (x3279 : 'tags this) ->
        fun ?reason:(x3276 : any option) ->
          fun () ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3279) "apply"
                 [|Ojs.null;((let x3277 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3276 with
                               | Some x3278 ->
                                   ignore
                                     (Ojs.call x3277 "push"
                                        [|(any_to_js x3278)|])
                               | None -> ());
                              x3277))|])
    let cast_from = Obj.magic
  end
module UnderlyingSource =
  struct
    type 'R t = [ `UnderlyingSource of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3283 : Ojs.t) -> t_of_js __R_of_js x3283
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3281 : __R t) -> t_to_js __R_to_js x3281
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3287 : Ojs.t) -> t_of_js any_of_js x3287
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3285 : any t) -> t_to_js any_to_js x3285
    type 'R tags = [ `UnderlyingSource of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3291 : Ojs.t) -> intf_of_js __tags_of_js x3291
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3289 : __tags intf) -> intf_to_js __tags_to_js x3289
    let (get_cancel : ('tags, 'R) this -> UnderlyingSourceCancelCallback.t) =
      fun (x3293 : ('tags, 'R) this) ->
        UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3293) "cancel")
    let (set_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x3296 : ('tags, 'R) this) ->
        fun (x3297 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3296) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x3297)
    let (get_pull : ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t) =
      fun (x3300 : ('tags, 'R) this) ->
        UnderlyingSourcePullCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3300) "pull")
    let (set_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit) =
      fun (x3304 : ('tags, 'R) this) ->
        fun (x3305 : 'R UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3304) "pull"
            (UnderlyingSourcePullCallback.t_to_js Obj.magic x3305)
    let (get_start : ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t)
      =
      fun (x3309 : ('tags, 'R) this) ->
        UnderlyingSourceStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3309) "start")
    let (set_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit) =
      fun (x3313 : ('tags, 'R) this) ->
        fun (x3314 : 'R UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3313) "start"
            (UnderlyingSourceStartCallback.t_to_js Obj.magic x3314)
    let (get_type : ('tags, 'R) this -> never or_undefined) =
      fun (x3318 : ('tags, 'R) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3318) "type")
    let (set_type : ('tags, 'R) this -> never or_undefined -> unit) =
      fun (x3322 : ('tags, 'R) this) ->
        fun (x3323 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3322) "type"
            (or_undefined_to_js never_to_js x3323)
    let (create :
      cancel:UnderlyingSourceCancelCallback.t ->
        pull:'R UnderlyingSourcePullCallback.t ->
          start:'R UnderlyingSourceStartCallback.t ->
            ?type_:never -> unit -> 'R t)
      =
      fun ~cancel:(x3327 : UnderlyingSourceCancelCallback.t) ->
        fun ~pull:(x3328 : 'R UnderlyingSourcePullCallback.t) ->
          fun ~start:(x3329 : 'R UnderlyingSourceStartCallback.t) ->
            fun ?type_:(x3330 : never option) ->
              fun () ->
                let x3331 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x3331 "cancel"
                  (UnderlyingSourceCancelCallback.t_to_js x3327);
                Ojs.set_prop_ascii x3331 "pull"
                  (UnderlyingSourcePullCallback.t_to_js Obj.magic x3328);
                Ojs.set_prop_ascii x3331 "start"
                  (UnderlyingSourceStartCallback.t_to_js Obj.magic x3329);
                (match x3330 with
                 | Some x3333 ->
                     Ojs.set_prop_ascii x3331 "type" (never_to_js x3333)
                 | None -> ());
                t_of_js Obj.magic x3331
    let cast_from = Obj.magic
  end
module StreamPipeOptions =
  struct
    type t = [ `StreamPipeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3337 : Ojs.t) -> t_of_js x3337
    and t_0_to_js : t_0 -> Ojs.t = fun (x3336 : t) -> t_to_js x3336
    type tags = [ `StreamPipeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3340 : Ojs.t) -> intf_of_js __tags_of_js x3340
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3338 : __tags intf) -> intf_to_js __tags_to_js x3338
    let (get_preventAbort : 'tags this -> bool) =
      fun (x3342 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3342) "preventAbort")
    let (set_preventAbort : 'tags this -> bool -> unit) =
      fun (x3344 : 'tags this) ->
        fun (x3345 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3344) "preventAbort"
            (Ojs.bool_to_js x3345)
    let (get_preventCancel : 'tags this -> bool) =
      fun (x3347 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3347) "preventCancel")
    let (set_preventCancel : 'tags this -> bool -> unit) =
      fun (x3349 : 'tags this) ->
        fun (x3350 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3349) "preventCancel"
            (Ojs.bool_to_js x3350)
    let (get_preventClose : 'tags this -> bool) =
      fun (x3352 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3352) "preventClose")
    let (set_preventClose : 'tags this -> bool -> unit) =
      fun (x3354 : 'tags this) ->
        fun (x3355 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3354) "preventClose"
            (Ojs.bool_to_js x3355)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x3357 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3357) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x3359 : 'tags this) ->
        fun (x3360 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3359) "signal"
            (AbortSignal.t_to_js x3360)
    let (create :
      preventAbort:bool ->
        preventCancel:bool ->
          preventClose:bool -> signal:AbortSignal.t -> unit -> t)
      =
      fun ~preventAbort:(x3362 : bool) ->
        fun ~preventCancel:(x3363 : bool) ->
          fun ~preventClose:(x3364 : bool) ->
            fun ~signal:(x3365 : AbortSignal.t) ->
              fun () ->
                let x3366 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x3366 "preventAbort"
                  (Ojs.bool_to_js x3362);
                Ojs.set_prop_ascii x3366 "preventCancel"
                  (Ojs.bool_to_js x3363);
                Ojs.set_prop_ascii x3366 "preventClose"
                  (Ojs.bool_to_js x3364);
                Ojs.set_prop_ascii x3366 "signal" (AbortSignal.t_to_js x3365);
                t_of_js x3366
    let cast_from = Obj.magic
  end
module WritableStreamDefaultController =
  struct
    type t = [ `WritableStreamDefaultController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3368 : Ojs.t) -> t_of_js x3368
    and t_0_to_js : t_0 -> Ojs.t = fun (x3367 : t) -> t_to_js x3367
    type tags = [ `WritableStreamDefaultController ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3371 : Ojs.t) -> intf_of_js __tags_of_js x3371
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3369 : __tags intf) -> intf_to_js __tags_to_js x3369
    let (error : 'tags this -> ?e:any -> unit -> unit) =
      fun (x3376 : 'tags this) ->
        fun ?e:(x3373 : any option) ->
          fun () ->
            ignore
              (let x3378 = this_to_js Obj.magic x3376 in
               Ojs.call (Ojs.get_prop_ascii x3378 "error") "apply"
                 [|x3378;((let x3374 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3373 with
                            | Some x3375 ->
                                ignore
                                  (Ojs.call x3374 "push"
                                     [|(any_to_js x3375)|])
                            | None -> ());
                           x3374))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             [||])
  end
module UnderlyingSinkWriteCallback =
  struct
    type 'W t = [ `UnderlyingSinkWriteCallback of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3381 : Ojs.t) -> t_of_js __W_of_js x3381
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3379 : __W t) -> t_to_js __W_to_js x3379
    type 'W tags = [ `UnderlyingSinkWriteCallback of 'W ]
    type 'W tags_1 = 'W tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3385 : Ojs.t) -> intf_of_js __tags_of_js x3385
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3383 : __tags intf) -> intf_to_js __tags_to_js x3383
    let (apply :
      ('tags, 'W) this ->
        chunk:'W -> controller:WritableStreamDefaultController.t -> unit)
      =
      fun (x3389 : ('tags, 'W) this) ->
        fun ~chunk:(x3387 : 'W) ->
          fun ~controller:(x3388 : WritableStreamDefaultController.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic Obj.magic x3389)
                 [|(Obj.magic x3387);(WritableStreamDefaultController.t_to_js
                                        x3388)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkStartCallback =
  struct
    type t = [ `UnderlyingSinkStartCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3393 : Ojs.t) -> t_of_js x3393
    and t_0_to_js : t_0 -> Ojs.t = fun (x3392 : t) -> t_to_js x3392
    type tags = [ `UnderlyingSinkStartCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3396 : Ojs.t) -> intf_of_js __tags_of_js x3396
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3394 : __tags intf) -> intf_to_js __tags_to_js x3394
    let (apply :
      'tags this -> controller:WritableStreamDefaultController.t -> any) =
      fun (x3399 : 'tags this) ->
        fun ~controller:(x3398 : WritableStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x3399)
               [|(WritableStreamDefaultController.t_to_js x3398)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkCloseCallback =
  struct
    type t = [ `UnderlyingSinkCloseCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3402 : Ojs.t) -> t_of_js x3402
    and t_0_to_js : t_0 -> Ojs.t = fun (x3401 : t) -> t_to_js x3401
    type tags = [ `UnderlyingSinkCloseCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3405 : Ojs.t) -> intf_of_js __tags_of_js x3405
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3403 : __tags intf) -> intf_to_js __tags_to_js x3403
    let (apply : 'tags this -> unit) =
      fun (x3407 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x3407) [||])
    let cast_from = Obj.magic
  end
module UnderlyingSinkAbortCallback =
  struct
    type t = [ `UnderlyingSinkAbortCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3410 : Ojs.t) -> t_of_js x3410
    and t_0_to_js : t_0 -> Ojs.t = fun (x3409 : t) -> t_to_js x3409
    type tags = [ `UnderlyingSinkAbortCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3413 : Ojs.t) -> intf_of_js __tags_of_js x3413
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3411 : __tags intf) -> intf_to_js __tags_to_js x3411
    let (apply : 'tags this -> ?reason:any -> unit -> unit) =
      fun (x3418 : 'tags this) ->
        fun ?reason:(x3415 : any option) ->
          fun () ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3418) "apply"
                 [|Ojs.null;((let x3416 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3415 with
                               | Some x3417 ->
                                   ignore
                                     (Ojs.call x3416 "push"
                                        [|(any_to_js x3417)|])
                               | None -> ());
                              x3416))|])
    let cast_from = Obj.magic
  end
module UnderlyingSink =
  struct
    type 'W t = [ `UnderlyingSink of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3422 : Ojs.t) -> t_of_js __W_of_js x3422
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3420 : __W t) -> t_to_js __W_to_js x3420
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3426 : Ojs.t) -> t_of_js any_of_js x3426
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3424 : any t) -> t_to_js any_to_js x3424
    type 'W tags = [ `UnderlyingSink of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3430 : Ojs.t) -> intf_of_js __tags_of_js x3430
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3428 : __tags intf) -> intf_to_js __tags_to_js x3428
    let (get_abort : ('tags, 'W) this -> UnderlyingSinkAbortCallback.t) =
      fun (x3432 : ('tags, 'W) this) ->
        UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3432) "abort")
    let (set_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x3435 : ('tags, 'W) this) ->
        fun (x3436 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3435) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x3436)
    let (get_close : ('tags, 'W) this -> UnderlyingSinkCloseCallback.t) =
      fun (x3439 : ('tags, 'W) this) ->
        UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3439) "close")
    let (set_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x3442 : ('tags, 'W) this) ->
        fun (x3443 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3442) "close"
            (UnderlyingSinkCloseCallback.t_to_js x3443)
    let (get_start : ('tags, 'W) this -> UnderlyingSinkStartCallback.t) =
      fun (x3446 : ('tags, 'W) this) ->
        UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3446) "start")
    let (set_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x3449 : ('tags, 'W) this) ->
        fun (x3450 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3449) "start"
            (UnderlyingSinkStartCallback.t_to_js x3450)
    let (get_type : ('tags, 'W) this -> never or_undefined) =
      fun (x3453 : ('tags, 'W) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3453) "type")
    let (set_type : ('tags, 'W) this -> never or_undefined -> unit) =
      fun (x3457 : ('tags, 'W) this) ->
        fun (x3458 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3457) "type"
            (or_undefined_to_js never_to_js x3458)
    let (get_write : ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t) =
      fun (x3462 : ('tags, 'W) this) ->
        UnderlyingSinkWriteCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3462) "write")
    let (set_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit) =
      fun (x3466 : ('tags, 'W) this) ->
        fun (x3467 : 'W UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3466) "write"
            (UnderlyingSinkWriteCallback.t_to_js Obj.magic x3467)
    let (create :
      abort:UnderlyingSinkAbortCallback.t ->
        close:UnderlyingSinkCloseCallback.t ->
          start:UnderlyingSinkStartCallback.t ->
            ?type_:never ->
              write:'W UnderlyingSinkWriteCallback.t -> unit -> 'W t)
      =
      fun ~abort:(x3471 : UnderlyingSinkAbortCallback.t) ->
        fun ~close:(x3472 : UnderlyingSinkCloseCallback.t) ->
          fun ~start:(x3473 : UnderlyingSinkStartCallback.t) ->
            fun ?type_:(x3474 : never option) ->
              fun ~write:(x3475 : 'W UnderlyingSinkWriteCallback.t) ->
                fun () ->
                  let x3476 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x3476 "abort"
                    (UnderlyingSinkAbortCallback.t_to_js x3471);
                  Ojs.set_prop_ascii x3476 "close"
                    (UnderlyingSinkCloseCallback.t_to_js x3472);
                  Ojs.set_prop_ascii x3476 "start"
                    (UnderlyingSinkStartCallback.t_to_js x3473);
                  (match x3474 with
                   | Some x3479 ->
                       Ojs.set_prop_ascii x3476 "type" (never_to_js x3479)
                   | None -> ());
                  Ojs.set_prop_ascii x3476 "write"
                    (UnderlyingSinkWriteCallback.t_to_js Obj.magic x3475);
                  t_of_js Obj.magic x3476
    let cast_from = Obj.magic
  end
module QueuingStrategySize =
  struct
    type 'T t = [ `QueuingStrategySize of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3482 : Ojs.t) -> t_of_js __T_of_js x3482
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3480 : __T t) -> t_to_js __T_to_js x3480
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3486 : Ojs.t) -> t_of_js any_of_js x3486
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3484 : any t) -> t_to_js any_to_js x3484
    type 'T tags = [ `QueuingStrategySize of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3490 : Ojs.t) -> intf_of_js __tags_of_js x3490
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3488 : __tags intf) -> intf_to_js __tags_to_js x3488
    let (apply : ('tags, 'T) this -> chunk:'T -> float) =
      fun (x3493 : ('tags, 'T) this) ->
        fun ~chunk:(x3492 : 'T) ->
          Ojs.float_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3493)
               [|(Obj.magic x3492)|])
    let cast_from = Obj.magic
  end
module QueuingStrategy =
  struct
    type 'T t = [ `QueuingStrategy of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3498 : Ojs.t) -> t_of_js __T_of_js x3498
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3496 : __T t) -> t_to_js __T_to_js x3496
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3502 : Ojs.t) -> t_of_js any_of_js x3502
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3500 : any t) -> t_to_js any_to_js x3500
    type 'T tags = [ `QueuingStrategy of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3506 : Ojs.t) -> intf_of_js __tags_of_js x3506
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3504 : __tags intf) -> intf_to_js __tags_to_js x3504
    let (get_highWaterMark : ('tags, 'T) this -> float) =
      fun (x3508 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3508)
             "highWaterMark")
    let (set_highWaterMark : ('tags, 'T) this -> float -> unit) =
      fun (x3511 : ('tags, 'T) this) ->
        fun (x3512 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3511)
            "highWaterMark" (Ojs.float_to_js x3512)
    let (get_size : ('tags, 'T) this -> 'T QueuingStrategySize.t) =
      fun (x3515 : ('tags, 'T) this) ->
        QueuingStrategySize.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3515) "size")
    let (set_size : ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit) =
      fun (x3519 : ('tags, 'T) this) ->
        fun (x3520 : 'T QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3519) "size"
            (QueuingStrategySize.t_to_js Obj.magic x3520)
    let (create :
      highWaterMark:float -> size:'T QueuingStrategySize.t -> unit -> 'T t) =
      fun ~highWaterMark:(x3524 : float) ->
        fun ~size:(x3525 : 'T QueuingStrategySize.t) ->
          fun () ->
            let x3526 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3526 "highWaterMark" (Ojs.float_to_js x3524);
            Ojs.set_prop_ascii x3526 "size"
              (QueuingStrategySize.t_to_js Obj.magic x3525);
            t_of_js Obj.magic x3526
    let cast_from = Obj.magic
  end
module rec
  WritableStream:sig
                   type 'W t = [ `WritableStream of 'W ] intf
                   type 'W t_1 = 'W t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'W tags = [ `WritableStream of 'W ]
                   type 'W tags_1 = 'W tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'W tags = [ `WritableStream of 'W ]
                     type 'W tags_1 = 'W tags
                     type tags_0 = any tags]
                   type ('tags, 'W) this =
                     'tags intf constraint 'tags = [> `WritableStream of 'W ]
                   val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                   val t_1_to_js : ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'W) this -> bool
                   val abort :
                     ('tags, 'W) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val close : ('tags, 'W) this -> unit Promise.t_1
                   val getWriter :
                     ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t
                   val cast_from : ('tags, 'W) this -> 'W t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSink:'W UnderlyingSink.t ->
                       ?strategy:'W QueuingStrategy.t -> unit -> 'W t
                 end =
  struct
    type 'W t = [ `WritableStream of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3531 : Ojs.t) -> t_of_js __W_of_js x3531
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3529 : __W t) -> t_to_js __W_to_js x3529
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3535 : Ojs.t) -> t_of_js any_of_js x3535
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3533 : any t) -> t_to_js any_to_js x3533
    type 'W tags = [ `WritableStream of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStream of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3539 : Ojs.t) -> intf_of_js __tags_of_js x3539
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3537 : __tags intf) -> intf_to_js __tags_to_js x3537
    let (get_locked : ('tags, 'W) this -> bool) =
      fun (x3541 : ('tags, 'W) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3541) "locked")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x3547 : ('tags, 'W) this) ->
        fun ?reason:(x3544 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3550 = this_to_js Obj.magic Obj.magic x3547 in
               Ojs.call (Ojs.get_prop_ascii x3550 "abort") "apply"
                 [|x3550;((let x3545 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3544 with
                            | Some x3546 ->
                                ignore
                                  (Ojs.call x3545 "push"
                                     [|(any_to_js x3546)|])
                            | None -> ());
                           x3545))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x3552 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x3552) "close" [||])
    let (getWriter : ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t) =
      fun (x3556 : ('tags, 'W) this) ->
        WritableStreamDefaultWriter.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3556) "getWriter" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStream") "prototype")
    let (create :
      ?underlyingSink:'W UnderlyingSink.t ->
        ?strategy:'W QueuingStrategy.t -> unit -> 'W t)
      =
      fun ?underlyingSink:(x3560 : 'W UnderlyingSink.t option) ->
        fun ?strategy:(x3561 : 'W QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WritableStream")
                 (let x3562 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3560 with
                   | Some x3565 ->
                       ignore
                         (Ojs.call x3562 "push"
                            [|(UnderlyingSink.t_to_js Obj.magic x3565)|])
                   | None -> ());
                  (match x3561 with
                   | Some x3563 ->
                       ignore
                         (Ojs.call x3562 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x3563)|])
                   | None -> ());
                  x3562))
  end
 and
  WritableStreamDefaultWriter:sig
                                type 'W t =
                                  [ `WritableStreamDefaultWriter of 'W ] intf
                                type 'W t_1 = 'W t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'W tags =
                                  [ `WritableStreamDefaultWriter of 'W ]
                                type 'W tags_1 = 'W tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'W tags =
                                    [ `WritableStreamDefaultWriter of 'W ]
                                  type 'W tags_1 = 'W tags
                                  type tags_0 = any tags]
                                type ('tags, 'W) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `WritableStreamDefaultWriter
                                                  of 'W ]
                                val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                                val t_1_to_js :
                                  ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val get_closed :
                                  ('tags, 'W) this ->
                                    never or_undefined Promise.t_1
                                val get_desiredSize :
                                  ('tags, 'W) this -> float or_null
                                val get_ready :
                                  ('tags, 'W) this ->
                                    never or_undefined Promise.t_1
                                val abort :
                                  ('tags, 'W) this ->
                                    ?reason:any -> unit -> unit Promise.t_1
                                val close :
                                  ('tags, 'W) this -> unit Promise.t_1
                                val releaseLock : ('tags, 'W) this -> unit
                                val write :
                                  ('tags, 'W) this ->
                                    ?chunk:'W -> unit -> unit Promise.t_1
                                val cast_from : ('tags, 'W) this -> 'W t
                                val prototype : unit -> t_0
                                val create : 'W WritableStream.t -> 'W t
                              end =
  struct
    type 'W t = [ `WritableStreamDefaultWriter of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3570 : Ojs.t) -> t_of_js __W_of_js x3570
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3568 : __W t) -> t_to_js __W_to_js x3568
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3574 : Ojs.t) -> t_of_js any_of_js x3574
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3572 : any t) -> t_to_js any_to_js x3572
    type 'W tags = [ `WritableStreamDefaultWriter of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultWriter of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3578 : Ojs.t) -> intf_of_js __tags_of_js x3578
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3576 : __tags intf) -> intf_to_js __tags_to_js x3576
    let (get_closed : ('tags, 'W) this -> never or_undefined Promise.t_1) =
      fun (x3580 : ('tags, 'W) this) ->
        Promise.t_1_of_js
          (fun (x3583 : Ojs.t) -> or_undefined_of_js never_of_js x3583)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3580) "closed")
    let (get_desiredSize : ('tags, 'W) this -> float or_null) =
      fun (x3585 : ('tags, 'W) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3585)
             "desiredSize")
    let (get_ready : ('tags, 'W) this -> never or_undefined Promise.t_1) =
      fun (x3589 : ('tags, 'W) this) ->
        Promise.t_1_of_js
          (fun (x3592 : Ojs.t) -> or_undefined_of_js never_of_js x3592)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3589) "ready")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x3597 : ('tags, 'W) this) ->
        fun ?reason:(x3594 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3600 = this_to_js Obj.magic Obj.magic x3597 in
               Ojs.call (Ojs.get_prop_ascii x3600 "abort") "apply"
                 [|x3600;((let x3595 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3594 with
                            | Some x3596 ->
                                ignore
                                  (Ojs.call x3595 "push"
                                     [|(any_to_js x3596)|])
                            | None -> ());
                           x3595))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x3602 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x3602) "close" [||])
    let (releaseLock : ('tags, 'W) this -> unit) =
      fun (x3606 : ('tags, 'W) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x3606) "releaseLock" [||])
    let (write : ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t_1) =
      fun (x3612 : ('tags, 'W) this) ->
        fun ?chunk:(x3609 : 'W option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3615 = this_to_js Obj.magic Obj.magic x3612 in
               Ojs.call (Ojs.get_prop_ascii x3615 "write") "apply"
                 [|x3615;((let x3610 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3609 with
                            | Some x3611 ->
                                ignore
                                  (Ojs.call x3610 "push"
                                     [|(Obj.magic x3611)|])
                            | None -> ());
                           x3610))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             "prototype")
    let (create : 'W WritableStream.t -> 'W t) =
      fun (x3617 : 'W WritableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             [|(WritableStream.t_to_js Obj.magic x3617)|])
  end
module ReadableStreamGenericReader =
  struct
    type t = [ `ReadableStreamGenericReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3621 : Ojs.t) -> t_of_js x3621
    and t_0_to_js : t_0 -> Ojs.t = fun (x3620 : t) -> t_to_js x3620
    type tags = [ `ReadableStreamGenericReader ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3624 : Ojs.t) -> intf_of_js __tags_of_js x3624
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3622 : __tags intf) -> intf_to_js __tags_to_js x3622
    let (get_closed : 'tags this -> never or_undefined Promise.t_1) =
      fun (x3626 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x3628 : Ojs.t) -> or_undefined_of_js never_of_js x3628)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3626) "closed")
    let (cancel : 'tags this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x3633 : 'tags this) ->
        fun ?reason:(x3630 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3635 = this_to_js Obj.magic x3633 in
               Ojs.call (Ojs.get_prop_ascii x3635 "cancel") "apply"
                 [|x3635;((let x3631 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3630 with
                            | Some x3632 ->
                                ignore
                                  (Ojs.call x3631 "push"
                                     [|(any_to_js x3632)|])
                            | None -> ());
                           x3631))|])
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadValueResult =
  struct
    type 'T t = [ `ReadableStreamDefaultReadValueResult of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3639 : Ojs.t) -> t_of_js __T_of_js x3639
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3637 : __T t) -> t_to_js __T_to_js x3637
    type 'T tags = [ `ReadableStreamDefaultReadValueResult of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultReadValueResult of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3643 : Ojs.t) -> intf_of_js __tags_of_js x3643
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3641 : __tags intf) -> intf_to_js __tags_to_js x3641
    let (get_done : ('tags, 'T) this -> [ `L_b_false ]) =
      fun (x3645 : ('tags, 'T) this) ->
        let x3648 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3645) "done" in
        match Ojs.bool_of_js x3648 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : ('tags, 'T) this -> [ `L_b_false ] -> unit) =
      fun (x3649 : ('tags, 'T) this) ->
        fun (x3650 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3649) "done"
            (match x3650 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x3653 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3653) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x3656 : ('tags, 'T) this) ->
        fun (x3657 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3656) "value"
            (Obj.magic x3657)
    let (create : done_:[ `L_b_false ] -> value:'T -> unit -> 'T t) =
      fun ~done_:(x3660 : [ `L_b_false ]) ->
        fun ~value:(x3661 : 'T) ->
          fun () ->
            let x3662 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3662 "done"
              (match x3660 with | `L_b_false -> Ojs.bool_to_js false);
            Ojs.set_prop_ascii x3662 "value" (Obj.magic x3661);
            t_of_js Obj.magic x3662
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadDoneResult =
  struct
    type t = [ `ReadableStreamDefaultReadDoneResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3665 : Ojs.t) -> t_of_js x3665
    and t_0_to_js : t_0 -> Ojs.t = fun (x3664 : t) -> t_to_js x3664
    type tags = [ `ReadableStreamDefaultReadDoneResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReadDoneResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3668 : Ojs.t) -> intf_of_js __tags_of_js x3668
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3666 : __tags intf) -> intf_to_js __tags_to_js x3666
    let (get_done : 'tags this -> [ `L_b_true ]) =
      fun (x3670 : 'tags this) ->
        let x3672 = Ojs.get_prop_ascii (this_to_js Obj.magic x3670) "done" in
        match Ojs.bool_of_js x3672 with
        | true -> `L_b_true
        | _ -> assert false
    let (set_done : 'tags this -> [ `L_b_true ] -> unit) =
      fun (x3673 : 'tags this) ->
        fun (x3674 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3673) "done"
            (match x3674 with | `L_b_true -> Ojs.bool_to_js true)
    let (get_value : 'tags this -> never or_undefined) =
      fun (x3676 : 'tags this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3676) "value")
    let (set_value : 'tags this -> never or_undefined -> unit) =
      fun (x3679 : 'tags this) ->
        fun (x3680 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3679) "value"
            (or_undefined_to_js never_to_js x3680)
    let (create : done_:[ `L_b_true ] -> ?value:never -> unit -> t) =
      fun ~done_:(x3683 : [ `L_b_true ]) ->
        fun ?value:(x3684 : never option) ->
          fun () ->
            let x3685 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3685 "done"
              (match x3683 with | `L_b_true -> Ojs.bool_to_js true);
            (match x3684 with
             | Some x3686 ->
                 Ojs.set_prop_ascii x3685 "value" (never_to_js x3686)
             | None -> ());
            t_of_js x3685
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadResult =
  struct
    type 'T t =
      [ `U_b_false of 'T ReadableStreamDefaultReadValueResult.t 
      | `U_b_true of ReadableStreamDefaultReadDoneResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3691 : Ojs.t) ->
          let x3692 = x3691 in
          match Ojs.bool_of_js (Ojs.get_prop_ascii x3692 "done") with
          | false ->
              `U_b_false
                (ReadableStreamDefaultReadValueResult.t_of_js __T_of_js x3692)
          | true ->
              `U_b_true (ReadableStreamDefaultReadDoneResult.t_of_js x3692)
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun
          (x3687 :
            [ `U_b_false of __T ReadableStreamDefaultReadValueResult.t 
            | `U_b_true of ReadableStreamDefaultReadDoneResult.t ])
          ->
          match x3687 with
          | `U_b_false x3688 ->
              ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x3688
          | `U_b_true x3690 ->
              ReadableStreamDefaultReadDoneResult.t_to_js x3690
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3696 : Ojs.t) -> t_of_js __T_of_js x3696
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3694 : __T t) -> t_to_js __T_to_js x3694
  end
module rec
  ReadableStream:sig
                   type 'R t = [ `ReadableStream of 'R ] intf
                   type 'R t_1 = 'R t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'R tags = [ `ReadableStream of 'R ]
                   type 'R tags_1 = 'R tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'R tags = [ `ReadableStream of 'R ]
                     type 'R tags_1 = 'R tags
                     type tags_0 = any tags]
                   type ('tags, 'R) this =
                     'tags intf constraint 'tags = [> `ReadableStream of 'R ]
                   val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                   val t_1_to_js : ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'R) this -> bool
                   val cancel :
                     ('tags, 'R) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val getReader :
                     ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t
                   val pipeThrough :
                     ('tags, 'R) this ->
                       transform:('T, 'R) ReadableWritablePair.t ->
                         ?options:StreamPipeOptions.t -> unit -> 'T t
                   val pipeTo :
                     ('tags, 'R) this ->
                       destination:'R WritableStream.t ->
                         ?options:StreamPipeOptions.t ->
                           unit -> unit Promise.t_1
                   val tee : ('tags, 'R) this -> ('R t * 'R t)
                   val cast_from : ('tags, 'R) this -> 'R t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSource:'R UnderlyingSource.t ->
                       ?strategy:'R QueuingStrategy.t -> unit -> 'R t
                 end =
  struct
    type 'R t = [ `ReadableStream of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3700 : Ojs.t) -> t_of_js __R_of_js x3700
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3698 : __R t) -> t_to_js __R_to_js x3698
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3704 : Ojs.t) -> t_of_js any_of_js x3704
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3702 : any t) -> t_to_js any_to_js x3702
    type 'R tags = [ `ReadableStream of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStream of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3708 : Ojs.t) -> intf_of_js __tags_of_js x3708
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3706 : __tags intf) -> intf_to_js __tags_to_js x3706
    let (get_locked : ('tags, 'R) this -> bool) =
      fun (x3710 : ('tags, 'R) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3710) "locked")
    let (cancel :
      ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x3716 : ('tags, 'R) this) ->
        fun ?reason:(x3713 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3719 = this_to_js Obj.magic Obj.magic x3716 in
               Ojs.call (Ojs.get_prop_ascii x3719 "cancel") "apply"
                 [|x3719;((let x3714 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3713 with
                            | Some x3715 ->
                                ignore
                                  (Ojs.call x3714 "push"
                                     [|(any_to_js x3715)|])
                            | None -> ());
                           x3714))|])
    let (getReader : ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t) =
      fun (x3721 : ('tags, 'R) this) ->
        ReadableStreamDefaultReader.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3721) "getReader" [||])
    let (pipeThrough :
      ('tags, 'R) this ->
        transform:('T, 'R) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T t)
      =
      fun (x3731 : ('tags, 'R) this) ->
        fun ~transform:(x3725 : ('T, 'R) ReadableWritablePair.t) ->
          fun ?options:(x3726 : StreamPipeOptions.t option) ->
            fun () ->
              t_of_js Obj.magic
                (let x3734 = this_to_js Obj.magic Obj.magic x3731 in
                 Ojs.call (Ojs.get_prop_ascii x3734 "pipeThrough") "apply"
                   [|x3734;((let x3727 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3727 "push"
                                  [|(ReadableWritablePair.t_to_js Obj.magic
                                       Obj.magic x3725)|]);
                             (match x3726 with
                              | Some x3728 ->
                                  ignore
                                    (Ojs.call x3727 "push"
                                       [|(StreamPipeOptions.t_to_js x3728)|])
                              | None -> ());
                             x3727))|])
    let (pipeTo :
      ('tags, 'R) this ->
        destination:'R WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x3741 : ('tags, 'R) this) ->
        fun ~destination:(x3736 : 'R WritableStream.t) ->
          fun ?options:(x3737 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x3744 = this_to_js Obj.magic Obj.magic x3741 in
                 Ojs.call (Ojs.get_prop_ascii x3744 "pipeTo") "apply"
                   [|x3744;((let x3738 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3738 "push"
                                  [|(WritableStream.t_to_js Obj.magic x3736)|]);
                             (match x3737 with
                              | Some x3739 ->
                                  ignore
                                    (Ojs.call x3738 "push"
                                       [|(StreamPipeOptions.t_to_js x3739)|])
                              | None -> ());
                             x3738))|])
    let (tee : ('tags, 'R) this -> ('R t * 'R t)) =
      fun (x3746 : ('tags, 'R) this) ->
        let x3749 =
          Ojs.call (this_to_js Obj.magic Obj.magic x3746) "tee" [||] in
        ((t_of_js Obj.magic (Ojs.array_get x3749 0)),
          (t_of_js Obj.magic (Ojs.array_get x3749 1)))
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStream") "prototype")
    let (create :
      ?underlyingSource:'R UnderlyingSource.t ->
        ?strategy:'R QueuingStrategy.t -> unit -> 'R t)
      =
      fun ?underlyingSource:(x3752 : 'R UnderlyingSource.t option) ->
        fun ?strategy:(x3753 : 'R QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                 (let x3754 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3752 with
                   | Some x3757 ->
                       ignore
                         (Ojs.call x3754 "push"
                            [|(UnderlyingSource.t_to_js Obj.magic x3757)|])
                   | None -> ());
                  (match x3753 with
                   | Some x3755 ->
                       ignore
                         (Ojs.call x3754 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x3755)|])
                   | None -> ());
                  x3754))
  end
 and
  ReadableStreamDefaultReader:sig
                                type 'R t =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ] intf
                                type 'R t_1 = 'R t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'R tags =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ]
                                type 'R tags_1 = 'R tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'R tags =
                                    [ `ReadableStreamDefaultReader of 'R 
                                    | `ReadableStreamGenericReader ]
                                  type 'R tags_1 = 'R tags
                                  type tags_0 = any tags]
                                type ('tags, 'R) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `ReadableStreamDefaultReader
                                                  of 'R ]
                                val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                val t_1_to_js :
                                  ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val read :
                                  ('tags, 'R) this ->
                                    'R ReadableStreamDefaultReadResult.t
                                      Promise.t_1
                                val releaseLock : ('tags, 'R) this -> unit
                                val cast_from : ('tags, 'R) this -> 'R t
                                val prototype : unit -> t_0
                                val create : 'R ReadableStream.t -> 'R t
                              end =
  struct
    type 'R t =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
        intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3762 : Ojs.t) -> t_of_js __R_of_js x3762
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3760 : __R t) -> t_to_js __R_to_js x3760
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3766 : Ojs.t) -> t_of_js any_of_js x3766
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3764 : any t) -> t_to_js any_to_js x3764
    type 'R tags =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReader of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3770 : Ojs.t) -> intf_of_js __tags_of_js x3770
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3768 : __tags intf) -> intf_to_js __tags_to_js x3768
    let (read :
      ('tags, 'R) this -> 'R ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x3772 : ('tags, 'R) this) ->
        Promise.t_1_of_js
          (fun (x3775 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js Obj.magic x3775)
          (Ojs.call (this_to_js Obj.magic Obj.magic x3772) "read" [||])
    let (releaseLock : ('tags, 'R) this -> unit) =
      fun (x3777 : ('tags, 'R) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x3777) "releaseLock" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             "prototype")
    let (create : 'R ReadableStream.t -> 'R t) =
      fun (x3780 : 'R ReadableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             [|(ReadableStream.t_to_js Obj.magic x3780)|])
  end and
       ReadableWritablePair:sig
                              type ('R, 'W) t =
                                [ `ReadableWritablePair of ('R * 'W) ] intf
                              type ('R, 'W) t_2 = ('R, 'W) t
                              type 'R t_1 = ('R, any) t
                              type t_0 = (any, any) t
                              [@@@js.stop ]
                              type ('R, 'W) tags =
                                [ `ReadableWritablePair of ('R * 'W) ]
                              type ('R, 'W) tags_2 = ('R, 'W) tags
                              type 'R tags_1 = ('R, any) tags
                              type tags_0 = (any, any) tags
                              [@@@js.start ]
                              [@@@js.implem
                                type ('R, 'W) tags =
                                  [ `ReadableWritablePair of ('R * 'W) ]
                                type ('R, 'W) tags_2 = ('R, 'W) tags
                                type 'R tags_1 = ('R, any) tags
                                type tags_0 = (any, any) tags]
                              type ('tags, 'R, 'W) this =
                                'tags intf constraint 'tags =
                                            [>
                                              `ReadableWritablePair of
                                                ('R * 'W) ]
                              val t_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
                              val t_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
                              val t_2_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t
                              val t_2_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2
                              val t_1_to_js :
                                ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                              val t_1_of_js :
                                (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_readable :
                                ('tags, 'R, 'W) this -> 'R ReadableStream.t
                              val set_readable :
                                ('tags, 'R, 'W) this ->
                                  'R ReadableStream.t -> unit
                              val get_writable :
                                ('tags, 'R, 'W) this -> 'W WritableStream.t
                              val set_writable :
                                ('tags, 'R, 'W) this ->
                                  'W WritableStream.t -> unit
                              val create :
                                readable:'R ReadableStream.t ->
                                  writable:'W WritableStream.t ->
                                    unit -> ('R, 'W) t
                              val cast_from :
                                ('tags, 'R, 'W) this -> ('R, 'W) t
                            end =
       struct
         type ('R, 'W) t = [ `ReadableWritablePair of ('R * 'W) ] intf
         let rec t_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t =
           fun _R -> fun _W -> Obj.magic
         and t_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t =
           fun _R -> fun _W -> Obj.magic
         type ('R, 'W) t_2 = ('R, 'W) t
         let rec t_2_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2 =
           fun (type __R) -> fun (type __W) ->
           fun (__R_of_js : Ojs.t -> __R) ->
             fun (__W_of_js : Ojs.t -> __W) ->
               fun (x3786 : Ojs.t) -> t_of_js __R_of_js __W_of_js x3786
         and t_2_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t =
           fun (type __R) -> fun (type __W) ->
           fun (__R_to_js : __R -> Ojs.t) ->
             fun (__W_to_js : __W -> Ojs.t) ->
               fun (x3783 : (__R, __W) t) ->
                 t_to_js __R_to_js __W_to_js x3783
         type 'R t_1 = ('R, any) t
         let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun
           (type __R) ->
           fun (__R_of_js : Ojs.t -> __R) ->
             fun (x3792 : Ojs.t) -> t_of_js __R_of_js any_of_js x3792
         and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type
           __R) ->
           fun (__R_to_js : __R -> Ojs.t) ->
             fun (x3789 : (__R, any) t) -> t_to_js __R_to_js any_to_js x3789
         type t_0 = (any, any) t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x3798 : Ojs.t) -> t_of_js any_of_js any_of_js x3798
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x3795 : (any, any) t) -> t_to_js any_to_js any_to_js x3795
         type ('R, 'W) tags = [ `ReadableWritablePair of ('R * 'W) ]
         type ('R, 'W) tags_2 = ('R, 'W) tags
         type 'R tags_1 = ('R, any) tags
         type tags_0 = (any, any) tags
         type ('tags, 'R, 'W) this =
           'tags intf constraint 'tags =
                       [> `ReadableWritablePair of ('R * 'W) ]
         let rec this_of_js :
           'tags 'R 'W .
             (Ojs.t -> 'tags) ->
               (Ojs.t -> 'R) ->
                 (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'R, 'W) this
           = fun (type __tags) -> fun (type __R) -> fun (type __W) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (__R_of_js : Ojs.t -> __R) ->
               fun (__W_of_js : Ojs.t -> __W) ->
                 fun (x3803 : Ojs.t) -> intf_of_js __tags_of_js x3803
         and this_to_js :
           'tags 'R 'W .
             ('tags -> Ojs.t) ->
               ('R -> Ojs.t) ->
                 ('W -> Ojs.t) -> ('tags, 'R, 'W) this -> Ojs.t
           = fun (type __tags) -> fun (type __R) -> fun (type __W) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (__R_to_js : __R -> Ojs.t) ->
               fun (__W_to_js : __W -> Ojs.t) ->
                 fun (x3801 : __tags intf) -> intf_to_js __tags_to_js x3801
         let (get_readable : ('tags, 'R, 'W) this -> 'R ReadableStream.t) =
           fun (x3805 : ('tags, 'R, 'W) this) ->
             ReadableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x3805) "readable")
         let (set_readable :
           ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit) =
           fun (x3810 : ('tags, 'R, 'W) this) ->
             fun (x3811 : 'R ReadableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x3810) "readable"
                 (ReadableStream.t_to_js Obj.magic x3811)
         let (get_writable : ('tags, 'R, 'W) this -> 'W WritableStream.t) =
           fun (x3816 : ('tags, 'R, 'W) this) ->
             WritableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x3816) "writable")
         let (set_writable :
           ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit) =
           fun (x3821 : ('tags, 'R, 'W) this) ->
             fun (x3822 : 'W WritableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x3821) "writable"
                 (WritableStream.t_to_js Obj.magic x3822)
         let (create :
           readable:'R ReadableStream.t ->
             writable:'W WritableStream.t -> unit -> ('R, 'W) t)
           =
           fun ~readable:(x3827 : 'R ReadableStream.t) ->
             fun ~writable:(x3828 : 'W WritableStream.t) ->
               fun () ->
                 let x3829 = Ojs.empty_obj () in
                 Ojs.set_prop_ascii x3829 "readable"
                   (ReadableStream.t_to_js Obj.magic x3827);
                 Ojs.set_prop_ascii x3829 "writable"
                   (WritableStream.t_to_js Obj.magic x3828);
                 t_of_js Obj.magic Obj.magic x3829
         let cast_from = Obj.magic
       end
module EndingType =
  struct
    type t = [ `L_s118_native  | `L_s194_transparent ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3835 : Ojs.t) ->
        let x3836 = x3835 in
        match Ojs.string_of_js x3836 with
        | "native" -> `L_s118_native
        | "transparent" -> `L_s194_transparent
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3834 : [ `L_s118_native  | `L_s194_transparent ]) ->
        match x3834 with
        | `L_s118_native -> Ojs.string_to_js "native"
        | `L_s194_transparent -> Ojs.string_to_js "transparent"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3838 : Ojs.t) -> t_of_js x3838
    and t_0_to_js : t_0 -> Ojs.t = fun (x3837 : t) -> t_to_js x3837
  end
module BlobPropertyBag =
  struct
    type t = [ `BlobPropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3840 : Ojs.t) -> t_of_js x3840
    and t_0_to_js : t_0 -> Ojs.t = fun (x3839 : t) -> t_to_js x3839
    type tags = [ `BlobPropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3843 : Ojs.t) -> intf_of_js __tags_of_js x3843
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3841 : __tags intf) -> intf_to_js __tags_to_js x3841
    let (get_endings : 'tags this -> EndingType.t) =
      fun (x3845 : 'tags this) ->
        EndingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3845) "endings")
    let (set_endings : 'tags this -> EndingType.t -> unit) =
      fun (x3847 : 'tags this) ->
        fun (x3848 : EndingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3847) "endings"
            (EndingType.t_to_js x3848)
    let (get_type : 'tags this -> string) =
      fun (x3850 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3850) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x3852 : 'tags this) ->
        fun (x3853 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3852) "type"
            (Ojs.string_to_js x3853)
    let (create : endings:EndingType.t -> type_:string -> unit -> t) =
      fun ~endings:(x3855 : EndingType.t) ->
        fun ~type_:(x3856 : string) ->
          fun () ->
            let x3857 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x3857 "endings" (EndingType.t_to_js x3855);
            Ojs.set_prop_ascii x3857 "type" (Ojs.string_to_js x3856);
            t_of_js x3857
    let cast_from = Obj.magic
  end
module rec
  Blob:sig
         type t = [ `Blob ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_size : 'tags this -> float
         val get_type : 'tags this -> string
         val arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1
         val slice :
           'tags this ->
             ?start:float -> ?end_:float -> ?contentType:string -> unit -> t
         val stream : 'tags this -> ReadableStream.t_0
         val text : 'tags this -> string Promise.t_1
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           ?blobParts:BlobPart.t list ->
             ?options:BlobPropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3859 : Ojs.t) -> t_of_js x3859
    and t_0_to_js : t_0 -> Ojs.t = fun (x3858 : t) -> t_to_js x3858
    type tags = [ `Blob ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3862 : Ojs.t) -> intf_of_js __tags_of_js x3862
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3860 : __tags intf) -> intf_to_js __tags_to_js x3860
    let (get_size : 'tags this -> float) =
      fun (x3864 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3864) "size")
    let (get_type : 'tags this -> string) =
      fun (x3866 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3866) "type")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x3868 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x3868) "arrayBuffer" [||])
    let (slice :
      'tags this ->
        ?start:float -> ?end_:float -> ?contentType:string -> unit -> t)
      =
      fun (x3878 : 'tags this) ->
        fun ?start:(x3871 : float option) ->
          fun ?end_:(x3872 : float option) ->
            fun ?contentType:(x3873 : string option) ->
              fun () ->
                t_of_js
                  (let x3880 = this_to_js Obj.magic x3878 in
                   Ojs.call (Ojs.get_prop_ascii x3880 "slice") "apply"
                     [|x3880;((let x3874 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3871 with
                                | Some x3877 ->
                                    ignore
                                      (Ojs.call x3874 "push"
                                         [|(Ojs.float_to_js x3877)|])
                                | None -> ());
                               (match x3872 with
                                | Some x3876 ->
                                    ignore
                                      (Ojs.call x3874 "push"
                                         [|(Ojs.float_to_js x3876)|])
                                | None -> ());
                               (match x3873 with
                                | Some x3875 ->
                                    ignore
                                      (Ojs.call x3874 "push"
                                         [|(Ojs.string_to_js x3875)|])
                                | None -> ());
                               x3874))|])
    let (stream : 'tags this -> ReadableStream.t_0) =
      fun (x3881 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x3881) "stream" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x3883 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3883) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Blob")
             "prototype")
    let (create :
      ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t)
      =
      fun ?blobParts:(x3886 : BlobPart.t list option) ->
        fun ?options:(x3887 : BlobPropertyBag.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Blob")
                 (let x3888 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3886 with
                   | Some x3890 ->
                       ignore
                         (Ojs.call x3888 "push"
                            [|(Ojs.list_to_js BlobPart.t_to_js x3890)|])
                   | None -> ());
                  (match x3887 with
                   | Some x3889 ->
                       ignore
                         (Ojs.call x3888 "push"
                            [|(BlobPropertyBag.t_to_js x3889)|])
                   | None -> ());
                  x3888))
  end
 and
  BlobPart:sig
             type t = Blob.t or_string
             type t_0 = t
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
           end =
  struct
    type t = Blob.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x3894 : Ojs.t) -> or_string_of_js Blob.t_of_js x3894
    and t_to_js : t -> Ojs.t =
      fun (x3892 : Blob.t or_string) -> or_string_to_js Blob.t_to_js x3892
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3897 : Ojs.t) -> t_of_js x3897
    and t_0_to_js : t_0 -> Ojs.t = fun (x3896 : t) -> t_to_js x3896
  end
module URL =
  struct
    type t = [ `URL ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3899 : Ojs.t) -> t_of_js x3899
    and t_0_to_js : t_0 -> Ojs.t = fun (x3898 : t) -> t_to_js x3898
    type tags = [ `URL ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URL ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3902 : Ojs.t) -> intf_of_js __tags_of_js x3902
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3900 : __tags intf) -> intf_to_js __tags_to_js x3900
    let (get_hash : 'tags this -> string) =
      fun (x3904 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3904) "hash")
    let (set_hash : 'tags this -> string -> unit) =
      fun (x3906 : 'tags this) ->
        fun (x3907 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3906) "hash"
            (Ojs.string_to_js x3907)
    let (get_host : 'tags this -> string) =
      fun (x3909 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3909) "host")
    let (set_host : 'tags this -> string -> unit) =
      fun (x3911 : 'tags this) ->
        fun (x3912 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3911) "host"
            (Ojs.string_to_js x3912)
    let (get_hostname : 'tags this -> string) =
      fun (x3914 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3914) "hostname")
    let (set_hostname : 'tags this -> string -> unit) =
      fun (x3916 : 'tags this) ->
        fun (x3917 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3916) "hostname"
            (Ojs.string_to_js x3917)
    let (get_href : 'tags this -> string) =
      fun (x3919 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3919) "href")
    let (set_href : 'tags this -> string -> unit) =
      fun (x3921 : 'tags this) ->
        fun (x3922 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3921) "href"
            (Ojs.string_to_js x3922)
    let (toString : 'tags this -> string) =
      fun (x3924 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3924) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x3926 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3926) "origin")
    let (get_password : 'tags this -> string) =
      fun (x3928 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3928) "password")
    let (set_password : 'tags this -> string -> unit) =
      fun (x3930 : 'tags this) ->
        fun (x3931 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3930) "password"
            (Ojs.string_to_js x3931)
    let (get_pathname : 'tags this -> string) =
      fun (x3933 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3933) "pathname")
    let (set_pathname : 'tags this -> string -> unit) =
      fun (x3935 : 'tags this) ->
        fun (x3936 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3935) "pathname"
            (Ojs.string_to_js x3936)
    let (get_port : 'tags this -> string) =
      fun (x3938 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3938) "port")
    let (set_port : 'tags this -> string -> unit) =
      fun (x3940 : 'tags this) ->
        fun (x3941 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3940) "port"
            (Ojs.string_to_js x3941)
    let (get_protocol : 'tags this -> string) =
      fun (x3943 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3943) "protocol")
    let (set_protocol : 'tags this -> string -> unit) =
      fun (x3945 : 'tags this) ->
        fun (x3946 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3945) "protocol"
            (Ojs.string_to_js x3946)
    let (get_search : 'tags this -> string) =
      fun (x3948 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3948) "search")
    let (set_search : 'tags this -> string -> unit) =
      fun (x3950 : 'tags this) ->
        fun (x3951 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3950) "search"
            (Ojs.string_to_js x3951)
    let (get_searchParams : 'tags this -> URLSearchParams.t) =
      fun (x3953 : 'tags this) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3953) "searchParams")
    let (get_username : 'tags this -> string) =
      fun (x3955 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3955) "username")
    let (set_username : 'tags this -> string -> unit) =
      fun (x3957 : 'tags this) ->
        fun (x3958 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3957) "username"
            (Ojs.string_to_js x3958)
    let (toJSON : 'tags this -> string) =
      fun (x3960 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3960) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "URL")
             "prototype")
    let (create : url:t or_string -> ?base:t or_string -> unit -> t) =
      fun ~url:(x3962 : t or_string) ->
        fun ?base:(x3963 : t or_string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URL")
                 (let x3964 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x3964 "push"
                       [|(or_string_to_js t_to_js x3962)|]);
                  (match x3963 with
                   | Some x3965 ->
                       ignore
                         (Ojs.call x3964 "push"
                            [|(or_string_to_js t_to_js x3965)|])
                   | None -> ());
                  x3964))
    let (createObjectURL : Blob.t -> string) =
      fun (x3968 : Blob.t) ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "createObjectURL"
             [|(Blob.t_to_js x3968)|])
    let (revokeObjectURL : string -> unit) =
      fun (x3969 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "revokeObjectURL"
             [|(Ojs.string_to_js x3969)|])
  end
module ResponseType =
  struct
    type t =
      [ `L_s137_opaque  | `L_s138_opaqueredirect  | `L_s43_basic 
      | `L_s55_cors  | `L_s57_default  | `L_s67_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3971 : Ojs.t) ->
        let x3972 = x3971 in
        match Ojs.string_of_js x3972 with
        | "opaque" -> `L_s137_opaque
        | "opaqueredirect" -> `L_s138_opaqueredirect
        | "basic" -> `L_s43_basic
        | "cors" -> `L_s55_cors
        | "default" -> `L_s57_default
        | "error" -> `L_s67_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3970 :
          [ `L_s137_opaque  | `L_s138_opaqueredirect  | `L_s43_basic 
          | `L_s55_cors  | `L_s57_default  | `L_s67_error ])
        ->
        match x3970 with
        | `L_s137_opaque -> Ojs.string_to_js "opaque"
        | `L_s138_opaqueredirect -> Ojs.string_to_js "opaqueredirect"
        | `L_s43_basic -> Ojs.string_to_js "basic"
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s67_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3974 : Ojs.t) -> t_of_js x3974
    and t_0_to_js : t_0 -> Ojs.t = fun (x3973 : t) -> t_to_js x3973
  end
module rec
  Headers:sig
            type t =
              [ `Headers  | (string * string) IterableIterator.tags_1] intf
            type t_0 = t
            [@@@js.stop ]
            type tags =
              [ `Headers  | (string * string) IterableIterator.tags_1]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags =
                [ `Headers  | (string * string) IterableIterator.tags_1]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val append : 'tags this -> name:string -> value:string -> unit
            val delete : 'tags this -> name:string -> unit
            val get_ : 'tags this -> name:string -> string or_null
            val has : 'tags this -> name:string -> bool
            val set_ : 'tags this -> name:string -> value:string -> unit
            val forEach :
              'tags this ->
                callbackfn:(value:string -> key:string -> parent:t -> unit)
                  -> ?thisArg:any -> unit -> unit
            val entries :
              'tags this -> (string * string) IterableIterator.t_1
            val keys : 'tags this -> string IterableIterator.t_1
            val values : 'tags this -> string IterableIterator.t_1
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : ?init:HeadersInit.t -> unit -> t
          end =
  struct
    type t = [ `Headers  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3976 : Ojs.t) -> t_of_js x3976
    and t_0_to_js : t_0 -> Ojs.t = fun (x3975 : t) -> t_to_js x3975
    type tags = [ `Headers  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3979 : Ojs.t) -> intf_of_js __tags_of_js x3979
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3977 : __tags intf) -> intf_to_js __tags_to_js x3977
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x3983 : 'tags this) ->
        fun ~name:(x3981 : string) ->
          fun ~value:(x3982 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3983) "append"
                 [|(Ojs.string_to_js x3981);(Ojs.string_to_js x3982)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x3986 : 'tags this) ->
        fun ~name:(x3985 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x3986) "delete"
               [|(Ojs.string_to_js x3985)|])
    let (get_ : 'tags this -> name:string -> string or_null) =
      fun (x3989 : 'tags this) ->
        fun ~name:(x3988 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3989) "get"
               [|(Ojs.string_to_js x3988)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x3993 : 'tags this) ->
        fun ~name:(x3992 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x3993) "has"
               [|(Ojs.string_to_js x3992)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x3997 : 'tags this) ->
        fun ~name:(x3995 : string) ->
          fun ~value:(x3996 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3997) "set"
                 [|(Ojs.string_to_js x3995);(Ojs.string_to_js x3996)|])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4006 : 'tags this) ->
        fun
          ~callbackfn:(x3999 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4000 : any option) ->
            fun () ->
              ignore
                (let x4008 = this_to_js Obj.magic x4006 in
                 Ojs.call (Ojs.get_prop_ascii x4008 "forEach") "apply"
                   [|x4008;((let x4001 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4001 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4003 : Ojs.t) ->
                                          fun (x4004 : Ojs.t) ->
                                            fun (x4005 : Ojs.t) ->
                                              x3999
                                                ~value:(Ojs.string_of_js
                                                          x4003)
                                                ~key:(Ojs.string_of_js x4004)
                                                ~parent:(t_of_js x4005)))|]);
                             (match x4000 with
                              | Some x4002 ->
                                  ignore
                                    (Ojs.call x4001 "push"
                                       [|(any_to_js x4002)|])
                              | None -> ());
                             x4001))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x4009 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4011 : Ojs.t) ->
             let x4012 = x4011 in
             ((Ojs.string_of_js (Ojs.array_get x4012 0)),
               (Ojs.string_of_js (Ojs.array_get x4012 1))))
          (Ojs.call (this_to_js Obj.magic x4009) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4013 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4013) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x4016 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4016) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Headers")
             "prototype")
    let (create : ?init:HeadersInit.t -> unit -> t) =
      fun ?init:(x4019 : HeadersInit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Headers")
               (let x4020 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x4019 with
                 | Some x4021 ->
                     ignore
                       (Ojs.call x4020 "push" [|(HeadersInit.t_to_js x4021)|])
                 | None -> ());
                x4020))
  end
 and
  HeadersInit:sig
                type t = (Headers.t, string list) or_array
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t = (Headers.t, string list) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x4026 : Ojs.t) ->
        or_array_of_js Headers.t_of_js
          (fun (x4028 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4028)
          x4026
    and t_to_js : t -> Ojs.t =
      fun (x4022 : (Headers.t, string list) or_array) ->
        or_array_to_js Headers.t_to_js
          (fun (x4024 : string list) -> Ojs.list_to_js Ojs.string_to_js x4024)
          x4022
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4031 : Ojs.t) -> t_of_js x4031
    and t_0_to_js : t_0 -> Ojs.t = fun (x4030 : t) -> t_to_js x4030
  end
module ResponseInit =
  struct
    type t = [ `ResponseInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4033 : Ojs.t) -> t_of_js x4033
    and t_0_to_js : t_0 -> Ojs.t = fun (x4032 : t) -> t_to_js x4032
    type tags = [ `ResponseInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4036 : Ojs.t) -> intf_of_js __tags_of_js x4036
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4034 : __tags intf) -> intf_to_js __tags_to_js x4034
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4038 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4038) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4040 : 'tags this) ->
        fun (x4041 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4040) "headers"
            (HeadersInit.t_to_js x4041)
    let (get_status : 'tags this -> float) =
      fun (x4043 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4043) "status")
    let (set_status : 'tags this -> float -> unit) =
      fun (x4045 : 'tags this) ->
        fun (x4046 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4045) "status"
            (Ojs.float_to_js x4046)
    let (get_statusText : 'tags this -> string) =
      fun (x4048 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4048) "statusText")
    let (set_statusText : 'tags this -> string -> unit) =
      fun (x4050 : 'tags this) ->
        fun (x4051 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4050) "statusText"
            (Ojs.string_to_js x4051)
    let (create :
      headers:HeadersInit.t -> status:float -> statusText:string -> unit -> t)
      =
      fun ~headers:(x4053 : HeadersInit.t) ->
        fun ~status:(x4054 : float) ->
          fun ~statusText:(x4055 : string) ->
            fun () ->
              let x4056 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x4056 "headers" (HeadersInit.t_to_js x4053);
              Ojs.set_prop_ascii x4056 "status" (Ojs.float_to_js x4054);
              Ojs.set_prop_ascii x4056 "statusText" (Ojs.string_to_js x4055);
              t_of_js x4056
    let cast_from = Obj.magic
  end
module FilePropertyBag =
  struct
    type t = [ `BlobPropertyBag  | `FilePropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4058 : Ojs.t) -> t_of_js x4058
    and t_0_to_js : t_0 -> Ojs.t = fun (x4057 : t) -> t_to_js x4057
    type tags = [ `BlobPropertyBag  | `FilePropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4061 : Ojs.t) -> intf_of_js __tags_of_js x4061
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4059 : __tags intf) -> intf_to_js __tags_to_js x4059
    let (get_lastModified : 'tags this -> float) =
      fun (x4063 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4063) "lastModified")
    let (set_lastModified : 'tags this -> float -> unit) =
      fun (x4065 : 'tags this) ->
        fun (x4066 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4065) "lastModified"
            (Ojs.float_to_js x4066)
    let (create : lastModified:float -> unit -> t) =
      fun ~lastModified:(x4068 : float) ->
        fun () ->
          let x4069 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x4069 "lastModified" (Ojs.float_to_js x4068);
          t_of_js x4069
    let cast_from = Obj.magic
  end
module File =
  struct
    type t = [ `Blob  | `File ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4071 : Ojs.t) -> t_of_js x4071
    and t_0_to_js : t_0 -> Ojs.t = fun (x4070 : t) -> t_to_js x4070
    type tags = [ `Blob  | `File ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `File ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4074 : Ojs.t) -> intf_of_js __tags_of_js x4074
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4072 : __tags intf) -> intf_to_js __tags_to_js x4072
    let (get_lastModified : 'tags this -> float) =
      fun (x4076 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4076) "lastModified")
    let (get_name : 'tags this -> string) =
      fun (x4078 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4078) "name")
    let (get_webkitRelativePath : 'tags this -> string) =
      fun (x4080 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4080)
             "webkitRelativePath")
    let (create :
      lastModified:float ->
        name:string -> webkitRelativePath:string -> unit -> t)
      =
      fun ~lastModified:(x4082 : float) ->
        fun ~name:(x4083 : string) ->
          fun ~webkitRelativePath:(x4084 : string) ->
            fun () ->
              let x4085 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x4085 "lastModified" (Ojs.float_to_js x4082);
              Ojs.set_prop_ascii x4085 "name" (Ojs.string_to_js x4083);
              Ojs.set_prop_ascii x4085 "webkitRelativePath"
                (Ojs.string_to_js x4084);
              t_of_js x4085
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "File")
             "prototype")
    let (create' :
      fileBits:BlobPart.t list ->
        fileName:string -> ?options:FilePropertyBag.t -> unit -> t)
      =
      fun ~fileBits:(x4086 : BlobPart.t list) ->
        fun ~fileName:(x4087 : string) ->
          fun ?options:(x4088 : FilePropertyBag.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "File")
                   (let x4089 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4089 "push"
                         [|(Ojs.list_to_js BlobPart.t_to_js x4086)|]);
                    ignore
                      (Ojs.call x4089 "push" [|(Ojs.string_to_js x4087)|]);
                    (match x4088 with
                     | Some x4090 ->
                         ignore
                           (Ojs.call x4089 "push"
                              [|(FilePropertyBag.t_to_js x4090)|])
                     | None -> ());
                    x4089))
  end
module FormDataEntryValue =
  struct
    type t = File.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x4094 : Ojs.t) -> or_string_of_js File.t_of_js x4094
    and t_to_js : t -> Ojs.t =
      fun (x4092 : File.t or_string) -> or_string_to_js File.t_to_js x4092
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4097 : Ojs.t) -> t_of_js x4097
    and t_0_to_js : t_0 -> Ojs.t = fun (x4096 : t) -> t_to_js x4096
  end
module FormData =
  struct
    type t =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4099 : Ojs.t) -> t_of_js x4099
    and t_0_to_js : t_0 -> Ojs.t = fun (x4098 : t) -> t_to_js x4098
    type tags =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4102 : Ojs.t) -> intf_of_js __tags_of_js x4102
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4100 : __tags intf) -> intf_to_js __tags_to_js x4100
    let (append :
      'tags this ->
        name:string ->
          value:Blob.t or_string -> ?fileName:string -> unit -> unit)
      =
      fun (x4110 : 'tags this) ->
        fun ~name:(x4104 : string) ->
          fun ~value:(x4105 : Blob.t or_string) ->
            fun ?fileName:(x4106 : string option) ->
              fun () ->
                ignore
                  (let x4112 = this_to_js Obj.magic x4110 in
                   Ojs.call (Ojs.get_prop_ascii x4112 "append") "apply"
                     [|x4112;((let x4107 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4107 "push"
                                    [|(Ojs.string_to_js x4104)|]);
                               ignore
                                 (Ojs.call x4107 "push"
                                    [|(or_string_to_js Blob.t_to_js x4105)|]);
                               (match x4106 with
                                | Some x4108 ->
                                    ignore
                                      (Ojs.call x4107 "push"
                                         [|(Ojs.string_to_js x4108)|])
                                | None -> ());
                               x4107))|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x4114 : 'tags this) ->
        fun ~name:(x4113 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4114) "delete"
               [|(Ojs.string_to_js x4113)|])
    let (get_ : 'tags this -> name:string -> FormDataEntryValue.t or_null) =
      fun (x4117 : 'tags this) ->
        fun ~name:(x4116 : string) ->
          or_null_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4117) "get"
               [|(Ojs.string_to_js x4116)|])
    let (getAll : 'tags this -> name:string -> FormDataEntryValue.t list) =
      fun (x4121 : 'tags this) ->
        fun ~name:(x4120 : string) ->
          Ojs.list_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x4121) "getAll"
               [|(Ojs.string_to_js x4120)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x4125 : 'tags this) ->
        fun ~name:(x4124 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x4125) "has"
               [|(Ojs.string_to_js x4124)|])
    let (set_ :
      'tags this ->
        name:string ->
          value:Blob.t or_string -> ?fileName:string -> unit -> unit)
      =
      fun (x4133 : 'tags this) ->
        fun ~name:(x4127 : string) ->
          fun ~value:(x4128 : Blob.t or_string) ->
            fun ?fileName:(x4129 : string option) ->
              fun () ->
                ignore
                  (let x4135 = this_to_js Obj.magic x4133 in
                   Ojs.call (Ojs.get_prop_ascii x4135 "set") "apply"
                     [|x4135;((let x4130 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4130 "push"
                                    [|(Ojs.string_to_js x4127)|]);
                               ignore
                                 (Ojs.call x4130 "push"
                                    [|(or_string_to_js Blob.t_to_js x4128)|]);
                               (match x4129 with
                                | Some x4131 ->
                                    ignore
                                      (Ojs.call x4130 "push"
                                         [|(Ojs.string_to_js x4131)|])
                                | None -> ());
                               x4130))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FormDataEntryValue.t ->
                      key:string -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x4143 : 'tags this) ->
        fun
          ~callbackfn:(x4136 :
                        value:FormDataEntryValue.t ->
                          key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x4137 : any option) ->
            fun () ->
              ignore
                (let x4145 = this_to_js Obj.magic x4143 in
                 Ojs.call (Ojs.get_prop_ascii x4145 "forEach") "apply"
                   [|x4145;((let x4138 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4138 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4140 : Ojs.t) ->
                                          fun (x4141 : Ojs.t) ->
                                            fun (x4142 : Ojs.t) ->
                                              x4136
                                                ~value:(FormDataEntryValue.t_of_js
                                                          x4140)
                                                ~key:(Ojs.string_of_js x4141)
                                                ~parent:(t_of_js x4142)))|]);
                             (match x4137 with
                              | Some x4139 ->
                                  ignore
                                    (Ojs.call x4138 "push"
                                       [|(any_to_js x4139)|])
                              | None -> ());
                             x4138))|])
    let (entries :
      'tags this -> (string * FormDataEntryValue.t) IterableIterator.t_1) =
      fun (x4146 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x4148 : Ojs.t) ->
             let x4149 = x4148 in
             ((Ojs.string_of_js (Ojs.array_get x4149 0)),
               (FormDataEntryValue.t_of_js (Ojs.array_get x4149 1))))
          (Ojs.call (this_to_js Obj.magic x4146) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x4150 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4150) "keys" [||])
    let (values : 'tags this -> FormDataEntryValue.t IterableIterator.t_1) =
      fun (x4153 : 'tags this) ->
        IterableIterator.t_1_of_js FormDataEntryValue.t_of_js
          (Ojs.call (this_to_js Obj.magic x4153) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FormData")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FormData") [||])
  end
module XMLHttpRequestBodyInit =
  struct
    type t = (Blob.t, FormData.t, URLSearchParams.t) union3 or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x4161 : Ojs.t) ->
        or_string_of_js
          (fun (x4162 : Ojs.t) ->
             union3_of_js Blob.t_of_js FormData.t_of_js
               URLSearchParams.t_of_js x4162) x4161
    and t_to_js : t -> Ojs.t =
      fun (x4156 : (Blob.t, FormData.t, URLSearchParams.t) union3 or_string)
        ->
        or_string_to_js
          (fun (x4157 : (Blob.t, FormData.t, URLSearchParams.t) union3) ->
             union3_to_js Blob.t_to_js FormData.t_to_js
               URLSearchParams.t_to_js x4157) x4156
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4167 : Ojs.t) -> t_of_js x4167
    and t_0_to_js : t_0 -> Ojs.t = fun (x4166 : t) -> t_to_js x4166
  end
module BodyInit =
  struct
    type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x4171 : Ojs.t) ->
        union2_of_js ReadableStream.t_0_of_js XMLHttpRequestBodyInit.t_of_js
          x4171
    and t_to_js : t -> Ojs.t =
      fun (x4168 : (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2) ->
        union2_to_js ReadableStream.t_0_to_js XMLHttpRequestBodyInit.t_to_js
          x4168
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4175 : Ojs.t) -> t_of_js x4175
    and t_0_to_js : t_0 -> Ojs.t = fun (x4174 : t) -> t_to_js x4174
  end
module Body =
  struct
    type t = [ `Body ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4177 : Ojs.t) -> t_of_js x4177
    and t_0_to_js : t_0 -> Ojs.t = fun (x4176 : t) -> t_to_js x4176
    type tags = [ `Body ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Body ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4180 : Ojs.t) -> intf_of_js __tags_of_js x4180
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4178 : __tags intf) -> intf_to_js __tags_to_js x4178
    let (get_body : 'tags this -> Uint8Array.t_0 ReadableStream.t or_null) =
      fun (x4182 : 'tags this) ->
        or_null_of_js
          (fun (x4184 : Ojs.t) ->
             ReadableStream.t_of_js Uint8Array.t_0_of_js x4184)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4182) "body")
    let (get_bodyUsed : 'tags this -> bool) =
      fun (x4186 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4186) "bodyUsed")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x4188 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x4188) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t Promise.t_1) =
      fun (x4191 : 'tags this) ->
        Promise.t_1_of_js Blob.t_of_js
          (Ojs.call (this_to_js Obj.magic x4191) "blob" [||])
    let (formData : 'tags this -> FormData.t Promise.t_1) =
      fun (x4194 : 'tags this) ->
        Promise.t_1_of_js FormData.t_of_js
          (Ojs.call (this_to_js Obj.magic x4194) "formData" [||])
    let (json : 'tags this -> any Promise.t_1) =
      fun (x4197 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.call (this_to_js Obj.magic x4197) "json" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x4200 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4200) "text" [||])
    let cast_from = Obj.magic
  end
module Response =
  struct
    type t = [ `Body  | `Response ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4204 : Ojs.t) -> t_of_js x4204
    and t_0_to_js : t_0 -> Ojs.t = fun (x4203 : t) -> t_to_js x4203
    type tags = [ `Body  | `Response ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Response ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4207 : Ojs.t) -> intf_of_js __tags_of_js x4207
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4205 : __tags intf) -> intf_to_js __tags_to_js x4205
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4209 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4209) "headers")
    let (get_ok : 'tags this -> bool) =
      fun (x4211 : 'tags this) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4211) "ok")
    let (get_redirected : 'tags this -> bool) =
      fun (x4213 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4213) "redirected")
    let (get_status : 'tags this -> float) =
      fun (x4215 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4215) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4217 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4217) "statusText")
    let (get_type : 'tags this -> ResponseType.t) =
      fun (x4219 : 'tags this) ->
        ResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4219) "type")
    let (get_url : 'tags this -> string) =
      fun (x4221 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4221) "url")
    let (clone : 'tags this -> t) =
      fun (x4223 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4223) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Response")
             "prototype")
    let (create :
      ?body:BodyInit.t or_null -> ?init:ResponseInit.t -> unit -> t) =
      fun ?body:(x4225 : BodyInit.t or_null option) ->
        fun ?init:(x4226 : ResponseInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Response")
                 (let x4227 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x4225 with
                   | Some x4229 ->
                       ignore
                         (Ojs.call x4227 "push"
                            [|(or_null_to_js BodyInit.t_to_js x4229)|])
                   | None -> ());
                  (match x4226 with
                   | Some x4228 ->
                       ignore
                         (Ojs.call x4227 "push"
                            [|(ResponseInit.t_to_js x4228)|])
                   | None -> ());
                  x4227))
    let (error : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Response") "error" [||])
    let (redirect : url:URL.t or_string -> ?status:float -> unit -> t) =
      fun ~url:(x4231 : URL.t or_string) ->
        fun ?status:(x4232 : float option) ->
          fun () ->
            t_of_js
              (let x4236 = Ojs.get_prop_ascii Ojs.global "Response" in
               Ojs.call (Ojs.get_prop_ascii x4236 "redirect") "apply"
                 [|x4236;((let x4233 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4233 "push"
                                [|(or_string_to_js URL.t_to_js x4231)|]);
                           (match x4232 with
                            | Some x4234 ->
                                ignore
                                  (Ojs.call x4233 "push"
                                     [|(Ojs.float_to_js x4234)|])
                            | None -> ());
                           x4233))|])
  end
module RequestRedirect =
  struct
    type t = [ `L_s110_manual  | `L_s67_error  | `L_s75_follow ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4238 : Ojs.t) ->
        let x4239 = x4238 in
        match Ojs.string_of_js x4239 with
        | "manual" -> `L_s110_manual
        | "error" -> `L_s67_error
        | "follow" -> `L_s75_follow
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4237 : [ `L_s110_manual  | `L_s67_error  | `L_s75_follow ]) ->
        match x4237 with
        | `L_s110_manual -> Ojs.string_to_js "manual"
        | `L_s67_error -> Ojs.string_to_js "error"
        | `L_s75_follow -> Ojs.string_to_js "follow"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4241 : Ojs.t) -> t_of_js x4241
    and t_0_to_js : t_0 -> Ojs.t = fun (x4240 : t) -> t_to_js x4240
  end
module RequestMode =
  struct
    type t =
      [ `L_s119_navigate  | `L_s124_no_cors  | `L_s172_same_origin 
      | `L_s55_cors ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4243 : Ojs.t) ->
        let x4244 = x4243 in
        match Ojs.string_of_js x4244 with
        | "navigate" -> `L_s119_navigate
        | "no-cors" -> `L_s124_no_cors
        | "same-origin" -> `L_s172_same_origin
        | "cors" -> `L_s55_cors
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4242 :
          [ `L_s119_navigate  | `L_s124_no_cors  | `L_s172_same_origin 
          | `L_s55_cors ])
        ->
        match x4242 with
        | `L_s119_navigate -> Ojs.string_to_js "navigate"
        | `L_s124_no_cors -> Ojs.string_to_js "no-cors"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s55_cors -> Ojs.string_to_js "cors"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4246 : Ojs.t) -> t_of_js x4246
    and t_0_to_js : t_0 -> Ojs.t = fun (x4245 : t) -> t_to_js x4245
  end
module RequestCredentials =
  struct
    type t = [ `L_s134_omit  | `L_s172_same_origin  | `L_s92_include ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4248 : Ojs.t) ->
        let x4249 = x4248 in
        match Ojs.string_of_js x4249 with
        | "omit" -> `L_s134_omit
        | "same-origin" -> `L_s172_same_origin
        | "include" -> `L_s92_include
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4247 : [ `L_s134_omit  | `L_s172_same_origin  | `L_s92_include ])
        ->
        match x4247 with
        | `L_s134_omit -> Ojs.string_to_js "omit"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s92_include -> Ojs.string_to_js "include"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4251 : Ojs.t) -> t_of_js x4251
    and t_0_to_js : t_0 -> Ojs.t = fun (x4250 : t) -> t_to_js x4250
  end
module RequestCache =
  struct
    type t =
      [ `L_s123_no_cache  | `L_s127_no_store  | `L_s136_only_if_cached 
      | `L_s168_reload  | `L_s57_default  | `L_s77_force_cache ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4253 : Ojs.t) ->
        let x4254 = x4253 in
        match Ojs.string_of_js x4254 with
        | "no-cache" -> `L_s123_no_cache
        | "no-store" -> `L_s127_no_store
        | "only-if-cached" -> `L_s136_only_if_cached
        | "reload" -> `L_s168_reload
        | "default" -> `L_s57_default
        | "force-cache" -> `L_s77_force_cache
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4252 :
          [ `L_s123_no_cache  | `L_s127_no_store  | `L_s136_only_if_cached 
          | `L_s168_reload  | `L_s57_default  | `L_s77_force_cache ])
        ->
        match x4252 with
        | `L_s123_no_cache -> Ojs.string_to_js "no-cache"
        | `L_s127_no_store -> Ojs.string_to_js "no-store"
        | `L_s136_only_if_cached -> Ojs.string_to_js "only-if-cached"
        | `L_s168_reload -> Ojs.string_to_js "reload"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s77_force_cache -> Ojs.string_to_js "force-cache"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4256 : Ojs.t) -> t_of_js x4256
    and t_0_to_js : t_0 -> Ojs.t = fun (x4255 : t) -> t_to_js x4255
  end
module ReferrerPolicy =
  struct
    type t =
      [ `L_s0  | `L_s125_no_referrer  | `L_s126_no_referrer_when_downgrade 
      | `L_s140_origin  | `L_s141_origin_when_cross_origin 
      | `L_s172_same_origin  | `L_s185_strict_origin 
      | `L_s186_strict_origin_when_cross_origin  | `L_s198_unsafe_url ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4258 : Ojs.t) ->
        let x4259 = x4258 in
        match Ojs.string_of_js x4259 with
        | "" -> `L_s0
        | "no-referrer" -> `L_s125_no_referrer
        | "no-referrer-when-downgrade" -> `L_s126_no_referrer_when_downgrade
        | "origin" -> `L_s140_origin
        | "origin-when-cross-origin" -> `L_s141_origin_when_cross_origin
        | "same-origin" -> `L_s172_same_origin
        | "strict-origin" -> `L_s185_strict_origin
        | "strict-origin-when-cross-origin" ->
            `L_s186_strict_origin_when_cross_origin
        | "unsafe-url" -> `L_s198_unsafe_url
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4257 :
          [ `L_s0  | `L_s125_no_referrer 
          | `L_s126_no_referrer_when_downgrade  | `L_s140_origin 
          | `L_s141_origin_when_cross_origin  | `L_s172_same_origin 
          | `L_s185_strict_origin  | `L_s186_strict_origin_when_cross_origin 
          | `L_s198_unsafe_url ])
        ->
        match x4257 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s125_no_referrer -> Ojs.string_to_js "no-referrer"
        | `L_s126_no_referrer_when_downgrade ->
            Ojs.string_to_js "no-referrer-when-downgrade"
        | `L_s140_origin -> Ojs.string_to_js "origin"
        | `L_s141_origin_when_cross_origin ->
            Ojs.string_to_js "origin-when-cross-origin"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s185_strict_origin -> Ojs.string_to_js "strict-origin"
        | `L_s186_strict_origin_when_cross_origin ->
            Ojs.string_to_js "strict-origin-when-cross-origin"
        | `L_s198_unsafe_url -> Ojs.string_to_js "unsafe-url"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4261 : Ojs.t) -> t_of_js x4261
    and t_0_to_js : t_0 -> Ojs.t = fun (x4260 : t) -> t_to_js x4260
  end
module RequestInit =
  struct
    type t = [ `RequestInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4263 : Ojs.t) -> t_of_js x4263
    and t_0_to_js : t_0 -> Ojs.t = fun (x4262 : t) -> t_to_js x4262
    type tags = [ `RequestInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4266 : Ojs.t) -> intf_of_js __tags_of_js x4266
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4264 : __tags intf) -> intf_to_js __tags_to_js x4264
    let (get_body : 'tags this -> BodyInit.t or_null) =
      fun (x4268 : 'tags this) ->
        or_null_of_js BodyInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4268) "body")
    let (set_body : 'tags this -> BodyInit.t or_null -> unit) =
      fun (x4271 : 'tags this) ->
        fun (x4272 : BodyInit.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4271) "body"
            (or_null_to_js BodyInit.t_to_js x4272)
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4275 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4275) "cache")
    let (set_cache : 'tags this -> RequestCache.t -> unit) =
      fun (x4277 : 'tags this) ->
        fun (x4278 : RequestCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4277) "cache"
            (RequestCache.t_to_js x4278)
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4280 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4280) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x4282 : 'tags this) ->
        fun (x4283 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4282) "credentials"
            (RequestCredentials.t_to_js x4283)
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x4285 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4285) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4287 : 'tags this) ->
        fun (x4288 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4287) "headers"
            (HeadersInit.t_to_js x4288)
    let (get_integrity : 'tags this -> string) =
      fun (x4290 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4290) "integrity")
    let (set_integrity : 'tags this -> string -> unit) =
      fun (x4292 : 'tags this) ->
        fun (x4293 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4292) "integrity"
            (Ojs.string_to_js x4293)
    let (get_keepalive : 'tags this -> bool) =
      fun (x4295 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4295) "keepalive")
    let (set_keepalive : 'tags this -> bool -> unit) =
      fun (x4297 : 'tags this) ->
        fun (x4298 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4297) "keepalive"
            (Ojs.bool_to_js x4298)
    let (get_method : 'tags this -> string) =
      fun (x4300 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4300) "method")
    let (set_method : 'tags this -> string -> unit) =
      fun (x4302 : 'tags this) ->
        fun (x4303 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4302) "method"
            (Ojs.string_to_js x4303)
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4305 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4305) "mode")
    let (set_mode : 'tags this -> RequestMode.t -> unit) =
      fun (x4307 : 'tags this) ->
        fun (x4308 : RequestMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4307) "mode"
            (RequestMode.t_to_js x4308)
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4310 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4310) "redirect")
    let (set_redirect : 'tags this -> RequestRedirect.t -> unit) =
      fun (x4312 : 'tags this) ->
        fun (x4313 : RequestRedirect.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4312) "redirect"
            (RequestRedirect.t_to_js x4313)
    let (get_referrer : 'tags this -> string) =
      fun (x4315 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4315) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x4317 : 'tags this) ->
        fun (x4318 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4317) "referrer"
            (Ojs.string_to_js x4318)
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4320 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4320) "referrerPolicy")
    let (set_referrerPolicy : 'tags this -> ReferrerPolicy.t -> unit) =
      fun (x4322 : 'tags this) ->
        fun (x4323 : ReferrerPolicy.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4322) "referrerPolicy"
            (ReferrerPolicy.t_to_js x4323)
    let (get_signal : 'tags this -> AbortSignal.t or_null) =
      fun (x4325 : 'tags this) ->
        or_null_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4325) "signal")
    let (set_signal : 'tags this -> AbortSignal.t or_null -> unit) =
      fun (x4328 : 'tags this) ->
        fun (x4329 : AbortSignal.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4328) "signal"
            (or_null_to_js AbortSignal.t_to_js x4329)
    let (get_window : 'tags this -> never or_null) =
      fun (x4332 : 'tags this) ->
        or_null_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4332) "window")
    let (set_window : 'tags this -> never or_null -> unit) =
      fun (x4335 : 'tags this) ->
        fun (x4336 : never or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4335) "window"
            (or_null_to_js never_to_js x4336)
    let (create :
      ?body:BodyInit.t ->
        cache:RequestCache.t ->
          credentials:RequestCredentials.t ->
            headers:HeadersInit.t ->
              integrity:string ->
                keepalive:bool ->
                  method_:string ->
                    mode:RequestMode.t ->
                      redirect:RequestRedirect.t ->
                        referrer:string ->
                          referrerPolicy:ReferrerPolicy.t ->
                            ?signal:AbortSignal.t ->
                              ?window:never -> unit -> t)
      =
      fun ?body:(x4339 : BodyInit.t option) ->
        fun ~cache:(x4340 : RequestCache.t) ->
          fun ~credentials:(x4341 : RequestCredentials.t) ->
            fun ~headers:(x4342 : HeadersInit.t) ->
              fun ~integrity:(x4343 : string) ->
                fun ~keepalive:(x4344 : bool) ->
                  fun ~method_:(x4345 : string) ->
                    fun ~mode:(x4346 : RequestMode.t) ->
                      fun ~redirect:(x4347 : RequestRedirect.t) ->
                        fun ~referrer:(x4348 : string) ->
                          fun ~referrerPolicy:(x4349 : ReferrerPolicy.t) ->
                            fun ?signal:(x4350 : AbortSignal.t option) ->
                              fun ?window:(x4351 : never option) ->
                                fun () ->
                                  let x4352 = Ojs.empty_obj () in
                                  (match x4339 with
                                   | Some x4355 ->
                                       Ojs.set_prop_ascii x4352 "body"
                                         (BodyInit.t_to_js x4355)
                                   | None -> ());
                                  Ojs.set_prop_ascii x4352 "cache"
                                    (RequestCache.t_to_js x4340);
                                  Ojs.set_prop_ascii x4352 "credentials"
                                    (RequestCredentials.t_to_js x4341);
                                  Ojs.set_prop_ascii x4352 "headers"
                                    (HeadersInit.t_to_js x4342);
                                  Ojs.set_prop_ascii x4352 "integrity"
                                    (Ojs.string_to_js x4343);
                                  Ojs.set_prop_ascii x4352 "keepalive"
                                    (Ojs.bool_to_js x4344);
                                  Ojs.set_prop_ascii x4352 "method"
                                    (Ojs.string_to_js x4345);
                                  Ojs.set_prop_ascii x4352 "mode"
                                    (RequestMode.t_to_js x4346);
                                  Ojs.set_prop_ascii x4352 "redirect"
                                    (RequestRedirect.t_to_js x4347);
                                  Ojs.set_prop_ascii x4352 "referrer"
                                    (Ojs.string_to_js x4348);
                                  Ojs.set_prop_ascii x4352 "referrerPolicy"
                                    (ReferrerPolicy.t_to_js x4349);
                                  (match x4350 with
                                   | Some x4354 ->
                                       Ojs.set_prop_ascii x4352 "signal"
                                         (AbortSignal.t_to_js x4354)
                                   | None -> ());
                                  (match x4351 with
                                   | Some x4353 ->
                                       Ojs.set_prop_ascii x4352 "window"
                                         (never_to_js x4353)
                                   | None -> ());
                                  t_of_js x4352
    let cast_from = Obj.magic
  end
module RequestDestination =
  struct
    type t =
      [ `L_s0  | `L_s109_manifest  | `L_s132_object  | `L_s145_paintworklet 
      | `L_s169_report  | `L_s174_script  | `L_s176_sharedworker 
      | `L_s187_style  | `L_s193_track  | `L_s204_video  | `L_s209_worker 
      | `L_s212_xslt  | `L_s38_audio  | `L_s39_audioworklet 
      | `L_s62_document  | `L_s64_embed  | `L_s76_font  | `L_s78_frame 
      | `L_s89_iframe  | `L_s90_image ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4357 : Ojs.t) ->
        let x4358 = x4357 in
        match Ojs.string_of_js x4358 with
        | "" -> `L_s0
        | "manifest" -> `L_s109_manifest
        | "object" -> `L_s132_object
        | "paintworklet" -> `L_s145_paintworklet
        | "report" -> `L_s169_report
        | "script" -> `L_s174_script
        | "sharedworker" -> `L_s176_sharedworker
        | "style" -> `L_s187_style
        | "track" -> `L_s193_track
        | "video" -> `L_s204_video
        | "worker" -> `L_s209_worker
        | "xslt" -> `L_s212_xslt
        | "audio" -> `L_s38_audio
        | "audioworklet" -> `L_s39_audioworklet
        | "document" -> `L_s62_document
        | "embed" -> `L_s64_embed
        | "font" -> `L_s76_font
        | "frame" -> `L_s78_frame
        | "iframe" -> `L_s89_iframe
        | "image" -> `L_s90_image
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4356 :
          [ `L_s0  | `L_s109_manifest  | `L_s132_object 
          | `L_s145_paintworklet  | `L_s169_report  | `L_s174_script 
          | `L_s176_sharedworker  | `L_s187_style  | `L_s193_track 
          | `L_s204_video  | `L_s209_worker  | `L_s212_xslt  | `L_s38_audio 
          | `L_s39_audioworklet  | `L_s62_document  | `L_s64_embed 
          | `L_s76_font  | `L_s78_frame  | `L_s89_iframe  | `L_s90_image ])
        ->
        match x4356 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s109_manifest -> Ojs.string_to_js "manifest"
        | `L_s132_object -> Ojs.string_to_js "object"
        | `L_s145_paintworklet -> Ojs.string_to_js "paintworklet"
        | `L_s169_report -> Ojs.string_to_js "report"
        | `L_s174_script -> Ojs.string_to_js "script"
        | `L_s176_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s187_style -> Ojs.string_to_js "style"
        | `L_s193_track -> Ojs.string_to_js "track"
        | `L_s204_video -> Ojs.string_to_js "video"
        | `L_s209_worker -> Ojs.string_to_js "worker"
        | `L_s212_xslt -> Ojs.string_to_js "xslt"
        | `L_s38_audio -> Ojs.string_to_js "audio"
        | `L_s39_audioworklet -> Ojs.string_to_js "audioworklet"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s64_embed -> Ojs.string_to_js "embed"
        | `L_s76_font -> Ojs.string_to_js "font"
        | `L_s78_frame -> Ojs.string_to_js "frame"
        | `L_s89_iframe -> Ojs.string_to_js "iframe"
        | `L_s90_image -> Ojs.string_to_js "image"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4360 : Ojs.t) -> t_of_js x4360
    and t_0_to_js : t_0 -> Ojs.t = fun (x4359 : t) -> t_to_js x4359
  end
module rec
  Request:sig
            type t = [ `Body  | `Request ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Body  | `Request ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `Body  | `Request ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Request ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_cache : 'tags this -> RequestCache.t
            val get_credentials : 'tags this -> RequestCredentials.t
            val get_destination : 'tags this -> RequestDestination.t
            val get_headers : 'tags this -> Headers.t
            val get_integrity : 'tags this -> string
            val get_keepalive : 'tags this -> bool
            val get_method : 'tags this -> string
            val get_mode : 'tags this -> RequestMode.t
            val get_redirect : 'tags this -> RequestRedirect.t
            val get_referrer : 'tags this -> string
            val get_referrerPolicy : 'tags this -> ReferrerPolicy.t
            val get_signal : 'tags this -> AbortSignal.t
            val get_url : 'tags this -> string
            val clone : 'tags this -> t
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t
          end =
  struct
    type t = [ `Body  | `Request ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4362 : Ojs.t) -> t_of_js x4362
    and t_0_to_js : t_0 -> Ojs.t = fun (x4361 : t) -> t_to_js x4361
    type tags = [ `Body  | `Request ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Request ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4365 : Ojs.t) -> intf_of_js __tags_of_js x4365
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4363 : __tags intf) -> intf_to_js __tags_to_js x4363
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4367 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4367) "cache")
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4369 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4369) "credentials")
    let (get_destination : 'tags this -> RequestDestination.t) =
      fun (x4371 : 'tags this) ->
        RequestDestination.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4371) "destination")
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4373 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4373) "headers")
    let (get_integrity : 'tags this -> string) =
      fun (x4375 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4375) "integrity")
    let (get_keepalive : 'tags this -> bool) =
      fun (x4377 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4377) "keepalive")
    let (get_method : 'tags this -> string) =
      fun (x4379 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4379) "method")
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4381 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4381) "mode")
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4383 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4383) "redirect")
    let (get_referrer : 'tags this -> string) =
      fun (x4385 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4385) "referrer")
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4387 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4387) "referrerPolicy")
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x4389 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4389) "signal")
    let (get_url : 'tags this -> string) =
      fun (x4391 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4391) "url")
    let (clone : 'tags this -> t) =
      fun (x4393 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4393) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Request")
             "prototype")
    let (create : input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t) =
      fun ~input:(x4395 : RequestInfo.t) ->
        fun ?init:(x4396 : RequestInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Request")
                 (let x4397 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4397 "push" [|(RequestInfo.t_to_js x4395)|]);
                  (match x4396 with
                   | Some x4398 ->
                       ignore
                         (Ojs.call x4397 "push"
                            [|(RequestInit.t_to_js x4398)|])
                   | None -> ());
                  x4397))
  end
 and
  RequestInfo:sig
                type t = Request.t or_string
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t = Request.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x4401 : Ojs.t) -> or_string_of_js Request.t_of_js x4401
    and t_to_js : t -> Ojs.t =
      fun (x4399 : Request.t or_string) ->
        or_string_to_js Request.t_to_js x4399
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4404 : Ojs.t) -> t_of_js x4404
    and t_0_to_js : t_0 -> Ojs.t = fun (x4403 : t) -> t_to_js x4403
  end
module Cache =
  struct
    type t = [ `Cache ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4406 : Ojs.t) -> t_of_js x4406
    and t_0_to_js : t_0 -> Ojs.t = fun (x4405 : t) -> t_to_js x4405
    type tags = [ `Cache ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4409 : Ojs.t) -> intf_of_js __tags_of_js x4409
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4407 : __tags intf) -> intf_to_js __tags_to_js x4407
    let (add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1) =
      fun (x4412 : 'tags this) ->
        fun ~request:(x4411 : RequestInfo.t) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4412) "add"
               [|(RequestInfo.t_to_js x4411)|])
    let (addAll :
      'tags this -> requests:RequestInfo.t list -> unit Promise.t_1) =
      fun (x4417 : 'tags this) ->
        fun ~requests:(x4415 : RequestInfo.t list) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4417) "addAll"
               [|(Ojs.list_to_js RequestInfo.t_to_js x4415)|])
    let (delete :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1)
      =
      fun (x4424 : 'tags this) ->
        fun ~request:(x4420 : RequestInfo.t) ->
          fun ?options:(x4421 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.bool_of_js
                (let x4426 = this_to_js Obj.magic x4424 in
                 Ojs.call (Ojs.get_prop_ascii x4426 "delete") "apply"
                   [|x4426;((let x4422 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4422 "push"
                                  [|(RequestInfo.t_to_js x4420)|]);
                             (match x4421 with
                              | Some x4423 ->
                                  ignore
                                    (Ojs.call x4422 "push"
                                       [|(CacheQueryOptions.t_to_js x4423)|])
                              | None -> ());
                             x4422))|])
    let (keys :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t_1)
      =
      fun (x4433 : 'tags this) ->
        fun ?request:(x4428 : RequestInfo.t option) ->
          fun ?options:(x4429 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4436 : Ojs.t) -> Ojs.list_of_js Request.t_of_js x4436)
                (let x4435 = this_to_js Obj.magic x4433 in
                 Ojs.call (Ojs.get_prop_ascii x4435 "keys") "apply"
                   [|x4435;((let x4430 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4428 with
                              | Some x4432 ->
                                  ignore
                                    (Ojs.call x4430 "push"
                                       [|(RequestInfo.t_to_js x4432)|])
                              | None -> ());
                             (match x4429 with
                              | Some x4431 ->
                                  ignore
                                    (Ojs.call x4430 "push"
                                       [|(CacheQueryOptions.t_to_js x4431)|])
                              | None -> ());
                             x4430))|])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t ->
            unit -> Response.t or_undefined Promise.t_1)
      =
      fun (x4442 : 'tags this) ->
        fun ~request:(x4438 : RequestInfo.t) ->
          fun ?options:(x4439 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4445 : Ojs.t) ->
                   or_undefined_of_js Response.t_of_js x4445)
                (let x4444 = this_to_js Obj.magic x4442 in
                 Ojs.call (Ojs.get_prop_ascii x4444 "match") "apply"
                   [|x4444;((let x4440 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4440 "push"
                                  [|(RequestInfo.t_to_js x4438)|]);
                             (match x4439 with
                              | Some x4441 ->
                                  ignore
                                    (Ojs.call x4440 "push"
                                       [|(CacheQueryOptions.t_to_js x4441)|])
                              | None -> ());
                             x4440))|])
    let (matchAll :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t_1)
      =
      fun (x4452 : 'tags this) ->
        fun ?request:(x4447 : RequestInfo.t option) ->
          fun ?options:(x4448 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4455 : Ojs.t) -> Ojs.list_of_js Response.t_of_js x4455)
                (let x4454 = this_to_js Obj.magic x4452 in
                 Ojs.call (Ojs.get_prop_ascii x4454 "matchAll") "apply"
                   [|x4454;((let x4449 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4447 with
                              | Some x4451 ->
                                  ignore
                                    (Ojs.call x4449 "push"
                                       [|(RequestInfo.t_to_js x4451)|])
                              | None -> ());
                             (match x4448 with
                              | Some x4450 ->
                                  ignore
                                    (Ojs.call x4449 "push"
                                       [|(CacheQueryOptions.t_to_js x4450)|])
                              | None -> ());
                             x4449))|])
    let (put :
      'tags this ->
        request:RequestInfo.t -> response:Response.t -> unit Promise.t_1)
      =
      fun (x4459 : 'tags this) ->
        fun ~request:(x4457 : RequestInfo.t) ->
          fun ~response:(x4458 : Response.t) ->
            Promise.t_1_of_js Ojs.unit_of_js
              (Ojs.call (this_to_js Obj.magic x4459) "put"
                 [|(RequestInfo.t_to_js x4457);(Response.t_to_js x4458)|])
    let (addAll' :
      'tags this -> requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1)
      =
      fun (x4464 : 'tags this) ->
        fun ~requests:(x4462 : RequestInfo.t Iterable.t_1) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4464) "addAll"
               [|(Iterable.t_1_to_js RequestInfo.t_to_js x4462)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Cache")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Cache") [||])
  end
module CachesStatic =
  struct
    let (delete : string -> bool Promise.t_1) =
      fun (x4467 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "delete"
             [|(Ojs.string_to_js x4467)|])
    let (has : string -> bool Promise.t_1) =
      fun (x4469 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "has"
             [|(Ojs.string_to_js x4469)|])
    let (keys : unit -> string list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x4471 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4471)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "keys" [||])
    let (match_ :
      request:RequestInfo.t ->
        ?options:MultiCacheQueryOptions.t ->
          unit -> Response.t or_undefined Promise.t_1)
      =
      fun ~request:(x4473 : RequestInfo.t) ->
        fun ?options:(x4474 : MultiCacheQueryOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x4478 : Ojs.t) ->
                 or_undefined_of_js Response.t_of_js x4478)
              (let x4477 = Ojs.get_prop_ascii Ojs.global "caches" in
               Ojs.call (Ojs.get_prop_ascii x4477 "match") "apply"
                 [|x4477;((let x4475 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4475 "push"
                                [|(RequestInfo.t_to_js x4473)|]);
                           (match x4474 with
                            | Some x4476 ->
                                ignore
                                  (Ojs.call x4475 "push"
                                     [|(MultiCacheQueryOptions.t_to_js x4476)|])
                            | None -> ());
                           x4475))|])
    let (open_ : string -> Cache.t Promise.t_1) =
      fun (x4480 : string) ->
        Promise.t_1_of_js Cache.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "open"
             [|(Ojs.string_to_js x4480)|])
  end
module XMLHttpRequestResponseType =
  struct
    type t =
      [ `L_s0  | `L_s190_text  | `L_s37_arraybuffer  | `L_s44_blob 
      | `L_s62_document  | `L_s96_json ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4483 : Ojs.t) ->
        let x4484 = x4483 in
        match Ojs.string_of_js x4484 with
        | "" -> `L_s0
        | "text" -> `L_s190_text
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | "document" -> `L_s62_document
        | "json" -> `L_s96_json
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4482 :
          [ `L_s0  | `L_s190_text  | `L_s37_arraybuffer  | `L_s44_blob 
          | `L_s62_document  | `L_s96_json ])
        ->
        match x4482 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s190_text -> Ojs.string_to_js "text"
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s96_json -> Ojs.string_to_js "json"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4486 : Ojs.t) -> t_of_js x4486
    and t_0_to_js : t_0 -> Ojs.t = fun (x4485 : t) -> t_to_js x4485
  end
module ProgressEventInit =
  struct
    type t = [ `EventInit  | `ProgressEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4488 : Ojs.t) -> t_of_js x4488
    and t_0_to_js : t_0 -> Ojs.t = fun (x4487 : t) -> t_to_js x4487
    type tags = [ `EventInit  | `ProgressEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4491 : Ojs.t) -> intf_of_js __tags_of_js x4491
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4489 : __tags intf) -> intf_to_js __tags_to_js x4489
    let (get_lengthComputable : 'tags this -> bool) =
      fun (x4493 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4493) "lengthComputable")
    let (set_lengthComputable : 'tags this -> bool -> unit) =
      fun (x4495 : 'tags this) ->
        fun (x4496 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4495) "lengthComputable"
            (Ojs.bool_to_js x4496)
    let (get_loaded : 'tags this -> float) =
      fun (x4498 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4498) "loaded")
    let (set_loaded : 'tags this -> float -> unit) =
      fun (x4500 : 'tags this) ->
        fun (x4501 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4500) "loaded"
            (Ojs.float_to_js x4501)
    let (get_total : 'tags this -> float) =
      fun (x4503 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4503) "total")
    let (set_total : 'tags this -> float -> unit) =
      fun (x4505 : 'tags this) ->
        fun (x4506 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4505) "total"
            (Ojs.float_to_js x4506)
    let (create :
      lengthComputable:bool -> loaded:float -> total:float -> unit -> t) =
      fun ~lengthComputable:(x4508 : bool) ->
        fun ~loaded:(x4509 : float) ->
          fun ~total:(x4510 : float) ->
            fun () ->
              let x4511 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x4511 "lengthComputable"
                (Ojs.bool_to_js x4508);
              Ojs.set_prop_ascii x4511 "loaded" (Ojs.float_to_js x4509);
              Ojs.set_prop_ascii x4511 "total" (Ojs.float_to_js x4510);
              t_of_js x4511
    let cast_from = Obj.magic
  end
module ProgressEvent =
  struct
    type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4514 : Ojs.t) -> t_of_js __T_of_js x4514
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4512 : __T t) -> t_to_js __T_to_js x4512
    type t_0 = EventTarget.t t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4518 : Ojs.t) -> t_of_js EventTarget.t_of_js x4518
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4516 : EventTarget.t t) -> t_to_js EventTarget.t_to_js x4516
    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = EventTarget.t tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4522 : Ojs.t) -> intf_of_js __tags_of_js x4522
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4520 : __tags intf) -> intf_to_js __tags_to_js x4520
    let (get_lengthComputable : ('tags, 'T) this -> bool) =
      fun (x4524 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4524)
             "lengthComputable")
    let (get_loaded : ('tags, 'T) this -> float) =
      fun (x4527 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4527) "loaded")
    let (get_target : ('tags, 'T) this -> 'T or_null) =
      fun (x4530 : ('tags, 'T) this) ->
        or_null_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4530) "target")
    let (get_total : ('tags, 'T) this -> float) =
      fun (x4534 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4534) "total")
    let (create :
      lengthComputable:bool ->
        loaded:float -> ?target:'T -> total:float -> unit -> 'T t)
      =
      fun ~lengthComputable:(x4537 : bool) ->
        fun ~loaded:(x4538 : float) ->
          fun ?target:(x4539 : 'T option) ->
            fun ~total:(x4540 : float) ->
              fun () ->
                let x4541 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x4541 "lengthComputable"
                  (Ojs.bool_to_js x4537);
                Ojs.set_prop_ascii x4541 "loaded" (Ojs.float_to_js x4538);
                (match x4539 with
                 | Some x4543 ->
                     Ojs.set_prop_ascii x4541 "target" (Obj.magic x4543)
                 | None -> ());
                Ojs.set_prop_ascii x4541 "total" (Ojs.float_to_js x4540);
                t_of_js Obj.magic x4541
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0) =
      fun ~type_:(x4544 : string) ->
        fun ?eventInitDict:(x4545 : ProgressEventInit.t option) ->
          fun () ->
            t_0_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
                 (let x4546 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4546 "push" [|(Ojs.string_to_js x4544)|]);
                  (match x4545 with
                   | Some x4547 ->
                       ignore
                         (Ojs.call x4546 "push"
                            [|(ProgressEventInit.t_to_js x4547)|])
                   | None -> ());
                  x4546))
  end
module rec
  XMLHttpRequest:sig
                   type t =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags =
                       [ `EventTarget  | `XMLHttpRequest 
                       | `XMLHttpRequestEventTarget ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `XMLHttpRequest ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_onreadystatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) or_null
                   val set_onreadystatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) or_null -> unit
                   val get_readyState : 'tags this -> float
                   val get_response : 'tags this -> any
                   val get_responseText : 'tags this -> string
                   val get_responseType :
                     'tags this -> XMLHttpRequestResponseType.t
                   val set_responseType :
                     'tags this -> XMLHttpRequestResponseType.t -> unit
                   val get_responseURL : 'tags this -> string
                   val get_status : 'tags this -> float
                   val get_statusText : 'tags this -> string
                   val get_timeout : 'tags this -> float
                   val set_timeout : 'tags this -> float -> unit
                   val get_upload : 'tags this -> XMLHttpRequestUpload.t
                   val get_withCredentials : 'tags this -> bool
                   val set_withCredentials : 'tags this -> bool -> unit
                   val abort : 'tags this -> unit
                   val getAllResponseHeaders : 'tags this -> string
                   val getResponseHeader :
                     'tags this -> name:string -> string or_null
                   val open_ :
                     'tags this ->
                       method_:string -> url:URL.t or_string -> unit
                   val open_' :
                     'tags this ->
                       method_:string ->
                         url:URL.t or_string ->
                           async:bool ->
                             ?username:string or_null ->
                               ?password:string or_null -> unit -> unit
                   val overrideMimeType : 'tags this -> mime:string -> unit
                   val send :
                     'tags this ->
                       ?body:XMLHttpRequestBodyInit.t or_null -> unit -> unit
                   val setRequestHeader :
                     'tags this -> name:string -> value:string -> unit
                   val get_DONE : 'tags this -> float
                   val get_HEADERS_RECEIVED : 'tags this -> float
                   val get_LOADING : 'tags this -> float
                   val get_OPENED : 'tags this -> float
                   val get_UNSENT : 'tags this -> float
                   val addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit
                   val addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit
                   val removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit
                   val removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                   val done_ : unit -> float
                   val headers_received : unit -> float
                   val loading : unit -> float
                   val opened : unit -> float
                   val unsent : unit -> float
                 end =
  struct
    type t =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4549 : Ojs.t) -> t_of_js x4549
    and t_0_to_js : t_0 -> Ojs.t = fun (x4548 : t) -> t_to_js x4548
    type tags =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4552 : Ojs.t) -> intf_of_js __tags_of_js x4552
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4550 : __tags intf) -> intf_to_js __tags_to_js x4550
    let (get_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x4554 : 'tags this) ->
        or_null_of_js
          (fun (x4556 : Ojs.t) ->
             fun ~this:(x4557 : t) ->
               fun ~ev:(x4558 : Event.t) ->
                 any_of_js
                   (Ojs.apply x4556 [|(t_to_js x4557);(Event.t_to_js x4558)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4554)
             "onreadystatechange")
    let (set_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x4559 : 'tags this) ->
        fun (x4560 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4559)
            "onreadystatechange"
            (or_null_to_js
               (fun (x4561 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x4562 : Ojs.t) ->
                       fun (x4563 : Ojs.t) ->
                         any_to_js
                           (x4561 ~this:(t_of_js x4562)
                              ~ev:(Event.t_of_js x4563)))) x4560)
    let (get_readyState : 'tags this -> float) =
      fun (x4565 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4565) "readyState")
    let (get_response : 'tags this -> any) =
      fun (x4567 : 'tags this) ->
        any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4567) "response")
    let (get_responseText : 'tags this -> string) =
      fun (x4569 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4569) "responseText")
    let (get_responseType : 'tags this -> XMLHttpRequestResponseType.t) =
      fun (x4571 : 'tags this) ->
        XMLHttpRequestResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4571) "responseType")
    let (set_responseType :
      'tags this -> XMLHttpRequestResponseType.t -> unit) =
      fun (x4573 : 'tags this) ->
        fun (x4574 : XMLHttpRequestResponseType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4573) "responseType"
            (XMLHttpRequestResponseType.t_to_js x4574)
    let (get_responseURL : 'tags this -> string) =
      fun (x4576 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4576) "responseURL")
    let (get_status : 'tags this -> float) =
      fun (x4578 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4578) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4580 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4580) "statusText")
    let (get_timeout : 'tags this -> float) =
      fun (x4582 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4582) "timeout")
    let (set_timeout : 'tags this -> float -> unit) =
      fun (x4584 : 'tags this) ->
        fun (x4585 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4584) "timeout"
            (Ojs.float_to_js x4585)
    let (get_upload : 'tags this -> XMLHttpRequestUpload.t) =
      fun (x4587 : 'tags this) ->
        XMLHttpRequestUpload.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4587) "upload")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x4589 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4589) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x4591 : 'tags this) ->
        fun (x4592 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4591) "withCredentials"
            (Ojs.bool_to_js x4592)
    let (abort : 'tags this -> unit) =
      fun (x4594 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4594) "abort" [||])
    let (getAllResponseHeaders : 'tags this -> string) =
      fun (x4596 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4596) "getAllResponseHeaders" [||])
    let (getResponseHeader : 'tags this -> name:string -> string or_null) =
      fun (x4599 : 'tags this) ->
        fun ~name:(x4598 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4599) "getResponseHeader"
               [|(Ojs.string_to_js x4598)|])
    let (open_ : 'tags this -> method_:string -> url:URL.t or_string -> unit)
      =
      fun (x4605 : 'tags this) ->
        fun ~method_:(x4602 : string) ->
          fun ~url:(x4603 : URL.t or_string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4605) "open"
                 [|(Ojs.string_to_js x4602);(or_string_to_js URL.t_to_js
                                               x4603)|])
    let (open_' :
      'tags this ->
        method_:string ->
          url:URL.t or_string ->
            async:bool ->
              ?username:string or_null ->
                ?password:string or_null -> unit -> unit)
      =
      fun (x4618 : 'tags this) ->
        fun ~method_:(x4607 : string) ->
          fun ~url:(x4608 : URL.t or_string) ->
            fun ~async:(x4609 : bool) ->
              fun ?username:(x4610 : string or_null option) ->
                fun ?password:(x4611 : string or_null option) ->
                  fun () ->
                    ignore
                      (let x4620 = this_to_js Obj.magic x4618 in
                       Ojs.call (Ojs.get_prop_ascii x4620 "open") "apply"
                         [|x4620;((let x4612 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4612 "push"
                                        [|(Ojs.string_to_js x4607)|]);
                                   ignore
                                     (Ojs.call x4612 "push"
                                        [|(or_string_to_js URL.t_to_js x4608)|]);
                                   ignore
                                     (Ojs.call x4612 "push"
                                        [|(Ojs.bool_to_js x4609)|]);
                                   (match x4610 with
                                    | Some x4615 ->
                                        ignore
                                          (Ojs.call x4612 "push"
                                             [|(or_null_to_js
                                                  Ojs.string_to_js x4615)|])
                                    | None -> ());
                                   (match x4611 with
                                    | Some x4613 ->
                                        ignore
                                          (Ojs.call x4612 "push"
                                             [|(or_null_to_js
                                                  Ojs.string_to_js x4613)|])
                                    | None -> ());
                                   x4612))|])
    let (overrideMimeType : 'tags this -> mime:string -> unit) =
      fun (x4622 : 'tags this) ->
        fun ~mime:(x4621 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4622) "overrideMimeType"
               [|(Ojs.string_to_js x4621)|])
    let (send :
      'tags this -> ?body:XMLHttpRequestBodyInit.t or_null -> unit -> unit) =
      fun (x4628 : 'tags this) ->
        fun ?body:(x4624 : XMLHttpRequestBodyInit.t or_null option) ->
          fun () ->
            ignore
              (let x4630 = this_to_js Obj.magic x4628 in
               Ojs.call (Ojs.get_prop_ascii x4630 "send") "apply"
                 [|x4630;((let x4625 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4624 with
                            | Some x4626 ->
                                ignore
                                  (Ojs.call x4625 "push"
                                     [|(or_null_to_js
                                          XMLHttpRequestBodyInit.t_to_js
                                          x4626)|])
                            | None -> ());
                           x4625))|])
    let (setRequestHeader :
      'tags this -> name:string -> value:string -> unit) =
      fun (x4633 : 'tags this) ->
        fun ~name:(x4631 : string) ->
          fun ~value:(x4632 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4633) "setRequestHeader"
                 [|(Ojs.string_to_js x4631);(Ojs.string_to_js x4632)|])
    let (get_DONE : 'tags this -> float) =
      fun (x4635 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4635) "DONE")
    let (get_HEADERS_RECEIVED : 'tags this -> float) =
      fun (x4637 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4637) "HEADERS_RECEIVED")
    let (get_LOADING : 'tags this -> float) =
      fun (x4639 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4639) "LOADING")
    let (get_OPENED : 'tags this -> float) =
      fun (x4641 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4641) "OPENED")
    let (get_UNSENT : 'tags this -> float) =
      fun (x4643 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4643) "UNSENT")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4653 : 'tags this) ->
        fun ~type_:(x4645 : 'K) ->
          fun ~listener:(x4646 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4647 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4655 = this_to_js Obj.magic x4653 in
                   Ojs.call (Ojs.get_prop_ascii x4655 "addEventListener")
                     "apply"
                     [|x4655;((let x4648 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4648 "push" [|(Obj.magic x4645)|]);
                               ignore
                                 (Ojs.call x4648 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4651 : Ojs.t) ->
                                            fun (x4652 : Ojs.t) ->
                                              any_to_js
                                                (x4646 ~this:(t_of_js x4651)
                                                   ~ev:(any_of_js x4652))))|]);
                               (match x4647 with
                                | Some x4649 ->
                                    ignore
                                      (Ojs.call x4648 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4649)|])
                                | None -> ());
                               x4648))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4662 : 'tags this) ->
        fun ~type_:(x4656 : string) ->
          fun ~listener:(x4657 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4658 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4664 = this_to_js Obj.magic x4662 in
                   Ojs.call (Ojs.get_prop_ascii x4664 "addEventListener")
                     "apply"
                     [|x4664;((let x4659 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4659 "push"
                                    [|(Ojs.string_to_js x4656)|]);
                               ignore
                                 (Ojs.call x4659 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4657)|]);
                               (match x4658 with
                                | Some x4660 ->
                                    ignore
                                      (Ojs.call x4659 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4660)|])
                                | None -> ());
                               x4659))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4673 : 'tags this) ->
        fun ~type_:(x4665 : 'K) ->
          fun ~listener:(x4666 : this:t -> ev:any -> any) ->
            fun ?options:(x4667 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4675 = this_to_js Obj.magic x4673 in
                   Ojs.call (Ojs.get_prop_ascii x4675 "removeEventListener")
                     "apply"
                     [|x4675;((let x4668 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4668 "push" [|(Obj.magic x4665)|]);
                               ignore
                                 (Ojs.call x4668 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4671 : Ojs.t) ->
                                            fun (x4672 : Ojs.t) ->
                                              any_to_js
                                                (x4666 ~this:(t_of_js x4671)
                                                   ~ev:(any_of_js x4672))))|]);
                               (match x4667 with
                                | Some x4669 ->
                                    ignore
                                      (Ojs.call x4668 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4669)|])
                                | None -> ());
                               x4668))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4682 : 'tags this) ->
        fun ~type_:(x4676 : string) ->
          fun ~listener:(x4677 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x4678 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4684 = this_to_js Obj.magic x4682 in
                   Ojs.call (Ojs.get_prop_ascii x4684 "removeEventListener")
                     "apply"
                     [|x4684;((let x4679 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4679 "push"
                                    [|(Ojs.string_to_js x4676)|]);
                               ignore
                                 (Ojs.call x4679 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4677)|]);
                               (match x4678 with
                                | Some x4680 ->
                                    ignore
                                      (Ojs.call x4679 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4680)|])
                                | None -> ());
                               x4679))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "DONE")
    let (headers_received : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
             "HEADERS_RECEIVED")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "LOADING")
    let (opened : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "OPENED")
    let (unsent : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "UNSENT")
  end
 and
  XMLHttpRequestEventTarget:sig
                              type t =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestEventTarget ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `EventTarget  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4686 : Ojs.t) -> t_of_js x4686
    and t_0_to_js : t_0 -> Ojs.t = fun (x4685 : t) -> t_to_js x4685
    type tags = [ `EventTarget  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTarget ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4689 : Ojs.t) -> intf_of_js __tags_of_js x4689
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4687 : __tags intf) -> intf_to_js __tags_to_js x4687
    let (get_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4691 : 'tags this) ->
        or_null_of_js
          (fun (x4693 : Ojs.t) ->
             fun ~this:(x4694 : XMLHttpRequest.t) ->
               fun ~ev:(x4695 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4693
                      [|(XMLHttpRequest.t_to_js x4694);(ProgressEvent.t_0_to_js
                                                          x4695)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4691) "onabort")
    let (set_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4696 : 'tags this) ->
        fun
          (x4697 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4696) "onabort"
            (or_null_to_js
               (fun
                  (x4698 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4699 : Ojs.t) ->
                       fun (x4700 : Ojs.t) ->
                         any_to_js
                           (x4698 ~this:(XMLHttpRequest.t_of_js x4699)
                              ~ev:(ProgressEvent.t_0_of_js x4700)))) x4697)
    let (get_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4702 : 'tags this) ->
        or_null_of_js
          (fun (x4704 : Ojs.t) ->
             fun ~this:(x4705 : XMLHttpRequest.t) ->
               fun ~ev:(x4706 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4704
                      [|(XMLHttpRequest.t_to_js x4705);(ProgressEvent.t_0_to_js
                                                          x4706)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4702) "onerror")
    let (set_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4707 : 'tags this) ->
        fun
          (x4708 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4707) "onerror"
            (or_null_to_js
               (fun
                  (x4709 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4710 : Ojs.t) ->
                       fun (x4711 : Ojs.t) ->
                         any_to_js
                           (x4709 ~this:(XMLHttpRequest.t_of_js x4710)
                              ~ev:(ProgressEvent.t_0_of_js x4711)))) x4708)
    let (get_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4713 : 'tags this) ->
        or_null_of_js
          (fun (x4715 : Ojs.t) ->
             fun ~this:(x4716 : XMLHttpRequest.t) ->
               fun ~ev:(x4717 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4715
                      [|(XMLHttpRequest.t_to_js x4716);(ProgressEvent.t_0_to_js
                                                          x4717)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4713) "onload")
    let (set_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4718 : 'tags this) ->
        fun
          (x4719 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4718) "onload"
            (or_null_to_js
               (fun
                  (x4720 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4721 : Ojs.t) ->
                       fun (x4722 : Ojs.t) ->
                         any_to_js
                           (x4720 ~this:(XMLHttpRequest.t_of_js x4721)
                              ~ev:(ProgressEvent.t_0_of_js x4722)))) x4719)
    let (get_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4724 : 'tags this) ->
        or_null_of_js
          (fun (x4726 : Ojs.t) ->
             fun ~this:(x4727 : XMLHttpRequest.t) ->
               fun ~ev:(x4728 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4726
                      [|(XMLHttpRequest.t_to_js x4727);(ProgressEvent.t_0_to_js
                                                          x4728)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4724) "onloadend")
    let (set_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4729 : 'tags this) ->
        fun
          (x4730 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4729) "onloadend"
            (or_null_to_js
               (fun
                  (x4731 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4732 : Ojs.t) ->
                       fun (x4733 : Ojs.t) ->
                         any_to_js
                           (x4731 ~this:(XMLHttpRequest.t_of_js x4732)
                              ~ev:(ProgressEvent.t_0_of_js x4733)))) x4730)
    let (get_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4735 : 'tags this) ->
        or_null_of_js
          (fun (x4737 : Ojs.t) ->
             fun ~this:(x4738 : XMLHttpRequest.t) ->
               fun ~ev:(x4739 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4737
                      [|(XMLHttpRequest.t_to_js x4738);(ProgressEvent.t_0_to_js
                                                          x4739)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4735) "onloadstart")
    let (set_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4740 : 'tags this) ->
        fun
          (x4741 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4740) "onloadstart"
            (or_null_to_js
               (fun
                  (x4742 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4743 : Ojs.t) ->
                       fun (x4744 : Ojs.t) ->
                         any_to_js
                           (x4742 ~this:(XMLHttpRequest.t_of_js x4743)
                              ~ev:(ProgressEvent.t_0_of_js x4744)))) x4741)
    let (get_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4746 : 'tags this) ->
        or_null_of_js
          (fun (x4748 : Ojs.t) ->
             fun ~this:(x4749 : XMLHttpRequest.t) ->
               fun ~ev:(x4750 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4748
                      [|(XMLHttpRequest.t_to_js x4749);(ProgressEvent.t_0_to_js
                                                          x4750)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4746) "onprogress")
    let (set_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4751 : 'tags this) ->
        fun
          (x4752 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4751) "onprogress"
            (or_null_to_js
               (fun
                  (x4753 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4754 : Ojs.t) ->
                       fun (x4755 : Ojs.t) ->
                         any_to_js
                           (x4753 ~this:(XMLHttpRequest.t_of_js x4754)
                              ~ev:(ProgressEvent.t_0_of_js x4755)))) x4752)
    let (get_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4757 : 'tags this) ->
        or_null_of_js
          (fun (x4759 : Ojs.t) ->
             fun ~this:(x4760 : XMLHttpRequest.t) ->
               fun ~ev:(x4761 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4759
                      [|(XMLHttpRequest.t_to_js x4760);(ProgressEvent.t_0_to_js
                                                          x4761)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4757) "ontimeout")
    let (set_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4762 : 'tags this) ->
        fun
          (x4763 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4762) "ontimeout"
            (or_null_to_js
               (fun
                  (x4764 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4765 : Ojs.t) ->
                       fun (x4766 : Ojs.t) ->
                         any_to_js
                           (x4764 ~this:(XMLHttpRequest.t_of_js x4765)
                              ~ev:(ProgressEvent.t_0_of_js x4766)))) x4763)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4776 : 'tags this) ->
        fun ~type_:(x4768 : 'K) ->
          fun ~listener:(x4769 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4770 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4778 = this_to_js Obj.magic x4776 in
                   Ojs.call (Ojs.get_prop_ascii x4778 "addEventListener")
                     "apply"
                     [|x4778;((let x4771 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4771 "push" [|(Obj.magic x4768)|]);
                               ignore
                                 (Ojs.call x4771 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4774 : Ojs.t) ->
                                            fun (x4775 : Ojs.t) ->
                                              any_to_js
                                                (x4769 ~this:(t_of_js x4774)
                                                   ~ev:(any_of_js x4775))))|]);
                               (match x4770 with
                                | Some x4772 ->
                                    ignore
                                      (Ojs.call x4771 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4772)|])
                                | None -> ());
                               x4771))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4785 : 'tags this) ->
        fun ~type_:(x4779 : string) ->
          fun ~listener:(x4780 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4781 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4787 = this_to_js Obj.magic x4785 in
                   Ojs.call (Ojs.get_prop_ascii x4787 "addEventListener")
                     "apply"
                     [|x4787;((let x4782 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4782 "push"
                                    [|(Ojs.string_to_js x4779)|]);
                               ignore
                                 (Ojs.call x4782 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4780)|]);
                               (match x4781 with
                                | Some x4783 ->
                                    ignore
                                      (Ojs.call x4782 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4783)|])
                                | None -> ());
                               x4782))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4796 : 'tags this) ->
        fun ~type_:(x4788 : 'K) ->
          fun ~listener:(x4789 : this:t -> ev:any -> any) ->
            fun ?options:(x4790 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4798 = this_to_js Obj.magic x4796 in
                   Ojs.call (Ojs.get_prop_ascii x4798 "removeEventListener")
                     "apply"
                     [|x4798;((let x4791 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4791 "push" [|(Obj.magic x4788)|]);
                               ignore
                                 (Ojs.call x4791 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4794 : Ojs.t) ->
                                            fun (x4795 : Ojs.t) ->
                                              any_to_js
                                                (x4789 ~this:(t_of_js x4794)
                                                   ~ev:(any_of_js x4795))))|]);
                               (match x4790 with
                                | Some x4792 ->
                                    ignore
                                      (Ojs.call x4791 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4792)|])
                                | None -> ());
                               x4791))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4805 : 'tags this) ->
        fun ~type_:(x4799 : string) ->
          fun ~listener:(x4800 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x4801 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4807 = this_to_js Obj.magic x4805 in
                   Ojs.call (Ojs.get_prop_ascii x4807 "removeEventListener")
                     "apply"
                     [|x4807;((let x4802 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4802 "push"
                                    [|(Ojs.string_to_js x4799)|]);
                               ignore
                                 (Ojs.call x4802 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4800)|]);
                               (match x4801 with
                                | Some x4803 ->
                                    ignore
                                      (Ojs.call x4802 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4803)|])
                                | None -> ());
                               x4802))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget") 
             [||])
  end and
       XMLHttpRequestUpload:sig
                              type t =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget 
                                  | `XMLHttpRequestUpload ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestUpload ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
       struct
         type t =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x4809 : Ojs.t) -> t_of_js x4809
         and t_0_to_js : t_0 -> Ojs.t = fun (x4808 : t) -> t_to_js x4808
         type tags =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ]
         type tags_0 = tags
         type 'tags this =
           'tags intf constraint 'tags = [> `XMLHttpRequestUpload ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x4812 : Ojs.t) -> intf_of_js __tags_of_js x4812
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x4810 : __tags intf) -> intf_to_js __tags_to_js x4810
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:AddEventListenerOptions.t or_boolean ->
                   unit -> unit)
           =
           fun (x4822 : 'tags this) ->
             fun ~type_:(x4814 : 'K) ->
               fun ~listener:(x4815 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x4816 :
                              AddEventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x4824 = this_to_js Obj.magic x4822 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4824 "addEventListener")
                          "apply"
                          [|x4824;((let x4817 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4817 "push"
                                         [|(Obj.magic x4814)|]);
                                    ignore
                                      (Ojs.call x4817 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x4820 : Ojs.t) ->
                                                 fun (x4821 : Ojs.t) ->
                                                   any_to_js
                                                     (x4815
                                                        ~this:(t_of_js x4820)
                                                        ~ev:(any_of_js x4821))))|]);
                                    (match x4816 with
                                     | Some x4818 ->
                                         ignore
                                           (Ojs.call x4817 "push"
                                              [|(or_boolean_to_js
                                                   AddEventListenerOptions.t_to_js
                                                   x4818)|])
                                     | None -> ());
                                    x4817))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:AddEventListenerOptions.t or_boolean ->
                   unit -> unit)
           =
           fun (x4831 : 'tags this) ->
             fun ~type_:(x4825 : string) ->
               fun ~listener:(x4826 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x4827 :
                              AddEventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x4833 = this_to_js Obj.magic x4831 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4833 "addEventListener")
                          "apply"
                          [|x4833;((let x4828 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4828 "push"
                                         [|(Ojs.string_to_js x4825)|]);
                                    ignore
                                      (Ojs.call x4828 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x4826)|]);
                                    (match x4827 with
                                     | Some x4829 ->
                                         ignore
                                           (Ojs.call x4828 "push"
                                              [|(or_boolean_to_js
                                                   AddEventListenerOptions.t_to_js
                                                   x4829)|])
                                     | None -> ());
                                    x4828))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:EventListenerOptions.t or_boolean -> unit -> unit)
           =
           fun (x4842 : 'tags this) ->
             fun ~type_:(x4834 : 'K) ->
               fun ~listener:(x4835 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x4836 :
                              EventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x4844 = this_to_js Obj.magic x4842 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4844 "removeEventListener")
                          "apply"
                          [|x4844;((let x4837 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4837 "push"
                                         [|(Obj.magic x4834)|]);
                                    ignore
                                      (Ojs.call x4837 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x4840 : Ojs.t) ->
                                                 fun (x4841 : Ojs.t) ->
                                                   any_to_js
                                                     (x4835
                                                        ~this:(t_of_js x4840)
                                                        ~ev:(any_of_js x4841))))|]);
                                    (match x4836 with
                                     | Some x4838 ->
                                         ignore
                                           (Ojs.call x4837 "push"
                                              [|(or_boolean_to_js
                                                   EventListenerOptions.t_to_js
                                                   x4838)|])
                                     | None -> ());
                                    x4837))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:EventListenerOptions.t or_boolean -> unit -> unit)
           =
           fun (x4851 : 'tags this) ->
             fun ~type_:(x4845 : string) ->
               fun ~listener:(x4846 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x4847 :
                              EventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x4853 = this_to_js Obj.magic x4851 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4853 "removeEventListener")
                          "apply"
                          [|x4853;((let x4848 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4848 "push"
                                         [|(Ojs.string_to_js x4845)|]);
                                    ignore
                                      (Ojs.call x4848 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x4846)|]);
                                    (match x4847 with
                                     | Some x4849 ->
                                         ignore
                                           (Ojs.call x4848 "push"
                                              [|(or_boolean_to_js
                                                   EventListenerOptions.t_to_js
                                                   x4849)|])
                                     | None -> ());
                                    x4848))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload")
                  "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload") 
                  [||])
       end
module XMLHttpRequestEventTargetEventMap =
  struct
    type t = [ `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4855 : Ojs.t) -> t_of_js x4855
    and t_0_to_js : t_0 -> Ojs.t = fun (x4854 : t) -> t_to_js x4854
    type tags = [ `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4858 : Ojs.t) -> intf_of_js __tags_of_js x4858
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4856 : __tags intf) -> intf_to_js __tags_to_js x4856
    let (get_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4860 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4860) "abort")
    let (set_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4863 : 'tags this) ->
        fun (x4864 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4863) "abort"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4864)
    let (get_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4867 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4867) "error")
    let (set_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4870 : 'tags this) ->
        fun (x4871 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4870) "error"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4871)
    let (get_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4874 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4874) "load")
    let (set_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4877 : 'tags this) ->
        fun (x4878 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4877) "load"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4878)
    let (get_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4881 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4881) "loadend")
    let (set_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4884 : 'tags this) ->
        fun (x4885 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4884) "loadend"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4885)
    let (get_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4888 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4888) "loadstart")
    let (set_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4891 : 'tags this) ->
        fun (x4892 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4891) "loadstart"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4892)
    let (get_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4895 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4895) "progress")
    let (set_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4898 : 'tags this) ->
        fun (x4899 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4898) "progress"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4899)
    let (get_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4902 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4902) "timeout")
    let (set_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4905 : 'tags this) ->
        fun (x4906 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4905) "timeout"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4906)
    let (create :
      abort:XMLHttpRequestEventTarget.t ProgressEvent.t ->
        error:XMLHttpRequestEventTarget.t ProgressEvent.t ->
          load:XMLHttpRequestEventTarget.t ProgressEvent.t ->
            loadend:XMLHttpRequestEventTarget.t ProgressEvent.t ->
              loadstart:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                progress:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                  timeout:XMLHttpRequestEventTarget.t ProgressEvent.t ->
                    unit -> t)
      =
      fun ~abort:(x4909 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
        fun ~error:(x4910 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          fun ~load:(x4911 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
            fun
              ~loadend:(x4912 : XMLHttpRequestEventTarget.t ProgressEvent.t)
              ->
              fun
                ~loadstart:(x4913 :
                             XMLHttpRequestEventTarget.t ProgressEvent.t)
                ->
                fun
                  ~progress:(x4914 :
                              XMLHttpRequestEventTarget.t ProgressEvent.t)
                  ->
                  fun
                    ~timeout:(x4915 :
                               XMLHttpRequestEventTarget.t ProgressEvent.t)
                    ->
                    fun () ->
                      let x4916 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x4916 "abort"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x4909);
                      Ojs.set_prop_ascii x4916 "error"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x4910);
                      Ojs.set_prop_ascii x4916 "load"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x4911);
                      Ojs.set_prop_ascii x4916 "loadend"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x4912);
                      Ojs.set_prop_ascii x4916 "loadstart"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x4913);
                      Ojs.set_prop_ascii x4916 "progress"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x4914);
                      Ojs.set_prop_ascii x4916 "timeout"
                        (ProgressEvent.t_to_js
                           XMLHttpRequestEventTarget.t_to_js x4915);
                      t_of_js x4916
    let cast_from = Obj.magic
  end
module XMLHttpRequestEventMap =
  struct
    type t =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4925 : Ojs.t) -> t_of_js x4925
    and t_0_to_js : t_0 -> Ojs.t = fun (x4924 : t) -> t_to_js x4924
    type tags =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4928 : Ojs.t) -> intf_of_js __tags_of_js x4928
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4926 : __tags intf) -> intf_to_js __tags_to_js x4926
    let (get_readystatechange : 'tags this -> Event.t) =
      fun (x4930 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4930) "readystatechange")
    let (set_readystatechange : 'tags this -> Event.t -> unit) =
      fun (x4932 : 'tags this) ->
        fun (x4933 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4932) "readystatechange"
            (Event.t_to_js x4933)
    let (create : readystatechange:Event.t -> unit -> t) =
      fun ~readystatechange:(x4935 : Event.t) ->
        fun () ->
          let x4936 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x4936 "readystatechange" (Event.t_to_js x4935);
          t_of_js x4936
    let cast_from = Obj.magic
  end
module ServiceWorkerState =
  struct
    type t =
      [ `L_s146_parsed  | `L_s166_redundant  | `L_s33_activated 
      | `L_s34_activating  | `L_s94_installed  | `L_s95_installing ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4938 : Ojs.t) ->
        let x4939 = x4938 in
        match Ojs.string_of_js x4939 with
        | "parsed" -> `L_s146_parsed
        | "redundant" -> `L_s166_redundant
        | "activated" -> `L_s33_activated
        | "activating" -> `L_s34_activating
        | "installed" -> `L_s94_installed
        | "installing" -> `L_s95_installing
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4937 :
          [ `L_s146_parsed  | `L_s166_redundant  | `L_s33_activated 
          | `L_s34_activating  | `L_s94_installed  | `L_s95_installing ])
        ->
        match x4937 with
        | `L_s146_parsed -> Ojs.string_to_js "parsed"
        | `L_s166_redundant -> Ojs.string_to_js "redundant"
        | `L_s33_activated -> Ojs.string_to_js "activated"
        | `L_s34_activating -> Ojs.string_to_js "activating"
        | `L_s94_installed -> Ojs.string_to_js "installed"
        | `L_s95_installing -> Ojs.string_to_js "installing"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4941 : Ojs.t) -> t_of_js x4941
    and t_0_to_js : t_0 -> Ojs.t = fun (x4940 : t) -> t_to_js x4940
  end
module ImageBitmap =
  struct
    type t = [ `ImageBitmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4943 : Ojs.t) -> t_of_js x4943
    and t_0_to_js : t_0 -> Ojs.t = fun (x4942 : t) -> t_to_js x4942
    type tags = [ `ImageBitmap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4946 : Ojs.t) -> intf_of_js __tags_of_js x4946
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4944 : __tags intf) -> intf_to_js __tags_to_js x4944
    let (get_height : 'tags this -> float) =
      fun (x4948 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4948) "height")
    let (get_width : 'tags this -> float) =
      fun (x4950 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4950) "width")
    let (close : 'tags this -> unit) =
      fun (x4952 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4952) "close" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ImageBitmap") [||])
  end
module StructuredSerializeOptions =
  struct
    type t = [ `StructuredSerializeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4955 : Ojs.t) -> t_of_js x4955
    and t_0_to_js : t_0 -> Ojs.t = fun (x4954 : t) -> t_to_js x4954
    type tags = [ `StructuredSerializeOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `StructuredSerializeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4958 : Ojs.t) -> intf_of_js __tags_of_js x4958
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4956 : __tags intf) -> intf_to_js __tags_to_js x4956
    let (get_transfer : 'tags this -> any list) =
      fun (x4960 : 'tags this) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4960) "transfer")
    let (set_transfer : 'tags this -> any list -> unit) =
      fun (x4963 : 'tags this) ->
        fun (x4964 : any list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4963) "transfer"
            (Ojs.list_to_js any_to_js x4964)
    let (create : transfer:any list -> unit -> t) =
      fun ~transfer:(x4967 : any list) ->
        fun () ->
          let x4968 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x4968 "transfer"
            (Ojs.list_to_js any_to_js x4967);
          t_of_js x4968
    let cast_from = Obj.magic
  end
module ErrorEventInit =
  struct
    type t = [ `ErrorEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4971 : Ojs.t) -> t_of_js x4971
    and t_0_to_js : t_0 -> Ojs.t = fun (x4970 : t) -> t_to_js x4970
    type tags = [ `ErrorEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4974 : Ojs.t) -> intf_of_js __tags_of_js x4974
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4972 : __tags intf) -> intf_to_js __tags_to_js x4972
    let (get_colno : 'tags this -> float) =
      fun (x4976 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4976) "colno")
    let (set_colno : 'tags this -> float -> unit) =
      fun (x4978 : 'tags this) ->
        fun (x4979 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4978) "colno"
            (Ojs.float_to_js x4979)
    let (get_error : 'tags this -> any) =
      fun (x4981 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4981) "error")
    let (set_error : 'tags this -> any -> unit) =
      fun (x4983 : 'tags this) ->
        fun (x4984 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4983) "error"
            (any_to_js x4984)
    let (get_filename : 'tags this -> string) =
      fun (x4986 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4986) "filename")
    let (set_filename : 'tags this -> string -> unit) =
      fun (x4988 : 'tags this) ->
        fun (x4989 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4988) "filename"
            (Ojs.string_to_js x4989)
    let (get_lineno : 'tags this -> float) =
      fun (x4991 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4991) "lineno")
    let (set_lineno : 'tags this -> float -> unit) =
      fun (x4993 : 'tags this) ->
        fun (x4994 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4993) "lineno"
            (Ojs.float_to_js x4994)
    let (get_message : 'tags this -> string) =
      fun (x4996 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4996) "message")
    let (set_message : 'tags this -> string -> unit) =
      fun (x4998 : 'tags this) ->
        fun (x4999 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4998) "message"
            (Ojs.string_to_js x4999)
    let (create :
      colno:float ->
        error:any ->
          filename:string -> lineno:float -> message:string -> unit -> t)
      =
      fun ~colno:(x5001 : float) ->
        fun ~error:(x5002 : any) ->
          fun ~filename:(x5003 : string) ->
            fun ~lineno:(x5004 : float) ->
              fun ~message:(x5005 : string) ->
                fun () ->
                  let x5006 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5006 "colno" (Ojs.float_to_js x5001);
                  Ojs.set_prop_ascii x5006 "error" (any_to_js x5002);
                  Ojs.set_prop_ascii x5006 "filename"
                    (Ojs.string_to_js x5003);
                  Ojs.set_prop_ascii x5006 "lineno" (Ojs.float_to_js x5004);
                  Ojs.set_prop_ascii x5006 "message" (Ojs.string_to_js x5005);
                  t_of_js x5006
    let cast_from = Obj.magic
  end
module ErrorEvent =
  struct
    type t = [ `ErrorEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5008 : Ojs.t) -> t_of_js x5008
    and t_0_to_js : t_0 -> Ojs.t = fun (x5007 : t) -> t_to_js x5007
    type tags = [ `ErrorEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5011 : Ojs.t) -> intf_of_js __tags_of_js x5011
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5009 : __tags intf) -> intf_to_js __tags_to_js x5009
    let (get_colno : 'tags this -> float) =
      fun (x5013 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5013) "colno")
    let (get_error : 'tags this -> any) =
      fun (x5015 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x5015) "error")
    let (get_filename : 'tags this -> string) =
      fun (x5017 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5017) "filename")
    let (get_lineno : 'tags this -> float) =
      fun (x5019 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5019) "lineno")
    let (get_message : 'tags this -> string) =
      fun (x5021 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5021) "message")
    let (create :
      colno:float ->
        error:any ->
          filename:string -> lineno:float -> message:string -> unit -> t)
      =
      fun ~colno:(x5023 : float) ->
        fun ~error:(x5024 : any) ->
          fun ~filename:(x5025 : string) ->
            fun ~lineno:(x5026 : float) ->
              fun ~message:(x5027 : string) ->
                fun () ->
                  let x5028 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5028 "colno" (Ojs.float_to_js x5023);
                  Ojs.set_prop_ascii x5028 "error" (any_to_js x5024);
                  Ojs.set_prop_ascii x5028 "filename"
                    (Ojs.string_to_js x5025);
                  Ojs.set_prop_ascii x5028 "lineno" (Ojs.float_to_js x5026);
                  Ojs.set_prop_ascii x5028 "message" (Ojs.string_to_js x5027);
                  t_of_js x5028
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t) =
      fun ~type_:(x5029 : string) ->
        fun ?eventInitDict:(x5030 : ErrorEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
                 (let x5031 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5031 "push" [|(Ojs.string_to_js x5029)|]);
                  (match x5030 with
                   | Some x5032 ->
                       ignore
                         (Ojs.call x5031 "push"
                            [|(ErrorEventInit.t_to_js x5032)|])
                   | None -> ());
                  x5031))
  end
module AbstractWorker =
  struct
    type t = [ `AbstractWorker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5034 : Ojs.t) -> t_of_js x5034
    and t_0_to_js : t_0 -> Ojs.t = fun (x5033 : t) -> t_to_js x5033
    type tags = [ `AbstractWorker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5037 : Ojs.t) -> intf_of_js __tags_of_js x5037
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5035 : __tags intf) -> intf_to_js __tags_to_js x5035
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null) =
      fun (x5039 : 'tags this) ->
        or_null_of_js
          (fun (x5041 : Ojs.t) ->
             fun ~this:(x5042 : t) ->
               fun ~ev:(x5043 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x5041
                      [|(t_to_js x5042);(ErrorEvent.t_to_js x5043)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5039) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null -> unit) =
      fun (x5044 : 'tags this) ->
        fun (x5045 : (this:t -> ev:ErrorEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5044) "onerror"
            (or_null_to_js
               (fun (x5046 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5047 : Ojs.t) ->
                       fun (x5048 : Ojs.t) ->
                         any_to_js
                           (x5046 ~this:(t_of_js x5047)
                              ~ev:(ErrorEvent.t_of_js x5048)))) x5045)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5058 : 'tags this) ->
        fun ~type_:(x5050 : 'K) ->
          fun ~listener:(x5051 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5052 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5060 = this_to_js Obj.magic x5058 in
                   Ojs.call (Ojs.get_prop_ascii x5060 "addEventListener")
                     "apply"
                     [|x5060;((let x5053 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5053 "push" [|(Obj.magic x5050)|]);
                               ignore
                                 (Ojs.call x5053 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5056 : Ojs.t) ->
                                            fun (x5057 : Ojs.t) ->
                                              any_to_js
                                                (x5051 ~this:(t_of_js x5056)
                                                   ~ev:(any_of_js x5057))))|]);
                               (match x5052 with
                                | Some x5054 ->
                                    ignore
                                      (Ojs.call x5053 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5054)|])
                                | None -> ());
                               x5053))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5067 : 'tags this) ->
        fun ~type_:(x5061 : string) ->
          fun ~listener:(x5062 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5063 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5069 = this_to_js Obj.magic x5067 in
                   Ojs.call (Ojs.get_prop_ascii x5069 "addEventListener")
                     "apply"
                     [|x5069;((let x5064 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5064 "push"
                                    [|(Ojs.string_to_js x5061)|]);
                               ignore
                                 (Ojs.call x5064 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5062)|]);
                               (match x5063 with
                                | Some x5065 ->
                                    ignore
                                      (Ojs.call x5064 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5065)|])
                                | None -> ());
                               x5064))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5078 : 'tags this) ->
        fun ~type_:(x5070 : 'K) ->
          fun ~listener:(x5071 : this:t -> ev:any -> any) ->
            fun ?options:(x5072 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5080 = this_to_js Obj.magic x5078 in
                   Ojs.call (Ojs.get_prop_ascii x5080 "removeEventListener")
                     "apply"
                     [|x5080;((let x5073 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5073 "push" [|(Obj.magic x5070)|]);
                               ignore
                                 (Ojs.call x5073 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5076 : Ojs.t) ->
                                            fun (x5077 : Ojs.t) ->
                                              any_to_js
                                                (x5071 ~this:(t_of_js x5076)
                                                   ~ev:(any_of_js x5077))))|]);
                               (match x5072 with
                                | Some x5074 ->
                                    ignore
                                      (Ojs.call x5073 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5074)|])
                                | None -> ());
                               x5073))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5087 : 'tags this) ->
        fun ~type_:(x5081 : string) ->
          fun ~listener:(x5082 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x5083 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5089 = this_to_js Obj.magic x5087 in
                   Ojs.call (Ojs.get_prop_ascii x5089 "removeEventListener")
                     "apply"
                     [|x5089;((let x5084 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5084 "push"
                                    [|(Ojs.string_to_js x5081)|]);
                               ignore
                                 (Ojs.call x5084 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5082)|]);
                               (match x5083 with
                                | Some x5085 ->
                                    ignore
                                      (Ojs.call x5084 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5085)|])
                                | None -> ());
                               x5084))|])
    let cast_from = Obj.magic
  end
module rec
  MessageEvent:sig
                 type 'T t = [ `Event  | `MessageEvent of 'T ] intf
                 type 'T t_1 = 'T t
                 type t_0 = any t
                 [@@@js.stop ]
                 type 'T tags = [ `Event  | `MessageEvent of 'T ]
                 type 'T tags_1 = 'T tags
                 type tags_0 = any tags
                 [@@@js.start ]
                 [@@@js.implem
                   type 'T tags = [ `Event  | `MessageEvent of 'T ]
                   type 'T tags_1 = 'T tags
                   type tags_0 = any tags]
                 type ('tags, 'T) this =
                   'tags intf constraint 'tags = [> `MessageEvent of 'T ]
                 val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                 val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                 val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                 val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_data : ('tags, 'T) this -> 'T
                 val get_lastEventId : ('tags, 'T) this -> string
                 val get_origin : ('tags, 'T) this -> string
                 val get_ports : ('tags, 'T) this -> MessagePort.t list
                 val get_source :
                   ('tags, 'T) this -> MessageEventSource.t or_null
                 val initMessageEvent :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t or_null ->
                                   ?ports:MessagePort.t list -> unit -> unit
                 val initMessageEvent' :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t or_null ->
                                   ?ports:MessagePort.t Iterable.t_1 ->
                                     unit -> unit
                 val cast_from : ('tags, 'T) this -> 'T t
                 val prototype : unit -> t_0
                 val create :
                   type_:string ->
                     ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t
               end =
  struct
    type 'T t = [ `Event  | `MessageEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5092 : Ojs.t) -> t_of_js __T_of_js x5092
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x5090 : __T t) -> t_to_js __T_to_js x5090
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5096 : Ojs.t) -> t_of_js any_of_js x5096
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5094 : any t) -> t_to_js any_to_js x5094
    type 'T tags = [ `Event  | `MessageEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5100 : Ojs.t) -> intf_of_js __tags_of_js x5100
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5098 : __tags intf) -> intf_to_js __tags_to_js x5098
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x5102 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5102) "data")
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x5105 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5105)
             "lastEventId")
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x5108 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5108) "origin")
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x5111 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5111) "ports")
    let (get_source : ('tags, 'T) this -> MessageEventSource.t or_null) =
      fun (x5115 : ('tags, 'T) this) ->
        or_null_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5115) "source")
    let (initMessageEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t or_null ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x5137 : ('tags, 'T) this) ->
        fun ~type_:(x5119 : string) ->
          fun ?bubbles:(x5120 : bool option) ->
            fun ?cancelable:(x5121 : bool option) ->
              fun ?data:(x5122 : any option) ->
                fun ?origin:(x5123 : string option) ->
                  fun ?lastEventId:(x5124 : string option) ->
                    fun ?source:(x5125 : MessageEventSource.t or_null option)
                      ->
                      fun ?ports:(x5126 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x5140 = this_to_js Obj.magic Obj.magic x5137 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5140 "initMessageEvent")
                               "apply"
                               [|x5140;((let x5127 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5127 "push"
                                              [|(Ojs.string_to_js x5119)|]);
                                         (match x5120 with
                                          | Some x5136 ->
                                              ignore
                                                (Ojs.call x5127 "push"
                                                   [|(Ojs.bool_to_js x5136)|])
                                          | None -> ());
                                         (match x5121 with
                                          | Some x5135 ->
                                              ignore
                                                (Ojs.call x5127 "push"
                                                   [|(Ojs.bool_to_js x5135)|])
                                          | None -> ());
                                         (match x5122 with
                                          | Some x5134 ->
                                              ignore
                                                (Ojs.call x5127 "push"
                                                   [|(any_to_js x5134)|])
                                          | None -> ());
                                         (match x5123 with
                                          | Some x5133 ->
                                              ignore
                                                (Ojs.call x5127 "push"
                                                   [|(Ojs.string_to_js x5133)|])
                                          | None -> ());
                                         (match x5124 with
                                          | Some x5132 ->
                                              ignore
                                                (Ojs.call x5127 "push"
                                                   [|(Ojs.string_to_js x5132)|])
                                          | None -> ());
                                         (match x5125 with
                                          | Some x5130 ->
                                              ignore
                                                (Ojs.call x5127 "push"
                                                   [|(or_null_to_js
                                                        MessageEventSource.t_to_js
                                                        x5130)|])
                                          | None -> ());
                                         (match x5126 with
                                          | Some x5128 ->
                                              ignore
                                                (Ojs.call x5127 "push"
                                                   [|(Ojs.list_to_js
                                                        MessagePort.t_to_js
                                                        x5128)|])
                                          | None -> ());
                                         x5127))|])
    let (initMessageEvent' :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t or_null ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x5159 : ('tags, 'T) this) ->
        fun ~type_:(x5141 : string) ->
          fun ?bubbles:(x5142 : bool option) ->
            fun ?cancelable:(x5143 : bool option) ->
              fun ?data:(x5144 : any option) ->
                fun ?origin:(x5145 : string option) ->
                  fun ?lastEventId:(x5146 : string option) ->
                    fun ?source:(x5147 : MessageEventSource.t or_null option)
                      ->
                      fun ?ports:(x5148 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x5162 = this_to_js Obj.magic Obj.magic x5159 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5162 "initMessageEvent")
                               "apply"
                               [|x5162;((let x5149 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5149 "push"
                                              [|(Ojs.string_to_js x5141)|]);
                                         (match x5142 with
                                          | Some x5158 ->
                                              ignore
                                                (Ojs.call x5149 "push"
                                                   [|(Ojs.bool_to_js x5158)|])
                                          | None -> ());
                                         (match x5143 with
                                          | Some x5157 ->
                                              ignore
                                                (Ojs.call x5149 "push"
                                                   [|(Ojs.bool_to_js x5157)|])
                                          | None -> ());
                                         (match x5144 with
                                          | Some x5156 ->
                                              ignore
                                                (Ojs.call x5149 "push"
                                                   [|(any_to_js x5156)|])
                                          | None -> ());
                                         (match x5145 with
                                          | Some x5155 ->
                                              ignore
                                                (Ojs.call x5149 "push"
                                                   [|(Ojs.string_to_js x5155)|])
                                          | None -> ());
                                         (match x5146 with
                                          | Some x5154 ->
                                              ignore
                                                (Ojs.call x5149 "push"
                                                   [|(Ojs.string_to_js x5154)|])
                                          | None -> ());
                                         (match x5147 with
                                          | Some x5152 ->
                                              ignore
                                                (Ojs.call x5149 "push"
                                                   [|(or_null_to_js
                                                        MessageEventSource.t_to_js
                                                        x5152)|])
                                          | None -> ());
                                         (match x5148 with
                                          | Some x5150 ->
                                              ignore
                                                (Ojs.call x5149 "push"
                                                   [|(Iterable.t_1_to_js
                                                        MessagePort.t_to_js
                                                        x5150)|])
                                          | None -> ());
                                         x5149))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MessageEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t) =
      fun ~type_:(x5163 : string) ->
        fun ?eventInitDict:(x5164 : 'T MessageEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                 (let x5165 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5165 "push" [|(Ojs.string_to_js x5163)|]);
                  (match x5164 with
                   | Some x5166 ->
                       ignore
                         (Ojs.call x5165 "push"
                            [|(MessageEventInit.t_to_js Obj.magic x5166)|])
                   | None -> ());
                  x5165))
  end
 and
  MessageEventInit:sig
                     type 'T t =
                       [ `EventInit  | `MessageEventInit of 'T ] intf
                     type 'T t_1 = 'T t
                     type t_0 = any t
                     [@@@js.stop ]
                     type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
                     type 'T tags_1 = 'T tags
                     type tags_0 = any tags
                     [@@@js.start ]
                     [@@@js.implem
                       type 'T tags =
                         [ `EventInit  | `MessageEventInit of 'T ]
                       type 'T tags_1 = 'T tags
                       type tags_0 = any tags]
                     type ('tags, 'T) this =
                       'tags intf constraint 'tags =
                                   [> `MessageEventInit of 'T ]
                     val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                     val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                     val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                     val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_data : ('tags, 'T) this -> 'T
                     val set_data : ('tags, 'T) this -> 'T -> unit
                     val get_lastEventId : ('tags, 'T) this -> string
                     val set_lastEventId : ('tags, 'T) this -> string -> unit
                     val get_origin : ('tags, 'T) this -> string
                     val set_origin : ('tags, 'T) this -> string -> unit
                     val get_ports : ('tags, 'T) this -> MessagePort.t list
                     val set_ports :
                       ('tags, 'T) this -> MessagePort.t list -> unit
                     val get_source :
                       ('tags, 'T) this -> MessageEventSource.t or_null
                     val set_source :
                       ('tags, 'T) this ->
                         MessageEventSource.t or_null -> unit
                     val create :
                       data:'T ->
                         lastEventId:string ->
                           origin:string ->
                             ports:MessagePort.t list ->
                               ?source:MessageEventSource.t -> unit -> 'T t
                     val cast_from : ('tags, 'T) this -> 'T t
                   end =
  struct
    type 'T t = [ `EventInit  | `MessageEventInit of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x5171 : Ojs.t) -> t_of_js __T_of_js x5171
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x5169 : __T t) -> t_to_js __T_to_js x5169
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x5175 : Ojs.t) -> t_of_js any_of_js x5175
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x5173 : any t) -> t_to_js any_to_js x5173
    type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x5179 : Ojs.t) -> intf_of_js __tags_of_js x5179
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x5177 : __tags intf) -> intf_to_js __tags_to_js x5177
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x5181 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5181) "data")
    let (set_data : ('tags, 'T) this -> 'T -> unit) =
      fun (x5184 : ('tags, 'T) this) ->
        fun (x5185 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5184) "data"
            (Obj.magic x5185)
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x5188 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5188)
             "lastEventId")
    let (set_lastEventId : ('tags, 'T) this -> string -> unit) =
      fun (x5191 : ('tags, 'T) this) ->
        fun (x5192 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5191)
            "lastEventId" (Ojs.string_to_js x5192)
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x5195 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5195) "origin")
    let (set_origin : ('tags, 'T) this -> string -> unit) =
      fun (x5198 : ('tags, 'T) this) ->
        fun (x5199 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5198) "origin"
            (Ojs.string_to_js x5199)
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x5202 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5202) "ports")
    let (set_ports : ('tags, 'T) this -> MessagePort.t list -> unit) =
      fun (x5206 : ('tags, 'T) this) ->
        fun (x5207 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5206) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x5207)
    let (get_source : ('tags, 'T) this -> MessageEventSource.t or_null) =
      fun (x5211 : ('tags, 'T) this) ->
        or_null_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x5211) "source")
    let (set_source :
      ('tags, 'T) this -> MessageEventSource.t or_null -> unit) =
      fun (x5215 : ('tags, 'T) this) ->
        fun (x5216 : MessageEventSource.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x5215) "source"
            (or_null_to_js MessageEventSource.t_to_js x5216)
    let (create :
      data:'T ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:MessageEventSource.t -> unit -> 'T t)
      =
      fun ~data:(x5220 : 'T) ->
        fun ~lastEventId:(x5221 : string) ->
          fun ~origin:(x5222 : string) ->
            fun ~ports:(x5223 : MessagePort.t list) ->
              fun ?source:(x5224 : MessageEventSource.t option) ->
                fun () ->
                  let x5225 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x5225 "data" (Obj.magic x5220);
                  Ojs.set_prop_ascii x5225 "lastEventId"
                    (Ojs.string_to_js x5221);
                  Ojs.set_prop_ascii x5225 "origin" (Ojs.string_to_js x5222);
                  Ojs.set_prop_ascii x5225 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x5223);
                  (match x5224 with
                   | Some x5227 ->
                       Ojs.set_prop_ascii x5225 "source"
                         (MessageEventSource.t_to_js x5227)
                   | None -> ());
                  t_of_js Obj.magic x5225
    let cast_from = Obj.magic
  end and
       MessageEventSource:sig
                            type t = (MessagePort.t, ServiceWorker.t) union2
                            type t_0 = t
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                          end =
       struct
         type t = (MessagePort.t, ServiceWorker.t) union2
         let rec t_of_js : Ojs.t -> t =
           fun (x5232 : Ojs.t) ->
             union2_of_js MessagePort.t_of_js ServiceWorker.t_of_js x5232
         and t_to_js : t -> Ojs.t =
           fun (x5229 : (MessagePort.t, ServiceWorker.t) union2) ->
             union2_to_js MessagePort.t_to_js ServiceWorker.t_to_js x5229
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x5236 : Ojs.t) -> t_of_js x5236
         and t_0_to_js : t_0 -> Ojs.t = fun (x5235 : t) -> t_to_js x5235
       end and
            MessagePort:sig
                          type t = [ `EventTarget  | `MessagePort ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `EventTarget  | `MessagePort ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `EventTarget  | `MessagePort ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags = [> `MessagePort ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) or_null
                          val set_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) or_null
                                -> unit
                          val get_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) or_null
                          val set_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) or_null
                                -> unit
                          val close : 'tags this -> unit
                          val postMessage :
                            'tags this ->
                              message:any ->
                                transfer:Transferable.t list -> unit
                          val postMessage' :
                            'tags this ->
                              message:any ->
                                ?options:StructuredSerializeOptions.t ->
                                  unit -> unit
                          val start : 'tags this -> unit
                          val addEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:AddEventListenerOptions.t
                                    or_boolean -> unit -> unit
                          val addEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:AddEventListenerOptions.t
                                    or_boolean -> unit -> unit
                          val removeEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:EventListenerOptions.t or_boolean
                                    -> unit -> unit
                          val removeEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:EventListenerOptions.t or_boolean
                                    -> unit -> unit
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create : unit -> t
                        end =
            struct
              type t = [ `EventTarget  | `MessagePort ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x5238 : Ojs.t) -> t_of_js x5238
              and t_0_to_js : t_0 -> Ojs.t = fun (x5237 : t) -> t_to_js x5237
              type tags = [ `EventTarget  | `MessagePort ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `MessagePort ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x5241 : Ojs.t) -> intf_of_js __tags_of_js x5241
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x5239 : __tags intf) -> intf_to_js __tags_to_js x5239
              let (get_onmessage :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null)
                =
                fun (x5243 : 'tags this) ->
                  or_null_of_js
                    (fun (x5245 : Ojs.t) ->
                       fun ~this:(x5246 : t) ->
                         fun ~ev:(x5247 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5245
                                [|(t_to_js x5246);(MessageEvent.t_0_to_js
                                                     x5247)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5243)
                       "onmessage")
              let (set_onmessage :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit)
                =
                fun (x5248 : 'tags this) ->
                  fun
                    (x5249 : (this:t -> ev:MessageEvent.t_0 -> any) or_null)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5248)
                      "onmessage"
                      (or_null_to_js
                         (fun (x5250 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5251 : Ojs.t) ->
                                 fun (x5252 : Ojs.t) ->
                                   any_to_js
                                     (x5250 ~this:(t_of_js x5251)
                                        ~ev:(MessageEvent.t_0_of_js x5252))))
                         x5249)
              let (get_onmessageerror :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null)
                =
                fun (x5254 : 'tags this) ->
                  or_null_of_js
                    (fun (x5256 : Ojs.t) ->
                       fun ~this:(x5257 : t) ->
                         fun ~ev:(x5258 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x5256
                                [|(t_to_js x5257);(MessageEvent.t_0_to_js
                                                     x5258)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x5254)
                       "onmessageerror")
              let (set_onmessageerror :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit)
                =
                fun (x5259 : 'tags this) ->
                  fun
                    (x5260 : (this:t -> ev:MessageEvent.t_0 -> any) or_null)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x5259)
                      "onmessageerror"
                      (or_null_to_js
                         (fun (x5261 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x5262 : Ojs.t) ->
                                 fun (x5263 : Ojs.t) ->
                                   any_to_js
                                     (x5261 ~this:(t_of_js x5262)
                                        ~ev:(MessageEvent.t_0_of_js x5263))))
                         x5260)
              let (close : 'tags this -> unit) =
                fun (x5265 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5265) "close" [||])
              let (postMessage :
                'tags this ->
                  message:any -> transfer:Transferable.t list -> unit)
                =
                fun (x5270 : 'tags this) ->
                  fun ~message:(x5267 : any) ->
                    fun ~transfer:(x5268 : Transferable.t list) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5270) "postMessage"
                           [|(any_to_js x5267);(Ojs.list_to_js
                                                  Transferable.t_to_js x5268)|])
              let (postMessage' :
                'tags this ->
                  message:any ->
                    ?options:StructuredSerializeOptions.t -> unit -> unit)
                =
                fun (x5276 : 'tags this) ->
                  fun ~message:(x5272 : any) ->
                    fun
                      ?options:(x5273 : StructuredSerializeOptions.t option)
                      ->
                      fun () ->
                        ignore
                          (let x5278 = this_to_js Obj.magic x5276 in
                           Ojs.call (Ojs.get_prop_ascii x5278 "postMessage")
                             "apply"
                             [|x5278;((let x5274 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x5274 "push"
                                            [|(any_to_js x5272)|]);
                                       (match x5273 with
                                        | Some x5275 ->
                                            ignore
                                              (Ojs.call x5274 "push"
                                                 [|(StructuredSerializeOptions.t_to_js
                                                      x5275)|])
                                        | None -> ());
                                       x5274))|])
              let (start : 'tags this -> unit) =
                fun (x5279 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x5279) "start" [||])
              let (addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x5289 : 'tags this) ->
                  fun ~type_:(x5281 : 'K) ->
                    fun ~listener:(x5282 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5283 :
                                   AddEventListenerOptions.t or_boolean
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5291 = this_to_js Obj.magic x5289 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5291 "addEventListener")
                               "apply"
                               [|x5291;((let x5284 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5284 "push"
                                              [|(Obj.magic x5281)|]);
                                         ignore
                                           (Ojs.call x5284 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5287 : Ojs.t) ->
                                                      fun (x5288 : Ojs.t) ->
                                                        any_to_js
                                                          (x5282
                                                             ~this:(t_of_js
                                                                    x5287)
                                                             ~ev:(any_of_js
                                                                    x5288))))|]);
                                         (match x5283 with
                                          | Some x5285 ->
                                              ignore
                                                (Ojs.call x5284 "push"
                                                   [|(or_boolean_to_js
                                                        AddEventListenerOptions.t_to_js
                                                        x5285)|])
                                          | None -> ());
                                         x5284))|])
              let (addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x5298 : 'tags this) ->
                  fun ~type_:(x5292 : string) ->
                    fun
                      ~listener:(x5293 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5294 :
                                   AddEventListenerOptions.t or_boolean
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x5300 = this_to_js Obj.magic x5298 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5300 "addEventListener")
                               "apply"
                               [|x5300;((let x5295 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5295 "push"
                                              [|(Ojs.string_to_js x5292)|]);
                                         ignore
                                           (Ojs.call x5295 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5293)|]);
                                         (match x5294 with
                                          | Some x5296 ->
                                              ignore
                                                (Ojs.call x5295 "push"
                                                   [|(or_boolean_to_js
                                                        AddEventListenerOptions.t_to_js
                                                        x5296)|])
                                          | None -> ());
                                         x5295))|])
              let (removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x5309 : 'tags this) ->
                  fun ~type_:(x5301 : 'K) ->
                    fun ~listener:(x5302 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x5303 :
                                   EventListenerOptions.t or_boolean option)
                        ->
                        fun () ->
                          ignore
                            (let x5311 = this_to_js Obj.magic x5309 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5311
                                  "removeEventListener") "apply"
                               [|x5311;((let x5304 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5304 "push"
                                              [|(Obj.magic x5301)|]);
                                         ignore
                                           (Ojs.call x5304 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x5307 : Ojs.t) ->
                                                      fun (x5308 : Ojs.t) ->
                                                        any_to_js
                                                          (x5302
                                                             ~this:(t_of_js
                                                                    x5307)
                                                             ~ev:(any_of_js
                                                                    x5308))))|]);
                                         (match x5303 with
                                          | Some x5305 ->
                                              ignore
                                                (Ojs.call x5304 "push"
                                                   [|(or_boolean_to_js
                                                        EventListenerOptions.t_to_js
                                                        x5305)|])
                                          | None -> ());
                                         x5304))|])
              let (removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x5318 : 'tags this) ->
                  fun ~type_:(x5312 : string) ->
                    fun
                      ~listener:(x5313 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x5314 :
                                   EventListenerOptions.t or_boolean option)
                        ->
                        fun () ->
                          ignore
                            (let x5320 = this_to_js Obj.magic x5318 in
                             Ojs.call
                               (Ojs.get_prop_ascii x5320
                                  "removeEventListener") "apply"
                               [|x5320;((let x5315 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x5315 "push"
                                              [|(Ojs.string_to_js x5312)|]);
                                         ignore
                                           (Ojs.call x5315 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x5313)|]);
                                         (match x5314 with
                                          | Some x5316 ->
                                              ignore
                                                (Ojs.call x5315 "push"
                                                   [|(or_boolean_to_js
                                                        EventListenerOptions.t_to_js
                                                        x5316)|])
                                          | None -> ());
                                         x5315))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "MessagePort")
                       "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global "MessagePort") 
                       [||])
            end and
                 ServiceWorker:sig
                                 type t =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `AbstractWorker  | `EventTarget 
                                     | `ServiceWorker ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [> `ServiceWorker ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val get_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) or_null
                                 val set_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) or_null ->
                                       unit
                                 val get_scriptURL : 'tags this -> string
                                 val get_state :
                                   'tags this -> ServiceWorkerState.t
                                 val postMessage :
                                   'tags this ->
                                     message:any ->
                                       transfer:Transferable.t list -> unit
                                 val postMessage' :
                                   'tags this ->
                                     message:any ->
                                       ?options:StructuredSerializeOptions.t
                                         -> unit -> unit
                                 val addEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:AddEventListenerOptions.t
                                           or_boolean -> unit -> unit
                                 val addEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:AddEventListenerOptions.t
                                           or_boolean -> unit -> unit
                                 val removeEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:EventListenerOptions.t
                                           or_boolean -> unit -> unit
                                 val removeEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:EventListenerOptions.t
                                           or_boolean -> unit -> unit
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create : unit -> t
                               end =
                 struct
                   type t =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                       intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x5322 : Ojs.t) -> t_of_js x5322
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x5321 : t) -> t_to_js x5321
                   type tags =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `ServiceWorker ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x5325 : Ojs.t) -> intf_of_js __tags_of_js x5325
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x5323 : __tags intf) ->
                         intf_to_js __tags_to_js x5323
                   let (get_onstatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) or_null) =
                     fun (x5327 : 'tags this) ->
                       or_null_of_js
                         (fun (x5329 : Ojs.t) ->
                            fun ~this:(x5330 : t) ->
                              fun ~ev:(x5331 : Event.t) ->
                                any_of_js
                                  (Ojs.apply x5329
                                     [|(t_to_js x5330);(Event.t_to_js x5331)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5327)
                            "onstatechange")
                   let (set_onstatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) or_null -> unit)
                     =
                     fun (x5332 : 'tags this) ->
                       fun (x5333 : (this:t -> ev:Event.t -> any) or_null) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x5332)
                           "onstatechange"
                           (or_null_to_js
                              (fun (x5334 : this:t -> ev:Event.t -> any) ->
                                 Ojs.fun_to_js 2
                                   (fun (x5335 : Ojs.t) ->
                                      fun (x5336 : Ojs.t) ->
                                        any_to_js
                                          (x5334 ~this:(t_of_js x5335)
                                             ~ev:(Event.t_of_js x5336))))
                              x5333)
                   let (get_scriptURL : 'tags this -> string) =
                     fun (x5338 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5338)
                            "scriptURL")
                   let (get_state : 'tags this -> ServiceWorkerState.t) =
                     fun (x5340 : 'tags this) ->
                       ServiceWorkerState.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x5340)
                            "state")
                   let (postMessage :
                     'tags this ->
                       message:any -> transfer:Transferable.t list -> unit)
                     =
                     fun (x5345 : 'tags this) ->
                       fun ~message:(x5342 : any) ->
                         fun ~transfer:(x5343 : Transferable.t list) ->
                           ignore
                             (Ojs.call (this_to_js Obj.magic x5345)
                                "postMessage"
                                [|(any_to_js x5342);(Ojs.list_to_js
                                                       Transferable.t_to_js
                                                       x5343)|])
                   let (postMessage' :
                     'tags this ->
                       message:any ->
                         ?options:StructuredSerializeOptions.t ->
                           unit -> unit)
                     =
                     fun (x5351 : 'tags this) ->
                       fun ~message:(x5347 : any) ->
                         fun
                           ?options:(x5348 :
                                      StructuredSerializeOptions.t option)
                           ->
                           fun () ->
                             ignore
                               (let x5353 = this_to_js Obj.magic x5351 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x5353 "postMessage")
                                  "apply"
                                  [|x5353;((let x5349 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x5349 "push"
                                                 [|(any_to_js x5347)|]);
                                            (match x5348 with
                                             | Some x5350 ->
                                                 ignore
                                                   (Ojs.call x5349 "push"
                                                      [|(StructuredSerializeOptions.t_to_js
                                                           x5350)|])
                                             | None -> ());
                                            x5349))|])
                   let (addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x5362 : 'tags this) ->
                       fun ~type_:(x5354 : 'K) ->
                         fun ~listener:(x5355 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5356 :
                                        AddEventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5364 = this_to_js Obj.magic x5362 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5364
                                       "addEventListener") "apply"
                                    [|x5364;((let x5357 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5357 "push"
                                                   [|(Obj.magic x5354)|]);
                                              ignore
                                                (Ojs.call x5357 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5360 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5361 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5355
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5360)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5361))))|]);
                                              (match x5356 with
                                               | Some x5358 ->
                                                   ignore
                                                     (Ojs.call x5357 "push"
                                                        [|(or_boolean_to_js
                                                             AddEventListenerOptions.t_to_js
                                                             x5358)|])
                                               | None -> ());
                                              x5357))|])
                   let (addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x5371 : 'tags this) ->
                       fun ~type_:(x5365 : string) ->
                         fun
                           ~listener:(x5366 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5367 :
                                        AddEventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5373 = this_to_js Obj.magic x5371 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5373
                                       "addEventListener") "apply"
                                    [|x5373;((let x5368 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5368 "push"
                                                   [|(Ojs.string_to_js x5365)|]);
                                              ignore
                                                (Ojs.call x5368 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5366)|]);
                                              (match x5367 with
                                               | Some x5369 ->
                                                   ignore
                                                     (Ojs.call x5368 "push"
                                                        [|(or_boolean_to_js
                                                             AddEventListenerOptions.t_to_js
                                                             x5369)|])
                                               | None -> ());
                                              x5368))|])
                   let (removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x5382 : 'tags this) ->
                       fun ~type_:(x5374 : 'K) ->
                         fun ~listener:(x5375 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5376 :
                                        EventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5384 = this_to_js Obj.magic x5382 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5384
                                       "removeEventListener") "apply"
                                    [|x5384;((let x5377 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5377 "push"
                                                   [|(Obj.magic x5374)|]);
                                              ignore
                                                (Ojs.call x5377 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5380 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5381 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5375
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5380)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5381))))|]);
                                              (match x5376 with
                                               | Some x5378 ->
                                                   ignore
                                                     (Ojs.call x5377 "push"
                                                        [|(or_boolean_to_js
                                                             EventListenerOptions.t_to_js
                                                             x5378)|])
                                               | None -> ());
                                              x5377))|])
                   let (removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x5391 : 'tags this) ->
                       fun ~type_:(x5385 : string) ->
                         fun
                           ~listener:(x5386 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5387 :
                                        EventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5393 = this_to_js Obj.magic x5391 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5393
                                       "removeEventListener") "apply"
                                    [|x5393;((let x5388 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5388 "push"
                                                   [|(Ojs.string_to_js x5385)|]);
                                              ignore
                                                (Ojs.call x5388 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5386)|]);
                                              (match x5387 with
                                               | Some x5389 ->
                                                   ignore
                                                     (Ojs.call x5388 "push"
                                                        [|(or_boolean_to_js
                                                             EventListenerOptions.t_to_js
                                                             x5389)|])
                                               | None -> ());
                                              x5388))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            [||])
                 end and
                      Transferable:sig
                                     type t =
                                       (ImageBitmap.t, MessagePort.t) union2
                                     type t_0 = t
                                     val t_to_js : t -> Ojs.t
                                     val t_of_js : Ojs.t -> t
                                     val t_0_to_js : t_0 -> Ojs.t
                                     val t_0_of_js : Ojs.t -> t_0
                                   end =
                      struct
                        type t = (ImageBitmap.t, MessagePort.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x5397 : Ojs.t) ->
                            union2_of_js ImageBitmap.t_of_js
                              MessagePort.t_of_js x5397
                        and t_to_js : t -> Ojs.t =
                          fun (x5394 : (ImageBitmap.t, MessagePort.t) union2)
                            ->
                            union2_to_js ImageBitmap.t_to_js
                              MessagePort.t_to_js x5394
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x5401 : Ojs.t) -> t_of_js x5401
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x5400 : t) -> t_to_js x5400
                      end
module AbstractWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5403 : Ojs.t) -> t_of_js x5403
    and t_0_to_js : t_0 -> Ojs.t = fun (x5402 : t) -> t_to_js x5402
    type tags = [ `AbstractWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5406 : Ojs.t) -> intf_of_js __tags_of_js x5406
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5404 : __tags intf) -> intf_to_js __tags_to_js x5404
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5408 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5408) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5410 : 'tags this) ->
        fun (x5411 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5410) "error"
            (ErrorEvent.t_to_js x5411)
    let (create : error:ErrorEvent.t -> unit -> t) =
      fun ~error:(x5413 : ErrorEvent.t) ->
        fun () ->
          let x5414 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5414 "error" (ErrorEvent.t_to_js x5413);
          t_of_js x5414
    let cast_from = Obj.magic
  end
module WorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `WorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5416 : Ojs.t) -> t_of_js x5416
    and t_0_to_js : t_0 -> Ojs.t = fun (x5415 : t) -> t_to_js x5415
    type tags = [ `AbstractWorkerEventMap  | `WorkerEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5419 : Ojs.t) -> intf_of_js __tags_of_js x5419
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5417 : __tags intf) -> intf_to_js __tags_to_js x5417
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5421 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5421) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5423 : 'tags this) ->
        fun (x5424 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5423) "message"
            (MessageEvent.t_0_to_js x5424)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x5426 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5426) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5428 : 'tags this) ->
        fun (x5429 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5428) "messageerror"
            (MessageEvent.t_0_to_js x5429)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x5431 : MessageEvent.t_0) ->
        fun ~messageerror:(x5432 : MessageEvent.t_0) ->
          fun () ->
            let x5433 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x5433 "message" (MessageEvent.t_0_to_js x5431);
            Ojs.set_prop_ascii x5433 "messageerror"
              (MessageEvent.t_0_to_js x5432);
            t_of_js x5433
    let cast_from = Obj.magic
  end
module WorkerType =
  struct
    type t = [ `L_s117_module  | `L_s49_classic ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5435 : Ojs.t) ->
        let x5436 = x5435 in
        match Ojs.string_of_js x5436 with
        | "module" -> `L_s117_module
        | "classic" -> `L_s49_classic
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5434 : [ `L_s117_module  | `L_s49_classic ]) ->
        match x5434 with
        | `L_s117_module -> Ojs.string_to_js "module"
        | `L_s49_classic -> Ojs.string_to_js "classic"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5438 : Ojs.t) -> t_of_js x5438
    and t_0_to_js : t_0 -> Ojs.t = fun (x5437 : t) -> t_to_js x5437
  end
module WorkerOptions =
  struct
    type t = [ `WorkerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5440 : Ojs.t) -> t_of_js x5440
    and t_0_to_js : t_0 -> Ojs.t = fun (x5439 : t) -> t_to_js x5439
    type tags = [ `WorkerOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5443 : Ojs.t) -> intf_of_js __tags_of_js x5443
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5441 : __tags intf) -> intf_to_js __tags_to_js x5441
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x5445 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5445) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x5447 : 'tags this) ->
        fun (x5448 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5447) "credentials"
            (RequestCredentials.t_to_js x5448)
    let (get_name : 'tags this -> string) =
      fun (x5450 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5450) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x5452 : 'tags this) ->
        fun (x5453 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5452) "name"
            (Ojs.string_to_js x5453)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x5455 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5455) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x5457 : 'tags this) ->
        fun (x5458 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5457) "type"
            (WorkerType.t_to_js x5458)
    let (create :
      credentials:RequestCredentials.t ->
        name:string -> type_:WorkerType.t -> unit -> t)
      =
      fun ~credentials:(x5460 : RequestCredentials.t) ->
        fun ~name:(x5461 : string) ->
          fun ~type_:(x5462 : WorkerType.t) ->
            fun () ->
              let x5463 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5463 "credentials"
                (RequestCredentials.t_to_js x5460);
              Ojs.set_prop_ascii x5463 "name" (Ojs.string_to_js x5461);
              Ojs.set_prop_ascii x5463 "type" (WorkerType.t_to_js x5462);
              t_of_js x5463
    let cast_from = Obj.magic
  end
module Worker =
  struct
    type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5465 : Ojs.t) -> t_of_js x5465
    and t_0_to_js : t_0 -> Ojs.t = fun (x5464 : t) -> t_to_js x5464
    type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5468 : Ojs.t) -> intf_of_js __tags_of_js x5468
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5466 : __tags intf) -> intf_to_js __tags_to_js x5466
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x5470 : 'tags this) ->
        or_null_of_js
          (fun (x5472 : Ojs.t) ->
             fun ~this:(x5473 : t) ->
               fun ~ev:(x5474 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5472
                      [|(t_to_js x5473);(MessageEvent.t_0_to_js x5474)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5470) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x5475 : 'tags this) ->
        fun (x5476 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5475) "onmessage"
            (or_null_to_js
               (fun (x5477 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5478 : Ojs.t) ->
                       fun (x5479 : Ojs.t) ->
                         any_to_js
                           (x5477 ~this:(t_of_js x5478)
                              ~ev:(MessageEvent.t_0_of_js x5479)))) x5476)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x5481 : 'tags this) ->
        or_null_of_js
          (fun (x5483 : Ojs.t) ->
             fun ~this:(x5484 : t) ->
               fun ~ev:(x5485 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5483
                      [|(t_to_js x5484);(MessageEvent.t_0_to_js x5485)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5481) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x5486 : 'tags this) ->
        fun (x5487 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5486) "onmessageerror"
            (or_null_to_js
               (fun (x5488 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5489 : Ojs.t) ->
                       fun (x5490 : Ojs.t) ->
                         any_to_js
                           (x5488 ~this:(t_of_js x5489)
                              ~ev:(MessageEvent.t_0_of_js x5490)))) x5487)
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x5495 : 'tags this) ->
        fun ~message:(x5492 : any) ->
          fun ~transfer:(x5493 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5495) "postMessage"
                 [|(any_to_js x5492);(Ojs.list_to_js Transferable.t_to_js
                                        x5493)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x5501 : 'tags this) ->
        fun ~message:(x5497 : any) ->
          fun ?options:(x5498 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x5503 = this_to_js Obj.magic x5501 in
                 Ojs.call (Ojs.get_prop_ascii x5503 "postMessage") "apply"
                   [|x5503;((let x5499 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5499 "push" [|(any_to_js x5497)|]);
                             (match x5498 with
                              | Some x5500 ->
                                  ignore
                                    (Ojs.call x5499 "push"
                                       [|(StructuredSerializeOptions.t_to_js
                                            x5500)|])
                              | None -> ());
                             x5499))|])
    let (terminate : 'tags this -> unit) =
      fun (x5504 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5504) "terminate" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5514 : 'tags this) ->
        fun ~type_:(x5506 : 'K) ->
          fun ~listener:(x5507 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5508 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5516 = this_to_js Obj.magic x5514 in
                   Ojs.call (Ojs.get_prop_ascii x5516 "addEventListener")
                     "apply"
                     [|x5516;((let x5509 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5509 "push" [|(Obj.magic x5506)|]);
                               ignore
                                 (Ojs.call x5509 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5512 : Ojs.t) ->
                                            fun (x5513 : Ojs.t) ->
                                              any_to_js
                                                (x5507 ~this:(t_of_js x5512)
                                                   ~ev:(any_of_js x5513))))|]);
                               (match x5508 with
                                | Some x5510 ->
                                    ignore
                                      (Ojs.call x5509 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5510)|])
                                | None -> ());
                               x5509))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5523 : 'tags this) ->
        fun ~type_:(x5517 : string) ->
          fun ~listener:(x5518 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5519 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5525 = this_to_js Obj.magic x5523 in
                   Ojs.call (Ojs.get_prop_ascii x5525 "addEventListener")
                     "apply"
                     [|x5525;((let x5520 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5520 "push"
                                    [|(Ojs.string_to_js x5517)|]);
                               ignore
                                 (Ojs.call x5520 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5518)|]);
                               (match x5519 with
                                | Some x5521 ->
                                    ignore
                                      (Ojs.call x5520 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5521)|])
                                | None -> ());
                               x5520))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5534 : 'tags this) ->
        fun ~type_:(x5526 : 'K) ->
          fun ~listener:(x5527 : this:t -> ev:any -> any) ->
            fun ?options:(x5528 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5536 = this_to_js Obj.magic x5534 in
                   Ojs.call (Ojs.get_prop_ascii x5536 "removeEventListener")
                     "apply"
                     [|x5536;((let x5529 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5529 "push" [|(Obj.magic x5526)|]);
                               ignore
                                 (Ojs.call x5529 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5532 : Ojs.t) ->
                                            fun (x5533 : Ojs.t) ->
                                              any_to_js
                                                (x5527 ~this:(t_of_js x5532)
                                                   ~ev:(any_of_js x5533))))|]);
                               (match x5528 with
                                | Some x5530 ->
                                    ignore
                                      (Ojs.call x5529 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5530)|])
                                | None -> ());
                               x5529))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5543 : 'tags this) ->
        fun ~type_:(x5537 : string) ->
          fun ~listener:(x5538 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x5539 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5545 = this_to_js Obj.magic x5543 in
                   Ojs.call (Ojs.get_prop_ascii x5545 "removeEventListener")
                     "apply"
                     [|x5545;((let x5540 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5540 "push"
                                    [|(Ojs.string_to_js x5537)|]);
                               ignore
                                 (Ojs.call x5540 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5538)|]);
                               (match x5539 with
                                | Some x5541 ->
                                    ignore
                                      (Ojs.call x5540 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5541)|])
                                | None -> ());
                               x5540))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Worker")
             "prototype")
    let (create :
      scriptURL:URL.t or_string -> ?options:WorkerOptions.t -> unit -> t) =
      fun ~scriptURL:(x5546 : URL.t or_string) ->
        fun ?options:(x5547 : WorkerOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Worker")
                 (let x5548 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x5548 "push"
                       [|(or_string_to_js URL.t_to_js x5546)|]);
                  (match x5547 with
                   | Some x5549 ->
                       ignore
                         (Ojs.call x5548 "push"
                            [|(WorkerOptions.t_to_js x5549)|])
                   | None -> ());
                  x5548))
  end
module CloseEventInit =
  struct
    type t = [ `CloseEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5552 : Ojs.t) -> t_of_js x5552
    and t_0_to_js : t_0 -> Ojs.t = fun (x5551 : t) -> t_to_js x5551
    type tags = [ `CloseEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5555 : Ojs.t) -> intf_of_js __tags_of_js x5555
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5553 : __tags intf) -> intf_to_js __tags_to_js x5553
    let (get_code : 'tags this -> float) =
      fun (x5557 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5557) "code")
    let (set_code : 'tags this -> float -> unit) =
      fun (x5559 : 'tags this) ->
        fun (x5560 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5559) "code"
            (Ojs.float_to_js x5560)
    let (get_reason : 'tags this -> string) =
      fun (x5562 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5562) "reason")
    let (set_reason : 'tags this -> string -> unit) =
      fun (x5564 : 'tags this) ->
        fun (x5565 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5564) "reason"
            (Ojs.string_to_js x5565)
    let (get_wasClean : 'tags this -> bool) =
      fun (x5567 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5567) "wasClean")
    let (set_wasClean : 'tags this -> bool -> unit) =
      fun (x5569 : 'tags this) ->
        fun (x5570 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5569) "wasClean"
            (Ojs.bool_to_js x5570)
    let (create : code:float -> reason:string -> wasClean:bool -> unit -> t)
      =
      fun ~code:(x5572 : float) ->
        fun ~reason:(x5573 : string) ->
          fun ~wasClean:(x5574 : bool) ->
            fun () ->
              let x5575 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5575 "code" (Ojs.float_to_js x5572);
              Ojs.set_prop_ascii x5575 "reason" (Ojs.string_to_js x5573);
              Ojs.set_prop_ascii x5575 "wasClean" (Ojs.bool_to_js x5574);
              t_of_js x5575
    let cast_from = Obj.magic
  end
module CloseEvent =
  struct
    type t = [ `CloseEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5577 : Ojs.t) -> t_of_js x5577
    and t_0_to_js : t_0 -> Ojs.t = fun (x5576 : t) -> t_to_js x5576
    type tags = [ `CloseEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5580 : Ojs.t) -> intf_of_js __tags_of_js x5580
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5578 : __tags intf) -> intf_to_js __tags_to_js x5578
    let (get_code : 'tags this -> float) =
      fun (x5582 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5582) "code")
    let (get_reason : 'tags this -> string) =
      fun (x5584 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5584) "reason")
    let (get_wasClean : 'tags this -> bool) =
      fun (x5586 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5586) "wasClean")
    let (create : code:float -> reason:string -> wasClean:bool -> unit -> t)
      =
      fun ~code:(x5588 : float) ->
        fun ~reason:(x5589 : string) ->
          fun ~wasClean:(x5590 : bool) ->
            fun () ->
              let x5591 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5591 "code" (Ojs.float_to_js x5588);
              Ojs.set_prop_ascii x5591 "reason" (Ojs.string_to_js x5589);
              Ojs.set_prop_ascii x5591 "wasClean" (Ojs.bool_to_js x5590);
              t_of_js x5591
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CloseEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t) =
      fun ~type_:(x5592 : string) ->
        fun ?eventInitDict:(x5593 : CloseEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CloseEvent")
                 (let x5594 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5594 "push" [|(Ojs.string_to_js x5592)|]);
                  (match x5593 with
                   | Some x5595 ->
                       ignore
                         (Ojs.call x5594 "push"
                            [|(CloseEventInit.t_to_js x5595)|])
                   | None -> ());
                  x5594))
  end
module WebSocketEventMap =
  struct
    type t = [ `WebSocketEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5597 : Ojs.t) -> t_of_js x5597
    and t_0_to_js : t_0 -> Ojs.t = fun (x5596 : t) -> t_to_js x5596
    type tags = [ `WebSocketEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5600 : Ojs.t) -> intf_of_js __tags_of_js x5600
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5598 : __tags intf) -> intf_to_js __tags_to_js x5598
    let (get_close : 'tags this -> CloseEvent.t) =
      fun (x5602 : 'tags this) ->
        CloseEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5602) "close")
    let (set_close : 'tags this -> CloseEvent.t -> unit) =
      fun (x5604 : 'tags this) ->
        fun (x5605 : CloseEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5604) "close"
            (CloseEvent.t_to_js x5605)
    let (get_error : 'tags this -> Event.t) =
      fun (x5607 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5607) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x5609 : 'tags this) ->
        fun (x5610 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5609) "error"
            (Event.t_to_js x5610)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5612 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5612) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5614 : 'tags this) ->
        fun (x5615 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5614) "message"
            (MessageEvent.t_0_to_js x5615)
    let (get_open : 'tags this -> Event.t) =
      fun (x5617 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5617) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x5619 : 'tags this) ->
        fun (x5620 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5619) "open"
            (Event.t_to_js x5620)
    let (create :
      close:CloseEvent.t ->
        error:Event.t ->
          message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~close:(x5622 : CloseEvent.t) ->
        fun ~error:(x5623 : Event.t) ->
          fun ~message:(x5624 : MessageEvent.t_0) ->
            fun ~open_:(x5625 : Event.t) ->
              fun () ->
                let x5626 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x5626 "close" (CloseEvent.t_to_js x5622);
                Ojs.set_prop_ascii x5626 "error" (Event.t_to_js x5623);
                Ojs.set_prop_ascii x5626 "message"
                  (MessageEvent.t_0_to_js x5624);
                Ojs.set_prop_ascii x5626 "open" (Event.t_to_js x5625);
                t_of_js x5626
    let cast_from = Obj.magic
  end
module BinaryType =
  struct
    type t = [ `L_s37_arraybuffer  | `L_s44_blob ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5628 : Ojs.t) ->
        let x5629 = x5628 in
        match Ojs.string_of_js x5629 with
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5627 : [ `L_s37_arraybuffer  | `L_s44_blob ]) ->
        match x5627 with
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5631 : Ojs.t) -> t_of_js x5631
    and t_0_to_js : t_0 -> Ojs.t = fun (x5630 : t) -> t_to_js x5630
  end
module WebSocket =
  struct
    type t = [ `EventTarget  | `WebSocket ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5633 : Ojs.t) -> t_of_js x5633
    and t_0_to_js : t_0 -> Ojs.t = fun (x5632 : t) -> t_to_js x5632
    type tags = [ `EventTarget  | `WebSocket ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5636 : Ojs.t) -> intf_of_js __tags_of_js x5636
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5634 : __tags intf) -> intf_to_js __tags_to_js x5634
    let (get_binaryType : 'tags this -> BinaryType.t) =
      fun (x5638 : 'tags this) ->
        BinaryType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5638) "binaryType")
    let (set_binaryType : 'tags this -> BinaryType.t -> unit) =
      fun (x5640 : 'tags this) ->
        fun (x5641 : BinaryType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5640) "binaryType"
            (BinaryType.t_to_js x5641)
    let (get_bufferedAmount : 'tags this -> float) =
      fun (x5643 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5643) "bufferedAmount")
    let (get_extensions : 'tags this -> string) =
      fun (x5645 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5645) "extensions")
    let (get_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null) =
      fun (x5647 : 'tags this) ->
        or_null_of_js
          (fun (x5649 : Ojs.t) ->
             fun ~this:(x5650 : t) ->
               fun ~ev:(x5651 : CloseEvent.t) ->
                 any_of_js
                   (Ojs.apply x5649
                      [|(t_to_js x5650);(CloseEvent.t_to_js x5651)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5647) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null -> unit) =
      fun (x5652 : 'tags this) ->
        fun (x5653 : (this:t -> ev:CloseEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5652) "onclose"
            (or_null_to_js
               (fun (x5654 : this:t -> ev:CloseEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5655 : Ojs.t) ->
                       fun (x5656 : Ojs.t) ->
                         any_to_js
                           (x5654 ~this:(t_of_js x5655)
                              ~ev:(CloseEvent.t_of_js x5656)))) x5653)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x5658 : 'tags this) ->
        or_null_of_js
          (fun (x5660 : Ojs.t) ->
             fun ~this:(x5661 : t) ->
               fun ~ev:(x5662 : Event.t) ->
                 any_of_js
                   (Ojs.apply x5660 [|(t_to_js x5661);(Event.t_to_js x5662)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5658) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x5663 : 'tags this) ->
        fun (x5664 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5663) "onerror"
            (or_null_to_js
               (fun (x5665 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5666 : Ojs.t) ->
                       fun (x5667 : Ojs.t) ->
                         any_to_js
                           (x5665 ~this:(t_of_js x5666)
                              ~ev:(Event.t_of_js x5667)))) x5664)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x5669 : 'tags this) ->
        or_null_of_js
          (fun (x5671 : Ojs.t) ->
             fun ~this:(x5672 : t) ->
               fun ~ev:(x5673 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5671
                      [|(t_to_js x5672);(MessageEvent.t_0_to_js x5673)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5669) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x5674 : 'tags this) ->
        fun (x5675 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5674) "onmessage"
            (or_null_to_js
               (fun (x5676 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5677 : Ojs.t) ->
                       fun (x5678 : Ojs.t) ->
                         any_to_js
                           (x5676 ~this:(t_of_js x5677)
                              ~ev:(MessageEvent.t_0_of_js x5678)))) x5675)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x5680 : 'tags this) ->
        or_null_of_js
          (fun (x5682 : Ojs.t) ->
             fun ~this:(x5683 : t) ->
               fun ~ev:(x5684 : Event.t) ->
                 any_of_js
                   (Ojs.apply x5682 [|(t_to_js x5683);(Event.t_to_js x5684)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5680) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x5685 : 'tags this) ->
        fun (x5686 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5685) "onopen"
            (or_null_to_js
               (fun (x5687 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5688 : Ojs.t) ->
                       fun (x5689 : Ojs.t) ->
                         any_to_js
                           (x5687 ~this:(t_of_js x5688)
                              ~ev:(Event.t_of_js x5689)))) x5686)
    let (get_protocol : 'tags this -> string) =
      fun (x5691 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5691) "protocol")
    let (get_readyState : 'tags this -> float) =
      fun (x5693 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5693) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x5695 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5695) "url")
    let (close : 'tags this -> ?code:float -> ?reason:string -> unit -> unit)
      =
      fun (x5702 : 'tags this) ->
        fun ?code:(x5697 : float option) ->
          fun ?reason:(x5698 : string option) ->
            fun () ->
              ignore
                (let x5704 = this_to_js Obj.magic x5702 in
                 Ojs.call (Ojs.get_prop_ascii x5704 "close") "apply"
                   [|x5704;((let x5699 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x5697 with
                              | Some x5701 ->
                                  ignore
                                    (Ojs.call x5699 "push"
                                       [|(Ojs.float_to_js x5701)|])
                              | None -> ());
                             (match x5698 with
                              | Some x5700 ->
                                  ignore
                                    (Ojs.call x5699 "push"
                                       [|(Ojs.string_to_js x5700)|])
                              | None -> ());
                             x5699))|])
    let (send : 'tags this -> data:Blob.t or_string -> unit) =
      fun (x5707 : 'tags this) ->
        fun ~data:(x5705 : Blob.t or_string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5707) "send"
               [|(or_string_to_js Blob.t_to_js x5705)|])
    let (get_CLOSED : 'tags this -> float) =
      fun (x5709 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5709) "CLOSED")
    let (get_CLOSING : 'tags this -> float) =
      fun (x5711 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5711) "CLOSING")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x5713 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5713) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x5715 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5715) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5725 : 'tags this) ->
        fun ~type_:(x5717 : 'K) ->
          fun ~listener:(x5718 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5719 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5727 = this_to_js Obj.magic x5725 in
                   Ojs.call (Ojs.get_prop_ascii x5727 "addEventListener")
                     "apply"
                     [|x5727;((let x5720 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5720 "push" [|(Obj.magic x5717)|]);
                               ignore
                                 (Ojs.call x5720 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5723 : Ojs.t) ->
                                            fun (x5724 : Ojs.t) ->
                                              any_to_js
                                                (x5718 ~this:(t_of_js x5723)
                                                   ~ev:(any_of_js x5724))))|]);
                               (match x5719 with
                                | Some x5721 ->
                                    ignore
                                      (Ojs.call x5720 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5721)|])
                                | None -> ());
                               x5720))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5734 : 'tags this) ->
        fun ~type_:(x5728 : string) ->
          fun ~listener:(x5729 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5730 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5736 = this_to_js Obj.magic x5734 in
                   Ojs.call (Ojs.get_prop_ascii x5736 "addEventListener")
                     "apply"
                     [|x5736;((let x5731 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5731 "push"
                                    [|(Ojs.string_to_js x5728)|]);
                               ignore
                                 (Ojs.call x5731 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5729)|]);
                               (match x5730 with
                                | Some x5732 ->
                                    ignore
                                      (Ojs.call x5731 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5732)|])
                                | None -> ());
                               x5731))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5745 : 'tags this) ->
        fun ~type_:(x5737 : 'K) ->
          fun ~listener:(x5738 : this:t -> ev:any -> any) ->
            fun ?options:(x5739 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5747 = this_to_js Obj.magic x5745 in
                   Ojs.call (Ojs.get_prop_ascii x5747 "removeEventListener")
                     "apply"
                     [|x5747;((let x5740 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5740 "push" [|(Obj.magic x5737)|]);
                               ignore
                                 (Ojs.call x5740 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5743 : Ojs.t) ->
                                            fun (x5744 : Ojs.t) ->
                                              any_to_js
                                                (x5738 ~this:(t_of_js x5743)
                                                   ~ev:(any_of_js x5744))))|]);
                               (match x5739 with
                                | Some x5741 ->
                                    ignore
                                      (Ojs.call x5740 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5741)|])
                                | None -> ());
                               x5740))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5754 : 'tags this) ->
        fun ~type_:(x5748 : string) ->
          fun ~listener:(x5749 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x5750 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5756 = this_to_js Obj.magic x5754 in
                   Ojs.call (Ojs.get_prop_ascii x5756 "removeEventListener")
                     "apply"
                     [|x5756;((let x5751 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5751 "push"
                                    [|(Ojs.string_to_js x5748)|]);
                               ignore
                                 (Ojs.call x5751 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5749)|]);
                               (match x5750 with
                                | Some x5752 ->
                                    ignore
                                      (Ojs.call x5751 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5752)|])
                                | None -> ());
                               x5751))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "prototype")
    let (create :
      url:URL.t or_string -> ?protocols:string list or_string -> unit -> t) =
      fun ~url:(x5757 : URL.t or_string) ->
        fun ?protocols:(x5758 : string list or_string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WebSocket")
                 (let x5759 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x5759 "push"
                       [|(or_string_to_js URL.t_to_js x5757)|]);
                  (match x5758 with
                   | Some x5760 ->
                       ignore
                         (Ojs.call x5759 "push"
                            [|(or_string_to_js
                                 (fun (x5761 : string list) ->
                                    Ojs.list_to_js Ojs.string_to_js x5761)
                                 x5760)|])
                   | None -> ());
                  x5759))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSED")
    let (closing : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSING")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "OPEN")
  end
module WebGLUniformLocation =
  struct
    type t = [ `WebGLUniformLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5765 : Ojs.t) -> t_of_js x5765
    and t_0_to_js : t_0 -> Ojs.t = fun (x5764 : t) -> t_to_js x5764
    type tags = [ `WebGLUniformLocation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLUniformLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5768 : Ojs.t) -> intf_of_js __tags_of_js x5768
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5766 : __tags intf) -> intf_to_js __tags_to_js x5766
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             [||])
  end
module PredefinedColorSpace =
  struct
    type t = [ `L_s183_srgb  | `L_s61_display_p3 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5771 : Ojs.t) ->
        let x5772 = x5771 in
        match Ojs.string_of_js x5772 with
        | "srgb" -> `L_s183_srgb
        | "display-p3" -> `L_s61_display_p3
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5770 : [ `L_s183_srgb  | `L_s61_display_p3 ]) ->
        match x5770 with
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
        | `L_s61_display_p3 -> Ojs.string_to_js "display-p3"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5774 : Ojs.t) -> t_of_js x5774
    and t_0_to_js : t_0 -> Ojs.t = fun (x5773 : t) -> t_to_js x5773
  end
module ImageDataSettings =
  struct
    type t = [ `ImageDataSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5776 : Ojs.t) -> t_of_js x5776
    and t_0_to_js : t_0 -> Ojs.t = fun (x5775 : t) -> t_to_js x5775
    type tags = [ `ImageDataSettings ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5779 : Ojs.t) -> intf_of_js __tags_of_js x5779
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5777 : __tags intf) -> intf_to_js __tags_to_js x5777
    let (get_colorSpace : 'tags this -> PredefinedColorSpace.t) =
      fun (x5781 : 'tags this) ->
        PredefinedColorSpace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5781) "colorSpace")
    let (set_colorSpace : 'tags this -> PredefinedColorSpace.t -> unit) =
      fun (x5783 : 'tags this) ->
        fun (x5784 : PredefinedColorSpace.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5783) "colorSpace"
            (PredefinedColorSpace.t_to_js x5784)
    let (create : colorSpace:PredefinedColorSpace.t -> unit -> t) =
      fun ~colorSpace:(x5786 : PredefinedColorSpace.t) ->
        fun () ->
          let x5787 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x5787 "colorSpace"
            (PredefinedColorSpace.t_to_js x5786);
          t_of_js x5787
    let cast_from = Obj.magic
  end
module ImageData =
  struct
    type t = [ `ImageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5789 : Ojs.t) -> t_of_js x5789
    and t_0_to_js : t_0 -> Ojs.t = fun (x5788 : t) -> t_to_js x5788
    type tags = [ `ImageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5792 : Ojs.t) -> intf_of_js __tags_of_js x5792
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5790 : __tags intf) -> intf_to_js __tags_to_js x5790
    let (get_data : 'tags this -> Uint8ClampedArray.t_0) =
      fun (x5794 : 'tags this) ->
        Uint8ClampedArray.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5794) "data")
    let (get_height : 'tags this -> float) =
      fun (x5796 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5796) "height")
    let (get_width : 'tags this -> float) =
      fun (x5798 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5798) "width")
    let (create :
      data:Uint8ClampedArray.t_0 -> height:float -> width:float -> unit -> t)
      =
      fun ~data:(x5800 : Uint8ClampedArray.t_0) ->
        fun ~height:(x5801 : float) ->
          fun ~width:(x5802 : float) ->
            fun () ->
              let x5803 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x5803 "data"
                (Uint8ClampedArray.t_0_to_js x5800);
              Ojs.set_prop_ascii x5803 "height" (Ojs.float_to_js x5801);
              Ojs.set_prop_ascii x5803 "width" (Ojs.float_to_js x5802);
              t_of_js x5803
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageData")
             "prototype")
    let (create' :
      sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t) =
      fun ~sw:(x5804 : float) ->
        fun ~sh:(x5805 : float) ->
          fun ?settings:(x5806 : ImageDataSettings.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ImageData")
                   (let x5807 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5807 "push" [|(Ojs.float_to_js x5804)|]);
                    ignore
                      (Ojs.call x5807 "push" [|(Ojs.float_to_js x5805)|]);
                    (match x5806 with
                     | Some x5808 ->
                         ignore
                           (Ojs.call x5807 "push"
                              [|(ImageDataSettings.t_to_js x5808)|])
                     | None -> ());
                    x5807))
    let (create'' :
      data:Uint8ClampedArray.t_0 ->
        sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t)
      =
      fun ~data:(x5809 : Uint8ClampedArray.t_0) ->
        fun ~sw:(x5810 : float) ->
          fun ?sh:(x5811 : float option) ->
            fun ?settings:(x5812 : ImageDataSettings.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "ImageData")
                     (let x5813 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x5813 "push"
                           [|(Uint8ClampedArray.t_0_to_js x5809)|]);
                      ignore
                        (Ojs.call x5813 "push" [|(Ojs.float_to_js x5810)|]);
                      (match x5811 with
                       | Some x5815 ->
                           ignore
                             (Ojs.call x5813 "push"
                                [|(Ojs.float_to_js x5815)|])
                       | None -> ());
                      (match x5812 with
                       | Some x5814 ->
                           ignore
                             (Ojs.call x5813 "push"
                                [|(ImageDataSettings.t_to_js x5814)|])
                       | None -> ());
                      x5813))
  end
module OffscreenCanvas =
  struct
    type t = [ `EventTarget  | `OffscreenCanvas ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5817 : Ojs.t) -> t_of_js x5817
    and t_0_to_js : t_0 -> Ojs.t = fun (x5816 : t) -> t_to_js x5816
    type tags = [ `EventTarget  | `OffscreenCanvas ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5820 : Ojs.t) -> intf_of_js __tags_of_js x5820
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5818 : __tags intf) -> intf_to_js __tags_to_js x5818
    let cast_from = Obj.magic
  end
module TexImageSource =
  struct
    type t = (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x5826 : Ojs.t) ->
        union3_of_js ImageBitmap.t_of_js ImageData.t_of_js
          OffscreenCanvas.t_of_js x5826
    and t_to_js : t -> Ojs.t =
      fun (x5822 : (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3) ->
        union3_to_js ImageBitmap.t_to_js ImageData.t_to_js
          OffscreenCanvas.t_to_js x5822
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5831 : Ojs.t) -> t_of_js x5831
    and t_0_to_js : t_0 -> Ojs.t = fun (x5830 : t) -> t_to_js x5830
  end
module GLint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5833 : Ojs.t) -> Ojs.float_of_js x5833
    and t_to_js : t -> Ojs.t = fun (x5832 : float) -> Ojs.float_to_js x5832
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5835 : Ojs.t) -> t_of_js x5835
    and t_0_to_js : t_0 -> Ojs.t = fun (x5834 : t) -> t_to_js x5834
  end
module Int32List =
  struct
    type t = (Int32Array.t_0, GLint.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x5839 : Ojs.t) ->
        or_array_of_js Int32Array.t_0_of_js GLint.t_of_js x5839
    and t_to_js : t -> Ojs.t =
      fun (x5836 : (Int32Array.t_0, GLint.t) or_array) ->
        or_array_to_js Int32Array.t_0_to_js GLint.t_to_js x5836
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5843 : Ojs.t) -> t_of_js x5843
    and t_0_to_js : t_0 -> Ojs.t = fun (x5842 : t) -> t_to_js x5842
  end
module GLsizeiptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5845 : Ojs.t) -> Ojs.float_of_js x5845
    and t_to_js : t -> Ojs.t = fun (x5844 : float) -> Ojs.float_to_js x5844
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5847 : Ojs.t) -> t_of_js x5847
    and t_0_to_js : t_0 -> Ojs.t = fun (x5846 : t) -> t_to_js x5846
  end
module GLboolean =
  struct
    type t = bool
    let rec t_of_js : Ojs.t -> t =
      fun (x5849 : Ojs.t) -> Ojs.bool_of_js x5849
    and t_to_js : t -> Ojs.t = fun (x5848 : bool) -> Ojs.bool_to_js x5848
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5851 : Ojs.t) -> t_of_js x5851
    and t_0_to_js : t_0 -> Ojs.t = fun (x5850 : t) -> t_to_js x5850
  end
module GLfloat =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5853 : Ojs.t) -> Ojs.float_of_js x5853
    and t_to_js : t -> Ojs.t = fun (x5852 : float) -> Ojs.float_to_js x5852
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5855 : Ojs.t) -> t_of_js x5855
    and t_0_to_js : t_0 -> Ojs.t = fun (x5854 : t) -> t_to_js x5854
  end
module Float32List =
  struct
    type t = (Float32Array.t_0, GLfloat.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x5859 : Ojs.t) ->
        or_array_of_js Float32Array.t_0_of_js GLfloat.t_of_js x5859
    and t_to_js : t -> Ojs.t =
      fun (x5856 : (Float32Array.t_0, GLfloat.t) or_array) ->
        or_array_to_js Float32Array.t_0_to_js GLfloat.t_to_js x5856
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5863 : Ojs.t) -> t_of_js x5863
    and t_0_to_js : t_0 -> Ojs.t = fun (x5862 : t) -> t_to_js x5862
  end
module GLsizei =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5865 : Ojs.t) -> Ojs.float_of_js x5865
    and t_to_js : t -> Ojs.t = fun (x5864 : float) -> Ojs.float_to_js x5864
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5867 : Ojs.t) -> t_of_js x5867
    and t_0_to_js : t_0 -> Ojs.t = fun (x5866 : t) -> t_to_js x5866
  end
module GLintptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5869 : Ojs.t) -> Ojs.float_of_js x5869
    and t_to_js : t -> Ojs.t = fun (x5868 : float) -> Ojs.float_to_js x5868
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5871 : Ojs.t) -> t_of_js x5871
    and t_0_to_js : t_0 -> Ojs.t = fun (x5870 : t) -> t_to_js x5870
  end
module GLenum =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5873 : Ojs.t) -> Ojs.float_of_js x5873
    and t_to_js : t -> Ojs.t = fun (x5872 : float) -> Ojs.float_to_js x5872
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5875 : Ojs.t) -> t_of_js x5875
    and t_0_to_js : t_0 -> Ojs.t = fun (x5874 : t) -> t_to_js x5874
  end
module WebGLRenderingContextOverloads =
  struct
    type t = [ `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5877 : Ojs.t) -> t_of_js x5877
    and t_0_to_js : t_0 -> Ojs.t = fun (x5876 : t) -> t_to_js x5876
    type tags = [ `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5880 : Ojs.t) -> intf_of_js __tags_of_js x5880
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5878 : __tags intf) -> intf_to_js __tags_to_js x5878
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x5885 : 'tags this) ->
        fun ~target:(x5882 : GLenum.t) ->
          fun ~size:(x5883 : GLsizeiptr.t) ->
            fun ~usage:(x5884 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5885) "bufferData"
                   [|(GLenum.t_to_js x5882);(GLsizeiptr.t_to_js x5883);(
                     GLenum.t_to_js x5884)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          data:BufferSource.t or_null -> usage:GLenum.t -> unit)
      =
      fun (x5891 : 'tags this) ->
        fun ~target:(x5887 : GLenum.t) ->
          fun ~data:(x5888 : BufferSource.t or_null) ->
            fun ~usage:(x5890 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5891) "bufferData"
                   [|(GLenum.t_to_js x5887);(or_null_to_js
                                               BufferSource.t_to_js x5888);(
                     GLenum.t_to_js x5890)|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t -> offset:GLintptr.t -> data:BufferSource.t -> unit)
      =
      fun (x5896 : 'tags this) ->
        fun ~target:(x5893 : GLenum.t) ->
          fun ~offset:(x5894 : GLintptr.t) ->
            fun ~data:(x5895 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5896) "bufferSubData"
                   [|(GLenum.t_to_js x5893);(GLintptr.t_to_js x5894);(
                     BufferSource.t_to_js x5895)|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x5905 : 'tags this) ->
        fun ~target:(x5898 : GLenum.t) ->
          fun ~level:(x5899 : GLint.t) ->
            fun ~internalformat:(x5900 : GLenum.t) ->
              fun ~width:(x5901 : GLsizei.t) ->
                fun ~height:(x5902 : GLsizei.t) ->
                  fun ~border:(x5903 : GLint.t) ->
                    fun ~data:(x5904 : ArrayBufferView.t_0) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5905)
                           "compressedTexImage2D"
                           [|(GLenum.t_to_js x5898);(GLint.t_to_js x5899);(
                             GLenum.t_to_js x5900);(GLsizei.t_to_js x5901);(
                             GLsizei.t_to_js x5902);(GLint.t_to_js x5903);(
                             ArrayBufferView.t_0_to_js x5904)|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x5915 : 'tags this) ->
        fun ~target:(x5907 : GLenum.t) ->
          fun ~level:(x5908 : GLint.t) ->
            fun ~xoffset:(x5909 : GLint.t) ->
              fun ~yoffset:(x5910 : GLint.t) ->
                fun ~width:(x5911 : GLsizei.t) ->
                  fun ~height:(x5912 : GLsizei.t) ->
                    fun ~format:(x5913 : GLenum.t) ->
                      fun ~data:(x5914 : ArrayBufferView.t_0) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x5915)
                             "compressedTexSubImage2D"
                             [|(GLenum.t_to_js x5907);(GLint.t_to_js x5908);(
                               GLint.t_to_js x5909);(GLint.t_to_js x5910);(
                               GLsizei.t_to_js x5911);(GLsizei.t_to_js x5912);(
                               GLenum.t_to_js x5913);(ArrayBufferView.t_0_to_js
                                                        x5914)|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x5925 : 'tags this) ->
        fun ~x:(x5917 : GLint.t) ->
          fun ~y:(x5918 : GLint.t) ->
            fun ~width:(x5919 : GLsizei.t) ->
              fun ~height:(x5920 : GLsizei.t) ->
                fun ~format:(x5921 : GLenum.t) ->
                  fun ~type_:(x5922 : GLenum.t) ->
                    fun ~pixels:(x5923 : ArrayBufferView.t_0 or_null) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5925) "readPixels"
                           [|(GLint.t_to_js x5917);(GLint.t_to_js x5918);(
                             GLsizei.t_to_js x5919);(GLsizei.t_to_js x5920);(
                             GLenum.t_to_js x5921);(GLenum.t_to_js x5922);(
                             or_null_to_js ArrayBufferView.t_0_to_js x5923)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x5937 : 'tags this) ->
        fun ~target:(x5927 : GLenum.t) ->
          fun ~level:(x5928 : GLint.t) ->
            fun ~internalformat:(x5929 : GLint.t) ->
              fun ~width:(x5930 : GLsizei.t) ->
                fun ~height:(x5931 : GLsizei.t) ->
                  fun ~border:(x5932 : GLint.t) ->
                    fun ~format:(x5933 : GLenum.t) ->
                      fun ~type_:(x5934 : GLenum.t) ->
                        fun ~pixels:(x5935 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x5937)
                               "texImage2D"
                               [|(GLenum.t_to_js x5927);(GLint.t_to_js x5928);(
                                 GLint.t_to_js x5929);(GLsizei.t_to_js x5930);(
                                 GLsizei.t_to_js x5931);(GLint.t_to_js x5932);(
                                 GLenum.t_to_js x5933);(GLenum.t_to_js x5934);(
                                 or_null_to_js ArrayBufferView.t_0_to_js
                                   x5935)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x5945 : 'tags this) ->
        fun ~target:(x5939 : GLenum.t) ->
          fun ~level:(x5940 : GLint.t) ->
            fun ~internalformat:(x5941 : GLint.t) ->
              fun ~format:(x5942 : GLenum.t) ->
                fun ~type_:(x5943 : GLenum.t) ->
                  fun ~source:(x5944 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x5945) "texImage2D"
                         [|(GLenum.t_to_js x5939);(GLint.t_to_js x5940);(
                           GLint.t_to_js x5941);(GLenum.t_to_js x5942);(
                           GLenum.t_to_js x5943);(TexImageSource.t_to_js
                                                    x5944)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x5957 : 'tags this) ->
        fun ~target:(x5947 : GLenum.t) ->
          fun ~level:(x5948 : GLint.t) ->
            fun ~xoffset:(x5949 : GLint.t) ->
              fun ~yoffset:(x5950 : GLint.t) ->
                fun ~width:(x5951 : GLsizei.t) ->
                  fun ~height:(x5952 : GLsizei.t) ->
                    fun ~format:(x5953 : GLenum.t) ->
                      fun ~type_:(x5954 : GLenum.t) ->
                        fun ~pixels:(x5955 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x5957)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x5947);(GLint.t_to_js x5948);(
                                 GLint.t_to_js x5949);(GLint.t_to_js x5950);(
                                 GLsizei.t_to_js x5951);(GLsizei.t_to_js
                                                           x5952);(GLenum.t_to_js
                                                                    x5953);(
                                 GLenum.t_to_js x5954);(or_null_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x5955)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x5966 : 'tags this) ->
        fun ~target:(x5959 : GLenum.t) ->
          fun ~level:(x5960 : GLint.t) ->
            fun ~xoffset:(x5961 : GLint.t) ->
              fun ~yoffset:(x5962 : GLint.t) ->
                fun ~format:(x5963 : GLenum.t) ->
                  fun ~type_:(x5964 : GLenum.t) ->
                    fun ~source:(x5965 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5966)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x5959);(GLint.t_to_js x5960);(
                             GLint.t_to_js x5961);(GLint.t_to_js x5962);(
                             GLenum.t_to_js x5963);(GLenum.t_to_js x5964);(
                             TexImageSource.t_to_js x5965)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x5971 : 'tags this) ->
        fun ~location:(x5968 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5970 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5971) "uniform1fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5968);(
                   Float32List.t_to_js x5970)|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x5976 : 'tags this) ->
        fun ~location:(x5973 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5975 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5976) "uniform1iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5973);(
                   Int32List.t_to_js x5975)|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x5981 : 'tags this) ->
        fun ~location:(x5978 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5980 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5981) "uniform2fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5978);(
                   Float32List.t_to_js x5980)|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x5986 : 'tags this) ->
        fun ~location:(x5983 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5985 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5986) "uniform2iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5983);(
                   Int32List.t_to_js x5985)|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x5991 : 'tags this) ->
        fun ~location:(x5988 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5990 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5991) "uniform3fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5988);(
                   Float32List.t_to_js x5990)|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x5996 : 'tags this) ->
        fun ~location:(x5993 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5995 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5996) "uniform3iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5993);(
                   Int32List.t_to_js x5995)|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x6001 : 'tags this) ->
        fun ~location:(x5998 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6000 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6001) "uniform4fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5998);(
                   Float32List.t_to_js x6000)|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x6006 : 'tags this) ->
        fun ~location:(x6003 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6005 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6006) "uniform4iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6003);(
                   Int32List.t_to_js x6005)|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6012 : 'tags this) ->
        fun ~location:(x6008 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x6010 : GLboolean.t) ->
            fun ~value:(x6011 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6012) "uniformMatrix2fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x6008);(
                     GLboolean.t_to_js x6010);(Float32List.t_to_js x6011)|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6018 : 'tags this) ->
        fun ~location:(x6014 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x6016 : GLboolean.t) ->
            fun ~value:(x6017 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6018) "uniformMatrix3fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x6014);(
                     GLboolean.t_to_js x6016);(Float32List.t_to_js x6017)|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x6024 : 'tags this) ->
        fun ~location:(x6020 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x6022 : GLboolean.t) ->
            fun ~value:(x6023 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6024) "uniformMatrix4fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x6020);(
                     GLboolean.t_to_js x6022);(Float32List.t_to_js x6023)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6030 : 'tags this) ->
        fun ~location:(x6026 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6028 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6030) "uniform1fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6026);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6028)|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6036 : 'tags this) ->
        fun ~location:(x6032 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6034 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6036) "uniform1iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6032);(
                   Iterable.t_1_to_js GLint.t_to_js x6034)|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6042 : 'tags this) ->
        fun ~location:(x6038 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6040 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6042) "uniform2fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6038);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6040)|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6048 : 'tags this) ->
        fun ~location:(x6044 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6046 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6048) "uniform2iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6044);(
                   Iterable.t_1_to_js GLint.t_to_js x6046)|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6054 : 'tags this) ->
        fun ~location:(x6050 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6052 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6054) "uniform3fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6050);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6052)|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6060 : 'tags this) ->
        fun ~location:(x6056 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6058 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6060) "uniform3iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6056);(
                   Iterable.t_1_to_js GLint.t_to_js x6058)|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6066 : 'tags this) ->
        fun ~location:(x6062 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6064 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6066) "uniform4fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6062);(
                   Iterable.t_1_to_js GLfloat.t_to_js x6064)|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x6072 : 'tags this) ->
        fun ~location:(x6068 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x6070 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6072) "uniform4iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6068);(
                   Iterable.t_1_to_js GLint.t_to_js x6070)|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6079 : 'tags this) ->
        fun ~location:(x6074 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x6076 : GLboolean.t) ->
            fun ~value:(x6077 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6079) "uniformMatrix2fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x6074);(
                     GLboolean.t_to_js x6076);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6077)|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6086 : 'tags this) ->
        fun ~location:(x6081 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x6083 : GLboolean.t) ->
            fun ~value:(x6084 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6086) "uniformMatrix3fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x6081);(
                     GLboolean.t_to_js x6083);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6084)|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x6093 : 'tags this) ->
        fun ~location:(x6088 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x6090 : GLboolean.t) ->
            fun ~value:(x6091 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6093) "uniformMatrix4fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x6088);(
                     GLboolean.t_to_js x6090);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x6091)|])
    let cast_from = Obj.magic
  end
module WebGLShaderPrecisionFormat =
  struct
    type t = [ `WebGLShaderPrecisionFormat ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6096 : Ojs.t) -> t_of_js x6096
    and t_0_to_js : t_0 -> Ojs.t = fun (x6095 : t) -> t_to_js x6095
    type tags = [ `WebGLShaderPrecisionFormat ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6099 : Ojs.t) -> intf_of_js __tags_of_js x6099
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6097 : __tags intf) -> intf_to_js __tags_to_js x6097
    let (get_precision : 'tags this -> GLint.t) =
      fun (x6101 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6101) "precision")
    let (get_rangeMax : 'tags this -> GLint.t) =
      fun (x6103 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6103) "rangeMax")
    let (get_rangeMin : 'tags this -> GLint.t) =
      fun (x6105 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6105) "rangeMin")
    let (create :
      precision:GLint.t -> rangeMax:GLint.t -> rangeMin:GLint.t -> unit -> t)
      =
      fun ~precision:(x6107 : GLint.t) ->
        fun ~rangeMax:(x6108 : GLint.t) ->
          fun ~rangeMin:(x6109 : GLint.t) ->
            fun () ->
              let x6110 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6110 "precision" (GLint.t_to_js x6107);
              Ojs.set_prop_ascii x6110 "rangeMax" (GLint.t_to_js x6108);
              Ojs.set_prop_ascii x6110 "rangeMin" (GLint.t_to_js x6109);
              t_of_js x6110
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             [||])
  end
module WebGLRenderbuffer =
  struct
    type t = [ `WebGLRenderbuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6112 : Ojs.t) -> t_of_js x6112
    and t_0_to_js : t_0 -> Ojs.t = fun (x6111 : t) -> t_to_js x6111
    type tags = [ `WebGLRenderbuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6115 : Ojs.t) -> intf_of_js __tags_of_js x6115
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6113 : __tags intf) -> intf_to_js __tags_to_js x6113
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
             [||])
  end
module WebGLFramebuffer =
  struct
    type t = [ `WebGLFramebuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6118 : Ojs.t) -> t_of_js x6118
    and t_0_to_js : t_0 -> Ojs.t = fun (x6117 : t) -> t_to_js x6117
    type tags = [ `WebGLFramebuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6121 : Ojs.t) -> intf_of_js __tags_of_js x6121
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6119 : __tags intf) -> intf_to_js __tags_to_js x6119
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
             [||])
  end
module WebGLPowerPreference =
  struct
    type t =
      [ `L_s107_low_power  | `L_s57_default  | `L_s85_high_performance ]
    let rec t_of_js : Ojs.t -> t =
      fun (x6124 : Ojs.t) ->
        let x6125 = x6124 in
        match Ojs.string_of_js x6125 with
        | "low-power" -> `L_s107_low_power
        | "default" -> `L_s57_default
        | "high-performance" -> `L_s85_high_performance
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x6123 :
          [ `L_s107_low_power  | `L_s57_default  | `L_s85_high_performance ])
        ->
        match x6123 with
        | `L_s107_low_power -> Ojs.string_to_js "low-power"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s85_high_performance -> Ojs.string_to_js "high-performance"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6127 : Ojs.t) -> t_of_js x6127
    and t_0_to_js : t_0 -> Ojs.t = fun (x6126 : t) -> t_to_js x6126
  end
module WebGLContextAttributes =
  struct
    type t = [ `WebGLContextAttributes ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6129 : Ojs.t) -> t_of_js x6129
    and t_0_to_js : t_0 -> Ojs.t = fun (x6128 : t) -> t_to_js x6128
    type tags = [ `WebGLContextAttributes ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextAttributes ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6132 : Ojs.t) -> intf_of_js __tags_of_js x6132
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6130 : __tags intf) -> intf_to_js __tags_to_js x6130
    let (get_alpha : 'tags this -> bool) =
      fun (x6134 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6134) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x6136 : 'tags this) ->
        fun (x6137 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6136) "alpha"
            (Ojs.bool_to_js x6137)
    let (get_antialias : 'tags this -> bool) =
      fun (x6139 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6139) "antialias")
    let (set_antialias : 'tags this -> bool -> unit) =
      fun (x6141 : 'tags this) ->
        fun (x6142 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6141) "antialias"
            (Ojs.bool_to_js x6142)
    let (get_depth : 'tags this -> bool) =
      fun (x6144 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6144) "depth")
    let (set_depth : 'tags this -> bool -> unit) =
      fun (x6146 : 'tags this) ->
        fun (x6147 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6146) "depth"
            (Ojs.bool_to_js x6147)
    let (get_desynchronized : 'tags this -> bool) =
      fun (x6149 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6149) "desynchronized")
    let (set_desynchronized : 'tags this -> bool -> unit) =
      fun (x6151 : 'tags this) ->
        fun (x6152 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6151) "desynchronized"
            (Ojs.bool_to_js x6152)
    let (get_failIfMajorPerformanceCaveat : 'tags this -> bool) =
      fun (x6154 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6154)
             "failIfMajorPerformanceCaveat")
    let (set_failIfMajorPerformanceCaveat : 'tags this -> bool -> unit) =
      fun (x6156 : 'tags this) ->
        fun (x6157 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6156)
            "failIfMajorPerformanceCaveat" (Ojs.bool_to_js x6157)
    let (get_powerPreference : 'tags this -> WebGLPowerPreference.t) =
      fun (x6159 : 'tags this) ->
        WebGLPowerPreference.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6159) "powerPreference")
    let (set_powerPreference : 'tags this -> WebGLPowerPreference.t -> unit)
      =
      fun (x6161 : 'tags this) ->
        fun (x6162 : WebGLPowerPreference.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6161) "powerPreference"
            (WebGLPowerPreference.t_to_js x6162)
    let (get_premultipliedAlpha : 'tags this -> bool) =
      fun (x6164 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6164)
             "premultipliedAlpha")
    let (set_premultipliedAlpha : 'tags this -> bool -> unit) =
      fun (x6166 : 'tags this) ->
        fun (x6167 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6166)
            "premultipliedAlpha" (Ojs.bool_to_js x6167)
    let (get_preserveDrawingBuffer : 'tags this -> bool) =
      fun (x6169 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6169)
             "preserveDrawingBuffer")
    let (set_preserveDrawingBuffer : 'tags this -> bool -> unit) =
      fun (x6171 : 'tags this) ->
        fun (x6172 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6171)
            "preserveDrawingBuffer" (Ojs.bool_to_js x6172)
    let (get_stencil : 'tags this -> bool) =
      fun (x6174 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6174) "stencil")
    let (set_stencil : 'tags this -> bool -> unit) =
      fun (x6176 : 'tags this) ->
        fun (x6177 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x6176) "stencil"
            (Ojs.bool_to_js x6177)
    let (create :
      alpha:bool ->
        antialias:bool ->
          depth:bool ->
            desynchronized:bool ->
              failIfMajorPerformanceCaveat:bool ->
                powerPreference:WebGLPowerPreference.t ->
                  premultipliedAlpha:bool ->
                    preserveDrawingBuffer:bool -> stencil:bool -> unit -> t)
      =
      fun ~alpha:(x6179 : bool) ->
        fun ~antialias:(x6180 : bool) ->
          fun ~depth:(x6181 : bool) ->
            fun ~desynchronized:(x6182 : bool) ->
              fun ~failIfMajorPerformanceCaveat:(x6183 : bool) ->
                fun ~powerPreference:(x6184 : WebGLPowerPreference.t) ->
                  fun ~premultipliedAlpha:(x6185 : bool) ->
                    fun ~preserveDrawingBuffer:(x6186 : bool) ->
                      fun ~stencil:(x6187 : bool) ->
                        fun () ->
                          let x6188 = Ojs.empty_obj () in
                          Ojs.set_prop_ascii x6188 "alpha"
                            (Ojs.bool_to_js x6179);
                          Ojs.set_prop_ascii x6188 "antialias"
                            (Ojs.bool_to_js x6180);
                          Ojs.set_prop_ascii x6188 "depth"
                            (Ojs.bool_to_js x6181);
                          Ojs.set_prop_ascii x6188 "desynchronized"
                            (Ojs.bool_to_js x6182);
                          Ojs.set_prop_ascii x6188
                            "failIfMajorPerformanceCaveat"
                            (Ojs.bool_to_js x6183);
                          Ojs.set_prop_ascii x6188 "powerPreference"
                            (WebGLPowerPreference.t_to_js x6184);
                          Ojs.set_prop_ascii x6188 "premultipliedAlpha"
                            (Ojs.bool_to_js x6185);
                          Ojs.set_prop_ascii x6188 "preserveDrawingBuffer"
                            (Ojs.bool_to_js x6186);
                          Ojs.set_prop_ascii x6188 "stencil"
                            (Ojs.bool_to_js x6187);
                          t_of_js x6188
    let cast_from = Obj.magic
  end
module WebGLProgram =
  struct
    type t = [ `WebGLProgram ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6190 : Ojs.t) -> t_of_js x6190
    and t_0_to_js : t_0 -> Ojs.t = fun (x6189 : t) -> t_to_js x6189
    type tags = [ `WebGLProgram ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6193 : Ojs.t) -> intf_of_js __tags_of_js x6193
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6191 : __tags intf) -> intf_to_js __tags_to_js x6191
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLProgram") [||])
  end
module WebGLBuffer =
  struct
    type t = [ `WebGLBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6196 : Ojs.t) -> t_of_js x6196
    and t_0_to_js : t_0 -> Ojs.t = fun (x6195 : t) -> t_to_js x6195
    type tags = [ `WebGLBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6199 : Ojs.t) -> intf_of_js __tags_of_js x6199
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6197 : __tags intf) -> intf_to_js __tags_to_js x6197
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLBuffer") [||])
  end
module WebGLActiveInfo =
  struct
    type t = [ `WebGLActiveInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6202 : Ojs.t) -> t_of_js x6202
    and t_0_to_js : t_0 -> Ojs.t = fun (x6201 : t) -> t_to_js x6201
    type tags = [ `WebGLActiveInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6205 : Ojs.t) -> intf_of_js __tags_of_js x6205
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6203 : __tags intf) -> intf_to_js __tags_to_js x6203
    let (get_name : 'tags this -> string) =
      fun (x6207 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6207) "name")
    let (get_size : 'tags this -> GLint.t) =
      fun (x6209 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6209) "size")
    let (get_type : 'tags this -> GLenum.t) =
      fun (x6211 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6211) "type")
    let (create : name:string -> size:GLint.t -> type_:GLenum.t -> unit -> t)
      =
      fun ~name:(x6213 : string) ->
        fun ~size:(x6214 : GLint.t) ->
          fun ~type_:(x6215 : GLenum.t) ->
            fun () ->
              let x6216 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6216 "name" (Ojs.string_to_js x6213);
              Ojs.set_prop_ascii x6216 "size" (GLint.t_to_js x6214);
              Ojs.set_prop_ascii x6216 "type" (GLenum.t_to_js x6215);
              t_of_js x6216
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") [||])
  end
module WEBGL_lose_context =
  struct
    type t = [ `WEBGL_lose_context ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6218 : Ojs.t) -> t_of_js x6218
    and t_0_to_js : t_0 -> Ojs.t = fun (x6217 : t) -> t_to_js x6217
    type tags = [ `WEBGL_lose_context ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6221 : Ojs.t) -> intf_of_js __tags_of_js x6221
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6219 : __tags intf) -> intf_to_js __tags_to_js x6219
    let (loseContext : 'tags this -> unit) =
      fun (x6223 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6223) "loseContext" [||])
    let (restoreContext : 'tags this -> unit) =
      fun (x6225 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6225) "restoreContext" [||])
    let cast_from = Obj.magic
  end
module WEBGL_draw_buffers =
  struct
    type t = [ `WEBGL_draw_buffers ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6228 : Ojs.t) -> t_of_js x6228
    and t_0_to_js : t_0 -> Ojs.t = fun (x6227 : t) -> t_to_js x6227
    type tags = [ `WEBGL_draw_buffers ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6231 : Ojs.t) -> intf_of_js __tags_of_js x6231
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6229 : __tags intf) -> intf_to_js __tags_to_js x6229
    let (drawBuffersWEBGL : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x6235 : 'tags this) ->
        fun ~buffers:(x6233 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6235) "drawBuffersWEBGL"
               [|(Ojs.list_to_js GLenum.t_to_js x6233)|])
    let (get_COLOR_ATTACHMENT0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6237 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6237)
             "COLOR_ATTACHMENT0_WEBGL")
    let (get_COLOR_ATTACHMENT10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6239 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6239)
             "COLOR_ATTACHMENT10_WEBGL")
    let (get_COLOR_ATTACHMENT11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6241 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6241)
             "COLOR_ATTACHMENT11_WEBGL")
    let (get_COLOR_ATTACHMENT12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6243 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6243)
             "COLOR_ATTACHMENT12_WEBGL")
    let (get_COLOR_ATTACHMENT13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6245 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6245)
             "COLOR_ATTACHMENT13_WEBGL")
    let (get_COLOR_ATTACHMENT14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6247 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6247)
             "COLOR_ATTACHMENT14_WEBGL")
    let (get_COLOR_ATTACHMENT15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6249 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6249)
             "COLOR_ATTACHMENT15_WEBGL")
    let (get_COLOR_ATTACHMENT1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6251 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6251)
             "COLOR_ATTACHMENT1_WEBGL")
    let (get_COLOR_ATTACHMENT2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6253 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6253)
             "COLOR_ATTACHMENT2_WEBGL")
    let (get_COLOR_ATTACHMENT3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6255 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6255)
             "COLOR_ATTACHMENT3_WEBGL")
    let (get_COLOR_ATTACHMENT4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6257 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6257)
             "COLOR_ATTACHMENT4_WEBGL")
    let (get_COLOR_ATTACHMENT5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6259 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6259)
             "COLOR_ATTACHMENT5_WEBGL")
    let (get_COLOR_ATTACHMENT6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6261 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6261)
             "COLOR_ATTACHMENT6_WEBGL")
    let (get_COLOR_ATTACHMENT7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6263 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6263)
             "COLOR_ATTACHMENT7_WEBGL")
    let (get_COLOR_ATTACHMENT8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6265 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6265)
             "COLOR_ATTACHMENT8_WEBGL")
    let (get_COLOR_ATTACHMENT9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6267 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6267)
             "COLOR_ATTACHMENT9_WEBGL")
    let (get_DRAW_BUFFER0_WEBGL : 'tags this -> GLenum.t) =
      fun (x6269 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6269)
             "DRAW_BUFFER0_WEBGL")
    let (get_DRAW_BUFFER10_WEBGL : 'tags this -> GLenum.t) =
      fun (x6271 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6271)
             "DRAW_BUFFER10_WEBGL")
    let (get_DRAW_BUFFER11_WEBGL : 'tags this -> GLenum.t) =
      fun (x6273 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6273)
             "DRAW_BUFFER11_WEBGL")
    let (get_DRAW_BUFFER12_WEBGL : 'tags this -> GLenum.t) =
      fun (x6275 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6275)
             "DRAW_BUFFER12_WEBGL")
    let (get_DRAW_BUFFER13_WEBGL : 'tags this -> GLenum.t) =
      fun (x6277 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6277)
             "DRAW_BUFFER13_WEBGL")
    let (get_DRAW_BUFFER14_WEBGL : 'tags this -> GLenum.t) =
      fun (x6279 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6279)
             "DRAW_BUFFER14_WEBGL")
    let (get_DRAW_BUFFER15_WEBGL : 'tags this -> GLenum.t) =
      fun (x6281 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6281)
             "DRAW_BUFFER15_WEBGL")
    let (get_DRAW_BUFFER1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6283 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6283)
             "DRAW_BUFFER1_WEBGL")
    let (get_DRAW_BUFFER2_WEBGL : 'tags this -> GLenum.t) =
      fun (x6285 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6285)
             "DRAW_BUFFER2_WEBGL")
    let (get_DRAW_BUFFER3_WEBGL : 'tags this -> GLenum.t) =
      fun (x6287 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6287)
             "DRAW_BUFFER3_WEBGL")
    let (get_DRAW_BUFFER4_WEBGL : 'tags this -> GLenum.t) =
      fun (x6289 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6289)
             "DRAW_BUFFER4_WEBGL")
    let (get_DRAW_BUFFER5_WEBGL : 'tags this -> GLenum.t) =
      fun (x6291 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6291)
             "DRAW_BUFFER5_WEBGL")
    let (get_DRAW_BUFFER6_WEBGL : 'tags this -> GLenum.t) =
      fun (x6293 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6293)
             "DRAW_BUFFER6_WEBGL")
    let (get_DRAW_BUFFER7_WEBGL : 'tags this -> GLenum.t) =
      fun (x6295 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6295)
             "DRAW_BUFFER7_WEBGL")
    let (get_DRAW_BUFFER8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6297 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6297)
             "DRAW_BUFFER8_WEBGL")
    let (get_DRAW_BUFFER9_WEBGL : 'tags this -> GLenum.t) =
      fun (x6299 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6299)
             "DRAW_BUFFER9_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6301 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6301)
             "MAX_COLOR_ATTACHMENTS_WEBGL")
    let (get_MAX_DRAW_BUFFERS_WEBGL : 'tags this -> GLenum.t) =
      fun (x6303 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6303)
             "MAX_DRAW_BUFFERS_WEBGL")
    let (drawBuffersWEBGL' :
      'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x6307 : 'tags this) ->
        fun ~buffers:(x6305 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6307) "drawBuffersWEBGL"
               [|(Iterable.t_1_to_js GLenum.t_to_js x6305)|])
    let cast_from = Obj.magic
  end
module WEBGL_depth_texture =
  struct
    type t = [ `WEBGL_depth_texture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6310 : Ojs.t) -> t_of_js x6310
    and t_0_to_js : t_0 -> Ojs.t = fun (x6309 : t) -> t_to_js x6309
    type tags = [ `WEBGL_depth_texture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6313 : Ojs.t) -> intf_of_js __tags_of_js x6313
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6311 : __tags intf) -> intf_to_js __tags_to_js x6311
    let (get_UNSIGNED_INT_24_8_WEBGL : 'tags this -> GLenum.t) =
      fun (x6315 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6315)
             "UNSIGNED_INT_24_8_WEBGL")
    let (create : unsigned_int_24_8_webgl:GLenum.t -> unit -> t) =
      fun ~unsigned_int_24_8_webgl:(x6317 : GLenum.t) ->
        fun () ->
          let x6318 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6318 "UNSIGNED_INT_24_8_WEBGL"
            (GLenum.t_to_js x6317);
          t_of_js x6318
    let cast_from = Obj.magic
  end
module WebGLShader =
  struct
    type t = [ `WebGLShader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6320 : Ojs.t) -> t_of_js x6320
    and t_0_to_js : t_0 -> Ojs.t = fun (x6319 : t) -> t_to_js x6319
    type tags = [ `WebGLShader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6323 : Ojs.t) -> intf_of_js __tags_of_js x6323
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6321 : __tags intf) -> intf_to_js __tags_to_js x6321
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLShader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLShader") [||])
  end
module WEBGL_debug_shaders =
  struct
    type t = [ `WEBGL_debug_shaders ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6326 : Ojs.t) -> t_of_js x6326
    and t_0_to_js : t_0 -> Ojs.t = fun (x6325 : t) -> t_to_js x6325
    type tags = [ `WEBGL_debug_shaders ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6329 : Ojs.t) -> intf_of_js __tags_of_js x6329
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6327 : __tags intf) -> intf_to_js __tags_to_js x6327
    let (getTranslatedShaderSource :
      'tags this -> shader:WebGLShader.t -> string) =
      fun (x6332 : 'tags this) ->
        fun ~shader:(x6331 : WebGLShader.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x6332)
               "getTranslatedShaderSource" [|(WebGLShader.t_to_js x6331)|])
    let cast_from = Obj.magic
  end
module WEBGL_debug_renderer_info =
  struct
    type t = [ `WEBGL_debug_renderer_info ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6335 : Ojs.t) -> t_of_js x6335
    and t_0_to_js : t_0 -> Ojs.t = fun (x6334 : t) -> t_to_js x6334
    type tags = [ `WEBGL_debug_renderer_info ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6338 : Ojs.t) -> intf_of_js __tags_of_js x6338
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6336 : __tags intf) -> intf_to_js __tags_to_js x6336
    let (get_UNMASKED_RENDERER_WEBGL : 'tags this -> GLenum.t) =
      fun (x6340 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6340)
             "UNMASKED_RENDERER_WEBGL")
    let (get_UNMASKED_VENDOR_WEBGL : 'tags this -> GLenum.t) =
      fun (x6342 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6342)
             "UNMASKED_VENDOR_WEBGL")
    let (create :
      unmasked_renderer_webgl:GLenum.t ->
        unmasked_vendor_webgl:GLenum.t -> unit -> t)
      =
      fun ~unmasked_renderer_webgl:(x6344 : GLenum.t) ->
        fun ~unmasked_vendor_webgl:(x6345 : GLenum.t) ->
          fun () ->
            let x6346 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6346 "UNMASKED_RENDERER_WEBGL"
              (GLenum.t_to_js x6344);
            Ojs.set_prop_ascii x6346 "UNMASKED_VENDOR_WEBGL"
              (GLenum.t_to_js x6345);
            t_of_js x6346
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc_srgb =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc_srgb ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6348 : Ojs.t) -> t_of_js x6348
    and t_0_to_js : t_0 -> Ojs.t = fun (x6347 : t) -> t_to_js x6347
    type tags = [ `WEBGL_compressed_texture_s3tc_srgb ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6351 : Ojs.t) -> intf_of_js __tags_of_js x6351
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6349 : __tags intf) -> intf_to_js __tags_to_js x6349
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6353 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6353)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6355 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6355)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6357 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6357)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_SRGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6359 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6359)
             "COMPRESSED_SRGB_S3TC_DXT1_EXT")
    let (create :
      compressed_srgb_alpha_s3tc_dxt1_ext:GLenum.t ->
        compressed_srgb_alpha_s3tc_dxt3_ext:GLenum.t ->
          compressed_srgb_alpha_s3tc_dxt5_ext:GLenum.t ->
            compressed_srgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_srgb_alpha_s3tc_dxt1_ext:(x6361 : GLenum.t) ->
        fun ~compressed_srgb_alpha_s3tc_dxt3_ext:(x6362 : GLenum.t) ->
          fun ~compressed_srgb_alpha_s3tc_dxt5_ext:(x6363 : GLenum.t) ->
            fun ~compressed_srgb_s3tc_dxt1_ext:(x6364 : GLenum.t) ->
              fun () ->
                let x6365 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6365
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6361);
                Ojs.set_prop_ascii x6365
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6362);
                Ojs.set_prop_ascii x6365
                  "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6363);
                Ojs.set_prop_ascii x6365 "COMPRESSED_SRGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6364);
                t_of_js x6365
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6367 : Ojs.t) -> t_of_js x6367
    and t_0_to_js : t_0 -> Ojs.t = fun (x6366 : t) -> t_to_js x6366
    type tags = [ `WEBGL_compressed_texture_s3tc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6370 : Ojs.t) -> intf_of_js __tags_of_js x6370
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6368 : __tags intf) -> intf_to_js __tags_to_js x6368
    let (get_COMPRESSED_RGBA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6372 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6372)
             "COMPRESSED_RGBA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x6374 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6374)
             "COMPRESSED_RGBA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x6376 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6376)
             "COMPRESSED_RGBA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_RGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x6378 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6378)
             "COMPRESSED_RGB_S3TC_DXT1_EXT")
    let (create :
      compressed_rgba_s3tc_dxt1_ext:GLenum.t ->
        compressed_rgba_s3tc_dxt3_ext:GLenum.t ->
          compressed_rgba_s3tc_dxt5_ext:GLenum.t ->
            compressed_rgb_s3tc_dxt1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_s3tc_dxt1_ext:(x6380 : GLenum.t) ->
        fun ~compressed_rgba_s3tc_dxt3_ext:(x6381 : GLenum.t) ->
          fun ~compressed_rgba_s3tc_dxt5_ext:(x6382 : GLenum.t) ->
            fun ~compressed_rgb_s3tc_dxt1_ext:(x6383 : GLenum.t) ->
              fun () ->
                let x6384 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6384 "COMPRESSED_RGBA_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6380);
                Ojs.set_prop_ascii x6384 "COMPRESSED_RGBA_S3TC_DXT3_EXT"
                  (GLenum.t_to_js x6381);
                Ojs.set_prop_ascii x6384 "COMPRESSED_RGBA_S3TC_DXT5_EXT"
                  (GLenum.t_to_js x6382);
                Ojs.set_prop_ascii x6384 "COMPRESSED_RGB_S3TC_DXT1_EXT"
                  (GLenum.t_to_js x6383);
                t_of_js x6384
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_pvrtc =
  struct
    type t = [ `WEBGL_compressed_texture_pvrtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6386 : Ojs.t) -> t_of_js x6386
    and t_0_to_js : t_0 -> Ojs.t = fun (x6385 : t) -> t_to_js x6385
    type tags = [ `WEBGL_compressed_texture_pvrtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6389 : Ojs.t) -> intf_of_js __tags_of_js x6389
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6387 : __tags intf) -> intf_to_js __tags_to_js x6387
    let (get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6391 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6391)
             "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6393 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6393)
             "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6395 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6395)
             "COMPRESSED_RGB_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x6397 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6397)
             "COMPRESSED_RGB_PVRTC_4BPPV1_IMG")
    let (create :
      compressed_rgba_pvrtc_2bppv1_img:GLenum.t ->
        compressed_rgba_pvrtc_4bppv1_img:GLenum.t ->
          compressed_rgb_pvrtc_2bppv1_img:GLenum.t ->
            compressed_rgb_pvrtc_4bppv1_img:GLenum.t -> unit -> t)
      =
      fun ~compressed_rgba_pvrtc_2bppv1_img:(x6399 : GLenum.t) ->
        fun ~compressed_rgba_pvrtc_4bppv1_img:(x6400 : GLenum.t) ->
          fun ~compressed_rgb_pvrtc_2bppv1_img:(x6401 : GLenum.t) ->
            fun ~compressed_rgb_pvrtc_4bppv1_img:(x6402 : GLenum.t) ->
              fun () ->
                let x6403 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6403 "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6399);
                Ojs.set_prop_ascii x6403 "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6400);
                Ojs.set_prop_ascii x6403 "COMPRESSED_RGB_PVRTC_2BPPV1_IMG"
                  (GLenum.t_to_js x6401);
                Ojs.set_prop_ascii x6403 "COMPRESSED_RGB_PVRTC_4BPPV1_IMG"
                  (GLenum.t_to_js x6402);
                t_of_js x6403
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc1 =
  struct
    type t = [ `WEBGL_compressed_texture_etc1 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6405 : Ojs.t) -> t_of_js x6405
    and t_0_to_js : t_0 -> Ojs.t = fun (x6404 : t) -> t_to_js x6404
    type tags = [ `WEBGL_compressed_texture_etc1 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6408 : Ojs.t) -> intf_of_js __tags_of_js x6408
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6406 : __tags intf) -> intf_to_js __tags_to_js x6406
    let (get_COMPRESSED_RGB_ETC1_WEBGL : 'tags this -> GLenum.t) =
      fun (x6410 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6410)
             "COMPRESSED_RGB_ETC1_WEBGL")
    let (create : compressed_rgb_etc1_webgl:GLenum.t -> unit -> t) =
      fun ~compressed_rgb_etc1_webgl:(x6412 : GLenum.t) ->
        fun () ->
          let x6413 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6413 "COMPRESSED_RGB_ETC1_WEBGL"
            (GLenum.t_to_js x6412);
          t_of_js x6413
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc =
  struct
    type t = [ `WEBGL_compressed_texture_etc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6415 : Ojs.t) -> t_of_js x6415
    and t_0_to_js : t_0 -> Ojs.t = fun (x6414 : t) -> t_to_js x6414
    type tags = [ `WEBGL_compressed_texture_etc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6418 : Ojs.t) -> intf_of_js __tags_of_js x6418
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6416 : __tags intf) -> intf_to_js __tags_to_js x6416
    let (get_COMPRESSED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6420 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6420)
             "COMPRESSED_R11_EAC")
    let (get_COMPRESSED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6422 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6422)
             "COMPRESSED_RG11_EAC")
    let (get_COMPRESSED_RGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6424 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6424)
             "COMPRESSED_RGB8_ETC2")
    let (get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6426 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6426)
             "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (get_COMPRESSED_RGBA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6428 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6428)
             "COMPRESSED_RGBA8_ETC2_EAC")
    let (get_COMPRESSED_SIGNED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6430 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6430)
             "COMPRESSED_SIGNED_R11_EAC")
    let (get_COMPRESSED_SIGNED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6432 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6432)
             "COMPRESSED_SIGNED_RG11_EAC")
    let (get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6434 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6434)
             "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")
    let (get_COMPRESSED_SRGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6436 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6436)
             "COMPRESSED_SRGB8_ETC2")
    let (get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6438 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6438)
             "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (create :
      compressed_r11_eac:GLenum.t ->
        compressed_rg11_eac:GLenum.t ->
          compressed_rgb8_etc2:GLenum.t ->
            compressed_rgb8_punchthrough_alpha1_etc2:GLenum.t ->
              compressed_rgba8_etc2_eac:GLenum.t ->
                compressed_signed_r11_eac:GLenum.t ->
                  compressed_signed_rg11_eac:GLenum.t ->
                    compressed_srgb8_alpha8_etc2_eac:GLenum.t ->
                      compressed_srgb8_etc2:GLenum.t ->
                        compressed_srgb8_punchthrough_alpha1_etc2:GLenum.t ->
                          unit -> t)
      =
      fun ~compressed_r11_eac:(x6440 : GLenum.t) ->
        fun ~compressed_rg11_eac:(x6441 : GLenum.t) ->
          fun ~compressed_rgb8_etc2:(x6442 : GLenum.t) ->
            fun ~compressed_rgb8_punchthrough_alpha1_etc2:(x6443 : GLenum.t)
              ->
              fun ~compressed_rgba8_etc2_eac:(x6444 : GLenum.t) ->
                fun ~compressed_signed_r11_eac:(x6445 : GLenum.t) ->
                  fun ~compressed_signed_rg11_eac:(x6446 : GLenum.t) ->
                    fun ~compressed_srgb8_alpha8_etc2_eac:(x6447 : GLenum.t)
                      ->
                      fun ~compressed_srgb8_etc2:(x6448 : GLenum.t) ->
                        fun
                          ~compressed_srgb8_punchthrough_alpha1_etc2:
                          (x6449 : GLenum.t) ->
                          fun () ->
                            let x6450 = Ojs.empty_obj () in
                            Ojs.set_prop_ascii x6450 "COMPRESSED_R11_EAC"
                              (GLenum.t_to_js x6440);
                            Ojs.set_prop_ascii x6450 "COMPRESSED_RG11_EAC"
                              (GLenum.t_to_js x6441);
                            Ojs.set_prop_ascii x6450 "COMPRESSED_RGB8_ETC2"
                              (GLenum.t_to_js x6442);
                            Ojs.set_prop_ascii x6450
                              "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6443);
                            Ojs.set_prop_ascii x6450
                              "COMPRESSED_RGBA8_ETC2_EAC"
                              (GLenum.t_to_js x6444);
                            Ojs.set_prop_ascii x6450
                              "COMPRESSED_SIGNED_R11_EAC"
                              (GLenum.t_to_js x6445);
                            Ojs.set_prop_ascii x6450
                              "COMPRESSED_SIGNED_RG11_EAC"
                              (GLenum.t_to_js x6446);
                            Ojs.set_prop_ascii x6450
                              "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"
                              (GLenum.t_to_js x6447);
                            Ojs.set_prop_ascii x6450 "COMPRESSED_SRGB8_ETC2"
                              (GLenum.t_to_js x6448);
                            Ojs.set_prop_ascii x6450
                              "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"
                              (GLenum.t_to_js x6449);
                            t_of_js x6450
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_astc =
  struct
    type t = [ `WEBGL_compressed_texture_astc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6452 : Ojs.t) -> t_of_js x6452
    and t_0_to_js : t_0 -> Ojs.t = fun (x6451 : t) -> t_to_js x6451
    type tags = [ `WEBGL_compressed_texture_astc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6455 : Ojs.t) -> intf_of_js __tags_of_js x6455
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6453 : __tags intf) -> intf_to_js __tags_to_js x6453
    let (getSupportedProfiles : 'tags this -> string list) =
      fun (x6457 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6457) "getSupportedProfiles" [||])
    let (get_COMPRESSED_RGBA_ASTC_10x10_KHR : 'tags this -> GLenum.t) =
      fun (x6460 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6460)
             "COMPRESSED_RGBA_ASTC_10x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x5_KHR : 'tags this -> GLenum.t) =
      fun (x6462 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6462)
             "COMPRESSED_RGBA_ASTC_10x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x6_KHR : 'tags this -> GLenum.t) =
      fun (x6464 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6464)
             "COMPRESSED_RGBA_ASTC_10x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x8_KHR : 'tags this -> GLenum.t) =
      fun (x6466 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6466)
             "COMPRESSED_RGBA_ASTC_10x8_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x10_KHR : 'tags this -> GLenum.t) =
      fun (x6468 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6468)
             "COMPRESSED_RGBA_ASTC_12x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x12_KHR : 'tags this -> GLenum.t) =
      fun (x6470 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6470)
             "COMPRESSED_RGBA_ASTC_12x12_KHR")
    let (get_COMPRESSED_RGBA_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x6472 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6472)
             "COMPRESSED_RGBA_ASTC_4x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x6474 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6474)
             "COMPRESSED_RGBA_ASTC_5x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x6476 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6476)
             "COMPRESSED_RGBA_ASTC_5x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x6478 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6478)
             "COMPRESSED_RGBA_ASTC_6x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x6480 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6480)
             "COMPRESSED_RGBA_ASTC_6x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x6482 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6482)
             "COMPRESSED_RGBA_ASTC_8x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x6484 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6484)
             "COMPRESSED_RGBA_ASTC_8x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x6486 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6486)
             "COMPRESSED_RGBA_ASTC_8x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x6488 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6488)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : 'tags this -> GLenum.t)
      =
      fun (x6490 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6490)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : 'tags this -> GLenum.t)
      =
      fun (x6492 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6492)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : 'tags this -> GLenum.t)
      =
      fun (x6494 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6494)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x6496 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6496)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : 'tags this -> GLenum.t)
      =
      fun (x6498 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6498)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x6500 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6500)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x6502 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6502)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x6504 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6504)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x6506 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6506)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x6508 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6508)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x6510 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6510)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x6512 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6512)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x6514 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6514)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")
    let cast_from = Obj.magic
  end
module WEBGL_color_buffer_float =
  struct
    type t = [ `WEBGL_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6517 : Ojs.t) -> t_of_js x6517
    and t_0_to_js : t_0 -> Ojs.t = fun (x6516 : t) -> t_to_js x6516
    type tags = [ `WEBGL_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6520 : Ojs.t) -> intf_of_js __tags_of_js x6520
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6518 : __tags intf) -> intf_to_js __tags_to_js x6518
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x6522 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6522)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGBA32F_EXT : 'tags this -> GLenum.t) =
      fun (x6524 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6524) "RGBA32F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x6526 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6526)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgba32f_ext:GLenum.t -> unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x6528 : GLenum.t) ->
        fun ~rgba32f_ext:(x6529 : GLenum.t) ->
          fun ~unsigned_normalized_ext:(x6530 : GLenum.t) ->
            fun () ->
              let x6531 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x6531
                "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                (GLenum.t_to_js x6528);
              Ojs.set_prop_ascii x6531 "RGBA32F_EXT" (GLenum.t_to_js x6529);
              Ojs.set_prop_ascii x6531 "UNSIGNED_NORMALIZED_EXT"
                (GLenum.t_to_js x6530);
              t_of_js x6531
    let cast_from = Obj.magic
  end
module WebGLTexture =
  struct
    type t = [ `WebGLTexture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6533 : Ojs.t) -> t_of_js x6533
    and t_0_to_js : t_0 -> Ojs.t = fun (x6532 : t) -> t_to_js x6532
    type tags = [ `WebGLTexture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6536 : Ojs.t) -> intf_of_js __tags_of_js x6536
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6534 : __tags intf) -> intf_to_js __tags_to_js x6534
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLTexture") [||])
  end
module OVR_multiview2 =
  struct
    type t = [ `OVR_multiview2 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6539 : Ojs.t) -> t_of_js x6539
    and t_0_to_js : t_0 -> Ojs.t = fun (x6538 : t) -> t_to_js x6538
    type tags = [ `OVR_multiview2 ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6542 : Ojs.t) -> intf_of_js __tags_of_js x6542
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6540 : __tags intf) -> intf_to_js __tags_to_js x6540
    let (framebufferTextureMultiviewOVR :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t or_null ->
              level:GLint.t ->
                baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit)
      =
      fun (x6551 : 'tags this) ->
        fun ~target:(x6544 : GLenum.t) ->
          fun ~attachment:(x6545 : GLenum.t) ->
            fun ~texture:(x6546 : WebGLTexture.t or_null) ->
              fun ~level:(x6548 : GLint.t) ->
                fun ~baseViewIndex:(x6549 : GLint.t) ->
                  fun ~numViews:(x6550 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x6551)
                         "framebufferTextureMultiviewOVR"
                         [|(GLenum.t_to_js x6544);(GLenum.t_to_js x6545);(
                           or_null_to_js WebGLTexture.t_to_js x6546);(
                           GLint.t_to_js x6548);(GLint.t_to_js x6549);(
                           GLsizei.t_to_js x6550)|])
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :
      'tags this -> GLenum.t) =
      fun (x6553 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6553)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :
      'tags this -> GLenum.t) =
      fun (x6555 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6555)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR")
    let (get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :
      'tags this -> GLenum.t) =
      fun (x6557 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6557)
             "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR")
    let (get_MAX_VIEWS_OVR : 'tags this -> GLenum.t) =
      fun (x6559 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6559) "MAX_VIEWS_OVR")
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObjectOES =
  struct
    type t = [ `WebGLVertexArrayObjectOES ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6562 : Ojs.t) -> t_of_js x6562
    and t_0_to_js : t_0 -> Ojs.t = fun (x6561 : t) -> t_to_js x6561
    type tags = [ `WebGLVertexArrayObjectOES ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6565 : Ojs.t) -> intf_of_js __tags_of_js x6565
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6563 : __tags intf) -> intf_to_js __tags_to_js x6563
    let cast_from = Obj.magic
  end
module OES_vertex_array_object =
  struct
    type t = [ `OES_vertex_array_object ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6568 : Ojs.t) -> t_of_js x6568
    and t_0_to_js : t_0 -> Ojs.t = fun (x6567 : t) -> t_to_js x6567
    type tags = [ `OES_vertex_array_object ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_vertex_array_object ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6571 : Ojs.t) -> intf_of_js __tags_of_js x6571
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6569 : __tags intf) -> intf_to_js __tags_to_js x6569
    let (bindVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t or_null -> unit)
      =
      fun (x6575 : 'tags this) ->
        fun ~arrayObject:(x6573 : WebGLVertexArrayObjectOES.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6575) "bindVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x6573)|])
    let (createVertexArrayOES :
      'tags this -> WebGLVertexArrayObjectOES.t or_null) =
      fun (x6577 : 'tags this) ->
        or_null_of_js WebGLVertexArrayObjectOES.t_of_js
          (Ojs.call (this_to_js Obj.magic x6577) "createVertexArrayOES" [||])
    let (deleteVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t or_null -> unit)
      =
      fun (x6582 : 'tags this) ->
        fun ~arrayObject:(x6580 : WebGLVertexArrayObjectOES.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6582) "deleteVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x6580)|])
    let (isVertexArrayOES :
      'tags this ->
        arrayObject:WebGLVertexArrayObjectOES.t or_null -> GLboolean.t)
      =
      fun (x6586 : 'tags this) ->
        fun ~arrayObject:(x6584 : WebGLVertexArrayObjectOES.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6586) "isVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x6584)|])
    let (get_VERTEX_ARRAY_BINDING_OES : 'tags this -> GLenum.t) =
      fun (x6588 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6588)
             "VERTEX_ARRAY_BINDING_OES")
    let cast_from = Obj.magic
  end
module OES_texture_half_float_linear =
  struct
    type t = [ `OES_texture_half_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6591 : Ojs.t) -> t_of_js x6591
    and t_0_to_js : t_0 -> Ojs.t = fun (x6590 : t) -> t_to_js x6590
    type tags = [ `OES_texture_half_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6594 : Ojs.t) -> intf_of_js __tags_of_js x6594
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6592 : __tags intf) -> intf_to_js __tags_to_js x6592
    let cast_from = Obj.magic
  end
module OES_texture_half_float =
  struct
    type t = [ `OES_texture_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6597 : Ojs.t) -> t_of_js x6597
    and t_0_to_js : t_0 -> Ojs.t = fun (x6596 : t) -> t_to_js x6596
    type tags = [ `OES_texture_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6600 : Ojs.t) -> intf_of_js __tags_of_js x6600
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6598 : __tags intf) -> intf_to_js __tags_to_js x6598
    let (get_HALF_FLOAT_OES : 'tags this -> GLenum.t) =
      fun (x6602 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6602) "HALF_FLOAT_OES")
    let (create : half_float_oes:GLenum.t -> unit -> t) =
      fun ~half_float_oes:(x6604 : GLenum.t) ->
        fun () ->
          let x6605 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6605 "HALF_FLOAT_OES" (GLenum.t_to_js x6604);
          t_of_js x6605
    let cast_from = Obj.magic
  end
module OES_texture_float_linear =
  struct
    type t = [ `OES_texture_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6607 : Ojs.t) -> t_of_js x6607
    and t_0_to_js : t_0 -> Ojs.t = fun (x6606 : t) -> t_to_js x6606
    type tags = [ `OES_texture_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6610 : Ojs.t) -> intf_of_js __tags_of_js x6610
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6608 : __tags intf) -> intf_to_js __tags_to_js x6608
    let cast_from = Obj.magic
  end
module OES_texture_float =
  struct
    type t = [ `OES_texture_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6613 : Ojs.t) -> t_of_js x6613
    and t_0_to_js : t_0 -> Ojs.t = fun (x6612 : t) -> t_to_js x6612
    type tags = [ `OES_texture_float ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6616 : Ojs.t) -> intf_of_js __tags_of_js x6616
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6614 : __tags intf) -> intf_to_js __tags_to_js x6614
    let cast_from = Obj.magic
  end
module OES_standard_derivatives =
  struct
    type t = [ `OES_standard_derivatives ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6619 : Ojs.t) -> t_of_js x6619
    and t_0_to_js : t_0 -> Ojs.t = fun (x6618 : t) -> t_to_js x6618
    type tags = [ `OES_standard_derivatives ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_standard_derivatives ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6622 : Ojs.t) -> intf_of_js __tags_of_js x6622
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6620 : __tags intf) -> intf_to_js __tags_to_js x6620
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES : 'tags this -> GLenum.t) =
      fun (x6624 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6624)
             "FRAGMENT_SHADER_DERIVATIVE_HINT_OES")
    let (create : fragment_shader_derivative_hint_oes:GLenum.t -> unit -> t)
      =
      fun ~fragment_shader_derivative_hint_oes:(x6626 : GLenum.t) ->
        fun () ->
          let x6627 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6627 "FRAGMENT_SHADER_DERIVATIVE_HINT_OES"
            (GLenum.t_to_js x6626);
          t_of_js x6627
    let cast_from = Obj.magic
  end
module OES_element_index_uint =
  struct
    type t = [ `OES_element_index_uint ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6629 : Ojs.t) -> t_of_js x6629
    and t_0_to_js : t_0 -> Ojs.t = fun (x6628 : t) -> t_to_js x6628
    type tags = [ `OES_element_index_uint ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_element_index_uint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6632 : Ojs.t) -> intf_of_js __tags_of_js x6632
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6630 : __tags intf) -> intf_to_js __tags_to_js x6630
    let cast_from = Obj.magic
  end
module KHR_parallel_shader_compile =
  struct
    type t = [ `KHR_parallel_shader_compile ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6635 : Ojs.t) -> t_of_js x6635
    and t_0_to_js : t_0 -> Ojs.t = fun (x6634 : t) -> t_to_js x6634
    type tags = [ `KHR_parallel_shader_compile ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6638 : Ojs.t) -> intf_of_js __tags_of_js x6638
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6636 : __tags intf) -> intf_to_js __tags_to_js x6636
    let (get_COMPLETION_STATUS_KHR : 'tags this -> GLenum.t) =
      fun (x6640 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6640)
             "COMPLETION_STATUS_KHR")
    let (create : completion_status_khr:GLenum.t -> unit -> t) =
      fun ~completion_status_khr:(x6642 : GLenum.t) ->
        fun () ->
          let x6643 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x6643 "COMPLETION_STATUS_KHR"
            (GLenum.t_to_js x6642);
          t_of_js x6643
    let cast_from = Obj.magic
  end
module GLclampf =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6645 : Ojs.t) -> Ojs.float_of_js x6645
    and t_to_js : t -> Ojs.t = fun (x6644 : float) -> Ojs.float_to_js x6644
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6647 : Ojs.t) -> t_of_js x6647
    and t_0_to_js : t_0 -> Ojs.t = fun (x6646 : t) -> t_to_js x6646
  end
module GLbitfield =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6649 : Ojs.t) -> Ojs.float_of_js x6649
    and t_to_js : t -> Ojs.t = fun (x6648 : float) -> Ojs.float_to_js x6648
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6651 : Ojs.t) -> t_of_js x6651
    and t_0_to_js : t_0 -> Ojs.t = fun (x6650 : t) -> t_to_js x6650
  end
module EXT_texture_filter_anisotropic =
  struct
    type t = [ `EXT_texture_filter_anisotropic ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6653 : Ojs.t) -> t_of_js x6653
    and t_0_to_js : t_0 -> Ojs.t = fun (x6652 : t) -> t_to_js x6652
    type tags = [ `EXT_texture_filter_anisotropic ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6656 : Ojs.t) -> intf_of_js __tags_of_js x6656
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6654 : __tags intf) -> intf_to_js __tags_to_js x6654
    let (get_MAX_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x6658 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6658)
             "MAX_TEXTURE_MAX_ANISOTROPY_EXT")
    let (get_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x6660 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6660)
             "TEXTURE_MAX_ANISOTROPY_EXT")
    let (create :
      max_texture_max_anisotropy_ext:GLenum.t ->
        texture_max_anisotropy_ext:GLenum.t -> unit -> t)
      =
      fun ~max_texture_max_anisotropy_ext:(x6662 : GLenum.t) ->
        fun ~texture_max_anisotropy_ext:(x6663 : GLenum.t) ->
          fun () ->
            let x6664 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6664 "MAX_TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x6662);
            Ojs.set_prop_ascii x6664 "TEXTURE_MAX_ANISOTROPY_EXT"
              (GLenum.t_to_js x6663);
            t_of_js x6664
    let cast_from = Obj.magic
  end
module EXT_shader_texture_lod =
  struct
    type t = [ `EXT_shader_texture_lod ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6666 : Ojs.t) -> t_of_js x6666
    and t_0_to_js : t_0 -> Ojs.t = fun (x6665 : t) -> t_to_js x6665
    type tags = [ `EXT_shader_texture_lod ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6669 : Ojs.t) -> intf_of_js __tags_of_js x6669
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6667 : __tags intf) -> intf_to_js __tags_to_js x6667
    let cast_from = Obj.magic
  end
module EXT_sRGB =
  struct
    type t = [ `EXT_sRGB ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6672 : Ojs.t) -> t_of_js x6672
    and t_0_to_js : t_0 -> Ojs.t = fun (x6671 : t) -> t_to_js x6671
    type tags = [ `EXT_sRGB ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6675 : Ojs.t) -> intf_of_js __tags_of_js x6675
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6673 : __tags intf) -> intf_to_js __tags_to_js x6673
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT :
      'tags this -> GLenum.t) =
      fun (x6677 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6677)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT")
    let (get_SRGB8_ALPHA8_EXT : 'tags this -> GLenum.t) =
      fun (x6679 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6679) "SRGB8_ALPHA8_EXT")
    let (get_SRGB_ALPHA_EXT : 'tags this -> GLenum.t) =
      fun (x6681 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6681) "SRGB_ALPHA_EXT")
    let (get_SRGB_EXT : 'tags this -> GLenum.t) =
      fun (x6683 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6683) "SRGB_EXT")
    let (create :
      framebuffer_attachment_color_encoding_ext:GLenum.t ->
        srgb8_alpha8_ext:GLenum.t ->
          srgb_alpha_ext:GLenum.t -> srgb_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_color_encoding_ext:(x6685 : GLenum.t) ->
        fun ~srgb8_alpha8_ext:(x6686 : GLenum.t) ->
          fun ~srgb_alpha_ext:(x6687 : GLenum.t) ->
            fun ~srgb_ext:(x6688 : GLenum.t) ->
              fun () ->
                let x6689 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6689
                  "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"
                  (GLenum.t_to_js x6685);
                Ojs.set_prop_ascii x6689 "SRGB8_ALPHA8_EXT"
                  (GLenum.t_to_js x6686);
                Ojs.set_prop_ascii x6689 "SRGB_ALPHA_EXT"
                  (GLenum.t_to_js x6687);
                Ojs.set_prop_ascii x6689 "SRGB_EXT" (GLenum.t_to_js x6688);
                t_of_js x6689
    let cast_from = Obj.magic
  end
module EXT_frag_depth =
  struct
    type t = [ `EXT_frag_depth ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6691 : Ojs.t) -> t_of_js x6691
    and t_0_to_js : t_0 -> Ojs.t = fun (x6690 : t) -> t_to_js x6690
    type tags = [ `EXT_frag_depth ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6694 : Ojs.t) -> intf_of_js __tags_of_js x6694
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6692 : __tags intf) -> intf_to_js __tags_to_js x6692
    let cast_from = Obj.magic
  end
module EXT_float_blend =
  struct
    type t = [ `EXT_float_blend ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6697 : Ojs.t) -> t_of_js x6697
    and t_0_to_js : t_0 -> Ojs.t = fun (x6696 : t) -> t_to_js x6696
    type tags = [ `EXT_float_blend ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6700 : Ojs.t) -> intf_of_js __tags_of_js x6700
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6698 : __tags intf) -> intf_to_js __tags_to_js x6698
    let cast_from = Obj.magic
  end
module EXT_color_buffer_half_float =
  struct
    type t = [ `EXT_color_buffer_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6703 : Ojs.t) -> t_of_js x6703
    and t_0_to_js : t_0 -> Ojs.t = fun (x6702 : t) -> t_to_js x6702
    type tags = [ `EXT_color_buffer_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6706 : Ojs.t) -> intf_of_js __tags_of_js x6706
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6704 : __tags intf) -> intf_to_js __tags_to_js x6704
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x6708 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6708)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGB16F_EXT : 'tags this -> GLenum.t) =
      fun (x6710 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6710) "RGB16F_EXT")
    let (get_RGBA16F_EXT : 'tags this -> GLenum.t) =
      fun (x6712 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6712) "RGBA16F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x6714 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6714)
             "UNSIGNED_NORMALIZED_EXT")
    let (create :
      framebuffer_attachment_component_type_ext:GLenum.t ->
        rgb16f_ext:GLenum.t ->
          rgba16f_ext:GLenum.t ->
            unsigned_normalized_ext:GLenum.t -> unit -> t)
      =
      fun ~framebuffer_attachment_component_type_ext:(x6716 : GLenum.t) ->
        fun ~rgb16f_ext:(x6717 : GLenum.t) ->
          fun ~rgba16f_ext:(x6718 : GLenum.t) ->
            fun ~unsigned_normalized_ext:(x6719 : GLenum.t) ->
              fun () ->
                let x6720 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x6720
                  "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"
                  (GLenum.t_to_js x6716);
                Ojs.set_prop_ascii x6720 "RGB16F_EXT" (GLenum.t_to_js x6717);
                Ojs.set_prop_ascii x6720 "RGBA16F_EXT" (GLenum.t_to_js x6718);
                Ojs.set_prop_ascii x6720 "UNSIGNED_NORMALIZED_EXT"
                  (GLenum.t_to_js x6719);
                t_of_js x6720
    let cast_from = Obj.magic
  end
module EXT_color_buffer_float =
  struct
    type t = [ `EXT_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6722 : Ojs.t) -> t_of_js x6722
    and t_0_to_js : t_0 -> Ojs.t = fun (x6721 : t) -> t_to_js x6721
    type tags = [ `EXT_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6725 : Ojs.t) -> intf_of_js __tags_of_js x6725
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6723 : __tags intf) -> intf_to_js __tags_to_js x6723
    let cast_from = Obj.magic
  end
module EXT_blend_minmax =
  struct
    type t = [ `EXT_blend_minmax ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6728 : Ojs.t) -> t_of_js x6728
    and t_0_to_js : t_0 -> Ojs.t = fun (x6727 : t) -> t_to_js x6727
    type tags = [ `EXT_blend_minmax ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6731 : Ojs.t) -> intf_of_js __tags_of_js x6731
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6729 : __tags intf) -> intf_to_js __tags_to_js x6729
    let (get_MAX_EXT : 'tags this -> GLenum.t) =
      fun (x6733 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6733) "MAX_EXT")
    let (get_MIN_EXT : 'tags this -> GLenum.t) =
      fun (x6735 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6735) "MIN_EXT")
    let (create : max_ext:GLenum.t -> min_ext:GLenum.t -> unit -> t) =
      fun ~max_ext:(x6737 : GLenum.t) ->
        fun ~min_ext:(x6738 : GLenum.t) ->
          fun () ->
            let x6739 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x6739 "MAX_EXT" (GLenum.t_to_js x6737);
            Ojs.set_prop_ascii x6739 "MIN_EXT" (GLenum.t_to_js x6738);
            t_of_js x6739
    let cast_from = Obj.magic
  end
module GLuint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6741 : Ojs.t) -> Ojs.float_of_js x6741
    and t_to_js : t -> Ojs.t = fun (x6740 : float) -> Ojs.float_to_js x6740
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6743 : Ojs.t) -> t_of_js x6743
    and t_0_to_js : t_0 -> Ojs.t = fun (x6742 : t) -> t_to_js x6742
  end
module ANGLE_instanced_arrays =
  struct
    type t = [ `ANGLE_instanced_arrays ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6745 : Ojs.t) -> t_of_js x6745
    and t_0_to_js : t_0 -> Ojs.t = fun (x6744 : t) -> t_to_js x6744
    type tags = [ `ANGLE_instanced_arrays ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6748 : Ojs.t) -> intf_of_js __tags_of_js x6748
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6746 : __tags intf) -> intf_to_js __tags_to_js x6746
    let (drawArraysInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit)
      =
      fun (x6754 : 'tags this) ->
        fun ~mode:(x6750 : GLenum.t) ->
          fun ~first:(x6751 : GLint.t) ->
            fun ~count:(x6752 : GLsizei.t) ->
              fun ~primcount:(x6753 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6754)
                     "drawArraysInstancedANGLE"
                     [|(GLenum.t_to_js x6750);(GLint.t_to_js x6751);(
                       GLsizei.t_to_js x6752);(GLsizei.t_to_js x6753)|])
    let (drawElementsInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> primcount:GLsizei.t -> unit)
      =
      fun (x6761 : 'tags this) ->
        fun ~mode:(x6756 : GLenum.t) ->
          fun ~count:(x6757 : GLsizei.t) ->
            fun ~type_:(x6758 : GLenum.t) ->
              fun ~offset:(x6759 : GLintptr.t) ->
                fun ~primcount:(x6760 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x6761)
                       "drawElementsInstancedANGLE"
                       [|(GLenum.t_to_js x6756);(GLsizei.t_to_js x6757);(
                         GLenum.t_to_js x6758);(GLintptr.t_to_js x6759);(
                         GLsizei.t_to_js x6760)|])
    let (vertexAttribDivisorANGLE :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x6765 : 'tags this) ->
        fun ~index:(x6763 : GLuint.t) ->
          fun ~divisor:(x6764 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6765)
                 "vertexAttribDivisorANGLE"
                 [|(GLuint.t_to_js x6763);(GLuint.t_to_js x6764)|])
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE : 'tags this -> GLenum.t) =
      fun (x6767 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6767)
             "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")
    let cast_from = Obj.magic
  end
module WebGLRenderingContextBase =
  struct
    type t = [ `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6770 : Ojs.t) -> t_of_js x6770
    and t_0_to_js : t_0 -> Ojs.t = fun (x6769 : t) -> t_to_js x6769
    type tags = [ `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6773 : Ojs.t) -> intf_of_js __tags_of_js x6773
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6771 : __tags intf) -> intf_to_js __tags_to_js x6771
    let (get_drawingBufferHeight : 'tags this -> GLsizei.t) =
      fun (x6775 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6775)
             "drawingBufferHeight")
    let (get_drawingBufferWidth : 'tags this -> GLsizei.t) =
      fun (x6777 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6777)
             "drawingBufferWidth")
    let (activeTexture : 'tags this -> texture:GLenum.t -> unit) =
      fun (x6780 : 'tags this) ->
        fun ~texture:(x6779 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6780) "activeTexture"
               [|(GLenum.t_to_js x6779)|])
    let (attachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x6784 : 'tags this) ->
        fun ~program:(x6782 : WebGLProgram.t) ->
          fun ~shader:(x6783 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6784) "attachShader"
                 [|(WebGLProgram.t_to_js x6782);(WebGLShader.t_to_js x6783)|])
    let (bindAttribLocation :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit)
      =
      fun (x6789 : 'tags this) ->
        fun ~program:(x6786 : WebGLProgram.t) ->
          fun ~index:(x6787 : GLuint.t) ->
            fun ~name:(x6788 : string) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6789) "bindAttribLocation"
                   [|(WebGLProgram.t_to_js x6786);(GLuint.t_to_js x6787);(
                     Ojs.string_to_js x6788)|])
    let (bindBuffer :
      'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t or_null -> unit)
      =
      fun (x6794 : 'tags this) ->
        fun ~target:(x6791 : GLenum.t) ->
          fun ~buffer:(x6792 : WebGLBuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6794) "bindBuffer"
                 [|(GLenum.t_to_js x6791);(or_null_to_js WebGLBuffer.t_to_js
                                             x6792)|])
    let (bindFramebuffer :
      'tags this ->
        target:GLenum.t -> framebuffer:WebGLFramebuffer.t or_null -> unit)
      =
      fun (x6799 : 'tags this) ->
        fun ~target:(x6796 : GLenum.t) ->
          fun ~framebuffer:(x6797 : WebGLFramebuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6799) "bindFramebuffer"
                 [|(GLenum.t_to_js x6796);(or_null_to_js
                                             WebGLFramebuffer.t_to_js x6797)|])
    let (bindRenderbuffer :
      'tags this ->
        target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t or_null -> unit)
      =
      fun (x6804 : 'tags this) ->
        fun ~target:(x6801 : GLenum.t) ->
          fun ~renderbuffer:(x6802 : WebGLRenderbuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6804) "bindRenderbuffer"
                 [|(GLenum.t_to_js x6801);(or_null_to_js
                                             WebGLRenderbuffer.t_to_js x6802)|])
    let (bindTexture :
      'tags this -> target:GLenum.t -> texture:WebGLTexture.t or_null -> unit)
      =
      fun (x6809 : 'tags this) ->
        fun ~target:(x6806 : GLenum.t) ->
          fun ~texture:(x6807 : WebGLTexture.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6809) "bindTexture"
                 [|(GLenum.t_to_js x6806);(or_null_to_js WebGLTexture.t_to_js
                                             x6807)|])
    let (blendColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x6815 : 'tags this) ->
        fun ~red:(x6811 : GLclampf.t) ->
          fun ~green:(x6812 : GLclampf.t) ->
            fun ~blue:(x6813 : GLclampf.t) ->
              fun ~alpha:(x6814 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6815) "blendColor"
                     [|(GLclampf.t_to_js x6811);(GLclampf.t_to_js x6812);(
                       GLclampf.t_to_js x6813);(GLclampf.t_to_js x6814)|])
    let (blendEquation : 'tags this -> mode:GLenum.t -> unit) =
      fun (x6818 : 'tags this) ->
        fun ~mode:(x6817 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6818) "blendEquation"
               [|(GLenum.t_to_js x6817)|])
    let (blendEquationSeparate :
      'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit) =
      fun (x6822 : 'tags this) ->
        fun ~modeRGB:(x6820 : GLenum.t) ->
          fun ~modeAlpha:(x6821 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6822) "blendEquationSeparate"
                 [|(GLenum.t_to_js x6820);(GLenum.t_to_js x6821)|])
    let (blendFunc :
      'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit) =
      fun (x6826 : 'tags this) ->
        fun ~sfactor:(x6824 : GLenum.t) ->
          fun ~dfactor:(x6825 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6826) "blendFunc"
                 [|(GLenum.t_to_js x6824);(GLenum.t_to_js x6825)|])
    let (blendFuncSeparate :
      'tags this ->
        srcRGB:GLenum.t ->
          dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit)
      =
      fun (x6832 : 'tags this) ->
        fun ~srcRGB:(x6828 : GLenum.t) ->
          fun ~dstRGB:(x6829 : GLenum.t) ->
            fun ~srcAlpha:(x6830 : GLenum.t) ->
              fun ~dstAlpha:(x6831 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6832) "blendFuncSeparate"
                     [|(GLenum.t_to_js x6828);(GLenum.t_to_js x6829);(
                       GLenum.t_to_js x6830);(GLenum.t_to_js x6831)|])
    let (checkFramebufferStatus : 'tags this -> target:GLenum.t -> GLenum.t)
      =
      fun (x6835 : 'tags this) ->
        fun ~target:(x6834 : GLenum.t) ->
          GLenum.t_of_js
            (Ojs.call (this_to_js Obj.magic x6835) "checkFramebufferStatus"
               [|(GLenum.t_to_js x6834)|])
    let (clear : 'tags this -> mask:GLbitfield.t -> unit) =
      fun (x6838 : 'tags this) ->
        fun ~mask:(x6837 : GLbitfield.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6838) "clear"
               [|(GLbitfield.t_to_js x6837)|])
    let (clearColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x6844 : 'tags this) ->
        fun ~red:(x6840 : GLclampf.t) ->
          fun ~green:(x6841 : GLclampf.t) ->
            fun ~blue:(x6842 : GLclampf.t) ->
              fun ~alpha:(x6843 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6844) "clearColor"
                     [|(GLclampf.t_to_js x6840);(GLclampf.t_to_js x6841);(
                       GLclampf.t_to_js x6842);(GLclampf.t_to_js x6843)|])
    let (clearDepth : 'tags this -> depth:GLclampf.t -> unit) =
      fun (x6847 : 'tags this) ->
        fun ~depth:(x6846 : GLclampf.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6847) "clearDepth"
               [|(GLclampf.t_to_js x6846)|])
    let (clearStencil : 'tags this -> s:GLint.t -> unit) =
      fun (x6850 : 'tags this) ->
        fun ~s:(x6849 : GLint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6850) "clearStencil"
               [|(GLint.t_to_js x6849)|])
    let (colorMask :
      'tags this ->
        red:GLboolean.t ->
          green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit)
      =
      fun (x6856 : 'tags this) ->
        fun ~red:(x6852 : GLboolean.t) ->
          fun ~green:(x6853 : GLboolean.t) ->
            fun ~blue:(x6854 : GLboolean.t) ->
              fun ~alpha:(x6855 : GLboolean.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6856) "colorMask"
                     [|(GLboolean.t_to_js x6852);(GLboolean.t_to_js x6853);(
                       GLboolean.t_to_js x6854);(GLboolean.t_to_js x6855)|])
    let (compileShader : 'tags this -> shader:WebGLShader.t -> unit) =
      fun (x6859 : 'tags this) ->
        fun ~shader:(x6858 : WebGLShader.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6859) "compileShader"
               [|(WebGLShader.t_to_js x6858)|])
    let (copyTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              x:GLint.t ->
                y:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t -> border:GLint.t -> unit)
      =
      fun (x6869 : 'tags this) ->
        fun ~target:(x6861 : GLenum.t) ->
          fun ~level:(x6862 : GLint.t) ->
            fun ~internalformat:(x6863 : GLenum.t) ->
              fun ~x:(x6864 : GLint.t) ->
                fun ~y:(x6865 : GLint.t) ->
                  fun ~width:(x6866 : GLsizei.t) ->
                    fun ~height:(x6867 : GLsizei.t) ->
                      fun ~border:(x6868 : GLint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x6869)
                             "copyTexImage2D"
                             [|(GLenum.t_to_js x6861);(GLint.t_to_js x6862);(
                               GLenum.t_to_js x6863);(GLint.t_to_js x6864);(
                               GLint.t_to_js x6865);(GLsizei.t_to_js x6866);(
                               GLsizei.t_to_js x6867);(GLint.t_to_js x6868)|])
    let (copyTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                x:GLint.t ->
                  y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x6879 : 'tags this) ->
        fun ~target:(x6871 : GLenum.t) ->
          fun ~level:(x6872 : GLint.t) ->
            fun ~xoffset:(x6873 : GLint.t) ->
              fun ~yoffset:(x6874 : GLint.t) ->
                fun ~x:(x6875 : GLint.t) ->
                  fun ~y:(x6876 : GLint.t) ->
                    fun ~width:(x6877 : GLsizei.t) ->
                      fun ~height:(x6878 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x6879)
                             "copyTexSubImage2D"
                             [|(GLenum.t_to_js x6871);(GLint.t_to_js x6872);(
                               GLint.t_to_js x6873);(GLint.t_to_js x6874);(
                               GLint.t_to_js x6875);(GLint.t_to_js x6876);(
                               GLsizei.t_to_js x6877);(GLsizei.t_to_js x6878)|])
    let (createBuffer : 'tags this -> WebGLBuffer.t or_null) =
      fun (x6881 : 'tags this) ->
        or_null_of_js WebGLBuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x6881) "createBuffer" [||])
    let (createFramebuffer : 'tags this -> WebGLFramebuffer.t or_null) =
      fun (x6884 : 'tags this) ->
        or_null_of_js WebGLFramebuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x6884) "createFramebuffer" [||])
    let (createProgram : 'tags this -> WebGLProgram.t or_null) =
      fun (x6887 : 'tags this) ->
        or_null_of_js WebGLProgram.t_of_js
          (Ojs.call (this_to_js Obj.magic x6887) "createProgram" [||])
    let (createRenderbuffer : 'tags this -> WebGLRenderbuffer.t or_null) =
      fun (x6890 : 'tags this) ->
        or_null_of_js WebGLRenderbuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x6890) "createRenderbuffer" [||])
    let (createShader :
      'tags this -> type_:GLenum.t -> WebGLShader.t or_null) =
      fun (x6894 : 'tags this) ->
        fun ~type_:(x6893 : GLenum.t) ->
          or_null_of_js WebGLShader.t_of_js
            (Ojs.call (this_to_js Obj.magic x6894) "createShader"
               [|(GLenum.t_to_js x6893)|])
    let (createTexture : 'tags this -> WebGLTexture.t or_null) =
      fun (x6897 : 'tags this) ->
        or_null_of_js WebGLTexture.t_of_js
          (Ojs.call (this_to_js Obj.magic x6897) "createTexture" [||])
    let (cullFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x6901 : 'tags this) ->
        fun ~mode:(x6900 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6901) "cullFace"
               [|(GLenum.t_to_js x6900)|])
    let (deleteBuffer : 'tags this -> buffer:WebGLBuffer.t or_null -> unit) =
      fun (x6905 : 'tags this) ->
        fun ~buffer:(x6903 : WebGLBuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6905) "deleteBuffer"
               [|(or_null_to_js WebGLBuffer.t_to_js x6903)|])
    let (deleteFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t or_null -> unit) =
      fun (x6909 : 'tags this) ->
        fun ~framebuffer:(x6907 : WebGLFramebuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6909) "deleteFramebuffer"
               [|(or_null_to_js WebGLFramebuffer.t_to_js x6907)|])
    let (deleteProgram :
      'tags this -> program:WebGLProgram.t or_null -> unit) =
      fun (x6913 : 'tags this) ->
        fun ~program:(x6911 : WebGLProgram.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6913) "deleteProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x6911)|])
    let (deleteRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t or_null -> unit) =
      fun (x6917 : 'tags this) ->
        fun ~renderbuffer:(x6915 : WebGLRenderbuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6917) "deleteRenderbuffer"
               [|(or_null_to_js WebGLRenderbuffer.t_to_js x6915)|])
    let (deleteShader : 'tags this -> shader:WebGLShader.t or_null -> unit) =
      fun (x6921 : 'tags this) ->
        fun ~shader:(x6919 : WebGLShader.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6921) "deleteShader"
               [|(or_null_to_js WebGLShader.t_to_js x6919)|])
    let (deleteTexture :
      'tags this -> texture:WebGLTexture.t or_null -> unit) =
      fun (x6925 : 'tags this) ->
        fun ~texture:(x6923 : WebGLTexture.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6925) "deleteTexture"
               [|(or_null_to_js WebGLTexture.t_to_js x6923)|])
    let (depthFunc : 'tags this -> func:GLenum.t -> unit) =
      fun (x6928 : 'tags this) ->
        fun ~func:(x6927 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6928) "depthFunc"
               [|(GLenum.t_to_js x6927)|])
    let (depthMask : 'tags this -> flag:GLboolean.t -> unit) =
      fun (x6931 : 'tags this) ->
        fun ~flag:(x6930 : GLboolean.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6931) "depthMask"
               [|(GLboolean.t_to_js x6930)|])
    let (depthRange :
      'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit) =
      fun (x6935 : 'tags this) ->
        fun ~zNear:(x6933 : GLclampf.t) ->
          fun ~zFar:(x6934 : GLclampf.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6935) "depthRange"
                 [|(GLclampf.t_to_js x6933);(GLclampf.t_to_js x6934)|])
    let (detachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x6939 : 'tags this) ->
        fun ~program:(x6937 : WebGLProgram.t) ->
          fun ~shader:(x6938 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6939) "detachShader"
                 [|(WebGLProgram.t_to_js x6937);(WebGLShader.t_to_js x6938)|])
    let (disable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x6942 : 'tags this) ->
        fun ~cap:(x6941 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6942) "disable"
               [|(GLenum.t_to_js x6941)|])
    let (disableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x6945 : 'tags this) ->
        fun ~index:(x6944 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6945) "disableVertexAttribArray"
               [|(GLuint.t_to_js x6944)|])
    let (drawArrays :
      'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit)
      =
      fun (x6950 : 'tags this) ->
        fun ~mode:(x6947 : GLenum.t) ->
          fun ~first:(x6948 : GLint.t) ->
            fun ~count:(x6949 : GLsizei.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6950) "drawArrays"
                   [|(GLenum.t_to_js x6947);(GLint.t_to_js x6948);(GLsizei.t_to_js
                                                                    x6949)|])
    let (drawElements :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x6956 : 'tags this) ->
        fun ~mode:(x6952 : GLenum.t) ->
          fun ~count:(x6953 : GLsizei.t) ->
            fun ~type_:(x6954 : GLenum.t) ->
              fun ~offset:(x6955 : GLintptr.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6956) "drawElements"
                     [|(GLenum.t_to_js x6952);(GLsizei.t_to_js x6953);(
                       GLenum.t_to_js x6954);(GLintptr.t_to_js x6955)|])
    let (enable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x6959 : 'tags this) ->
        fun ~cap:(x6958 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6959) "enable"
               [|(GLenum.t_to_js x6958)|])
    let (enableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x6962 : 'tags this) ->
        fun ~index:(x6961 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6962) "enableVertexAttribArray"
               [|(GLuint.t_to_js x6961)|])
    let (finish : 'tags this -> unit) =
      fun (x6964 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6964) "finish" [||])
    let (flush : 'tags this -> unit) =
      fun (x6966 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6966) "flush" [||])
    let (framebufferRenderbuffer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            renderbuffertarget:GLenum.t ->
              renderbuffer:WebGLRenderbuffer.t or_null -> unit)
      =
      fun (x6973 : 'tags this) ->
        fun ~target:(x6968 : GLenum.t) ->
          fun ~attachment:(x6969 : GLenum.t) ->
            fun ~renderbuffertarget:(x6970 : GLenum.t) ->
              fun ~renderbuffer:(x6971 : WebGLRenderbuffer.t or_null) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6973)
                     "framebufferRenderbuffer"
                     [|(GLenum.t_to_js x6968);(GLenum.t_to_js x6969);(
                       GLenum.t_to_js x6970);(or_null_to_js
                                                WebGLRenderbuffer.t_to_js
                                                x6971)|])
    let (framebufferTexture2D :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            textarget:GLenum.t ->
              texture:WebGLTexture.t or_null -> level:GLint.t -> unit)
      =
      fun (x6981 : 'tags this) ->
        fun ~target:(x6975 : GLenum.t) ->
          fun ~attachment:(x6976 : GLenum.t) ->
            fun ~textarget:(x6977 : GLenum.t) ->
              fun ~texture:(x6978 : WebGLTexture.t or_null) ->
                fun ~level:(x6980 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x6981)
                       "framebufferTexture2D"
                       [|(GLenum.t_to_js x6975);(GLenum.t_to_js x6976);(
                         GLenum.t_to_js x6977);(or_null_to_js
                                                  WebGLTexture.t_to_js x6978);(
                         GLint.t_to_js x6980)|])
    let (frontFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x6984 : 'tags this) ->
        fun ~mode:(x6983 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6984) "frontFace"
               [|(GLenum.t_to_js x6983)|])
    let (generateMipmap : 'tags this -> target:GLenum.t -> unit) =
      fun (x6987 : 'tags this) ->
        fun ~target:(x6986 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6987) "generateMipmap"
               [|(GLenum.t_to_js x6986)|])
    let (getActiveAttrib :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x6991 : 'tags this) ->
        fun ~program:(x6989 : WebGLProgram.t) ->
          fun ~index:(x6990 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x6991) "getActiveAttrib"
                 [|(WebGLProgram.t_to_js x6989);(GLuint.t_to_js x6990)|])
    let (getActiveUniform :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x6996 : 'tags this) ->
        fun ~program:(x6994 : WebGLProgram.t) ->
          fun ~index:(x6995 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x6996) "getActiveUniform"
                 [|(WebGLProgram.t_to_js x6994);(GLuint.t_to_js x6995)|])
    let (getAttachedShaders :
      'tags this -> program:WebGLProgram.t -> WebGLShader.t list or_null) =
      fun (x7000 : 'tags this) ->
        fun ~program:(x6999 : WebGLProgram.t) ->
          or_null_of_js
            (fun (x7002 : Ojs.t) -> Ojs.list_of_js WebGLShader.t_of_js x7002)
            (Ojs.call (this_to_js Obj.magic x7000) "getAttachedShaders"
               [|(WebGLProgram.t_to_js x6999)|])
    let (getAttribLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x7006 : 'tags this) ->
        fun ~program:(x7004 : WebGLProgram.t) ->
          fun ~name:(x7005 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x7006) "getAttribLocation"
                 [|(WebGLProgram.t_to_js x7004);(Ojs.string_to_js x7005)|])
    let (getBufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7010 : 'tags this) ->
        fun ~target:(x7008 : GLenum.t) ->
          fun ~pname:(x7009 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7010) "getBufferParameter"
                 [|(GLenum.t_to_js x7008);(GLenum.t_to_js x7009)|])
    let (getContextAttributes :
      'tags this -> WebGLContextAttributes.t or_null) =
      fun (x7012 : 'tags this) ->
        or_null_of_js WebGLContextAttributes.t_of_js
          (Ojs.call (this_to_js Obj.magic x7012) "getContextAttributes" [||])
    let (getError : 'tags this -> GLenum.t) =
      fun (x7015 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.call (this_to_js Obj.magic x7015) "getError" [||])
    let (getExtension :
      'tags this ->
        extensionName:[ `L_s2_EXT_blend_minmax ] ->
          EXT_blend_minmax.t or_null)
      =
      fun (x7018 : 'tags this) ->
        fun ~extensionName:(x7017 : [ `L_s2_EXT_blend_minmax ]) ->
          or_null_of_js EXT_blend_minmax.t_of_js
            (Ojs.call (this_to_js Obj.magic x7018) "getExtension"
               [|((match x7017 with
                   | `L_s2_EXT_blend_minmax ->
                       Ojs.string_to_js "EXT_blend_minmax"))|])
    let (getExtension' :
      'tags this ->
        extensionName:[ `L_s3_EXT_color_buffer_float ] ->
          EXT_color_buffer_float.t or_null)
      =
      fun (x7022 : 'tags this) ->
        fun ~extensionName:(x7021 : [ `L_s3_EXT_color_buffer_float ]) ->
          or_null_of_js EXT_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7022) "getExtension"
               [|((match x7021 with
                   | `L_s3_EXT_color_buffer_float ->
                       Ojs.string_to_js "EXT_color_buffer_float"))|])
    let (getExtension'' :
      'tags this ->
        extensionName:[ `L_s4_EXT_color_buffer_half_float ] ->
          EXT_color_buffer_half_float.t or_null)
      =
      fun (x7026 : 'tags this) ->
        fun ~extensionName:(x7025 : [ `L_s4_EXT_color_buffer_half_float ]) ->
          or_null_of_js EXT_color_buffer_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7026) "getExtension"
               [|((match x7025 with
                   | `L_s4_EXT_color_buffer_half_float ->
                       Ojs.string_to_js "EXT_color_buffer_half_float"))|])
    let (getExtension''' :
      'tags this ->
        extensionName:[ `L_s5_EXT_float_blend ] -> EXT_float_blend.t or_null)
      =
      fun (x7030 : 'tags this) ->
        fun ~extensionName:(x7029 : [ `L_s5_EXT_float_blend ]) ->
          or_null_of_js EXT_float_blend.t_of_js
            (Ojs.call (this_to_js Obj.magic x7030) "getExtension"
               [|((match x7029 with
                   | `L_s5_EXT_float_blend ->
                       Ojs.string_to_js "EXT_float_blend"))|])
    let (getExtension'''' :
      'tags this ->
        extensionName:[ `L_s9_EXT_texture_filter_anisotropic ] ->
          EXT_texture_filter_anisotropic.t or_null)
      =
      fun (x7034 : 'tags this) ->
        fun ~extensionName:(x7033 : [ `L_s9_EXT_texture_filter_anisotropic ])
          ->
          or_null_of_js EXT_texture_filter_anisotropic.t_of_js
            (Ojs.call (this_to_js Obj.magic x7034) "getExtension"
               [|((match x7033 with
                   | `L_s9_EXT_texture_filter_anisotropic ->
                       Ojs.string_to_js "EXT_texture_filter_anisotropic"))|])
    let (getExtension''''' :
      'tags this ->
        extensionName:[ `L_s6_EXT_frag_depth ] -> EXT_frag_depth.t or_null)
      =
      fun (x7038 : 'tags this) ->
        fun ~extensionName:(x7037 : [ `L_s6_EXT_frag_depth ]) ->
          or_null_of_js EXT_frag_depth.t_of_js
            (Ojs.call (this_to_js Obj.magic x7038) "getExtension"
               [|((match x7037 with
                   | `L_s6_EXT_frag_depth ->
                       Ojs.string_to_js "EXT_frag_depth"))|])
    let (getExtension'''''' :
      'tags this ->
        extensionName:[ `L_s8_EXT_shader_texture_lod ] ->
          EXT_shader_texture_lod.t or_null)
      =
      fun (x7042 : 'tags this) ->
        fun ~extensionName:(x7041 : [ `L_s8_EXT_shader_texture_lod ]) ->
          or_null_of_js EXT_shader_texture_lod.t_of_js
            (Ojs.call (this_to_js Obj.magic x7042) "getExtension"
               [|((match x7041 with
                   | `L_s8_EXT_shader_texture_lod ->
                       Ojs.string_to_js "EXT_shader_texture_lod"))|])
    let (getExtension''''''' :
      'tags this -> extensionName:[ `L_s7_EXT_sRGB ] -> EXT_sRGB.t or_null) =
      fun (x7046 : 'tags this) ->
        fun ~extensionName:(x7045 : [ `L_s7_EXT_sRGB ]) ->
          or_null_of_js EXT_sRGB.t_of_js
            (Ojs.call (this_to_js Obj.magic x7046) "getExtension"
               [|((match x7045 with
                   | `L_s7_EXT_sRGB -> Ojs.string_to_js "EXT_sRGB"))|])
    let (getExtension'''''''' :
      'tags this ->
        extensionName:[ `L_s10_KHR_parallel_shader_compile ] ->
          KHR_parallel_shader_compile.t or_null)
      =
      fun (x7050 : 'tags this) ->
        fun ~extensionName:(x7049 : [ `L_s10_KHR_parallel_shader_compile ])
          ->
          or_null_of_js KHR_parallel_shader_compile.t_of_js
            (Ojs.call (this_to_js Obj.magic x7050) "getExtension"
               [|((match x7049 with
                   | `L_s10_KHR_parallel_shader_compile ->
                       Ojs.string_to_js "KHR_parallel_shader_compile"))|])
    let (getExtension''''''''' :
      'tags this ->
        extensionName:[ `L_s17_OES_vertex_array_object ] ->
          OES_vertex_array_object.t or_null)
      =
      fun (x7054 : 'tags this) ->
        fun ~extensionName:(x7053 : [ `L_s17_OES_vertex_array_object ]) ->
          or_null_of_js OES_vertex_array_object.t_of_js
            (Ojs.call (this_to_js Obj.magic x7054) "getExtension"
               [|((match x7053 with
                   | `L_s17_OES_vertex_array_object ->
                       Ojs.string_to_js "OES_vertex_array_object"))|])
    let (getExtension'''''''''' :
      'tags this ->
        extensionName:[ `L_s18_OVR_multiview2 ] -> OVR_multiview2.t or_null)
      =
      fun (x7058 : 'tags this) ->
        fun ~extensionName:(x7057 : [ `L_s18_OVR_multiview2 ]) ->
          or_null_of_js OVR_multiview2.t_of_js
            (Ojs.call (this_to_js Obj.magic x7058) "getExtension"
               [|((match x7057 with
                   | `L_s18_OVR_multiview2 ->
                       Ojs.string_to_js "OVR_multiview2"))|])
    let (getExtension''''''''''' :
      'tags this ->
        extensionName:[ `L_s19_WEBGL_color_buffer_float ] ->
          WEBGL_color_buffer_float.t or_null)
      =
      fun (x7062 : 'tags this) ->
        fun ~extensionName:(x7061 : [ `L_s19_WEBGL_color_buffer_float ]) ->
          or_null_of_js WEBGL_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7062) "getExtension"
               [|((match x7061 with
                   | `L_s19_WEBGL_color_buffer_float ->
                       Ojs.string_to_js "WEBGL_color_buffer_float"))|])
    let (getExtension'''''''''''' :
      'tags this ->
        extensionName:[ `L_s20_WEBGL_compressed_texture_astc ] ->
          WEBGL_compressed_texture_astc.t or_null)
      =
      fun (x7066 : 'tags this) ->
        fun ~extensionName:(x7065 : [ `L_s20_WEBGL_compressed_texture_astc ])
          ->
          or_null_of_js WEBGL_compressed_texture_astc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7066) "getExtension"
               [|((match x7065 with
                   | `L_s20_WEBGL_compressed_texture_astc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_astc"))|])
    let (getExtension''''''''''''' :
      'tags this ->
        extensionName:[ `L_s21_WEBGL_compressed_texture_etc ] ->
          WEBGL_compressed_texture_etc.t or_null)
      =
      fun (x7070 : 'tags this) ->
        fun ~extensionName:(x7069 : [ `L_s21_WEBGL_compressed_texture_etc ])
          ->
          or_null_of_js WEBGL_compressed_texture_etc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7070) "getExtension"
               [|((match x7069 with
                   | `L_s21_WEBGL_compressed_texture_etc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc"))|])
    let (getExtension'''''''''''''' :
      'tags this ->
        extensionName:[ `L_s22_WEBGL_compressed_texture_etc1 ] ->
          WEBGL_compressed_texture_etc1.t or_null)
      =
      fun (x7074 : 'tags this) ->
        fun ~extensionName:(x7073 : [ `L_s22_WEBGL_compressed_texture_etc1 ])
          ->
          or_null_of_js WEBGL_compressed_texture_etc1.t_of_js
            (Ojs.call (this_to_js Obj.magic x7074) "getExtension"
               [|((match x7073 with
                   | `L_s22_WEBGL_compressed_texture_etc1 ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc1"))|])
    let (getExtension''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s23_WEBGL_compressed_texture_pvrtc ] ->
          WEBGL_compressed_texture_pvrtc.t or_null)
      =
      fun (x7078 : 'tags this) ->
        fun
          ~extensionName:(x7077 : [ `L_s23_WEBGL_compressed_texture_pvrtc ])
          ->
          or_null_of_js WEBGL_compressed_texture_pvrtc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7078) "getExtension"
               [|((match x7077 with
                   | `L_s23_WEBGL_compressed_texture_pvrtc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_pvrtc"))|])
    let (getExtension'''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s25_WEBGL_compressed_texture_s3tc_srgb ] ->
          WEBGL_compressed_texture_s3tc_srgb.t or_null)
      =
      fun (x7082 : 'tags this) ->
        fun
          ~extensionName:(x7081 :
                           [ `L_s25_WEBGL_compressed_texture_s3tc_srgb ])
          ->
          or_null_of_js WEBGL_compressed_texture_s3tc_srgb.t_of_js
            (Ojs.call (this_to_js Obj.magic x7082) "getExtension"
               [|((match x7081 with
                   | `L_s25_WEBGL_compressed_texture_s3tc_srgb ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc_srgb"))|])
    let (getExtension''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s27_WEBGL_debug_shaders ] ->
          WEBGL_debug_shaders.t or_null)
      =
      fun (x7086 : 'tags this) ->
        fun ~extensionName:(x7085 : [ `L_s27_WEBGL_debug_shaders ]) ->
          or_null_of_js WEBGL_debug_shaders.t_of_js
            (Ojs.call (this_to_js Obj.magic x7086) "getExtension"
               [|((match x7085 with
                   | `L_s27_WEBGL_debug_shaders ->
                       Ojs.string_to_js "WEBGL_debug_shaders"))|])
    let (getExtension'''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s29_WEBGL_draw_buffers ] ->
          WEBGL_draw_buffers.t or_null)
      =
      fun (x7090 : 'tags this) ->
        fun ~extensionName:(x7089 : [ `L_s29_WEBGL_draw_buffers ]) ->
          or_null_of_js WEBGL_draw_buffers.t_of_js
            (Ojs.call (this_to_js Obj.magic x7090) "getExtension"
               [|((match x7089 with
                   | `L_s29_WEBGL_draw_buffers ->
                       Ojs.string_to_js "WEBGL_draw_buffers"))|])
    let (getExtension''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s30_WEBGL_lose_context ] ->
          WEBGL_lose_context.t or_null)
      =
      fun (x7094 : 'tags this) ->
        fun ~extensionName:(x7093 : [ `L_s30_WEBGL_lose_context ]) ->
          or_null_of_js WEBGL_lose_context.t_of_js
            (Ojs.call (this_to_js Obj.magic x7094) "getExtension"
               [|((match x7093 with
                   | `L_s30_WEBGL_lose_context ->
                       Ojs.string_to_js "WEBGL_lose_context"))|])
    let (getExtension'''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s28_WEBGL_depth_texture ] ->
          WEBGL_depth_texture.t or_null)
      =
      fun (x7098 : 'tags this) ->
        fun ~extensionName:(x7097 : [ `L_s28_WEBGL_depth_texture ]) ->
          or_null_of_js WEBGL_depth_texture.t_of_js
            (Ojs.call (this_to_js Obj.magic x7098) "getExtension"
               [|((match x7097 with
                   | `L_s28_WEBGL_depth_texture ->
                       Ojs.string_to_js "WEBGL_depth_texture"))|])
    let (getExtension''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s26_WEBGL_debug_renderer_info ] ->
          WEBGL_debug_renderer_info.t or_null)
      =
      fun (x7102 : 'tags this) ->
        fun ~extensionName:(x7101 : [ `L_s26_WEBGL_debug_renderer_info ]) ->
          or_null_of_js WEBGL_debug_renderer_info.t_of_js
            (Ojs.call (this_to_js Obj.magic x7102) "getExtension"
               [|((match x7101 with
                   | `L_s26_WEBGL_debug_renderer_info ->
                       Ojs.string_to_js "WEBGL_debug_renderer_info"))|])
    let (getExtension'''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s24_WEBGL_compressed_texture_s3tc ] ->
          WEBGL_compressed_texture_s3tc.t or_null)
      =
      fun (x7106 : 'tags this) ->
        fun ~extensionName:(x7105 : [ `L_s24_WEBGL_compressed_texture_s3tc ])
          ->
          or_null_of_js WEBGL_compressed_texture_s3tc.t_of_js
            (Ojs.call (this_to_js Obj.magic x7106) "getExtension"
               [|((match x7105 with
                   | `L_s24_WEBGL_compressed_texture_s3tc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc"))|])
    let (getExtension''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s16_OES_texture_half_float_linear ] ->
          OES_texture_half_float_linear.t or_null)
      =
      fun (x7110 : 'tags this) ->
        fun ~extensionName:(x7109 : [ `L_s16_OES_texture_half_float_linear ])
          ->
          or_null_of_js OES_texture_half_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7110) "getExtension"
               [|((match x7109 with
                   | `L_s16_OES_texture_half_float_linear ->
                       Ojs.string_to_js "OES_texture_half_float_linear"))|])
    let (getExtension'''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s15_OES_texture_half_float ] ->
          OES_texture_half_float.t or_null)
      =
      fun (x7114 : 'tags this) ->
        fun ~extensionName:(x7113 : [ `L_s15_OES_texture_half_float ]) ->
          or_null_of_js OES_texture_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7114) "getExtension"
               [|((match x7113 with
                   | `L_s15_OES_texture_half_float ->
                       Ojs.string_to_js "OES_texture_half_float"))|])
    let (getExtension''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s14_OES_texture_float_linear ] ->
          OES_texture_float_linear.t or_null)
      =
      fun (x7118 : 'tags this) ->
        fun ~extensionName:(x7117 : [ `L_s14_OES_texture_float_linear ]) ->
          or_null_of_js OES_texture_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x7118) "getExtension"
               [|((match x7117 with
                   | `L_s14_OES_texture_float_linear ->
                       Ojs.string_to_js "OES_texture_float_linear"))|])
    let (getExtension'''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s13_OES_texture_float ] ->
          OES_texture_float.t or_null)
      =
      fun (x7122 : 'tags this) ->
        fun ~extensionName:(x7121 : [ `L_s13_OES_texture_float ]) ->
          or_null_of_js OES_texture_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x7122) "getExtension"
               [|((match x7121 with
                   | `L_s13_OES_texture_float ->
                       Ojs.string_to_js "OES_texture_float"))|])
    let (getExtension''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s12_OES_standard_derivatives ] ->
          OES_standard_derivatives.t or_null)
      =
      fun (x7126 : 'tags this) ->
        fun ~extensionName:(x7125 : [ `L_s12_OES_standard_derivatives ]) ->
          or_null_of_js OES_standard_derivatives.t_of_js
            (Ojs.call (this_to_js Obj.magic x7126) "getExtension"
               [|((match x7125 with
                   | `L_s12_OES_standard_derivatives ->
                       Ojs.string_to_js "OES_standard_derivatives"))|])
    let (getExtension'''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s11_OES_element_index_uint ] ->
          OES_element_index_uint.t or_null)
      =
      fun (x7130 : 'tags this) ->
        fun ~extensionName:(x7129 : [ `L_s11_OES_element_index_uint ]) ->
          or_null_of_js OES_element_index_uint.t_of_js
            (Ojs.call (this_to_js Obj.magic x7130) "getExtension"
               [|((match x7129 with
                   | `L_s11_OES_element_index_uint ->
                       Ojs.string_to_js "OES_element_index_uint"))|])
    let (getExtension''''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s1_ANGLE_instanced_arrays ] ->
          ANGLE_instanced_arrays.t or_null)
      =
      fun (x7134 : 'tags this) ->
        fun ~extensionName:(x7133 : [ `L_s1_ANGLE_instanced_arrays ]) ->
          or_null_of_js ANGLE_instanced_arrays.t_of_js
            (Ojs.call (this_to_js Obj.magic x7134) "getExtension"
               [|((match x7133 with
                   | `L_s1_ANGLE_instanced_arrays ->
                       Ojs.string_to_js "ANGLE_instanced_arrays"))|])
    let (getExtension'''''''''''''''''''''''''''''' :
      'tags this -> name:string -> any) =
      fun (x7138 : 'tags this) ->
        fun ~name:(x7137 : string) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7138) "getExtension"
               [|(Ojs.string_to_js x7137)|])
    let (getFramebufferAttachmentParameter :
      'tags this ->
        target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x7143 : 'tags this) ->
        fun ~target:(x7140 : GLenum.t) ->
          fun ~attachment:(x7141 : GLenum.t) ->
            fun ~pname:(x7142 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x7143)
                   "getFramebufferAttachmentParameter"
                   [|(GLenum.t_to_js x7140);(GLenum.t_to_js x7141);(GLenum.t_to_js
                                                                    x7142)|])
    let (getParameter : 'tags this -> pname:GLenum.t -> any) =
      fun (x7146 : 'tags this) ->
        fun ~pname:(x7145 : GLenum.t) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x7146) "getParameter"
               [|(GLenum.t_to_js x7145)|])
    let (getProgramInfoLog :
      'tags this -> program:WebGLProgram.t -> string or_null) =
      fun (x7149 : 'tags this) ->
        fun ~program:(x7148 : WebGLProgram.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7149) "getProgramInfoLog"
               [|(WebGLProgram.t_to_js x7148)|])
    let (getProgramParameter :
      'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any) =
      fun (x7154 : 'tags this) ->
        fun ~program:(x7152 : WebGLProgram.t) ->
          fun ~pname:(x7153 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7154) "getProgramParameter"
                 [|(WebGLProgram.t_to_js x7152);(GLenum.t_to_js x7153)|])
    let (getRenderbufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7158 : 'tags this) ->
        fun ~target:(x7156 : GLenum.t) ->
          fun ~pname:(x7157 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7158)
                 "getRenderbufferParameter"
                 [|(GLenum.t_to_js x7156);(GLenum.t_to_js x7157)|])
    let (getShaderInfoLog :
      'tags this -> shader:WebGLShader.t -> string or_null) =
      fun (x7161 : 'tags this) ->
        fun ~shader:(x7160 : WebGLShader.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7161) "getShaderInfoLog"
               [|(WebGLShader.t_to_js x7160)|])
    let (getShaderParameter :
      'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any) =
      fun (x7166 : 'tags this) ->
        fun ~shader:(x7164 : WebGLShader.t) ->
          fun ~pname:(x7165 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7166) "getShaderParameter"
                 [|(WebGLShader.t_to_js x7164);(GLenum.t_to_js x7165)|])
    let (getShaderPrecisionFormat :
      'tags this ->
        shadertype:GLenum.t ->
          precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t or_null)
      =
      fun (x7170 : 'tags this) ->
        fun ~shadertype:(x7168 : GLenum.t) ->
          fun ~precisiontype:(x7169 : GLenum.t) ->
            or_null_of_js WebGLShaderPrecisionFormat.t_of_js
              (Ojs.call (this_to_js Obj.magic x7170)
                 "getShaderPrecisionFormat"
                 [|(GLenum.t_to_js x7168);(GLenum.t_to_js x7169)|])
    let (getShaderSource :
      'tags this -> shader:WebGLShader.t -> string or_null) =
      fun (x7174 : 'tags this) ->
        fun ~shader:(x7173 : WebGLShader.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x7174) "getShaderSource"
               [|(WebGLShader.t_to_js x7173)|])
    let (getSupportedExtensions : 'tags this -> string list or_null) =
      fun (x7177 : 'tags this) ->
        or_null_of_js
          (fun (x7179 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x7179)
          (Ojs.call (this_to_js Obj.magic x7177) "getSupportedExtensions"
             [||])
    let (getTexParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x7183 : 'tags this) ->
        fun ~target:(x7181 : GLenum.t) ->
          fun ~pname:(x7182 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7183) "getTexParameter"
                 [|(GLenum.t_to_js x7181);(GLenum.t_to_js x7182)|])
    let (getUniform :
      'tags this ->
        program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any)
      =
      fun (x7187 : 'tags this) ->
        fun ~program:(x7185 : WebGLProgram.t) ->
          fun ~location:(x7186 : WebGLUniformLocation.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7187) "getUniform"
                 [|(WebGLProgram.t_to_js x7185);(WebGLUniformLocation.t_to_js
                                                   x7186)|])
    let (getUniformLocation :
      'tags this ->
        program:WebGLProgram.t ->
          name:string -> WebGLUniformLocation.t or_null)
      =
      fun (x7191 : 'tags this) ->
        fun ~program:(x7189 : WebGLProgram.t) ->
          fun ~name:(x7190 : string) ->
            or_null_of_js WebGLUniformLocation.t_of_js
              (Ojs.call (this_to_js Obj.magic x7191) "getUniformLocation"
                 [|(WebGLProgram.t_to_js x7189);(Ojs.string_to_js x7190)|])
    let (getVertexAttrib :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> any) =
      fun (x7196 : 'tags this) ->
        fun ~index:(x7194 : GLuint.t) ->
          fun ~pname:(x7195 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x7196) "getVertexAttrib"
                 [|(GLuint.t_to_js x7194);(GLenum.t_to_js x7195)|])
    let (getVertexAttribOffset :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t) =
      fun (x7200 : 'tags this) ->
        fun ~index:(x7198 : GLuint.t) ->
          fun ~pname:(x7199 : GLenum.t) ->
            GLintptr.t_of_js
              (Ojs.call (this_to_js Obj.magic x7200) "getVertexAttribOffset"
                 [|(GLuint.t_to_js x7198);(GLenum.t_to_js x7199)|])
    let (hint : 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit) =
      fun (x7204 : 'tags this) ->
        fun ~target:(x7202 : GLenum.t) ->
          fun ~mode:(x7203 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7204) "hint"
                 [|(GLenum.t_to_js x7202);(GLenum.t_to_js x7203)|])
    let (isBuffer :
      'tags this -> buffer:WebGLBuffer.t or_null -> GLboolean.t) =
      fun (x7208 : 'tags this) ->
        fun ~buffer:(x7206 : WebGLBuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7208) "isBuffer"
               [|(or_null_to_js WebGLBuffer.t_to_js x7206)|])
    let (isContextLost : 'tags this -> bool) =
      fun (x7210 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x7210) "isContextLost" [||])
    let (isEnabled : 'tags this -> cap:GLenum.t -> GLboolean.t) =
      fun (x7213 : 'tags this) ->
        fun ~cap:(x7212 : GLenum.t) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7213) "isEnabled"
               [|(GLenum.t_to_js x7212)|])
    let (isFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t or_null -> GLboolean.t) =
      fun (x7217 : 'tags this) ->
        fun ~framebuffer:(x7215 : WebGLFramebuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7217) "isFramebuffer"
               [|(or_null_to_js WebGLFramebuffer.t_to_js x7215)|])
    let (isProgram :
      'tags this -> program:WebGLProgram.t or_null -> GLboolean.t) =
      fun (x7221 : 'tags this) ->
        fun ~program:(x7219 : WebGLProgram.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7221) "isProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x7219)|])
    let (isRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t or_null -> GLboolean.t)
      =
      fun (x7225 : 'tags this) ->
        fun ~renderbuffer:(x7223 : WebGLRenderbuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7225) "isRenderbuffer"
               [|(or_null_to_js WebGLRenderbuffer.t_to_js x7223)|])
    let (isShader :
      'tags this -> shader:WebGLShader.t or_null -> GLboolean.t) =
      fun (x7229 : 'tags this) ->
        fun ~shader:(x7227 : WebGLShader.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7229) "isShader"
               [|(or_null_to_js WebGLShader.t_to_js x7227)|])
    let (isTexture :
      'tags this -> texture:WebGLTexture.t or_null -> GLboolean.t) =
      fun (x7233 : 'tags this) ->
        fun ~texture:(x7231 : WebGLTexture.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x7233) "isTexture"
               [|(or_null_to_js WebGLTexture.t_to_js x7231)|])
    let (lineWidth : 'tags this -> width:GLfloat.t -> unit) =
      fun (x7236 : 'tags this) ->
        fun ~width:(x7235 : GLfloat.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7236) "lineWidth"
               [|(GLfloat.t_to_js x7235)|])
    let (linkProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7239 : 'tags this) ->
        fun ~program:(x7238 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7239) "linkProgram"
               [|(WebGLProgram.t_to_js x7238)|])
    let (pixelStorei :
      'tags this ->
        pname:GLenum.t -> param:(GLboolean.t, GLint.t) union2 -> unit)
      =
      fun (x7245 : 'tags this) ->
        fun ~pname:(x7241 : GLenum.t) ->
          fun ~param:(x7242 : (GLboolean.t, GLint.t) union2) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7245) "pixelStorei"
                 [|(GLenum.t_to_js x7241);(union2_to_js GLboolean.t_to_js
                                             GLint.t_to_js x7242)|])
    let (polygonOffset :
      'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit) =
      fun (x7249 : 'tags this) ->
        fun ~factor:(x7247 : GLfloat.t) ->
          fun ~units:(x7248 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7249) "polygonOffset"
                 [|(GLfloat.t_to_js x7247);(GLfloat.t_to_js x7248)|])
    let (renderbufferStorage :
      'tags this ->
        target:GLenum.t ->
          internalformat:GLenum.t ->
            width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7255 : 'tags this) ->
        fun ~target:(x7251 : GLenum.t) ->
          fun ~internalformat:(x7252 : GLenum.t) ->
            fun ~width:(x7253 : GLsizei.t) ->
              fun ~height:(x7254 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7255)
                     "renderbufferStorage"
                     [|(GLenum.t_to_js x7251);(GLenum.t_to_js x7252);(
                       GLsizei.t_to_js x7253);(GLsizei.t_to_js x7254)|])
    let (sampleCoverage :
      'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit) =
      fun (x7259 : 'tags this) ->
        fun ~value:(x7257 : GLclampf.t) ->
          fun ~invert:(x7258 : GLboolean.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7259) "sampleCoverage"
                 [|(GLclampf.t_to_js x7257);(GLboolean.t_to_js x7258)|])
    let (scissor :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7265 : 'tags this) ->
        fun ~x:(x7261 : GLint.t) ->
          fun ~y:(x7262 : GLint.t) ->
            fun ~width:(x7263 : GLsizei.t) ->
              fun ~height:(x7264 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7265) "scissor"
                     [|(GLint.t_to_js x7261);(GLint.t_to_js x7262);(GLsizei.t_to_js
                                                                    x7263);(
                       GLsizei.t_to_js x7264)|])
    let (shaderSource :
      'tags this -> shader:WebGLShader.t -> source:string -> unit) =
      fun (x7269 : 'tags this) ->
        fun ~shader:(x7267 : WebGLShader.t) ->
          fun ~source:(x7268 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7269) "shaderSource"
                 [|(WebGLShader.t_to_js x7267);(Ojs.string_to_js x7268)|])
    let (stencilFunc :
      'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit) =
      fun (x7274 : 'tags this) ->
        fun ~func:(x7271 : GLenum.t) ->
          fun ~ref:(x7272 : GLint.t) ->
            fun ~mask:(x7273 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7274) "stencilFunc"
                   [|(GLenum.t_to_js x7271);(GLint.t_to_js x7272);(GLuint.t_to_js
                                                                    x7273)|])
    let (stencilFuncSeparate :
      'tags this ->
        face:GLenum.t ->
          func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit)
      =
      fun (x7280 : 'tags this) ->
        fun ~face:(x7276 : GLenum.t) ->
          fun ~func:(x7277 : GLenum.t) ->
            fun ~ref:(x7278 : GLint.t) ->
              fun ~mask:(x7279 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7280)
                     "stencilFuncSeparate"
                     [|(GLenum.t_to_js x7276);(GLenum.t_to_js x7277);(
                       GLint.t_to_js x7278);(GLuint.t_to_js x7279)|])
    let (stencilMask : 'tags this -> mask:GLuint.t -> unit) =
      fun (x7283 : 'tags this) ->
        fun ~mask:(x7282 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7283) "stencilMask"
               [|(GLuint.t_to_js x7282)|])
    let (stencilMaskSeparate :
      'tags this -> face:GLenum.t -> mask:GLuint.t -> unit) =
      fun (x7287 : 'tags this) ->
        fun ~face:(x7285 : GLenum.t) ->
          fun ~mask:(x7286 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7287) "stencilMaskSeparate"
                 [|(GLenum.t_to_js x7285);(GLuint.t_to_js x7286)|])
    let (stencilOp :
      'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7292 : 'tags this) ->
        fun ~fail:(x7289 : GLenum.t) ->
          fun ~zfail:(x7290 : GLenum.t) ->
            fun ~zpass:(x7291 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7292) "stencilOp"
                   [|(GLenum.t_to_js x7289);(GLenum.t_to_js x7290);(GLenum.t_to_js
                                                                    x7291)|])
    let (stencilOpSeparate :
      'tags this ->
        face:GLenum.t ->
          fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x7298 : 'tags this) ->
        fun ~face:(x7294 : GLenum.t) ->
          fun ~fail:(x7295 : GLenum.t) ->
            fun ~zfail:(x7296 : GLenum.t) ->
              fun ~zpass:(x7297 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7298) "stencilOpSeparate"
                     [|(GLenum.t_to_js x7294);(GLenum.t_to_js x7295);(
                       GLenum.t_to_js x7296);(GLenum.t_to_js x7297)|])
    let (texParameterf :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x7303 : 'tags this) ->
        fun ~target:(x7300 : GLenum.t) ->
          fun ~pname:(x7301 : GLenum.t) ->
            fun ~param:(x7302 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7303) "texParameterf"
                   [|(GLenum.t_to_js x7300);(GLenum.t_to_js x7301);(GLfloat.t_to_js
                                                                    x7302)|])
    let (texParameteri :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x7308 : 'tags this) ->
        fun ~target:(x7305 : GLenum.t) ->
          fun ~pname:(x7306 : GLenum.t) ->
            fun ~param:(x7307 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7308) "texParameteri"
                   [|(GLenum.t_to_js x7305);(GLenum.t_to_js x7306);(GLint.t_to_js
                                                                    x7307)|])
    let (uniform1f :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> x:GLfloat.t -> unit)
      =
      fun (x7313 : 'tags this) ->
        fun ~location:(x7310 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x7312 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7313) "uniform1f"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x7310);(
                   GLfloat.t_to_js x7312)|])
    let (uniform1i :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> x:GLint.t -> unit)
      =
      fun (x7318 : 'tags this) ->
        fun ~location:(x7315 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x7317 : GLint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7318) "uniform1i"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x7315);(
                   GLint.t_to_js x7317)|])
    let (uniform2f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> unit)
      =
      fun (x7324 : 'tags this) ->
        fun ~location:(x7320 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x7322 : GLfloat.t) ->
            fun ~y:(x7323 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7324) "uniform2f"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x7320);(
                     GLfloat.t_to_js x7322);(GLfloat.t_to_js x7323)|])
    let (uniform2i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> unit)
      =
      fun (x7330 : 'tags this) ->
        fun ~location:(x7326 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x7328 : GLint.t) ->
            fun ~y:(x7329 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7330) "uniform2i"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x7326);(
                     GLint.t_to_js x7328);(GLint.t_to_js x7329)|])
    let (uniform3f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7337 : 'tags this) ->
        fun ~location:(x7332 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x7334 : GLfloat.t) ->
            fun ~y:(x7335 : GLfloat.t) ->
              fun ~z:(x7336 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7337) "uniform3f"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x7332);(
                       GLfloat.t_to_js x7334);(GLfloat.t_to_js x7335);(
                       GLfloat.t_to_js x7336)|])
    let (uniform3i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> unit)
      =
      fun (x7344 : 'tags this) ->
        fun ~location:(x7339 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x7341 : GLint.t) ->
            fun ~y:(x7342 : GLint.t) ->
              fun ~z:(x7343 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7344) "uniform3i"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x7339);(
                       GLint.t_to_js x7341);(GLint.t_to_js x7342);(GLint.t_to_js
                                                                    x7343)|])
    let (uniform4f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7352 : 'tags this) ->
        fun ~location:(x7346 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x7348 : GLfloat.t) ->
            fun ~y:(x7349 : GLfloat.t) ->
              fun ~z:(x7350 : GLfloat.t) ->
                fun ~w:(x7351 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7352) "uniform4f"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x7346);(
                         GLfloat.t_to_js x7348);(GLfloat.t_to_js x7349);(
                         GLfloat.t_to_js x7350);(GLfloat.t_to_js x7351)|])
    let (uniform4i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x7360 : 'tags this) ->
        fun ~location:(x7354 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x7356 : GLint.t) ->
            fun ~y:(x7357 : GLint.t) ->
              fun ~z:(x7358 : GLint.t) ->
                fun ~w:(x7359 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7360) "uniform4i"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x7354);(
                         GLint.t_to_js x7356);(GLint.t_to_js x7357);(
                         GLint.t_to_js x7358);(GLint.t_to_js x7359)|])
    let (useProgram : 'tags this -> program:WebGLProgram.t or_null -> unit) =
      fun (x7364 : 'tags this) ->
        fun ~program:(x7362 : WebGLProgram.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7364) "useProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x7362)|])
    let (validateProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x7367 : 'tags this) ->
        fun ~program:(x7366 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x7367) "validateProgram"
               [|(WebGLProgram.t_to_js x7366)|])
    let (vertexAttrib1f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> unit) =
      fun (x7371 : 'tags this) ->
        fun ~index:(x7369 : GLuint.t) ->
          fun ~x:(x7370 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7371) "vertexAttrib1f"
                 [|(GLuint.t_to_js x7369);(GLfloat.t_to_js x7370)|])
    let (vertexAttrib1fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7375 : 'tags this) ->
        fun ~index:(x7373 : GLuint.t) ->
          fun ~values:(x7374 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7375) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x7373);(Float32List.t_to_js x7374)|])
    let (vertexAttrib2f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit) =
      fun (x7380 : 'tags this) ->
        fun ~index:(x7377 : GLuint.t) ->
          fun ~x:(x7378 : GLfloat.t) ->
            fun ~y:(x7379 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7380) "vertexAttrib2f"
                   [|(GLuint.t_to_js x7377);(GLfloat.t_to_js x7378);(
                     GLfloat.t_to_js x7379)|])
    let (vertexAttrib2fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7384 : 'tags this) ->
        fun ~index:(x7382 : GLuint.t) ->
          fun ~values:(x7383 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7384) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x7382);(Float32List.t_to_js x7383)|])
    let (vertexAttrib3f :
      'tags this ->
        index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x7390 : 'tags this) ->
        fun ~index:(x7386 : GLuint.t) ->
          fun ~x:(x7387 : GLfloat.t) ->
            fun ~y:(x7388 : GLfloat.t) ->
              fun ~z:(x7389 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7390) "vertexAttrib3f"
                     [|(GLuint.t_to_js x7386);(GLfloat.t_to_js x7387);(
                       GLfloat.t_to_js x7388);(GLfloat.t_to_js x7389)|])
    let (vertexAttrib3fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7394 : 'tags this) ->
        fun ~index:(x7392 : GLuint.t) ->
          fun ~values:(x7393 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7394) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x7392);(Float32List.t_to_js x7393)|])
    let (vertexAttrib4f :
      'tags this ->
        index:GLuint.t ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x7401 : 'tags this) ->
        fun ~index:(x7396 : GLuint.t) ->
          fun ~x:(x7397 : GLfloat.t) ->
            fun ~y:(x7398 : GLfloat.t) ->
              fun ~z:(x7399 : GLfloat.t) ->
                fun ~w:(x7400 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x7401) "vertexAttrib4f"
                       [|(GLuint.t_to_js x7396);(GLfloat.t_to_js x7397);(
                         GLfloat.t_to_js x7398);(GLfloat.t_to_js x7399);(
                         GLfloat.t_to_js x7400)|])
    let (vertexAttrib4fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x7405 : 'tags this) ->
        fun ~index:(x7403 : GLuint.t) ->
          fun ~values:(x7404 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7405) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x7403);(Float32List.t_to_js x7404)|])
    let (vertexAttribPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t ->
              normalized:GLboolean.t ->
                stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x7413 : 'tags this) ->
        fun ~index:(x7407 : GLuint.t) ->
          fun ~size:(x7408 : GLint.t) ->
            fun ~type_:(x7409 : GLenum.t) ->
              fun ~normalized:(x7410 : GLboolean.t) ->
                fun ~stride:(x7411 : GLsizei.t) ->
                  fun ~offset:(x7412 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x7413)
                         "vertexAttribPointer"
                         [|(GLuint.t_to_js x7407);(GLint.t_to_js x7408);(
                           GLenum.t_to_js x7409);(GLboolean.t_to_js x7410);(
                           GLsizei.t_to_js x7411);(GLintptr.t_to_js x7412)|])
    let (viewport :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x7419 : 'tags this) ->
        fun ~x:(x7415 : GLint.t) ->
          fun ~y:(x7416 : GLint.t) ->
            fun ~width:(x7417 : GLsizei.t) ->
              fun ~height:(x7418 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x7419) "viewport"
                     [|(GLint.t_to_js x7415);(GLint.t_to_js x7416);(GLsizei.t_to_js
                                                                    x7417);(
                       GLsizei.t_to_js x7418)|])
    let (get_ACTIVE_ATTRIBUTES : 'tags this -> GLenum.t) =
      fun (x7421 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7421)
             "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : 'tags this -> GLenum.t) =
      fun (x7423 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7423) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x7425 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7425) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : 'tags this -> GLenum.t) =
      fun (x7427 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7427)
             "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : 'tags this -> GLenum.t) =
      fun (x7429 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7429)
             "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : 'tags this -> GLenum.t) =
      fun (x7431 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7431) "ALPHA")
    let (get_ALPHA_BITS : 'tags this -> GLenum.t) =
      fun (x7433 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7433) "ALPHA_BITS")
    let (get_ALWAYS : 'tags this -> GLenum.t) =
      fun (x7435 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7435) "ALWAYS")
    let (get_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x7437 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7437) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7439 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7439)
             "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : 'tags this -> GLenum.t) =
      fun (x7441 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7441) "ATTACHED_SHADERS")
    let (get_BACK : 'tags this -> GLenum.t) =
      fun (x7443 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7443) "BACK")
    let (get_BLEND : 'tags this -> GLenum.t) =
      fun (x7445 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7445) "BLEND")
    let (get_BLEND_COLOR : 'tags this -> GLenum.t) =
      fun (x7447 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7447) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7449 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7449) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : 'tags this -> GLenum.t) =
      fun (x7451 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7451) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : 'tags this -> GLenum.t) =
      fun (x7453 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7453) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : 'tags this -> GLenum.t) =
      fun (x7455 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7455)
             "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : 'tags this -> GLenum.t) =
      fun (x7457 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7457)
             "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7459 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7459) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : 'tags this -> GLenum.t) =
      fun (x7461 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7461) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : 'tags this -> GLenum.t) =
      fun (x7463 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7463) "BLUE_BITS")
    let (get_BOOL : 'tags this -> GLenum.t) =
      fun (x7465 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7465) "BOOL")
    let (get_BOOL_VEC2 : 'tags this -> GLenum.t) =
      fun (x7467 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7467) "BOOL_VEC2")
    let (get_BOOL_VEC3 : 'tags this -> GLenum.t) =
      fun (x7469 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7469) "BOOL_VEC3")
    let (get_BOOL_VEC4 : 'tags this -> GLenum.t) =
      fun (x7471 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7471) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : 'tags this -> GLenum.t) =
      fun (x7473 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7473)
             "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x7475 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7475) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : 'tags this -> GLenum.t) =
      fun (x7477 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7477) "BUFFER_USAGE")
    let (get_BYTE : 'tags this -> GLenum.t) =
      fun (x7479 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7479) "BYTE")
    let (get_CCW : 'tags this -> GLenum.t) =
      fun (x7481 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7481) "CCW")
    let (get_CLAMP_TO_EDGE : 'tags this -> GLenum.t) =
      fun (x7483 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7483) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : 'tags this -> GLenum.t) =
      fun (x7485 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7485)
             "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7487 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7487) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7489 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7489)
             "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7491 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7491) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : 'tags this -> GLenum.t) =
      fun (x7493 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7493) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : 'tags this -> GLenum.t) =
      fun (x7495 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7495)
             "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x7497 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7497) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x7499 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7499) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : 'tags this -> GLenum.t) =
      fun (x7501 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7501)
             "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : 'tags this -> GLenum.t) =
      fun (x7503 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7503) "CULL_FACE")
    let (get_CULL_FACE_MODE : 'tags this -> GLenum.t) =
      fun (x7505 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7505) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : 'tags this -> GLenum.t) =
      fun (x7507 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7507) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : 'tags this -> GLenum.t) =
      fun (x7509 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7509)
             "CURRENT_VERTEX_ATTRIB")
    let (get_CW : 'tags this -> GLenum.t) =
      fun (x7511 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x7511) "CW")
    let (get_DECR : 'tags this -> GLenum.t) =
      fun (x7513 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7513) "DECR")
    let (get_DECR_WRAP : 'tags this -> GLenum.t) =
      fun (x7515 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7515) "DECR_WRAP")
    let (get_DELETE_STATUS : 'tags this -> GLenum.t) =
      fun (x7517 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7517) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7519 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7519) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : 'tags this -> GLenum.t) =
      fun (x7521 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7521) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7523 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7523) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7525 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7525)
             "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : 'tags this -> GLenum.t) =
      fun (x7527 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7527) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : 'tags this -> GLenum.t) =
      fun (x7529 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7529)
             "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : 'tags this -> GLenum.t) =
      fun (x7531 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7531) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : 'tags this -> GLenum.t) =
      fun (x7533 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7533) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : 'tags this -> GLenum.t) =
      fun (x7535 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7535) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7537 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7537)
             "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : 'tags this -> GLenum.t) =
      fun (x7539 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7539) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7541 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7541) "DEPTH_WRITEMASK")
    let (get_DITHER : 'tags this -> GLenum.t) =
      fun (x7543 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7543) "DITHER")
    let (get_DONT_CARE : 'tags this -> GLenum.t) =
      fun (x7545 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7545) "DONT_CARE")
    let (get_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7547 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7547) "DST_ALPHA")
    let (get_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x7549 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7549) "DST_COLOR")
    let (get_DYNAMIC_DRAW : 'tags this -> GLenum.t) =
      fun (x7551 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7551) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x7553 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7553)
             "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7555 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7555)
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : 'tags this -> GLenum.t) =
      fun (x7557 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7557) "EQUAL")
    let (get_FASTEST : 'tags this -> GLenum.t) =
      fun (x7559 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7559) "FASTEST")
    let (get_FLOAT : 'tags this -> GLenum.t) =
      fun (x7561 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7561) "FLOAT")
    let (get_FLOAT_MAT2 : 'tags this -> GLenum.t) =
      fun (x7563 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7563) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : 'tags this -> GLenum.t) =
      fun (x7565 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7565) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : 'tags this -> GLenum.t) =
      fun (x7567 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7567) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : 'tags this -> GLenum.t) =
      fun (x7569 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7569) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : 'tags this -> GLenum.t) =
      fun (x7571 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7571) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : 'tags this -> GLenum.t) =
      fun (x7573 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7573) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : 'tags this -> GLenum.t) =
      fun (x7575 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7575) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x7577 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7577) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : 'tags this -> GLenum.t) =
      fun (x7579 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7579)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x7581 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7581)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :
      'tags this -> GLenum.t) =
      fun (x7583 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7583)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : 'tags this -> GLenum.t) =
      fun (x7585 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7585)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7587 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7587)
             "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : 'tags this -> GLenum.t) =
      fun (x7589 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7589)
             "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7591 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7591)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : 'tags this -> GLenum.t) =
      fun (x7593 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7593)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
      'tags this -> GLenum.t) =
      fun (x7595 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7595)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : 'tags this -> GLenum.t) =
      fun (x7597 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7597)
             "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : 'tags this -> GLenum.t) =
      fun (x7599 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7599) "FRONT")
    let (get_FRONT_AND_BACK : 'tags this -> GLenum.t) =
      fun (x7601 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7601) "FRONT_AND_BACK")
    let (get_FRONT_FACE : 'tags this -> GLenum.t) =
      fun (x7603 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7603) "FRONT_FACE")
    let (get_FUNC_ADD : 'tags this -> GLenum.t) =
      fun (x7605 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7605) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x7607 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7607)
             "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x7609 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7609) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : 'tags this -> GLenum.t) =
      fun (x7611 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7611)
             "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : 'tags this -> GLenum.t) =
      fun (x7613 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7613) "GEQUAL")
    let (get_GREATER : 'tags this -> GLenum.t) =
      fun (x7615 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7615) "GREATER")
    let (get_GREEN_BITS : 'tags this -> GLenum.t) =
      fun (x7617 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7617) "GREEN_BITS")
    let (get_HIGH_FLOAT : 'tags this -> GLenum.t) =
      fun (x7619 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7619) "HIGH_FLOAT")
    let (get_HIGH_INT : 'tags this -> GLenum.t) =
      fun (x7621 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7621) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : 'tags this -> GLenum.t) =
      fun (x7623 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7623)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : 'tags this -> GLenum.t) =
      fun (x7625 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7625)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : 'tags this -> GLenum.t) =
      fun (x7627 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7627) "INCR")
    let (get_INCR_WRAP : 'tags this -> GLenum.t) =
      fun (x7629 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7629) "INCR_WRAP")
    let (get_INT : 'tags this -> GLenum.t) =
      fun (x7631 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7631) "INT")
    let (get_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x7633 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7633) "INT_VEC2")
    let (get_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x7635 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7635) "INT_VEC3")
    let (get_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x7637 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7637) "INT_VEC4")
    let (get_INVALID_ENUM : 'tags this -> GLenum.t) =
      fun (x7639 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7639) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : 'tags this -> GLenum.t) =
      fun (x7641 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7641)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : 'tags this -> GLenum.t) =
      fun (x7643 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7643)
             "INVALID_OPERATION")
    let (get_INVALID_VALUE : 'tags this -> GLenum.t) =
      fun (x7645 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7645) "INVALID_VALUE")
    let (get_INVERT : 'tags this -> GLenum.t) =
      fun (x7647 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7647) "INVERT")
    let (get_KEEP : 'tags this -> GLenum.t) =
      fun (x7649 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7649) "KEEP")
    let (get_LEQUAL : 'tags this -> GLenum.t) =
      fun (x7651 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7651) "LEQUAL")
    let (get_LESS : 'tags this -> GLenum.t) =
      fun (x7653 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7653) "LESS")
    let (get_LINEAR : 'tags this -> GLenum.t) =
      fun (x7655 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7655) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x7657 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7657)
             "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x7659 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7659)
             "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : 'tags this -> GLenum.t) =
      fun (x7661 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7661) "LINES")
    let (get_LINE_LOOP : 'tags this -> GLenum.t) =
      fun (x7663 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7663) "LINE_LOOP")
    let (get_LINE_STRIP : 'tags this -> GLenum.t) =
      fun (x7665 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7665) "LINE_STRIP")
    let (get_LINE_WIDTH : 'tags this -> GLenum.t) =
      fun (x7667 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7667) "LINE_WIDTH")
    let (get_LINK_STATUS : 'tags this -> GLenum.t) =
      fun (x7669 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7669) "LINK_STATUS")
    let (get_LOW_FLOAT : 'tags this -> GLenum.t) =
      fun (x7671 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7671) "LOW_FLOAT")
    let (get_LOW_INT : 'tags this -> GLenum.t) =
      fun (x7673 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7673) "LOW_INT")
    let (get_LUMINANCE : 'tags this -> GLenum.t) =
      fun (x7675 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7675) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : 'tags this -> GLenum.t) =
      fun (x7677 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7677) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7679 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7679)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x7681 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7681)
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x7683 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7683)
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x7685 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7685)
             "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7687 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7687)
             "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x7689 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7689) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : 'tags this -> GLenum.t) =
      fun (x7691 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7691)
             "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x7693 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7693)
             "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7695 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7695)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x7697 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7697)
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : 'tags this -> GLenum.t) =
      fun (x7699 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7699)
             "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : 'tags this -> GLenum.t) =
      fun (x7701 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7701) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : 'tags this -> GLenum.t) =
      fun (x7703 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7703) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : 'tags this -> GLenum.t) =
      fun (x7705 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7705) "MIRRORED_REPEAT")
    let (get_NEAREST : 'tags this -> GLenum.t) =
      fun (x7707 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7707) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x7709 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7709)
             "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x7711 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7711)
             "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : 'tags this -> GLenum.t) =
      fun (x7713 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7713) "NEVER")
    let (get_NICEST : 'tags this -> GLenum.t) =
      fun (x7715 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7715) "NICEST")
    let (get_NONE : 'tags this -> GLenum.t) =
      fun (x7717 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7717) "NONE")
    let (get_NOTEQUAL : 'tags this -> GLenum.t) =
      fun (x7719 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7719) "NOTEQUAL")
    let (get_NO_ERROR : 'tags this -> GLenum.t) =
      fun (x7721 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7721) "NO_ERROR")
    let (get_ONE : 'tags this -> GLenum.t) =
      fun (x7723 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7723) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x7725 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7725)
             "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x7727 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7727)
             "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7729 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7729)
             "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x7731 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7731)
             "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7733 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7733)
             "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x7735 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7735)
             "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : 'tags this -> GLenum.t) =
      fun (x7737 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7737) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x7739 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7739) "PACK_ALIGNMENT")
    let (get_POINTS : 'tags this -> GLenum.t) =
      fun (x7741 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7741) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : 'tags this -> GLenum.t) =
      fun (x7743 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7743)
             "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : 'tags this -> GLenum.t) =
      fun (x7745 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7745)
             "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : 'tags this -> GLenum.t) =
      fun (x7747 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7747)
             "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : 'tags this -> GLenum.t) =
      fun (x7749 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7749) "RED_BITS")
    let (get_RENDERBUFFER : 'tags this -> GLenum.t) =
      fun (x7751 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7751) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x7753 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7753)
             "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7755 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7755)
             "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x7757 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7757)
             "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x7759 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7759)
             "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x7761 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7761)
             "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : 'tags this -> GLenum.t) =
      fun (x7763 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7763)
             "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : 'tags this -> GLenum.t) =
      fun (x7765 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7765)
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x7767 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7767)
             "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x7769 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7769)
             "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : 'tags this -> GLenum.t) =
      fun (x7771 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7771)
             "RENDERBUFFER_WIDTH")
    let (get_RENDERER : 'tags this -> GLenum.t) =
      fun (x7773 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7773) "RENDERER")
    let (get_REPEAT : 'tags this -> GLenum.t) =
      fun (x7775 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7775) "REPEAT")
    let (get_REPLACE : 'tags this -> GLenum.t) =
      fun (x7777 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7777) "REPLACE")
    let (get_RGB : 'tags this -> GLenum.t) =
      fun (x7779 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7779) "RGB")
    let (get_RGB565 : 'tags this -> GLenum.t) =
      fun (x7781 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7781) "RGB565")
    let (get_RGB5_A1 : 'tags this -> GLenum.t) =
      fun (x7783 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7783) "RGB5_A1")
    let (get_RGBA : 'tags this -> GLenum.t) =
      fun (x7785 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7785) "RGBA")
    let (get_RGBA4 : 'tags this -> GLenum.t) =
      fun (x7787 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7787) "RGBA4")
    let (get_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x7789 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7789) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x7791 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7791) "SAMPLER_CUBE")
    let (get_SAMPLES : 'tags this -> GLenum.t) =
      fun (x7793 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7793) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : 'tags this -> GLenum.t) =
      fun (x7795 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7795)
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : 'tags this -> GLenum.t) =
      fun (x7797 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7797) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : 'tags this -> GLenum.t) =
      fun (x7799 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7799) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : 'tags this -> GLenum.t) =
      fun (x7801 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7801)
             "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : 'tags this -> GLenum.t) =
      fun (x7803 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7803)
             "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : 'tags this -> GLenum.t) =
      fun (x7805 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7805) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : 'tags this -> GLenum.t) =
      fun (x7807 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7807) "SCISSOR_TEST")
    let (get_SHADER_TYPE : 'tags this -> GLenum.t) =
      fun (x7809 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7809) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : 'tags this -> GLenum.t) =
      fun (x7811 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7811)
             "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : 'tags this -> GLenum.t) =
      fun (x7813 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7813) "SHORT")
    let (get_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7815 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7815) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : 'tags this -> GLenum.t) =
      fun (x7817 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7817)
             "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x7819 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7819) "SRC_COLOR")
    let (get_STATIC_DRAW : 'tags this -> GLenum.t) =
      fun (x7821 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7821) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7823 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7823)
             "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : 'tags this -> GLenum.t) =
      fun (x7825 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7825)
             "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : 'tags this -> GLenum.t) =
      fun (x7827 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7827)
             "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x7829 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7829)
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x7831 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7831)
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : 'tags this -> GLenum.t) =
      fun (x7833 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7833) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x7835 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7835)
             "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7837 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7837)
             "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : 'tags this -> GLenum.t) =
      fun (x7839 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7839) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7841 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7841)
             "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7843 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7843)
             "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : 'tags this -> GLenum.t) =
      fun (x7845 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7845) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : 'tags this -> GLenum.t) =
      fun (x7847 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7847) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : 'tags this -> GLenum.t) =
      fun (x7849 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7849) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x7851 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7851)
             "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x7853 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7853)
             "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : 'tags this -> GLenum.t) =
      fun (x7855 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7855) "STENCIL_REF")
    let (get_STENCIL_TEST : 'tags this -> GLenum.t) =
      fun (x7857 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7857) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x7859 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7859)
             "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7861 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7861)
             "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : 'tags this -> GLenum.t) =
      fun (x7863 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7863) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : 'tags this -> GLenum.t) =
      fun (x7865 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7865) "SUBPIXEL_BITS")
    let (get_TEXTURE : 'tags this -> GLenum.t) =
      fun (x7867 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7867) "TEXTURE")
    let (get_TEXTURE0 : 'tags this -> GLenum.t) =
      fun (x7869 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7869) "TEXTURE0")
    let (get_TEXTURE1 : 'tags this -> GLenum.t) =
      fun (x7871 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7871) "TEXTURE1")
    let (get_TEXTURE10 : 'tags this -> GLenum.t) =
      fun (x7873 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7873) "TEXTURE10")
    let (get_TEXTURE11 : 'tags this -> GLenum.t) =
      fun (x7875 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7875) "TEXTURE11")
    let (get_TEXTURE12 : 'tags this -> GLenum.t) =
      fun (x7877 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7877) "TEXTURE12")
    let (get_TEXTURE13 : 'tags this -> GLenum.t) =
      fun (x7879 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7879) "TEXTURE13")
    let (get_TEXTURE14 : 'tags this -> GLenum.t) =
      fun (x7881 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7881) "TEXTURE14")
    let (get_TEXTURE15 : 'tags this -> GLenum.t) =
      fun (x7883 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7883) "TEXTURE15")
    let (get_TEXTURE16 : 'tags this -> GLenum.t) =
      fun (x7885 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7885) "TEXTURE16")
    let (get_TEXTURE17 : 'tags this -> GLenum.t) =
      fun (x7887 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7887) "TEXTURE17")
    let (get_TEXTURE18 : 'tags this -> GLenum.t) =
      fun (x7889 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7889) "TEXTURE18")
    let (get_TEXTURE19 : 'tags this -> GLenum.t) =
      fun (x7891 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7891) "TEXTURE19")
    let (get_TEXTURE2 : 'tags this -> GLenum.t) =
      fun (x7893 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7893) "TEXTURE2")
    let (get_TEXTURE20 : 'tags this -> GLenum.t) =
      fun (x7895 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7895) "TEXTURE20")
    let (get_TEXTURE21 : 'tags this -> GLenum.t) =
      fun (x7897 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7897) "TEXTURE21")
    let (get_TEXTURE22 : 'tags this -> GLenum.t) =
      fun (x7899 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7899) "TEXTURE22")
    let (get_TEXTURE23 : 'tags this -> GLenum.t) =
      fun (x7901 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7901) "TEXTURE23")
    let (get_TEXTURE24 : 'tags this -> GLenum.t) =
      fun (x7903 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7903) "TEXTURE24")
    let (get_TEXTURE25 : 'tags this -> GLenum.t) =
      fun (x7905 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7905) "TEXTURE25")
    let (get_TEXTURE26 : 'tags this -> GLenum.t) =
      fun (x7907 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7907) "TEXTURE26")
    let (get_TEXTURE27 : 'tags this -> GLenum.t) =
      fun (x7909 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7909) "TEXTURE27")
    let (get_TEXTURE28 : 'tags this -> GLenum.t) =
      fun (x7911 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7911) "TEXTURE28")
    let (get_TEXTURE29 : 'tags this -> GLenum.t) =
      fun (x7913 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7913) "TEXTURE29")
    let (get_TEXTURE3 : 'tags this -> GLenum.t) =
      fun (x7915 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7915) "TEXTURE3")
    let (get_TEXTURE30 : 'tags this -> GLenum.t) =
      fun (x7917 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7917) "TEXTURE30")
    let (get_TEXTURE31 : 'tags this -> GLenum.t) =
      fun (x7919 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7919) "TEXTURE31")
    let (get_TEXTURE4 : 'tags this -> GLenum.t) =
      fun (x7921 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7921) "TEXTURE4")
    let (get_TEXTURE5 : 'tags this -> GLenum.t) =
      fun (x7923 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7923) "TEXTURE5")
    let (get_TEXTURE6 : 'tags this -> GLenum.t) =
      fun (x7925 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7925) "TEXTURE6")
    let (get_TEXTURE7 : 'tags this -> GLenum.t) =
      fun (x7927 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7927) "TEXTURE7")
    let (get_TEXTURE8 : 'tags this -> GLenum.t) =
      fun (x7929 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7929) "TEXTURE8")
    let (get_TEXTURE9 : 'tags this -> GLenum.t) =
      fun (x7931 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7931) "TEXTURE9")
    let (get_TEXTURE_2D : 'tags this -> GLenum.t) =
      fun (x7933 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7933) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : 'tags this -> GLenum.t) =
      fun (x7935 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7935)
             "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x7937 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7937)
             "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x7939 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7939) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : 'tags this -> GLenum.t) =
      fun (x7941 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7941)
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : 'tags this -> GLenum.t) =
      fun (x7943 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7943)
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : 'tags this -> GLenum.t) =
      fun (x7945 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7945)
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : 'tags this -> GLenum.t) =
      fun (x7947 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7947)
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : 'tags this -> GLenum.t) =
      fun (x7949 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7949)
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : 'tags this -> GLenum.t) =
      fun (x7951 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7951)
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : 'tags this -> GLenum.t) =
      fun (x7953 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7953)
             "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : 'tags this -> GLenum.t) =
      fun (x7955 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7955)
             "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : 'tags this -> GLenum.t) =
      fun (x7957 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7957) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : 'tags this -> GLenum.t) =
      fun (x7959 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7959) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : 'tags this -> GLenum.t) =
      fun (x7961 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7961) "TRIANGLES")
    let (get_TRIANGLE_FAN : 'tags this -> GLenum.t) =
      fun (x7963 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7963) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : 'tags this -> GLenum.t) =
      fun (x7965 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7965) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x7967 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7967) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : 'tags this -> GLenum.t) =
      fun (x7969 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7969)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : 'tags this -> GLenum.t) =
      fun (x7971 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7971)
             "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : 'tags this -> GLenum.t) =
      fun (x7973 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7973)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : 'tags this -> GLenum.t) =
      fun (x7975 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7975) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : 'tags this -> GLenum.t) =
      fun (x7977 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7977) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : 'tags this -> GLenum.t) =
      fun (x7979 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7979) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : 'tags this -> GLenum.t) =
      fun (x7981 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7981)
             "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : 'tags this -> GLenum.t) =
      fun (x7983 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7983)
             "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : 'tags this -> GLenum.t) =
      fun (x7985 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7985)
             "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : 'tags this -> GLenum.t) =
      fun (x7987 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7987) "VALIDATE_STATUS")
    let (get_VENDOR : 'tags this -> GLenum.t) =
      fun (x7989 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7989) "VENDOR")
    let (get_VERSION : 'tags this -> GLenum.t) =
      fun (x7991 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7991) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7993 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7993)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : 'tags this -> GLenum.t) =
      fun (x7995 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7995)
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x7997 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7997)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : 'tags this -> GLenum.t) =
      fun (x7999 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7999)
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : 'tags this -> GLenum.t) =
      fun (x8001 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8001)
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x8003 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8003)
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : 'tags this -> GLenum.t) =
      fun (x8005 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8005)
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : 'tags this -> GLenum.t) =
      fun (x8007 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8007) "VERTEX_SHADER")
    let (get_VIEWPORT : 'tags this -> GLenum.t) =
      fun (x8009 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8009) "VIEWPORT")
    let (get_ZERO : 'tags this -> GLenum.t) =
      fun (x8011 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8011) "ZERO")
    let (vertexAttrib1fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8016 : 'tags this) ->
        fun ~index:(x8013 : GLuint.t) ->
          fun ~values:(x8014 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8016) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x8013);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8014)|])
    let (vertexAttrib2fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8021 : 'tags this) ->
        fun ~index:(x8018 : GLuint.t) ->
          fun ~values:(x8019 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8021) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x8018);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8019)|])
    let (vertexAttrib3fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8026 : 'tags this) ->
        fun ~index:(x8023 : GLuint.t) ->
          fun ~values:(x8024 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8026) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x8023);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8024)|])
    let (vertexAttrib4fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x8031 : 'tags this) ->
        fun ~index:(x8028 : GLuint.t) ->
          fun ~values:(x8029 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8031) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x8028);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8029)|])
    let cast_from = Obj.magic
  end
module WebGLRenderingContext =
  struct
    type t =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8034 : Ojs.t) -> t_of_js x8034
    and t_0_to_js : t_0 -> Ojs.t = fun (x8033 : t) -> t_to_js x8033
    type tags =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8037 : Ojs.t) -> intf_of_js __tags_of_js x8037
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8035 : __tags intf) -> intf_to_js __tags_to_js x8035
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") 
             [||])
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ZERO")
  end
module WebGLContextEventInit =
  struct
    type t = [ `EventInit  | `WebGLContextEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8040 : Ojs.t) -> t_of_js x8040
    and t_0_to_js : t_0 -> Ojs.t = fun (x8039 : t) -> t_to_js x8039
    type tags = [ `EventInit  | `WebGLContextEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8043 : Ojs.t) -> intf_of_js __tags_of_js x8043
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8041 : __tags intf) -> intf_to_js __tags_to_js x8041
    let (get_statusMessage : 'tags this -> string) =
      fun (x8045 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8045) "statusMessage")
    let (set_statusMessage : 'tags this -> string -> unit) =
      fun (x8047 : 'tags this) ->
        fun (x8048 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x8047) "statusMessage"
            (Ojs.string_to_js x8048)
    let (create : statusMessage:string -> unit -> t) =
      fun ~statusMessage:(x8050 : string) ->
        fun () ->
          let x8051 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x8051 "statusMessage" (Ojs.string_to_js x8050);
          t_of_js x8051
    let cast_from = Obj.magic
  end
module WebGLContextEvent =
  struct
    type t = [ `Event  | `WebGLContextEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8053 : Ojs.t) -> t_of_js x8053
    and t_0_to_js : t_0 -> Ojs.t = fun (x8052 : t) -> t_to_js x8052
    type tags = [ `Event  | `WebGLContextEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8056 : Ojs.t) -> intf_of_js __tags_of_js x8056
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8054 : __tags intf) -> intf_to_js __tags_to_js x8054
    let (get_statusMessage : 'tags this -> string) =
      fun (x8058 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8058) "statusMessage")
    let (create : statusMessage:string -> unit -> t) =
      fun ~statusMessage:(x8060 : string) ->
        fun () ->
          let x8061 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x8061 "statusMessage" (Ojs.string_to_js x8060);
          t_of_js x8061
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent") "prototype")
    let (create' :
      type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t) =
      fun ~type_:(x8062 : string) ->
        fun ?eventInit:(x8063 : WebGLContextEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
                 (let x8064 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x8064 "push" [|(Ojs.string_to_js x8062)|]);
                  (match x8063 with
                   | Some x8065 ->
                       ignore
                         (Ojs.call x8064 "push"
                            [|(WebGLContextEventInit.t_to_js x8065)|])
                   | None -> ());
                  x8064))
  end
module WebGL2RenderingContextOverloads =
  struct
    type t = [ `WebGL2RenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8067 : Ojs.t) -> t_of_js x8067
    and t_0_to_js : t_0 -> Ojs.t = fun (x8066 : t) -> t_to_js x8066
    type tags = [ `WebGL2RenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8070 : Ojs.t) -> intf_of_js __tags_of_js x8070
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8068 : __tags intf) -> intf_to_js __tags_to_js x8068
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x8075 : 'tags this) ->
        fun ~target:(x8072 : GLenum.t) ->
          fun ~size:(x8073 : GLsizeiptr.t) ->
            fun ~usage:(x8074 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8075) "bufferData"
                   [|(GLenum.t_to_js x8072);(GLsizeiptr.t_to_js x8073);(
                     GLenum.t_to_js x8074)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          srcData:BufferSource.t or_null -> usage:GLenum.t -> unit)
      =
      fun (x8081 : 'tags this) ->
        fun ~target:(x8077 : GLenum.t) ->
          fun ~srcData:(x8078 : BufferSource.t or_null) ->
            fun ~usage:(x8080 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8081) "bufferData"
                   [|(GLenum.t_to_js x8077);(or_null_to_js
                                               BufferSource.t_to_js x8078);(
                     GLenum.t_to_js x8080)|])
    let (bufferData'' :
      'tags this ->
        target:GLenum.t ->
          srcData:ArrayBufferView.t_0 ->
            usage:GLenum.t ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8090 : 'tags this) ->
        fun ~target:(x8083 : GLenum.t) ->
          fun ~srcData:(x8084 : ArrayBufferView.t_0) ->
            fun ~usage:(x8085 : GLenum.t) ->
              fun ~srcOffset:(x8086 : GLuint.t) ->
                fun ?length:(x8087 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8092 = this_to_js Obj.magic x8090 in
                       Ojs.call (Ojs.get_prop_ascii x8092 "bufferData")
                         "apply"
                         [|x8092;((let x8088 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8088 "push"
                                        [|(GLenum.t_to_js x8083)|]);
                                   ignore
                                     (Ojs.call x8088 "push"
                                        [|(ArrayBufferView.t_0_to_js x8084)|]);
                                   ignore
                                     (Ojs.call x8088 "push"
                                        [|(GLenum.t_to_js x8085)|]);
                                   ignore
                                     (Ojs.call x8088 "push"
                                        [|(GLuint.t_to_js x8086)|]);
                                   (match x8087 with
                                    | Some x8089 ->
                                        ignore
                                          (Ojs.call x8088 "push"
                                             [|(GLuint.t_to_js x8089)|])
                                    | None -> ());
                                   x8088))|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t -> srcData:BufferSource.t -> unit)
      =
      fun (x8096 : 'tags this) ->
        fun ~target:(x8093 : GLenum.t) ->
          fun ~dstByteOffset:(x8094 : GLintptr.t) ->
            fun ~srcData:(x8095 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8096) "bufferSubData"
                   [|(GLenum.t_to_js x8093);(GLintptr.t_to_js x8094);(
                     BufferSource.t_to_js x8095)|])
    let (bufferSubData' :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t ->
            srcData:ArrayBufferView.t_0 ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8105 : 'tags this) ->
        fun ~target:(x8098 : GLenum.t) ->
          fun ~dstByteOffset:(x8099 : GLintptr.t) ->
            fun ~srcData:(x8100 : ArrayBufferView.t_0) ->
              fun ~srcOffset:(x8101 : GLuint.t) ->
                fun ?length:(x8102 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8107 = this_to_js Obj.magic x8105 in
                       Ojs.call (Ojs.get_prop_ascii x8107 "bufferSubData")
                         "apply"
                         [|x8107;((let x8103 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8103 "push"
                                        [|(GLenum.t_to_js x8098)|]);
                                   ignore
                                     (Ojs.call x8103 "push"
                                        [|(GLintptr.t_to_js x8099)|]);
                                   ignore
                                     (Ojs.call x8103 "push"
                                        [|(ArrayBufferView.t_0_to_js x8100)|]);
                                   ignore
                                     (Ojs.call x8103 "push"
                                        [|(GLuint.t_to_js x8101)|]);
                                   (match x8102 with
                                    | Some x8104 ->
                                        ignore
                                          (Ojs.call x8103 "push"
                                             [|(GLuint.t_to_js x8104)|])
                                    | None -> ());
                                   x8103))|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8116 : 'tags this) ->
        fun ~target:(x8108 : GLenum.t) ->
          fun ~level:(x8109 : GLint.t) ->
            fun ~internalformat:(x8110 : GLenum.t) ->
              fun ~width:(x8111 : GLsizei.t) ->
                fun ~height:(x8112 : GLsizei.t) ->
                  fun ~border:(x8113 : GLint.t) ->
                    fun ~imageSize:(x8114 : GLsizei.t) ->
                      fun ~offset:(x8115 : GLintptr.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8116)
                             "compressedTexImage2D"
                             [|(GLenum.t_to_js x8108);(GLint.t_to_js x8109);(
                               GLenum.t_to_js x8110);(GLsizei.t_to_js x8111);(
                               GLsizei.t_to_js x8112);(GLint.t_to_js x8113);(
                               GLsizei.t_to_js x8114);(GLintptr.t_to_js x8115)|])
    let (compressedTexImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    srcData:ArrayBufferView.t_0 ->
                      ?srcOffset:GLuint.t ->
                        ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8130 : 'tags this) ->
        fun ~target:(x8118 : GLenum.t) ->
          fun ~level:(x8119 : GLint.t) ->
            fun ~internalformat:(x8120 : GLenum.t) ->
              fun ~width:(x8121 : GLsizei.t) ->
                fun ~height:(x8122 : GLsizei.t) ->
                  fun ~border:(x8123 : GLint.t) ->
                    fun ~srcData:(x8124 : ArrayBufferView.t_0) ->
                      fun ?srcOffset:(x8125 : GLuint.t option) ->
                        fun ?srcLengthOverride:(x8126 : GLuint.t option) ->
                          fun () ->
                            ignore
                              (let x8132 = this_to_js Obj.magic x8130 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x8132
                                    "compressedTexImage2D") "apply"
                                 [|x8132;((let x8127 =
                                             Ojs.new_obj
                                               (Ojs.get_prop_ascii Ojs.global
                                                  "Array") [||] in
                                           ignore
                                             (Ojs.call x8127 "push"
                                                [|(GLenum.t_to_js x8118)|]);
                                           ignore
                                             (Ojs.call x8127 "push"
                                                [|(GLint.t_to_js x8119)|]);
                                           ignore
                                             (Ojs.call x8127 "push"
                                                [|(GLenum.t_to_js x8120)|]);
                                           ignore
                                             (Ojs.call x8127 "push"
                                                [|(GLsizei.t_to_js x8121)|]);
                                           ignore
                                             (Ojs.call x8127 "push"
                                                [|(GLsizei.t_to_js x8122)|]);
                                           ignore
                                             (Ojs.call x8127 "push"
                                                [|(GLint.t_to_js x8123)|]);
                                           ignore
                                             (Ojs.call x8127 "push"
                                                [|(ArrayBufferView.t_0_to_js
                                                     x8124)|]);
                                           (match x8125 with
                                            | Some x8129 ->
                                                ignore
                                                  (Ojs.call x8127 "push"
                                                     [|(GLuint.t_to_js x8129)|])
                                            | None -> ());
                                           (match x8126 with
                                            | Some x8128 ->
                                                ignore
                                                  (Ojs.call x8127 "push"
                                                     [|(GLuint.t_to_js x8128)|])
                                            | None -> ());
                                           x8127))|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8142 : 'tags this) ->
        fun ~target:(x8133 : GLenum.t) ->
          fun ~level:(x8134 : GLint.t) ->
            fun ~xoffset:(x8135 : GLint.t) ->
              fun ~yoffset:(x8136 : GLint.t) ->
                fun ~width:(x8137 : GLsizei.t) ->
                  fun ~height:(x8138 : GLsizei.t) ->
                    fun ~format:(x8139 : GLenum.t) ->
                      fun ~imageSize:(x8140 : GLsizei.t) ->
                        fun ~offset:(x8141 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8142)
                               "compressedTexSubImage2D"
                               [|(GLenum.t_to_js x8133);(GLint.t_to_js x8134);(
                                 GLint.t_to_js x8135);(GLint.t_to_js x8136);(
                                 GLsizei.t_to_js x8137);(GLsizei.t_to_js
                                                           x8138);(GLenum.t_to_js
                                                                    x8139);(
                                 GLsizei.t_to_js x8140);(GLintptr.t_to_js
                                                           x8141)|])
    let (compressedTexSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8157 : 'tags this) ->
        fun ~target:(x8144 : GLenum.t) ->
          fun ~level:(x8145 : GLint.t) ->
            fun ~xoffset:(x8146 : GLint.t) ->
              fun ~yoffset:(x8147 : GLint.t) ->
                fun ~width:(x8148 : GLsizei.t) ->
                  fun ~height:(x8149 : GLsizei.t) ->
                    fun ~format:(x8150 : GLenum.t) ->
                      fun ~srcData:(x8151 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x8152 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x8153 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x8159 = this_to_js Obj.magic x8157 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x8159
                                      "compressedTexSubImage2D") "apply"
                                   [|x8159;((let x8154 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x8154 "push"
                                                  [|(GLenum.t_to_js x8144)|]);
                                             ignore
                                               (Ojs.call x8154 "push"
                                                  [|(GLint.t_to_js x8145)|]);
                                             ignore
                                               (Ojs.call x8154 "push"
                                                  [|(GLint.t_to_js x8146)|]);
                                             ignore
                                               (Ojs.call x8154 "push"
                                                  [|(GLint.t_to_js x8147)|]);
                                             ignore
                                               (Ojs.call x8154 "push"
                                                  [|(GLsizei.t_to_js x8148)|]);
                                             ignore
                                               (Ojs.call x8154 "push"
                                                  [|(GLsizei.t_to_js x8149)|]);
                                             ignore
                                               (Ojs.call x8154 "push"
                                                  [|(GLenum.t_to_js x8150)|]);
                                             ignore
                                               (Ojs.call x8154 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x8151)|]);
                                             (match x8152 with
                                              | Some x8156 ->
                                                  ignore
                                                    (Ojs.call x8154 "push"
                                                       [|(GLuint.t_to_js
                                                            x8156)|])
                                              | None -> ());
                                             (match x8153 with
                                              | Some x8155 ->
                                                  ignore
                                                    (Ojs.call x8154 "push"
                                                       [|(GLuint.t_to_js
                                                            x8155)|])
                                              | None -> ());
                                             x8154))|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x8168 : 'tags this) ->
        fun ~x:(x8160 : GLint.t) ->
          fun ~y:(x8161 : GLint.t) ->
            fun ~width:(x8162 : GLsizei.t) ->
              fun ~height:(x8163 : GLsizei.t) ->
                fun ~format:(x8164 : GLenum.t) ->
                  fun ~type_:(x8165 : GLenum.t) ->
                    fun ~dstData:(x8166 : ArrayBufferView.t_0 or_null) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8168) "readPixels"
                           [|(GLint.t_to_js x8160);(GLint.t_to_js x8161);(
                             GLsizei.t_to_js x8162);(GLsizei.t_to_js x8163);(
                             GLenum.t_to_js x8164);(GLenum.t_to_js x8165);(
                             or_null_to_js ArrayBufferView.t_0_to_js x8166)|])
    let (readPixels' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x8177 : 'tags this) ->
        fun ~x:(x8170 : GLint.t) ->
          fun ~y:(x8171 : GLint.t) ->
            fun ~width:(x8172 : GLsizei.t) ->
              fun ~height:(x8173 : GLsizei.t) ->
                fun ~format:(x8174 : GLenum.t) ->
                  fun ~type_:(x8175 : GLenum.t) ->
                    fun ~offset:(x8176 : GLintptr.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8177) "readPixels"
                           [|(GLint.t_to_js x8170);(GLint.t_to_js x8171);(
                             GLsizei.t_to_js x8172);(GLsizei.t_to_js x8173);(
                             GLenum.t_to_js x8174);(GLenum.t_to_js x8175);(
                             GLintptr.t_to_js x8176)|])
    let (readPixels'' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 -> dstOffset:GLuint.t -> unit)
      =
      fun (x8187 : 'tags this) ->
        fun ~x:(x8179 : GLint.t) ->
          fun ~y:(x8180 : GLint.t) ->
            fun ~width:(x8181 : GLsizei.t) ->
              fun ~height:(x8182 : GLsizei.t) ->
                fun ~format:(x8183 : GLenum.t) ->
                  fun ~type_:(x8184 : GLenum.t) ->
                    fun ~dstData:(x8185 : ArrayBufferView.t_0) ->
                      fun ~dstOffset:(x8186 : GLuint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x8187) "readPixels"
                             [|(GLint.t_to_js x8179);(GLint.t_to_js x8180);(
                               GLsizei.t_to_js x8181);(GLsizei.t_to_js x8182);(
                               GLenum.t_to_js x8183);(GLenum.t_to_js x8184);(
                               ArrayBufferView.t_0_to_js x8185);(GLuint.t_to_js
                                                                   x8186)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x8199 : 'tags this) ->
        fun ~target:(x8189 : GLenum.t) ->
          fun ~level:(x8190 : GLint.t) ->
            fun ~internalformat:(x8191 : GLint.t) ->
              fun ~width:(x8192 : GLsizei.t) ->
                fun ~height:(x8193 : GLsizei.t) ->
                  fun ~border:(x8194 : GLint.t) ->
                    fun ~format:(x8195 : GLenum.t) ->
                      fun ~type_:(x8196 : GLenum.t) ->
                        fun ~pixels:(x8197 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8199)
                               "texImage2D"
                               [|(GLenum.t_to_js x8189);(GLint.t_to_js x8190);(
                                 GLint.t_to_js x8191);(GLsizei.t_to_js x8192);(
                                 GLsizei.t_to_js x8193);(GLint.t_to_js x8194);(
                                 GLenum.t_to_js x8195);(GLenum.t_to_js x8196);(
                                 or_null_to_js ArrayBufferView.t_0_to_js
                                   x8197)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8207 : 'tags this) ->
        fun ~target:(x8201 : GLenum.t) ->
          fun ~level:(x8202 : GLint.t) ->
            fun ~internalformat:(x8203 : GLint.t) ->
              fun ~format:(x8204 : GLenum.t) ->
                fun ~type_:(x8205 : GLenum.t) ->
                  fun ~source:(x8206 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8207) "texImage2D"
                         [|(GLenum.t_to_js x8201);(GLint.t_to_js x8202);(
                           GLint.t_to_js x8203);(GLenum.t_to_js x8204);(
                           GLenum.t_to_js x8205);(TexImageSource.t_to_js
                                                    x8206)|])
    let (texImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8218 : 'tags this) ->
        fun ~target:(x8209 : GLenum.t) ->
          fun ~level:(x8210 : GLint.t) ->
            fun ~internalformat:(x8211 : GLint.t) ->
              fun ~width:(x8212 : GLsizei.t) ->
                fun ~height:(x8213 : GLsizei.t) ->
                  fun ~border:(x8214 : GLint.t) ->
                    fun ~format:(x8215 : GLenum.t) ->
                      fun ~type_:(x8216 : GLenum.t) ->
                        fun ~pboOffset:(x8217 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8218)
                               "texImage2D"
                               [|(GLenum.t_to_js x8209);(GLint.t_to_js x8210);(
                                 GLint.t_to_js x8211);(GLsizei.t_to_js x8212);(
                                 GLsizei.t_to_js x8213);(GLint.t_to_js x8214);(
                                 GLenum.t_to_js x8215);(GLenum.t_to_js x8216);(
                                 GLintptr.t_to_js x8217)|])
    let (texImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8229 : 'tags this) ->
        fun ~target:(x8220 : GLenum.t) ->
          fun ~level:(x8221 : GLint.t) ->
            fun ~internalformat:(x8222 : GLint.t) ->
              fun ~width:(x8223 : GLsizei.t) ->
                fun ~height:(x8224 : GLsizei.t) ->
                  fun ~border:(x8225 : GLint.t) ->
                    fun ~format:(x8226 : GLenum.t) ->
                      fun ~type_:(x8227 : GLenum.t) ->
                        fun ~source:(x8228 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8229)
                               "texImage2D"
                               [|(GLenum.t_to_js x8220);(GLint.t_to_js x8221);(
                                 GLint.t_to_js x8222);(GLsizei.t_to_js x8223);(
                                 GLsizei.t_to_js x8224);(GLint.t_to_js x8225);(
                                 GLenum.t_to_js x8226);(GLenum.t_to_js x8227);(
                                 TexImageSource.t_to_js x8228)|])
    let (texImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8241 : 'tags this) ->
        fun ~target:(x8231 : GLenum.t) ->
          fun ~level:(x8232 : GLint.t) ->
            fun ~internalformat:(x8233 : GLint.t) ->
              fun ~width:(x8234 : GLsizei.t) ->
                fun ~height:(x8235 : GLsizei.t) ->
                  fun ~border:(x8236 : GLint.t) ->
                    fun ~format:(x8237 : GLenum.t) ->
                      fun ~type_:(x8238 : GLenum.t) ->
                        fun ~srcData:(x8239 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8240 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8241)
                                 "texImage2D"
                                 [|(GLenum.t_to_js x8231);(GLint.t_to_js
                                                             x8232);(
                                   GLint.t_to_js x8233);(GLsizei.t_to_js
                                                           x8234);(GLsizei.t_to_js
                                                                    x8235);(
                                   GLint.t_to_js x8236);(GLenum.t_to_js x8237);(
                                   GLenum.t_to_js x8238);(ArrayBufferView.t_0_to_js
                                                            x8239);(GLuint.t_to_js
                                                                    x8240)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x8253 : 'tags this) ->
        fun ~target:(x8243 : GLenum.t) ->
          fun ~level:(x8244 : GLint.t) ->
            fun ~xoffset:(x8245 : GLint.t) ->
              fun ~yoffset:(x8246 : GLint.t) ->
                fun ~width:(x8247 : GLsizei.t) ->
                  fun ~height:(x8248 : GLsizei.t) ->
                    fun ~format:(x8249 : GLenum.t) ->
                      fun ~type_:(x8250 : GLenum.t) ->
                        fun ~pixels:(x8251 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8253)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8243);(GLint.t_to_js x8244);(
                                 GLint.t_to_js x8245);(GLint.t_to_js x8246);(
                                 GLsizei.t_to_js x8247);(GLsizei.t_to_js
                                                           x8248);(GLenum.t_to_js
                                                                    x8249);(
                                 GLenum.t_to_js x8250);(or_null_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x8251)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8262 : 'tags this) ->
        fun ~target:(x8255 : GLenum.t) ->
          fun ~level:(x8256 : GLint.t) ->
            fun ~xoffset:(x8257 : GLint.t) ->
              fun ~yoffset:(x8258 : GLint.t) ->
                fun ~format:(x8259 : GLenum.t) ->
                  fun ~type_:(x8260 : GLenum.t) ->
                    fun ~source:(x8261 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x8262)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x8255);(GLint.t_to_js x8256);(
                             GLint.t_to_js x8257);(GLint.t_to_js x8258);(
                             GLenum.t_to_js x8259);(GLenum.t_to_js x8260);(
                             TexImageSource.t_to_js x8261)|])
    let (texSubImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8273 : 'tags this) ->
        fun ~target:(x8264 : GLenum.t) ->
          fun ~level:(x8265 : GLint.t) ->
            fun ~xoffset:(x8266 : GLint.t) ->
              fun ~yoffset:(x8267 : GLint.t) ->
                fun ~width:(x8268 : GLsizei.t) ->
                  fun ~height:(x8269 : GLsizei.t) ->
                    fun ~format:(x8270 : GLenum.t) ->
                      fun ~type_:(x8271 : GLenum.t) ->
                        fun ~pboOffset:(x8272 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8273)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8264);(GLint.t_to_js x8265);(
                                 GLint.t_to_js x8266);(GLint.t_to_js x8267);(
                                 GLsizei.t_to_js x8268);(GLsizei.t_to_js
                                                           x8269);(GLenum.t_to_js
                                                                    x8270);(
                                 GLenum.t_to_js x8271);(GLintptr.t_to_js
                                                          x8272)|])
    let (texSubImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8284 : 'tags this) ->
        fun ~target:(x8275 : GLenum.t) ->
          fun ~level:(x8276 : GLint.t) ->
            fun ~xoffset:(x8277 : GLint.t) ->
              fun ~yoffset:(x8278 : GLint.t) ->
                fun ~width:(x8279 : GLsizei.t) ->
                  fun ~height:(x8280 : GLsizei.t) ->
                    fun ~format:(x8281 : GLenum.t) ->
                      fun ~type_:(x8282 : GLenum.t) ->
                        fun ~source:(x8283 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8284)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x8275);(GLint.t_to_js x8276);(
                                 GLint.t_to_js x8277);(GLint.t_to_js x8278);(
                                 GLsizei.t_to_js x8279);(GLsizei.t_to_js
                                                           x8280);(GLenum.t_to_js
                                                                    x8281);(
                                 GLenum.t_to_js x8282);(TexImageSource.t_to_js
                                                          x8283)|])
    let (texSubImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x8296 : 'tags this) ->
        fun ~target:(x8286 : GLenum.t) ->
          fun ~level:(x8287 : GLint.t) ->
            fun ~xoffset:(x8288 : GLint.t) ->
              fun ~yoffset:(x8289 : GLint.t) ->
                fun ~width:(x8290 : GLsizei.t) ->
                  fun ~height:(x8291 : GLsizei.t) ->
                    fun ~format:(x8292 : GLenum.t) ->
                      fun ~type_:(x8293 : GLenum.t) ->
                        fun ~srcData:(x8294 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x8295 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8296)
                                 "texSubImage2D"
                                 [|(GLenum.t_to_js x8286);(GLint.t_to_js
                                                             x8287);(
                                   GLint.t_to_js x8288);(GLint.t_to_js x8289);(
                                   GLsizei.t_to_js x8290);(GLsizei.t_to_js
                                                             x8291);(
                                   GLenum.t_to_js x8292);(GLenum.t_to_js
                                                            x8293);(ArrayBufferView.t_0_to_js
                                                                    x8294);(
                                   GLuint.t_to_js x8295)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8306 : 'tags this) ->
        fun ~location:(x8298 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8299 : Float32List.t) ->
            fun ?srcOffset:(x8300 : GLuint.t option) ->
              fun ?srcLength:(x8301 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8308 = this_to_js Obj.magic x8306 in
                     Ojs.call (Ojs.get_prop_ascii x8308 "uniform1fv") "apply"
                       [|x8308;((let x8302 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8302 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8298)|]);
                                 ignore
                                   (Ojs.call x8302 "push"
                                      [|(Float32List.t_to_js x8299)|]);
                                 (match x8300 with
                                  | Some x8304 ->
                                      ignore
                                        (Ojs.call x8302 "push"
                                           [|(GLuint.t_to_js x8304)|])
                                  | None -> ());
                                 (match x8301 with
                                  | Some x8303 ->
                                      ignore
                                        (Ojs.call x8302 "push"
                                           [|(GLuint.t_to_js x8303)|])
                                  | None -> ());
                                 x8302))|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8317 : 'tags this) ->
        fun ~location:(x8309 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8310 : Int32List.t) ->
            fun ?srcOffset:(x8311 : GLuint.t option) ->
              fun ?srcLength:(x8312 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8319 = this_to_js Obj.magic x8317 in
                     Ojs.call (Ojs.get_prop_ascii x8319 "uniform1iv") "apply"
                       [|x8319;((let x8313 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8313 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8309)|]);
                                 ignore
                                   (Ojs.call x8313 "push"
                                      [|(Int32List.t_to_js x8310)|]);
                                 (match x8311 with
                                  | Some x8315 ->
                                      ignore
                                        (Ojs.call x8313 "push"
                                           [|(GLuint.t_to_js x8315)|])
                                  | None -> ());
                                 (match x8312 with
                                  | Some x8314 ->
                                      ignore
                                        (Ojs.call x8313 "push"
                                           [|(GLuint.t_to_js x8314)|])
                                  | None -> ());
                                 x8313))|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8328 : 'tags this) ->
        fun ~location:(x8320 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8321 : Float32List.t) ->
            fun ?srcOffset:(x8322 : GLuint.t option) ->
              fun ?srcLength:(x8323 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8330 = this_to_js Obj.magic x8328 in
                     Ojs.call (Ojs.get_prop_ascii x8330 "uniform2fv") "apply"
                       [|x8330;((let x8324 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8324 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8320)|]);
                                 ignore
                                   (Ojs.call x8324 "push"
                                      [|(Float32List.t_to_js x8321)|]);
                                 (match x8322 with
                                  | Some x8326 ->
                                      ignore
                                        (Ojs.call x8324 "push"
                                           [|(GLuint.t_to_js x8326)|])
                                  | None -> ());
                                 (match x8323 with
                                  | Some x8325 ->
                                      ignore
                                        (Ojs.call x8324 "push"
                                           [|(GLuint.t_to_js x8325)|])
                                  | None -> ());
                                 x8324))|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8339 : 'tags this) ->
        fun ~location:(x8331 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8332 : Int32List.t) ->
            fun ?srcOffset:(x8333 : GLuint.t option) ->
              fun ?srcLength:(x8334 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8341 = this_to_js Obj.magic x8339 in
                     Ojs.call (Ojs.get_prop_ascii x8341 "uniform2iv") "apply"
                       [|x8341;((let x8335 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8335 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8331)|]);
                                 ignore
                                   (Ojs.call x8335 "push"
                                      [|(Int32List.t_to_js x8332)|]);
                                 (match x8333 with
                                  | Some x8337 ->
                                      ignore
                                        (Ojs.call x8335 "push"
                                           [|(GLuint.t_to_js x8337)|])
                                  | None -> ());
                                 (match x8334 with
                                  | Some x8336 ->
                                      ignore
                                        (Ojs.call x8335 "push"
                                           [|(GLuint.t_to_js x8336)|])
                                  | None -> ());
                                 x8335))|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8350 : 'tags this) ->
        fun ~location:(x8342 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8343 : Float32List.t) ->
            fun ?srcOffset:(x8344 : GLuint.t option) ->
              fun ?srcLength:(x8345 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8352 = this_to_js Obj.magic x8350 in
                     Ojs.call (Ojs.get_prop_ascii x8352 "uniform3fv") "apply"
                       [|x8352;((let x8346 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8346 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8342)|]);
                                 ignore
                                   (Ojs.call x8346 "push"
                                      [|(Float32List.t_to_js x8343)|]);
                                 (match x8344 with
                                  | Some x8348 ->
                                      ignore
                                        (Ojs.call x8346 "push"
                                           [|(GLuint.t_to_js x8348)|])
                                  | None -> ());
                                 (match x8345 with
                                  | Some x8347 ->
                                      ignore
                                        (Ojs.call x8346 "push"
                                           [|(GLuint.t_to_js x8347)|])
                                  | None -> ());
                                 x8346))|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8361 : 'tags this) ->
        fun ~location:(x8353 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8354 : Int32List.t) ->
            fun ?srcOffset:(x8355 : GLuint.t option) ->
              fun ?srcLength:(x8356 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8363 = this_to_js Obj.magic x8361 in
                     Ojs.call (Ojs.get_prop_ascii x8363 "uniform3iv") "apply"
                       [|x8363;((let x8357 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8357 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8353)|]);
                                 ignore
                                   (Ojs.call x8357 "push"
                                      [|(Int32List.t_to_js x8354)|]);
                                 (match x8355 with
                                  | Some x8359 ->
                                      ignore
                                        (Ojs.call x8357 "push"
                                           [|(GLuint.t_to_js x8359)|])
                                  | None -> ());
                                 (match x8356 with
                                  | Some x8358 ->
                                      ignore
                                        (Ojs.call x8357 "push"
                                           [|(GLuint.t_to_js x8358)|])
                                  | None -> ());
                                 x8357))|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8372 : 'tags this) ->
        fun ~location:(x8364 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8365 : Float32List.t) ->
            fun ?srcOffset:(x8366 : GLuint.t option) ->
              fun ?srcLength:(x8367 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8374 = this_to_js Obj.magic x8372 in
                     Ojs.call (Ojs.get_prop_ascii x8374 "uniform4fv") "apply"
                       [|x8374;((let x8368 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8368 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8364)|]);
                                 ignore
                                   (Ojs.call x8368 "push"
                                      [|(Float32List.t_to_js x8365)|]);
                                 (match x8366 with
                                  | Some x8370 ->
                                      ignore
                                        (Ojs.call x8368 "push"
                                           [|(GLuint.t_to_js x8370)|])
                                  | None -> ());
                                 (match x8367 with
                                  | Some x8369 ->
                                      ignore
                                        (Ojs.call x8368 "push"
                                           [|(GLuint.t_to_js x8369)|])
                                  | None -> ());
                                 x8368))|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8383 : 'tags this) ->
        fun ~location:(x8375 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8376 : Int32List.t) ->
            fun ?srcOffset:(x8377 : GLuint.t option) ->
              fun ?srcLength:(x8378 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8385 = this_to_js Obj.magic x8383 in
                     Ojs.call (Ojs.get_prop_ascii x8385 "uniform4iv") "apply"
                       [|x8385;((let x8379 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8379 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8375)|]);
                                 ignore
                                   (Ojs.call x8379 "push"
                                      [|(Int32List.t_to_js x8376)|]);
                                 (match x8377 with
                                  | Some x8381 ->
                                      ignore
                                        (Ojs.call x8379 "push"
                                           [|(GLuint.t_to_js x8381)|])
                                  | None -> ());
                                 (match x8378 with
                                  | Some x8380 ->
                                      ignore
                                        (Ojs.call x8379 "push"
                                           [|(GLuint.t_to_js x8380)|])
                                  | None -> ());
                                 x8379))|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8395 : 'tags this) ->
        fun ~location:(x8386 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8387 : GLboolean.t) ->
            fun ~data:(x8388 : Float32List.t) ->
              fun ?srcOffset:(x8389 : GLuint.t option) ->
                fun ?srcLength:(x8390 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8397 = this_to_js Obj.magic x8395 in
                       Ojs.call (Ojs.get_prop_ascii x8397 "uniformMatrix2fv")
                         "apply"
                         [|x8397;((let x8391 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8391 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8386)|]);
                                   ignore
                                     (Ojs.call x8391 "push"
                                        [|(GLboolean.t_to_js x8387)|]);
                                   ignore
                                     (Ojs.call x8391 "push"
                                        [|(Float32List.t_to_js x8388)|]);
                                   (match x8389 with
                                    | Some x8393 ->
                                        ignore
                                          (Ojs.call x8391 "push"
                                             [|(GLuint.t_to_js x8393)|])
                                    | None -> ());
                                   (match x8390 with
                                    | Some x8392 ->
                                        ignore
                                          (Ojs.call x8391 "push"
                                             [|(GLuint.t_to_js x8392)|])
                                    | None -> ());
                                   x8391))|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8407 : 'tags this) ->
        fun ~location:(x8398 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8399 : GLboolean.t) ->
            fun ~data:(x8400 : Float32List.t) ->
              fun ?srcOffset:(x8401 : GLuint.t option) ->
                fun ?srcLength:(x8402 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8409 = this_to_js Obj.magic x8407 in
                       Ojs.call (Ojs.get_prop_ascii x8409 "uniformMatrix3fv")
                         "apply"
                         [|x8409;((let x8403 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8403 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8398)|]);
                                   ignore
                                     (Ojs.call x8403 "push"
                                        [|(GLboolean.t_to_js x8399)|]);
                                   ignore
                                     (Ojs.call x8403 "push"
                                        [|(Float32List.t_to_js x8400)|]);
                                   (match x8401 with
                                    | Some x8405 ->
                                        ignore
                                          (Ojs.call x8403 "push"
                                             [|(GLuint.t_to_js x8405)|])
                                    | None -> ());
                                   (match x8402 with
                                    | Some x8404 ->
                                        ignore
                                          (Ojs.call x8403 "push"
                                             [|(GLuint.t_to_js x8404)|])
                                    | None -> ());
                                   x8403))|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8419 : 'tags this) ->
        fun ~location:(x8410 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8411 : GLboolean.t) ->
            fun ~data:(x8412 : Float32List.t) ->
              fun ?srcOffset:(x8413 : GLuint.t option) ->
                fun ?srcLength:(x8414 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8421 = this_to_js Obj.magic x8419 in
                       Ojs.call (Ojs.get_prop_ascii x8421 "uniformMatrix4fv")
                         "apply"
                         [|x8421;((let x8415 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8415 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8410)|]);
                                   ignore
                                     (Ojs.call x8415 "push"
                                        [|(GLboolean.t_to_js x8411)|]);
                                   ignore
                                     (Ojs.call x8415 "push"
                                        [|(Float32List.t_to_js x8412)|]);
                                   (match x8413 with
                                    | Some x8417 ->
                                        ignore
                                          (Ojs.call x8415 "push"
                                             [|(GLuint.t_to_js x8417)|])
                                    | None -> ());
                                   (match x8414 with
                                    | Some x8416 ->
                                        ignore
                                          (Ojs.call x8415 "push"
                                             [|(GLuint.t_to_js x8416)|])
                                    | None -> ());
                                   x8415))|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8431 : 'tags this) ->
        fun ~location:(x8422 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8423 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8424 : GLuint.t option) ->
              fun ?srcLength:(x8425 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8433 = this_to_js Obj.magic x8431 in
                     Ojs.call (Ojs.get_prop_ascii x8433 "uniform1fv") "apply"
                       [|x8433;((let x8426 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8426 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8422)|]);
                                 ignore
                                   (Ojs.call x8426 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8423)|]);
                                 (match x8424 with
                                  | Some x8428 ->
                                      ignore
                                        (Ojs.call x8426 "push"
                                           [|(GLuint.t_to_js x8428)|])
                                  | None -> ());
                                 (match x8425 with
                                  | Some x8427 ->
                                      ignore
                                        (Ojs.call x8426 "push"
                                           [|(GLuint.t_to_js x8427)|])
                                  | None -> ());
                                 x8426))|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8443 : 'tags this) ->
        fun ~location:(x8434 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8435 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8436 : GLuint.t option) ->
              fun ?srcLength:(x8437 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8445 = this_to_js Obj.magic x8443 in
                     Ojs.call (Ojs.get_prop_ascii x8445 "uniform1iv") "apply"
                       [|x8445;((let x8438 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8438 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8434)|]);
                                 ignore
                                   (Ojs.call x8438 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8435)|]);
                                 (match x8436 with
                                  | Some x8440 ->
                                      ignore
                                        (Ojs.call x8438 "push"
                                           [|(GLuint.t_to_js x8440)|])
                                  | None -> ());
                                 (match x8437 with
                                  | Some x8439 ->
                                      ignore
                                        (Ojs.call x8438 "push"
                                           [|(GLuint.t_to_js x8439)|])
                                  | None -> ());
                                 x8438))|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8455 : 'tags this) ->
        fun ~location:(x8446 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8447 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8448 : GLuint.t option) ->
              fun ?srcLength:(x8449 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8457 = this_to_js Obj.magic x8455 in
                     Ojs.call (Ojs.get_prop_ascii x8457 "uniform2fv") "apply"
                       [|x8457;((let x8450 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8450 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8446)|]);
                                 ignore
                                   (Ojs.call x8450 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8447)|]);
                                 (match x8448 with
                                  | Some x8452 ->
                                      ignore
                                        (Ojs.call x8450 "push"
                                           [|(GLuint.t_to_js x8452)|])
                                  | None -> ());
                                 (match x8449 with
                                  | Some x8451 ->
                                      ignore
                                        (Ojs.call x8450 "push"
                                           [|(GLuint.t_to_js x8451)|])
                                  | None -> ());
                                 x8450))|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8467 : 'tags this) ->
        fun ~location:(x8458 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8459 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8460 : GLuint.t option) ->
              fun ?srcLength:(x8461 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8469 = this_to_js Obj.magic x8467 in
                     Ojs.call (Ojs.get_prop_ascii x8469 "uniform2iv") "apply"
                       [|x8469;((let x8462 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8462 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8458)|]);
                                 ignore
                                   (Ojs.call x8462 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8459)|]);
                                 (match x8460 with
                                  | Some x8464 ->
                                      ignore
                                        (Ojs.call x8462 "push"
                                           [|(GLuint.t_to_js x8464)|])
                                  | None -> ());
                                 (match x8461 with
                                  | Some x8463 ->
                                      ignore
                                        (Ojs.call x8462 "push"
                                           [|(GLuint.t_to_js x8463)|])
                                  | None -> ());
                                 x8462))|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8479 : 'tags this) ->
        fun ~location:(x8470 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8471 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8472 : GLuint.t option) ->
              fun ?srcLength:(x8473 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8481 = this_to_js Obj.magic x8479 in
                     Ojs.call (Ojs.get_prop_ascii x8481 "uniform3fv") "apply"
                       [|x8481;((let x8474 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8474 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8470)|]);
                                 ignore
                                   (Ojs.call x8474 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8471)|]);
                                 (match x8472 with
                                  | Some x8476 ->
                                      ignore
                                        (Ojs.call x8474 "push"
                                           [|(GLuint.t_to_js x8476)|])
                                  | None -> ());
                                 (match x8473 with
                                  | Some x8475 ->
                                      ignore
                                        (Ojs.call x8474 "push"
                                           [|(GLuint.t_to_js x8475)|])
                                  | None -> ());
                                 x8474))|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8491 : 'tags this) ->
        fun ~location:(x8482 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8483 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8484 : GLuint.t option) ->
              fun ?srcLength:(x8485 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8493 = this_to_js Obj.magic x8491 in
                     Ojs.call (Ojs.get_prop_ascii x8493 "uniform3iv") "apply"
                       [|x8493;((let x8486 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8486 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8482)|]);
                                 ignore
                                   (Ojs.call x8486 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8483)|]);
                                 (match x8484 with
                                  | Some x8488 ->
                                      ignore
                                        (Ojs.call x8486 "push"
                                           [|(GLuint.t_to_js x8488)|])
                                  | None -> ());
                                 (match x8485 with
                                  | Some x8487 ->
                                      ignore
                                        (Ojs.call x8486 "push"
                                           [|(GLuint.t_to_js x8487)|])
                                  | None -> ());
                                 x8486))|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8503 : 'tags this) ->
        fun ~location:(x8494 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8495 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8496 : GLuint.t option) ->
              fun ?srcLength:(x8497 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8505 = this_to_js Obj.magic x8503 in
                     Ojs.call (Ojs.get_prop_ascii x8505 "uniform4fv") "apply"
                       [|x8505;((let x8498 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8498 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8494)|]);
                                 ignore
                                   (Ojs.call x8498 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8495)|]);
                                 (match x8496 with
                                  | Some x8500 ->
                                      ignore
                                        (Ojs.call x8498 "push"
                                           [|(GLuint.t_to_js x8500)|])
                                  | None -> ());
                                 (match x8497 with
                                  | Some x8499 ->
                                      ignore
                                        (Ojs.call x8498 "push"
                                           [|(GLuint.t_to_js x8499)|])
                                  | None -> ());
                                 x8498))|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8515 : 'tags this) ->
        fun ~location:(x8506 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8507 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8508 : GLuint.t option) ->
              fun ?srcLength:(x8509 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8517 = this_to_js Obj.magic x8515 in
                     Ojs.call (Ojs.get_prop_ascii x8517 "uniform4iv") "apply"
                       [|x8517;((let x8510 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8510 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8506)|]);
                                 ignore
                                   (Ojs.call x8510 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8507)|]);
                                 (match x8508 with
                                  | Some x8512 ->
                                      ignore
                                        (Ojs.call x8510 "push"
                                           [|(GLuint.t_to_js x8512)|])
                                  | None -> ());
                                 (match x8509 with
                                  | Some x8511 ->
                                      ignore
                                        (Ojs.call x8510 "push"
                                           [|(GLuint.t_to_js x8511)|])
                                  | None -> ());
                                 x8510))|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8528 : 'tags this) ->
        fun ~location:(x8518 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8519 : GLboolean.t) ->
            fun ~data:(x8520 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8521 : GLuint.t option) ->
                fun ?srcLength:(x8522 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8530 = this_to_js Obj.magic x8528 in
                       Ojs.call (Ojs.get_prop_ascii x8530 "uniformMatrix2fv")
                         "apply"
                         [|x8530;((let x8523 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8523 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8518)|]);
                                   ignore
                                     (Ojs.call x8523 "push"
                                        [|(GLboolean.t_to_js x8519)|]);
                                   ignore
                                     (Ojs.call x8523 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8520)|]);
                                   (match x8521 with
                                    | Some x8525 ->
                                        ignore
                                          (Ojs.call x8523 "push"
                                             [|(GLuint.t_to_js x8525)|])
                                    | None -> ());
                                   (match x8522 with
                                    | Some x8524 ->
                                        ignore
                                          (Ojs.call x8523 "push"
                                             [|(GLuint.t_to_js x8524)|])
                                    | None -> ());
                                   x8523))|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8541 : 'tags this) ->
        fun ~location:(x8531 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8532 : GLboolean.t) ->
            fun ~data:(x8533 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8534 : GLuint.t option) ->
                fun ?srcLength:(x8535 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8543 = this_to_js Obj.magic x8541 in
                       Ojs.call (Ojs.get_prop_ascii x8543 "uniformMatrix3fv")
                         "apply"
                         [|x8543;((let x8536 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8536 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8531)|]);
                                   ignore
                                     (Ojs.call x8536 "push"
                                        [|(GLboolean.t_to_js x8532)|]);
                                   ignore
                                     (Ojs.call x8536 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8533)|]);
                                   (match x8534 with
                                    | Some x8538 ->
                                        ignore
                                          (Ojs.call x8536 "push"
                                             [|(GLuint.t_to_js x8538)|])
                                    | None -> ());
                                   (match x8535 with
                                    | Some x8537 ->
                                        ignore
                                          (Ojs.call x8536 "push"
                                             [|(GLuint.t_to_js x8537)|])
                                    | None -> ());
                                   x8536))|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8554 : 'tags this) ->
        fun ~location:(x8544 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8545 : GLboolean.t) ->
            fun ~data:(x8546 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8547 : GLuint.t option) ->
                fun ?srcLength:(x8548 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8556 = this_to_js Obj.magic x8554 in
                       Ojs.call (Ojs.get_prop_ascii x8556 "uniformMatrix4fv")
                         "apply"
                         [|x8556;((let x8549 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8549 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8544)|]);
                                   ignore
                                     (Ojs.call x8549 "push"
                                        [|(GLboolean.t_to_js x8545)|]);
                                   ignore
                                     (Ojs.call x8549 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8546)|]);
                                   (match x8547 with
                                    | Some x8551 ->
                                        ignore
                                          (Ojs.call x8549 "push"
                                             [|(GLuint.t_to_js x8551)|])
                                    | None -> ());
                                   (match x8548 with
                                    | Some x8550 ->
                                        ignore
                                          (Ojs.call x8549 "push"
                                             [|(GLuint.t_to_js x8550)|])
                                    | None -> ());
                                   x8549))|])
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObject =
  struct
    type t = [ `WebGLVertexArrayObject ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8558 : Ojs.t) -> t_of_js x8558
    and t_0_to_js : t_0 -> Ojs.t = fun (x8557 : t) -> t_to_js x8557
    type tags = [ `WebGLVertexArrayObject ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8561 : Ojs.t) -> intf_of_js __tags_of_js x8561
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8559 : __tags intf) -> intf_to_js __tags_to_js x8559
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject") 
             [||])
  end
module WebGLTransformFeedback =
  struct
    type t = [ `WebGLTransformFeedback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8564 : Ojs.t) -> t_of_js x8564
    and t_0_to_js : t_0 -> Ojs.t = fun (x8563 : t) -> t_to_js x8563
    type tags = [ `WebGLTransformFeedback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8567 : Ojs.t) -> intf_of_js __tags_of_js x8567
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8565 : __tags intf) -> intf_to_js __tags_to_js x8565
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback") 
             [||])
  end
module WebGLSync =
  struct
    type t = [ `WebGLSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8570 : Ojs.t) -> t_of_js x8570
    and t_0_to_js : t_0 -> Ojs.t = fun (x8569 : t) -> t_to_js x8569
    type tags = [ `WebGLSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8573 : Ojs.t) -> intf_of_js __tags_of_js x8573
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8571 : __tags intf) -> intf_to_js __tags_to_js x8571
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSync")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSync") [||])
  end
module WebGLSampler =
  struct
    type t = [ `WebGLSampler ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8576 : Ojs.t) -> t_of_js x8576
    and t_0_to_js : t_0 -> Ojs.t = fun (x8575 : t) -> t_to_js x8575
    type tags = [ `WebGLSampler ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8579 : Ojs.t) -> intf_of_js __tags_of_js x8579
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8577 : __tags intf) -> intf_to_js __tags_to_js x8577
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSampler") [||])
  end
module WebGLQuery =
  struct
    type t = [ `WebGLQuery ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8582 : Ojs.t) -> t_of_js x8582
    and t_0_to_js : t_0 -> Ojs.t = fun (x8581 : t) -> t_to_js x8581
    type tags = [ `WebGLQuery ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8585 : Ojs.t) -> intf_of_js __tags_of_js x8585
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8583 : __tags intf) -> intf_to_js __tags_to_js x8583
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLQuery") [||])
  end
module Uint32List =
  struct
    type t = (Uint32Array.t_0, GLuint.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x8590 : Ojs.t) ->
        or_array_of_js Uint32Array.t_0_of_js GLuint.t_of_js x8590
    and t_to_js : t -> Ojs.t =
      fun (x8587 : (Uint32Array.t_0, GLuint.t) or_array) ->
        or_array_to_js Uint32Array.t_0_to_js GLuint.t_to_js x8587
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8594 : Ojs.t) -> t_of_js x8594
    and t_0_to_js : t_0 -> Ojs.t = fun (x8593 : t) -> t_to_js x8593
  end
module GLuint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x8596 : Ojs.t) -> Ojs.float_of_js x8596
    and t_to_js : t -> Ojs.t = fun (x8595 : float) -> Ojs.float_to_js x8595
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8598 : Ojs.t) -> t_of_js x8598
    and t_0_to_js : t_0 -> Ojs.t = fun (x8597 : t) -> t_to_js x8597
  end
module GLint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x8600 : Ojs.t) -> Ojs.float_of_js x8600
    and t_to_js : t -> Ojs.t = fun (x8599 : float) -> Ojs.float_to_js x8599
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8602 : Ojs.t) -> t_of_js x8602
    and t_0_to_js : t_0 -> Ojs.t = fun (x8601 : t) -> t_to_js x8601
  end
module WebGL2RenderingContextBase =
  struct
    type t = [ `WebGL2RenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8604 : Ojs.t) -> t_of_js x8604
    and t_0_to_js : t_0 -> Ojs.t = fun (x8603 : t) -> t_to_js x8603
    type tags = [ `WebGL2RenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8607 : Ojs.t) -> intf_of_js __tags_of_js x8607
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8605 : __tags intf) -> intf_to_js __tags_to_js x8605
    let (beginQuery :
      'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit) =
      fun (x8611 : 'tags this) ->
        fun ~target:(x8609 : GLenum.t) ->
          fun ~query:(x8610 : WebGLQuery.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8611) "beginQuery"
                 [|(GLenum.t_to_js x8609);(WebGLQuery.t_to_js x8610)|])
    let (beginTransformFeedback :
      'tags this -> primitiveMode:GLenum.t -> unit) =
      fun (x8614 : 'tags this) ->
        fun ~primitiveMode:(x8613 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8614) "beginTransformFeedback"
               [|(GLenum.t_to_js x8613)|])
    let (bindBufferBase :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t -> buffer:WebGLBuffer.t or_null -> unit)
      =
      fun (x8620 : 'tags this) ->
        fun ~target:(x8616 : GLenum.t) ->
          fun ~index:(x8617 : GLuint.t) ->
            fun ~buffer:(x8618 : WebGLBuffer.t or_null) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8620) "bindBufferBase"
                   [|(GLenum.t_to_js x8616);(GLuint.t_to_js x8617);(or_null_to_js
                                                                    WebGLBuffer.t_to_js
                                                                    x8618)|])
    let (bindBufferRange :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t ->
            buffer:WebGLBuffer.t or_null ->
              offset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x8628 : 'tags this) ->
        fun ~target:(x8622 : GLenum.t) ->
          fun ~index:(x8623 : GLuint.t) ->
            fun ~buffer:(x8624 : WebGLBuffer.t or_null) ->
              fun ~offset:(x8626 : GLintptr.t) ->
                fun ~size:(x8627 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8628) "bindBufferRange"
                       [|(GLenum.t_to_js x8622);(GLuint.t_to_js x8623);(
                         or_null_to_js WebGLBuffer.t_to_js x8624);(GLintptr.t_to_js
                                                                    x8626);(
                         GLsizeiptr.t_to_js x8627)|])
    let (bindSampler :
      'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t or_null -> unit)
      =
      fun (x8633 : 'tags this) ->
        fun ~unit:(x8630 : GLuint.t) ->
          fun ~sampler:(x8631 : WebGLSampler.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8633) "bindSampler"
                 [|(GLuint.t_to_js x8630);(or_null_to_js WebGLSampler.t_to_js
                                             x8631)|])
    let (bindTransformFeedback :
      'tags this ->
        target:GLenum.t -> tf:WebGLTransformFeedback.t or_null -> unit)
      =
      fun (x8638 : 'tags this) ->
        fun ~target:(x8635 : GLenum.t) ->
          fun ~tf:(x8636 : WebGLTransformFeedback.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8638) "bindTransformFeedback"
                 [|(GLenum.t_to_js x8635);(or_null_to_js
                                             WebGLTransformFeedback.t_to_js
                                             x8636)|])
    let (bindVertexArray :
      'tags this -> array:WebGLVertexArrayObject.t or_null -> unit) =
      fun (x8642 : 'tags this) ->
        fun ~array:(x8640 : WebGLVertexArrayObject.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8642) "bindVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x8640)|])
    let (blitFramebuffer :
      'tags this ->
        srcX0:GLint.t ->
          srcY0:GLint.t ->
            srcX1:GLint.t ->
              srcY1:GLint.t ->
                dstX0:GLint.t ->
                  dstY0:GLint.t ->
                    dstX1:GLint.t ->
                      dstY1:GLint.t ->
                        mask:GLbitfield.t -> filter:GLenum.t -> unit)
      =
      fun (x8654 : 'tags this) ->
        fun ~srcX0:(x8644 : GLint.t) ->
          fun ~srcY0:(x8645 : GLint.t) ->
            fun ~srcX1:(x8646 : GLint.t) ->
              fun ~srcY1:(x8647 : GLint.t) ->
                fun ~dstX0:(x8648 : GLint.t) ->
                  fun ~dstY0:(x8649 : GLint.t) ->
                    fun ~dstX1:(x8650 : GLint.t) ->
                      fun ~dstY1:(x8651 : GLint.t) ->
                        fun ~mask:(x8652 : GLbitfield.t) ->
                          fun ~filter:(x8653 : GLenum.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8654)
                                 "blitFramebuffer"
                                 [|(GLint.t_to_js x8644);(GLint.t_to_js x8645);(
                                   GLint.t_to_js x8646);(GLint.t_to_js x8647);(
                                   GLint.t_to_js x8648);(GLint.t_to_js x8649);(
                                   GLint.t_to_js x8650);(GLint.t_to_js x8651);(
                                   GLbitfield.t_to_js x8652);(GLenum.t_to_js
                                                                x8653)|])
    let (clearBufferfi :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit)
      =
      fun (x8660 : 'tags this) ->
        fun ~buffer:(x8656 : GLenum.t) ->
          fun ~drawbuffer:(x8657 : GLint.t) ->
            fun ~depth:(x8658 : GLfloat.t) ->
              fun ~stencil:(x8659 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x8660) "clearBufferfi"
                     [|(GLenum.t_to_js x8656);(GLint.t_to_js x8657);(
                       GLfloat.t_to_js x8658);(GLint.t_to_js x8659)|])
    let (clearBufferfv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Float32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8668 : 'tags this) ->
        fun ~buffer:(x8662 : GLenum.t) ->
          fun ~drawbuffer:(x8663 : GLint.t) ->
            fun ~values:(x8664 : Float32List.t) ->
              fun ?srcOffset:(x8665 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8670 = this_to_js Obj.magic x8668 in
                     Ojs.call (Ojs.get_prop_ascii x8670 "clearBufferfv")
                       "apply"
                       [|x8670;((let x8666 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8666 "push"
                                      [|(GLenum.t_to_js x8662)|]);
                                 ignore
                                   (Ojs.call x8666 "push"
                                      [|(GLint.t_to_js x8663)|]);
                                 ignore
                                   (Ojs.call x8666 "push"
                                      [|(Float32List.t_to_js x8664)|]);
                                 (match x8665 with
                                  | Some x8667 ->
                                      ignore
                                        (Ojs.call x8666 "push"
                                           [|(GLuint.t_to_js x8667)|])
                                  | None -> ());
                                 x8666))|])
    let (clearBufferiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Int32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8677 : 'tags this) ->
        fun ~buffer:(x8671 : GLenum.t) ->
          fun ~drawbuffer:(x8672 : GLint.t) ->
            fun ~values:(x8673 : Int32List.t) ->
              fun ?srcOffset:(x8674 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8679 = this_to_js Obj.magic x8677 in
                     Ojs.call (Ojs.get_prop_ascii x8679 "clearBufferiv")
                       "apply"
                       [|x8679;((let x8675 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8675 "push"
                                      [|(GLenum.t_to_js x8671)|]);
                                 ignore
                                   (Ojs.call x8675 "push"
                                      [|(GLint.t_to_js x8672)|]);
                                 ignore
                                   (Ojs.call x8675 "push"
                                      [|(Int32List.t_to_js x8673)|]);
                                 (match x8674 with
                                  | Some x8676 ->
                                      ignore
                                        (Ojs.call x8675 "push"
                                           [|(GLuint.t_to_js x8676)|])
                                  | None -> ());
                                 x8675))|])
    let (clearBufferuiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Uint32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8686 : 'tags this) ->
        fun ~buffer:(x8680 : GLenum.t) ->
          fun ~drawbuffer:(x8681 : GLint.t) ->
            fun ~values:(x8682 : Uint32List.t) ->
              fun ?srcOffset:(x8683 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8688 = this_to_js Obj.magic x8686 in
                     Ojs.call (Ojs.get_prop_ascii x8688 "clearBufferuiv")
                       "apply"
                       [|x8688;((let x8684 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8684 "push"
                                      [|(GLenum.t_to_js x8680)|]);
                                 ignore
                                   (Ojs.call x8684 "push"
                                      [|(GLint.t_to_js x8681)|]);
                                 ignore
                                   (Ojs.call x8684 "push"
                                      [|(Uint32List.t_to_js x8682)|]);
                                 (match x8683 with
                                  | Some x8685 ->
                                      ignore
                                        (Ojs.call x8684 "push"
                                           [|(GLuint.t_to_js x8685)|])
                                  | None -> ());
                                 x8684))|])
    let (clientWaitSync :
      'tags this ->
        sync:WebGLSync.t ->
          flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t)
      =
      fun (x8692 : 'tags this) ->
        fun ~sync:(x8689 : WebGLSync.t) ->
          fun ~flags:(x8690 : GLbitfield.t) ->
            fun ~timeout:(x8691 : GLuint64.t) ->
              GLenum.t_of_js
                (Ojs.call (this_to_js Obj.magic x8692) "clientWaitSync"
                   [|(WebGLSync.t_to_js x8689);(GLbitfield.t_to_js x8690);(
                     GLuint64.t_to_js x8691)|])
    let (compressedTexImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8703 : 'tags this) ->
        fun ~target:(x8694 : GLenum.t) ->
          fun ~level:(x8695 : GLint.t) ->
            fun ~internalformat:(x8696 : GLenum.t) ->
              fun ~width:(x8697 : GLsizei.t) ->
                fun ~height:(x8698 : GLsizei.t) ->
                  fun ~depth:(x8699 : GLsizei.t) ->
                    fun ~border:(x8700 : GLint.t) ->
                      fun ~imageSize:(x8701 : GLsizei.t) ->
                        fun ~offset:(x8702 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8703)
                               "compressedTexImage3D"
                               [|(GLenum.t_to_js x8694);(GLint.t_to_js x8695);(
                                 GLenum.t_to_js x8696);(GLsizei.t_to_js x8697);(
                                 GLsizei.t_to_js x8698);(GLsizei.t_to_js
                                                           x8699);(GLint.t_to_js
                                                                    x8700);(
                                 GLsizei.t_to_js x8701);(GLintptr.t_to_js
                                                           x8702)|])
    let (compressedTexImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8718 : 'tags this) ->
        fun ~target:(x8705 : GLenum.t) ->
          fun ~level:(x8706 : GLint.t) ->
            fun ~internalformat:(x8707 : GLenum.t) ->
              fun ~width:(x8708 : GLsizei.t) ->
                fun ~height:(x8709 : GLsizei.t) ->
                  fun ~depth:(x8710 : GLsizei.t) ->
                    fun ~border:(x8711 : GLint.t) ->
                      fun ~srcData:(x8712 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x8713 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x8714 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x8720 = this_to_js Obj.magic x8718 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x8720
                                      "compressedTexImage3D") "apply"
                                   [|x8720;((let x8715 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x8715 "push"
                                                  [|(GLenum.t_to_js x8705)|]);
                                             ignore
                                               (Ojs.call x8715 "push"
                                                  [|(GLint.t_to_js x8706)|]);
                                             ignore
                                               (Ojs.call x8715 "push"
                                                  [|(GLenum.t_to_js x8707)|]);
                                             ignore
                                               (Ojs.call x8715 "push"
                                                  [|(GLsizei.t_to_js x8708)|]);
                                             ignore
                                               (Ojs.call x8715 "push"
                                                  [|(GLsizei.t_to_js x8709)|]);
                                             ignore
                                               (Ojs.call x8715 "push"
                                                  [|(GLsizei.t_to_js x8710)|]);
                                             ignore
                                               (Ojs.call x8715 "push"
                                                  [|(GLint.t_to_js x8711)|]);
                                             ignore
                                               (Ojs.call x8715 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x8712)|]);
                                             (match x8713 with
                                              | Some x8717 ->
                                                  ignore
                                                    (Ojs.call x8715 "push"
                                                       [|(GLuint.t_to_js
                                                            x8717)|])
                                              | None -> ());
                                             (match x8714 with
                                              | Some x8716 ->
                                                  ignore
                                                    (Ojs.call x8715 "push"
                                                       [|(GLuint.t_to_js
                                                            x8716)|])
                                              | None -> ());
                                             x8715))|])
    let (compressedTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8732 : 'tags this) ->
        fun ~target:(x8721 : GLenum.t) ->
          fun ~level:(x8722 : GLint.t) ->
            fun ~xoffset:(x8723 : GLint.t) ->
              fun ~yoffset:(x8724 : GLint.t) ->
                fun ~zoffset:(x8725 : GLint.t) ->
                  fun ~width:(x8726 : GLsizei.t) ->
                    fun ~height:(x8727 : GLsizei.t) ->
                      fun ~depth:(x8728 : GLsizei.t) ->
                        fun ~format:(x8729 : GLenum.t) ->
                          fun ~imageSize:(x8730 : GLsizei.t) ->
                            fun ~offset:(x8731 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x8732)
                                   "compressedTexSubImage3D"
                                   [|(GLenum.t_to_js x8721);(GLint.t_to_js
                                                               x8722);(
                                     GLint.t_to_js x8723);(GLint.t_to_js
                                                             x8724);(
                                     GLint.t_to_js x8725);(GLsizei.t_to_js
                                                             x8726);(
                                     GLsizei.t_to_js x8727);(GLsizei.t_to_js
                                                               x8728);(
                                     GLenum.t_to_js x8729);(GLsizei.t_to_js
                                                              x8730);(
                                     GLintptr.t_to_js x8731)|])
    let (compressedTexSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            ?srcOffset:GLuint.t ->
                              ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8749 : 'tags this) ->
        fun ~target:(x8734 : GLenum.t) ->
          fun ~level:(x8735 : GLint.t) ->
            fun ~xoffset:(x8736 : GLint.t) ->
              fun ~yoffset:(x8737 : GLint.t) ->
                fun ~zoffset:(x8738 : GLint.t) ->
                  fun ~width:(x8739 : GLsizei.t) ->
                    fun ~height:(x8740 : GLsizei.t) ->
                      fun ~depth:(x8741 : GLsizei.t) ->
                        fun ~format:(x8742 : GLenum.t) ->
                          fun ~srcData:(x8743 : ArrayBufferView.t_0) ->
                            fun ?srcOffset:(x8744 : GLuint.t option) ->
                              fun
                                ?srcLengthOverride:(x8745 : GLuint.t option)
                                ->
                                fun () ->
                                  ignore
                                    (let x8751 = this_to_js Obj.magic x8749 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x8751
                                          "compressedTexSubImage3D") "apply"
                                       [|x8751;((let x8746 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(GLenum.t_to_js x8734)|]);
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(GLint.t_to_js x8735)|]);
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(GLint.t_to_js x8736)|]);
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(GLint.t_to_js x8737)|]);
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(GLint.t_to_js x8738)|]);
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(GLsizei.t_to_js
                                                           x8739)|]);
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(GLsizei.t_to_js
                                                           x8740)|]);
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(GLsizei.t_to_js
                                                           x8741)|]);
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(GLenum.t_to_js x8742)|]);
                                                 ignore
                                                   (Ojs.call x8746 "push"
                                                      [|(ArrayBufferView.t_0_to_js
                                                           x8743)|]);
                                                 (match x8744 with
                                                  | Some x8748 ->
                                                      ignore
                                                        (Ojs.call x8746
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x8748)|])
                                                  | None -> ());
                                                 (match x8745 with
                                                  | Some x8747 ->
                                                      ignore
                                                        (Ojs.call x8746
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x8747)|])
                                                  | None -> ());
                                                 x8746))|])
    let (copyBufferSubData :
      'tags this ->
        readTarget:GLenum.t ->
          writeTarget:GLenum.t ->
            readOffset:GLintptr.t ->
              writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x8757 : 'tags this) ->
        fun ~readTarget:(x8752 : GLenum.t) ->
          fun ~writeTarget:(x8753 : GLenum.t) ->
            fun ~readOffset:(x8754 : GLintptr.t) ->
              fun ~writeOffset:(x8755 : GLintptr.t) ->
                fun ~size:(x8756 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8757)
                       "copyBufferSubData"
                       [|(GLenum.t_to_js x8752);(GLenum.t_to_js x8753);(
                         GLintptr.t_to_js x8754);(GLintptr.t_to_js x8755);(
                         GLsizeiptr.t_to_js x8756)|])
    let (copyTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  x:GLint.t ->
                    y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x8768 : 'tags this) ->
        fun ~target:(x8759 : GLenum.t) ->
          fun ~level:(x8760 : GLint.t) ->
            fun ~xoffset:(x8761 : GLint.t) ->
              fun ~yoffset:(x8762 : GLint.t) ->
                fun ~zoffset:(x8763 : GLint.t) ->
                  fun ~x:(x8764 : GLint.t) ->
                    fun ~y:(x8765 : GLint.t) ->
                      fun ~width:(x8766 : GLsizei.t) ->
                        fun ~height:(x8767 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8768)
                               "copyTexSubImage3D"
                               [|(GLenum.t_to_js x8759);(GLint.t_to_js x8760);(
                                 GLint.t_to_js x8761);(GLint.t_to_js x8762);(
                                 GLint.t_to_js x8763);(GLint.t_to_js x8764);(
                                 GLint.t_to_js x8765);(GLsizei.t_to_js x8766);(
                                 GLsizei.t_to_js x8767)|])
    let (createQuery : 'tags this -> WebGLQuery.t or_null) =
      fun (x8770 : 'tags this) ->
        or_null_of_js WebGLQuery.t_of_js
          (Ojs.call (this_to_js Obj.magic x8770) "createQuery" [||])
    let (createSampler : 'tags this -> WebGLSampler.t or_null) =
      fun (x8773 : 'tags this) ->
        or_null_of_js WebGLSampler.t_of_js
          (Ojs.call (this_to_js Obj.magic x8773) "createSampler" [||])
    let (createTransformFeedback :
      'tags this -> WebGLTransformFeedback.t or_null) =
      fun (x8776 : 'tags this) ->
        or_null_of_js WebGLTransformFeedback.t_of_js
          (Ojs.call (this_to_js Obj.magic x8776) "createTransformFeedback"
             [||])
    let (createVertexArray : 'tags this -> WebGLVertexArrayObject.t or_null)
      =
      fun (x8779 : 'tags this) ->
        or_null_of_js WebGLVertexArrayObject.t_of_js
          (Ojs.call (this_to_js Obj.magic x8779) "createVertexArray" [||])
    let (deleteQuery : 'tags this -> query:WebGLQuery.t or_null -> unit) =
      fun (x8784 : 'tags this) ->
        fun ~query:(x8782 : WebGLQuery.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8784) "deleteQuery"
               [|(or_null_to_js WebGLQuery.t_to_js x8782)|])
    let (deleteSampler :
      'tags this -> sampler:WebGLSampler.t or_null -> unit) =
      fun (x8788 : 'tags this) ->
        fun ~sampler:(x8786 : WebGLSampler.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8788) "deleteSampler"
               [|(or_null_to_js WebGLSampler.t_to_js x8786)|])
    let (deleteSync : 'tags this -> sync:WebGLSync.t or_null -> unit) =
      fun (x8792 : 'tags this) ->
        fun ~sync:(x8790 : WebGLSync.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8792) "deleteSync"
               [|(or_null_to_js WebGLSync.t_to_js x8790)|])
    let (deleteTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t or_null -> unit) =
      fun (x8796 : 'tags this) ->
        fun ~tf:(x8794 : WebGLTransformFeedback.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8796) "deleteTransformFeedback"
               [|(or_null_to_js WebGLTransformFeedback.t_to_js x8794)|])
    let (deleteVertexArray :
      'tags this -> vertexArray:WebGLVertexArrayObject.t or_null -> unit) =
      fun (x8800 : 'tags this) ->
        fun ~vertexArray:(x8798 : WebGLVertexArrayObject.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8800) "deleteVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x8798)|])
    let (drawArraysInstanced :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x8806 : 'tags this) ->
        fun ~mode:(x8802 : GLenum.t) ->
          fun ~first:(x8803 : GLint.t) ->
            fun ~count:(x8804 : GLsizei.t) ->
              fun ~instanceCount:(x8805 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x8806)
                     "drawArraysInstanced"
                     [|(GLenum.t_to_js x8802);(GLint.t_to_js x8803);(
                       GLsizei.t_to_js x8804);(GLsizei.t_to_js x8805)|])
    let (drawBuffers : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x8810 : 'tags this) ->
        fun ~buffers:(x8808 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8810) "drawBuffers"
               [|(Ojs.list_to_js GLenum.t_to_js x8808)|])
    let (drawElementsInstanced :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x8817 : 'tags this) ->
        fun ~mode:(x8812 : GLenum.t) ->
          fun ~count:(x8813 : GLsizei.t) ->
            fun ~type_:(x8814 : GLenum.t) ->
              fun ~offset:(x8815 : GLintptr.t) ->
                fun ~instanceCount:(x8816 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8817)
                       "drawElementsInstanced"
                       [|(GLenum.t_to_js x8812);(GLsizei.t_to_js x8813);(
                         GLenum.t_to_js x8814);(GLintptr.t_to_js x8815);(
                         GLsizei.t_to_js x8816)|])
    let (drawRangeElements :
      'tags this ->
        mode:GLenum.t ->
          start:GLuint.t ->
            end_:GLuint.t ->
              count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x8825 : 'tags this) ->
        fun ~mode:(x8819 : GLenum.t) ->
          fun ~start:(x8820 : GLuint.t) ->
            fun ~end_:(x8821 : GLuint.t) ->
              fun ~count:(x8822 : GLsizei.t) ->
                fun ~type_:(x8823 : GLenum.t) ->
                  fun ~offset:(x8824 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8825)
                         "drawRangeElements"
                         [|(GLenum.t_to_js x8819);(GLuint.t_to_js x8820);(
                           GLuint.t_to_js x8821);(GLsizei.t_to_js x8822);(
                           GLenum.t_to_js x8823);(GLintptr.t_to_js x8824)|])
    let (endQuery : 'tags this -> target:GLenum.t -> unit) =
      fun (x8828 : 'tags this) ->
        fun ~target:(x8827 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8828) "endQuery"
               [|(GLenum.t_to_js x8827)|])
    let (endTransformFeedback : 'tags this -> unit) =
      fun (x8830 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x8830) "endTransformFeedback" [||])
    let (fenceSync :
      'tags this ->
        condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t or_null)
      =
      fun (x8834 : 'tags this) ->
        fun ~condition:(x8832 : GLenum.t) ->
          fun ~flags:(x8833 : GLbitfield.t) ->
            or_null_of_js WebGLSync.t_of_js
              (Ojs.call (this_to_js Obj.magic x8834) "fenceSync"
                 [|(GLenum.t_to_js x8832);(GLbitfield.t_to_js x8833)|])
    let (framebufferTextureLayer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t or_null ->
              level:GLint.t -> layer:GLint.t -> unit)
      =
      fun (x8843 : 'tags this) ->
        fun ~target:(x8837 : GLenum.t) ->
          fun ~attachment:(x8838 : GLenum.t) ->
            fun ~texture:(x8839 : WebGLTexture.t or_null) ->
              fun ~level:(x8841 : GLint.t) ->
                fun ~layer:(x8842 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8843)
                       "framebufferTextureLayer"
                       [|(GLenum.t_to_js x8837);(GLenum.t_to_js x8838);(
                         or_null_to_js WebGLTexture.t_to_js x8839);(GLint.t_to_js
                                                                    x8841);(
                         GLint.t_to_js x8842)|])
    let (getActiveUniformBlockName :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> string or_null)
      =
      fun (x8847 : 'tags this) ->
        fun ~program:(x8845 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x8846 : GLuint.t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x8847)
                 "getActiveUniformBlockName"
                 [|(WebGLProgram.t_to_js x8845);(GLuint.t_to_js x8846)|])
    let (getActiveUniformBlockParameter :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any)
      =
      fun (x8853 : 'tags this) ->
        fun ~program:(x8850 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x8851 : GLuint.t) ->
            fun ~pname:(x8852 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x8853)
                   "getActiveUniformBlockParameter"
                   [|(WebGLProgram.t_to_js x8850);(GLuint.t_to_js x8851);(
                     GLenum.t_to_js x8852)|])
    let (getActiveUniforms :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t list -> pname:GLenum.t -> any)
      =
      fun (x8859 : 'tags this) ->
        fun ~program:(x8855 : WebGLProgram.t) ->
          fun ~uniformIndices:(x8856 : GLuint.t list) ->
            fun ~pname:(x8858 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x8859) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x8855);(Ojs.list_to_js
                                                     GLuint.t_to_js x8856);(
                     GLenum.t_to_js x8858)|])
    let (getBufferSubData :
      'tags this ->
        target:GLenum.t ->
          srcByteOffset:GLintptr.t ->
            dstBuffer:ArrayBufferView.t_0 ->
              ?dstOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8869 : 'tags this) ->
        fun ~target:(x8861 : GLenum.t) ->
          fun ~srcByteOffset:(x8862 : GLintptr.t) ->
            fun ~dstBuffer:(x8863 : ArrayBufferView.t_0) ->
              fun ?dstOffset:(x8864 : GLuint.t option) ->
                fun ?length:(x8865 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8871 = this_to_js Obj.magic x8869 in
                       Ojs.call (Ojs.get_prop_ascii x8871 "getBufferSubData")
                         "apply"
                         [|x8871;((let x8866 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8866 "push"
                                        [|(GLenum.t_to_js x8861)|]);
                                   ignore
                                     (Ojs.call x8866 "push"
                                        [|(GLintptr.t_to_js x8862)|]);
                                   ignore
                                     (Ojs.call x8866 "push"
                                        [|(ArrayBufferView.t_0_to_js x8863)|]);
                                   (match x8864 with
                                    | Some x8868 ->
                                        ignore
                                          (Ojs.call x8866 "push"
                                             [|(GLuint.t_to_js x8868)|])
                                    | None -> ());
                                   (match x8865 with
                                    | Some x8867 ->
                                        ignore
                                          (Ojs.call x8866 "push"
                                             [|(GLuint.t_to_js x8867)|])
                                    | None -> ());
                                   x8866))|])
    let (getFragDataLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x8874 : 'tags this) ->
        fun ~program:(x8872 : WebGLProgram.t) ->
          fun ~name:(x8873 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x8874) "getFragDataLocation"
                 [|(WebGLProgram.t_to_js x8872);(Ojs.string_to_js x8873)|])
    let (getIndexedParameter :
      'tags this -> target:GLenum.t -> index:GLuint.t -> any) =
      fun (x8878 : 'tags this) ->
        fun ~target:(x8876 : GLenum.t) ->
          fun ~index:(x8877 : GLuint.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x8878) "getIndexedParameter"
                 [|(GLenum.t_to_js x8876);(GLuint.t_to_js x8877)|])
    let (getInternalformatParameter :
      'tags this ->
        target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x8883 : 'tags this) ->
        fun ~target:(x8880 : GLenum.t) ->
          fun ~internalformat:(x8881 : GLenum.t) ->
            fun ~pname:(x8882 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x8883)
                   "getInternalformatParameter"
                   [|(GLenum.t_to_js x8880);(GLenum.t_to_js x8881);(GLenum.t_to_js
                                                                    x8882)|])
    let (getQuery :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t or_null)
      =
      fun (x8887 : 'tags this) ->
        fun ~target:(x8885 : GLenum.t) ->
          fun ~pname:(x8886 : GLenum.t) ->
            or_null_of_js WebGLQuery.t_of_js
              (Ojs.call (this_to_js Obj.magic x8887) "getQuery"
                 [|(GLenum.t_to_js x8885);(GLenum.t_to_js x8886)|])
    let (getQueryParameter :
      'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any) =
      fun (x8892 : 'tags this) ->
        fun ~query:(x8890 : WebGLQuery.t) ->
          fun ~pname:(x8891 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x8892) "getQueryParameter"
                 [|(WebGLQuery.t_to_js x8890);(GLenum.t_to_js x8891)|])
    let (getSamplerParameter :
      'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any) =
      fun (x8896 : 'tags this) ->
        fun ~sampler:(x8894 : WebGLSampler.t) ->
          fun ~pname:(x8895 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x8896) "getSamplerParameter"
                 [|(WebGLSampler.t_to_js x8894);(GLenum.t_to_js x8895)|])
    let (getSyncParameter :
      'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any) =
      fun (x8900 : 'tags this) ->
        fun ~sync:(x8898 : WebGLSync.t) ->
          fun ~pname:(x8899 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x8900) "getSyncParameter"
                 [|(WebGLSync.t_to_js x8898);(GLenum.t_to_js x8899)|])
    let (getTransformFeedbackVarying :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x8904 : 'tags this) ->
        fun ~program:(x8902 : WebGLProgram.t) ->
          fun ~index:(x8903 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x8904)
                 "getTransformFeedbackVarying"
                 [|(WebGLProgram.t_to_js x8902);(GLuint.t_to_js x8903)|])
    let (getUniformBlockIndex :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t)
      =
      fun (x8909 : 'tags this) ->
        fun ~program:(x8907 : WebGLProgram.t) ->
          fun ~uniformBlockName:(x8908 : string) ->
            GLuint.t_of_js
              (Ojs.call (this_to_js Obj.magic x8909) "getUniformBlockIndex"
                 [|(WebGLProgram.t_to_js x8907);(Ojs.string_to_js x8908)|])
    let (getUniformIndices :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string list -> GLuint.t list or_null)
      =
      fun (x8914 : 'tags this) ->
        fun ~program:(x8911 : WebGLProgram.t) ->
          fun ~uniformNames:(x8912 : string list) ->
            or_null_of_js
              (fun (x8916 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x8916)
              (Ojs.call (this_to_js Obj.magic x8914) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x8911);(Ojs.list_to_js
                                                   Ojs.string_to_js x8912)|])
    let (invalidateFramebuffer :
      'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit) =
      fun (x8921 : 'tags this) ->
        fun ~target:(x8918 : GLenum.t) ->
          fun ~attachments:(x8919 : GLenum.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8921) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x8918);(Ojs.list_to_js GLenum.t_to_js
                                             x8919)|])
    let (invalidateSubFramebuffer :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t list ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x8930 : 'tags this) ->
        fun ~target:(x8923 : GLenum.t) ->
          fun ~attachments:(x8924 : GLenum.t list) ->
            fun ~x:(x8926 : GLint.t) ->
              fun ~y:(x8927 : GLint.t) ->
                fun ~width:(x8928 : GLsizei.t) ->
                  fun ~height:(x8929 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8930)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x8923);(Ojs.list_to_js
                                                     GLenum.t_to_js x8924);(
                           GLint.t_to_js x8926);(GLint.t_to_js x8927);(
                           GLsizei.t_to_js x8928);(GLsizei.t_to_js x8929)|])
    let (isQuery : 'tags this -> query:WebGLQuery.t or_null -> GLboolean.t) =
      fun (x8934 : 'tags this) ->
        fun ~query:(x8932 : WebGLQuery.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8934) "isQuery"
               [|(or_null_to_js WebGLQuery.t_to_js x8932)|])
    let (isSampler :
      'tags this -> sampler:WebGLSampler.t or_null -> GLboolean.t) =
      fun (x8938 : 'tags this) ->
        fun ~sampler:(x8936 : WebGLSampler.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8938) "isSampler"
               [|(or_null_to_js WebGLSampler.t_to_js x8936)|])
    let (isSync : 'tags this -> sync:WebGLSync.t or_null -> GLboolean.t) =
      fun (x8942 : 'tags this) ->
        fun ~sync:(x8940 : WebGLSync.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8942) "isSync"
               [|(or_null_to_js WebGLSync.t_to_js x8940)|])
    let (isTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t or_null -> GLboolean.t) =
      fun (x8946 : 'tags this) ->
        fun ~tf:(x8944 : WebGLTransformFeedback.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8946) "isTransformFeedback"
               [|(or_null_to_js WebGLTransformFeedback.t_to_js x8944)|])
    let (isVertexArray :
      'tags this ->
        vertexArray:WebGLVertexArrayObject.t or_null -> GLboolean.t)
      =
      fun (x8950 : 'tags this) ->
        fun ~vertexArray:(x8948 : WebGLVertexArrayObject.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8950) "isVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x8948)|])
    let (pauseTransformFeedback : 'tags this -> unit) =
      fun (x8952 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x8952) "pauseTransformFeedback"
             [||])
    let (readBuffer : 'tags this -> src:GLenum.t -> unit) =
      fun (x8955 : 'tags this) ->
        fun ~src:(x8954 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8955) "readBuffer"
               [|(GLenum.t_to_js x8954)|])
    let (renderbufferStorageMultisample :
      'tags this ->
        target:GLenum.t ->
          samples:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x8962 : 'tags this) ->
        fun ~target:(x8957 : GLenum.t) ->
          fun ~samples:(x8958 : GLsizei.t) ->
            fun ~internalformat:(x8959 : GLenum.t) ->
              fun ~width:(x8960 : GLsizei.t) ->
                fun ~height:(x8961 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8962)
                       "renderbufferStorageMultisample"
                       [|(GLenum.t_to_js x8957);(GLsizei.t_to_js x8958);(
                         GLenum.t_to_js x8959);(GLsizei.t_to_js x8960);(
                         GLsizei.t_to_js x8961)|])
    let (resumeTransformFeedback : 'tags this -> unit) =
      fun (x8964 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x8964) "resumeTransformFeedback"
             [||])
    let (samplerParameterf :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x8969 : 'tags this) ->
        fun ~sampler:(x8966 : WebGLSampler.t) ->
          fun ~pname:(x8967 : GLenum.t) ->
            fun ~param:(x8968 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8969) "samplerParameterf"
                   [|(WebGLSampler.t_to_js x8966);(GLenum.t_to_js x8967);(
                     GLfloat.t_to_js x8968)|])
    let (samplerParameteri :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x8974 : 'tags this) ->
        fun ~sampler:(x8971 : WebGLSampler.t) ->
          fun ~pname:(x8972 : GLenum.t) ->
            fun ~param:(x8973 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8974) "samplerParameteri"
                   [|(WebGLSampler.t_to_js x8971);(GLenum.t_to_js x8972);(
                     GLint.t_to_js x8973)|])
    let (texImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8986 : 'tags this) ->
        fun ~target:(x8976 : GLenum.t) ->
          fun ~level:(x8977 : GLint.t) ->
            fun ~internalformat:(x8978 : GLint.t) ->
              fun ~width:(x8979 : GLsizei.t) ->
                fun ~height:(x8980 : GLsizei.t) ->
                  fun ~depth:(x8981 : GLsizei.t) ->
                    fun ~border:(x8982 : GLint.t) ->
                      fun ~format:(x8983 : GLenum.t) ->
                        fun ~type_:(x8984 : GLenum.t) ->
                          fun ~pboOffset:(x8985 : GLintptr.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8986)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x8976);(GLint.t_to_js
                                                             x8977);(
                                   GLint.t_to_js x8978);(GLsizei.t_to_js
                                                           x8979);(GLsizei.t_to_js
                                                                    x8980);(
                                   GLsizei.t_to_js x8981);(GLint.t_to_js
                                                             x8982);(
                                   GLenum.t_to_js x8983);(GLenum.t_to_js
                                                            x8984);(GLintptr.t_to_js
                                                                    x8985)|])
    let (texImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8998 : 'tags this) ->
        fun ~target:(x8988 : GLenum.t) ->
          fun ~level:(x8989 : GLint.t) ->
            fun ~internalformat:(x8990 : GLint.t) ->
              fun ~width:(x8991 : GLsizei.t) ->
                fun ~height:(x8992 : GLsizei.t) ->
                  fun ~depth:(x8993 : GLsizei.t) ->
                    fun ~border:(x8994 : GLint.t) ->
                      fun ~format:(x8995 : GLenum.t) ->
                        fun ~type_:(x8996 : GLenum.t) ->
                          fun ~source:(x8997 : TexImageSource.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8998)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x8988);(GLint.t_to_js
                                                             x8989);(
                                   GLint.t_to_js x8990);(GLsizei.t_to_js
                                                           x8991);(GLsizei.t_to_js
                                                                    x8992);(
                                   GLsizei.t_to_js x8993);(GLint.t_to_js
                                                             x8994);(
                                   GLenum.t_to_js x8995);(GLenum.t_to_js
                                                            x8996);(TexImageSource.t_to_js
                                                                    x8997)|])
    let (texImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x9011 : 'tags this) ->
        fun ~target:(x9000 : GLenum.t) ->
          fun ~level:(x9001 : GLint.t) ->
            fun ~internalformat:(x9002 : GLint.t) ->
              fun ~width:(x9003 : GLsizei.t) ->
                fun ~height:(x9004 : GLsizei.t) ->
                  fun ~depth:(x9005 : GLsizei.t) ->
                    fun ~border:(x9006 : GLint.t) ->
                      fun ~format:(x9007 : GLenum.t) ->
                        fun ~type_:(x9008 : GLenum.t) ->
                          fun ~srcData:(x9009 : ArrayBufferView.t_0 or_null)
                            ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x9011)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x9000);(GLint.t_to_js
                                                             x9001);(
                                   GLint.t_to_js x9002);(GLsizei.t_to_js
                                                           x9003);(GLsizei.t_to_js
                                                                    x9004);(
                                   GLsizei.t_to_js x9005);(GLint.t_to_js
                                                             x9006);(
                                   GLenum.t_to_js x9007);(GLenum.t_to_js
                                                            x9008);(or_null_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x9009)|])
    let (texImage3D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            srcOffset:GLuint.t -> unit)
      =
      fun (x9024 : 'tags this) ->
        fun ~target:(x9013 : GLenum.t) ->
          fun ~level:(x9014 : GLint.t) ->
            fun ~internalformat:(x9015 : GLint.t) ->
              fun ~width:(x9016 : GLsizei.t) ->
                fun ~height:(x9017 : GLsizei.t) ->
                  fun ~depth:(x9018 : GLsizei.t) ->
                    fun ~border:(x9019 : GLint.t) ->
                      fun ~format:(x9020 : GLenum.t) ->
                        fun ~type_:(x9021 : GLenum.t) ->
                          fun ~srcData:(x9022 : ArrayBufferView.t_0) ->
                            fun ~srcOffset:(x9023 : GLuint.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9024)
                                   "texImage3D"
                                   [|(GLenum.t_to_js x9013);(GLint.t_to_js
                                                               x9014);(
                                     GLint.t_to_js x9015);(GLsizei.t_to_js
                                                             x9016);(
                                     GLsizei.t_to_js x9017);(GLsizei.t_to_js
                                                               x9018);(
                                     GLint.t_to_js x9019);(GLenum.t_to_js
                                                             x9020);(
                                     GLenum.t_to_js x9021);(ArrayBufferView.t_0_to_js
                                                              x9022);(
                                     GLuint.t_to_js x9023)|])
    let (texStorage2D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9031 : 'tags this) ->
        fun ~target:(x9026 : GLenum.t) ->
          fun ~levels:(x9027 : GLsizei.t) ->
            fun ~internalformat:(x9028 : GLenum.t) ->
              fun ~width:(x9029 : GLsizei.t) ->
                fun ~height:(x9030 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9031) "texStorage2D"
                       [|(GLenum.t_to_js x9026);(GLsizei.t_to_js x9027);(
                         GLenum.t_to_js x9028);(GLsizei.t_to_js x9029);(
                         GLsizei.t_to_js x9030)|])
    let (texStorage3D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit)
      =
      fun (x9039 : 'tags this) ->
        fun ~target:(x9033 : GLenum.t) ->
          fun ~levels:(x9034 : GLsizei.t) ->
            fun ~internalformat:(x9035 : GLenum.t) ->
              fun ~width:(x9036 : GLsizei.t) ->
                fun ~height:(x9037 : GLsizei.t) ->
                  fun ~depth:(x9038 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9039) "texStorage3D"
                         [|(GLenum.t_to_js x9033);(GLsizei.t_to_js x9034);(
                           GLenum.t_to_js x9035);(GLsizei.t_to_js x9036);(
                           GLsizei.t_to_js x9037);(GLsizei.t_to_js x9038)|])
    let (texSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x9052 : 'tags this) ->
        fun ~target:(x9041 : GLenum.t) ->
          fun ~level:(x9042 : GLint.t) ->
            fun ~xoffset:(x9043 : GLint.t) ->
              fun ~yoffset:(x9044 : GLint.t) ->
                fun ~zoffset:(x9045 : GLint.t) ->
                  fun ~width:(x9046 : GLsizei.t) ->
                    fun ~height:(x9047 : GLsizei.t) ->
                      fun ~depth:(x9048 : GLsizei.t) ->
                        fun ~format:(x9049 : GLenum.t) ->
                          fun ~type_:(x9050 : GLenum.t) ->
                            fun ~pboOffset:(x9051 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9052)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9041);(GLint.t_to_js
                                                               x9042);(
                                     GLint.t_to_js x9043);(GLint.t_to_js
                                                             x9044);(
                                     GLint.t_to_js x9045);(GLsizei.t_to_js
                                                             x9046);(
                                     GLsizei.t_to_js x9047);(GLsizei.t_to_js
                                                               x9048);(
                                     GLenum.t_to_js x9049);(GLenum.t_to_js
                                                              x9050);(
                                     GLintptr.t_to_js x9051)|])
    let (texSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x9065 : 'tags this) ->
        fun ~target:(x9054 : GLenum.t) ->
          fun ~level:(x9055 : GLint.t) ->
            fun ~xoffset:(x9056 : GLint.t) ->
              fun ~yoffset:(x9057 : GLint.t) ->
                fun ~zoffset:(x9058 : GLint.t) ->
                  fun ~width:(x9059 : GLsizei.t) ->
                    fun ~height:(x9060 : GLsizei.t) ->
                      fun ~depth:(x9061 : GLsizei.t) ->
                        fun ~format:(x9062 : GLenum.t) ->
                          fun ~type_:(x9063 : GLenum.t) ->
                            fun ~source:(x9064 : TexImageSource.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x9065)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x9054);(GLint.t_to_js
                                                               x9055);(
                                     GLint.t_to_js x9056);(GLint.t_to_js
                                                             x9057);(
                                     GLint.t_to_js x9058);(GLsizei.t_to_js
                                                             x9059);(
                                     GLsizei.t_to_js x9060);(GLsizei.t_to_js
                                                               x9061);(
                                     GLenum.t_to_js x9062);(GLenum.t_to_js
                                                              x9063);(
                                     TexImageSource.t_to_js x9064)|])
    let (texSubImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t ->
                            srcData:ArrayBufferView.t_0 or_null ->
                              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9082 : 'tags this) ->
        fun ~target:(x9067 : GLenum.t) ->
          fun ~level:(x9068 : GLint.t) ->
            fun ~xoffset:(x9069 : GLint.t) ->
              fun ~yoffset:(x9070 : GLint.t) ->
                fun ~zoffset:(x9071 : GLint.t) ->
                  fun ~width:(x9072 : GLsizei.t) ->
                    fun ~height:(x9073 : GLsizei.t) ->
                      fun ~depth:(x9074 : GLsizei.t) ->
                        fun ~format:(x9075 : GLenum.t) ->
                          fun ~type_:(x9076 : GLenum.t) ->
                            fun
                              ~srcData:(x9077 : ArrayBufferView.t_0 or_null)
                              ->
                              fun ?srcOffset:(x9078 : GLuint.t option) ->
                                fun () ->
                                  ignore
                                    (let x9084 = this_to_js Obj.magic x9082 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x9084
                                          "texSubImage3D") "apply"
                                       [|x9084;((let x9079 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLenum.t_to_js x9067)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLint.t_to_js x9068)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLint.t_to_js x9069)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLint.t_to_js x9070)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLint.t_to_js x9071)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9072)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9073)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLsizei.t_to_js
                                                           x9074)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLenum.t_to_js x9075)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(GLenum.t_to_js x9076)|]);
                                                 ignore
                                                   (Ojs.call x9079 "push"
                                                      [|(or_null_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x9077)|]);
                                                 (match x9078 with
                                                  | Some x9080 ->
                                                      ignore
                                                        (Ojs.call x9079
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x9080)|])
                                                  | None -> ());
                                                 x9079))|])
    let (transformFeedbackVaryings :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string list -> bufferMode:GLenum.t -> unit)
      =
      fun (x9089 : 'tags this) ->
        fun ~program:(x9085 : WebGLProgram.t) ->
          fun ~varyings:(x9086 : string list) ->
            fun ~bufferMode:(x9088 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9089)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x9085);(Ojs.list_to_js
                                                     Ojs.string_to_js x9086);(
                     GLenum.t_to_js x9088)|])
    let (uniform1ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v0:GLuint.t -> unit)
      =
      fun (x9094 : 'tags this) ->
        fun ~location:(x9091 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x9093 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9094) "uniform1ui"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x9091);(
                   GLuint.t_to_js x9093)|])
    let (uniform1uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9104 : 'tags this) ->
        fun ~location:(x9096 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9097 : Uint32List.t) ->
            fun ?srcOffset:(x9098 : GLuint.t option) ->
              fun ?srcLength:(x9099 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9106 = this_to_js Obj.magic x9104 in
                     Ojs.call (Ojs.get_prop_ascii x9106 "uniform1uiv")
                       "apply"
                       [|x9106;((let x9100 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9100 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9096)|]);
                                 ignore
                                   (Ojs.call x9100 "push"
                                      [|(Uint32List.t_to_js x9097)|]);
                                 (match x9098 with
                                  | Some x9102 ->
                                      ignore
                                        (Ojs.call x9100 "push"
                                           [|(GLuint.t_to_js x9102)|])
                                  | None -> ());
                                 (match x9099 with
                                  | Some x9101 ->
                                      ignore
                                        (Ojs.call x9100 "push"
                                           [|(GLuint.t_to_js x9101)|])
                                  | None -> ());
                                 x9100))|])
    let (uniform2ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> unit)
      =
      fun (x9111 : 'tags this) ->
        fun ~location:(x9107 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x9109 : GLuint.t) ->
            fun ~v1:(x9110 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9111) "uniform2ui"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x9107);(
                     GLuint.t_to_js x9109);(GLuint.t_to_js x9110)|])
    let (uniform2uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9121 : 'tags this) ->
        fun ~location:(x9113 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9114 : Uint32List.t) ->
            fun ?srcOffset:(x9115 : GLuint.t option) ->
              fun ?srcLength:(x9116 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9123 = this_to_js Obj.magic x9121 in
                     Ojs.call (Ojs.get_prop_ascii x9123 "uniform2uiv")
                       "apply"
                       [|x9123;((let x9117 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9117 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9113)|]);
                                 ignore
                                   (Ojs.call x9117 "push"
                                      [|(Uint32List.t_to_js x9114)|]);
                                 (match x9115 with
                                  | Some x9119 ->
                                      ignore
                                        (Ojs.call x9117 "push"
                                           [|(GLuint.t_to_js x9119)|])
                                  | None -> ());
                                 (match x9116 with
                                  | Some x9118 ->
                                      ignore
                                        (Ojs.call x9117 "push"
                                           [|(GLuint.t_to_js x9118)|])
                                  | None -> ());
                                 x9117))|])
    let (uniform3ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit)
      =
      fun (x9129 : 'tags this) ->
        fun ~location:(x9124 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x9126 : GLuint.t) ->
            fun ~v1:(x9127 : GLuint.t) ->
              fun ~v2:(x9128 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x9129) "uniform3ui"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x9124);(
                       GLuint.t_to_js x9126);(GLuint.t_to_js x9127);(
                       GLuint.t_to_js x9128)|])
    let (uniform3uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9139 : 'tags this) ->
        fun ~location:(x9131 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9132 : Uint32List.t) ->
            fun ?srcOffset:(x9133 : GLuint.t option) ->
              fun ?srcLength:(x9134 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9141 = this_to_js Obj.magic x9139 in
                     Ojs.call (Ojs.get_prop_ascii x9141 "uniform3uiv")
                       "apply"
                       [|x9141;((let x9135 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9135 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9131)|]);
                                 ignore
                                   (Ojs.call x9135 "push"
                                      [|(Uint32List.t_to_js x9132)|]);
                                 (match x9133 with
                                  | Some x9137 ->
                                      ignore
                                        (Ojs.call x9135 "push"
                                           [|(GLuint.t_to_js x9137)|])
                                  | None -> ());
                                 (match x9134 with
                                  | Some x9136 ->
                                      ignore
                                        (Ojs.call x9135 "push"
                                           [|(GLuint.t_to_js x9136)|])
                                  | None -> ());
                                 x9135))|])
    let (uniform4ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit)
      =
      fun (x9148 : 'tags this) ->
        fun ~location:(x9142 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x9144 : GLuint.t) ->
            fun ~v1:(x9145 : GLuint.t) ->
              fun ~v2:(x9146 : GLuint.t) ->
                fun ~v3:(x9147 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9148) "uniform4ui"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x9142);(
                         GLuint.t_to_js x9144);(GLuint.t_to_js x9145);(
                         GLuint.t_to_js x9146);(GLuint.t_to_js x9147)|])
    let (uniform4uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9158 : 'tags this) ->
        fun ~location:(x9150 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9151 : Uint32List.t) ->
            fun ?srcOffset:(x9152 : GLuint.t option) ->
              fun ?srcLength:(x9153 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9160 = this_to_js Obj.magic x9158 in
                     Ojs.call (Ojs.get_prop_ascii x9160 "uniform4uiv")
                       "apply"
                       [|x9160;((let x9154 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9154 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9150)|]);
                                 ignore
                                   (Ojs.call x9154 "push"
                                      [|(Uint32List.t_to_js x9151)|]);
                                 (match x9152 with
                                  | Some x9156 ->
                                      ignore
                                        (Ojs.call x9154 "push"
                                           [|(GLuint.t_to_js x9156)|])
                                  | None -> ());
                                 (match x9153 with
                                  | Some x9155 ->
                                      ignore
                                        (Ojs.call x9154 "push"
                                           [|(GLuint.t_to_js x9155)|])
                                  | None -> ());
                                 x9154))|])
    let (uniformBlockBinding :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit)
      =
      fun (x9164 : 'tags this) ->
        fun ~program:(x9161 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x9162 : GLuint.t) ->
            fun ~uniformBlockBinding:(x9163 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9164) "uniformBlockBinding"
                   [|(WebGLProgram.t_to_js x9161);(GLuint.t_to_js x9162);(
                     GLuint.t_to_js x9163)|])
    let (uniformMatrix2x3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9175 : 'tags this) ->
        fun ~location:(x9166 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9167 : GLboolean.t) ->
            fun ~data:(x9168 : Float32List.t) ->
              fun ?srcOffset:(x9169 : GLuint.t option) ->
                fun ?srcLength:(x9170 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9177 = this_to_js Obj.magic x9175 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9177 "uniformMatrix2x3fv")
                         "apply"
                         [|x9177;((let x9171 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9171 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9166)|]);
                                   ignore
                                     (Ojs.call x9171 "push"
                                        [|(GLboolean.t_to_js x9167)|]);
                                   ignore
                                     (Ojs.call x9171 "push"
                                        [|(Float32List.t_to_js x9168)|]);
                                   (match x9169 with
                                    | Some x9173 ->
                                        ignore
                                          (Ojs.call x9171 "push"
                                             [|(GLuint.t_to_js x9173)|])
                                    | None -> ());
                                   (match x9170 with
                                    | Some x9172 ->
                                        ignore
                                          (Ojs.call x9171 "push"
                                             [|(GLuint.t_to_js x9172)|])
                                    | None -> ());
                                   x9171))|])
    let (uniformMatrix2x4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9187 : 'tags this) ->
        fun ~location:(x9178 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9179 : GLboolean.t) ->
            fun ~data:(x9180 : Float32List.t) ->
              fun ?srcOffset:(x9181 : GLuint.t option) ->
                fun ?srcLength:(x9182 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9189 = this_to_js Obj.magic x9187 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9189 "uniformMatrix2x4fv")
                         "apply"
                         [|x9189;((let x9183 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9183 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9178)|]);
                                   ignore
                                     (Ojs.call x9183 "push"
                                        [|(GLboolean.t_to_js x9179)|]);
                                   ignore
                                     (Ojs.call x9183 "push"
                                        [|(Float32List.t_to_js x9180)|]);
                                   (match x9181 with
                                    | Some x9185 ->
                                        ignore
                                          (Ojs.call x9183 "push"
                                             [|(GLuint.t_to_js x9185)|])
                                    | None -> ());
                                   (match x9182 with
                                    | Some x9184 ->
                                        ignore
                                          (Ojs.call x9183 "push"
                                             [|(GLuint.t_to_js x9184)|])
                                    | None -> ());
                                   x9183))|])
    let (uniformMatrix3x2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9199 : 'tags this) ->
        fun ~location:(x9190 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9191 : GLboolean.t) ->
            fun ~data:(x9192 : Float32List.t) ->
              fun ?srcOffset:(x9193 : GLuint.t option) ->
                fun ?srcLength:(x9194 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9201 = this_to_js Obj.magic x9199 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9201 "uniformMatrix3x2fv")
                         "apply"
                         [|x9201;((let x9195 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9195 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9190)|]);
                                   ignore
                                     (Ojs.call x9195 "push"
                                        [|(GLboolean.t_to_js x9191)|]);
                                   ignore
                                     (Ojs.call x9195 "push"
                                        [|(Float32List.t_to_js x9192)|]);
                                   (match x9193 with
                                    | Some x9197 ->
                                        ignore
                                          (Ojs.call x9195 "push"
                                             [|(GLuint.t_to_js x9197)|])
                                    | None -> ());
                                   (match x9194 with
                                    | Some x9196 ->
                                        ignore
                                          (Ojs.call x9195 "push"
                                             [|(GLuint.t_to_js x9196)|])
                                    | None -> ());
                                   x9195))|])
    let (uniformMatrix3x4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9211 : 'tags this) ->
        fun ~location:(x9202 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9203 : GLboolean.t) ->
            fun ~data:(x9204 : Float32List.t) ->
              fun ?srcOffset:(x9205 : GLuint.t option) ->
                fun ?srcLength:(x9206 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9213 = this_to_js Obj.magic x9211 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9213 "uniformMatrix3x4fv")
                         "apply"
                         [|x9213;((let x9207 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9207 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9202)|]);
                                   ignore
                                     (Ojs.call x9207 "push"
                                        [|(GLboolean.t_to_js x9203)|]);
                                   ignore
                                     (Ojs.call x9207 "push"
                                        [|(Float32List.t_to_js x9204)|]);
                                   (match x9205 with
                                    | Some x9209 ->
                                        ignore
                                          (Ojs.call x9207 "push"
                                             [|(GLuint.t_to_js x9209)|])
                                    | None -> ());
                                   (match x9206 with
                                    | Some x9208 ->
                                        ignore
                                          (Ojs.call x9207 "push"
                                             [|(GLuint.t_to_js x9208)|])
                                    | None -> ());
                                   x9207))|])
    let (uniformMatrix4x2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9223 : 'tags this) ->
        fun ~location:(x9214 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9215 : GLboolean.t) ->
            fun ~data:(x9216 : Float32List.t) ->
              fun ?srcOffset:(x9217 : GLuint.t option) ->
                fun ?srcLength:(x9218 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9225 = this_to_js Obj.magic x9223 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9225 "uniformMatrix4x2fv")
                         "apply"
                         [|x9225;((let x9219 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9219 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9214)|]);
                                   ignore
                                     (Ojs.call x9219 "push"
                                        [|(GLboolean.t_to_js x9215)|]);
                                   ignore
                                     (Ojs.call x9219 "push"
                                        [|(Float32List.t_to_js x9216)|]);
                                   (match x9217 with
                                    | Some x9221 ->
                                        ignore
                                          (Ojs.call x9219 "push"
                                             [|(GLuint.t_to_js x9221)|])
                                    | None -> ());
                                   (match x9218 with
                                    | Some x9220 ->
                                        ignore
                                          (Ojs.call x9219 "push"
                                             [|(GLuint.t_to_js x9220)|])
                                    | None -> ());
                                   x9219))|])
    let (uniformMatrix4x3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9235 : 'tags this) ->
        fun ~location:(x9226 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9227 : GLboolean.t) ->
            fun ~data:(x9228 : Float32List.t) ->
              fun ?srcOffset:(x9229 : GLuint.t option) ->
                fun ?srcLength:(x9230 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9237 = this_to_js Obj.magic x9235 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9237 "uniformMatrix4x3fv")
                         "apply"
                         [|x9237;((let x9231 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9231 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9226)|]);
                                   ignore
                                     (Ojs.call x9231 "push"
                                        [|(GLboolean.t_to_js x9227)|]);
                                   ignore
                                     (Ojs.call x9231 "push"
                                        [|(Float32List.t_to_js x9228)|]);
                                   (match x9229 with
                                    | Some x9233 ->
                                        ignore
                                          (Ojs.call x9231 "push"
                                             [|(GLuint.t_to_js x9233)|])
                                    | None -> ());
                                   (match x9230 with
                                    | Some x9232 ->
                                        ignore
                                          (Ojs.call x9231 "push"
                                             [|(GLuint.t_to_js x9232)|])
                                    | None -> ());
                                   x9231))|])
    let (vertexAttribDivisor :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x9240 : 'tags this) ->
        fun ~index:(x9238 : GLuint.t) ->
          fun ~divisor:(x9239 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9240) "vertexAttribDivisor"
                 [|(GLuint.t_to_js x9238);(GLuint.t_to_js x9239)|])
    let (vertexAttribI4i :
      'tags this ->
        index:GLuint.t ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x9247 : 'tags this) ->
        fun ~index:(x9242 : GLuint.t) ->
          fun ~x:(x9243 : GLint.t) ->
            fun ~y:(x9244 : GLint.t) ->
              fun ~z:(x9245 : GLint.t) ->
                fun ~w:(x9246 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9247) "vertexAttribI4i"
                       [|(GLuint.t_to_js x9242);(GLint.t_to_js x9243);(
                         GLint.t_to_js x9244);(GLint.t_to_js x9245);(
                         GLint.t_to_js x9246)|])
    let (vertexAttribI4iv :
      'tags this -> index:GLuint.t -> values:Int32List.t -> unit) =
      fun (x9251 : 'tags this) ->
        fun ~index:(x9249 : GLuint.t) ->
          fun ~values:(x9250 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9251) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x9249);(Int32List.t_to_js x9250)|])
    let (vertexAttribI4ui :
      'tags this ->
        index:GLuint.t ->
          x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit)
      =
      fun (x9258 : 'tags this) ->
        fun ~index:(x9253 : GLuint.t) ->
          fun ~x:(x9254 : GLuint.t) ->
            fun ~y:(x9255 : GLuint.t) ->
              fun ~z:(x9256 : GLuint.t) ->
                fun ~w:(x9257 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9258) "vertexAttribI4ui"
                       [|(GLuint.t_to_js x9253);(GLuint.t_to_js x9254);(
                         GLuint.t_to_js x9255);(GLuint.t_to_js x9256);(
                         GLuint.t_to_js x9257)|])
    let (vertexAttribI4uiv :
      'tags this -> index:GLuint.t -> values:Uint32List.t -> unit) =
      fun (x9262 : 'tags this) ->
        fun ~index:(x9260 : GLuint.t) ->
          fun ~values:(x9261 : Uint32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9262) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x9260);(Uint32List.t_to_js x9261)|])
    let (vertexAttribIPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x9269 : 'tags this) ->
        fun ~index:(x9264 : GLuint.t) ->
          fun ~size:(x9265 : GLint.t) ->
            fun ~type_:(x9266 : GLenum.t) ->
              fun ~stride:(x9267 : GLsizei.t) ->
                fun ~offset:(x9268 : GLintptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x9269)
                       "vertexAttribIPointer"
                       [|(GLuint.t_to_js x9264);(GLint.t_to_js x9265);(
                         GLenum.t_to_js x9266);(GLsizei.t_to_js x9267);(
                         GLintptr.t_to_js x9268)|])
    let (waitSync :
      'tags this ->
        sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit)
      =
      fun (x9274 : 'tags this) ->
        fun ~sync:(x9271 : WebGLSync.t) ->
          fun ~flags:(x9272 : GLbitfield.t) ->
            fun ~timeout:(x9273 : GLint64.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9274) "waitSync"
                   [|(WebGLSync.t_to_js x9271);(GLbitfield.t_to_js x9272);(
                     GLint64.t_to_js x9273)|])
    let (get_ACTIVE_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9276 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9276)
             "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : 'tags this -> GLenum.t) =
      fun (x9278 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9278) "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : 'tags this -> GLenum.t) =
      fun (x9280 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9280)
             "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : 'tags this -> GLenum.t) =
      fun (x9282 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9282)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : 'tags this -> GLenum.t) =
      fun (x9284 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9284) "COLOR")
    let (get_COLOR_ATTACHMENT1 : 'tags this -> GLenum.t) =
      fun (x9286 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9286)
             "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : 'tags this -> GLenum.t) =
      fun (x9288 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9288)
             "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : 'tags this -> GLenum.t) =
      fun (x9290 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9290)
             "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : 'tags this -> GLenum.t) =
      fun (x9292 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9292)
             "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : 'tags this -> GLenum.t) =
      fun (x9294 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9294)
             "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : 'tags this -> GLenum.t) =
      fun (x9296 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9296)
             "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : 'tags this -> GLenum.t) =
      fun (x9298 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9298)
             "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : 'tags this -> GLenum.t) =
      fun (x9300 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9300)
             "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : 'tags this -> GLenum.t) =
      fun (x9302 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9302)
             "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : 'tags this -> GLenum.t) =
      fun (x9304 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9304)
             "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : 'tags this -> GLenum.t) =
      fun (x9306 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9306)
             "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : 'tags this -> GLenum.t) =
      fun (x9308 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9308)
             "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : 'tags this -> GLenum.t) =
      fun (x9310 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9310)
             "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : 'tags this -> GLenum.t) =
      fun (x9312 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9312)
             "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : 'tags this -> GLenum.t) =
      fun (x9314 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9314)
             "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : 'tags this -> GLenum.t) =
      fun (x9316 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9316)
             "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : 'tags this -> GLenum.t) =
      fun (x9318 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9318)
             "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x9320 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9320) "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9322 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9322)
             "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : 'tags this -> GLenum.t) =
      fun (x9324 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9324)
             "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9326 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9326)
             "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : 'tags this -> GLenum.t) =
      fun (x9328 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9328) "CURRENT_QUERY")
    let (get_DEPTH : 'tags this -> GLenum.t) =
      fun (x9330 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9330) "DEPTH")
    let (get_DEPTH24_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9332 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9332) "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x9334 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9334)
             "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : 'tags this -> GLenum.t) =
      fun (x9336 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9336)
             "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : 'tags this -> GLenum.t) =
      fun (x9338 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9338)
             "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : 'tags this -> GLenum.t) =
      fun (x9340 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9340) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : 'tags this -> GLenum.t) =
      fun (x9342 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9342) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : 'tags this -> GLenum.t) =
      fun (x9344 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9344) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : 'tags this -> GLenum.t) =
      fun (x9346 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9346) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : 'tags this -> GLenum.t) =
      fun (x9348 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9348) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : 'tags this -> GLenum.t) =
      fun (x9350 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9350) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : 'tags this -> GLenum.t) =
      fun (x9352 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9352) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : 'tags this -> GLenum.t) =
      fun (x9354 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9354) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : 'tags this -> GLenum.t) =
      fun (x9356 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9356) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : 'tags this -> GLenum.t) =
      fun (x9358 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9358) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : 'tags this -> GLenum.t) =
      fun (x9360 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9360) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : 'tags this -> GLenum.t) =
      fun (x9362 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9362) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : 'tags this -> GLenum.t) =
      fun (x9364 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9364) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : 'tags this -> GLenum.t) =
      fun (x9366 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9366) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : 'tags this -> GLenum.t) =
      fun (x9368 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9368) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : 'tags this -> GLenum.t) =
      fun (x9370 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9370) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x9372 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9372) "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9374 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9374)
             "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : 'tags this -> GLenum.t) =
      fun (x9376 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9376) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : 'tags this -> GLenum.t) =
      fun (x9378 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9378) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : 'tags this -> GLenum.t) =
      fun (x9380 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9380)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : 'tags this -> GLenum.t) =
      fun (x9382 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9382) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : 'tags this -> GLenum.t) =
      fun (x9384 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9384) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : 'tags this -> GLenum.t) =
      fun (x9386 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9386) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : 'tags this -> GLenum.t) =
      fun (x9388 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9388) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : 'tags this -> GLenum.t) =
      fun (x9390 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9390) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : 'tags this -> GLenum.t) =
      fun (x9392 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9392) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : 'tags this -> GLenum.t) =
      fun (x9394 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9394)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x9396 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9396)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x9398 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9398)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : 'tags this -> GLenum.t)
      =
      fun (x9400 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9400)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : 'tags this -> GLenum.t)
      =
      fun (x9402 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9402)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x9404 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9404)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x9406 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9406)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x9408 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9408)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x9410 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9410)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : 'tags this -> GLenum.t) =
      fun (x9412 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9412)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : 'tags this -> GLenum.t) =
      fun (x9414 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9414)
             "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : 'tags this -> GLenum.t) =
      fun (x9416 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9416)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : 'tags this -> GLenum.t) =
      fun (x9418 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9418) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x9420 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9420)
             "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x9422 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9422)
             "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x9424 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9424) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9426 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9426)
             "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9428 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9428) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x9430 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9430) "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : 'tags this -> GLenum.t) =
      fun (x9432 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9432) "INVALID_INDEX")
    let (get_MAX : 'tags this -> GLenum.t) =
      fun (x9434 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9434) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x9436 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9436)
             "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : 'tags this -> GLenum.t) =
      fun (x9438 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9438)
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : 'tags this -> GLenum.t) =
      fun (x9440 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9440)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : 'tags this -> GLenum.t) =
      fun (x9442 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9442)
             "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9444 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9444)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9446 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9446)
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t)
      =
      fun (x9448 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9448)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : 'tags this -> GLenum.t) =
      fun (x9450 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9450) "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : 'tags this -> GLenum.t) =
      fun (x9452 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9452)
             "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : 'tags this -> GLenum.t) =
      fun (x9454 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9454)
             "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : 'tags this -> GLenum.t) =
      fun (x9456 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9456)
             "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9458 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9458)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9460 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9460)
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9462 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9462)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x9464 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9464)
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : 'tags this -> GLenum.t) =
      fun (x9466 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9466) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : 'tags this -> GLenum.t) =
      fun (x9468 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9468)
             "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : 'tags this -> GLenum.t) =
      fun (x9470 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9470)
             "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9472 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9472)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
      'tags this -> GLenum.t) =
      fun (x9474 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9474)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9476 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9476)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : 'tags this -> GLenum.t) =
      fun (x9478 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9478)
             "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : 'tags this -> GLenum.t) =
      fun (x9480 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9480)
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9482 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9482)
             "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9484 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9484)
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9486 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9486)
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9488 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9488)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : 'tags this -> GLenum.t) =
      fun (x9490 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9490) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x9492 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9492)
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x9494 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9494) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x9496 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9496) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x9498 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9498) "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x9500 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9500) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9502 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9502)
             "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9504 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9504)
             "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9506 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9506)
             "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9508 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9508)
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : 'tags this -> GLenum.t) =
      fun (x9510 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9510) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : 'tags this -> GLenum.t) =
      fun (x9512 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9512)
             "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : 'tags this -> GLenum.t) =
      fun (x9514 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9514) "R11F_G11F_B10F")
    let (get_R16F : 'tags this -> GLenum.t) =
      fun (x9516 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9516) "R16F")
    let (get_R16I : 'tags this -> GLenum.t) =
      fun (x9518 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9518) "R16I")
    let (get_R16UI : 'tags this -> GLenum.t) =
      fun (x9520 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9520) "R16UI")
    let (get_R32F : 'tags this -> GLenum.t) =
      fun (x9522 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9522) "R32F")
    let (get_R32I : 'tags this -> GLenum.t) =
      fun (x9524 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9524) "R32I")
    let (get_R32UI : 'tags this -> GLenum.t) =
      fun (x9526 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9526) "R32UI")
    let (get_R8 : 'tags this -> GLenum.t) =
      fun (x9528 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9528) "R8")
    let (get_R8I : 'tags this -> GLenum.t) =
      fun (x9530 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9530) "R8I")
    let (get_R8UI : 'tags this -> GLenum.t) =
      fun (x9532 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9532) "R8UI")
    let (get_R8_SNORM : 'tags this -> GLenum.t) =
      fun (x9534 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9534) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : 'tags this -> GLenum.t) =
      fun (x9536 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9536)
             "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x9538 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9538) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x9540 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9540) "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9542 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9542)
             "READ_FRAMEBUFFER_BINDING")
    let (get_RED : 'tags this -> GLenum.t) =
      fun (x9544 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9544) "RED")
    let (get_RED_INTEGER : 'tags this -> GLenum.t) =
      fun (x9546 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9546) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : 'tags this -> GLenum.t) =
      fun (x9548 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9548)
             "RENDERBUFFER_SAMPLES")
    let (get_RG : 'tags this -> GLenum.t) =
      fun (x9550 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9550) "RG")
    let (get_RG16F : 'tags this -> GLenum.t) =
      fun (x9552 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9552) "RG16F")
    let (get_RG16I : 'tags this -> GLenum.t) =
      fun (x9554 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9554) "RG16I")
    let (get_RG16UI : 'tags this -> GLenum.t) =
      fun (x9556 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9556) "RG16UI")
    let (get_RG32F : 'tags this -> GLenum.t) =
      fun (x9558 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9558) "RG32F")
    let (get_RG32I : 'tags this -> GLenum.t) =
      fun (x9560 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9560) "RG32I")
    let (get_RG32UI : 'tags this -> GLenum.t) =
      fun (x9562 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9562) "RG32UI")
    let (get_RG8 : 'tags this -> GLenum.t) =
      fun (x9564 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9564) "RG8")
    let (get_RG8I : 'tags this -> GLenum.t) =
      fun (x9566 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9566) "RG8I")
    let (get_RG8UI : 'tags this -> GLenum.t) =
      fun (x9568 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9568) "RG8UI")
    let (get_RG8_SNORM : 'tags this -> GLenum.t) =
      fun (x9570 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9570) "RG8_SNORM")
    let (get_RGB10_A2 : 'tags this -> GLenum.t) =
      fun (x9572 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9572) "RGB10_A2")
    let (get_RGB10_A2UI : 'tags this -> GLenum.t) =
      fun (x9574 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9574) "RGB10_A2UI")
    let (get_RGB16F : 'tags this -> GLenum.t) =
      fun (x9576 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9576) "RGB16F")
    let (get_RGB16I : 'tags this -> GLenum.t) =
      fun (x9578 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9578) "RGB16I")
    let (get_RGB16UI : 'tags this -> GLenum.t) =
      fun (x9580 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9580) "RGB16UI")
    let (get_RGB32F : 'tags this -> GLenum.t) =
      fun (x9582 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9582) "RGB32F")
    let (get_RGB32I : 'tags this -> GLenum.t) =
      fun (x9584 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9584) "RGB32I")
    let (get_RGB32UI : 'tags this -> GLenum.t) =
      fun (x9586 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9586) "RGB32UI")
    let (get_RGB8 : 'tags this -> GLenum.t) =
      fun (x9588 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9588) "RGB8")
    let (get_RGB8I : 'tags this -> GLenum.t) =
      fun (x9590 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9590) "RGB8I")
    let (get_RGB8UI : 'tags this -> GLenum.t) =
      fun (x9592 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9592) "RGB8UI")
    let (get_RGB8_SNORM : 'tags this -> GLenum.t) =
      fun (x9594 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9594) "RGB8_SNORM")
    let (get_RGB9_E5 : 'tags this -> GLenum.t) =
      fun (x9596 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9596) "RGB9_E5")
    let (get_RGBA16F : 'tags this -> GLenum.t) =
      fun (x9598 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9598) "RGBA16F")
    let (get_RGBA16I : 'tags this -> GLenum.t) =
      fun (x9600 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9600) "RGBA16I")
    let (get_RGBA16UI : 'tags this -> GLenum.t) =
      fun (x9602 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9602) "RGBA16UI")
    let (get_RGBA32F : 'tags this -> GLenum.t) =
      fun (x9604 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9604) "RGBA32F")
    let (get_RGBA32I : 'tags this -> GLenum.t) =
      fun (x9606 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9606) "RGBA32I")
    let (get_RGBA32UI : 'tags this -> GLenum.t) =
      fun (x9608 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9608) "RGBA32UI")
    let (get_RGBA8 : 'tags this -> GLenum.t) =
      fun (x9610 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9610) "RGBA8")
    let (get_RGBA8I : 'tags this -> GLenum.t) =
      fun (x9612 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9612) "RGBA8I")
    let (get_RGBA8UI : 'tags this -> GLenum.t) =
      fun (x9614 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9614) "RGBA8UI")
    let (get_RGBA8_SNORM : 'tags this -> GLenum.t) =
      fun (x9616 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9616) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : 'tags this -> GLenum.t) =
      fun (x9618 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9618) "RGBA_INTEGER")
    let (get_RGB_INTEGER : 'tags this -> GLenum.t) =
      fun (x9620 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9620) "RGB_INTEGER")
    let (get_RG_INTEGER : 'tags this -> GLenum.t) =
      fun (x9622 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9622) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9624 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9624) "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : 'tags this -> GLenum.t) =
      fun (x9626 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9626)
             "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : 'tags this -> GLenum.t) =
      fun (x9628 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9628)
             "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9630 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9630) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : 'tags this -> GLenum.t) =
      fun (x9632 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9632) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : 'tags this -> GLenum.t) =
      fun (x9634 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9634)
             "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x9636 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9636) "SEPARATE_ATTRIBS")
    let (get_SIGNALED : 'tags this -> GLenum.t) =
      fun (x9638 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9638) "SIGNALED")
    let (get_SIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x9640 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9640)
             "SIGNED_NORMALIZED")
    let (get_SRGB : 'tags this -> GLenum.t) =
      fun (x9642 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9642) "SRGB")
    let (get_SRGB8 : 'tags this -> GLenum.t) =
      fun (x9644 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9644) "SRGB8")
    let (get_SRGB8_ALPHA8 : 'tags this -> GLenum.t) =
      fun (x9646 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9646) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : 'tags this -> GLenum.t) =
      fun (x9648 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9648) "STATIC_COPY")
    let (get_STATIC_READ : 'tags this -> GLenum.t) =
      fun (x9650 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9650) "STATIC_READ")
    let (get_STENCIL : 'tags this -> GLenum.t) =
      fun (x9652 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9652) "STENCIL")
    let (get_STREAM_COPY : 'tags this -> GLenum.t) =
      fun (x9654 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9654) "STREAM_COPY")
    let (get_STREAM_READ : 'tags this -> GLenum.t) =
      fun (x9656 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9656) "STREAM_READ")
    let (get_SYNC_CONDITION : 'tags this -> GLenum.t) =
      fun (x9658 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9658) "SYNC_CONDITION")
    let (get_SYNC_FENCE : 'tags this -> GLenum.t) =
      fun (x9660 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9660) "SYNC_FENCE")
    let (get_SYNC_FLAGS : 'tags this -> GLenum.t) =
      fun (x9662 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9662) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : 'tags this -> GLenum.t) =
      fun (x9664 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9664)
             "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : 'tags this -> GLenum.t) =
      fun (x9666 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9666)
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : 'tags this -> GLenum.t) =
      fun (x9668 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9668) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9670 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9670) "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : 'tags this -> GLenum.t) =
      fun (x9672 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9672) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : 'tags this -> GLenum.t) =
      fun (x9674 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9674)
             "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9676 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9676)
             "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : 'tags this -> GLenum.t) =
      fun (x9678 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9678)
             "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : 'tags this -> GLenum.t) =
      fun (x9680 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9680)
             "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : 'tags this -> GLenum.t) =
      fun (x9682 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9682)
             "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : 'tags this -> GLenum.t) =
      fun (x9684 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9684)
             "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : 'tags this -> GLenum.t) =
      fun (x9686 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9686)
             "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : 'tags this -> GLenum.t) =
      fun (x9688 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9688)
             "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : 'tags this -> GLenum.t) =
      fun (x9690 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9690) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : 'tags this -> GLenum.t) =
      fun (x9692 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9692) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : 'tags this -> GLenum.t) =
      fun (x9694 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9694) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : 'tags this -> GLenum.t) =
      fun (x9696 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9696) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : 'tags this -> GLint64.t) =
      fun (x9698 : 'tags this) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9698) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : 'tags this -> GLenum.t) =
      fun (x9700 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9700)
             "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : 'tags this -> GLenum.t) =
      fun (x9702 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9702)
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : 'tags this -> GLenum.t) =
      fun (x9704 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9704)
             "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9706 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9706)
             "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9708 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9708)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : 'tags this -> GLenum.t) =
      fun (x9710 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9710)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x9712 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9712)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x9714 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9714)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : 'tags this -> GLenum.t) =
      fun (x9716 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9716)
             "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : 'tags this -> GLenum.t)
      =
      fun (x9718 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9718)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : 'tags this -> GLenum.t) =
      fun (x9720 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9720)
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x9722 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9722)
             "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x9724 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9724)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : 'tags this -> GLenum.t) =
      fun (x9726 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9726)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : 'tags this -> GLenum.t) =
      fun (x9728 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9728)
             "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : 'tags this -> GLenum.t) =
      fun (x9730 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9730)
             "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : 'tags this -> GLenum.t) =
      fun (x9732 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9732)
             "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :
      'tags this -> GLenum.t) =
      fun (x9734 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9734)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
      'tags this -> GLenum.t) =
      fun (x9736 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9736)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : 'tags this -> GLenum.t) =
      fun (x9738 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9738) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9740 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9740)
             "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x9742 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9742)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x9744 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9744)
             "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x9746 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9746)
             "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : 'tags this -> GLenum.t) =
      fun (x9748 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9748)
             "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : 'tags this -> GLenum.t) =
      fun (x9750 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9750)
             "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : 'tags this -> GLenum.t) =
      fun (x9752 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9752) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : 'tags this -> GLenum.t) =
      fun (x9754 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9754) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : 'tags this -> GLenum.t) =
      fun (x9756 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9756) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : 'tags this -> GLenum.t) =
      fun (x9758 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9758)
             "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x9760 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9760)
             "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : 'tags this -> GLenum.t) =
      fun (x9762 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9762)
             "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x9764 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9764)
             "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x9766 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9766) "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : 'tags this -> GLenum.t) =
      fun (x9768 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9768) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : 'tags this -> GLenum.t) =
      fun (x9770 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9770)
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : 'tags this -> GLenum.t) =
      fun (x9772 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9772)
             "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x9774 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9774)
             "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : 'tags this -> GLenum.t) =
      fun (x9776 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9776)
             "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x9778 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9778)
             "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9780 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9780)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9782 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9782)
             "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x9784 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9784)
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x9786 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9786)
             "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x9788 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9788)
             "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x9790 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9790)
             "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x9792 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9792)
             "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : 'tags this -> GLenum.t) =
      fun (x9794 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9794)
             "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : 'tags this -> GLenum.t) =
      fun (x9796 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9796)
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : 'tags this -> GLenum.t) =
      fun (x9798 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9798)
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : 'tags this -> GLenum.t) =
      fun (x9800 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9800) "WAIT_FAILED")
    let (clearBufferfv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9809 : 'tags this) ->
        fun ~buffer:(x9802 : GLenum.t) ->
          fun ~drawbuffer:(x9803 : GLint.t) ->
            fun ~values:(x9804 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9805 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9811 = this_to_js Obj.magic x9809 in
                     Ojs.call (Ojs.get_prop_ascii x9811 "clearBufferfv")
                       "apply"
                       [|x9811;((let x9806 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9806 "push"
                                      [|(GLenum.t_to_js x9802)|]);
                                 ignore
                                   (Ojs.call x9806 "push"
                                      [|(GLint.t_to_js x9803)|]);
                                 ignore
                                   (Ojs.call x9806 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x9804)|]);
                                 (match x9805 with
                                  | Some x9807 ->
                                      ignore
                                        (Ojs.call x9806 "push"
                                           [|(GLuint.t_to_js x9807)|])
                                  | None -> ());
                                 x9806))|])
    let (clearBufferiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9819 : 'tags this) ->
        fun ~buffer:(x9812 : GLenum.t) ->
          fun ~drawbuffer:(x9813 : GLint.t) ->
            fun ~values:(x9814 : GLint.t Iterable.t_1) ->
              fun ?srcOffset:(x9815 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9821 = this_to_js Obj.magic x9819 in
                     Ojs.call (Ojs.get_prop_ascii x9821 "clearBufferiv")
                       "apply"
                       [|x9821;((let x9816 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9816 "push"
                                      [|(GLenum.t_to_js x9812)|]);
                                 ignore
                                   (Ojs.call x9816 "push"
                                      [|(GLint.t_to_js x9813)|]);
                                 ignore
                                   (Ojs.call x9816 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x9814)|]);
                                 (match x9815 with
                                  | Some x9817 ->
                                      ignore
                                        (Ojs.call x9816 "push"
                                           [|(GLuint.t_to_js x9817)|])
                                  | None -> ());
                                 x9816))|])
    let (clearBufferuiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLuint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9829 : 'tags this) ->
        fun ~buffer:(x9822 : GLenum.t) ->
          fun ~drawbuffer:(x9823 : GLint.t) ->
            fun ~values:(x9824 : GLuint.t Iterable.t_1) ->
              fun ?srcOffset:(x9825 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9831 = this_to_js Obj.magic x9829 in
                     Ojs.call (Ojs.get_prop_ascii x9831 "clearBufferuiv")
                       "apply"
                       [|x9831;((let x9826 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9826 "push"
                                      [|(GLenum.t_to_js x9822)|]);
                                 ignore
                                   (Ojs.call x9826 "push"
                                      [|(GLint.t_to_js x9823)|]);
                                 ignore
                                   (Ojs.call x9826 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9824)|]);
                                 (match x9825 with
                                  | Some x9827 ->
                                      ignore
                                        (Ojs.call x9826 "push"
                                           [|(GLuint.t_to_js x9827)|])
                                  | None -> ());
                                 x9826))|])
    let (drawBuffers' : 'tags this -> buffers:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x9834 : 'tags this) ->
        fun ~buffers:(x9832 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9834) "drawBuffers"
               [|(Iterable.t_1_to_js GLenum.t_to_js x9832)|])
    let (getActiveUniforms' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t Iterable.t_1 -> pname:GLenum.t -> any)
      =
      fun (x9840 : 'tags this) ->
        fun ~program:(x9836 : WebGLProgram.t) ->
          fun ~uniformIndices:(x9837 : GLuint.t Iterable.t_1) ->
            fun ~pname:(x9839 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9840) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x9836);(Iterable.t_1_to_js
                                                     GLuint.t_to_js x9837);(
                     GLenum.t_to_js x9839)|])
    let (getUniformIndices' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string Iterable.t_1 -> GLuint.t Iterable.t_1 or_null)
      =
      fun (x9845 : 'tags this) ->
        fun ~program:(x9842 : WebGLProgram.t) ->
          fun ~uniformNames:(x9843 : string Iterable.t_1) ->
            or_null_of_js
              (fun (x9847 : Ojs.t) -> Iterable.t_1_of_js GLuint.t_of_js x9847)
              (Ojs.call (this_to_js Obj.magic x9845) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x9842);(Iterable.t_1_to_js
                                                   Ojs.string_to_js x9843)|])
    let (invalidateFramebuffer' :
      'tags this ->
        target:GLenum.t -> attachments:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x9852 : 'tags this) ->
        fun ~target:(x9849 : GLenum.t) ->
          fun ~attachments:(x9850 : GLenum.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9852) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x9849);(Iterable.t_1_to_js GLenum.t_to_js
                                             x9850)|])
    let (invalidateSubFramebuffer' :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t Iterable.t_1 ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9861 : 'tags this) ->
        fun ~target:(x9854 : GLenum.t) ->
          fun ~attachments:(x9855 : GLenum.t Iterable.t_1) ->
            fun ~x:(x9857 : GLint.t) ->
              fun ~y:(x9858 : GLint.t) ->
                fun ~width:(x9859 : GLsizei.t) ->
                  fun ~height:(x9860 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9861)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x9854);(Iterable.t_1_to_js
                                                     GLenum.t_to_js x9855);(
                           GLint.t_to_js x9857);(GLint.t_to_js x9858);(
                           GLsizei.t_to_js x9859);(GLsizei.t_to_js x9860)|])
    let (transformFeedbackVaryings' :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string Iterable.t_1 -> bufferMode:GLenum.t -> unit)
      =
      fun (x9867 : 'tags this) ->
        fun ~program:(x9863 : WebGLProgram.t) ->
          fun ~varyings:(x9864 : string Iterable.t_1) ->
            fun ~bufferMode:(x9866 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9867)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x9863);(Iterable.t_1_to_js
                                                     Ojs.string_to_js x9864);(
                     GLenum.t_to_js x9866)|])
    let (uniform1uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9878 : 'tags this) ->
        fun ~location:(x9869 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9870 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x9871 : GLuint.t option) ->
              fun ?srcLength:(x9872 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9880 = this_to_js Obj.magic x9878 in
                     Ojs.call (Ojs.get_prop_ascii x9880 "uniform1uiv")
                       "apply"
                       [|x9880;((let x9873 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9873 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9869)|]);
                                 ignore
                                   (Ojs.call x9873 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9870)|]);
                                 (match x9871 with
                                  | Some x9875 ->
                                      ignore
                                        (Ojs.call x9873 "push"
                                           [|(GLuint.t_to_js x9875)|])
                                  | None -> ());
                                 (match x9872 with
                                  | Some x9874 ->
                                      ignore
                                        (Ojs.call x9873 "push"
                                           [|(GLuint.t_to_js x9874)|])
                                  | None -> ());
                                 x9873))|])
    let (uniform2uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9890 : 'tags this) ->
        fun ~location:(x9881 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9882 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x9883 : GLuint.t option) ->
              fun ?srcLength:(x9884 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9892 = this_to_js Obj.magic x9890 in
                     Ojs.call (Ojs.get_prop_ascii x9892 "uniform2uiv")
                       "apply"
                       [|x9892;((let x9885 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9885 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9881)|]);
                                 ignore
                                   (Ojs.call x9885 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9882)|]);
                                 (match x9883 with
                                  | Some x9887 ->
                                      ignore
                                        (Ojs.call x9885 "push"
                                           [|(GLuint.t_to_js x9887)|])
                                  | None -> ());
                                 (match x9884 with
                                  | Some x9886 ->
                                      ignore
                                        (Ojs.call x9885 "push"
                                           [|(GLuint.t_to_js x9886)|])
                                  | None -> ());
                                 x9885))|])
    let (uniform3uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9902 : 'tags this) ->
        fun ~location:(x9893 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9894 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x9895 : GLuint.t option) ->
              fun ?srcLength:(x9896 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9904 = this_to_js Obj.magic x9902 in
                     Ojs.call (Ojs.get_prop_ascii x9904 "uniform3uiv")
                       "apply"
                       [|x9904;((let x9897 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9897 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9893)|]);
                                 ignore
                                   (Ojs.call x9897 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9894)|]);
                                 (match x9895 with
                                  | Some x9899 ->
                                      ignore
                                        (Ojs.call x9897 "push"
                                           [|(GLuint.t_to_js x9899)|])
                                  | None -> ());
                                 (match x9896 with
                                  | Some x9898 ->
                                      ignore
                                        (Ojs.call x9897 "push"
                                           [|(GLuint.t_to_js x9898)|])
                                  | None -> ());
                                 x9897))|])
    let (uniform4uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9914 : 'tags this) ->
        fun ~location:(x9905 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9906 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x9907 : GLuint.t option) ->
              fun ?srcLength:(x9908 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9916 = this_to_js Obj.magic x9914 in
                     Ojs.call (Ojs.get_prop_ascii x9916 "uniform4uiv")
                       "apply"
                       [|x9916;((let x9909 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9909 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9905)|]);
                                 ignore
                                   (Ojs.call x9909 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9906)|]);
                                 (match x9907 with
                                  | Some x9911 ->
                                      ignore
                                        (Ojs.call x9909 "push"
                                           [|(GLuint.t_to_js x9911)|])
                                  | None -> ());
                                 (match x9908 with
                                  | Some x9910 ->
                                      ignore
                                        (Ojs.call x9909 "push"
                                           [|(GLuint.t_to_js x9910)|])
                                  | None -> ());
                                 x9909))|])
    let (uniformMatrix2x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9927 : 'tags this) ->
        fun ~location:(x9917 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9918 : GLboolean.t) ->
            fun ~data:(x9919 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9920 : GLuint.t option) ->
                fun ?srcLength:(x9921 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9929 = this_to_js Obj.magic x9927 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9929 "uniformMatrix2x3fv")
                         "apply"
                         [|x9929;((let x9922 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9922 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9917)|]);
                                   ignore
                                     (Ojs.call x9922 "push"
                                        [|(GLboolean.t_to_js x9918)|]);
                                   ignore
                                     (Ojs.call x9922 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9919)|]);
                                   (match x9920 with
                                    | Some x9924 ->
                                        ignore
                                          (Ojs.call x9922 "push"
                                             [|(GLuint.t_to_js x9924)|])
                                    | None -> ());
                                   (match x9921 with
                                    | Some x9923 ->
                                        ignore
                                          (Ojs.call x9922 "push"
                                             [|(GLuint.t_to_js x9923)|])
                                    | None -> ());
                                   x9922))|])
    let (uniformMatrix2x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9940 : 'tags this) ->
        fun ~location:(x9930 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9931 : GLboolean.t) ->
            fun ~data:(x9932 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9933 : GLuint.t option) ->
                fun ?srcLength:(x9934 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9942 = this_to_js Obj.magic x9940 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9942 "uniformMatrix2x4fv")
                         "apply"
                         [|x9942;((let x9935 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9935 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9930)|]);
                                   ignore
                                     (Ojs.call x9935 "push"
                                        [|(GLboolean.t_to_js x9931)|]);
                                   ignore
                                     (Ojs.call x9935 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9932)|]);
                                   (match x9933 with
                                    | Some x9937 ->
                                        ignore
                                          (Ojs.call x9935 "push"
                                             [|(GLuint.t_to_js x9937)|])
                                    | None -> ());
                                   (match x9934 with
                                    | Some x9936 ->
                                        ignore
                                          (Ojs.call x9935 "push"
                                             [|(GLuint.t_to_js x9936)|])
                                    | None -> ());
                                   x9935))|])
    let (uniformMatrix3x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9953 : 'tags this) ->
        fun ~location:(x9943 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9944 : GLboolean.t) ->
            fun ~data:(x9945 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9946 : GLuint.t option) ->
                fun ?srcLength:(x9947 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9955 = this_to_js Obj.magic x9953 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9955 "uniformMatrix3x2fv")
                         "apply"
                         [|x9955;((let x9948 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9948 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9943)|]);
                                   ignore
                                     (Ojs.call x9948 "push"
                                        [|(GLboolean.t_to_js x9944)|]);
                                   ignore
                                     (Ojs.call x9948 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9945)|]);
                                   (match x9946 with
                                    | Some x9950 ->
                                        ignore
                                          (Ojs.call x9948 "push"
                                             [|(GLuint.t_to_js x9950)|])
                                    | None -> ());
                                   (match x9947 with
                                    | Some x9949 ->
                                        ignore
                                          (Ojs.call x9948 "push"
                                             [|(GLuint.t_to_js x9949)|])
                                    | None -> ());
                                   x9948))|])
    let (uniformMatrix3x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9966 : 'tags this) ->
        fun ~location:(x9956 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9957 : GLboolean.t) ->
            fun ~data:(x9958 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9959 : GLuint.t option) ->
                fun ?srcLength:(x9960 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9968 = this_to_js Obj.magic x9966 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9968 "uniformMatrix3x4fv")
                         "apply"
                         [|x9968;((let x9961 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9961 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9956)|]);
                                   ignore
                                     (Ojs.call x9961 "push"
                                        [|(GLboolean.t_to_js x9957)|]);
                                   ignore
                                     (Ojs.call x9961 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9958)|]);
                                   (match x9959 with
                                    | Some x9963 ->
                                        ignore
                                          (Ojs.call x9961 "push"
                                             [|(GLuint.t_to_js x9963)|])
                                    | None -> ());
                                   (match x9960 with
                                    | Some x9962 ->
                                        ignore
                                          (Ojs.call x9961 "push"
                                             [|(GLuint.t_to_js x9962)|])
                                    | None -> ());
                                   x9961))|])
    let (uniformMatrix4x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9979 : 'tags this) ->
        fun ~location:(x9969 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9970 : GLboolean.t) ->
            fun ~data:(x9971 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9972 : GLuint.t option) ->
                fun ?srcLength:(x9973 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9981 = this_to_js Obj.magic x9979 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9981 "uniformMatrix4x2fv")
                         "apply"
                         [|x9981;((let x9974 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9974 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9969)|]);
                                   ignore
                                     (Ojs.call x9974 "push"
                                        [|(GLboolean.t_to_js x9970)|]);
                                   ignore
                                     (Ojs.call x9974 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9971)|]);
                                   (match x9972 with
                                    | Some x9976 ->
                                        ignore
                                          (Ojs.call x9974 "push"
                                             [|(GLuint.t_to_js x9976)|])
                                    | None -> ());
                                   (match x9973 with
                                    | Some x9975 ->
                                        ignore
                                          (Ojs.call x9974 "push"
                                             [|(GLuint.t_to_js x9975)|])
                                    | None -> ());
                                   x9974))|])
    let (uniformMatrix4x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9992 : 'tags this) ->
        fun ~location:(x9982 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9983 : GLboolean.t) ->
            fun ~data:(x9984 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9985 : GLuint.t option) ->
                fun ?srcLength:(x9986 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9994 = this_to_js Obj.magic x9992 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9994 "uniformMatrix4x3fv")
                         "apply"
                         [|x9994;((let x9987 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9987 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9982)|]);
                                   ignore
                                     (Ojs.call x9987 "push"
                                        [|(GLboolean.t_to_js x9983)|]);
                                   ignore
                                     (Ojs.call x9987 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9984)|]);
                                   (match x9985 with
                                    | Some x9989 ->
                                        ignore
                                          (Ojs.call x9987 "push"
                                             [|(GLuint.t_to_js x9989)|])
                                    | None -> ());
                                   (match x9986 with
                                    | Some x9988 ->
                                        ignore
                                          (Ojs.call x9987 "push"
                                             [|(GLuint.t_to_js x9988)|])
                                    | None -> ());
                                   x9987))|])
    let (vertexAttribI4iv' :
      'tags this -> index:GLuint.t -> values:GLint.t Iterable.t_1 -> unit) =
      fun (x9998 : 'tags this) ->
        fun ~index:(x9995 : GLuint.t) ->
          fun ~values:(x9996 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9998) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x9995);(Iterable.t_1_to_js GLint.t_to_js
                                             x9996)|])
    let (vertexAttribI4uiv' :
      'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t_1 -> unit) =
      fun (x10003 : 'tags this) ->
        fun ~index:(x10000 : GLuint.t) ->
          fun ~values:(x10001 : GLuint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x10003) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x10000);(Iterable.t_1_to_js GLuint.t_to_js
                                              x10001)|])
    let cast_from = Obj.magic
  end
module WebGL2RenderingContext =
  struct
    type t =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10006 : Ojs.t) -> t_of_js x10006
    and t_0_to_js : t_0 -> Ojs.t = fun (x10005 : t) -> t_to_js x10005
    type tags =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10009 : Ojs.t) -> intf_of_js __tags_of_js x10009
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10007 : __tags intf) -> intf_to_js __tags_to_js x10007
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") 
             [||])
    let (active_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORM_BLOCKS")
    let (already_signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALREADY_SIGNALED")
    let (any_samples_passed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED")
    let (any_samples_passed_conservative : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "COLOR")
    let (color_attachment1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT1")
    let (color_attachment10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT10")
    let (color_attachment11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT11")
    let (color_attachment12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT12")
    let (color_attachment13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT13")
    let (color_attachment14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT14")
    let (color_attachment15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT15")
    let (color_attachment2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT2")
    let (color_attachment3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT3")
    let (color_attachment4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT4")
    let (color_attachment5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT5")
    let (color_attachment6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT6")
    let (color_attachment7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT7")
    let (color_attachment8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT8")
    let (color_attachment9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT9")
    let (compare_ref_to_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPARE_REF_TO_TEXTURE")
    let (condition_satisfied : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONDITION_SATISFIED")
    let (copy_read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER")
    let (copy_read_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER_BINDING")
    let (copy_write_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER")
    let (copy_write_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER_BINDING")
    let (current_query : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_QUERY")
    let (depth : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DEPTH")
    let (depth24_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH24_STENCIL8")
    let (depth32f_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH32F_STENCIL8")
    let (depth_component24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT24")
    let (depth_component32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT32F")
    let (draw_buffer0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER0")
    let (draw_buffer1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER1")
    let (draw_buffer10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER10")
    let (draw_buffer11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER11")
    let (draw_buffer12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER12")
    let (draw_buffer13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER13")
    let (draw_buffer14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER14")
    let (draw_buffer15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER15")
    let (draw_buffer2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER2")
    let (draw_buffer3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER3")
    let (draw_buffer4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER4")
    let (draw_buffer5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER5")
    let (draw_buffer6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER6")
    let (draw_buffer7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER7")
    let (draw_buffer8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER8")
    let (draw_buffer9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER9")
    let (draw_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER")
    let (draw_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER_BINDING")
    let (dynamic_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_COPY")
    let (dynamic_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_READ")
    let (float_32_unsigned_int_24_8_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (fLOAT_MAT2x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x3")
    let (fLOAT_MAT2x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x4")
    let (fLOAT_MAT3x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x2")
    let (fLOAT_MAT3x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x4")
    let (fLOAT_MAT4x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x2")
    let (fLOAT_MAT4x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x3")
    let (fragment_shader_derivative_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (framebuffer_attachment_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (framebuffer_attachment_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (framebuffer_attachment_color_encoding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (framebuffer_attachment_component_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (framebuffer_attachment_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (framebuffer_attachment_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (framebuffer_attachment_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (framebuffer_attachment_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (framebuffer_attachment_texture_layer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (framebuffer_default : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_DEFAULT")
    let (framebuffer_incomplete_multisample : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (half_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HALF_FLOAT")
    let (interleaved_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INTERLEAVED_ATTRIBS")
    let (int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_2_10_10_10_REV")
    let (int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D")
    let (int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D_ARRAY")
    let (int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_3D")
    let (int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_CUBE")
    let (invalid_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_INDEX")
    let (max : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MAX")
    let (max_3d_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_3D_TEXTURE_SIZE")
    let (max_array_texture_layers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (max_client_wait_timeout_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (max_color_attachments : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COLOR_ATTACHMENTS")
    let (max_combined_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_combined_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (max_combined_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (max_draw_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_DRAW_BUFFERS")
    let (max_elements_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_INDICES")
    let (max_elements_vertices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_VERTICES")
    let (max_element_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENT_INDEX")
    let (max_fragment_input_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (max_fragment_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (max_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (max_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SAMPLES")
    let (max_server_wait_timeout : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SERVER_WAIT_TIMEOUT")
    let (max_texture_lod_bias : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_LOD_BIAS")
    let (max_transform_feedback_interleaved_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (max_transform_feedback_separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (max_transform_feedback_separate_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (max_uniform_block_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BLOCK_SIZE")
    let (max_uniform_buffer_bindings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (max_varying_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_COMPONENTS")
    let (max_vertex_output_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (max_vertex_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (max_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (min : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MIN")
    let (min_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OBJECT_TYPE")
    let (pack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ROW_LENGTH")
    let (pack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_PIXELS")
    let (pack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_ROWS")
    let (pixel_pack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER")
    let (pixel_pack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER_BINDING")
    let (pixel_unpack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER")
    let (pixel_unpack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (query_result : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT")
    let (query_result_available : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT_AVAILABLE")
    let (r11f_g11f_b10f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R11F_G11F_B10F")
    let (r16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16F")
    let (r16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16I")
    let (r16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16UI")
    let (r32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32F")
    let (r32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32I")
    let (r32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32UI")
    let (r8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8")
    let (r8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8I")
    let (r8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8UI")
    let (r8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R8_SNORM")
    let (rasterizer_discard : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RASTERIZER_DISCARD")
    let (read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_BUFFER")
    let (read_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER")
    let (read_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER_BINDING")
    let (red : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RED")
    let (red_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_INTEGER")
    let (renderbuffer_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_SAMPLES")
    let (rg : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG")
    let (rg16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16F")
    let (rg16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16I")
    let (rg16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG16UI")
    let (rg32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32F")
    let (rg32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32I")
    let (rg32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG32UI")
    let (rg8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8")
    let (rg8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8I")
    let (rg8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8UI")
    let (rg8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG8_SNORM")
    let (rgb10_a2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2")
    let (rgb10_a2ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2UI")
    let (rgb16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16F")
    let (rgb16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16I")
    let (rgb16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16UI")
    let (rgb32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32F")
    let (rgb32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32I")
    let (rgb32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32UI")
    let (rgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8")
    let (rgb8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8I")
    let (rgb8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8UI")
    let (rgb8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8_SNORM")
    let (rgb9_e5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB9_E5")
    let (rgba16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16F")
    let (rgba16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16I")
    let (rgba16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16UI")
    let (rgba32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32F")
    let (rgba32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32I")
    let (rgba32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32UI")
    let (rgba8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA8")
    let (rgba8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8I")
    let (rgba8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8UI")
    let (rgba8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8_SNORM")
    let (rgba_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA_INTEGER")
    let (rgb_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB_INTEGER")
    let (rg_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG_INTEGER")
    let (sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY")
    let (sampler_2d_array_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY_SHADOW")
    let (sampler_2d_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_SHADOW")
    let (sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_3D")
    let (sampler_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_BINDING")
    let (sampler_cube_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE_SHADOW")
    let (separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SEPARATE_ATTRIBS")
    let (signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNALED")
    let (signed_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNED_NORMALIZED")
    let (srgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB")
    let (srgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB8")
    let (srgb8_alpha8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRGB8_ALPHA8")
    let (static_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_COPY")
    let (static_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_READ")
    let (stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL")
    let (stream_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_COPY")
    let (stream_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_READ")
    let (sync_condition : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_CONDITION")
    let (sync_fence : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FENCE")
    let (sync_flags : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLAGS")
    let (sync_flush_commands_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLUSH_COMMANDS_BIT")
    let (sync_gpu_commands_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (sync_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_STATUS")
    let (texture_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D_ARRAY")
    let (texture_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_3D")
    let (texture_base_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BASE_LEVEL")
    let (texture_binding_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D_ARRAY")
    let (texture_binding_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_3D")
    let (texture_compare_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_FUNC")
    let (texture_compare_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_MODE")
    let (texture_immutable_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_FORMAT")
    let (texture_immutable_levels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_LEVELS")
    let (texture_max_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LEVEL")
    let (texture_max_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LOD")
    let (texture_min_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_LOD")
    let (texture_wrap_r : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_R")
    let (timeout_expired : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_EXPIRED")
    let (timeout_ignored : unit -> GLint64.t) =
      fun () ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_IGNORED")
    let (transform_feedback : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK")
    let (transform_feedback_active : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (transform_feedback_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BINDING")
    let (transform_feedback_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER")
    let (transform_feedback_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (transform_feedback_buffer_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (transform_feedback_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (transform_feedback_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (transform_feedback_paused : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PAUSED")
    let (transform_feedback_primitives_written : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (transform_feedback_varyings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (uniform_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_ARRAY_STRIDE")
    let (uniform_block_active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (uniform_block_active_uniform_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (uniform_block_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_BINDING")
    let (uniform_block_data_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_DATA_SIZE")
    let (uniform_block_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_INDEX")
    let (uniform_block_referenced_by_fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (uniform_block_referenced_by_vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (uniform_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER")
    let (uniform_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_BINDING")
    let (uniform_buffer_offset_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (uniform_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_SIZE")
    let (uniform_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_START")
    let (uniform_is_row_major : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_IS_ROW_MAJOR")
    let (uniform_matrix_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_MATRIX_STRIDE")
    let (uniform_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_OFFSET")
    let (uniform_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_SIZE")
    let (uniform_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_TYPE")
    let (unpack_image_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_IMAGE_HEIGHT")
    let (unpack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ROW_LENGTH")
    let (unpack_skip_images : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_IMAGES")
    let (unpack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_PIXELS")
    let (unpack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_ROWS")
    let (unsignaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNALED")
    let (unsigned_int_10f_11f_11f_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (unsigned_int_24_8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_24_8")
    let (unsigned_int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_2_10_10_10_REV")
    let (unsigned_int_5_9_9_9_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_5_9_9_9_REV")
    let (unsigned_int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D")
    let (unsigned_int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (unsigned_int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_3D")
    let (unsigned_int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (unsigned_int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC2")
    let (unsigned_int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC3")
    let (unsigned_int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC4")
    let (unsigned_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_NORMALIZED")
    let (vertex_array_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ARRAY_BINDING")
    let (vertex_attrib_array_divisor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (vertex_attrib_array_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (wait_failed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "WAIT_FAILED")
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ZERO")
  end
module WebAssembly =
  struct
    module ImportExportKind =
      struct
        type t =
          [ `L_s113_memory  | `L_s189_table  | `L_s79_function 
          | `L_s81_global ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10012 : Ojs.t) ->
            let x10013 = x10012 in
            match Ojs.string_of_js x10013 with
            | "memory" -> `L_s113_memory
            | "table" -> `L_s189_table
            | "function" -> `L_s79_function
            | "global" -> `L_s81_global
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10011 :
              [ `L_s113_memory  | `L_s189_table  | `L_s79_function 
              | `L_s81_global ])
            ->
            match x10011 with
            | `L_s113_memory -> Ojs.string_to_js "memory"
            | `L_s189_table -> Ojs.string_to_js "table"
            | `L_s79_function -> Ojs.string_to_js "function"
            | `L_s81_global -> Ojs.string_to_js "global"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10015 : Ojs.t) -> t_of_js x10015
        and t_0_to_js : t_0 -> Ojs.t = fun (x10014 : t) -> t_to_js x10014
      end
    module ModuleImportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleImportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10017 : Ojs.t) -> t_of_js x10017
        and t_0_to_js : t_0 -> Ojs.t = fun (x10016 : t) -> t_to_js x10016
        type tags = [ `WebAssembly_ModuleImportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleImportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10020 : Ojs.t) -> intf_of_js __tags_of_js x10020
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10018 : __tags intf) -> intf_to_js __tags_to_js x10018
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10022 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10022) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10024 : 'tags this) ->
            fun (x10025 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10024) "kind"
                (ImportExportKind.t_to_js x10025)
        let (get_module : 'tags this -> string) =
          fun (x10027 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10027) "module")
        let (set_module : 'tags this -> string -> unit) =
          fun (x10029 : 'tags this) ->
            fun (x10030 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10029) "module"
                (Ojs.string_to_js x10030)
        let (get_name : 'tags this -> string) =
          fun (x10032 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10032) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10034 : 'tags this) ->
            fun (x10035 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10034) "name"
                (Ojs.string_to_js x10035)
        let (create :
          kind:ImportExportKind.t ->
            module_:string -> name:string -> unit -> t)
          =
          fun ~kind:(x10037 : ImportExportKind.t) ->
            fun ~module_:(x10038 : string) ->
              fun ~name:(x10039 : string) ->
                fun () ->
                  let x10040 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10040 "kind"
                    (ImportExportKind.t_to_js x10037);
                  Ojs.set_prop_ascii x10040 "module"
                    (Ojs.string_to_js x10038);
                  Ojs.set_prop_ascii x10040 "name" (Ojs.string_to_js x10039);
                  t_of_js x10040
        let cast_from = Obj.magic
      end
    module ModuleExportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleExportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10042 : Ojs.t) -> t_of_js x10042
        and t_0_to_js : t_0 -> Ojs.t = fun (x10041 : t) -> t_to_js x10041
        type tags = [ `WebAssembly_ModuleExportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleExportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10045 : Ojs.t) -> intf_of_js __tags_of_js x10045
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10043 : __tags intf) -> intf_to_js __tags_to_js x10043
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x10047 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10047) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x10049 : 'tags this) ->
            fun (x10050 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10049) "kind"
                (ImportExportKind.t_to_js x10050)
        let (get_name : 'tags this -> string) =
          fun (x10052 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10052) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x10054 : 'tags this) ->
            fun (x10055 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10054) "name"
                (Ojs.string_to_js x10055)
        let (create : kind:ImportExportKind.t -> name:string -> unit -> t) =
          fun ~kind:(x10057 : ImportExportKind.t) ->
            fun ~name:(x10058 : string) ->
              fun () ->
                let x10059 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10059 "kind"
                  (ImportExportKind.t_to_js x10057);
                Ojs.set_prop_ascii x10059 "name" (Ojs.string_to_js x10058);
                t_of_js x10059
        let cast_from = Obj.magic
      end
    module Module =
      struct
        type t = [ `WebAssembly_Module ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10061 : Ojs.t) -> t_of_js x10061
        and t_0_to_js : t_0 -> Ojs.t = fun (x10060 : t) -> t_to_js x10060
        type tags = [ `WebAssembly_Module ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Module ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10064 : Ojs.t) -> intf_of_js __tags_of_js x10064
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10062 : __tags intf) -> intf_to_js __tags_to_js x10062
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "prototype")
        let (create : BufferSource.t -> t) =
          fun (x10066 : BufferSource.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 [|(BufferSource.t_to_js x10066)|])
        let (customSections :
          moduleObject:t -> sectionName:string -> ArrayBuffer.t_0 list) =
          fun ~moduleObject:(x10067 : t) ->
            fun ~sectionName:(x10068 : string) ->
              Ojs.list_of_js ArrayBuffer.t_0_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                   "customSections"
                   [|(t_to_js x10067);(Ojs.string_to_js x10068)|])
        let (exports : t -> ModuleExportDescriptor.t list) =
          fun (x10070 : t) ->
            Ojs.list_of_js ModuleExportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "exports" [|(t_to_js x10070)|])
        let (imports : t -> ModuleImportDescriptor.t list) =
          fun (x10072 : t) ->
            Ojs.list_of_js ModuleImportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "imports" [|(t_to_js x10072)|])
      end
    module TableKind =
      struct
        type t = [ `L_s36_anyfunc  | `L_s69_externref ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10075 : Ojs.t) ->
            let x10076 = x10075 in
            match Ojs.string_of_js x10076 with
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s69_externref
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x10074 : [ `L_s36_anyfunc  | `L_s69_externref ]) ->
            match x10074 with
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s69_externref -> Ojs.string_to_js "externref"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10078 : Ojs.t) -> t_of_js x10078
        and t_0_to_js : t_0 -> Ojs.t = fun (x10077 : t) -> t_to_js x10077
      end
    module TableDescriptor =
      struct
        type t = [ `WebAssembly_TableDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10080 : Ojs.t) -> t_of_js x10080
        and t_0_to_js : t_0 -> Ojs.t = fun (x10079 : t) -> t_to_js x10079
        type tags = [ `WebAssembly_TableDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_TableDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10083 : Ojs.t) -> intf_of_js __tags_of_js x10083
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10081 : __tags intf) -> intf_to_js __tags_to_js x10081
        let (get_element : 'tags this -> TableKind.t) =
          fun (x10085 : 'tags this) ->
            TableKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10085) "element")
        let (set_element : 'tags this -> TableKind.t -> unit) =
          fun (x10087 : 'tags this) ->
            fun (x10088 : TableKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10087) "element"
                (TableKind.t_to_js x10088)
        let (get_initial : 'tags this -> float) =
          fun (x10090 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10090) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10092 : 'tags this) ->
            fun (x10093 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10092) "initial"
                (Ojs.float_to_js x10093)
        let (get_maximum : 'tags this -> float) =
          fun (x10095 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10095) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10097 : 'tags this) ->
            fun (x10098 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10097) "maximum"
                (Ojs.float_to_js x10098)
        let (create :
          element:TableKind.t -> initial:float -> maximum:float -> unit -> t)
          =
          fun ~element:(x10100 : TableKind.t) ->
            fun ~initial:(x10101 : float) ->
              fun ~maximum:(x10102 : float) ->
                fun () ->
                  let x10103 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10103 "element"
                    (TableKind.t_to_js x10100);
                  Ojs.set_prop_ascii x10103 "initial"
                    (Ojs.float_to_js x10101);
                  Ojs.set_prop_ascii x10103 "maximum"
                    (Ojs.float_to_js x10102);
                  t_of_js x10103
        let cast_from = Obj.magic
      end
    module Table =
      struct
        type t = [ `WebAssembly_Table ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10105 : Ojs.t) -> t_of_js x10105
        and t_0_to_js : t_0 -> Ojs.t = fun (x10104 : t) -> t_to_js x10104
        type tags = [ `WebAssembly_Table ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Table ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10108 : Ojs.t) -> intf_of_js __tags_of_js x10108
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10106 : __tags intf) -> intf_to_js __tags_to_js x10106
        let (get_length : 'tags this -> float) =
          fun (x10110 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10110) "length")
        let (get_ : 'tags this -> index:float -> any) =
          fun (x10113 : 'tags this) ->
            fun ~index:(x10112 : float) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x10113) "get"
                   [|(Ojs.float_to_js x10112)|])
        let (grow : 'tags this -> delta:float -> ?value:any -> unit -> float)
          =
          fun (x10119 : 'tags this) ->
            fun ~delta:(x10115 : float) ->
              fun ?value:(x10116 : any option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x10121 = this_to_js Obj.magic x10119 in
                     Ojs.call (Ojs.get_prop_ascii x10121 "grow") "apply"
                       [|x10121;((let x10117 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10117 "push"
                                       [|(Ojs.float_to_js x10115)|]);
                                  (match x10116 with
                                   | Some x10118 ->
                                       ignore
                                         (Ojs.call x10117 "push"
                                            [|(any_to_js x10118)|])
                                   | None -> ());
                                  x10117))|])
        let (set_ : 'tags this -> index:float -> ?value:any -> unit -> unit)
          =
          fun (x10126 : 'tags this) ->
            fun ~index:(x10122 : float) ->
              fun ?value:(x10123 : any option) ->
                fun () ->
                  ignore
                    (let x10128 = this_to_js Obj.magic x10126 in
                     Ojs.call (Ojs.get_prop_ascii x10128 "set") "apply"
                       [|x10128;((let x10124 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x10124 "push"
                                       [|(Ojs.float_to_js x10122)|]);
                                  (match x10123 with
                                   | Some x10125 ->
                                       ignore
                                         (Ojs.call x10124 "push"
                                            [|(any_to_js x10125)|])
                                   | None -> ());
                                  x10124))|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                 "prototype")
        let (create :
          descriptor:TableDescriptor.t -> ?value:any -> unit -> t) =
          fun ~descriptor:(x10129 : TableDescriptor.t) ->
            fun ?value:(x10130 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                     (let x10131 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10131 "push"
                           [|(TableDescriptor.t_to_js x10129)|]);
                      (match x10130 with
                       | Some x10132 ->
                           ignore
                             (Ojs.call x10131 "push" [|(any_to_js x10132)|])
                       | None -> ());
                      x10131))
      end
    module MemoryDescriptor =
      struct
        type t = [ `WebAssembly_MemoryDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10134 : Ojs.t) -> t_of_js x10134
        and t_0_to_js : t_0 -> Ojs.t = fun (x10133 : t) -> t_to_js x10133
        type tags = [ `WebAssembly_MemoryDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_MemoryDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10137 : Ojs.t) -> intf_of_js __tags_of_js x10137
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10135 : __tags intf) -> intf_to_js __tags_to_js x10135
        let (get_initial : 'tags this -> float) =
          fun (x10139 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10139) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x10141 : 'tags this) ->
            fun (x10142 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10141) "initial"
                (Ojs.float_to_js x10142)
        let (get_maximum : 'tags this -> float) =
          fun (x10144 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10144) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x10146 : 'tags this) ->
            fun (x10147 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10146) "maximum"
                (Ojs.float_to_js x10147)
        let (get_shared : 'tags this -> bool) =
          fun (x10149 : 'tags this) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10149) "shared")
        let (set_shared : 'tags this -> bool -> unit) =
          fun (x10151 : 'tags this) ->
            fun (x10152 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10151) "shared"
                (Ojs.bool_to_js x10152)
        let (create :
          initial:float -> maximum:float -> shared:bool -> unit -> t) =
          fun ~initial:(x10154 : float) ->
            fun ~maximum:(x10155 : float) ->
              fun ~shared:(x10156 : bool) ->
                fun () ->
                  let x10157 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10157 "initial"
                    (Ojs.float_to_js x10154);
                  Ojs.set_prop_ascii x10157 "maximum"
                    (Ojs.float_to_js x10155);
                  Ojs.set_prop_ascii x10157 "shared" (Ojs.bool_to_js x10156);
                  t_of_js x10157
        let cast_from = Obj.magic
      end
    module Memory =
      struct
        type t = [ `WebAssembly_Memory ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10159 : Ojs.t) -> t_of_js x10159
        and t_0_to_js : t_0 -> Ojs.t = fun (x10158 : t) -> t_to_js x10158
        type tags = [ `WebAssembly_Memory ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Memory ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10162 : Ojs.t) -> intf_of_js __tags_of_js x10162
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10160 : __tags intf) -> intf_to_js __tags_to_js x10160
        let (get_buffer : 'tags this -> ArrayBuffer.t_0) =
          fun (x10164 : 'tags this) ->
            ArrayBuffer.t_0_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10164) "buffer")
        let (grow : 'tags this -> delta:float -> float) =
          fun (x10167 : 'tags this) ->
            fun ~delta:(x10166 : float) ->
              Ojs.float_of_js
                (Ojs.call (this_to_js Obj.magic x10167) "grow"
                   [|(Ojs.float_to_js x10166)|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 "prototype")
        let (create : MemoryDescriptor.t -> t) =
          fun (x10169 : MemoryDescriptor.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 [|(MemoryDescriptor.t_to_js x10169)|])
      end
    module ValueType =
      struct
        type t =
          [ `L_s36_anyfunc  | `L_s69_externref  | `L_s70_f32  | `L_s71_f64 
          | `L_s87_i32  | `L_s88_i64 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x10171 : Ojs.t) ->
            let x10172 = x10171 in
            match Ojs.string_of_js x10172 with
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s69_externref
            | "f32" -> `L_s70_f32
            | "f64" -> `L_s71_f64
            | "i32" -> `L_s87_i32
            | "i64" -> `L_s88_i64
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x10170 :
              [ `L_s36_anyfunc  | `L_s69_externref  | `L_s70_f32 
              | `L_s71_f64  | `L_s87_i32  | `L_s88_i64 ])
            ->
            match x10170 with
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s69_externref -> Ojs.string_to_js "externref"
            | `L_s70_f32 -> Ojs.string_to_js "f32"
            | `L_s71_f64 -> Ojs.string_to_js "f64"
            | `L_s87_i32 -> Ojs.string_to_js "i32"
            | `L_s88_i64 -> Ojs.string_to_js "i64"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10174 : Ojs.t) -> t_of_js x10174
        and t_0_to_js : t_0 -> Ojs.t = fun (x10173 : t) -> t_to_js x10173
      end
    module GlobalDescriptor =
      struct
        type t = [ `WebAssembly_GlobalDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10176 : Ojs.t) -> t_of_js x10176
        and t_0_to_js : t_0 -> Ojs.t = fun (x10175 : t) -> t_to_js x10175
        type tags = [ `WebAssembly_GlobalDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_GlobalDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10179 : Ojs.t) -> intf_of_js __tags_of_js x10179
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10177 : __tags intf) -> intf_to_js __tags_to_js x10177
        let (get_mutable : 'tags this -> bool) =
          fun (x10181 : 'tags this) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10181) "mutable")
        let (set_mutable : 'tags this -> bool -> unit) =
          fun (x10183 : 'tags this) ->
            fun (x10184 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10183) "mutable"
                (Ojs.bool_to_js x10184)
        let (get_value : 'tags this -> ValueType.t) =
          fun (x10186 : 'tags this) ->
            ValueType.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10186) "value")
        let (set_value : 'tags this -> ValueType.t -> unit) =
          fun (x10188 : 'tags this) ->
            fun (x10189 : ValueType.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10188) "value"
                (ValueType.t_to_js x10189)
        let (create : mutable_:bool -> value:ValueType.t -> unit -> t) =
          fun ~mutable_:(x10191 : bool) ->
            fun ~value:(x10192 : ValueType.t) ->
              fun () ->
                let x10193 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10193 "mutable" (Ojs.bool_to_js x10191);
                Ojs.set_prop_ascii x10193 "value" (ValueType.t_to_js x10192);
                t_of_js x10193
        let cast_from = Obj.magic
      end
    module Global =
      struct
        type t = [ `WebAssembly_Global ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10195 : Ojs.t) -> t_of_js x10195
        and t_0_to_js : t_0 -> Ojs.t = fun (x10194 : t) -> t_to_js x10194
        type tags = [ `WebAssembly_Global ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Global ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10198 : Ojs.t) -> intf_of_js __tags_of_js x10198
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10196 : __tags intf) -> intf_to_js __tags_to_js x10196
        let (get_value : 'tags this -> any) =
          fun (x10200 : 'tags this) ->
            any_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10200) "value")
        let (set_value : 'tags this -> any -> unit) =
          fun (x10202 : 'tags this) ->
            fun (x10203 : any) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10202) "value"
                (any_to_js x10203)
        let (valueOf : 'tags this -> any) =
          fun (x10205 : 'tags this) ->
            any_of_js (Ojs.call (this_to_js Obj.magic x10205) "valueOf" [||])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Global")
                 "prototype")
        let (create : descriptor:GlobalDescriptor.t -> ?v:any -> unit -> t) =
          fun ~descriptor:(x10207 : GlobalDescriptor.t) ->
            fun ?v:(x10208 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Global")
                     (let x10209 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10209 "push"
                           [|(GlobalDescriptor.t_to_js x10207)|]);
                      (match x10208 with
                       | Some x10210 ->
                           ignore
                             (Ojs.call x10209 "push" [|(any_to_js x10210)|])
                       | None -> ());
                      x10209))
      end
    module ExportValue =
      struct
        type t = (Global.t, Memory.t, Table.t) union3
        let rec t_of_js : Ojs.t -> t =
          fun (x10215 : Ojs.t) ->
            union3_of_js Global.t_of_js Memory.t_of_js Table.t_of_js x10215
        and t_to_js : t -> Ojs.t =
          fun (x10211 : (Global.t, Memory.t, Table.t) union3) ->
            union3_to_js Global.t_to_js Memory.t_to_js Table.t_to_js x10211
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10220 : Ojs.t) -> t_of_js x10220
        and t_0_to_js : t_0 -> Ojs.t = fun (x10219 : t) -> t_to_js x10219
      end
    module ImportValue =
      struct
        type t = ExportValue.t or_number
        let rec t_of_js : Ojs.t -> t =
          fun (x10223 : Ojs.t) -> or_number_of_js ExportValue.t_of_js x10223
        and t_to_js : t -> Ojs.t =
          fun (x10221 : ExportValue.t or_number) ->
            or_number_to_js ExportValue.t_to_js x10221
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10226 : Ojs.t) -> t_of_js x10226
        and t_0_to_js : t_0 -> Ojs.t = fun (x10225 : t) -> t_to_js x10225
      end
    module ModuleImports =
      struct
        type t = (string, ImportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10230 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ImportValue.t_of_js x10230
        and t_to_js : t -> Ojs.t =
          fun (x10227 : (string, ImportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ImportValue.t_to_js x10227
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10234 : Ojs.t) -> t_of_js x10234
        and t_0_to_js : t_0 -> Ojs.t = fun (x10233 : t) -> t_to_js x10233
      end
    module Imports =
      struct
        type t = (string, ModuleImports.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10238 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ModuleImports.t_of_js x10238
        and t_to_js : t -> Ojs.t =
          fun (x10235 : (string, ModuleImports.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ModuleImports.t_to_js x10235
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10242 : Ojs.t) -> t_of_js x10242
        and t_0_to_js : t_0 -> Ojs.t = fun (x10241 : t) -> t_to_js x10241
      end
    module Exports =
      struct
        type t = (string, ExportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x10246 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ExportValue.t_of_js x10246
        and t_to_js : t -> Ojs.t =
          fun (x10243 : (string, ExportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ExportValue.t_to_js x10243
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10250 : Ojs.t) -> t_of_js x10250
        and t_0_to_js : t_0 -> Ojs.t = fun (x10249 : t) -> t_to_js x10249
      end
    module Instance =
      struct
        type t = [ `WebAssembly_Instance ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10252 : Ojs.t) -> t_of_js x10252
        and t_0_to_js : t_0 -> Ojs.t = fun (x10251 : t) -> t_to_js x10251
        type tags = [ `WebAssembly_Instance ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Instance ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10255 : Ojs.t) -> intf_of_js __tags_of_js x10255
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10253 : __tags intf) -> intf_to_js __tags_to_js x10253
        let (get_exports : 'tags this -> Exports.t) =
          fun (x10257 : 'tags this) ->
            Exports.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10257) "exports")
        let (create : exports:Exports.t -> unit -> t) =
          fun ~exports:(x10259 : Exports.t) ->
            fun () ->
              let x10260 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x10260 "exports" (Exports.t_to_js x10259);
              t_of_js x10260
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Instance")
                 "prototype")
        let (create' :
          module_:Module.t -> ?importObject:Imports.t -> unit -> t) =
          fun ~module_:(x10261 : Module.t) ->
            fun ?importObject:(x10262 : Imports.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Instance")
                     (let x10263 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x10263 "push" [|(Module.t_to_js x10261)|]);
                      (match x10262 with
                       | Some x10264 ->
                           ignore
                             (Ojs.call x10263 "push"
                                [|(Imports.t_to_js x10264)|])
                       | None -> ());
                      x10263))
      end
    module WebAssemblyInstantiatedSource =
      struct
        type t = [ `WebAssembly_WebAssemblyInstantiatedSource ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10266 : Ojs.t) -> t_of_js x10266
        and t_0_to_js : t_0 -> Ojs.t = fun (x10265 : t) -> t_to_js x10265
        type tags = [ `WebAssembly_WebAssemblyInstantiatedSource ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_WebAssemblyInstantiatedSource ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10269 : Ojs.t) -> intf_of_js __tags_of_js x10269
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10267 : __tags intf) -> intf_to_js __tags_to_js x10267
        let (get_instance : 'tags this -> Instance.t) =
          fun (x10271 : 'tags this) ->
            Instance.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10271) "instance")
        let (set_instance : 'tags this -> Instance.t -> unit) =
          fun (x10273 : 'tags this) ->
            fun (x10274 : Instance.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10273) "instance"
                (Instance.t_to_js x10274)
        let (get_module : 'tags this -> Module.t) =
          fun (x10276 : 'tags this) ->
            Module.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x10276) "module")
        let (set_module : 'tags this -> Module.t -> unit) =
          fun (x10278 : 'tags this) ->
            fun (x10279 : Module.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x10278) "module"
                (Module.t_to_js x10279)
        let (create : instance:Instance.t -> module_:Module.t -> unit -> t) =
          fun ~instance:(x10281 : Instance.t) ->
            fun ~module_:(x10282 : Module.t) ->
              fun () ->
                let x10283 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x10283 "instance"
                  (Instance.t_to_js x10281);
                Ojs.set_prop_ascii x10283 "module" (Module.t_to_js x10282);
                t_of_js x10283
        let cast_from = Obj.magic
      end
    module RuntimeError =
      struct
        type t = [ `WebAssembly_RuntimeError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10285 : Ojs.t) -> t_of_js x10285
        and t_0_to_js : t_0 -> Ojs.t = fun (x10284 : t) -> t_to_js x10284
        type tags = [ `WebAssembly_RuntimeError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_RuntimeError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10288 : Ojs.t) -> intf_of_js __tags_of_js x10288
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10286 : __tags intf) -> intf_to_js __tags_to_js x10286
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "RuntimeError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10290 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError")
                   (let x10291 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10290 with
                     | Some x10292 ->
                         ignore
                           (Ojs.call x10291 "push"
                              [|(Ojs.string_to_js x10292)|])
                     | None -> ());
                    x10291))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10293 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError") "apply"
                   [|Ojs.null;((let x10294 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10293 with
                                 | Some x10295 ->
                                     ignore
                                       (Ojs.call x10294 "push"
                                          [|(Ojs.string_to_js x10295)|])
                                 | None -> ());
                                x10294))|])
      end
    module LinkError =
      struct
        type t = [ `WebAssembly_LinkError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10297 : Ojs.t) -> t_of_js x10297
        and t_0_to_js : t_0 -> Ojs.t = fun (x10296 : t) -> t_to_js x10296
        type tags = [ `WebAssembly_LinkError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_LinkError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10300 : Ojs.t) -> intf_of_js __tags_of_js x10300
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10298 : __tags intf) -> intf_to_js __tags_to_js x10298
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "LinkError")
                 "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10302 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError")
                   (let x10303 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10302 with
                     | Some x10304 ->
                         ignore
                           (Ojs.call x10303 "push"
                              [|(Ojs.string_to_js x10304)|])
                     | None -> ());
                    x10303))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10305 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError") "apply"
                   [|Ojs.null;((let x10306 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10305 with
                                 | Some x10307 ->
                                     ignore
                                       (Ojs.call x10306 "push"
                                          [|(Ojs.string_to_js x10307)|])
                                 | None -> ());
                                x10306))|])
      end
    module CompileError =
      struct
        type t = [ `WebAssembly_CompileError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x10309 : Ojs.t) -> t_of_js x10309
        and t_0_to_js : t_0 -> Ojs.t = fun (x10308 : t) -> t_to_js x10308
        type tags = [ `WebAssembly_CompileError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_CompileError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x10312 : Ojs.t) -> intf_of_js __tags_of_js x10312
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x10310 : __tags intf) -> intf_to_js __tags_to_js x10310
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "CompileError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x10314 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError")
                   (let x10315 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10314 with
                     | Some x10316 ->
                         ignore
                           (Ojs.call x10315 "push"
                              [|(Ojs.string_to_js x10316)|])
                     | None -> ());
                    x10315))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x10317 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError") "apply"
                   [|Ojs.null;((let x10318 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x10317 with
                                 | Some x10319 ->
                                     ignore
                                       (Ojs.call x10318 "push"
                                          [|(Ojs.string_to_js x10319)|])
                                 | None -> ());
                                x10318))|])
      end
    let (compile : BufferSource.t -> Module.t Promise.t_1) =
      fun (x10320 : BufferSource.t) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "compile"
             [|(BufferSource.t_to_js x10320)|])
    let (compileStreaming : Response.t -> Module.t Promise.t_1) =
      fun (x10322 : Response.t) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly")
             "compileStreaming" [|(Response.t_to_js x10322)|])
    let (instantiate :
      bytes:BufferSource.t ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~bytes:(x10324 : BufferSource.t) ->
        fun ?importObject:(x10325 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10328 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10328 "instantiate") "apply"
                 [|x10328;((let x10326 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10326 "push"
                                 [|(BufferSource.t_to_js x10324)|]);
                            (match x10325 with
                             | Some x10327 ->
                                 ignore
                                   (Ojs.call x10326 "push"
                                      [|(Imports.t_to_js x10327)|])
                             | None -> ());
                            x10326))|])
    let (instantiate' :
      moduleObject:Module.t ->
        ?importObject:Imports.t -> unit -> Instance.t Promise.t_1)
      =
      fun ~moduleObject:(x10330 : Module.t) ->
        fun ?importObject:(x10331 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js Instance.t_of_js
              (let x10334 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10334 "instantiate") "apply"
                 [|x10334;((let x10332 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10332 "push"
                                 [|(Module.t_to_js x10330)|]);
                            (match x10331 with
                             | Some x10333 ->
                                 ignore
                                   (Ojs.call x10332 "push"
                                      [|(Imports.t_to_js x10333)|])
                             | None -> ());
                            x10332))|])
    let (instantiateStreaming :
      source:Response.t ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~source:(x10336 : Response.t) ->
        fun ?importObject:(x10337 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x10340 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x10340 "instantiateStreaming")
                 "apply"
                 [|x10340;((let x10338 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x10338 "push"
                                 [|(Response.t_to_js x10336)|]);
                            (match x10337 with
                             | Some x10339 ->
                                 ignore
                                   (Ojs.call x10338 "push"
                                      [|(Imports.t_to_js x10339)|])
                             | None -> ());
                            x10338))|])
    let (validate : BufferSource.t -> bool) =
      fun (x10342 : BufferSource.t) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "validate"
             [|(BufferSource.t_to_js x10342)|])
  end
module TransformStreamDefaultController =
  struct
    type 'O t = [ `TransformStreamDefaultController of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x10345 : Ojs.t) -> t_of_js __O_of_js x10345
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x10343 : __O t) -> t_to_js __O_to_js x10343
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10349 : Ojs.t) -> t_of_js any_of_js x10349
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10347 : any t) -> t_to_js any_to_js x10347
    type 'O tags = [ `TransformStreamDefaultController of 'O ]
    type 'O tags_1 = 'O tags
    type tags_0 = any tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformStreamDefaultController of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10353 : Ojs.t) -> intf_of_js __tags_of_js x10353
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10351 : __tags intf) -> intf_to_js __tags_to_js x10351
    let (get_desiredSize : ('tags, 'O) this -> float or_null) =
      fun (x10355 : ('tags, 'O) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x10355)
             "desiredSize")
    let (enqueue : ('tags, 'O) this -> ?chunk:'O -> unit -> unit) =
      fun (x10362 : ('tags, 'O) this) ->
        fun ?chunk:(x10359 : 'O option) ->
          fun () ->
            ignore
              (let x10365 = this_to_js Obj.magic Obj.magic x10362 in
               Ojs.call (Ojs.get_prop_ascii x10365 "enqueue") "apply"
                 [|x10365;((let x10360 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10359 with
                             | Some x10361 ->
                                 ignore
                                   (Ojs.call x10360 "push"
                                      [|(Obj.magic x10361)|])
                             | None -> ());
                            x10360))|])
    let (error : ('tags, 'O) this -> ?reason:any -> unit -> unit) =
      fun (x10369 : ('tags, 'O) this) ->
        fun ?reason:(x10366 : any option) ->
          fun () ->
            ignore
              (let x10372 = this_to_js Obj.magic Obj.magic x10369 in
               Ojs.call (Ojs.get_prop_ascii x10372 "error") "apply"
                 [|x10372;((let x10367 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10366 with
                             | Some x10368 ->
                                 ignore
                                   (Ojs.call x10367 "push"
                                      [|(any_to_js x10368)|])
                             | None -> ());
                            x10367))|])
    let (terminate : ('tags, 'O) this -> unit) =
      fun (x10373 : ('tags, 'O) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x10373) "terminate" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") [||])
  end
module TransformerTransformCallback =
  struct
    type ('I, 'O) t = [ `TransformerTransformCallback of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10379 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10379
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10376 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x10376
    type ('I, 'O) tags = [ `TransformerTransformCallback of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformerTransformCallback of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x10384 : Ojs.t) -> intf_of_js __tags_of_js x10384
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x10382 : __tags intf) -> intf_to_js __tags_to_js x10382
    let (apply :
      ('tags, 'I, 'O) this ->
        chunk:'I -> controller:'O TransformStreamDefaultController.t -> unit)
      =
      fun (x10389 : ('tags, 'I, 'O) this) ->
        fun ~chunk:(x10386 : 'I) ->
          fun ~controller:(x10387 : 'O TransformStreamDefaultController.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic Obj.magic Obj.magic x10389)
                 [|(Obj.magic x10386);(TransformStreamDefaultController.t_to_js
                                         Obj.magic x10387)|])
    let cast_from = Obj.magic
  end
module TransformerStartCallback =
  struct
    type 'O t = [ `TransformerStartCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x10395 : Ojs.t) -> t_of_js __O_of_js x10395
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x10393 : __O t) -> t_to_js __O_to_js x10393
    type 'O tags = [ `TransformerStartCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10399 : Ojs.t) -> intf_of_js __tags_of_js x10399
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10397 : __tags intf) -> intf_to_js __tags_to_js x10397
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> any)
      =
      fun (x10403 : ('tags, 'O) this) ->
        fun ~controller:(x10401 : 'O TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x10403)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x10401)|])
    let cast_from = Obj.magic
  end
module TransformerFlushCallback =
  struct
    type 'O t = [ `TransformerFlushCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x10408 : Ojs.t) -> t_of_js __O_of_js x10408
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x10406 : __O t) -> t_to_js __O_to_js x10406
    type 'O tags = [ `TransformerFlushCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10412 : Ojs.t) -> intf_of_js __tags_of_js x10412
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10410 : __tags intf) -> intf_to_js __tags_to_js x10410
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> unit)
      =
      fun (x10416 : ('tags, 'O) this) ->
        fun ~controller:(x10414 : 'O TransformStreamDefaultController.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic Obj.magic x10416)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x10414)|])
    let cast_from = Obj.magic
  end
module Transformer =
  struct
    type ('I, 'O) t = [ `Transformer of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10422 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10422
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10419 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x10419
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x10428 : Ojs.t) -> t_of_js __I_of_js any_of_js x10428
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x10425 : (__I, any) t) -> t_to_js __I_to_js any_to_js x10425
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10434 : Ojs.t) -> t_of_js any_of_js any_of_js x10434
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10431 : (any, any) t) -> t_to_js any_to_js any_to_js x10431
    type ('I, 'O) tags = [ `Transformer of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x10439 : Ojs.t) -> intf_of_js __tags_of_js x10439
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x10437 : __tags intf) -> intf_to_js __tags_to_js x10437
    let (get_flush : ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t) =
      fun (x10441 : ('tags, 'I, 'O) this) ->
        TransformerFlushCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10441) "flush")
    let (set_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit) =
      fun (x10446 : ('tags, 'I, 'O) this) ->
        fun (x10447 : 'O TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10446) "flush"
            (TransformerFlushCallback.t_to_js Obj.magic x10447)
    let (get_readableType : ('tags, 'I, 'O) this -> never or_undefined) =
      fun (x10452 : ('tags, 'I, 'O) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10452) "readableType")
    let (set_readableType :
      ('tags, 'I, 'O) this -> never or_undefined -> unit) =
      fun (x10457 : ('tags, 'I, 'O) this) ->
        fun (x10458 : never or_undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10457) "readableType"
            (or_undefined_to_js never_to_js x10458)
    let (get_start : ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t) =
      fun (x10463 : ('tags, 'I, 'O) this) ->
        TransformerStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10463) "start")
    let (set_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit) =
      fun (x10468 : ('tags, 'I, 'O) this) ->
        fun (x10469 : 'O TransformerStartCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10468) "start"
            (TransformerStartCallback.t_to_js Obj.magic x10469)
    let (get_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t) =
      fun (x10474 : ('tags, 'I, 'O) this) ->
        TransformerTransformCallback.t_of_js Obj.magic Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10474) "transform")
    let (set_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit)
      =
      fun (x10480 : ('tags, 'I, 'O) this) ->
        fun (x10481 : ('I, 'O) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10480) "transform"
            (TransformerTransformCallback.t_to_js Obj.magic Obj.magic x10481)
    let (get_writableType : ('tags, 'I, 'O) this -> never or_undefined) =
      fun (x10487 : ('tags, 'I, 'O) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10487) "writableType")
    let (set_writableType :
      ('tags, 'I, 'O) this -> never or_undefined -> unit) =
      fun (x10492 : ('tags, 'I, 'O) this) ->
        fun (x10493 : never or_undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10492) "writableType"
            (or_undefined_to_js never_to_js x10493)
    let (create :
      flush:'O TransformerFlushCallback.t ->
        ?readableType:never ->
          start:'O TransformerStartCallback.t ->
            transform:('I, 'O) TransformerTransformCallback.t ->
              ?writableType:never -> unit -> ('I, 'O) t)
      =
      fun ~flush:(x10498 : 'O TransformerFlushCallback.t) ->
        fun ?readableType:(x10499 : never option) ->
          fun ~start:(x10500 : 'O TransformerStartCallback.t) ->
            fun ~transform:(x10501 : ('I, 'O) TransformerTransformCallback.t)
              ->
              fun ?writableType:(x10502 : never option) ->
                fun () ->
                  let x10503 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x10503 "flush"
                    (TransformerFlushCallback.t_to_js Obj.magic x10498);
                  (match x10499 with
                   | Some x10510 ->
                       Ojs.set_prop_ascii x10503 "readableType"
                         (never_to_js x10510)
                   | None -> ());
                  Ojs.set_prop_ascii x10503 "start"
                    (TransformerStartCallback.t_to_js Obj.magic x10500);
                  Ojs.set_prop_ascii x10503 "transform"
                    (TransformerTransformCallback.t_to_js Obj.magic Obj.magic
                       x10501);
                  (match x10502 with
                   | Some x10506 ->
                       Ojs.set_prop_ascii x10503 "writableType"
                         (never_to_js x10506)
                   | None -> ());
                  t_of_js Obj.magic Obj.magic x10503
    let cast_from = Obj.magic
  end
module TransformStream =
  struct
    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10515 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10515
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10512 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x10512
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x10521 : Ojs.t) -> t_of_js __I_of_js any_of_js x10521
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x10518 : (__I, any) t) -> t_to_js __I_to_js any_to_js x10518
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10527 : Ojs.t) -> t_of_js any_of_js any_of_js x10527
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10524 : (any, any) t) -> t_to_js any_to_js any_to_js x10524
    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x10532 : Ojs.t) -> intf_of_js __tags_of_js x10532
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x10530 : __tags intf) -> intf_to_js __tags_to_js x10530
    let (get_readable : ('tags, 'I, 'O) this -> 'O ReadableStream.t) =
      fun (x10534 : ('tags, 'I, 'O) this) ->
        ReadableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10534) "readable")
    let (get_writable : ('tags, 'I, 'O) this -> 'I WritableStream.t) =
      fun (x10539 : ('tags, 'I, 'O) this) ->
        WritableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10539) "writable")
    let (create :
      readable:'O ReadableStream.t ->
        writable:'I WritableStream.t -> unit -> ('I, 'O) t)
      =
      fun ~readable:(x10544 : 'O ReadableStream.t) ->
        fun ~writable:(x10545 : 'I WritableStream.t) ->
          fun () ->
            let x10546 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10546 "readable"
              (ReadableStream.t_to_js Obj.magic x10544);
            Ojs.set_prop_ascii x10546 "writable"
              (WritableStream.t_to_js Obj.magic x10545);
            t_of_js Obj.magic Obj.magic x10546
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TransformStream") "prototype")
    let (create' :
      ?transformer:('I, 'O) Transformer.t ->
        ?writableStrategy:'I QueuingStrategy.t ->
          ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t)
      =
      fun ?transformer:(x10551 : ('I, 'O) Transformer.t option) ->
        fun ?writableStrategy:(x10552 : 'I QueuingStrategy.t option) ->
          fun ?readableStrategy:(x10553 : 'O QueuingStrategy.t option) ->
            fun () ->
              t_of_js Obj.magic Obj.magic
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "TransformStream")
                   (let x10554 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10551 with
                     | Some x10559 ->
                         ignore
                           (Ojs.call x10554 "push"
                              [|(Transformer.t_to_js Obj.magic Obj.magic
                                   x10559)|])
                     | None -> ());
                    (match x10552 with
                     | Some x10557 ->
                         ignore
                           (Ojs.call x10554 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x10557)|])
                     | None -> ());
                    (match x10553 with
                     | Some x10555 ->
                         ignore
                           (Ojs.call x10554 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x10555)|])
                     | None -> ());
                    x10554))
  end
module TextMetrics =
  struct
    type t = [ `TextMetrics ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10565 : Ojs.t) -> t_of_js x10565
    and t_0_to_js : t_0 -> Ojs.t = fun (x10564 : t) -> t_to_js x10564
    type tags = [ `TextMetrics ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10568 : Ojs.t) -> intf_of_js __tags_of_js x10568
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10566 : __tags intf) -> intf_to_js __tags_to_js x10566
    let (get_actualBoundingBoxAscent : 'tags this -> float) =
      fun (x10570 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10570)
             "actualBoundingBoxAscent")
    let (get_actualBoundingBoxDescent : 'tags this -> float) =
      fun (x10572 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10572)
             "actualBoundingBoxDescent")
    let (get_actualBoundingBoxLeft : 'tags this -> float) =
      fun (x10574 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10574)
             "actualBoundingBoxLeft")
    let (get_actualBoundingBoxRight : 'tags this -> float) =
      fun (x10576 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10576)
             "actualBoundingBoxRight")
    let (get_fontBoundingBoxAscent : 'tags this -> float) =
      fun (x10578 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10578)
             "fontBoundingBoxAscent")
    let (get_fontBoundingBoxDescent : 'tags this -> float) =
      fun (x10580 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10580)
             "fontBoundingBoxDescent")
    let (get_width : 'tags this -> float) =
      fun (x10582 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10582) "width")
    let (create :
      actualBoundingBoxAscent:float ->
        actualBoundingBoxDescent:float ->
          actualBoundingBoxLeft:float ->
            actualBoundingBoxRight:float ->
              fontBoundingBoxAscent:float ->
                fontBoundingBoxDescent:float -> width:float -> unit -> t)
      =
      fun ~actualBoundingBoxAscent:(x10584 : float) ->
        fun ~actualBoundingBoxDescent:(x10585 : float) ->
          fun ~actualBoundingBoxLeft:(x10586 : float) ->
            fun ~actualBoundingBoxRight:(x10587 : float) ->
              fun ~fontBoundingBoxAscent:(x10588 : float) ->
                fun ~fontBoundingBoxDescent:(x10589 : float) ->
                  fun ~width:(x10590 : float) ->
                    fun () ->
                      let x10591 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x10591 "actualBoundingBoxAscent"
                        (Ojs.float_to_js x10584);
                      Ojs.set_prop_ascii x10591 "actualBoundingBoxDescent"
                        (Ojs.float_to_js x10585);
                      Ojs.set_prop_ascii x10591 "actualBoundingBoxLeft"
                        (Ojs.float_to_js x10586);
                      Ojs.set_prop_ascii x10591 "actualBoundingBoxRight"
                        (Ojs.float_to_js x10587);
                      Ojs.set_prop_ascii x10591 "fontBoundingBoxAscent"
                        (Ojs.float_to_js x10588);
                      Ojs.set_prop_ascii x10591 "fontBoundingBoxDescent"
                        (Ojs.float_to_js x10589);
                      Ojs.set_prop_ascii x10591 "width"
                        (Ojs.float_to_js x10590);
                      t_of_js x10591
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextMetrics")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextMetrics") [||])
  end
module TextEncoderCommon =
  struct
    type t = [ `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10593 : Ojs.t) -> t_of_js x10593
    and t_0_to_js : t_0 -> Ojs.t = fun (x10592 : t) -> t_to_js x10592
    type tags = [ `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10596 : Ojs.t) -> intf_of_js __tags_of_js x10596
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10594 : __tags intf) -> intf_to_js __tags_to_js x10594
    let (get_encoding : 'tags this -> string) =
      fun (x10598 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10598) "encoding")
    let (create : encoding:string -> unit -> t) =
      fun ~encoding:(x10600 : string) ->
        fun () ->
          let x10601 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x10601 "encoding" (Ojs.string_to_js x10600);
          t_of_js x10601
    let cast_from = Obj.magic
  end
module GenericTransformStream =
  struct
    type t = [ `GenericTransformStream ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10603 : Ojs.t) -> t_of_js x10603
    and t_0_to_js : t_0 -> Ojs.t = fun (x10602 : t) -> t_to_js x10602
    type tags = [ `GenericTransformStream ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GenericTransformStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10606 : Ojs.t) -> intf_of_js __tags_of_js x10606
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10604 : __tags intf) -> intf_to_js __tags_to_js x10604
    let (get_readable : 'tags this -> ReadableStream.t_0) =
      fun (x10608 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10608) "readable")
    let (get_writable : 'tags this -> WritableStream.t_0) =
      fun (x10610 : 'tags this) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10610) "writable")
    let (create :
      readable:ReadableStream.t_0 -> writable:WritableStream.t_0 -> unit -> t)
      =
      fun ~readable:(x10612 : ReadableStream.t_0) ->
        fun ~writable:(x10613 : WritableStream.t_0) ->
          fun () ->
            let x10614 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10614 "readable"
              (ReadableStream.t_0_to_js x10612);
            Ojs.set_prop_ascii x10614 "writable"
              (WritableStream.t_0_to_js x10613);
            t_of_js x10614
    let cast_from = Obj.magic
  end
module TextEncoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10616 : Ojs.t) -> t_of_js x10616
    and t_0_to_js : t_0 -> Ojs.t = fun (x10615 : t) -> t_to_js x10615
    type tags =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10619 : Ojs.t) -> intf_of_js __tags_of_js x10619
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10617 : __tags intf) -> intf_to_js __tags_to_js x10617
    let (get_readable : 'tags this -> Uint8Array.t_0 ReadableStream.t) =
      fun (x10621 : 'tags this) ->
        ReadableStream.t_of_js Uint8Array.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10621) "readable")
    let (get_writable : 'tags this -> string WritableStream.t) =
      fun (x10624 : 'tags this) ->
        WritableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10624) "writable")
    let (create :
      readable:Uint8Array.t_0 ReadableStream.t ->
        writable:string WritableStream.t -> unit -> t)
      =
      fun ~readable:(x10627 : Uint8Array.t_0 ReadableStream.t) ->
        fun ~writable:(x10628 : string WritableStream.t) ->
          fun () ->
            let x10629 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10629 "readable"
              (ReadableStream.t_to_js Uint8Array.t_0_to_js x10627);
            Ojs.set_prop_ascii x10629 "writable"
              (WritableStream.t_to_js Ojs.string_to_js x10628);
            t_of_js x10629
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextEncoderStream") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
             [||])
  end
module TextEncoderEncodeIntoResult =
  struct
    type t = [ `TextEncoderEncodeIntoResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10633 : Ojs.t) -> t_of_js x10633
    and t_0_to_js : t_0 -> Ojs.t = fun (x10632 : t) -> t_to_js x10632
    type tags = [ `TextEncoderEncodeIntoResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10636 : Ojs.t) -> intf_of_js __tags_of_js x10636
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10634 : __tags intf) -> intf_to_js __tags_to_js x10634
    let (get_read : 'tags this -> float) =
      fun (x10638 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10638) "read")
    let (set_read : 'tags this -> float -> unit) =
      fun (x10640 : 'tags this) ->
        fun (x10641 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10640) "read"
            (Ojs.float_to_js x10641)
    let (get_written : 'tags this -> float) =
      fun (x10643 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10643) "written")
    let (set_written : 'tags this -> float -> unit) =
      fun (x10645 : 'tags this) ->
        fun (x10646 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10645) "written"
            (Ojs.float_to_js x10646)
    let (create : read:float -> written:float -> unit -> t) =
      fun ~read:(x10648 : float) ->
        fun ~written:(x10649 : float) ->
          fun () ->
            let x10650 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10650 "read" (Ojs.float_to_js x10648);
            Ojs.set_prop_ascii x10650 "written" (Ojs.float_to_js x10649);
            t_of_js x10650
    let cast_from = Obj.magic
  end
module TextEncoder =
  struct
    type t = [ `TextEncoder  | `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10652 : Ojs.t) -> t_of_js x10652
    and t_0_to_js : t_0 -> Ojs.t = fun (x10651 : t) -> t_to_js x10651
    type tags = [ `TextEncoder  | `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10655 : Ojs.t) -> intf_of_js __tags_of_js x10655
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10653 : __tags intf) -> intf_to_js __tags_to_js x10653
    let (encode : 'tags this -> ?input:string -> unit -> Uint8Array.t_0) =
      fun (x10660 : 'tags this) ->
        fun ?input:(x10657 : string option) ->
          fun () ->
            Uint8Array.t_0_of_js
              (let x10662 = this_to_js Obj.magic x10660 in
               Ojs.call (Ojs.get_prop_ascii x10662 "encode") "apply"
                 [|x10662;((let x10658 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10657 with
                             | Some x10659 ->
                                 ignore
                                   (Ojs.call x10658 "push"
                                      [|(Ojs.string_to_js x10659)|])
                             | None -> ());
                            x10658))|])
    let (encodeInto :
      'tags this ->
        source:string ->
          destination:Uint8Array.t_0 -> TextEncoderEncodeIntoResult.t)
      =
      fun (x10665 : 'tags this) ->
        fun ~source:(x10663 : string) ->
          fun ~destination:(x10664 : Uint8Array.t_0) ->
            TextEncoderEncodeIntoResult.t_of_js
              (Ojs.call (this_to_js Obj.magic x10665) "encodeInto"
                 [|(Ojs.string_to_js x10663);(Uint8Array.t_0_to_js x10664)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextEncoder")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoder") [||])
  end
module TextDecoderOptions =
  struct
    type t = [ `TextDecoderOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10668 : Ojs.t) -> t_of_js x10668
    and t_0_to_js : t_0 -> Ojs.t = fun (x10667 : t) -> t_to_js x10667
    type tags = [ `TextDecoderOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10671 : Ojs.t) -> intf_of_js __tags_of_js x10671
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10669 : __tags intf) -> intf_to_js __tags_to_js x10669
    let (get_fatal : 'tags this -> bool) =
      fun (x10673 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10673) "fatal")
    let (set_fatal : 'tags this -> bool -> unit) =
      fun (x10675 : 'tags this) ->
        fun (x10676 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10675) "fatal"
            (Ojs.bool_to_js x10676)
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x10678 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10678) "ignoreBOM")
    let (set_ignoreBOM : 'tags this -> bool -> unit) =
      fun (x10680 : 'tags this) ->
        fun (x10681 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10680) "ignoreBOM"
            (Ojs.bool_to_js x10681)
    let (create : fatal:bool -> ignoreBOM:bool -> unit -> t) =
      fun ~fatal:(x10683 : bool) ->
        fun ~ignoreBOM:(x10684 : bool) ->
          fun () ->
            let x10685 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10685 "fatal" (Ojs.bool_to_js x10683);
            Ojs.set_prop_ascii x10685 "ignoreBOM" (Ojs.bool_to_js x10684);
            t_of_js x10685
    let cast_from = Obj.magic
  end
module TextDecoderCommon =
  struct
    type t = [ `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10687 : Ojs.t) -> t_of_js x10687
    and t_0_to_js : t_0 -> Ojs.t = fun (x10686 : t) -> t_to_js x10686
    type tags = [ `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10690 : Ojs.t) -> intf_of_js __tags_of_js x10690
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10688 : __tags intf) -> intf_to_js __tags_to_js x10688
    let (get_encoding : 'tags this -> string) =
      fun (x10692 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10692) "encoding")
    let (get_fatal : 'tags this -> bool) =
      fun (x10694 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10694) "fatal")
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x10696 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10696) "ignoreBOM")
    let (create :
      encoding:string -> fatal:bool -> ignoreBOM:bool -> unit -> t) =
      fun ~encoding:(x10698 : string) ->
        fun ~fatal:(x10699 : bool) ->
          fun ~ignoreBOM:(x10700 : bool) ->
            fun () ->
              let x10701 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x10701 "encoding" (Ojs.string_to_js x10698);
              Ojs.set_prop_ascii x10701 "fatal" (Ojs.bool_to_js x10699);
              Ojs.set_prop_ascii x10701 "ignoreBOM" (Ojs.bool_to_js x10700);
              t_of_js x10701
    let cast_from = Obj.magic
  end
module TextDecoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10703 : Ojs.t) -> t_of_js x10703
    and t_0_to_js : t_0 -> Ojs.t = fun (x10702 : t) -> t_to_js x10702
    type tags =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10706 : Ojs.t) -> intf_of_js __tags_of_js x10706
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10704 : __tags intf) -> intf_to_js __tags_to_js x10704
    let (get_readable : 'tags this -> string ReadableStream.t) =
      fun (x10708 : 'tags this) ->
        ReadableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10708) "readable")
    let (get_writable : 'tags this -> BufferSource.t WritableStream.t) =
      fun (x10711 : 'tags this) ->
        WritableStream.t_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10711) "writable")
    let (create :
      readable:string ReadableStream.t ->
        writable:BufferSource.t WritableStream.t -> unit -> t)
      =
      fun ~readable:(x10714 : string ReadableStream.t) ->
        fun ~writable:(x10715 : BufferSource.t WritableStream.t) ->
          fun () ->
            let x10716 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10716 "readable"
              (ReadableStream.t_to_js Ojs.string_to_js x10714);
            Ojs.set_prop_ascii x10716 "writable"
              (WritableStream.t_to_js BufferSource.t_to_js x10715);
            t_of_js x10716
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextDecoderStream") "prototype")
    let (create' :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x10719 : string option) ->
        fun ?options:(x10720 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
                 (let x10721 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x10719 with
                   | Some x10723 ->
                       ignore
                         (Ojs.call x10721 "push"
                            [|(Ojs.string_to_js x10723)|])
                   | None -> ());
                  (match x10720 with
                   | Some x10722 ->
                       ignore
                         (Ojs.call x10721 "push"
                            [|(TextDecoderOptions.t_to_js x10722)|])
                   | None -> ());
                  x10721))
  end
module TextDecodeOptions =
  struct
    type t = [ `TextDecodeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10725 : Ojs.t) -> t_of_js x10725
    and t_0_to_js : t_0 -> Ojs.t = fun (x10724 : t) -> t_to_js x10724
    type tags = [ `TextDecodeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10728 : Ojs.t) -> intf_of_js __tags_of_js x10728
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10726 : __tags intf) -> intf_to_js __tags_to_js x10726
    let (get_stream : 'tags this -> bool) =
      fun (x10730 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10730) "stream")
    let (set_stream : 'tags this -> bool -> unit) =
      fun (x10732 : 'tags this) ->
        fun (x10733 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10732) "stream"
            (Ojs.bool_to_js x10733)
    let (create : stream:bool -> unit -> t) =
      fun ~stream:(x10735 : bool) ->
        fun () ->
          let x10736 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x10736 "stream" (Ojs.bool_to_js x10735);
          t_of_js x10736
    let cast_from = Obj.magic
  end
module TextDecoder =
  struct
    type t = [ `TextDecoder  | `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10738 : Ojs.t) -> t_of_js x10738
    and t_0_to_js : t_0 -> Ojs.t = fun (x10737 : t) -> t_to_js x10737
    type tags = [ `TextDecoder  | `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10741 : Ojs.t) -> intf_of_js __tags_of_js x10741
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10739 : __tags intf) -> intf_to_js __tags_to_js x10739
    let (decode :
      'tags this ->
        ?input:BufferSource.t ->
          ?options:TextDecodeOptions.t -> unit -> string)
      =
      fun (x10748 : 'tags this) ->
        fun ?input:(x10743 : BufferSource.t option) ->
          fun ?options:(x10744 : TextDecodeOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x10750 = this_to_js Obj.magic x10748 in
                 Ojs.call (Ojs.get_prop_ascii x10750 "decode") "apply"
                   [|x10750;((let x10745 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x10743 with
                               | Some x10747 ->
                                   ignore
                                     (Ojs.call x10745 "push"
                                        [|(BufferSource.t_to_js x10747)|])
                               | None -> ());
                              (match x10744 with
                               | Some x10746 ->
                                   ignore
                                     (Ojs.call x10745 "push"
                                        [|(TextDecodeOptions.t_to_js x10746)|])
                               | None -> ());
                              x10745))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextDecoder")
             "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x10751 : string option) ->
        fun ?options:(x10752 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TextDecoder")
                 (let x10753 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x10751 with
                   | Some x10755 ->
                       ignore
                         (Ojs.call x10753 "push"
                            [|(Ojs.string_to_js x10755)|])
                   | None -> ());
                  (match x10752 with
                   | Some x10754 ->
                       ignore
                         (Ojs.call x10753 "push"
                            [|(TextDecoderOptions.t_to_js x10754)|])
                   | None -> ());
                  x10753))
  end
module PromiseRejectionEventInit =
  struct
    type t = [ `EventInit  | `PromiseRejectionEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10757 : Ojs.t) -> t_of_js x10757
    and t_0_to_js : t_0 -> Ojs.t = fun (x10756 : t) -> t_to_js x10756
    type tags = [ `EventInit  | `PromiseRejectionEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10760 : Ojs.t) -> intf_of_js __tags_of_js x10760
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10758 : __tags intf) -> intf_to_js __tags_to_js x10758
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x10762 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10762) "promise")
    let (set_promise : 'tags this -> any Promise.t_1 -> unit) =
      fun (x10765 : 'tags this) ->
        fun (x10766 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10765) "promise"
            (Promise.t_1_to_js any_to_js x10766)
    let (get_reason : 'tags this -> any) =
      fun (x10769 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x10769) "reason")
    let (set_reason : 'tags this -> any -> unit) =
      fun (x10771 : 'tags this) ->
        fun (x10772 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10771) "reason"
            (any_to_js x10772)
    let (create : promise:any Promise.t_1 -> reason:any -> unit -> t) =
      fun ~promise:(x10774 : any Promise.t_1) ->
        fun ~reason:(x10775 : any) ->
          fun () ->
            let x10776 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10776 "promise"
              (Promise.t_1_to_js any_to_js x10774);
            Ojs.set_prop_ascii x10776 "reason" (any_to_js x10775);
            t_of_js x10776
    let cast_from = Obj.magic
  end
module PromiseRejectionEvent =
  struct
    type t = [ `Event  | `PromiseRejectionEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10779 : Ojs.t) -> t_of_js x10779
    and t_0_to_js : t_0 -> Ojs.t = fun (x10778 : t) -> t_to_js x10778
    type tags = [ `Event  | `PromiseRejectionEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10782 : Ojs.t) -> intf_of_js __tags_of_js x10782
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10780 : __tags intf) -> intf_to_js __tags_to_js x10780
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x10784 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10784) "promise")
    let (get_reason : 'tags this -> any) =
      fun (x10787 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x10787) "reason")
    let (create : promise:any Promise.t_1 -> reason:any -> unit -> t) =
      fun ~promise:(x10789 : any Promise.t_1) ->
        fun ~reason:(x10790 : any) ->
          fun () ->
            let x10791 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x10791 "promise"
              (Promise.t_1_to_js any_to_js x10789);
            Ojs.set_prop_ascii x10791 "reason" (any_to_js x10790);
            t_of_js x10791
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
             "prototype")
    let (create' :
      type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t) =
      fun ~type_:(x10793 : string) ->
        fun ~eventInitDict:(x10794 : PromiseRejectionEventInit.t) ->
          t_of_js
            (Ojs.new_obj
               (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
               [|(Ojs.string_to_js x10793);(PromiseRejectionEventInit.t_to_js
                                              x10794)|])
  end
module WorkerGlobalScopeEventMap =
  struct
    type t = [ `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10796 : Ojs.t) -> t_of_js x10796
    and t_0_to_js : t_0 -> Ojs.t = fun (x10795 : t) -> t_to_js x10795
    type tags = [ `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10799 : Ojs.t) -> intf_of_js __tags_of_js x10799
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10797 : __tags intf) -> intf_to_js __tags_to_js x10797
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x10801 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10801) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x10803 : 'tags this) ->
        fun (x10804 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10803) "error"
            (ErrorEvent.t_to_js x10804)
    let (get_languagechange : 'tags this -> Event.t) =
      fun (x10806 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10806) "languagechange")
    let (set_languagechange : 'tags this -> Event.t -> unit) =
      fun (x10808 : 'tags this) ->
        fun (x10809 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10808) "languagechange"
            (Event.t_to_js x10809)
    let (get_offline : 'tags this -> Event.t) =
      fun (x10811 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10811) "offline")
    let (set_offline : 'tags this -> Event.t -> unit) =
      fun (x10813 : 'tags this) ->
        fun (x10814 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10813) "offline"
            (Event.t_to_js x10814)
    let (get_online : 'tags this -> Event.t) =
      fun (x10816 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10816) "online")
    let (set_online : 'tags this -> Event.t -> unit) =
      fun (x10818 : 'tags this) ->
        fun (x10819 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10818) "online"
            (Event.t_to_js x10819)
    let (get_rejectionhandled : 'tags this -> PromiseRejectionEvent.t) =
      fun (x10821 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10821)
             "rejectionhandled")
    let (set_rejectionhandled :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x10823 : 'tags this) ->
        fun (x10824 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10823) "rejectionhandled"
            (PromiseRejectionEvent.t_to_js x10824)
    let (get_unhandledrejection : 'tags this -> PromiseRejectionEvent.t) =
      fun (x10826 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10826)
             "unhandledrejection")
    let (set_unhandledrejection :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x10828 : 'tags this) ->
        fun (x10829 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10828)
            "unhandledrejection" (PromiseRejectionEvent.t_to_js x10829)
    let (create :
      error:ErrorEvent.t ->
        languagechange:Event.t ->
          offline:Event.t ->
            online:Event.t ->
              rejectionhandled:PromiseRejectionEvent.t ->
                unhandledrejection:PromiseRejectionEvent.t -> unit -> t)
      =
      fun ~error:(x10831 : ErrorEvent.t) ->
        fun ~languagechange:(x10832 : Event.t) ->
          fun ~offline:(x10833 : Event.t) ->
            fun ~online:(x10834 : Event.t) ->
              fun ~rejectionhandled:(x10835 : PromiseRejectionEvent.t) ->
                fun ~unhandledrejection:(x10836 : PromiseRejectionEvent.t) ->
                  fun () ->
                    let x10837 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x10837 "error"
                      (ErrorEvent.t_to_js x10831);
                    Ojs.set_prop_ascii x10837 "languagechange"
                      (Event.t_to_js x10832);
                    Ojs.set_prop_ascii x10837 "offline"
                      (Event.t_to_js x10833);
                    Ojs.set_prop_ascii x10837 "online" (Event.t_to_js x10834);
                    Ojs.set_prop_ascii x10837 "rejectionhandled"
                      (PromiseRejectionEvent.t_to_js x10835);
                    Ojs.set_prop_ascii x10837 "unhandledrejection"
                      (PromiseRejectionEvent.t_to_js x10836);
                    t_of_js x10837
    let cast_from = Obj.magic
  end
module SharedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10839 : Ojs.t) -> t_of_js x10839
    and t_0_to_js : t_0 -> Ojs.t = fun (x10838 : t) -> t_to_js x10838
    type tags =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10842 : Ojs.t) -> intf_of_js __tags_of_js x10842
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10840 : __tags intf) -> intf_to_js __tags_to_js x10840
    let (get_connect : 'tags this -> MessageEvent.t_0) =
      fun (x10844 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10844) "connect")
    let (set_connect : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x10846 : 'tags this) ->
        fun (x10847 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10846) "connect"
            (MessageEvent.t_0_to_js x10847)
    let (create : connect:MessageEvent.t_0 -> unit -> t) =
      fun ~connect:(x10849 : MessageEvent.t_0) ->
        fun () ->
          let x10850 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x10850 "connect" (MessageEvent.t_0_to_js x10849);
          t_of_js x10850
    let cast_from = Obj.magic
  end
module WorkerNavigator =
  struct
    type t =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10852 : Ojs.t) -> t_of_js x10852
    and t_0_to_js : t_0 -> Ojs.t = fun (x10851 : t) -> t_to_js x10851
    type tags =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerNavigator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10855 : Ojs.t) -> intf_of_js __tags_of_js x10855
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10853 : __tags intf) -> intf_to_js __tags_to_js x10853
    let (get_mediaCapabilities : 'tags this -> MediaCapabilities.t) =
      fun (x10857 : 'tags this) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10857)
             "mediaCapabilities")
    let (create : mediaCapabilities:MediaCapabilities.t -> unit -> t) =
      fun ~mediaCapabilities:(x10859 : MediaCapabilities.t) ->
        fun () ->
          let x10860 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x10860 "mediaCapabilities"
            (MediaCapabilities.t_to_js x10859);
          t_of_js x10860
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") [||])
  end
module WorkerLocation =
  struct
    type t = [ `WorkerLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10862 : Ojs.t) -> t_of_js x10862
    and t_0_to_js : t_0 -> Ojs.t = fun (x10861 : t) -> t_to_js x10861
    type tags = [ `WorkerLocation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10865 : Ojs.t) -> intf_of_js __tags_of_js x10865
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10863 : __tags intf) -> intf_to_js __tags_to_js x10863
    let (get_hash : 'tags this -> string) =
      fun (x10867 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10867) "hash")
    let (get_host : 'tags this -> string) =
      fun (x10869 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10869) "host")
    let (get_hostname : 'tags this -> string) =
      fun (x10871 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10871) "hostname")
    let (get_href : 'tags this -> string) =
      fun (x10873 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10873) "href")
    let (toString : 'tags this -> string) =
      fun (x10875 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x10875) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x10877 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10877) "origin")
    let (get_pathname : 'tags this -> string) =
      fun (x10879 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10879) "pathname")
    let (get_port : 'tags this -> string) =
      fun (x10881 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10881) "port")
    let (get_protocol : 'tags this -> string) =
      fun (x10883 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10883) "protocol")
    let (get_search : 'tags this -> string) =
      fun (x10885 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10885) "search")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerLocation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerLocation") [||])
  end
module VoidFunction =
  struct
    type t = [ `VoidFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10888 : Ojs.t) -> t_of_js x10888
    and t_0_to_js : t_0 -> Ojs.t = fun (x10887 : t) -> t_to_js x10887
    type tags = [ `VoidFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10891 : Ojs.t) -> intf_of_js __tags_of_js x10891
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10889 : __tags intf) -> intf_to_js __tags_to_js x10889
    let (apply : 'tags this -> unit) =
      fun (x10893 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x10893) [||])
    let cast_from = Obj.magic
  end
module TimerHandler =
  struct
    type t = untyped_function or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x10897 : Ojs.t) -> or_string_of_js untyped_function_of_js x10897
    and t_to_js : t -> Ojs.t =
      fun (x10895 : untyped_function or_string) ->
        or_string_to_js untyped_function_to_js x10895
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10900 : Ojs.t) -> t_of_js x10900
    and t_0_to_js : t_0 -> Ojs.t = fun (x10899 : t) -> t_to_js x10899
  end
module CanvasImageSource =
  struct
    type t = (ImageBitmap.t, OffscreenCanvas.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x10904 : Ojs.t) ->
        union2_of_js ImageBitmap.t_of_js OffscreenCanvas.t_of_js x10904
    and t_to_js : t -> Ojs.t =
      fun (x10901 : (ImageBitmap.t, OffscreenCanvas.t) union2) ->
        union2_to_js ImageBitmap.t_to_js OffscreenCanvas.t_to_js x10901
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10908 : Ojs.t) -> t_of_js x10908
    and t_0_to_js : t_0 -> Ojs.t = fun (x10907 : t) -> t_to_js x10907
  end
module ImageBitmapSource =
  struct
    type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x10913 : Ojs.t) ->
        union3_of_js Blob.t_of_js CanvasImageSource.t_of_js ImageData.t_of_js
          x10913
    and t_to_js : t -> Ojs.t =
      fun (x10909 : (Blob.t, CanvasImageSource.t, ImageData.t) union3) ->
        union3_to_js Blob.t_to_js CanvasImageSource.t_to_js ImageData.t_to_js
          x10909
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10918 : Ojs.t) -> t_of_js x10918
    and t_0_to_js : t_0 -> Ojs.t = fun (x10917 : t) -> t_to_js x10917
  end
module ResizeQuality =
  struct
    type t =
      [ `L_s106_low  | `L_s112_medium  | `L_s149_pixelated  | `L_s84_high ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10920 : Ojs.t) ->
        let x10921 = x10920 in
        match Ojs.string_of_js x10921 with
        | "low" -> `L_s106_low
        | "medium" -> `L_s112_medium
        | "pixelated" -> `L_s149_pixelated
        | "high" -> `L_s84_high
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x10919 :
          [ `L_s106_low  | `L_s112_medium  | `L_s149_pixelated 
          | `L_s84_high ])
        ->
        match x10919 with
        | `L_s106_low -> Ojs.string_to_js "low"
        | `L_s112_medium -> Ojs.string_to_js "medium"
        | `L_s149_pixelated -> Ojs.string_to_js "pixelated"
        | `L_s84_high -> Ojs.string_to_js "high"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10923 : Ojs.t) -> t_of_js x10923
    and t_0_to_js : t_0 -> Ojs.t = fun (x10922 : t) -> t_to_js x10922
  end
module PremultiplyAlpha =
  struct
    type t = [ `L_s128_none  | `L_s152_premultiply  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10925 : Ojs.t) ->
        let x10926 = x10925 in
        match Ojs.string_of_js x10926 with
        | "none" -> `L_s128_none
        | "premultiply" -> `L_s152_premultiply
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x10924 : [ `L_s128_none  | `L_s152_premultiply  | `L_s57_default ])
        ->
        match x10924 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s152_premultiply -> Ojs.string_to_js "premultiply"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10928 : Ojs.t) -> t_of_js x10928
    and t_0_to_js : t_0 -> Ojs.t = fun (x10927 : t) -> t_to_js x10927
  end
module ImageOrientation =
  struct
    type t = [ `L_s128_none  | `L_s74_flipY ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10930 : Ojs.t) ->
        let x10931 = x10930 in
        match Ojs.string_of_js x10931 with
        | "none" -> `L_s128_none
        | "flipY" -> `L_s74_flipY
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x10929 : [ `L_s128_none  | `L_s74_flipY ]) ->
        match x10929 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s74_flipY -> Ojs.string_to_js "flipY"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10933 : Ojs.t) -> t_of_js x10933
    and t_0_to_js : t_0 -> Ojs.t = fun (x10932 : t) -> t_to_js x10932
  end
module ColorSpaceConversion =
  struct
    type t = [ `L_s128_none  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10935 : Ojs.t) ->
        let x10936 = x10935 in
        match Ojs.string_of_js x10936 with
        | "none" -> `L_s128_none
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x10934 : [ `L_s128_none  | `L_s57_default ]) ->
        match x10934 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10938 : Ojs.t) -> t_of_js x10938
    and t_0_to_js : t_0 -> Ojs.t = fun (x10937 : t) -> t_to_js x10937
  end
module ImageBitmapOptions =
  struct
    type t = [ `ImageBitmapOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10940 : Ojs.t) -> t_of_js x10940
    and t_0_to_js : t_0 -> Ojs.t = fun (x10939 : t) -> t_to_js x10939
    type tags = [ `ImageBitmapOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10943 : Ojs.t) -> intf_of_js __tags_of_js x10943
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10941 : __tags intf) -> intf_to_js __tags_to_js x10941
    let (get_colorSpaceConversion : 'tags this -> ColorSpaceConversion.t) =
      fun (x10945 : 'tags this) ->
        ColorSpaceConversion.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10945)
             "colorSpaceConversion")
    let (set_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t -> unit) =
      fun (x10947 : 'tags this) ->
        fun (x10948 : ColorSpaceConversion.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10947)
            "colorSpaceConversion" (ColorSpaceConversion.t_to_js x10948)
    let (get_imageOrientation : 'tags this -> ImageOrientation.t) =
      fun (x10950 : 'tags this) ->
        ImageOrientation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10950)
             "imageOrientation")
    let (set_imageOrientation : 'tags this -> ImageOrientation.t -> unit) =
      fun (x10952 : 'tags this) ->
        fun (x10953 : ImageOrientation.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10952) "imageOrientation"
            (ImageOrientation.t_to_js x10953)
    let (get_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t) =
      fun (x10955 : 'tags this) ->
        PremultiplyAlpha.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10955)
             "premultiplyAlpha")
    let (set_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t -> unit) =
      fun (x10957 : 'tags this) ->
        fun (x10958 : PremultiplyAlpha.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10957) "premultiplyAlpha"
            (PremultiplyAlpha.t_to_js x10958)
    let (get_resizeHeight : 'tags this -> float) =
      fun (x10960 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10960) "resizeHeight")
    let (set_resizeHeight : 'tags this -> float -> unit) =
      fun (x10962 : 'tags this) ->
        fun (x10963 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10962) "resizeHeight"
            (Ojs.float_to_js x10963)
    let (get_resizeQuality : 'tags this -> ResizeQuality.t) =
      fun (x10965 : 'tags this) ->
        ResizeQuality.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10965) "resizeQuality")
    let (set_resizeQuality : 'tags this -> ResizeQuality.t -> unit) =
      fun (x10967 : 'tags this) ->
        fun (x10968 : ResizeQuality.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10967) "resizeQuality"
            (ResizeQuality.t_to_js x10968)
    let (get_resizeWidth : 'tags this -> float) =
      fun (x10970 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10970) "resizeWidth")
    let (set_resizeWidth : 'tags this -> float -> unit) =
      fun (x10972 : 'tags this) ->
        fun (x10973 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10972) "resizeWidth"
            (Ojs.float_to_js x10973)
    let (create :
      colorSpaceConversion:ColorSpaceConversion.t ->
        imageOrientation:ImageOrientation.t ->
          premultiplyAlpha:PremultiplyAlpha.t ->
            resizeHeight:float ->
              resizeQuality:ResizeQuality.t -> resizeWidth:float -> unit -> t)
      =
      fun ~colorSpaceConversion:(x10975 : ColorSpaceConversion.t) ->
        fun ~imageOrientation:(x10976 : ImageOrientation.t) ->
          fun ~premultiplyAlpha:(x10977 : PremultiplyAlpha.t) ->
            fun ~resizeHeight:(x10978 : float) ->
              fun ~resizeQuality:(x10979 : ResizeQuality.t) ->
                fun ~resizeWidth:(x10980 : float) ->
                  fun () ->
                    let x10981 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x10981 "colorSpaceConversion"
                      (ColorSpaceConversion.t_to_js x10975);
                    Ojs.set_prop_ascii x10981 "imageOrientation"
                      (ImageOrientation.t_to_js x10976);
                    Ojs.set_prop_ascii x10981 "premultiplyAlpha"
                      (PremultiplyAlpha.t_to_js x10977);
                    Ojs.set_prop_ascii x10981 "resizeHeight"
                      (Ojs.float_to_js x10978);
                    Ojs.set_prop_ascii x10981 "resizeQuality"
                      (ResizeQuality.t_to_js x10979);
                    Ojs.set_prop_ascii x10981 "resizeWidth"
                      (Ojs.float_to_js x10980);
                    t_of_js x10981
    let cast_from = Obj.magic
  end
module IDBFactory =
  struct
    type t = [ `IDBFactory ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10983 : Ojs.t) -> t_of_js x10983
    and t_0_to_js : t_0 -> Ojs.t = fun (x10982 : t) -> t_to_js x10982
    type tags = [ `IDBFactory ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10986 : Ojs.t) -> intf_of_js __tags_of_js x10986
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10984 : __tags intf) -> intf_to_js __tags_to_js x10984
    let (cmp : 'tags this -> first:any -> second:any -> float) =
      fun (x10990 : 'tags this) ->
        fun ~first:(x10988 : any) ->
          fun ~second:(x10989 : any) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x10990) "cmp"
                 [|(any_to_js x10988);(any_to_js x10989)|])
    let (databases : 'tags this -> IDBDatabaseInfo.t list Promise.t_1) =
      fun (x10992 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x10994 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x10994)
          (Ojs.call (this_to_js Obj.magic x10992) "databases" [||])
    let (deleteDatabase : 'tags this -> name:string -> IDBOpenDBRequest.t) =
      fun (x10997 : 'tags this) ->
        fun ~name:(x10996 : string) ->
          IDBOpenDBRequest.t_of_js
            (Ojs.call (this_to_js Obj.magic x10997) "deleteDatabase"
               [|(Ojs.string_to_js x10996)|])
    let (open_ :
      'tags this ->
        name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun (x11003 : 'tags this) ->
        fun ~name:(x10999 : string) ->
          fun ?version:(x11000 : float option) ->
            fun () ->
              IDBOpenDBRequest.t_of_js
                (let x11005 = this_to_js Obj.magic x11003 in
                 Ojs.call (Ojs.get_prop_ascii x11005 "open") "apply"
                   [|x11005;((let x11001 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11001 "push"
                                   [|(Ojs.string_to_js x10999)|]);
                              (match x11000 with
                               | Some x11002 ->
                                   ignore
                                     (Ojs.call x11001 "push"
                                        [|(Ojs.float_to_js x11002)|])
                               | None -> ());
                              x11001))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBFactory")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBFactory") [||])
  end
module Crypto =
  struct
    type t = [ `Crypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11007 : Ojs.t) -> t_of_js x11007
    and t_0_to_js : t_0 -> Ojs.t = fun (x11006 : t) -> t_to_js x11006
    type tags = [ `Crypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11010 : Ojs.t) -> intf_of_js __tags_of_js x11010
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11008 : __tags intf) -> intf_to_js __tags_to_js x11008
    let (get_subtle : 'tags this -> SubtleCrypto.t) =
      fun (x11012 : 'tags this) ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11012) "subtle")
    let (getRandomValues : 'tags this -> array:'T -> 'T) =
      fun (x11015 : 'tags this) ->
        fun ~array:(x11014 : 'T) ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic x11015) "getRandomValues"
               [|(Obj.magic x11014)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Crypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Crypto") [||])
  end
module CacheStorage =
  struct
    type t = [ `CacheStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11018 : Ojs.t) -> t_of_js x11018
    and t_0_to_js : t_0 -> Ojs.t = fun (x11017 : t) -> t_to_js x11017
    type tags = [ `CacheStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11021 : Ojs.t) -> intf_of_js __tags_of_js x11021
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11019 : __tags intf) -> intf_to_js __tags_to_js x11019
    let (delete : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11024 : 'tags this) ->
        fun ~cacheName:(x11023 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11024) "delete"
               [|(Ojs.string_to_js x11023)|])
    let (has : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x11028 : 'tags this) ->
        fun ~cacheName:(x11027 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x11028) "has"
               [|(Ojs.string_to_js x11027)|])
    let (keys : 'tags this -> string list Promise.t_1) =
      fun (x11031 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11033 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x11033)
          (Ojs.call (this_to_js Obj.magic x11031) "keys" [||])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:MultiCacheQueryOptions.t ->
            unit -> Response.t or_undefined Promise.t_1)
      =
      fun (x11039 : 'tags this) ->
        fun ~request:(x11035 : RequestInfo.t) ->
          fun ?options:(x11036 : MultiCacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x11042 : Ojs.t) ->
                   or_undefined_of_js Response.t_of_js x11042)
                (let x11041 = this_to_js Obj.magic x11039 in
                 Ojs.call (Ojs.get_prop_ascii x11041 "match") "apply"
                   [|x11041;((let x11037 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11037 "push"
                                   [|(RequestInfo.t_to_js x11035)|]);
                              (match x11036 with
                               | Some x11038 ->
                                   ignore
                                     (Ojs.call x11037 "push"
                                        [|(MultiCacheQueryOptions.t_to_js
                                             x11038)|])
                               | None -> ());
                              x11037))|])
    let (open_ : 'tags this -> cacheName:string -> Cache.t Promise.t_1) =
      fun (x11045 : 'tags this) ->
        fun ~cacheName:(x11044 : string) ->
          Promise.t_1_of_js Cache.t_of_js
            (Ojs.call (this_to_js Obj.magic x11045) "open"
               [|(Ojs.string_to_js x11044)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CacheStorage")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CacheStorage") [||])
  end
module WindowOrWorkerGlobalScope =
  struct
    type t = [ `WindowOrWorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11049 : Ojs.t) -> t_of_js x11049
    and t_0_to_js : t_0 -> Ojs.t = fun (x11048 : t) -> t_to_js x11048
    type tags = [ `WindowOrWorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11052 : Ojs.t) -> intf_of_js __tags_of_js x11052
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11050 : __tags intf) -> intf_to_js __tags_to_js x11050
    let (get_caches : 'tags this -> CacheStorage.t) =
      fun (x11054 : 'tags this) ->
        CacheStorage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11054) "caches")
    let (get_crossOriginIsolated : 'tags this -> bool) =
      fun (x11056 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11056)
             "crossOriginIsolated")
    let (get_crypto : 'tags this -> Crypto.t) =
      fun (x11058 : 'tags this) ->
        Crypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11058) "crypto")
    let (get_indexedDB : 'tags this -> IDBFactory.t) =
      fun (x11060 : 'tags this) ->
        IDBFactory.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11060) "indexedDB")
    let (get_isSecureContext : 'tags this -> bool) =
      fun (x11062 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11062) "isSecureContext")
    let (get_origin : 'tags this -> string) =
      fun (x11064 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11064) "origin")
    let (get_performance : 'tags this -> Performance.t) =
      fun (x11066 : 'tags this) ->
        Performance.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11066) "performance")
    let (atob : 'tags this -> data:string -> string) =
      fun (x11069 : 'tags this) ->
        fun ~data:(x11068 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11069) "atob"
               [|(Ojs.string_to_js x11068)|])
    let (btoa : 'tags this -> data:string -> string) =
      fun (x11072 : 'tags this) ->
        fun ~data:(x11071 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x11072) "btoa"
               [|(Ojs.string_to_js x11071)|])
    let (clearInterval : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x11077 : 'tags this) ->
        fun ?handle:(x11074 : float option) ->
          fun () ->
            ignore
              (let x11079 = this_to_js Obj.magic x11077 in
               Ojs.call (Ojs.get_prop_ascii x11079 "clearInterval") "apply"
                 [|x11079;((let x11075 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11074 with
                             | Some x11076 ->
                                 ignore
                                   (Ojs.call x11075 "push"
                                      [|(Ojs.float_to_js x11076)|])
                             | None -> ());
                            x11075))|])
    let (clearTimeout : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x11083 : 'tags this) ->
        fun ?handle:(x11080 : float option) ->
          fun () ->
            ignore
              (let x11085 = this_to_js Obj.magic x11083 in
               Ojs.call (Ojs.get_prop_ascii x11085 "clearTimeout") "apply"
                 [|x11085;((let x11081 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11080 with
                             | Some x11082 ->
                                 ignore
                                   (Ojs.call x11081 "push"
                                      [|(Ojs.float_to_js x11082)|])
                             | None -> ());
                            x11081))|])
    let (createImageBitmap :
      'tags this ->
        image:ImageBitmapSource.t ->
          ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11090 : 'tags this) ->
        fun ~image:(x11086 : ImageBitmapSource.t) ->
          fun ?options:(x11087 : ImageBitmapOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ImageBitmap.t_of_js
                (let x11092 = this_to_js Obj.magic x11090 in
                 Ojs.call (Ojs.get_prop_ascii x11092 "createImageBitmap")
                   "apply"
                   [|x11092;((let x11088 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11088 "push"
                                   [|(ImageBitmapSource.t_to_js x11086)|]);
                              (match x11087 with
                               | Some x11089 ->
                                   ignore
                                     (Ojs.call x11088 "push"
                                        [|(ImageBitmapOptions.t_to_js x11089)|])
                               | None -> ());
                              x11088))|])
    let (createImageBitmap' :
      'tags this ->
        image:ImageBitmapSource.t ->
          sx:float ->
            sy:float ->
              sw:float ->
                sh:float ->
                  ?options:ImageBitmapOptions.t ->
                    unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x11102 : 'tags this) ->
        fun ~image:(x11094 : ImageBitmapSource.t) ->
          fun ~sx:(x11095 : float) ->
            fun ~sy:(x11096 : float) ->
              fun ~sw:(x11097 : float) ->
                fun ~sh:(x11098 : float) ->
                  fun ?options:(x11099 : ImageBitmapOptions.t option) ->
                    fun () ->
                      Promise.t_1_of_js ImageBitmap.t_of_js
                        (let x11104 = this_to_js Obj.magic x11102 in
                         Ojs.call
                           (Ojs.get_prop_ascii x11104 "createImageBitmap")
                           "apply"
                           [|x11104;((let x11100 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x11100 "push"
                                           [|(ImageBitmapSource.t_to_js
                                                x11094)|]);
                                      ignore
                                        (Ojs.call x11100 "push"
                                           [|(Ojs.float_to_js x11095)|]);
                                      ignore
                                        (Ojs.call x11100 "push"
                                           [|(Ojs.float_to_js x11096)|]);
                                      ignore
                                        (Ojs.call x11100 "push"
                                           [|(Ojs.float_to_js x11097)|]);
                                      ignore
                                        (Ojs.call x11100 "push"
                                           [|(Ojs.float_to_js x11098)|]);
                                      (match x11099 with
                                       | Some x11101 ->
                                           ignore
                                             (Ojs.call x11100 "push"
                                                [|(ImageBitmapOptions.t_to_js
                                                     x11101)|])
                                       | None -> ());
                                      x11100))|])
    let (fetch :
      'tags this ->
        input:RequestInfo.t ->
          ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
      =
      fun (x11110 : 'tags this) ->
        fun ~input:(x11106 : RequestInfo.t) ->
          fun ?init:(x11107 : RequestInit.t option) ->
            fun () ->
              Promise.t_1_of_js Response.t_of_js
                (let x11112 = this_to_js Obj.magic x11110 in
                 Ojs.call (Ojs.get_prop_ascii x11112 "fetch") "apply"
                   [|x11112;((let x11108 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11108 "push"
                                   [|(RequestInfo.t_to_js x11106)|]);
                              (match x11107 with
                               | Some x11109 ->
                                   ignore
                                     (Ojs.call x11108 "push"
                                        [|(RequestInit.t_to_js x11109)|])
                               | None -> ());
                              x11108))|])
    let (queueMicrotask : 'tags this -> callback:VoidFunction.t -> unit) =
      fun (x11115 : 'tags this) ->
        fun ~callback:(x11114 : VoidFunction.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11115) "queueMicrotask"
               [|(VoidFunction.t_to_js x11114)|])
    let (setInterval :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11123 : 'tags this) ->
        fun ~handler:(x11117 : TimerHandler.t) ->
          fun ?timeout:(x11118 : float option) ->
            fun ~arguments:(x11119 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11125 = this_to_js Obj.magic x11123 in
                   Ojs.call (Ojs.get_prop_ascii x11125 "setInterval") "apply"
                     [|x11125;((let x11120 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11120 "push"
                                     [|(TimerHandler.t_to_js x11117)|]);
                                (match x11118 with
                                 | Some x11122 ->
                                     ignore
                                       (Ojs.call x11120 "push"
                                          [|(Ojs.float_to_js x11122)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11121 : any) ->
                                     ignore
                                       (Ojs.call x11120 "push"
                                          [|(any_to_js x11121)|])) x11119;
                                x11120))|])
    let (setTimeout :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x11132 : 'tags this) ->
        fun ~handler:(x11126 : TimerHandler.t) ->
          fun ?timeout:(x11127 : float option) ->
            fun ~arguments:(x11128 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x11134 = this_to_js Obj.magic x11132 in
                   Ojs.call (Ojs.get_prop_ascii x11134 "setTimeout") "apply"
                     [|x11134;((let x11129 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11129 "push"
                                     [|(TimerHandler.t_to_js x11126)|]);
                                (match x11127 with
                                 | Some x11131 ->
                                     ignore
                                       (Ojs.call x11129 "push"
                                          [|(Ojs.float_to_js x11131)|])
                                 | None -> ());
                                List.iter
                                  (fun (x11130 : any) ->
                                     ignore
                                       (Ojs.call x11129 "push"
                                          [|(any_to_js x11130)|])) x11128;
                                x11129))|])
    let cast_from = Obj.magic
  end
module FontFaceSource =
  struct
    type t = [ `FontFaceSource ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11136 : Ojs.t) -> t_of_js x11136
    and t_0_to_js : t_0 -> Ojs.t = fun (x11135 : t) -> t_to_js x11135
    type tags = [ `FontFaceSource ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11139 : Ojs.t) -> intf_of_js __tags_of_js x11139
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11137 : __tags intf) -> intf_to_js __tags_to_js x11137
    let (get_fonts : 'tags this -> FontFaceSet.t) =
      fun (x11141 : 'tags this) ->
        FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11141) "fonts")
    let (create : fonts:FontFaceSet.t -> unit -> t) =
      fun ~fonts:(x11143 : FontFaceSet.t) ->
        fun () ->
          let x11144 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11144 "fonts" (FontFaceSet.t_to_js x11143);
          t_of_js x11144
    let cast_from = Obj.magic
  end
module WorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11146 : Ojs.t) -> t_of_js x11146
    and t_0_to_js : t_0 -> Ojs.t = fun (x11145 : t) -> t_to_js x11145
    type tags =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11149 : Ojs.t) -> intf_of_js __tags_of_js x11149
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11147 : __tags intf) -> intf_to_js __tags_to_js x11147
    let (get_location : 'tags this -> WorkerLocation.t) =
      fun (x11151 : 'tags this) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11151) "location")
    let (get_navigator : 'tags this -> WorkerNavigator.t) =
      fun (x11153 : 'tags this) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11153) "navigator")
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null) =
      fun (x11155 : 'tags this) ->
        or_null_of_js
          (fun (x11157 : Ojs.t) ->
             fun ~this:(x11158 : t) ->
               fun ~ev:(x11159 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x11157
                      [|(t_to_js x11158);(ErrorEvent.t_to_js x11159)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11155) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null -> unit) =
      fun (x11160 : 'tags this) ->
        fun (x11161 : (this:t -> ev:ErrorEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11160) "onerror"
            (or_null_to_js
               (fun (x11162 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11163 : Ojs.t) ->
                       fun (x11164 : Ojs.t) ->
                         any_to_js
                           (x11162 ~this:(t_of_js x11163)
                              ~ev:(ErrorEvent.t_of_js x11164)))) x11161)
    let (get_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x11166 : 'tags this) ->
        or_null_of_js
          (fun (x11168 : Ojs.t) ->
             fun ~this:(x11169 : t) ->
               fun ~ev:(x11170 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11168
                      [|(t_to_js x11169);(Event.t_to_js x11170)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11166)
             "onlanguagechange")
    let (set_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11171 : 'tags this) ->
        fun (x11172 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11171) "onlanguagechange"
            (or_null_to_js
               (fun (x11173 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11174 : Ojs.t) ->
                       fun (x11175 : Ojs.t) ->
                         any_to_js
                           (x11173 ~this:(t_of_js x11174)
                              ~ev:(Event.t_of_js x11175)))) x11172)
    let (get_onoffline : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x11177 : 'tags this) ->
        or_null_of_js
          (fun (x11179 : Ojs.t) ->
             fun ~this:(x11180 : t) ->
               fun ~ev:(x11181 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11179
                      [|(t_to_js x11180);(Event.t_to_js x11181)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11177) "onoffline")
    let (set_onoffline :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11182 : 'tags this) ->
        fun (x11183 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11182) "onoffline"
            (or_null_to_js
               (fun (x11184 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11185 : Ojs.t) ->
                       fun (x11186 : Ojs.t) ->
                         any_to_js
                           (x11184 ~this:(t_of_js x11185)
                              ~ev:(Event.t_of_js x11186)))) x11183)
    let (get_ononline : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x11188 : 'tags this) ->
        or_null_of_js
          (fun (x11190 : Ojs.t) ->
             fun ~this:(x11191 : t) ->
               fun ~ev:(x11192 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11190
                      [|(t_to_js x11191);(Event.t_to_js x11192)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11188) "ononline")
    let (set_ononline :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11193 : 'tags this) ->
        fun (x11194 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11193) "ononline"
            (or_null_to_js
               (fun (x11195 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11196 : Ojs.t) ->
                       fun (x11197 : Ojs.t) ->
                         any_to_js
                           (x11195 ~this:(t_of_js x11196)
                              ~ev:(Event.t_of_js x11197)))) x11194)
    let (get_onrejectionhandled :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) or_null) =
      fun (x11199 : 'tags this) ->
        or_null_of_js
          (fun (x11201 : Ojs.t) ->
             fun ~this:(x11202 : t) ->
               fun ~ev:(x11203 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11201
                      [|(t_to_js x11202);(PromiseRejectionEvent.t_to_js
                                            x11203)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11199)
             "onrejectionhandled")
    let (set_onrejectionhandled :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) or_null -> unit)
      =
      fun (x11204 : 'tags this) ->
        fun (x11205 : (this:t -> ev:PromiseRejectionEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11204)
            "onrejectionhandled"
            (or_null_to_js
               (fun (x11206 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11207 : Ojs.t) ->
                       fun (x11208 : Ojs.t) ->
                         any_to_js
                           (x11206 ~this:(t_of_js x11207)
                              ~ev:(PromiseRejectionEvent.t_of_js x11208))))
               x11205)
    let (get_onunhandledrejection :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) or_null) =
      fun (x11210 : 'tags this) ->
        or_null_of_js
          (fun (x11212 : Ojs.t) ->
             fun ~this:(x11213 : t) ->
               fun ~ev:(x11214 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x11212
                      [|(t_to_js x11213);(PromiseRejectionEvent.t_to_js
                                            x11214)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11210)
             "onunhandledrejection")
    let (set_onunhandledrejection :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) or_null -> unit)
      =
      fun (x11215 : 'tags this) ->
        fun (x11216 : (this:t -> ev:PromiseRejectionEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11215)
            "onunhandledrejection"
            (or_null_to_js
               (fun (x11217 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11218 : Ojs.t) ->
                       fun (x11219 : Ojs.t) ->
                         any_to_js
                           (x11217 ~this:(t_of_js x11218)
                              ~ev:(PromiseRejectionEvent.t_of_js x11219))))
               x11216)
    let (get_self : 'tags this -> (t, any) intersection2) =
      fun (x11221 : 'tags this) ->
        intersection2_of_js t_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11221) "self")
    let (importScripts : 'tags this -> urls:URL.t or_string list -> unit) =
      fun (x11229 : 'tags this) ->
        fun ~urls:(x11225 : URL.t or_string list) ->
          ignore
            (let x11231 = this_to_js Obj.magic x11229 in
             Ojs.call (Ojs.get_prop_ascii x11231 "importScripts") "apply"
               [|x11231;((let x11226 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x11227 : URL.t or_string) ->
                               ignore
                                 (Ojs.call x11226 "push"
                                    [|(or_string_to_js URL.t_to_js x11227)|]))
                            x11225;
                          x11226))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11240 : 'tags this) ->
        fun ~type_:(x11232 : 'K) ->
          fun ~listener:(x11233 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11234 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11242 = this_to_js Obj.magic x11240 in
                   Ojs.call (Ojs.get_prop_ascii x11242 "addEventListener")
                     "apply"
                     [|x11242;((let x11235 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11235 "push"
                                     [|(Obj.magic x11232)|]);
                                ignore
                                  (Ojs.call x11235 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11238 : Ojs.t) ->
                                             fun (x11239 : Ojs.t) ->
                                               any_to_js
                                                 (x11233
                                                    ~this:(t_of_js x11238)
                                                    ~ev:(any_of_js x11239))))|]);
                                (match x11234 with
                                 | Some x11236 ->
                                     ignore
                                       (Ojs.call x11235 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11236)|])
                                 | None -> ());
                                x11235))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11249 : 'tags this) ->
        fun ~type_:(x11243 : string) ->
          fun ~listener:(x11244 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11245 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11251 = this_to_js Obj.magic x11249 in
                   Ojs.call (Ojs.get_prop_ascii x11251 "addEventListener")
                     "apply"
                     [|x11251;((let x11246 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11246 "push"
                                     [|(Ojs.string_to_js x11243)|]);
                                ignore
                                  (Ojs.call x11246 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11244)|]);
                                (match x11245 with
                                 | Some x11247 ->
                                     ignore
                                       (Ojs.call x11246 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11247)|])
                                 | None -> ());
                                x11246))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11260 : 'tags this) ->
        fun ~type_:(x11252 : 'K) ->
          fun ~listener:(x11253 : this:t -> ev:any -> any) ->
            fun ?options:(x11254 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11262 = this_to_js Obj.magic x11260 in
                   Ojs.call (Ojs.get_prop_ascii x11262 "removeEventListener")
                     "apply"
                     [|x11262;((let x11255 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11255 "push"
                                     [|(Obj.magic x11252)|]);
                                ignore
                                  (Ojs.call x11255 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11258 : Ojs.t) ->
                                             fun (x11259 : Ojs.t) ->
                                               any_to_js
                                                 (x11253
                                                    ~this:(t_of_js x11258)
                                                    ~ev:(any_of_js x11259))))|]);
                                (match x11254 with
                                 | Some x11256 ->
                                     ignore
                                       (Ojs.call x11255 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11256)|])
                                 | None -> ());
                                x11255))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11269 : 'tags this) ->
        fun ~type_:(x11263 : string) ->
          fun ~listener:(x11264 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x11265 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11271 = this_to_js Obj.magic x11269 in
                   Ojs.call (Ojs.get_prop_ascii x11271 "removeEventListener")
                     "apply"
                     [|x11271;((let x11266 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11266 "push"
                                     [|(Ojs.string_to_js x11263)|]);
                                ignore
                                  (Ojs.call x11266 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11264)|]);
                                (match x11265 with
                                 | Some x11267 ->
                                     ignore
                                       (Ojs.call x11266 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11267)|])
                                 | None -> ());
                                x11266))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
             [||])
  end
module SharedWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11273 : Ojs.t) -> t_of_js x11273
    and t_0_to_js : t_0 -> Ojs.t = fun (x11272 : t) -> t_to_js x11272
    type tags =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11276 : Ojs.t) -> intf_of_js __tags_of_js x11276
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11274 : __tags intf) -> intf_to_js __tags_to_js x11274
    let (get_name : 'tags this -> string) =
      fun (x11278 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11278) "name")
    let (get_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x11280 : 'tags this) ->
        or_null_of_js
          (fun (x11282 : Ojs.t) ->
             fun ~this:(x11283 : t) ->
               fun ~ev:(x11284 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x11282
                      [|(t_to_js x11283);(MessageEvent.t_0_to_js x11284)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11280) "onconnect")
    let (set_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x11285 : 'tags this) ->
        fun (x11286 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11285) "onconnect"
            (or_null_to_js
               (fun (x11287 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11288 : Ojs.t) ->
                       fun (x11289 : Ojs.t) ->
                         any_to_js
                           (x11287 ~this:(t_of_js x11288)
                              ~ev:(MessageEvent.t_0_of_js x11289)))) x11286)
    let (close : 'tags this -> unit) =
      fun (x11291 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11291) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11301 : 'tags this) ->
        fun ~type_:(x11293 : 'K) ->
          fun ~listener:(x11294 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11295 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11303 = this_to_js Obj.magic x11301 in
                   Ojs.call (Ojs.get_prop_ascii x11303 "addEventListener")
                     "apply"
                     [|x11303;((let x11296 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11296 "push"
                                     [|(Obj.magic x11293)|]);
                                ignore
                                  (Ojs.call x11296 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11299 : Ojs.t) ->
                                             fun (x11300 : Ojs.t) ->
                                               any_to_js
                                                 (x11294
                                                    ~this:(t_of_js x11299)
                                                    ~ev:(any_of_js x11300))))|]);
                                (match x11295 with
                                 | Some x11297 ->
                                     ignore
                                       (Ojs.call x11296 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11297)|])
                                 | None -> ());
                                x11296))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11310 : 'tags this) ->
        fun ~type_:(x11304 : string) ->
          fun ~listener:(x11305 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11306 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11312 = this_to_js Obj.magic x11310 in
                   Ojs.call (Ojs.get_prop_ascii x11312 "addEventListener")
                     "apply"
                     [|x11312;((let x11307 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11307 "push"
                                     [|(Ojs.string_to_js x11304)|]);
                                ignore
                                  (Ojs.call x11307 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11305)|]);
                                (match x11306 with
                                 | Some x11308 ->
                                     ignore
                                       (Ojs.call x11307 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11308)|])
                                 | None -> ());
                                x11307))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11321 : 'tags this) ->
        fun ~type_:(x11313 : 'K) ->
          fun ~listener:(x11314 : this:t -> ev:any -> any) ->
            fun ?options:(x11315 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11323 = this_to_js Obj.magic x11321 in
                   Ojs.call (Ojs.get_prop_ascii x11323 "removeEventListener")
                     "apply"
                     [|x11323;((let x11316 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11316 "push"
                                     [|(Obj.magic x11313)|]);
                                ignore
                                  (Ojs.call x11316 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11319 : Ojs.t) ->
                                             fun (x11320 : Ojs.t) ->
                                               any_to_js
                                                 (x11314
                                                    ~this:(t_of_js x11319)
                                                    ~ev:(any_of_js x11320))))|]);
                                (match x11315 with
                                 | Some x11317 ->
                                     ignore
                                       (Ojs.call x11316 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11317)|])
                                 | None -> ());
                                x11316))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11330 : 'tags this) ->
        fun ~type_:(x11324 : string) ->
          fun ~listener:(x11325 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x11326 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11332 = this_to_js Obj.magic x11330 in
                   Ojs.call (Ojs.get_prop_ascii x11332 "removeEventListener")
                     "apply"
                     [|x11332;((let x11327 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11327 "push"
                                     [|(Ojs.string_to_js x11324)|]);
                                ignore
                                  (Ojs.call x11327 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11325)|]);
                                (match x11326 with
                                 | Some x11328 ->
                                     ignore
                                       (Ojs.call x11327 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11328)|])
                                 | None -> ());
                                x11327))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerRegistrationEventMap =
  struct
    type t = [ `ServiceWorkerRegistrationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11334 : Ojs.t) -> t_of_js x11334
    and t_0_to_js : t_0 -> Ojs.t = fun (x11333 : t) -> t_to_js x11333
    type tags = [ `ServiceWorkerRegistrationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11337 : Ojs.t) -> intf_of_js __tags_of_js x11337
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11335 : __tags intf) -> intf_to_js __tags_to_js x11335
    let (get_updatefound : 'tags this -> Event.t) =
      fun (x11339 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11339) "updatefound")
    let (set_updatefound : 'tags this -> Event.t -> unit) =
      fun (x11341 : 'tags this) ->
        fun (x11342 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11341) "updatefound"
            (Event.t_to_js x11342)
    let (create : updatefound:Event.t -> unit -> t) =
      fun ~updatefound:(x11344 : Event.t) ->
        fun () ->
          let x11345 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11345 "updatefound" (Event.t_to_js x11344);
          t_of_js x11345
    let cast_from = Obj.magic
  end
module PushMessageData =
  struct
    type t = [ `PushMessageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11347 : Ojs.t) -> t_of_js x11347
    and t_0_to_js : t_0 -> Ojs.t = fun (x11346 : t) -> t_to_js x11346
    type tags = [ `PushMessageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushMessageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11350 : Ojs.t) -> intf_of_js __tags_of_js x11350
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11348 : __tags intf) -> intf_to_js __tags_to_js x11348
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0) =
      fun (x11352 : 'tags this) ->
        ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x11352) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t) =
      fun (x11354 : 'tags this) ->
        Blob.t_of_js (Ojs.call (this_to_js Obj.magic x11354) "blob" [||])
    let (json : 'tags this -> any) =
      fun (x11356 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x11356) "json" [||])
    let (text : 'tags this -> string) =
      fun (x11358 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x11358) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushMessageData") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushMessageData") [||])
  end
module PushMessageDataInit =
  struct
    type t = BufferSource.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x11362 : Ojs.t) -> or_string_of_js BufferSource.t_of_js x11362
    and t_to_js : t -> Ojs.t =
      fun (x11360 : BufferSource.t or_string) ->
        or_string_to_js BufferSource.t_to_js x11360
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11365 : Ojs.t) -> t_of_js x11365
    and t_0_to_js : t_0 -> Ojs.t = fun (x11364 : t) -> t_to_js x11364
  end
module ExtendableEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11367 : Ojs.t) -> t_of_js x11367
    and t_0_to_js : t_0 -> Ojs.t = fun (x11366 : t) -> t_to_js x11366
    type tags = [ `EventInit  | `ExtendableEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11370 : Ojs.t) -> intf_of_js __tags_of_js x11370
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11368 : __tags intf) -> intf_to_js __tags_to_js x11368
    let cast_from = Obj.magic
  end
module PushEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11373 : Ojs.t) -> t_of_js x11373
    and t_0_to_js : t_0 -> Ojs.t = fun (x11372 : t) -> t_to_js x11372
    type tags = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11376 : Ojs.t) -> intf_of_js __tags_of_js x11376
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11374 : __tags intf) -> intf_to_js __tags_to_js x11374
    let (get_data : 'tags this -> PushMessageDataInit.t) =
      fun (x11378 : 'tags this) ->
        PushMessageDataInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11378) "data")
    let (set_data : 'tags this -> PushMessageDataInit.t -> unit) =
      fun (x11380 : 'tags this) ->
        fun (x11381 : PushMessageDataInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11380) "data"
            (PushMessageDataInit.t_to_js x11381)
    let (create : data:PushMessageDataInit.t -> unit -> t) =
      fun ~data:(x11383 : PushMessageDataInit.t) ->
        fun () ->
          let x11384 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x11384 "data"
            (PushMessageDataInit.t_to_js x11383);
          t_of_js x11384
    let cast_from = Obj.magic
  end
module ExtendableEvent =
  struct
    type t = [ `Event  | `ExtendableEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11386 : Ojs.t) -> t_of_js x11386
    and t_0_to_js : t_0 -> Ojs.t = fun (x11385 : t) -> t_to_js x11385
    type tags = [ `Event  | `ExtendableEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11389 : Ojs.t) -> intf_of_js __tags_of_js x11389
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11387 : __tags intf) -> intf_to_js __tags_to_js x11387
    let (waitUntil : 'tags this -> f:any -> unit) =
      fun (x11392 : 'tags this) ->
        fun ~f:(x11391 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11392) "waitUntil"
               [|(any_to_js x11391)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableEvent") "prototype")
    let (create :
      type_:string -> ?eventInitDict:ExtendableEventInit.t -> unit -> t) =
      fun ~type_:(x11394 : string) ->
        fun ?eventInitDict:(x11395 : ExtendableEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
                 (let x11396 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11396 "push" [|(Ojs.string_to_js x11394)|]);
                  (match x11395 with
                   | Some x11397 ->
                       ignore
                         (Ojs.call x11396 "push"
                            [|(ExtendableEventInit.t_to_js x11397)|])
                   | None -> ());
                  x11396))
  end
module PushEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11399 : Ojs.t) -> t_of_js x11399
    and t_0_to_js : t_0 -> Ojs.t = fun (x11398 : t) -> t_to_js x11398
    type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11402 : Ojs.t) -> intf_of_js __tags_of_js x11402
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11400 : __tags intf) -> intf_to_js __tags_to_js x11400
    let (get_data : 'tags this -> PushMessageData.t or_null) =
      fun (x11404 : 'tags this) ->
        or_null_of_js PushMessageData.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11404) "data")
    let (create : ?data:PushMessageData.t -> unit -> t) =
      fun ?data:(x11407 : PushMessageData.t option) ->
        fun () ->
          let x11408 = Ojs.empty_obj () in
          (match x11407 with
           | Some x11409 ->
               Ojs.set_prop_ascii x11408 "data"
                 (PushMessageData.t_to_js x11409)
           | None -> ());
          t_of_js x11408
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t) =
      fun ~type_:(x11410 : string) ->
        fun ?eventInitDict:(x11411 : PushEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "PushEvent")
                 (let x11412 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11412 "push" [|(Ojs.string_to_js x11410)|]);
                  (match x11411 with
                   | Some x11413 ->
                       ignore
                         (Ojs.call x11412 "push"
                            [|(PushEventInit.t_to_js x11413)|])
                   | None -> ());
                  x11412))
  end
module NotificationPermission =
  struct
    type t = [ `L_s57_default  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11415 : Ojs.t) ->
        let x11416 = x11415 in
        match Ojs.string_of_js x11416 with
        | "default" -> `L_s57_default
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11414 : [ `L_s57_default  | `L_s58_denied  | `L_s82_granted ]) ->
        match x11414 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11418 : Ojs.t) -> t_of_js x11418
    and t_0_to_js : t_0 -> Ojs.t = fun (x11417 : t) -> t_to_js x11417
  end
module VibratePattern =
  struct
    type t = float list or_number
    let rec t_of_js : Ojs.t -> t =
      fun (x11422 : Ojs.t) ->
        or_number_of_js
          (fun (x11423 : Ojs.t) -> Ojs.list_of_js Ojs.float_of_js x11423)
          x11422
    and t_to_js : t -> Ojs.t =
      fun (x11419 : float list or_number) ->
        or_number_to_js
          (fun (x11420 : float list) -> Ojs.list_to_js Ojs.float_to_js x11420)
          x11419
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11426 : Ojs.t) -> t_of_js x11426
    and t_0_to_js : t_0 -> Ojs.t = fun (x11425 : t) -> t_to_js x11425
  end
module NotificationAction =
  struct
    type t = [ `NotificationAction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11428 : Ojs.t) -> t_of_js x11428
    and t_0_to_js : t_0 -> Ojs.t = fun (x11427 : t) -> t_to_js x11427
    type tags = [ `NotificationAction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationAction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11431 : Ojs.t) -> intf_of_js __tags_of_js x11431
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11429 : __tags intf) -> intf_to_js __tags_to_js x11429
    let (get_action : 'tags this -> string) =
      fun (x11433 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11433) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x11435 : 'tags this) ->
        fun (x11436 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11435) "action"
            (Ojs.string_to_js x11436)
    let (get_icon : 'tags this -> string) =
      fun (x11438 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11438) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x11440 : 'tags this) ->
        fun (x11441 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11440) "icon"
            (Ojs.string_to_js x11441)
    let (get_title : 'tags this -> string) =
      fun (x11443 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11443) "title")
    let (set_title : 'tags this -> string -> unit) =
      fun (x11445 : 'tags this) ->
        fun (x11446 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11445) "title"
            (Ojs.string_to_js x11446)
    let (create : action:string -> icon:string -> title:string -> unit -> t)
      =
      fun ~action:(x11448 : string) ->
        fun ~icon:(x11449 : string) ->
          fun ~title:(x11450 : string) ->
            fun () ->
              let x11451 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x11451 "action" (Ojs.string_to_js x11448);
              Ojs.set_prop_ascii x11451 "icon" (Ojs.string_to_js x11449);
              Ojs.set_prop_ascii x11451 "title" (Ojs.string_to_js x11450);
              t_of_js x11451
    let cast_from = Obj.magic
  end
module NotificationDirection =
  struct
    type t = [ `L_s108_ltr  | `L_s171_rtl  | `L_s41_auto ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11453 : Ojs.t) ->
        let x11454 = x11453 in
        match Ojs.string_of_js x11454 with
        | "ltr" -> `L_s108_ltr
        | "rtl" -> `L_s171_rtl
        | "auto" -> `L_s41_auto
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11452 : [ `L_s108_ltr  | `L_s171_rtl  | `L_s41_auto ]) ->
        match x11452 with
        | `L_s108_ltr -> Ojs.string_to_js "ltr"
        | `L_s171_rtl -> Ojs.string_to_js "rtl"
        | `L_s41_auto -> Ojs.string_to_js "auto"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11456 : Ojs.t) -> t_of_js x11456
    and t_0_to_js : t_0 -> Ojs.t = fun (x11455 : t) -> t_to_js x11455
  end
module DOMTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x11458 : Ojs.t) -> Ojs.float_of_js x11458
    and t_to_js : t -> Ojs.t = fun (x11457 : float) -> Ojs.float_to_js x11457
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11460 : Ojs.t) -> t_of_js x11460
    and t_0_to_js : t_0 -> Ojs.t = fun (x11459 : t) -> t_to_js x11459
  end
module NotificationOptions =
  struct
    type t = [ `NotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11462 : Ojs.t) -> t_of_js x11462
    and t_0_to_js : t_0 -> Ojs.t = fun (x11461 : t) -> t_to_js x11461
    type tags = [ `NotificationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11465 : Ojs.t) -> intf_of_js __tags_of_js x11465
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11463 : __tags intf) -> intf_to_js __tags_to_js x11463
    let (get_actions : 'tags this -> NotificationAction.t list) =
      fun (x11467 : 'tags this) ->
        Ojs.list_of_js NotificationAction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11467) "actions")
    let (set_actions : 'tags this -> NotificationAction.t list -> unit) =
      fun (x11470 : 'tags this) ->
        fun (x11471 : NotificationAction.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11470) "actions"
            (Ojs.list_to_js NotificationAction.t_to_js x11471)
    let (get_badge : 'tags this -> string) =
      fun (x11474 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11474) "badge")
    let (set_badge : 'tags this -> string -> unit) =
      fun (x11476 : 'tags this) ->
        fun (x11477 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11476) "badge"
            (Ojs.string_to_js x11477)
    let (get_body : 'tags this -> string) =
      fun (x11479 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11479) "body")
    let (set_body : 'tags this -> string -> unit) =
      fun (x11481 : 'tags this) ->
        fun (x11482 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11481) "body"
            (Ojs.string_to_js x11482)
    let (get_data : 'tags this -> any) =
      fun (x11484 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11484) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x11486 : 'tags this) ->
        fun (x11487 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11486) "data"
            (any_to_js x11487)
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x11489 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11489) "dir")
    let (set_dir : 'tags this -> NotificationDirection.t -> unit) =
      fun (x11491 : 'tags this) ->
        fun (x11492 : NotificationDirection.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11491) "dir"
            (NotificationDirection.t_to_js x11492)
    let (get_icon : 'tags this -> string) =
      fun (x11494 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11494) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x11496 : 'tags this) ->
        fun (x11497 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11496) "icon"
            (Ojs.string_to_js x11497)
    let (get_image : 'tags this -> string) =
      fun (x11499 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11499) "image")
    let (set_image : 'tags this -> string -> unit) =
      fun (x11501 : 'tags this) ->
        fun (x11502 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11501) "image"
            (Ojs.string_to_js x11502)
    let (get_lang : 'tags this -> string) =
      fun (x11504 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11504) "lang")
    let (set_lang : 'tags this -> string -> unit) =
      fun (x11506 : 'tags this) ->
        fun (x11507 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11506) "lang"
            (Ojs.string_to_js x11507)
    let (get_renotify : 'tags this -> bool) =
      fun (x11509 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11509) "renotify")
    let (set_renotify : 'tags this -> bool -> unit) =
      fun (x11511 : 'tags this) ->
        fun (x11512 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11511) "renotify"
            (Ojs.bool_to_js x11512)
    let (get_requireInteraction : 'tags this -> bool) =
      fun (x11514 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11514)
             "requireInteraction")
    let (set_requireInteraction : 'tags this -> bool -> unit) =
      fun (x11516 : 'tags this) ->
        fun (x11517 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11516)
            "requireInteraction" (Ojs.bool_to_js x11517)
    let (get_silent : 'tags this -> bool) =
      fun (x11519 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11519) "silent")
    let (set_silent : 'tags this -> bool -> unit) =
      fun (x11521 : 'tags this) ->
        fun (x11522 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11521) "silent"
            (Ojs.bool_to_js x11522)
    let (get_tag : 'tags this -> string) =
      fun (x11524 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11524) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x11526 : 'tags this) ->
        fun (x11527 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11526) "tag"
            (Ojs.string_to_js x11527)
    let (get_timestamp : 'tags this -> DOMTimeStamp.t) =
      fun (x11529 : 'tags this) ->
        DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11529) "timestamp")
    let (set_timestamp : 'tags this -> DOMTimeStamp.t -> unit) =
      fun (x11531 : 'tags this) ->
        fun (x11532 : DOMTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11531) "timestamp"
            (DOMTimeStamp.t_to_js x11532)
    let (get_vibrate : 'tags this -> VibratePattern.t) =
      fun (x11534 : 'tags this) ->
        VibratePattern.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11534) "vibrate")
    let (set_vibrate : 'tags this -> VibratePattern.t -> unit) =
      fun (x11536 : 'tags this) ->
        fun (x11537 : VibratePattern.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11536) "vibrate"
            (VibratePattern.t_to_js x11537)
    let (create :
      actions:NotificationAction.t list ->
        badge:string ->
          body:string ->
            data:any ->
              dir:NotificationDirection.t ->
                icon:string ->
                  image:string ->
                    lang:string ->
                      renotify:bool ->
                        requireInteraction:bool ->
                          silent:bool ->
                            tag:string ->
                              timestamp:DOMTimeStamp.t ->
                                vibrate:VibratePattern.t -> unit -> t)
      =
      fun ~actions:(x11539 : NotificationAction.t list) ->
        fun ~badge:(x11540 : string) ->
          fun ~body:(x11541 : string) ->
            fun ~data:(x11542 : any) ->
              fun ~dir:(x11543 : NotificationDirection.t) ->
                fun ~icon:(x11544 : string) ->
                  fun ~image:(x11545 : string) ->
                    fun ~lang:(x11546 : string) ->
                      fun ~renotify:(x11547 : bool) ->
                        fun ~requireInteraction:(x11548 : bool) ->
                          fun ~silent:(x11549 : bool) ->
                            fun ~tag:(x11550 : string) ->
                              fun ~timestamp:(x11551 : DOMTimeStamp.t) ->
                                fun ~vibrate:(x11552 : VibratePattern.t) ->
                                  fun () ->
                                    let x11553 = Ojs.empty_obj () in
                                    Ojs.set_prop_ascii x11553 "actions"
                                      (Ojs.list_to_js
                                         NotificationAction.t_to_js x11539);
                                    Ojs.set_prop_ascii x11553 "badge"
                                      (Ojs.string_to_js x11540);
                                    Ojs.set_prop_ascii x11553 "body"
                                      (Ojs.string_to_js x11541);
                                    Ojs.set_prop_ascii x11553 "data"
                                      (any_to_js x11542);
                                    Ojs.set_prop_ascii x11553 "dir"
                                      (NotificationDirection.t_to_js x11543);
                                    Ojs.set_prop_ascii x11553 "icon"
                                      (Ojs.string_to_js x11544);
                                    Ojs.set_prop_ascii x11553 "image"
                                      (Ojs.string_to_js x11545);
                                    Ojs.set_prop_ascii x11553 "lang"
                                      (Ojs.string_to_js x11546);
                                    Ojs.set_prop_ascii x11553 "renotify"
                                      (Ojs.bool_to_js x11547);
                                    Ojs.set_prop_ascii x11553
                                      "requireInteraction"
                                      (Ojs.bool_to_js x11548);
                                    Ojs.set_prop_ascii x11553 "silent"
                                      (Ojs.bool_to_js x11549);
                                    Ojs.set_prop_ascii x11553 "tag"
                                      (Ojs.string_to_js x11550);
                                    Ojs.set_prop_ascii x11553 "timestamp"
                                      (DOMTimeStamp.t_to_js x11551);
                                    Ojs.set_prop_ascii x11553 "vibrate"
                                      (VibratePattern.t_to_js x11552);
                                    t_of_js x11553
    let cast_from = Obj.magic
  end
module Notification =
  struct
    type t = [ `EventTarget  | `Notification ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11556 : Ojs.t) -> t_of_js x11556
    and t_0_to_js : t_0 -> Ojs.t = fun (x11555 : t) -> t_to_js x11555
    type tags = [ `EventTarget  | `Notification ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11559 : Ojs.t) -> intf_of_js __tags_of_js x11559
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11557 : __tags intf) -> intf_to_js __tags_to_js x11557
    let (get_body : 'tags this -> string) =
      fun (x11561 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11561) "body")
    let (get_data : 'tags this -> any) =
      fun (x11563 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11563) "data")
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x11565 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11565) "dir")
    let (get_icon : 'tags this -> string) =
      fun (x11567 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11567) "icon")
    let (get_lang : 'tags this -> string) =
      fun (x11569 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11569) "lang")
    let (get_onclick : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x11571 : 'tags this) ->
        or_null_of_js
          (fun (x11573 : Ojs.t) ->
             fun ~this:(x11574 : t) ->
               fun ~ev:(x11575 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11573
                      [|(t_to_js x11574);(Event.t_to_js x11575)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11571) "onclick")
    let (set_onclick :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11576 : 'tags this) ->
        fun (x11577 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11576) "onclick"
            (or_null_to_js
               (fun (x11578 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11579 : Ojs.t) ->
                       fun (x11580 : Ojs.t) ->
                         any_to_js
                           (x11578 ~this:(t_of_js x11579)
                              ~ev:(Event.t_of_js x11580)))) x11577)
    let (get_onclose : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x11582 : 'tags this) ->
        or_null_of_js
          (fun (x11584 : Ojs.t) ->
             fun ~this:(x11585 : t) ->
               fun ~ev:(x11586 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11584
                      [|(t_to_js x11585);(Event.t_to_js x11586)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11582) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11587 : 'tags this) ->
        fun (x11588 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11587) "onclose"
            (or_null_to_js
               (fun (x11589 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11590 : Ojs.t) ->
                       fun (x11591 : Ojs.t) ->
                         any_to_js
                           (x11589 ~this:(t_of_js x11590)
                              ~ev:(Event.t_of_js x11591)))) x11588)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x11593 : 'tags this) ->
        or_null_of_js
          (fun (x11595 : Ojs.t) ->
             fun ~this:(x11596 : t) ->
               fun ~ev:(x11597 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11595
                      [|(t_to_js x11596);(Event.t_to_js x11597)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11593) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11598 : 'tags this) ->
        fun (x11599 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11598) "onerror"
            (or_null_to_js
               (fun (x11600 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11601 : Ojs.t) ->
                       fun (x11602 : Ojs.t) ->
                         any_to_js
                           (x11600 ~this:(t_of_js x11601)
                              ~ev:(Event.t_of_js x11602)))) x11599)
    let (get_onshow : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x11604 : 'tags this) ->
        or_null_of_js
          (fun (x11606 : Ojs.t) ->
             fun ~this:(x11607 : t) ->
               fun ~ev:(x11608 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11606
                      [|(t_to_js x11607);(Event.t_to_js x11608)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11604) "onshow")
    let (set_onshow :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11609 : 'tags this) ->
        fun (x11610 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11609) "onshow"
            (or_null_to_js
               (fun (x11611 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11612 : Ojs.t) ->
                       fun (x11613 : Ojs.t) ->
                         any_to_js
                           (x11611 ~this:(t_of_js x11612)
                              ~ev:(Event.t_of_js x11613)))) x11610)
    let (get_tag : 'tags this -> string) =
      fun (x11615 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11615) "tag")
    let (get_title : 'tags this -> string) =
      fun (x11617 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11617) "title")
    let (close : 'tags this -> unit) =
      fun (x11619 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11619) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11629 : 'tags this) ->
        fun ~type_:(x11621 : 'K) ->
          fun ~listener:(x11622 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11623 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11631 = this_to_js Obj.magic x11629 in
                   Ojs.call (Ojs.get_prop_ascii x11631 "addEventListener")
                     "apply"
                     [|x11631;((let x11624 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11624 "push"
                                     [|(Obj.magic x11621)|]);
                                ignore
                                  (Ojs.call x11624 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11627 : Ojs.t) ->
                                             fun (x11628 : Ojs.t) ->
                                               any_to_js
                                                 (x11622
                                                    ~this:(t_of_js x11627)
                                                    ~ev:(any_of_js x11628))))|]);
                                (match x11623 with
                                 | Some x11625 ->
                                     ignore
                                       (Ojs.call x11624 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11625)|])
                                 | None -> ());
                                x11624))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11638 : 'tags this) ->
        fun ~type_:(x11632 : string) ->
          fun ~listener:(x11633 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11634 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11640 = this_to_js Obj.magic x11638 in
                   Ojs.call (Ojs.get_prop_ascii x11640 "addEventListener")
                     "apply"
                     [|x11640;((let x11635 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11635 "push"
                                     [|(Ojs.string_to_js x11632)|]);
                                ignore
                                  (Ojs.call x11635 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11633)|]);
                                (match x11634 with
                                 | Some x11636 ->
                                     ignore
                                       (Ojs.call x11635 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11636)|])
                                 | None -> ());
                                x11635))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11649 : 'tags this) ->
        fun ~type_:(x11641 : 'K) ->
          fun ~listener:(x11642 : this:t -> ev:any -> any) ->
            fun ?options:(x11643 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11651 = this_to_js Obj.magic x11649 in
                   Ojs.call (Ojs.get_prop_ascii x11651 "removeEventListener")
                     "apply"
                     [|x11651;((let x11644 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11644 "push"
                                     [|(Obj.magic x11641)|]);
                                ignore
                                  (Ojs.call x11644 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11647 : Ojs.t) ->
                                             fun (x11648 : Ojs.t) ->
                                               any_to_js
                                                 (x11642
                                                    ~this:(t_of_js x11647)
                                                    ~ev:(any_of_js x11648))))|]);
                                (match x11643 with
                                 | Some x11645 ->
                                     ignore
                                       (Ojs.call x11644 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11645)|])
                                 | None -> ());
                                x11644))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11658 : 'tags this) ->
        fun ~type_:(x11652 : string) ->
          fun ~listener:(x11653 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x11654 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11660 = this_to_js Obj.magic x11658 in
                   Ojs.call (Ojs.get_prop_ascii x11660 "removeEventListener")
                     "apply"
                     [|x11660;((let x11655 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11655 "push"
                                     [|(Ojs.string_to_js x11652)|]);
                                ignore
                                  (Ojs.call x11655 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11653)|]);
                                (match x11654 with
                                 | Some x11656 ->
                                     ignore
                                       (Ojs.call x11655 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11656)|])
                                 | None -> ());
                                x11655))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "prototype")
    let (create :
      title:string -> ?options:NotificationOptions.t -> unit -> t) =
      fun ~title:(x11661 : string) ->
        fun ?options:(x11662 : NotificationOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Notification")
                 (let x11663 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11663 "push" [|(Ojs.string_to_js x11661)|]);
                  (match x11662 with
                   | Some x11664 ->
                       ignore
                         (Ojs.call x11663 "push"
                            [|(NotificationOptions.t_to_js x11664)|])
                   | None -> ());
                  x11663))
    let (permission : unit -> NotificationPermission.t) =
      fun () ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "permission")
  end
module NotificationEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11666 : Ojs.t) -> t_of_js x11666
    and t_0_to_js : t_0 -> Ojs.t = fun (x11665 : t) -> t_to_js x11665
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11669 : Ojs.t) -> intf_of_js __tags_of_js x11669
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11667 : __tags intf) -> intf_to_js __tags_to_js x11667
    let (get_action : 'tags this -> string) =
      fun (x11671 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11671) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x11673 : 'tags this) ->
        fun (x11674 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11673) "action"
            (Ojs.string_to_js x11674)
    let (get_notification : 'tags this -> Notification.t) =
      fun (x11676 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11676) "notification")
    let (set_notification : 'tags this -> Notification.t -> unit) =
      fun (x11678 : 'tags this) ->
        fun (x11679 : Notification.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11678) "notification"
            (Notification.t_to_js x11679)
    let (create : action:string -> notification:Notification.t -> unit -> t)
      =
      fun ~action:(x11681 : string) ->
        fun ~notification:(x11682 : Notification.t) ->
          fun () ->
            let x11683 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11683 "action" (Ojs.string_to_js x11681);
            Ojs.set_prop_ascii x11683 "notification"
              (Notification.t_to_js x11682);
            t_of_js x11683
    let cast_from = Obj.magic
  end
module NotificationEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `NotificationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11685 : Ojs.t) -> t_of_js x11685
    and t_0_to_js : t_0 -> Ojs.t = fun (x11684 : t) -> t_to_js x11684
    type tags = [ `Event  | `ExtendableEvent  | `NotificationEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11688 : Ojs.t) -> intf_of_js __tags_of_js x11688
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11686 : __tags intf) -> intf_to_js __tags_to_js x11686
    let (get_action : 'tags this -> string) =
      fun (x11690 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11690) "action")
    let (get_notification : 'tags this -> Notification.t) =
      fun (x11692 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11692) "notification")
    let (create : action:string -> notification:Notification.t -> unit -> t)
      =
      fun ~action:(x11694 : string) ->
        fun ~notification:(x11695 : Notification.t) ->
          fun () ->
            let x11696 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x11696 "action" (Ojs.string_to_js x11694);
            Ojs.set_prop_ascii x11696 "notification"
              (Notification.t_to_js x11695);
            t_of_js x11696
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NotificationEvent") "prototype")
    let (create' :
      type_:string -> eventInitDict:NotificationEventInit.t -> t) =
      fun ~type_:(x11697 : string) ->
        fun ~eventInitDict:(x11698 : NotificationEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
               [|(Ojs.string_to_js x11697);(NotificationEventInit.t_to_js
                                              x11698)|])
  end
module FetchEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11700 : Ojs.t) -> t_of_js x11700
    and t_0_to_js : t_0 -> Ojs.t = fun (x11699 : t) -> t_to_js x11699
    type tags = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11703 : Ojs.t) -> intf_of_js __tags_of_js x11703
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11701 : __tags intf) -> intf_to_js __tags_to_js x11701
    let (get_clientId : 'tags this -> string) =
      fun (x11705 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11705) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x11707 : 'tags this) ->
        fun (x11708 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11707) "clientId"
            (Ojs.string_to_js x11708)
    let (get_handled : 'tags this -> never or_undefined Promise.t_1) =
      fun (x11710 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11712 : Ojs.t) -> or_undefined_of_js never_of_js x11712)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11710) "handled")
    let (set_handled : 'tags this -> never or_undefined Promise.t_1 -> unit)
      =
      fun (x11714 : 'tags this) ->
        fun (x11715 : never or_undefined Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11714) "handled"
            (Promise.t_1_to_js
               (fun (x11716 : never or_undefined) ->
                  or_undefined_to_js never_to_js x11716) x11715)
    let (get_preloadResponse : 'tags this -> any Promise.t_1) =
      fun (x11719 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11719) "preloadResponse")
    let (set_preloadResponse : 'tags this -> any Promise.t_1 -> unit) =
      fun (x11722 : 'tags this) ->
        fun (x11723 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11722) "preloadResponse"
            (Promise.t_1_to_js any_to_js x11723)
    let (get_replacesClientId : 'tags this -> string) =
      fun (x11726 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11726)
             "replacesClientId")
    let (set_replacesClientId : 'tags this -> string -> unit) =
      fun (x11728 : 'tags this) ->
        fun (x11729 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11728) "replacesClientId"
            (Ojs.string_to_js x11729)
    let (get_request : 'tags this -> Request.t) =
      fun (x11731 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11731) "request")
    let (set_request : 'tags this -> Request.t -> unit) =
      fun (x11733 : 'tags this) ->
        fun (x11734 : Request.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11733) "request"
            (Request.t_to_js x11734)
    let (get_resultingClientId : 'tags this -> string) =
      fun (x11736 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11736)
             "resultingClientId")
    let (set_resultingClientId : 'tags this -> string -> unit) =
      fun (x11738 : 'tags this) ->
        fun (x11739 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11738)
            "resultingClientId" (Ojs.string_to_js x11739)
    let (create :
      clientId:string ->
        handled:never or_undefined Promise.t_1 ->
          preloadResponse:any Promise.t_1 ->
            replacesClientId:string ->
              request:Request.t -> resultingClientId:string -> unit -> t)
      =
      fun ~clientId:(x11741 : string) ->
        fun ~handled:(x11742 : never or_undefined Promise.t_1) ->
          fun ~preloadResponse:(x11743 : any Promise.t_1) ->
            fun ~replacesClientId:(x11744 : string) ->
              fun ~request:(x11745 : Request.t) ->
                fun ~resultingClientId:(x11746 : string) ->
                  fun () ->
                    let x11747 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x11747 "clientId"
                      (Ojs.string_to_js x11741);
                    Ojs.set_prop_ascii x11747 "handled"
                      (Promise.t_1_to_js
                         (fun (x11749 : never or_undefined) ->
                            or_undefined_to_js never_to_js x11749) x11742);
                    Ojs.set_prop_ascii x11747 "preloadResponse"
                      (Promise.t_1_to_js any_to_js x11743);
                    Ojs.set_prop_ascii x11747 "replacesClientId"
                      (Ojs.string_to_js x11744);
                    Ojs.set_prop_ascii x11747 "request"
                      (Request.t_to_js x11745);
                    Ojs.set_prop_ascii x11747 "resultingClientId"
                      (Ojs.string_to_js x11746);
                    t_of_js x11747
    let cast_from = Obj.magic
  end
module FetchEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11752 : Ojs.t) -> t_of_js x11752
    and t_0_to_js : t_0 -> Ojs.t = fun (x11751 : t) -> t_to_js x11751
    type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11755 : Ojs.t) -> intf_of_js __tags_of_js x11755
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11753 : __tags intf) -> intf_to_js __tags_to_js x11753
    let (get_clientId : 'tags this -> string) =
      fun (x11757 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11757) "clientId")
    let (get_handled : 'tags this -> never or_undefined Promise.t_1) =
      fun (x11759 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11761 : Ojs.t) -> or_undefined_of_js never_of_js x11761)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11759) "handled")
    let (get_request : 'tags this -> Request.t) =
      fun (x11763 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11763) "request")
    let (get_resultingClientId : 'tags this -> string) =
      fun (x11765 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11765)
             "resultingClientId")
    let (respondWith : 'tags this -> r:Response.t -> unit) =
      fun (x11768 : 'tags this) ->
        fun ~r:(x11767 : Response.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11768) "respondWith"
               [|(Response.t_to_js x11767)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FetchEvent")
             "prototype")
    let (create : type_:string -> eventInitDict:FetchEventInit.t -> t) =
      fun ~type_:(x11770 : string) ->
        fun ~eventInitDict:(x11771 : FetchEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FetchEvent")
               [|(Ojs.string_to_js x11770);(FetchEventInit.t_to_js x11771)|])
  end
module FrameType =
  struct
    type t =
      [ `L_s120_nested  | `L_s128_none  | `L_s192_top_level 
      | `L_s42_auxiliary ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11773 : Ojs.t) ->
        let x11774 = x11773 in
        match Ojs.string_of_js x11774 with
        | "nested" -> `L_s120_nested
        | "none" -> `L_s128_none
        | "top-level" -> `L_s192_top_level
        | "auxiliary" -> `L_s42_auxiliary
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11772 :
          [ `L_s120_nested  | `L_s128_none  | `L_s192_top_level 
          | `L_s42_auxiliary ])
        ->
        match x11772 with
        | `L_s120_nested -> Ojs.string_to_js "nested"
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s192_top_level -> Ojs.string_to_js "top-level"
        | `L_s42_auxiliary -> Ojs.string_to_js "auxiliary"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11776 : Ojs.t) -> t_of_js x11776
    and t_0_to_js : t_0 -> Ojs.t = fun (x11775 : t) -> t_to_js x11775
  end
module ClientTypes =
  struct
    type t =
      [ `L_s176_sharedworker  | `L_s208_window  | `L_s209_worker 
      | `L_s35_all ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11778 : Ojs.t) ->
        let x11779 = x11778 in
        match Ojs.string_of_js x11779 with
        | "sharedworker" -> `L_s176_sharedworker
        | "window" -> `L_s208_window
        | "worker" -> `L_s209_worker
        | "all" -> `L_s35_all
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11777 :
          [ `L_s176_sharedworker  | `L_s208_window  | `L_s209_worker 
          | `L_s35_all ])
        ->
        match x11777 with
        | `L_s176_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s208_window -> Ojs.string_to_js "window"
        | `L_s209_worker -> Ojs.string_to_js "worker"
        | `L_s35_all -> Ojs.string_to_js "all"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11781 : Ojs.t) -> t_of_js x11781
    and t_0_to_js : t_0 -> Ojs.t = fun (x11780 : t) -> t_to_js x11780
  end
module Client =
  struct
    type t = [ `Client ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11783 : Ojs.t) -> t_of_js x11783
    and t_0_to_js : t_0 -> Ojs.t = fun (x11782 : t) -> t_to_js x11782
    type tags = [ `Client ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Client ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11786 : Ojs.t) -> intf_of_js __tags_of_js x11786
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11784 : __tags intf) -> intf_to_js __tags_to_js x11784
    let (get_frameType : 'tags this -> FrameType.t) =
      fun (x11788 : 'tags this) ->
        FrameType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11788) "frameType")
    let (get_id : 'tags this -> string) =
      fun (x11790 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11790) "id")
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x11792 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11792) "type")
    let (get_url : 'tags this -> string) =
      fun (x11794 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11794) "url")
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x11799 : 'tags this) ->
        fun ~message:(x11796 : any) ->
          fun ~transfer:(x11797 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11799) "postMessage"
                 [|(any_to_js x11796);(Ojs.list_to_js Transferable.t_to_js
                                         x11797)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x11805 : 'tags this) ->
        fun ~message:(x11801 : any) ->
          fun ?options:(x11802 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x11807 = this_to_js Obj.magic x11805 in
                 Ojs.call (Ojs.get_prop_ascii x11807 "postMessage") "apply"
                   [|x11807;((let x11803 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11803 "push"
                                   [|(any_to_js x11801)|]);
                              (match x11802 with
                               | Some x11804 ->
                                   ignore
                                     (Ojs.call x11803 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x11804)|])
                               | None -> ());
                              x11803))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Client")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Client") [||])
  end
module ExtendableMessageEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11809 : Ojs.t) -> t_of_js x11809
    and t_0_to_js : t_0 -> Ojs.t = fun (x11808 : t) -> t_to_js x11808
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11812 : Ojs.t) -> intf_of_js __tags_of_js x11812
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11810 : __tags intf) -> intf_to_js __tags_to_js x11810
    let (get_data : 'tags this -> any) =
      fun (x11814 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11814) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x11816 : 'tags this) ->
        fun (x11817 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11816) "data"
            (any_to_js x11817)
    let (get_lastEventId : 'tags this -> string) =
      fun (x11819 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11819) "lastEventId")
    let (set_lastEventId : 'tags this -> string -> unit) =
      fun (x11821 : 'tags this) ->
        fun (x11822 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11821) "lastEventId"
            (Ojs.string_to_js x11822)
    let (get_origin : 'tags this -> string) =
      fun (x11824 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11824) "origin")
    let (set_origin : 'tags this -> string -> unit) =
      fun (x11826 : 'tags this) ->
        fun (x11827 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11826) "origin"
            (Ojs.string_to_js x11827)
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x11829 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11829) "ports")
    let (set_ports : 'tags this -> MessagePort.t list -> unit) =
      fun (x11832 : 'tags this) ->
        fun (x11833 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11832) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x11833)
    let (get_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
          | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s94_installed of ServiceWorker.t 
           | `U_s95_installing of ServiceWorker.t 
           | `U_s146_parsed of ServiceWorker.t 
           | `U_s166_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null)
      =
      fun (x11836 : 'tags this) ->
        or_null_of_js
          (fun (x11838 : Ojs.t) ->
             or__of_js
               (fun (x11839 : Ojs.t) ->
                  union2_of_js
                    (fun (x11840 : Ojs.t) ->
                       let x11841 = x11840 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x11841 "frameType")
                       with
                       | "auxiliary" ->
                           `U_s42_auxiliary (Client.t_of_js x11841)
                       | "nested" -> `U_s120_nested (Client.t_of_js x11841)
                       | "none" -> `U_s128_none (Client.t_of_js x11841)
                       | "top-level" ->
                           `U_s192_top_level (Client.t_of_js x11841)
                       | _ -> assert false)
                    (fun (x11842 : Ojs.t) ->
                       let x11843 = x11842 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x11843 "state")
                       with
                       | "activated" ->
                           `U_s33_activated (ServiceWorker.t_of_js x11843)
                       | "activating" ->
                           `U_s34_activating (ServiceWorker.t_of_js x11843)
                       | "installed" ->
                           `U_s94_installed (ServiceWorker.t_of_js x11843)
                       | "installing" ->
                           `U_s95_installing (ServiceWorker.t_of_js x11843)
                       | "parsed" ->
                           `U_s146_parsed (ServiceWorker.t_of_js x11843)
                       | "redundant" ->
                           `U_s166_redundant (ServiceWorker.t_of_js x11843)
                       | _ -> assert false) x11839) MessagePort.t_of_js
               x11838)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11836) "source")
    let (set_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
          | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s94_installed of ServiceWorker.t 
           | `U_s95_installing of ServiceWorker.t 
           | `U_s146_parsed of ServiceWorker.t 
           | `U_s166_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null -> unit)
      =
      fun (x11845 : 'tags this) ->
        fun
          (x11846 :
            (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
              | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
               [ `U_s33_activated of ServiceWorker.t 
               | `U_s34_activating of ServiceWorker.t 
               | `U_s94_installed of ServiceWorker.t 
               | `U_s95_installing of ServiceWorker.t 
               | `U_s146_parsed of ServiceWorker.t 
               | `U_s166_redundant of ServiceWorker.t ]) union2,
              MessagePort.t) or_ or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11845) "source"
            (or_null_to_js
               (fun
                  (x11847 :
                    (([ `U_s42_auxiliary of Client.t 
                      | `U_s120_nested of Client.t 
                      | `U_s128_none of Client.t 
                      | `U_s192_top_level of Client.t ],
                       [ `U_s33_activated of ServiceWorker.t 
                       | `U_s34_activating of ServiceWorker.t 
                       | `U_s94_installed of ServiceWorker.t 
                       | `U_s95_installing of ServiceWorker.t 
                       | `U_s146_parsed of ServiceWorker.t 
                       | `U_s166_redundant of ServiceWorker.t ]) union2,
                      MessagePort.t) or_)
                  ->
                  or__to_js
                    (fun
                       (x11848 :
                         ([ `U_s42_auxiliary of Client.t 
                          | `U_s120_nested of Client.t 
                          | `U_s128_none of Client.t 
                          | `U_s192_top_level of Client.t ],
                           [ `U_s33_activated of ServiceWorker.t 
                           | `U_s34_activating of ServiceWorker.t 
                           | `U_s94_installed of ServiceWorker.t 
                           | `U_s95_installing of ServiceWorker.t 
                           | `U_s146_parsed of ServiceWorker.t 
                           | `U_s166_redundant of ServiceWorker.t ]) union2)
                       ->
                       union2_to_js
                         (fun
                            (x11849 :
                              [ `U_s42_auxiliary of Client.t 
                              | `U_s120_nested of Client.t 
                              | `U_s128_none of Client.t 
                              | `U_s192_top_level of Client.t ])
                            ->
                            match x11849 with
                            | `U_s42_auxiliary x11850 ->
                                Client.t_to_js x11850
                            | `U_s120_nested x11851 -> Client.t_to_js x11851
                            | `U_s128_none x11852 -> Client.t_to_js x11852
                            | `U_s192_top_level x11853 ->
                                Client.t_to_js x11853)
                         (fun
                            (x11854 :
                              [ `U_s33_activated of ServiceWorker.t 
                              | `U_s34_activating of ServiceWorker.t 
                              | `U_s94_installed of ServiceWorker.t 
                              | `U_s95_installing of ServiceWorker.t 
                              | `U_s146_parsed of ServiceWorker.t 
                              | `U_s166_redundant of ServiceWorker.t ])
                            ->
                            match x11854 with
                            | `U_s33_activated x11855 ->
                                ServiceWorker.t_to_js x11855
                            | `U_s34_activating x11856 ->
                                ServiceWorker.t_to_js x11856
                            | `U_s94_installed x11857 ->
                                ServiceWorker.t_to_js x11857
                            | `U_s95_installing x11858 ->
                                ServiceWorker.t_to_js x11858
                            | `U_s146_parsed x11859 ->
                                ServiceWorker.t_to_js x11859
                            | `U_s166_redundant x11860 ->
                                ServiceWorker.t_to_js x11860) x11848)
                    MessagePort.t_to_js x11847) x11846)
    let (create :
      data:any ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:(([ `U_s42_auxiliary of Client.t 
                        | `U_s120_nested of Client.t 
                        | `U_s128_none of Client.t 
                        | `U_s192_top_level of Client.t ],
                         [ `U_s33_activated of ServiceWorker.t 
                         | `U_s34_activating of ServiceWorker.t 
                         | `U_s94_installed of ServiceWorker.t 
                         | `U_s95_installing of ServiceWorker.t 
                         | `U_s146_parsed of ServiceWorker.t 
                         | `U_s166_redundant of ServiceWorker.t ]) union2,
                MessagePort.t) or_ -> unit -> t)
      =
      fun ~data:(x11863 : any) ->
        fun ~lastEventId:(x11864 : string) ->
          fun ~origin:(x11865 : string) ->
            fun ~ports:(x11866 : MessagePort.t list) ->
              fun
                ?source:(x11867 :
                          (([ `U_s42_auxiliary of Client.t 
                            | `U_s120_nested of Client.t 
                            | `U_s128_none of Client.t 
                            | `U_s192_top_level of Client.t ],
                             [ `U_s33_activated of ServiceWorker.t 
                             | `U_s34_activating of ServiceWorker.t 
                             | `U_s94_installed of ServiceWorker.t 
                             | `U_s95_installing of ServiceWorker.t 
                             | `U_s146_parsed of ServiceWorker.t 
                             | `U_s166_redundant of ServiceWorker.t ]) union2,
                            MessagePort.t) or_ option)
                ->
                fun () ->
                  let x11868 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x11868 "data" (any_to_js x11863);
                  Ojs.set_prop_ascii x11868 "lastEventId"
                    (Ojs.string_to_js x11864);
                  Ojs.set_prop_ascii x11868 "origin"
                    (Ojs.string_to_js x11865);
                  Ojs.set_prop_ascii x11868 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x11866);
                  (match x11867 with
                   | Some x11869 ->
                       Ojs.set_prop_ascii x11868 "source"
                         (or__to_js
                            (fun
                               (x11870 :
                                 ([ `U_s42_auxiliary of Client.t 
                                  | `U_s120_nested of Client.t 
                                  | `U_s128_none of Client.t 
                                  | `U_s192_top_level of Client.t ],
                                   [ `U_s33_activated of ServiceWorker.t 
                                   | `U_s34_activating of ServiceWorker.t 
                                   | `U_s94_installed of ServiceWorker.t 
                                   | `U_s95_installing of ServiceWorker.t 
                                   | `U_s146_parsed of ServiceWorker.t 
                                   | `U_s166_redundant of ServiceWorker.t ])
                                   union2)
                               ->
                               union2_to_js
                                 (fun
                                    (x11871 :
                                      [ `U_s42_auxiliary of Client.t 
                                      | `U_s120_nested of Client.t 
                                      | `U_s128_none of Client.t 
                                      | `U_s192_top_level of Client.t ])
                                    ->
                                    match x11871 with
                                    | `U_s42_auxiliary x11872 ->
                                        Client.t_to_js x11872
                                    | `U_s120_nested x11873 ->
                                        Client.t_to_js x11873
                                    | `U_s128_none x11874 ->
                                        Client.t_to_js x11874
                                    | `U_s192_top_level x11875 ->
                                        Client.t_to_js x11875)
                                 (fun
                                    (x11876 :
                                      [ `U_s33_activated of ServiceWorker.t 
                                      | `U_s34_activating of ServiceWorker.t 
                                      | `U_s94_installed of ServiceWorker.t 
                                      | `U_s95_installing of ServiceWorker.t 
                                      | `U_s146_parsed of ServiceWorker.t 
                                      | `U_s166_redundant of ServiceWorker.t ])
                                    ->
                                    match x11876 with
                                    | `U_s33_activated x11877 ->
                                        ServiceWorker.t_to_js x11877
                                    | `U_s34_activating x11878 ->
                                        ServiceWorker.t_to_js x11878
                                    | `U_s94_installed x11879 ->
                                        ServiceWorker.t_to_js x11879
                                    | `U_s95_installing x11880 ->
                                        ServiceWorker.t_to_js x11880
                                    | `U_s146_parsed x11881 ->
                                        ServiceWorker.t_to_js x11881
                                    | `U_s166_redundant x11882 ->
                                        ServiceWorker.t_to_js x11882) x11870)
                            MessagePort.t_to_js x11869)
                   | None -> ());
                  t_of_js x11868
    let cast_from = Obj.magic
  end
module ExtendableMessageEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11886 : Ojs.t) -> t_of_js x11886
    and t_0_to_js : t_0 -> Ojs.t = fun (x11885 : t) -> t_to_js x11885
    type tags = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11889 : Ojs.t) -> intf_of_js __tags_of_js x11889
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11887 : __tags intf) -> intf_to_js __tags_to_js x11887
    let (get_data : 'tags this -> any) =
      fun (x11891 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11891) "data")
    let (get_lastEventId : 'tags this -> string) =
      fun (x11893 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11893) "lastEventId")
    let (get_origin : 'tags this -> string) =
      fun (x11895 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11895) "origin")
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x11897 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11897) "ports")
    let (get_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
          | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s94_installed of ServiceWorker.t 
           | `U_s95_installing of ServiceWorker.t 
           | `U_s146_parsed of ServiceWorker.t 
           | `U_s166_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null)
      =
      fun (x11900 : 'tags this) ->
        or_null_of_js
          (fun (x11902 : Ojs.t) ->
             or__of_js
               (fun (x11903 : Ojs.t) ->
                  union2_of_js
                    (fun (x11904 : Ojs.t) ->
                       let x11905 = x11904 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x11905 "frameType")
                       with
                       | "auxiliary" ->
                           `U_s42_auxiliary (Client.t_of_js x11905)
                       | "nested" -> `U_s120_nested (Client.t_of_js x11905)
                       | "none" -> `U_s128_none (Client.t_of_js x11905)
                       | "top-level" ->
                           `U_s192_top_level (Client.t_of_js x11905)
                       | _ -> assert false)
                    (fun (x11906 : Ojs.t) ->
                       let x11907 = x11906 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x11907 "state")
                       with
                       | "activated" ->
                           `U_s33_activated (ServiceWorker.t_of_js x11907)
                       | "activating" ->
                           `U_s34_activating (ServiceWorker.t_of_js x11907)
                       | "installed" ->
                           `U_s94_installed (ServiceWorker.t_of_js x11907)
                       | "installing" ->
                           `U_s95_installing (ServiceWorker.t_of_js x11907)
                       | "parsed" ->
                           `U_s146_parsed (ServiceWorker.t_of_js x11907)
                       | "redundant" ->
                           `U_s166_redundant (ServiceWorker.t_of_js x11907)
                       | _ -> assert false) x11903) MessagePort.t_of_js
               x11902)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11900) "source")
    let (create :
      data:any ->
        lastEventId:string ->
          origin:string ->
            ports:MessagePort.t list ->
              ?source:(([ `U_s42_auxiliary of Client.t 
                        | `U_s120_nested of Client.t 
                        | `U_s128_none of Client.t 
                        | `U_s192_top_level of Client.t ],
                         [ `U_s33_activated of ServiceWorker.t 
                         | `U_s34_activating of ServiceWorker.t 
                         | `U_s94_installed of ServiceWorker.t 
                         | `U_s95_installing of ServiceWorker.t 
                         | `U_s146_parsed of ServiceWorker.t 
                         | `U_s166_redundant of ServiceWorker.t ]) union2,
                MessagePort.t) or_ -> unit -> t)
      =
      fun ~data:(x11909 : any) ->
        fun ~lastEventId:(x11910 : string) ->
          fun ~origin:(x11911 : string) ->
            fun ~ports:(x11912 : MessagePort.t list) ->
              fun
                ?source:(x11913 :
                          (([ `U_s42_auxiliary of Client.t 
                            | `U_s120_nested of Client.t 
                            | `U_s128_none of Client.t 
                            | `U_s192_top_level of Client.t ],
                             [ `U_s33_activated of ServiceWorker.t 
                             | `U_s34_activating of ServiceWorker.t 
                             | `U_s94_installed of ServiceWorker.t 
                             | `U_s95_installing of ServiceWorker.t 
                             | `U_s146_parsed of ServiceWorker.t 
                             | `U_s166_redundant of ServiceWorker.t ]) union2,
                            MessagePort.t) or_ option)
                ->
                fun () ->
                  let x11914 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x11914 "data" (any_to_js x11909);
                  Ojs.set_prop_ascii x11914 "lastEventId"
                    (Ojs.string_to_js x11910);
                  Ojs.set_prop_ascii x11914 "origin"
                    (Ojs.string_to_js x11911);
                  Ojs.set_prop_ascii x11914 "ports"
                    (Ojs.list_to_js MessagePort.t_to_js x11912);
                  (match x11913 with
                   | Some x11915 ->
                       Ojs.set_prop_ascii x11914 "source"
                         (or__to_js
                            (fun
                               (x11916 :
                                 ([ `U_s42_auxiliary of Client.t 
                                  | `U_s120_nested of Client.t 
                                  | `U_s128_none of Client.t 
                                  | `U_s192_top_level of Client.t ],
                                   [ `U_s33_activated of ServiceWorker.t 
                                   | `U_s34_activating of ServiceWorker.t 
                                   | `U_s94_installed of ServiceWorker.t 
                                   | `U_s95_installing of ServiceWorker.t 
                                   | `U_s146_parsed of ServiceWorker.t 
                                   | `U_s166_redundant of ServiceWorker.t ])
                                   union2)
                               ->
                               union2_to_js
                                 (fun
                                    (x11917 :
                                      [ `U_s42_auxiliary of Client.t 
                                      | `U_s120_nested of Client.t 
                                      | `U_s128_none of Client.t 
                                      | `U_s192_top_level of Client.t ])
                                    ->
                                    match x11917 with
                                    | `U_s42_auxiliary x11918 ->
                                        Client.t_to_js x11918
                                    | `U_s120_nested x11919 ->
                                        Client.t_to_js x11919
                                    | `U_s128_none x11920 ->
                                        Client.t_to_js x11920
                                    | `U_s192_top_level x11921 ->
                                        Client.t_to_js x11921)
                                 (fun
                                    (x11922 :
                                      [ `U_s33_activated of ServiceWorker.t 
                                      | `U_s34_activating of ServiceWorker.t 
                                      | `U_s94_installed of ServiceWorker.t 
                                      | `U_s95_installing of ServiceWorker.t 
                                      | `U_s146_parsed of ServiceWorker.t 
                                      | `U_s166_redundant of ServiceWorker.t ])
                                    ->
                                    match x11922 with
                                    | `U_s33_activated x11923 ->
                                        ServiceWorker.t_to_js x11923
                                    | `U_s34_activating x11924 ->
                                        ServiceWorker.t_to_js x11924
                                    | `U_s94_installed x11925 ->
                                        ServiceWorker.t_to_js x11925
                                    | `U_s95_installing x11926 ->
                                        ServiceWorker.t_to_js x11926
                                    | `U_s146_parsed x11927 ->
                                        ServiceWorker.t_to_js x11927
                                    | `U_s166_redundant x11928 ->
                                        ServiceWorker.t_to_js x11928) x11916)
                            MessagePort.t_to_js x11915)
                   | None -> ());
                  t_of_js x11914
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:ExtendableMessageEventInit.t -> unit -> t)
      =
      fun ~type_:(x11931 : string) ->
        fun ?eventInitDict:(x11932 : ExtendableMessageEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
                 (let x11933 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11933 "push" [|(Ojs.string_to_js x11931)|]);
                  (match x11932 with
                   | Some x11934 ->
                       ignore
                         (Ojs.call x11933 "push"
                            [|(ExtendableMessageEventInit.t_to_js x11934)|])
                   | None -> ());
                  x11933))
  end
module ServiceWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11936 : Ojs.t) -> t_of_js x11936
    and t_0_to_js : t_0 -> Ojs.t = fun (x11935 : t) -> t_to_js x11935
    type tags =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11939 : Ojs.t) -> intf_of_js __tags_of_js x11939
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11937 : __tags intf) -> intf_to_js __tags_to_js x11937
    let (get_activate : 'tags this -> ExtendableEvent.t) =
      fun (x11941 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11941) "activate")
    let (set_activate : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x11943 : 'tags this) ->
        fun (x11944 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11943) "activate"
            (ExtendableEvent.t_to_js x11944)
    let (get_fetch : 'tags this -> FetchEvent.t) =
      fun (x11946 : 'tags this) ->
        FetchEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11946) "fetch")
    let (set_fetch : 'tags this -> FetchEvent.t -> unit) =
      fun (x11948 : 'tags this) ->
        fun (x11949 : FetchEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11948) "fetch"
            (FetchEvent.t_to_js x11949)
    let (get_install : 'tags this -> ExtendableEvent.t) =
      fun (x11951 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11951) "install")
    let (set_install : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x11953 : 'tags this) ->
        fun (x11954 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11953) "install"
            (ExtendableEvent.t_to_js x11954)
    let (get_message : 'tags this -> ExtendableMessageEvent.t) =
      fun (x11956 : 'tags this) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11956) "message")
    let (set_message : 'tags this -> ExtendableMessageEvent.t -> unit) =
      fun (x11958 : 'tags this) ->
        fun (x11959 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11958) "message"
            (ExtendableMessageEvent.t_to_js x11959)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x11961 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11961) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x11963 : 'tags this) ->
        fun (x11964 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11963) "messageerror"
            (MessageEvent.t_0_to_js x11964)
    let (get_notificationclick : 'tags this -> NotificationEvent.t) =
      fun (x11966 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11966)
             "notificationclick")
    let (set_notificationclick : 'tags this -> NotificationEvent.t -> unit) =
      fun (x11968 : 'tags this) ->
        fun (x11969 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11968)
            "notificationclick" (NotificationEvent.t_to_js x11969)
    let (get_notificationclose : 'tags this -> NotificationEvent.t) =
      fun (x11971 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11971)
             "notificationclose")
    let (set_notificationclose : 'tags this -> NotificationEvent.t -> unit) =
      fun (x11973 : 'tags this) ->
        fun (x11974 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11973)
            "notificationclose" (NotificationEvent.t_to_js x11974)
    let (get_push : 'tags this -> PushEvent.t) =
      fun (x11976 : 'tags this) ->
        PushEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11976) "push")
    let (set_push : 'tags this -> PushEvent.t -> unit) =
      fun (x11978 : 'tags this) ->
        fun (x11979 : PushEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11978) "push"
            (PushEvent.t_to_js x11979)
    let (create :
      activate:ExtendableEvent.t ->
        fetch:FetchEvent.t ->
          install:ExtendableEvent.t ->
            message:ExtendableMessageEvent.t ->
              messageerror:MessageEvent.t_0 ->
                notificationclick:NotificationEvent.t ->
                  notificationclose:NotificationEvent.t ->
                    push:PushEvent.t -> unit -> t)
      =
      fun ~activate:(x11981 : ExtendableEvent.t) ->
        fun ~fetch:(x11982 : FetchEvent.t) ->
          fun ~install:(x11983 : ExtendableEvent.t) ->
            fun ~message:(x11984 : ExtendableMessageEvent.t) ->
              fun ~messageerror:(x11985 : MessageEvent.t_0) ->
                fun ~notificationclick:(x11986 : NotificationEvent.t) ->
                  fun ~notificationclose:(x11987 : NotificationEvent.t) ->
                    fun ~push:(x11988 : PushEvent.t) ->
                      fun () ->
                        let x11989 = Ojs.empty_obj () in
                        Ojs.set_prop_ascii x11989 "activate"
                          (ExtendableEvent.t_to_js x11981);
                        Ojs.set_prop_ascii x11989 "fetch"
                          (FetchEvent.t_to_js x11982);
                        Ojs.set_prop_ascii x11989 "install"
                          (ExtendableEvent.t_to_js x11983);
                        Ojs.set_prop_ascii x11989 "message"
                          (ExtendableMessageEvent.t_to_js x11984);
                        Ojs.set_prop_ascii x11989 "messageerror"
                          (MessageEvent.t_0_to_js x11985);
                        Ojs.set_prop_ascii x11989 "notificationclick"
                          (NotificationEvent.t_to_js x11986);
                        Ojs.set_prop_ascii x11989 "notificationclose"
                          (NotificationEvent.t_to_js x11987);
                        Ojs.set_prop_ascii x11989 "push"
                          (PushEvent.t_to_js x11988);
                        t_of_js x11989
    let cast_from = Obj.magic
  end
module ServiceWorkerUpdateViaCache =
  struct
    type t = [ `L_s128_none  | `L_s35_all  | `L_s91_imports ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11991 : Ojs.t) ->
        let x11992 = x11991 in
        match Ojs.string_of_js x11992 with
        | "none" -> `L_s128_none
        | "all" -> `L_s35_all
        | "imports" -> `L_s91_imports
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11990 : [ `L_s128_none  | `L_s35_all  | `L_s91_imports ]) ->
        match x11990 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s91_imports -> Ojs.string_to_js "imports"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11994 : Ojs.t) -> t_of_js x11994
    and t_0_to_js : t_0 -> Ojs.t = fun (x11993 : t) -> t_to_js x11993
  end
module PushSubscriptionOptionsInit =
  struct
    type t = [ `PushSubscriptionOptionsInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11996 : Ojs.t) -> t_of_js x11996
    and t_0_to_js : t_0 -> Ojs.t = fun (x11995 : t) -> t_to_js x11995
    type tags = [ `PushSubscriptionOptionsInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11999 : Ojs.t) -> intf_of_js __tags_of_js x11999
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11997 : __tags intf) -> intf_to_js __tags_to_js x11997
    let (get_applicationServerKey :
      'tags this -> BufferSource.t or_string or_null) =
      fun (x12001 : 'tags this) ->
        or_null_of_js
          (fun (x12003 : Ojs.t) ->
             or_string_of_js BufferSource.t_of_js x12003)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12001)
             "applicationServerKey")
    let (set_applicationServerKey :
      'tags this -> BufferSource.t or_string or_null -> unit) =
      fun (x12005 : 'tags this) ->
        fun (x12006 : BufferSource.t or_string or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12005)
            "applicationServerKey"
            (or_null_to_js
               (fun (x12007 : BufferSource.t or_string) ->
                  or_string_to_js BufferSource.t_to_js x12007) x12006)
    let (get_userVisibleOnly : 'tags this -> bool) =
      fun (x12010 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12010) "userVisibleOnly")
    let (set_userVisibleOnly : 'tags this -> bool -> unit) =
      fun (x12012 : 'tags this) ->
        fun (x12013 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12012) "userVisibleOnly"
            (Ojs.bool_to_js x12013)
    let (create :
      ?applicationServerKey:BufferSource.t or_string ->
        userVisibleOnly:bool -> unit -> t)
      =
      fun ?applicationServerKey:(x12015 : BufferSource.t or_string option) ->
        fun ~userVisibleOnly:(x12016 : bool) ->
          fun () ->
            let x12017 = Ojs.empty_obj () in
            (match x12015 with
             | Some x12018 ->
                 Ojs.set_prop_ascii x12017 "applicationServerKey"
                   (or_string_to_js BufferSource.t_to_js x12018)
             | None -> ());
            Ojs.set_prop_ascii x12017 "userVisibleOnly"
              (Ojs.bool_to_js x12016);
            t_of_js x12017
    let cast_from = Obj.magic
  end
module PushSubscriptionOptions =
  struct
    type t = [ `PushSubscriptionOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12021 : Ojs.t) -> t_of_js x12021
    and t_0_to_js : t_0 -> Ojs.t = fun (x12020 : t) -> t_to_js x12020
    type tags = [ `PushSubscriptionOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12024 : Ojs.t) -> intf_of_js __tags_of_js x12024
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12022 : __tags intf) -> intf_to_js __tags_to_js x12022
    let (get_applicationServerKey : 'tags this -> ArrayBuffer.t_0 or_null) =
      fun (x12026 : 'tags this) ->
        or_null_of_js ArrayBuffer.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12026)
             "applicationServerKey")
    let (create : ?applicationServerKey:ArrayBuffer.t_0 -> unit -> t) =
      fun ?applicationServerKey:(x12029 : ArrayBuffer.t_0 option) ->
        fun () ->
          let x12030 = Ojs.empty_obj () in
          (match x12029 with
           | Some x12031 ->
               Ojs.set_prop_ascii x12030 "applicationServerKey"
                 (ArrayBuffer.t_0_to_js x12031)
           | None -> ());
          t_of_js x12030
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
             "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions") 
             [||])
  end
module PushSubscriptionJSON =
  struct
    type t = [ `PushSubscriptionJSON ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12033 : Ojs.t) -> t_of_js x12033
    and t_0_to_js : t_0 -> Ojs.t = fun (x12032 : t) -> t_to_js x12032
    type tags = [ `PushSubscriptionJSON ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12036 : Ojs.t) -> intf_of_js __tags_of_js x12036
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12034 : __tags intf) -> intf_to_js __tags_to_js x12034
    let (get_endpoint : 'tags this -> string) =
      fun (x12038 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12038) "endpoint")
    let (set_endpoint : 'tags this -> string -> unit) =
      fun (x12040 : 'tags this) ->
        fun (x12041 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12040) "endpoint"
            (Ojs.string_to_js x12041)
    let (get_expirationTime : 'tags this -> DOMTimeStamp.t or_null) =
      fun (x12043 : 'tags this) ->
        or_null_of_js DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12043) "expirationTime")
    let (set_expirationTime : 'tags this -> DOMTimeStamp.t or_null -> unit) =
      fun (x12046 : 'tags this) ->
        fun (x12047 : DOMTimeStamp.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12046) "expirationTime"
            (or_null_to_js DOMTimeStamp.t_to_js x12047)
    let (get_keys : 'tags this -> (string, string) Record.t_2) =
      fun (x12050 : 'tags this) ->
        Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12050) "keys")
    let (set_keys : 'tags this -> (string, string) Record.t_2 -> unit) =
      fun (x12054 : 'tags this) ->
        fun (x12055 : (string, string) Record.t_2) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12054) "keys"
            (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x12055)
    let (create :
      endpoint:string ->
        ?expirationTime:DOMTimeStamp.t ->
          keys:(string, string) Record.t_2 -> unit -> t)
      =
      fun ~endpoint:(x12059 : string) ->
        fun ?expirationTime:(x12060 : DOMTimeStamp.t option) ->
          fun ~keys:(x12061 : (string, string) Record.t_2) ->
            fun () ->
              let x12062 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12062 "endpoint" (Ojs.string_to_js x12059);
              (match x12060 with
               | Some x12065 ->
                   Ojs.set_prop_ascii x12062 "expirationTime"
                     (DOMTimeStamp.t_to_js x12065)
               | None -> ());
              Ojs.set_prop_ascii x12062 "keys"
                (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x12061);
              t_of_js x12062
    let cast_from = Obj.magic
  end
module PushEncryptionKeyName =
  struct
    type t = [ `L_s143_p256dh  | `L_s40_auth ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12067 : Ojs.t) ->
        let x12068 = x12067 in
        match Ojs.string_of_js x12068 with
        | "p256dh" -> `L_s143_p256dh
        | "auth" -> `L_s40_auth
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12066 : [ `L_s143_p256dh  | `L_s40_auth ]) ->
        match x12066 with
        | `L_s143_p256dh -> Ojs.string_to_js "p256dh"
        | `L_s40_auth -> Ojs.string_to_js "auth"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12070 : Ojs.t) -> t_of_js x12070
    and t_0_to_js : t_0 -> Ojs.t = fun (x12069 : t) -> t_to_js x12069
  end
module PushSubscription =
  struct
    type t = [ `PushSubscription ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12072 : Ojs.t) -> t_of_js x12072
    and t_0_to_js : t_0 -> Ojs.t = fun (x12071 : t) -> t_to_js x12071
    type tags = [ `PushSubscription ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12075 : Ojs.t) -> intf_of_js __tags_of_js x12075
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12073 : __tags intf) -> intf_to_js __tags_to_js x12073
    let (get_endpoint : 'tags this -> string) =
      fun (x12077 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12077) "endpoint")
    let (get_options : 'tags this -> PushSubscriptionOptions.t) =
      fun (x12079 : 'tags this) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12079) "options")
    let (getKey :
      'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t_0 or_null)
      =
      fun (x12082 : 'tags this) ->
        fun ~name:(x12081 : PushEncryptionKeyName.t) ->
          or_null_of_js ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x12082) "getKey"
               [|(PushEncryptionKeyName.t_to_js x12081)|])
    let (toJSON : 'tags this -> PushSubscriptionJSON.t) =
      fun (x12085 : 'tags this) ->
        PushSubscriptionJSON.t_of_js
          (Ojs.call (this_to_js Obj.magic x12085) "toJSON" [||])
    let (unsubscribe : 'tags this -> bool Promise.t_1) =
      fun (x12087 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12087) "unsubscribe" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscription") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushSubscription")
             [||])
  end
module PushPermissionState =
  struct
    type t = [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12091 : Ojs.t) ->
        let x12092 = x12091 in
        match Ojs.string_of_js x12092 with
        | "prompt" -> `L_s157_prompt
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12090 : [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]) ->
        match x12090 with
        | `L_s157_prompt -> Ojs.string_to_js "prompt"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12094 : Ojs.t) -> t_of_js x12094
    and t_0_to_js : t_0 -> Ojs.t = fun (x12093 : t) -> t_to_js x12093
  end
module PushManager =
  struct
    type t = [ `PushManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12096 : Ojs.t) -> t_of_js x12096
    and t_0_to_js : t_0 -> Ojs.t = fun (x12095 : t) -> t_to_js x12095
    type tags = [ `PushManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12099 : Ojs.t) -> intf_of_js __tags_of_js x12099
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12097 : __tags intf) -> intf_to_js __tags_to_js x12097
    let (getSubscription :
      'tags this -> PushSubscription.t or_null Promise.t_1) =
      fun (x12101 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x12103 : Ojs.t) ->
             or_null_of_js PushSubscription.t_of_js x12103)
          (Ojs.call (this_to_js Obj.magic x12101) "getSubscription" [||])
    let (permissionState :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushPermissionState.t Promise.t_1)
      =
      fun (x12108 : 'tags this) ->
        fun ?options:(x12105 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushPermissionState.t_of_js
              (let x12110 = this_to_js Obj.magic x12108 in
               Ojs.call (Ojs.get_prop_ascii x12110 "permissionState") "apply"
                 [|x12110;((let x12106 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12105 with
                             | Some x12107 ->
                                 ignore
                                   (Ojs.call x12106 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12107)|])
                             | None -> ());
                            x12106))|])
    let (subscribe :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushSubscription.t Promise.t_1)
      =
      fun (x12115 : 'tags this) ->
        fun ?options:(x12112 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushSubscription.t_of_js
              (let x12117 = this_to_js Obj.magic x12115 in
               Ojs.call (Ojs.get_prop_ascii x12117 "subscribe") "apply"
                 [|x12117;((let x12113 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12112 with
                             | Some x12114 ->
                                 ignore
                                   (Ojs.call x12113 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x12114)|])
                             | None -> ());
                            x12113))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushManager") [||])
    let (supportedContentEncodings : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "supportedContentEncodings")
  end
module GetNotificationOptions =
  struct
    type t = [ `GetNotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12121 : Ojs.t) -> t_of_js x12121
    and t_0_to_js : t_0 -> Ojs.t = fun (x12120 : t) -> t_to_js x12120
    type tags = [ `GetNotificationOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GetNotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12124 : Ojs.t) -> intf_of_js __tags_of_js x12124
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12122 : __tags intf) -> intf_to_js __tags_to_js x12122
    let (get_tag : 'tags this -> string) =
      fun (x12126 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12126) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x12128 : 'tags this) ->
        fun (x12129 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12128) "tag"
            (Ojs.string_to_js x12129)
    let (create : tag:string -> unit -> t) =
      fun ~tag:(x12131 : string) ->
        fun () ->
          let x12132 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12132 "tag" (Ojs.string_to_js x12131);
          t_of_js x12132
    let cast_from = Obj.magic
  end
module ServiceWorkerRegistration =
  struct
    type t = [ `EventTarget  | `ServiceWorkerRegistration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12134 : Ojs.t) -> t_of_js x12134
    and t_0_to_js : t_0 -> Ojs.t = fun (x12133 : t) -> t_to_js x12133
    type tags = [ `EventTarget  | `ServiceWorkerRegistration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12137 : Ojs.t) -> intf_of_js __tags_of_js x12137
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12135 : __tags intf) -> intf_to_js __tags_to_js x12135
    let (get_active : 'tags this -> ServiceWorker.t or_null) =
      fun (x12139 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12139) "active")
    let (get_installing : 'tags this -> ServiceWorker.t or_null) =
      fun (x12142 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12142) "installing")
    let (get_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x12145 : 'tags this) ->
        or_null_of_js
          (fun (x12147 : Ojs.t) ->
             fun ~this:(x12148 : t) ->
               fun ~ev:(x12149 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12147
                      [|(t_to_js x12148);(Event.t_to_js x12149)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12145) "onupdatefound")
    let (set_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x12150 : 'tags this) ->
        fun (x12151 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12150) "onupdatefound"
            (or_null_to_js
               (fun (x12152 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12153 : Ojs.t) ->
                       fun (x12154 : Ojs.t) ->
                         any_to_js
                           (x12152 ~this:(t_of_js x12153)
                              ~ev:(Event.t_of_js x12154)))) x12151)
    let (get_pushManager : 'tags this -> PushManager.t) =
      fun (x12156 : 'tags this) ->
        PushManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12156) "pushManager")
    let (get_scope : 'tags this -> string) =
      fun (x12158 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12158) "scope")
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x12160 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12160) "updateViaCache")
    let (get_waiting : 'tags this -> ServiceWorker.t or_null) =
      fun (x12162 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12162) "waiting")
    let (getNotifications :
      'tags this ->
        ?filter:GetNotificationOptions.t ->
          unit -> Notification.t list Promise.t_1)
      =
      fun (x12168 : 'tags this) ->
        fun ?filter:(x12165 : GetNotificationOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12171 : Ojs.t) ->
                 Ojs.list_of_js Notification.t_of_js x12171)
              (let x12170 = this_to_js Obj.magic x12168 in
               Ojs.call (Ojs.get_prop_ascii x12170 "getNotifications")
                 "apply"
                 [|x12170;((let x12166 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12165 with
                             | Some x12167 ->
                                 ignore
                                   (Ojs.call x12166 "push"
                                      [|(GetNotificationOptions.t_to_js
                                           x12167)|])
                             | None -> ());
                            x12166))|])
    let (showNotification :
      'tags this ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x12177 : 'tags this) ->
        fun ~title:(x12173 : string) ->
          fun ?options:(x12174 : NotificationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x12179 = this_to_js Obj.magic x12177 in
                 Ojs.call (Ojs.get_prop_ascii x12179 "showNotification")
                   "apply"
                   [|x12179;((let x12175 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12175 "push"
                                   [|(Ojs.string_to_js x12173)|]);
                              (match x12174 with
                               | Some x12176 ->
                                   ignore
                                     (Ojs.call x12175 "push"
                                        [|(NotificationOptions.t_to_js x12176)|])
                               | None -> ());
                              x12175))|])
    let (unregister : 'tags this -> bool Promise.t_1) =
      fun (x12181 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x12181) "unregister" [||])
    let (update : 'tags this -> unit Promise.t_1) =
      fun (x12184 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12184) "update" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12195 : 'tags this) ->
        fun ~type_:(x12187 : 'K) ->
          fun ~listener:(x12188 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12189 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12197 = this_to_js Obj.magic x12195 in
                   Ojs.call (Ojs.get_prop_ascii x12197 "addEventListener")
                     "apply"
                     [|x12197;((let x12190 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12190 "push"
                                     [|(Obj.magic x12187)|]);
                                ignore
                                  (Ojs.call x12190 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12193 : Ojs.t) ->
                                             fun (x12194 : Ojs.t) ->
                                               any_to_js
                                                 (x12188
                                                    ~this:(t_of_js x12193)
                                                    ~ev:(any_of_js x12194))))|]);
                                (match x12189 with
                                 | Some x12191 ->
                                     ignore
                                       (Ojs.call x12190 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12191)|])
                                 | None -> ());
                                x12190))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12204 : 'tags this) ->
        fun ~type_:(x12198 : string) ->
          fun ~listener:(x12199 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12200 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12206 = this_to_js Obj.magic x12204 in
                   Ojs.call (Ojs.get_prop_ascii x12206 "addEventListener")
                     "apply"
                     [|x12206;((let x12201 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12201 "push"
                                     [|(Ojs.string_to_js x12198)|]);
                                ignore
                                  (Ojs.call x12201 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12199)|]);
                                (match x12200 with
                                 | Some x12202 ->
                                     ignore
                                       (Ojs.call x12201 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12202)|])
                                 | None -> ());
                                x12201))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12215 : 'tags this) ->
        fun ~type_:(x12207 : 'K) ->
          fun ~listener:(x12208 : this:t -> ev:any -> any) ->
            fun ?options:(x12209 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12217 = this_to_js Obj.magic x12215 in
                   Ojs.call (Ojs.get_prop_ascii x12217 "removeEventListener")
                     "apply"
                     [|x12217;((let x12210 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12210 "push"
                                     [|(Obj.magic x12207)|]);
                                ignore
                                  (Ojs.call x12210 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12213 : Ojs.t) ->
                                             fun (x12214 : Ojs.t) ->
                                               any_to_js
                                                 (x12208
                                                    ~this:(t_of_js x12213)
                                                    ~ev:(any_of_js x12214))))|]);
                                (match x12209 with
                                 | Some x12211 ->
                                     ignore
                                       (Ojs.call x12210 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12211)|])
                                 | None -> ());
                                x12210))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12224 : 'tags this) ->
        fun ~type_:(x12218 : string) ->
          fun ~listener:(x12219 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x12220 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12226 = this_to_js Obj.magic x12224 in
                   Ojs.call (Ojs.get_prop_ascii x12226 "removeEventListener")
                     "apply"
                     [|x12226;((let x12221 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12221 "push"
                                     [|(Ojs.string_to_js x12218)|]);
                                ignore
                                  (Ojs.call x12221 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12219)|]);
                                (match x12220 with
                                 | Some x12222 ->
                                     ignore
                                       (Ojs.call x12221 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12222)|])
                                 | None -> ());
                                x12221))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration") 
             [||])
  end
module VisibilityState =
  struct
    type t = [ `L_s205_visible  | `L_s83_hidden ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12228 : Ojs.t) ->
        let x12229 = x12228 in
        match Ojs.string_of_js x12229 with
        | "visible" -> `L_s205_visible
        | "hidden" -> `L_s83_hidden
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12227 : [ `L_s205_visible  | `L_s83_hidden ]) ->
        match x12227 with
        | `L_s205_visible -> Ojs.string_to_js "visible"
        | `L_s83_hidden -> Ojs.string_to_js "hidden"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12231 : Ojs.t) -> t_of_js x12231
    and t_0_to_js : t_0 -> Ojs.t = fun (x12230 : t) -> t_to_js x12230
  end
module WindowClient =
  struct
    type t = [ `Client  | `WindowClient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12233 : Ojs.t) -> t_of_js x12233
    and t_0_to_js : t_0 -> Ojs.t = fun (x12232 : t) -> t_to_js x12232
    type tags = [ `Client  | `WindowClient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WindowClient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12236 : Ojs.t) -> intf_of_js __tags_of_js x12236
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12234 : __tags intf) -> intf_to_js __tags_to_js x12234
    let (get_focused : 'tags this -> bool) =
      fun (x12238 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12238) "focused")
    let (get_visibilityState : 'tags this -> VisibilityState.t) =
      fun (x12240 : 'tags this) ->
        VisibilityState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12240) "visibilityState")
    let (focus : 'tags this -> t Promise.t_1) =
      fun (x12242 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x12242) "focus" [||])
    let (navigate :
      'tags this -> url:URL.t or_string -> t or_null Promise.t_1) =
      fun (x12247 : 'tags this) ->
        fun ~url:(x12245 : URL.t or_string) ->
          Promise.t_1_of_js
            (fun (x12249 : Ojs.t) -> or_null_of_js t_of_js x12249)
            (Ojs.call (this_to_js Obj.magic x12247) "navigate"
               [|(or_string_to_js URL.t_to_js x12245)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WindowClient")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WindowClient") [||])
  end
module ClientQueryOptions =
  struct
    type t = [ `ClientQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12252 : Ojs.t) -> t_of_js x12252
    and t_0_to_js : t_0 -> Ojs.t = fun (x12251 : t) -> t_to_js x12251
    type tags = [ `ClientQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12255 : Ojs.t) -> intf_of_js __tags_of_js x12255
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12253 : __tags intf) -> intf_to_js __tags_to_js x12253
    let (get_includeUncontrolled : 'tags this -> bool) =
      fun (x12257 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12257)
             "includeUncontrolled")
    let (set_includeUncontrolled : 'tags this -> bool -> unit) =
      fun (x12259 : 'tags this) ->
        fun (x12260 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12259)
            "includeUncontrolled" (Ojs.bool_to_js x12260)
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x12262 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12262) "type")
    let (set_type : 'tags this -> ClientTypes.t -> unit) =
      fun (x12264 : 'tags this) ->
        fun (x12265 : ClientTypes.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12264) "type"
            (ClientTypes.t_to_js x12265)
    let (create :
      includeUncontrolled:bool -> type_:ClientTypes.t -> unit -> t) =
      fun ~includeUncontrolled:(x12267 : bool) ->
        fun ~type_:(x12268 : ClientTypes.t) ->
          fun () ->
            let x12269 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x12269 "includeUncontrolled"
              (Ojs.bool_to_js x12267);
            Ojs.set_prop_ascii x12269 "type" (ClientTypes.t_to_js x12268);
            t_of_js x12269
    let cast_from = Obj.magic
  end
module Clients =
  struct
    type t = [ `Clients ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12271 : Ojs.t) -> t_of_js x12271
    and t_0_to_js : t_0 -> Ojs.t = fun (x12270 : t) -> t_to_js x12270
    type tags = [ `Clients ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12274 : Ojs.t) -> intf_of_js __tags_of_js x12274
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12272 : __tags intf) -> intf_to_js __tags_to_js x12272
    let (claim : 'tags this -> unit Promise.t_1) =
      fun (x12276 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12276) "claim" [||])
    let (get_ : 'tags this -> id:string -> Client.t or_undefined Promise.t_1)
      =
      fun (x12280 : 'tags this) ->
        fun ~id:(x12279 : string) ->
          Promise.t_1_of_js
            (fun (x12282 : Ojs.t) -> or_undefined_of_js Client.t_of_js x12282)
            (Ojs.call (this_to_js Obj.magic x12280) "get"
               [|(Ojs.string_to_js x12279)|])
    let (matchAll :
      'tags this -> ?options:'T -> unit -> any list Promise.t_1) =
      fun (x12287 : 'tags this) ->
        fun ?options:(x12284 : 'T option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12290 : Ojs.t) -> Ojs.list_of_js any_of_js x12290)
              (let x12289 = this_to_js Obj.magic x12287 in
               Ojs.call (Ojs.get_prop_ascii x12289 "matchAll") "apply"
                 [|x12289;((let x12285 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12284 with
                             | Some x12286 ->
                                 ignore
                                   (Ojs.call x12285 "push"
                                      [|(Obj.magic x12286)|])
                             | None -> ());
                            x12285))|])
    let (openWindow :
      'tags this -> url:URL.t or_string -> WindowClient.t or_null Promise.t_1)
      =
      fun (x12294 : 'tags this) ->
        fun ~url:(x12292 : URL.t or_string) ->
          Promise.t_1_of_js
            (fun (x12296 : Ojs.t) ->
               or_null_of_js WindowClient.t_of_js x12296)
            (Ojs.call (this_to_js Obj.magic x12294) "openWindow"
               [|(or_string_to_js URL.t_to_js x12292)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Clients")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Clients") [||])
  end
module ServiceWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12299 : Ojs.t) -> t_of_js x12299
    and t_0_to_js : t_0 -> Ojs.t = fun (x12298 : t) -> t_to_js x12298
    type tags =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12302 : Ojs.t) -> intf_of_js __tags_of_js x12302
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12300 : __tags intf) -> intf_to_js __tags_to_js x12300
    let (get_clients : 'tags this -> Clients.t) =
      fun (x12304 : 'tags this) ->
        Clients.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12304) "clients")
    let (get_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null) =
      fun (x12306 : 'tags this) ->
        or_null_of_js
          (fun (x12308 : Ojs.t) ->
             fun ~this:(x12309 : t) ->
               fun ~ev:(x12310 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x12308
                      [|(t_to_js x12309);(ExtendableEvent.t_to_js x12310)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12306) "onactivate")
    let (set_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null -> unit)
      =
      fun (x12311 : 'tags this) ->
        fun (x12312 : (this:t -> ev:ExtendableEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12311) "onactivate"
            (or_null_to_js
               (fun (x12313 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12314 : Ojs.t) ->
                       fun (x12315 : Ojs.t) ->
                         any_to_js
                           (x12313 ~this:(t_of_js x12314)
                              ~ev:(ExtendableEvent.t_of_js x12315)))) x12312)
    let (get_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) or_null) =
      fun (x12317 : 'tags this) ->
        or_null_of_js
          (fun (x12319 : Ojs.t) ->
             fun ~this:(x12320 : t) ->
               fun ~ev:(x12321 : FetchEvent.t) ->
                 any_of_js
                   (Ojs.apply x12319
                      [|(t_to_js x12320);(FetchEvent.t_to_js x12321)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12317) "onfetch")
    let (set_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) or_null -> unit) =
      fun (x12322 : 'tags this) ->
        fun (x12323 : (this:t -> ev:FetchEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12322) "onfetch"
            (or_null_to_js
               (fun (x12324 : this:t -> ev:FetchEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12325 : Ojs.t) ->
                       fun (x12326 : Ojs.t) ->
                         any_to_js
                           (x12324 ~this:(t_of_js x12325)
                              ~ev:(FetchEvent.t_of_js x12326)))) x12323)
    let (get_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null) =
      fun (x12328 : 'tags this) ->
        or_null_of_js
          (fun (x12330 : Ojs.t) ->
             fun ~this:(x12331 : t) ->
               fun ~ev:(x12332 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x12330
                      [|(t_to_js x12331);(ExtendableEvent.t_to_js x12332)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12328) "oninstall")
    let (set_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null -> unit)
      =
      fun (x12333 : 'tags this) ->
        fun (x12334 : (this:t -> ev:ExtendableEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12333) "oninstall"
            (or_null_to_js
               (fun (x12335 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12336 : Ojs.t) ->
                       fun (x12337 : Ojs.t) ->
                         any_to_js
                           (x12335 ~this:(t_of_js x12336)
                              ~ev:(ExtendableEvent.t_of_js x12337)))) x12334)
    let (get_onmessage :
      'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) or_null) =
      fun (x12339 : 'tags this) ->
        or_null_of_js
          (fun (x12341 : Ojs.t) ->
             fun ~this:(x12342 : t) ->
               fun ~ev:(x12343 : ExtendableMessageEvent.t) ->
                 any_of_js
                   (Ojs.apply x12341
                      [|(t_to_js x12342);(ExtendableMessageEvent.t_to_js
                                            x12343)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12339) "onmessage")
    let (set_onmessage :
      'tags this ->
        (this:t -> ev:ExtendableMessageEvent.t -> any) or_null -> unit)
      =
      fun (x12344 : 'tags this) ->
        fun (x12345 : (this:t -> ev:ExtendableMessageEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12344) "onmessage"
            (or_null_to_js
               (fun (x12346 : this:t -> ev:ExtendableMessageEvent.t -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x12347 : Ojs.t) ->
                       fun (x12348 : Ojs.t) ->
                         any_to_js
                           (x12346 ~this:(t_of_js x12347)
                              ~ev:(ExtendableMessageEvent.t_of_js x12348))))
               x12345)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x12350 : 'tags this) ->
        or_null_of_js
          (fun (x12352 : Ojs.t) ->
             fun ~this:(x12353 : t) ->
               fun ~ev:(x12354 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12352
                      [|(t_to_js x12353);(MessageEvent.t_0_to_js x12354)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12350) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x12355 : 'tags this) ->
        fun (x12356 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12355) "onmessageerror"
            (or_null_to_js
               (fun (x12357 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12358 : Ojs.t) ->
                       fun (x12359 : Ojs.t) ->
                         any_to_js
                           (x12357 ~this:(t_of_js x12358)
                              ~ev:(MessageEvent.t_0_of_js x12359)))) x12356)
    let (get_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null) =
      fun (x12361 : 'tags this) ->
        or_null_of_js
          (fun (x12363 : Ojs.t) ->
             fun ~this:(x12364 : t) ->
               fun ~ev:(x12365 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x12363
                      [|(t_to_js x12364);(NotificationEvent.t_to_js x12365)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12361)
             "onnotificationclick")
    let (set_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null -> unit)
      =
      fun (x12366 : 'tags this) ->
        fun (x12367 : (this:t -> ev:NotificationEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12366)
            "onnotificationclick"
            (or_null_to_js
               (fun (x12368 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12369 : Ojs.t) ->
                       fun (x12370 : Ojs.t) ->
                         any_to_js
                           (x12368 ~this:(t_of_js x12369)
                              ~ev:(NotificationEvent.t_of_js x12370))))
               x12367)
    let (get_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null) =
      fun (x12372 : 'tags this) ->
        or_null_of_js
          (fun (x12374 : Ojs.t) ->
             fun ~this:(x12375 : t) ->
               fun ~ev:(x12376 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x12374
                      [|(t_to_js x12375);(NotificationEvent.t_to_js x12376)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12372)
             "onnotificationclose")
    let (set_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null -> unit)
      =
      fun (x12377 : 'tags this) ->
        fun (x12378 : (this:t -> ev:NotificationEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12377)
            "onnotificationclose"
            (or_null_to_js
               (fun (x12379 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12380 : Ojs.t) ->
                       fun (x12381 : Ojs.t) ->
                         any_to_js
                           (x12379 ~this:(t_of_js x12380)
                              ~ev:(NotificationEvent.t_of_js x12381))))
               x12378)
    let (get_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) or_null) =
      fun (x12383 : 'tags this) ->
        or_null_of_js
          (fun (x12385 : Ojs.t) ->
             fun ~this:(x12386 : t) ->
               fun ~ev:(x12387 : PushEvent.t) ->
                 any_of_js
                   (Ojs.apply x12385
                      [|(t_to_js x12386);(PushEvent.t_to_js x12387)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12383) "onpush")
    let (set_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) or_null -> unit) =
      fun (x12388 : 'tags this) ->
        fun (x12389 : (this:t -> ev:PushEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12388) "onpush"
            (or_null_to_js
               (fun (x12390 : this:t -> ev:PushEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12391 : Ojs.t) ->
                       fun (x12392 : Ojs.t) ->
                         any_to_js
                           (x12390 ~this:(t_of_js x12391)
                              ~ev:(PushEvent.t_of_js x12392)))) x12389)
    let (get_registration : 'tags this -> ServiceWorkerRegistration.t) =
      fun (x12394 : 'tags this) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12394) "registration")
    let (skipWaiting : 'tags this -> unit Promise.t_1) =
      fun (x12396 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x12396) "skipWaiting" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12407 : 'tags this) ->
        fun ~type_:(x12399 : 'K) ->
          fun ~listener:(x12400 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12401 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12409 = this_to_js Obj.magic x12407 in
                   Ojs.call (Ojs.get_prop_ascii x12409 "addEventListener")
                     "apply"
                     [|x12409;((let x12402 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12402 "push"
                                     [|(Obj.magic x12399)|]);
                                ignore
                                  (Ojs.call x12402 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12405 : Ojs.t) ->
                                             fun (x12406 : Ojs.t) ->
                                               any_to_js
                                                 (x12400
                                                    ~this:(t_of_js x12405)
                                                    ~ev:(any_of_js x12406))))|]);
                                (match x12401 with
                                 | Some x12403 ->
                                     ignore
                                       (Ojs.call x12402 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12403)|])
                                 | None -> ());
                                x12402))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12416 : 'tags this) ->
        fun ~type_:(x12410 : string) ->
          fun ~listener:(x12411 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12412 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12418 = this_to_js Obj.magic x12416 in
                   Ojs.call (Ojs.get_prop_ascii x12418 "addEventListener")
                     "apply"
                     [|x12418;((let x12413 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12413 "push"
                                     [|(Ojs.string_to_js x12410)|]);
                                ignore
                                  (Ojs.call x12413 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12411)|]);
                                (match x12412 with
                                 | Some x12414 ->
                                     ignore
                                       (Ojs.call x12413 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12414)|])
                                 | None -> ());
                                x12413))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12427 : 'tags this) ->
        fun ~type_:(x12419 : 'K) ->
          fun ~listener:(x12420 : this:t -> ev:any -> any) ->
            fun ?options:(x12421 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12429 = this_to_js Obj.magic x12427 in
                   Ojs.call (Ojs.get_prop_ascii x12429 "removeEventListener")
                     "apply"
                     [|x12429;((let x12422 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12422 "push"
                                     [|(Obj.magic x12419)|]);
                                ignore
                                  (Ojs.call x12422 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12425 : Ojs.t) ->
                                             fun (x12426 : Ojs.t) ->
                                               any_to_js
                                                 (x12420
                                                    ~this:(t_of_js x12425)
                                                    ~ev:(any_of_js x12426))))|]);
                                (match x12421 with
                                 | Some x12423 ->
                                     ignore
                                       (Ojs.call x12422 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12423)|])
                                 | None -> ());
                                x12422))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12436 : 'tags this) ->
        fun ~type_:(x12430 : string) ->
          fun ~listener:(x12431 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x12432 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12438 = this_to_js Obj.magic x12436 in
                   Ojs.call (Ojs.get_prop_ascii x12438 "removeEventListener")
                     "apply"
                     [|x12438;((let x12433 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12433 "push"
                                     [|(Ojs.string_to_js x12430)|]);
                                ignore
                                  (Ojs.call x12433 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12431)|]);
                                (match x12432 with
                                 | Some x12434 ->
                                     ignore
                                       (Ojs.call x12433 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12434)|])
                                 | None -> ());
                                x12433))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12440 : Ojs.t) -> t_of_js x12440
    and t_0_to_js : t_0 -> Ojs.t = fun (x12439 : t) -> t_to_js x12439
    type tags = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12443 : Ojs.t) -> intf_of_js __tags_of_js x12443
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12441 : __tags intf) -> intf_to_js __tags_to_js x12441
    let (get_statechange : 'tags this -> Event.t) =
      fun (x12445 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12445) "statechange")
    let (set_statechange : 'tags this -> Event.t -> unit) =
      fun (x12447 : 'tags this) ->
        fun (x12448 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12447) "statechange"
            (Event.t_to_js x12448)
    let (create : statechange:Event.t -> unit -> t) =
      fun ~statechange:(x12450 : Event.t) ->
        fun () ->
          let x12451 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12451 "statechange" (Event.t_to_js x12450);
          t_of_js x12451
    let cast_from = Obj.magic
  end
module ServiceWorkerContainerEventMap =
  struct
    type t = [ `ServiceWorkerContainerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12453 : Ojs.t) -> t_of_js x12453
    and t_0_to_js : t_0 -> Ojs.t = fun (x12452 : t) -> t_to_js x12452
    type tags = [ `ServiceWorkerContainerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12456 : Ojs.t) -> intf_of_js __tags_of_js x12456
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12454 : __tags intf) -> intf_to_js __tags_to_js x12454
    let (get_controllerchange : 'tags this -> Event.t) =
      fun (x12458 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12458)
             "controllerchange")
    let (set_controllerchange : 'tags this -> Event.t -> unit) =
      fun (x12460 : 'tags this) ->
        fun (x12461 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12460) "controllerchange"
            (Event.t_to_js x12461)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x12463 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12463) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12465 : 'tags this) ->
        fun (x12466 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12465) "message"
            (MessageEvent.t_0_to_js x12466)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x12468 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12468) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12470 : 'tags this) ->
        fun (x12471 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12470) "messageerror"
            (MessageEvent.t_0_to_js x12471)
    let (create :
      controllerchange:Event.t ->
        message:MessageEvent.t_0 ->
          messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~controllerchange:(x12473 : Event.t) ->
        fun ~message:(x12474 : MessageEvent.t_0) ->
          fun ~messageerror:(x12475 : MessageEvent.t_0) ->
            fun () ->
              let x12476 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12476 "controllerchange"
                (Event.t_to_js x12473);
              Ojs.set_prop_ascii x12476 "message"
                (MessageEvent.t_0_to_js x12474);
              Ojs.set_prop_ascii x12476 "messageerror"
                (MessageEvent.t_0_to_js x12475);
              t_of_js x12476
    let cast_from = Obj.magic
  end
module RegistrationOptions =
  struct
    type t = [ `RegistrationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12478 : Ojs.t) -> t_of_js x12478
    and t_0_to_js : t_0 -> Ojs.t = fun (x12477 : t) -> t_to_js x12477
    type tags = [ `RegistrationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12481 : Ojs.t) -> intf_of_js __tags_of_js x12481
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12479 : __tags intf) -> intf_to_js __tags_to_js x12479
    let (get_scope : 'tags this -> string) =
      fun (x12483 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12483) "scope")
    let (set_scope : 'tags this -> string -> unit) =
      fun (x12485 : 'tags this) ->
        fun (x12486 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12485) "scope"
            (Ojs.string_to_js x12486)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x12488 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12488) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x12490 : 'tags this) ->
        fun (x12491 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12490) "type"
            (WorkerType.t_to_js x12491)
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x12493 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12493) "updateViaCache")
    let (set_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t -> unit) =
      fun (x12495 : 'tags this) ->
        fun (x12496 : ServiceWorkerUpdateViaCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12495) "updateViaCache"
            (ServiceWorkerUpdateViaCache.t_to_js x12496)
    let (create :
      scope:string ->
        type_:WorkerType.t ->
          updateViaCache:ServiceWorkerUpdateViaCache.t -> unit -> t)
      =
      fun ~scope:(x12498 : string) ->
        fun ~type_:(x12499 : WorkerType.t) ->
          fun ~updateViaCache:(x12500 : ServiceWorkerUpdateViaCache.t) ->
            fun () ->
              let x12501 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12501 "scope" (Ojs.string_to_js x12498);
              Ojs.set_prop_ascii x12501 "type" (WorkerType.t_to_js x12499);
              Ojs.set_prop_ascii x12501 "updateViaCache"
                (ServiceWorkerUpdateViaCache.t_to_js x12500);
              t_of_js x12501
    let cast_from = Obj.magic
  end
module ServiceWorkerContainer =
  struct
    type t = [ `EventTarget  | `ServiceWorkerContainer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12503 : Ojs.t) -> t_of_js x12503
    and t_0_to_js : t_0 -> Ojs.t = fun (x12502 : t) -> t_to_js x12502
    type tags = [ `EventTarget  | `ServiceWorkerContainer ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12506 : Ojs.t) -> intf_of_js __tags_of_js x12506
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12504 : __tags intf) -> intf_to_js __tags_to_js x12504
    let (get_controller : 'tags this -> ServiceWorker.t or_null) =
      fun (x12508 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12508) "controller")
    let (get_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x12511 : 'tags this) ->
        or_null_of_js
          (fun (x12513 : Ojs.t) ->
             fun ~this:(x12514 : t) ->
               fun ~ev:(x12515 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12513
                      [|(t_to_js x12514);(Event.t_to_js x12515)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12511)
             "oncontrollerchange")
    let (set_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x12516 : 'tags this) ->
        fun (x12517 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12516)
            "oncontrollerchange"
            (or_null_to_js
               (fun (x12518 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12519 : Ojs.t) ->
                       fun (x12520 : Ojs.t) ->
                         any_to_js
                           (x12518 ~this:(t_of_js x12519)
                              ~ev:(Event.t_of_js x12520)))) x12517)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x12522 : 'tags this) ->
        or_null_of_js
          (fun (x12524 : Ojs.t) ->
             fun ~this:(x12525 : t) ->
               fun ~ev:(x12526 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12524
                      [|(t_to_js x12525);(MessageEvent.t_0_to_js x12526)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12522) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x12527 : 'tags this) ->
        fun (x12528 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12527) "onmessage"
            (or_null_to_js
               (fun (x12529 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12530 : Ojs.t) ->
                       fun (x12531 : Ojs.t) ->
                         any_to_js
                           (x12529 ~this:(t_of_js x12530)
                              ~ev:(MessageEvent.t_0_of_js x12531)))) x12528)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x12533 : 'tags this) ->
        or_null_of_js
          (fun (x12535 : Ojs.t) ->
             fun ~this:(x12536 : t) ->
               fun ~ev:(x12537 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12535
                      [|(t_to_js x12536);(MessageEvent.t_0_to_js x12537)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12533) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x12538 : 'tags this) ->
        fun (x12539 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12538) "onmessageerror"
            (or_null_to_js
               (fun (x12540 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12541 : Ojs.t) ->
                       fun (x12542 : Ojs.t) ->
                         any_to_js
                           (x12540 ~this:(t_of_js x12541)
                              ~ev:(MessageEvent.t_0_of_js x12542)))) x12539)
    let (get_ready : 'tags this -> ServiceWorkerRegistration.t Promise.t_1) =
      fun (x12544 : 'tags this) ->
        Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12544) "ready")
    let (getRegistration :
      'tags this ->
        ?clientURL:URL.t or_string ->
          unit -> ServiceWorkerRegistration.t or_undefined Promise.t_1)
      =
      fun (x12551 : 'tags this) ->
        fun ?clientURL:(x12547 : URL.t or_string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x12554 : Ojs.t) ->
                 or_undefined_of_js ServiceWorkerRegistration.t_of_js x12554)
              (let x12553 = this_to_js Obj.magic x12551 in
               Ojs.call (Ojs.get_prop_ascii x12553 "getRegistration") "apply"
                 [|x12553;((let x12548 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12547 with
                             | Some x12549 ->
                                 ignore
                                   (Ojs.call x12548 "push"
                                      [|(or_string_to_js URL.t_to_js x12549)|])
                             | None -> ());
                            x12548))|])
    let (getRegistrations :
      'tags this -> ServiceWorkerRegistration.t list Promise.t_1) =
      fun (x12556 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x12558 : Ojs.t) ->
             Ojs.list_of_js ServiceWorkerRegistration.t_of_js x12558)
          (Ojs.call (this_to_js Obj.magic x12556) "getRegistrations" [||])
    let (register :
      'tags this ->
        scriptURL:URL.t or_string ->
          ?options:RegistrationOptions.t ->
            unit -> ServiceWorkerRegistration.t Promise.t_1)
      =
      fun (x12565 : 'tags this) ->
        fun ~scriptURL:(x12560 : URL.t or_string) ->
          fun ?options:(x12561 : RegistrationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
                (let x12567 = this_to_js Obj.magic x12565 in
                 Ojs.call (Ojs.get_prop_ascii x12567 "register") "apply"
                   [|x12567;((let x12562 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12562 "push"
                                   [|(or_string_to_js URL.t_to_js x12560)|]);
                              (match x12561 with
                               | Some x12563 ->
                                   ignore
                                     (Ojs.call x12562 "push"
                                        [|(RegistrationOptions.t_to_js x12563)|])
                               | None -> ());
                              x12562))|])
    let (startMessages : 'tags this -> unit) =
      fun (x12569 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12569) "startMessages" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12579 : 'tags this) ->
        fun ~type_:(x12571 : 'K) ->
          fun ~listener:(x12572 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12573 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12581 = this_to_js Obj.magic x12579 in
                   Ojs.call (Ojs.get_prop_ascii x12581 "addEventListener")
                     "apply"
                     [|x12581;((let x12574 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12574 "push"
                                     [|(Obj.magic x12571)|]);
                                ignore
                                  (Ojs.call x12574 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12577 : Ojs.t) ->
                                             fun (x12578 : Ojs.t) ->
                                               any_to_js
                                                 (x12572
                                                    ~this:(t_of_js x12577)
                                                    ~ev:(any_of_js x12578))))|]);
                                (match x12573 with
                                 | Some x12575 ->
                                     ignore
                                       (Ojs.call x12574 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12575)|])
                                 | None -> ());
                                x12574))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12588 : 'tags this) ->
        fun ~type_:(x12582 : string) ->
          fun ~listener:(x12583 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12584 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12590 = this_to_js Obj.magic x12588 in
                   Ojs.call (Ojs.get_prop_ascii x12590 "addEventListener")
                     "apply"
                     [|x12590;((let x12585 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12585 "push"
                                     [|(Ojs.string_to_js x12582)|]);
                                ignore
                                  (Ojs.call x12585 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12583)|]);
                                (match x12584 with
                                 | Some x12586 ->
                                     ignore
                                       (Ojs.call x12585 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12586)|])
                                 | None -> ());
                                x12585))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12599 : 'tags this) ->
        fun ~type_:(x12591 : 'K) ->
          fun ~listener:(x12592 : this:t -> ev:any -> any) ->
            fun ?options:(x12593 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12601 = this_to_js Obj.magic x12599 in
                   Ojs.call (Ojs.get_prop_ascii x12601 "removeEventListener")
                     "apply"
                     [|x12601;((let x12594 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12594 "push"
                                     [|(Obj.magic x12591)|]);
                                ignore
                                  (Ojs.call x12594 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12597 : Ojs.t) ->
                                             fun (x12598 : Ojs.t) ->
                                               any_to_js
                                                 (x12592
                                                    ~this:(t_of_js x12597)
                                                    ~ev:(any_of_js x12598))))|]);
                                (match x12593 with
                                 | Some x12595 ->
                                     ignore
                                       (Ojs.call x12594 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12595)|])
                                 | None -> ());
                                x12594))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12608 : 'tags this) ->
        fun ~type_:(x12602 : string) ->
          fun ~listener:(x12603 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x12604 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12610 = this_to_js Obj.magic x12608 in
                   Ojs.call (Ojs.get_prop_ascii x12610 "removeEventListener")
                     "apply"
                     [|x12610;((let x12605 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12605 "push"
                                     [|(Ojs.string_to_js x12602)|]);
                                ignore
                                  (Ojs.call x12605 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12603)|]);
                                (match x12604 with
                                 | Some x12606 ->
                                     ignore
                                       (Ojs.call x12605 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12606)|])
                                 | None -> ());
                                x12605))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer") 
             [||])
  end
module SecurityPolicyViolationEventDisposition =
  struct
    type t = [ `L_s169_report  | `L_s66_enforce ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12612 : Ojs.t) ->
        let x12613 = x12612 in
        match Ojs.string_of_js x12613 with
        | "report" -> `L_s169_report
        | "enforce" -> `L_s66_enforce
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12611 : [ `L_s169_report  | `L_s66_enforce ]) ->
        match x12611 with
        | `L_s169_report -> Ojs.string_to_js "report"
        | `L_s66_enforce -> Ojs.string_to_js "enforce"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12615 : Ojs.t) -> t_of_js x12615
    and t_0_to_js : t_0 -> Ojs.t = fun (x12614 : t) -> t_to_js x12614
  end
module SecurityPolicyViolationEventInit =
  struct
    type t = [ `EventInit  | `SecurityPolicyViolationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12617 : Ojs.t) -> t_of_js x12617
    and t_0_to_js : t_0 -> Ojs.t = fun (x12616 : t) -> t_to_js x12616
    type tags = [ `EventInit  | `SecurityPolicyViolationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12620 : Ojs.t) -> intf_of_js __tags_of_js x12620
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12618 : __tags intf) -> intf_to_js __tags_to_js x12618
    let (get_blockedURI : 'tags this -> string) =
      fun (x12622 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12622) "blockedURI")
    let (set_blockedURI : 'tags this -> string -> unit) =
      fun (x12624 : 'tags this) ->
        fun (x12625 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12624) "blockedURI"
            (Ojs.string_to_js x12625)
    let (get_columnNumber : 'tags this -> float) =
      fun (x12627 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12627) "columnNumber")
    let (set_columnNumber : 'tags this -> float -> unit) =
      fun (x12629 : 'tags this) ->
        fun (x12630 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12629) "columnNumber"
            (Ojs.float_to_js x12630)
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x12632 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12632) "disposition")
    let (set_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t -> unit) =
      fun (x12634 : 'tags this) ->
        fun (x12635 : SecurityPolicyViolationEventDisposition.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12634) "disposition"
            (SecurityPolicyViolationEventDisposition.t_to_js x12635)
    let (get_documentURI : 'tags this -> string) =
      fun (x12637 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12637) "documentURI")
    let (set_documentURI : 'tags this -> string -> unit) =
      fun (x12639 : 'tags this) ->
        fun (x12640 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12639) "documentURI"
            (Ojs.string_to_js x12640)
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x12642 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12642)
             "effectiveDirective")
    let (set_effectiveDirective : 'tags this -> string -> unit) =
      fun (x12644 : 'tags this) ->
        fun (x12645 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12644)
            "effectiveDirective" (Ojs.string_to_js x12645)
    let (get_lineNumber : 'tags this -> float) =
      fun (x12647 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12647) "lineNumber")
    let (set_lineNumber : 'tags this -> float -> unit) =
      fun (x12649 : 'tags this) ->
        fun (x12650 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12649) "lineNumber"
            (Ojs.float_to_js x12650)
    let (get_originalPolicy : 'tags this -> string) =
      fun (x12652 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12652) "originalPolicy")
    let (set_originalPolicy : 'tags this -> string -> unit) =
      fun (x12654 : 'tags this) ->
        fun (x12655 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12654) "originalPolicy"
            (Ojs.string_to_js x12655)
    let (get_referrer : 'tags this -> string) =
      fun (x12657 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12657) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x12659 : 'tags this) ->
        fun (x12660 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12659) "referrer"
            (Ojs.string_to_js x12660)
    let (get_sample : 'tags this -> string) =
      fun (x12662 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12662) "sample")
    let (set_sample : 'tags this -> string -> unit) =
      fun (x12664 : 'tags this) ->
        fun (x12665 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12664) "sample"
            (Ojs.string_to_js x12665)
    let (get_sourceFile : 'tags this -> string) =
      fun (x12667 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12667) "sourceFile")
    let (set_sourceFile : 'tags this -> string -> unit) =
      fun (x12669 : 'tags this) ->
        fun (x12670 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12669) "sourceFile"
            (Ojs.string_to_js x12670)
    let (get_statusCode : 'tags this -> float) =
      fun (x12672 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12672) "statusCode")
    let (set_statusCode : 'tags this -> float -> unit) =
      fun (x12674 : 'tags this) ->
        fun (x12675 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12674) "statusCode"
            (Ojs.float_to_js x12675)
    let (get_violatedDirective : 'tags this -> string) =
      fun (x12677 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12677)
             "violatedDirective")
    let (set_violatedDirective : 'tags this -> string -> unit) =
      fun (x12679 : 'tags this) ->
        fun (x12680 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12679)
            "violatedDirective" (Ojs.string_to_js x12680)
    let (create :
      blockedURI:string ->
        columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                lineNumber:float ->
                  originalPolicy:string ->
                    referrer:string ->
                      sample:string ->
                        sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ~blockedURI:(x12682 : string) ->
        fun ~columnNumber:(x12683 : float) ->
          fun
            ~disposition:(x12684 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x12685 : string) ->
              fun ~effectiveDirective:(x12686 : string) ->
                fun ~lineNumber:(x12687 : float) ->
                  fun ~originalPolicy:(x12688 : string) ->
                    fun ~referrer:(x12689 : string) ->
                      fun ~sample:(x12690 : string) ->
                        fun ~sourceFile:(x12691 : string) ->
                          fun ~statusCode:(x12692 : float) ->
                            fun ~violatedDirective:(x12693 : string) ->
                              fun () ->
                                let x12694 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x12694 "blockedURI"
                                  (Ojs.string_to_js x12682);
                                Ojs.set_prop_ascii x12694 "columnNumber"
                                  (Ojs.float_to_js x12683);
                                Ojs.set_prop_ascii x12694 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x12684);
                                Ojs.set_prop_ascii x12694 "documentURI"
                                  (Ojs.string_to_js x12685);
                                Ojs.set_prop_ascii x12694
                                  "effectiveDirective"
                                  (Ojs.string_to_js x12686);
                                Ojs.set_prop_ascii x12694 "lineNumber"
                                  (Ojs.float_to_js x12687);
                                Ojs.set_prop_ascii x12694 "originalPolicy"
                                  (Ojs.string_to_js x12688);
                                Ojs.set_prop_ascii x12694 "referrer"
                                  (Ojs.string_to_js x12689);
                                Ojs.set_prop_ascii x12694 "sample"
                                  (Ojs.string_to_js x12690);
                                Ojs.set_prop_ascii x12694 "sourceFile"
                                  (Ojs.string_to_js x12691);
                                Ojs.set_prop_ascii x12694 "statusCode"
                                  (Ojs.float_to_js x12692);
                                Ojs.set_prop_ascii x12694 "violatedDirective"
                                  (Ojs.string_to_js x12693);
                                t_of_js x12694
    let cast_from = Obj.magic
  end
module SecurityPolicyViolationEvent =
  struct
    type t = [ `Event  | `SecurityPolicyViolationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12696 : Ojs.t) -> t_of_js x12696
    and t_0_to_js : t_0 -> Ojs.t = fun (x12695 : t) -> t_to_js x12695
    type tags = [ `Event  | `SecurityPolicyViolationEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12699 : Ojs.t) -> intf_of_js __tags_of_js x12699
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12697 : __tags intf) -> intf_to_js __tags_to_js x12697
    let (get_blockedURI : 'tags this -> string) =
      fun (x12701 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12701) "blockedURI")
    let (get_columnNumber : 'tags this -> float) =
      fun (x12703 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12703) "columnNumber")
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x12705 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12705) "disposition")
    let (get_documentURI : 'tags this -> string) =
      fun (x12707 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12707) "documentURI")
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x12709 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12709)
             "effectiveDirective")
    let (get_lineNumber : 'tags this -> float) =
      fun (x12711 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12711) "lineNumber")
    let (get_originalPolicy : 'tags this -> string) =
      fun (x12713 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12713) "originalPolicy")
    let (get_referrer : 'tags this -> string) =
      fun (x12715 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12715) "referrer")
    let (get_sample : 'tags this -> string) =
      fun (x12717 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12717) "sample")
    let (get_sourceFile : 'tags this -> string) =
      fun (x12719 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12719) "sourceFile")
    let (get_statusCode : 'tags this -> float) =
      fun (x12721 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12721) "statusCode")
    let (get_violatedDirective : 'tags this -> string) =
      fun (x12723 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12723)
             "violatedDirective")
    let (create :
      blockedURI:string ->
        columnNumber:float ->
          disposition:SecurityPolicyViolationEventDisposition.t ->
            documentURI:string ->
              effectiveDirective:string ->
                lineNumber:float ->
                  originalPolicy:string ->
                    referrer:string ->
                      sample:string ->
                        sourceFile:string ->
                          statusCode:float ->
                            violatedDirective:string -> unit -> t)
      =
      fun ~blockedURI:(x12725 : string) ->
        fun ~columnNumber:(x12726 : float) ->
          fun
            ~disposition:(x12727 : SecurityPolicyViolationEventDisposition.t)
            ->
            fun ~documentURI:(x12728 : string) ->
              fun ~effectiveDirective:(x12729 : string) ->
                fun ~lineNumber:(x12730 : float) ->
                  fun ~originalPolicy:(x12731 : string) ->
                    fun ~referrer:(x12732 : string) ->
                      fun ~sample:(x12733 : string) ->
                        fun ~sourceFile:(x12734 : string) ->
                          fun ~statusCode:(x12735 : float) ->
                            fun ~violatedDirective:(x12736 : string) ->
                              fun () ->
                                let x12737 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x12737 "blockedURI"
                                  (Ojs.string_to_js x12725);
                                Ojs.set_prop_ascii x12737 "columnNumber"
                                  (Ojs.float_to_js x12726);
                                Ojs.set_prop_ascii x12737 "disposition"
                                  (SecurityPolicyViolationEventDisposition.t_to_js
                                     x12727);
                                Ojs.set_prop_ascii x12737 "documentURI"
                                  (Ojs.string_to_js x12728);
                                Ojs.set_prop_ascii x12737
                                  "effectiveDirective"
                                  (Ojs.string_to_js x12729);
                                Ojs.set_prop_ascii x12737 "lineNumber"
                                  (Ojs.float_to_js x12730);
                                Ojs.set_prop_ascii x12737 "originalPolicy"
                                  (Ojs.string_to_js x12731);
                                Ojs.set_prop_ascii x12737 "referrer"
                                  (Ojs.string_to_js x12732);
                                Ojs.set_prop_ascii x12737 "sample"
                                  (Ojs.string_to_js x12733);
                                Ojs.set_prop_ascii x12737 "sourceFile"
                                  (Ojs.string_to_js x12734);
                                Ojs.set_prop_ascii x12737 "statusCode"
                                  (Ojs.float_to_js x12735);
                                Ojs.set_prop_ascii x12737 "violatedDirective"
                                  (Ojs.string_to_js x12736);
                                t_of_js x12737
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
             "prototype")
    let (create' :
      type_:string ->
        ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t)
      =
      fun ~type_:(x12738 : string) ->
        fun
          ?eventInitDict:(x12739 : SecurityPolicyViolationEventInit.t option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global
                    "SecurityPolicyViolationEvent")
                 (let x12740 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12740 "push" [|(Ojs.string_to_js x12738)|]);
                  (match x12739 with
                   | Some x12741 ->
                       ignore
                         (Ojs.call x12740 "push"
                            [|(SecurityPolicyViolationEventInit.t_to_js
                                 x12741)|])
                   | None -> ());
                  x12740))
  end
module ReadableStreamReader =
  struct
    type 'T t = 'T ReadableStreamDefaultReader.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x12744 : Ojs.t) ->
          ReadableStreamDefaultReader.t_of_js __T_of_js x12744
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x12742 : __T ReadableStreamDefaultReader.t) ->
          ReadableStreamDefaultReader.t_to_js __T_to_js x12742
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x12748 : Ojs.t) -> t_of_js __T_of_js x12748
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x12746 : __T t) -> t_to_js __T_to_js x12746
  end
module PermissionState =
  struct
    type t = [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12751 : Ojs.t) ->
        let x12752 = x12751 in
        match Ojs.string_of_js x12752 with
        | "prompt" -> `L_s157_prompt
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12750 : [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]) ->
        match x12750 with
        | `L_s157_prompt -> Ojs.string_to_js "prompt"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12754 : Ojs.t) -> t_of_js x12754
    and t_0_to_js : t_0 -> Ojs.t = fun (x12753 : t) -> t_to_js x12753
  end
module PermissionStatus =
  struct
    type t = [ `EventTarget  | `PermissionStatus ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12756 : Ojs.t) -> t_of_js x12756
    and t_0_to_js : t_0 -> Ojs.t = fun (x12755 : t) -> t_to_js x12755
    type tags = [ `EventTarget  | `PermissionStatus ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12759 : Ojs.t) -> intf_of_js __tags_of_js x12759
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12757 : __tags intf) -> intf_to_js __tags_to_js x12757
    let (get_onchange : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x12761 : 'tags this) ->
        or_null_of_js
          (fun (x12763 : Ojs.t) ->
             fun ~this:(x12764 : t) ->
               fun ~ev:(x12765 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12763
                      [|(t_to_js x12764);(Event.t_to_js x12765)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12761) "onchange")
    let (set_onchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x12766 : 'tags this) ->
        fun (x12767 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12766) "onchange"
            (or_null_to_js
               (fun (x12768 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12769 : Ojs.t) ->
                       fun (x12770 : Ojs.t) ->
                         any_to_js
                           (x12768 ~this:(t_of_js x12769)
                              ~ev:(Event.t_of_js x12770)))) x12767)
    let (get_state : 'tags this -> PermissionState.t) =
      fun (x12772 : 'tags this) ->
        PermissionState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12772) "state")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12782 : 'tags this) ->
        fun ~type_:(x12774 : 'K) ->
          fun ~listener:(x12775 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12776 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12784 = this_to_js Obj.magic x12782 in
                   Ojs.call (Ojs.get_prop_ascii x12784 "addEventListener")
                     "apply"
                     [|x12784;((let x12777 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12777 "push"
                                     [|(Obj.magic x12774)|]);
                                ignore
                                  (Ojs.call x12777 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12780 : Ojs.t) ->
                                             fun (x12781 : Ojs.t) ->
                                               any_to_js
                                                 (x12775
                                                    ~this:(t_of_js x12780)
                                                    ~ev:(any_of_js x12781))))|]);
                                (match x12776 with
                                 | Some x12778 ->
                                     ignore
                                       (Ojs.call x12777 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12778)|])
                                 | None -> ());
                                x12777))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12791 : 'tags this) ->
        fun ~type_:(x12785 : string) ->
          fun ~listener:(x12786 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12787 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12793 = this_to_js Obj.magic x12791 in
                   Ojs.call (Ojs.get_prop_ascii x12793 "addEventListener")
                     "apply"
                     [|x12793;((let x12788 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12788 "push"
                                     [|(Ojs.string_to_js x12785)|]);
                                ignore
                                  (Ojs.call x12788 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12786)|]);
                                (match x12787 with
                                 | Some x12789 ->
                                     ignore
                                       (Ojs.call x12788 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12789)|])
                                 | None -> ());
                                x12788))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12802 : 'tags this) ->
        fun ~type_:(x12794 : 'K) ->
          fun ~listener:(x12795 : this:t -> ev:any -> any) ->
            fun ?options:(x12796 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12804 = this_to_js Obj.magic x12802 in
                   Ojs.call (Ojs.get_prop_ascii x12804 "removeEventListener")
                     "apply"
                     [|x12804;((let x12797 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12797 "push"
                                     [|(Obj.magic x12794)|]);
                                ignore
                                  (Ojs.call x12797 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12800 : Ojs.t) ->
                                             fun (x12801 : Ojs.t) ->
                                               any_to_js
                                                 (x12795
                                                    ~this:(t_of_js x12800)
                                                    ~ev:(any_of_js x12801))))|]);
                                (match x12796 with
                                 | Some x12798 ->
                                     ignore
                                       (Ojs.call x12797 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12798)|])
                                 | None -> ());
                                x12797))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12811 : 'tags this) ->
        fun ~type_:(x12805 : string) ->
          fun ~listener:(x12806 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x12807 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12813 = this_to_js Obj.magic x12811 in
                   Ojs.call (Ojs.get_prop_ascii x12813 "removeEventListener")
                     "apply"
                     [|x12813;((let x12808 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12808 "push"
                                     [|(Ojs.string_to_js x12805)|]);
                                ignore
                                  (Ojs.call x12808 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12806)|]);
                                (match x12807 with
                                 | Some x12809 ->
                                     ignore
                                       (Ojs.call x12808 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12809)|])
                                 | None -> ());
                                x12808))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PermissionStatus") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
             [||])
  end
module PermissionName =
  struct
    type t =
      [ `L_s131_notifications  | `L_s148_persistent_storage  | `L_s159_push 
      | `L_s173_screen_wake_lock  | `L_s211_xr_spatial_tracking 
      | `L_s80_geolocation ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12815 : Ojs.t) ->
        let x12816 = x12815 in
        match Ojs.string_of_js x12816 with
        | "notifications" -> `L_s131_notifications
        | "persistent-storage" -> `L_s148_persistent_storage
        | "push" -> `L_s159_push
        | "screen-wake-lock" -> `L_s173_screen_wake_lock
        | "xr-spatial-tracking" -> `L_s211_xr_spatial_tracking
        | "geolocation" -> `L_s80_geolocation
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x12814 :
          [ `L_s131_notifications  | `L_s148_persistent_storage 
          | `L_s159_push  | `L_s173_screen_wake_lock 
          | `L_s211_xr_spatial_tracking  | `L_s80_geolocation ])
        ->
        match x12814 with
        | `L_s131_notifications -> Ojs.string_to_js "notifications"
        | `L_s148_persistent_storage -> Ojs.string_to_js "persistent-storage"
        | `L_s159_push -> Ojs.string_to_js "push"
        | `L_s173_screen_wake_lock -> Ojs.string_to_js "screen-wake-lock"
        | `L_s211_xr_spatial_tracking ->
            Ojs.string_to_js "xr-spatial-tracking"
        | `L_s80_geolocation -> Ojs.string_to_js "geolocation"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12818 : Ojs.t) -> t_of_js x12818
    and t_0_to_js : t_0 -> Ojs.t = fun (x12817 : t) -> t_to_js x12817
  end
module PermissionDescriptor =
  struct
    type t = [ `PermissionDescriptor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12820 : Ojs.t) -> t_of_js x12820
    and t_0_to_js : t_0 -> Ojs.t = fun (x12819 : t) -> t_to_js x12819
    type tags = [ `PermissionDescriptor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionDescriptor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12823 : Ojs.t) -> intf_of_js __tags_of_js x12823
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12821 : __tags intf) -> intf_to_js __tags_to_js x12821
    let (get_name : 'tags this -> PermissionName.t) =
      fun (x12825 : 'tags this) ->
        PermissionName.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12825) "name")
    let (set_name : 'tags this -> PermissionName.t -> unit) =
      fun (x12827 : 'tags this) ->
        fun (x12828 : PermissionName.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12827) "name"
            (PermissionName.t_to_js x12828)
    let (create : name:PermissionName.t -> unit -> t) =
      fun ~name:(x12830 : PermissionName.t) ->
        fun () ->
          let x12831 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12831 "name" (PermissionName.t_to_js x12830);
          t_of_js x12831
    let cast_from = Obj.magic
  end
module Permissions =
  struct
    type t = [ `Permissions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12833 : Ojs.t) -> t_of_js x12833
    and t_0_to_js : t_0 -> Ojs.t = fun (x12832 : t) -> t_to_js x12832
    type tags = [ `Permissions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12836 : Ojs.t) -> intf_of_js __tags_of_js x12836
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12834 : __tags intf) -> intf_to_js __tags_to_js x12834
    let (query :
      'tags this ->
        permissionDesc:PermissionDescriptor.t ->
          PermissionStatus.t Promise.t_1)
      =
      fun (x12839 : 'tags this) ->
        fun ~permissionDesc:(x12838 : PermissionDescriptor.t) ->
          Promise.t_1_of_js PermissionStatus.t_of_js
            (Ojs.call (this_to_js Obj.magic x12839) "query"
               [|(PermissionDescriptor.t_to_js x12838)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Permissions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Permissions") [||])
  end
module PermissionStatusEventMap =
  struct
    type t = [ `PermissionStatusEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12843 : Ojs.t) -> t_of_js x12843
    and t_0_to_js : t_0 -> Ojs.t = fun (x12842 : t) -> t_to_js x12842
    type tags = [ `PermissionStatusEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12846 : Ojs.t) -> intf_of_js __tags_of_js x12846
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12844 : __tags intf) -> intf_to_js __tags_to_js x12844
    let (get_change : 'tags this -> Event.t) =
      fun (x12848 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12848) "change")
    let (set_change : 'tags this -> Event.t -> unit) =
      fun (x12850 : 'tags this) ->
        fun (x12851 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12850) "change"
            (Event.t_to_js x12851)
    let (create : change:Event.t -> unit -> t) =
      fun ~change:(x12853 : Event.t) ->
        fun () ->
          let x12854 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x12854 "change" (Event.t_to_js x12853);
          t_of_js x12854
    let cast_from = Obj.magic
  end
module PerformanceServerTiming =
  struct
    type t = [ `PerformanceServerTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12856 : Ojs.t) -> t_of_js x12856
    and t_0_to_js : t_0 -> Ojs.t = fun (x12855 : t) -> t_to_js x12855
    type tags = [ `PerformanceServerTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceServerTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12859 : Ojs.t) -> intf_of_js __tags_of_js x12859
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12857 : __tags intf) -> intf_to_js __tags_to_js x12857
    let (get_description : 'tags this -> string) =
      fun (x12861 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12861) "description")
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12863 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12863) "duration")
    let (get_name : 'tags this -> string) =
      fun (x12865 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12865) "name")
    let (toJSON : 'tags this -> any) =
      fun (x12867 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x12867) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming") 
             [||])
  end
module PerformanceResourceTiming =
  struct
    type t = [ `PerformanceEntry  | `PerformanceResourceTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12870 : Ojs.t) -> t_of_js x12870
    and t_0_to_js : t_0 -> Ojs.t = fun (x12869 : t) -> t_to_js x12869
    type tags = [ `PerformanceEntry  | `PerformanceResourceTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12873 : Ojs.t) -> intf_of_js __tags_of_js x12873
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12871 : __tags intf) -> intf_to_js __tags_to_js x12871
    let (get_connectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12875 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12875) "connectEnd")
    let (get_connectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12877 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12877) "connectStart")
    let (get_decodedBodySize : 'tags this -> float) =
      fun (x12879 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12879) "decodedBodySize")
    let (get_domainLookupEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12881 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12881) "domainLookupEnd")
    let (get_domainLookupStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12883 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12883)
             "domainLookupStart")
    let (get_encodedBodySize : 'tags this -> float) =
      fun (x12885 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12885) "encodedBodySize")
    let (get_fetchStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12887 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12887) "fetchStart")
    let (get_initiatorType : 'tags this -> string) =
      fun (x12889 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12889) "initiatorType")
    let (get_nextHopProtocol : 'tags this -> string) =
      fun (x12891 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12891) "nextHopProtocol")
    let (get_redirectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12893 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12893) "redirectEnd")
    let (get_redirectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12895 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12895) "redirectStart")
    let (get_requestStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12897 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12897) "requestStart")
    let (get_responseEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12899 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12899) "responseEnd")
    let (get_responseStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12901 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12901) "responseStart")
    let (get_secureConnectionStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12903 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12903)
             "secureConnectionStart")
    let (get_serverTiming : 'tags this -> PerformanceServerTiming.t list) =
      fun (x12905 : 'tags this) ->
        Ojs.list_of_js PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12905) "serverTiming")
    let (get_transferSize : 'tags this -> float) =
      fun (x12908 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12908) "transferSize")
    let (get_workerStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12910 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12910) "workerStart")
    let (toJSON : 'tags this -> any) =
      fun (x12912 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x12912) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming") 
             [||])
  end
module PerformanceObserverInit =
  struct
    type t = [ `PerformanceObserverInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12915 : Ojs.t) -> t_of_js x12915
    and t_0_to_js : t_0 -> Ojs.t = fun (x12914 : t) -> t_to_js x12914
    type tags = [ `PerformanceObserverInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12918 : Ojs.t) -> intf_of_js __tags_of_js x12918
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12916 : __tags intf) -> intf_to_js __tags_to_js x12916
    let (get_buffered : 'tags this -> bool) =
      fun (x12920 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12920) "buffered")
    let (set_buffered : 'tags this -> bool -> unit) =
      fun (x12922 : 'tags this) ->
        fun (x12923 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12922) "buffered"
            (Ojs.bool_to_js x12923)
    let (get_entryTypes : 'tags this -> string list) =
      fun (x12925 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12925) "entryTypes")
    let (set_entryTypes : 'tags this -> string list -> unit) =
      fun (x12928 : 'tags this) ->
        fun (x12929 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12928) "entryTypes"
            (Ojs.list_to_js Ojs.string_to_js x12929)
    let (get_type : 'tags this -> string) =
      fun (x12932 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12932) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x12934 : 'tags this) ->
        fun (x12935 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12934) "type"
            (Ojs.string_to_js x12935)
    let (create :
      buffered:bool -> entryTypes:string list -> type_:string -> unit -> t) =
      fun ~buffered:(x12937 : bool) ->
        fun ~entryTypes:(x12938 : string list) ->
          fun ~type_:(x12939 : string) ->
            fun () ->
              let x12940 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x12940 "buffered" (Ojs.bool_to_js x12937);
              Ojs.set_prop_ascii x12940 "entryTypes"
                (Ojs.list_to_js Ojs.string_to_js x12938);
              Ojs.set_prop_ascii x12940 "type" (Ojs.string_to_js x12939);
              t_of_js x12940
    let cast_from = Obj.magic
  end
module PerformanceObserverEntryList =
  struct
    type t = [ `PerformanceObserverEntryList ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12943 : Ojs.t) -> t_of_js x12943
    and t_0_to_js : t_0 -> Ojs.t = fun (x12942 : t) -> t_to_js x12942
    type tags = [ `PerformanceObserverEntryList ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12946 : Ojs.t) -> intf_of_js __tags_of_js x12946
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12944 : __tags intf) -> intf_to_js __tags_to_js x12944
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x12948 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x12948) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x12954 : 'tags this) ->
        fun ~name:(x12950 : string) ->
          fun ?type_:(x12951 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x12956 = this_to_js Obj.magic x12954 in
                 Ojs.call (Ojs.get_prop_ascii x12956 "getEntriesByName")
                   "apply"
                   [|x12956;((let x12952 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12952 "push"
                                   [|(Ojs.string_to_js x12950)|]);
                              (match x12951 with
                               | Some x12953 ->
                                   ignore
                                     (Ojs.call x12952 "push"
                                        [|(Ojs.string_to_js x12953)|])
                               | None -> ());
                              x12952))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x12958 : 'tags this) ->
        fun ~type_:(x12957 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x12958) "getEntriesByType"
               [|(Ojs.string_to_js x12957)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             [||])
  end
module rec
  PerformanceObserver:sig
                        type t = [ `PerformanceObserver ] intf
                        type t_0 = t
                        [@@@js.stop ]
                        type tags = [ `PerformanceObserver ]
                        type tags_0 = tags
                        [@@@js.start ]
                        [@@@js.implem
                          type tags = [ `PerformanceObserver ]
                          type tags_0 = tags]
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `PerformanceObserver ]
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val disconnect : 'tags this -> unit
                        val observe :
                          'tags this ->
                            ?options:PerformanceObserverInit.t ->
                              unit -> unit
                        val takeRecords :
                          'tags this -> PerformanceEntryList.t
                        val cast_from : 'tags this -> t
                        val prototype : unit -> t
                        val create : PerformanceObserverCallback.t -> t
                        val supportedEntryTypes : unit -> string list
                      end =
  struct
    type t = [ `PerformanceObserver ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12961 : Ojs.t) -> t_of_js x12961
    and t_0_to_js : t_0 -> Ojs.t = fun (x12960 : t) -> t_to_js x12960
    type tags = [ `PerformanceObserver ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12964 : Ojs.t) -> intf_of_js __tags_of_js x12964
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12962 : __tags intf) -> intf_to_js __tags_to_js x12962
    let (disconnect : 'tags this -> unit) =
      fun (x12966 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12966) "disconnect" [||])
    let (observe :
      'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit) =
      fun (x12971 : 'tags this) ->
        fun ?options:(x12968 : PerformanceObserverInit.t option) ->
          fun () ->
            ignore
              (let x12973 = this_to_js Obj.magic x12971 in
               Ojs.call (Ojs.get_prop_ascii x12973 "observe") "apply"
                 [|x12973;((let x12969 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12968 with
                             | Some x12970 ->
                                 ignore
                                   (Ojs.call x12969 "push"
                                      [|(PerformanceObserverInit.t_to_js
                                           x12970)|])
                             | None -> ());
                            x12969))|])
    let (takeRecords : 'tags this -> PerformanceEntryList.t) =
      fun (x12974 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x12974) "takeRecords" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "prototype")
    let (create : PerformanceObserverCallback.t -> t) =
      fun (x12976 : PerformanceObserverCallback.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             [|(PerformanceObserverCallback.t_to_js x12976)|])
    let (supportedEntryTypes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "supportedEntryTypes")
  end
 and
  PerformanceObserverCallback:sig
                                type t =
                                  [ `PerformanceObserverCallback ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `PerformanceObserverCallback ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags =
                                    [ `PerformanceObserverCallback ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `PerformanceObserverCallback ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val apply :
                                  'tags this ->
                                    entries:PerformanceObserverEntryList.t ->
                                      observer:PerformanceObserver.t -> unit
                                val cast_from : 'tags this -> t
                              end =
  struct
    type t = [ `PerformanceObserverCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12979 : Ojs.t) -> t_of_js x12979
    and t_0_to_js : t_0 -> Ojs.t = fun (x12978 : t) -> t_to_js x12978
    type tags = [ `PerformanceObserverCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12982 : Ojs.t) -> intf_of_js __tags_of_js x12982
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12980 : __tags intf) -> intf_to_js __tags_to_js x12980
    let (apply :
      'tags this ->
        entries:PerformanceObserverEntryList.t ->
          observer:PerformanceObserver.t -> unit)
      =
      fun (x12986 : 'tags this) ->
        fun ~entries:(x12984 : PerformanceObserverEntryList.t) ->
          fun ~observer:(x12985 : PerformanceObserver.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic x12986)
                 [|(PerformanceObserverEntryList.t_to_js x12984);(PerformanceObserver.t_to_js
                                                                    x12985)|])
    let cast_from = Obj.magic
  end
module PerformanceEventMap =
  struct
    type t = [ `PerformanceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12989 : Ojs.t) -> t_of_js x12989
    and t_0_to_js : t_0 -> Ojs.t = fun (x12988 : t) -> t_to_js x12988
    type tags = [ `PerformanceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12992 : Ojs.t) -> intf_of_js __tags_of_js x12992
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12990 : __tags intf) -> intf_to_js __tags_to_js x12990
    let (get_resourcetimingbufferfull : 'tags this -> Event.t) =
      fun (x12994 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12994)
             "resourcetimingbufferfull")
    let (set_resourcetimingbufferfull : 'tags this -> Event.t -> unit) =
      fun (x12996 : 'tags this) ->
        fun (x12997 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12996)
            "resourcetimingbufferfull" (Event.t_to_js x12997)
    let (create : resourcetimingbufferfull:Event.t -> unit -> t) =
      fun ~resourcetimingbufferfull:(x12999 : Event.t) ->
        fun () ->
          let x13000 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13000 "resourcetimingbufferfull"
            (Event.t_to_js x12999);
          t_of_js x13000
    let cast_from = Obj.magic
  end
module DOMMatrix2DInit =
  struct
    type t = [ `DOMMatrix2DInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13002 : Ojs.t) -> t_of_js x13002
    and t_0_to_js : t_0 -> Ojs.t = fun (x13001 : t) -> t_to_js x13001
    type tags = [ `DOMMatrix2DInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13005 : Ojs.t) -> intf_of_js __tags_of_js x13005
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13003 : __tags intf) -> intf_to_js __tags_to_js x13003
    let (get_a : 'tags this -> float) =
      fun (x13007 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13007) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x13009 : 'tags this) ->
        fun (x13010 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13009) "a"
            (Ojs.float_to_js x13010)
    let (get_b : 'tags this -> float) =
      fun (x13012 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13012) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x13014 : 'tags this) ->
        fun (x13015 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13014) "b"
            (Ojs.float_to_js x13015)
    let (get_c : 'tags this -> float) =
      fun (x13017 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13017) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x13019 : 'tags this) ->
        fun (x13020 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13019) "c"
            (Ojs.float_to_js x13020)
    let (get_d : 'tags this -> float) =
      fun (x13022 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13022) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x13024 : 'tags this) ->
        fun (x13025 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13024) "d"
            (Ojs.float_to_js x13025)
    let (get_e : 'tags this -> float) =
      fun (x13027 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13027) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x13029 : 'tags this) ->
        fun (x13030 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13029) "e"
            (Ojs.float_to_js x13030)
    let (get_f : 'tags this -> float) =
      fun (x13032 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13032) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x13034 : 'tags this) ->
        fun (x13035 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13034) "f"
            (Ojs.float_to_js x13035)
    let (get_m11 : 'tags this -> float) =
      fun (x13037 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13037) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x13039 : 'tags this) ->
        fun (x13040 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13039) "m11"
            (Ojs.float_to_js x13040)
    let (get_m12 : 'tags this -> float) =
      fun (x13042 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13042) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x13044 : 'tags this) ->
        fun (x13045 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13044) "m12"
            (Ojs.float_to_js x13045)
    let (get_m21 : 'tags this -> float) =
      fun (x13047 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13047) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x13049 : 'tags this) ->
        fun (x13050 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13049) "m21"
            (Ojs.float_to_js x13050)
    let (get_m22 : 'tags this -> float) =
      fun (x13052 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13052) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x13054 : 'tags this) ->
        fun (x13055 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13054) "m22"
            (Ojs.float_to_js x13055)
    let (get_m41 : 'tags this -> float) =
      fun (x13057 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13057) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x13059 : 'tags this) ->
        fun (x13060 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13059) "m41"
            (Ojs.float_to_js x13060)
    let (get_m42 : 'tags this -> float) =
      fun (x13062 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13062) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x13064 : 'tags this) ->
        fun (x13065 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13064) "m42"
            (Ojs.float_to_js x13065)
    let (create :
      a:float ->
        b:float ->
          c:float ->
            d:float ->
              e:float ->
                f:float ->
                  m11:float ->
                    m12:float ->
                      m21:float ->
                        m22:float -> m41:float -> m42:float -> unit -> t)
      =
      fun ~a:(x13067 : float) ->
        fun ~b:(x13068 : float) ->
          fun ~c:(x13069 : float) ->
            fun ~d:(x13070 : float) ->
              fun ~e:(x13071 : float) ->
                fun ~f:(x13072 : float) ->
                  fun ~m11:(x13073 : float) ->
                    fun ~m12:(x13074 : float) ->
                      fun ~m21:(x13075 : float) ->
                        fun ~m22:(x13076 : float) ->
                          fun ~m41:(x13077 : float) ->
                            fun ~m42:(x13078 : float) ->
                              fun () ->
                                let x13079 = Ojs.empty_obj () in
                                Ojs.set_prop_ascii x13079 "a"
                                  (Ojs.float_to_js x13067);
                                Ojs.set_prop_ascii x13079 "b"
                                  (Ojs.float_to_js x13068);
                                Ojs.set_prop_ascii x13079 "c"
                                  (Ojs.float_to_js x13069);
                                Ojs.set_prop_ascii x13079 "d"
                                  (Ojs.float_to_js x13070);
                                Ojs.set_prop_ascii x13079 "e"
                                  (Ojs.float_to_js x13071);
                                Ojs.set_prop_ascii x13079 "f"
                                  (Ojs.float_to_js x13072);
                                Ojs.set_prop_ascii x13079 "m11"
                                  (Ojs.float_to_js x13073);
                                Ojs.set_prop_ascii x13079 "m12"
                                  (Ojs.float_to_js x13074);
                                Ojs.set_prop_ascii x13079 "m21"
                                  (Ojs.float_to_js x13075);
                                Ojs.set_prop_ascii x13079 "m22"
                                  (Ojs.float_to_js x13076);
                                Ojs.set_prop_ascii x13079 "m41"
                                  (Ojs.float_to_js x13077);
                                Ojs.set_prop_ascii x13079 "m42"
                                  (Ojs.float_to_js x13078);
                                t_of_js x13079
    let cast_from = Obj.magic
  end
module CanvasPath =
  struct
    type t = [ `CanvasPath ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13081 : Ojs.t) -> t_of_js x13081
    and t_0_to_js : t_0 -> Ojs.t = fun (x13080 : t) -> t_to_js x13080
    type tags = [ `CanvasPath ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13084 : Ojs.t) -> intf_of_js __tags_of_js x13084
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13082 : __tags intf) -> intf_to_js __tags_to_js x13082
    let (arc :
      'tags this ->
        x:float ->
          y:float ->
            radius:float ->
              startAngle:float ->
                endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13094 : 'tags this) ->
        fun ~x:(x13086 : float) ->
          fun ~y:(x13087 : float) ->
            fun ~radius:(x13088 : float) ->
              fun ~startAngle:(x13089 : float) ->
                fun ~endAngle:(x13090 : float) ->
                  fun ?counterclockwise:(x13091 : bool option) ->
                    fun () ->
                      ignore
                        (let x13096 = this_to_js Obj.magic x13094 in
                         Ojs.call (Ojs.get_prop_ascii x13096 "arc") "apply"
                           [|x13096;((let x13092 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x13092 "push"
                                           [|(Ojs.float_to_js x13086)|]);
                                      ignore
                                        (Ojs.call x13092 "push"
                                           [|(Ojs.float_to_js x13087)|]);
                                      ignore
                                        (Ojs.call x13092 "push"
                                           [|(Ojs.float_to_js x13088)|]);
                                      ignore
                                        (Ojs.call x13092 "push"
                                           [|(Ojs.float_to_js x13089)|]);
                                      ignore
                                        (Ojs.call x13092 "push"
                                           [|(Ojs.float_to_js x13090)|]);
                                      (match x13091 with
                                       | Some x13093 ->
                                           ignore
                                             (Ojs.call x13092 "push"
                                                [|(Ojs.bool_to_js x13093)|])
                                       | None -> ());
                                      x13092))|])
    let (arcTo :
      'tags this ->
        x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit)
      =
      fun (x13102 : 'tags this) ->
        fun ~x1:(x13097 : float) ->
          fun ~y1:(x13098 : float) ->
            fun ~x2:(x13099 : float) ->
              fun ~y2:(x13100 : float) ->
                fun ~radius:(x13101 : float) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x13102) "arcTo"
                       [|(Ojs.float_to_js x13097);(Ojs.float_to_js x13098);(
                         Ojs.float_to_js x13099);(Ojs.float_to_js x13100);(
                         Ojs.float_to_js x13101)|])
    let (bezierCurveTo :
      'tags this ->
        cp1x:float ->
          cp1y:float ->
            cp2x:float -> cp2y:float -> x:float -> y:float -> unit)
      =
      fun (x13110 : 'tags this) ->
        fun ~cp1x:(x13104 : float) ->
          fun ~cp1y:(x13105 : float) ->
            fun ~cp2x:(x13106 : float) ->
              fun ~cp2y:(x13107 : float) ->
                fun ~x:(x13108 : float) ->
                  fun ~y:(x13109 : float) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x13110) "bezierCurveTo"
                         [|(Ojs.float_to_js x13104);(Ojs.float_to_js x13105);(
                           Ojs.float_to_js x13106);(Ojs.float_to_js x13107);(
                           Ojs.float_to_js x13108);(Ojs.float_to_js x13109)|])
    let (closePath : 'tags this -> unit) =
      fun (x13112 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13112) "closePath" [||])
    let (ellipse :
      'tags this ->
        x:float ->
          y:float ->
            radiusX:float ->
              radiusY:float ->
                rotation:float ->
                  startAngle:float ->
                    endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x13124 : 'tags this) ->
        fun ~x:(x13114 : float) ->
          fun ~y:(x13115 : float) ->
            fun ~radiusX:(x13116 : float) ->
              fun ~radiusY:(x13117 : float) ->
                fun ~rotation:(x13118 : float) ->
                  fun ~startAngle:(x13119 : float) ->
                    fun ~endAngle:(x13120 : float) ->
                      fun ?counterclockwise:(x13121 : bool option) ->
                        fun () ->
                          ignore
                            (let x13126 = this_to_js Obj.magic x13124 in
                             Ojs.call (Ojs.get_prop_ascii x13126 "ellipse")
                               "apply"
                               [|x13126;((let x13122 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x13122 "push"
                                               [|(Ojs.float_to_js x13114)|]);
                                          ignore
                                            (Ojs.call x13122 "push"
                                               [|(Ojs.float_to_js x13115)|]);
                                          ignore
                                            (Ojs.call x13122 "push"
                                               [|(Ojs.float_to_js x13116)|]);
                                          ignore
                                            (Ojs.call x13122 "push"
                                               [|(Ojs.float_to_js x13117)|]);
                                          ignore
                                            (Ojs.call x13122 "push"
                                               [|(Ojs.float_to_js x13118)|]);
                                          ignore
                                            (Ojs.call x13122 "push"
                                               [|(Ojs.float_to_js x13119)|]);
                                          ignore
                                            (Ojs.call x13122 "push"
                                               [|(Ojs.float_to_js x13120)|]);
                                          (match x13121 with
                                           | Some x13123 ->
                                               ignore
                                                 (Ojs.call x13122 "push"
                                                    [|(Ojs.bool_to_js x13123)|])
                                           | None -> ());
                                          x13122))|])
    let (lineTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13129 : 'tags this) ->
        fun ~x:(x13127 : float) ->
          fun ~y:(x13128 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13129) "lineTo"
                 [|(Ojs.float_to_js x13127);(Ojs.float_to_js x13128)|])
    let (moveTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x13133 : 'tags this) ->
        fun ~x:(x13131 : float) ->
          fun ~y:(x13132 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13133) "moveTo"
                 [|(Ojs.float_to_js x13131);(Ojs.float_to_js x13132)|])
    let (quadraticCurveTo :
      'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit) =
      fun (x13139 : 'tags this) ->
        fun ~cpx:(x13135 : float) ->
          fun ~cpy:(x13136 : float) ->
            fun ~x:(x13137 : float) ->
              fun ~y:(x13138 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13139) "quadraticCurveTo"
                     [|(Ojs.float_to_js x13135);(Ojs.float_to_js x13136);(
                       Ojs.float_to_js x13137);(Ojs.float_to_js x13138)|])
    let (rect :
      'tags this -> x:float -> y:float -> w:float -> h:float -> unit) =
      fun (x13145 : 'tags this) ->
        fun ~x:(x13141 : float) ->
          fun ~y:(x13142 : float) ->
            fun ~w:(x13143 : float) ->
              fun ~h:(x13144 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x13145) "rect"
                     [|(Ojs.float_to_js x13141);(Ojs.float_to_js x13142);(
                       Ojs.float_to_js x13143);(Ojs.float_to_js x13144)|])
    let cast_from = Obj.magic
  end
module Path2D =
  struct
    type t = [ `CanvasPath  | `Path2D ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13148 : Ojs.t) -> t_of_js x13148
    and t_0_to_js : t_0 -> Ojs.t = fun (x13147 : t) -> t_to_js x13147
    type tags = [ `CanvasPath  | `Path2D ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13151 : Ojs.t) -> intf_of_js __tags_of_js x13151
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13149 : __tags intf) -> intf_to_js __tags_to_js x13149
    let (addPath :
      'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x13157 : 'tags this) ->
        fun ~path:(x13153 : t) ->
          fun ?transform:(x13154 : DOMMatrix2DInit.t option) ->
            fun () ->
              ignore
                (let x13159 = this_to_js Obj.magic x13157 in
                 Ojs.call (Ojs.get_prop_ascii x13159 "addPath") "apply"
                   [|x13159;((let x13155 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13155 "push" [|(t_to_js x13153)|]);
                              (match x13154 with
                               | Some x13156 ->
                                   ignore
                                     (Ojs.call x13155 "push"
                                        [|(DOMMatrix2DInit.t_to_js x13156)|])
                               | None -> ());
                              x13155))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Path2D")
             "prototype")
    let (create : ?path:t or_string -> unit -> t) =
      fun ?path:(x13160 : t or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Path2D")
               (let x13161 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x13160 with
                 | Some x13162 ->
                     ignore
                       (Ojs.call x13161 "push"
                          [|(or_string_to_js t_to_js x13162)|])
                 | None -> ());
                x13161))
  end
module OnErrorEventHandlerNonNull =
  struct
    type t = [ `OnErrorEventHandlerNonNull ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13165 : Ojs.t) -> t_of_js x13165
    and t_0_to_js : t_0 -> Ojs.t = fun (x13164 : t) -> t_to_js x13164
    type tags = [ `OnErrorEventHandlerNonNull ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13168 : Ojs.t) -> intf_of_js __tags_of_js x13168
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13166 : __tags intf) -> intf_to_js __tags_to_js x13166
    let (apply :
      'tags this ->
        event:Event.t or_string ->
          ?source:string ->
            ?lineno:float -> ?colno:float -> ?error:Error.t_0 -> unit -> any)
      =
      fun (x13181 : 'tags this) ->
        fun ~event:(x13170 : Event.t or_string) ->
          fun ?source:(x13171 : string option) ->
            fun ?lineno:(x13172 : float option) ->
              fun ?colno:(x13173 : float option) ->
                fun ?error:(x13174 : Error.t_0 option) ->
                  fun () ->
                    any_of_js
                      (Ojs.call (this_to_js Obj.magic x13181) "apply"
                         [|Ojs.null;((let x13175 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x13175 "push"
                                           [|(or_string_to_js Event.t_to_js
                                                x13170)|]);
                                      (match x13171 with
                                       | Some x13179 ->
                                           ignore
                                             (Ojs.call x13175 "push"
                                                [|(Ojs.string_to_js x13179)|])
                                       | None -> ());
                                      (match x13172 with
                                       | Some x13178 ->
                                           ignore
                                             (Ojs.call x13175 "push"
                                                [|(Ojs.float_to_js x13178)|])
                                       | None -> ());
                                      (match x13173 with
                                       | Some x13177 ->
                                           ignore
                                             (Ojs.call x13175 "push"
                                                [|(Ojs.float_to_js x13177)|])
                                       | None -> ());
                                      (match x13174 with
                                       | Some x13176 ->
                                           ignore
                                             (Ojs.call x13175 "push"
                                                [|(Error.t_0_to_js x13176)|])
                                       | None -> ());
                                      x13175))|])
    let cast_from = Obj.magic
  end
module OnErrorEventHandler =
  struct
    type t = OnErrorEventHandlerNonNull.t or_null
    let rec t_of_js : Ojs.t -> t =
      fun (x13185 : Ojs.t) ->
        or_null_of_js OnErrorEventHandlerNonNull.t_of_js x13185
    and t_to_js : t -> Ojs.t =
      fun (x13183 : OnErrorEventHandlerNonNull.t or_null) ->
        or_null_to_js OnErrorEventHandlerNonNull.t_to_js x13183
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13188 : Ojs.t) -> t_of_js x13188
    and t_0_to_js : t_0 -> Ojs.t = fun (x13187 : t) -> t_to_js x13187
  end
module OES_fbo_render_mipmap =
  struct
    type t = [ `OES_fbo_render_mipmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13190 : Ojs.t) -> t_of_js x13190
    and t_0_to_js : t_0 -> Ojs.t = fun (x13189 : t) -> t_to_js x13189
    type tags = [ `OES_fbo_render_mipmap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13193 : Ojs.t) -> intf_of_js __tags_of_js x13193
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13191 : __tags intf) -> intf_to_js __tags_to_js x13191
    let cast_from = Obj.magic
  end
module NotificationEventMap =
  struct
    type t = [ `NotificationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13196 : Ojs.t) -> t_of_js x13196
    and t_0_to_js : t_0 -> Ojs.t = fun (x13195 : t) -> t_to_js x13195
    type tags = [ `NotificationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13199 : Ojs.t) -> intf_of_js __tags_of_js x13199
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13197 : __tags intf) -> intf_to_js __tags_to_js x13197
    let (get_click : 'tags this -> Event.t) =
      fun (x13201 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13201) "click")
    let (set_click : 'tags this -> Event.t -> unit) =
      fun (x13203 : 'tags this) ->
        fun (x13204 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13203) "click"
            (Event.t_to_js x13204)
    let (get_close : 'tags this -> Event.t) =
      fun (x13206 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13206) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x13208 : 'tags this) ->
        fun (x13209 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13208) "close"
            (Event.t_to_js x13209)
    let (get_error : 'tags this -> Event.t) =
      fun (x13211 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13211) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13213 : 'tags this) ->
        fun (x13214 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13213) "error"
            (Event.t_to_js x13214)
    let (get_show : 'tags this -> Event.t) =
      fun (x13216 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13216) "show")
    let (set_show : 'tags this -> Event.t -> unit) =
      fun (x13218 : 'tags this) ->
        fun (x13219 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13218) "show"
            (Event.t_to_js x13219)
    let (create :
      click:Event.t ->
        close:Event.t -> error:Event.t -> show:Event.t -> unit -> t)
      =
      fun ~click:(x13221 : Event.t) ->
        fun ~close:(x13222 : Event.t) ->
          fun ~error:(x13223 : Event.t) ->
            fun ~show:(x13224 : Event.t) ->
              fun () ->
                let x13225 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x13225 "click" (Event.t_to_js x13221);
                Ojs.set_prop_ascii x13225 "close" (Event.t_to_js x13222);
                Ojs.set_prop_ascii x13225 "error" (Event.t_to_js x13223);
                Ojs.set_prop_ascii x13225 "show" (Event.t_to_js x13224);
                t_of_js x13225
    let cast_from = Obj.magic
  end
module MessagePortEventMap =
  struct
    type t = [ `MessagePortEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13227 : Ojs.t) -> t_of_js x13227
    and t_0_to_js : t_0 -> Ojs.t = fun (x13226 : t) -> t_to_js x13226
    type tags = [ `MessagePortEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13230 : Ojs.t) -> intf_of_js __tags_of_js x13230
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13228 : __tags intf) -> intf_to_js __tags_to_js x13228
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x13232 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13232) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13234 : 'tags this) ->
        fun (x13235 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13234) "message"
            (MessageEvent.t_0_to_js x13235)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x13237 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13237) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13239 : 'tags this) ->
        fun (x13240 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13239) "messageerror"
            (MessageEvent.t_0_to_js x13240)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x13242 : MessageEvent.t_0) ->
        fun ~messageerror:(x13243 : MessageEvent.t_0) ->
          fun () ->
            let x13244 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13244 "message"
              (MessageEvent.t_0_to_js x13242);
            Ojs.set_prop_ascii x13244 "messageerror"
              (MessageEvent.t_0_to_js x13243);
            t_of_js x13244
    let cast_from = Obj.magic
  end
module MessageChannel =
  struct
    type t = [ `MessageChannel ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13246 : Ojs.t) -> t_of_js x13246
    and t_0_to_js : t_0 -> Ojs.t = fun (x13245 : t) -> t_to_js x13245
    type tags = [ `MessageChannel ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13249 : Ojs.t) -> intf_of_js __tags_of_js x13249
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13247 : __tags intf) -> intf_to_js __tags_to_js x13247
    let (get_port1 : 'tags this -> MessagePort.t) =
      fun (x13251 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13251) "port1")
    let (get_port2 : 'tags this -> MessagePort.t) =
      fun (x13253 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13253) "port2")
    let (create : port1:MessagePort.t -> port2:MessagePort.t -> unit -> t) =
      fun ~port1:(x13255 : MessagePort.t) ->
        fun ~port2:(x13256 : MessagePort.t) ->
          fun () ->
            let x13257 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13257 "port1" (MessagePort.t_to_js x13255);
            Ojs.set_prop_ascii x13257 "port2" (MessagePort.t_to_js x13256);
            t_of_js x13257
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MessageChannel") "prototype")
    let (create' : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MessageChannel") [||])
  end
module ImportMeta =
  struct
    type t = [ `ImportMeta ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13259 : Ojs.t) -> t_of_js x13259
    and t_0_to_js : t_0 -> Ojs.t = fun (x13258 : t) -> t_to_js x13258
    type tags = [ `ImportMeta ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13262 : Ojs.t) -> intf_of_js __tags_of_js x13262
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13260 : __tags intf) -> intf_to_js __tags_to_js x13260
    let (get_url : 'tags this -> string) =
      fun (x13264 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13264) "url")
    let (set_url : 'tags this -> string -> unit) =
      fun (x13266 : 'tags this) ->
        fun (x13267 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13266) "url"
            (Ojs.string_to_js x13267)
    let (create : url:string -> unit -> t) =
      fun ~url:(x13269 : string) ->
        fun () ->
          let x13270 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13270 "url" (Ojs.string_to_js x13269);
          t_of_js x13270
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContextSettings =
  struct
    type t = [ `ImageBitmapRenderingContextSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13272 : Ojs.t) -> t_of_js x13272
    and t_0_to_js : t_0 -> Ojs.t = fun (x13271 : t) -> t_to_js x13271
    type tags = [ `ImageBitmapRenderingContextSettings ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13275 : Ojs.t) -> intf_of_js __tags_of_js x13275
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13273 : __tags intf) -> intf_to_js __tags_to_js x13273
    let (get_alpha : 'tags this -> bool) =
      fun (x13277 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13277) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x13279 : 'tags this) ->
        fun (x13280 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13279) "alpha"
            (Ojs.bool_to_js x13280)
    let (create : alpha:bool -> unit -> t) =
      fun ~alpha:(x13282 : bool) ->
        fun () ->
          let x13283 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13283 "alpha" (Ojs.bool_to_js x13282);
          t_of_js x13283
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContext =
  struct
    type t = [ `ImageBitmapRenderingContext ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13285 : Ojs.t) -> t_of_js x13285
    and t_0_to_js : t_0 -> Ojs.t = fun (x13284 : t) -> t_to_js x13284
    type tags = [ `ImageBitmapRenderingContext ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13288 : Ojs.t) -> intf_of_js __tags_of_js x13288
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13286 : __tags intf) -> intf_to_js __tags_to_js x13286
    let (transferFromImageBitmap :
      'tags this -> bitmap:ImageBitmap.t or_null -> unit) =
      fun (x13292 : 'tags this) ->
        fun ~bitmap:(x13290 : ImageBitmap.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13292) "transferFromImageBitmap"
               [|(or_null_to_js ImageBitmap.t_to_js x13290)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             [||])
  end
module IDBTransactionEventMap =
  struct
    type t = [ `IDBTransactionEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13295 : Ojs.t) -> t_of_js x13295
    and t_0_to_js : t_0 -> Ojs.t = fun (x13294 : t) -> t_to_js x13294
    type tags = [ `IDBTransactionEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13298 : Ojs.t) -> intf_of_js __tags_of_js x13298
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13296 : __tags intf) -> intf_to_js __tags_to_js x13296
    let (get_abort : 'tags this -> Event.t) =
      fun (x13300 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13300) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x13302 : 'tags this) ->
        fun (x13303 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13302) "abort"
            (Event.t_to_js x13303)
    let (get_complete : 'tags this -> Event.t) =
      fun (x13305 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13305) "complete")
    let (set_complete : 'tags this -> Event.t -> unit) =
      fun (x13307 : 'tags this) ->
        fun (x13308 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13307) "complete"
            (Event.t_to_js x13308)
    let (get_error : 'tags this -> Event.t) =
      fun (x13310 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13310) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13312 : 'tags this) ->
        fun (x13313 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13312) "error"
            (Event.t_to_js x13313)
    let (create :
      abort:Event.t -> complete:Event.t -> error:Event.t -> unit -> t) =
      fun ~abort:(x13315 : Event.t) ->
        fun ~complete:(x13316 : Event.t) ->
          fun ~error:(x13317 : Event.t) ->
            fun () ->
              let x13318 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13318 "abort" (Event.t_to_js x13315);
              Ojs.set_prop_ascii x13318 "complete" (Event.t_to_js x13316);
              Ojs.set_prop_ascii x13318 "error" (Event.t_to_js x13317);
              t_of_js x13318
    let cast_from = Obj.magic
  end
module IDBRequestEventMap =
  struct
    type t = [ `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13320 : Ojs.t) -> t_of_js x13320
    and t_0_to_js : t_0 -> Ojs.t = fun (x13319 : t) -> t_to_js x13319
    type tags = [ `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13323 : Ojs.t) -> intf_of_js __tags_of_js x13323
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13321 : __tags intf) -> intf_to_js __tags_to_js x13321
    let (get_error : 'tags this -> Event.t) =
      fun (x13325 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13325) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13327 : 'tags this) ->
        fun (x13328 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13327) "error"
            (Event.t_to_js x13328)
    let (get_success : 'tags this -> Event.t) =
      fun (x13330 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13330) "success")
    let (set_success : 'tags this -> Event.t -> unit) =
      fun (x13332 : 'tags this) ->
        fun (x13333 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13332) "success"
            (Event.t_to_js x13333)
    let (create : error:Event.t -> success:Event.t -> unit -> t) =
      fun ~error:(x13335 : Event.t) ->
        fun ~success:(x13336 : Event.t) ->
          fun () ->
            let x13337 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13337 "error" (Event.t_to_js x13335);
            Ojs.set_prop_ascii x13337 "success" (Event.t_to_js x13336);
            t_of_js x13337
    let cast_from = Obj.magic
  end
module IDBOpenDBRequestEventMap =
  struct
    type t = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13339 : Ojs.t) -> t_of_js x13339
    and t_0_to_js : t_0 -> Ojs.t = fun (x13338 : t) -> t_to_js x13338
    type tags = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13342 : Ojs.t) -> intf_of_js __tags_of_js x13342
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13340 : __tags intf) -> intf_to_js __tags_to_js x13340
    let (get_blocked : 'tags this -> Event.t) =
      fun (x13344 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13344) "blocked")
    let (set_blocked : 'tags this -> Event.t -> unit) =
      fun (x13346 : 'tags this) ->
        fun (x13347 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13346) "blocked"
            (Event.t_to_js x13347)
    let (get_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x13349 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13349) "upgradeneeded")
    let (set_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x13351 : 'tags this) ->
        fun (x13352 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13351) "upgradeneeded"
            (IDBVersionChangeEvent.t_to_js x13352)
    let (create :
      blocked:Event.t -> upgradeneeded:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~blocked:(x13354 : Event.t) ->
        fun ~upgradeneeded:(x13355 : IDBVersionChangeEvent.t) ->
          fun () ->
            let x13356 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13356 "blocked" (Event.t_to_js x13354);
            Ojs.set_prop_ascii x13356 "upgradeneeded"
              (IDBVersionChangeEvent.t_to_js x13355);
            t_of_js x13356
    let cast_from = Obj.magic
  end
module IDBDatabaseEventMap =
  struct
    type t = [ `IDBDatabaseEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13358 : Ojs.t) -> t_of_js x13358
    and t_0_to_js : t_0 -> Ojs.t = fun (x13357 : t) -> t_to_js x13357
    type tags = [ `IDBDatabaseEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13361 : Ojs.t) -> intf_of_js __tags_of_js x13361
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13359 : __tags intf) -> intf_to_js __tags_to_js x13359
    let (get_abort : 'tags this -> Event.t) =
      fun (x13363 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13363) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x13365 : 'tags this) ->
        fun (x13366 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13365) "abort"
            (Event.t_to_js x13366)
    let (get_close : 'tags this -> Event.t) =
      fun (x13368 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13368) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x13370 : 'tags this) ->
        fun (x13371 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13370) "close"
            (Event.t_to_js x13371)
    let (get_error : 'tags this -> Event.t) =
      fun (x13373 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13373) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13375 : 'tags this) ->
        fun (x13376 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13375) "error"
            (Event.t_to_js x13376)
    let (get_versionchange : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x13378 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13378) "versionchange")
    let (set_versionchange : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x13380 : 'tags this) ->
        fun (x13381 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13380) "versionchange"
            (IDBVersionChangeEvent.t_to_js x13381)
    let (create :
      abort:Event.t ->
        close:Event.t ->
          error:Event.t -> versionchange:IDBVersionChangeEvent.t -> unit -> t)
      =
      fun ~abort:(x13383 : Event.t) ->
        fun ~close:(x13384 : Event.t) ->
          fun ~error:(x13385 : Event.t) ->
            fun ~versionchange:(x13386 : IDBVersionChangeEvent.t) ->
              fun () ->
                let x13387 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x13387 "abort" (Event.t_to_js x13383);
                Ojs.set_prop_ascii x13387 "close" (Event.t_to_js x13384);
                Ojs.set_prop_ascii x13387 "error" (Event.t_to_js x13385);
                Ojs.set_prop_ascii x13387 "versionchange"
                  (IDBVersionChangeEvent.t_to_js x13386);
                t_of_js x13387
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEventInit =
  struct
    type t = [ `EventInit  | `FontFaceSetLoadEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13389 : Ojs.t) -> t_of_js x13389
    and t_0_to_js : t_0 -> Ojs.t = fun (x13388 : t) -> t_to_js x13388
    type tags = [ `EventInit  | `FontFaceSetLoadEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13392 : Ojs.t) -> intf_of_js __tags_of_js x13392
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13390 : __tags intf) -> intf_to_js __tags_to_js x13390
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x13394 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13394) "fontfaces")
    let (set_fontfaces : 'tags this -> FontFace.t list -> unit) =
      fun (x13397 : 'tags this) ->
        fun (x13398 : FontFace.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13397) "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x13398)
    let (create : fontfaces:FontFace.t list -> unit -> t) =
      fun ~fontfaces:(x13401 : FontFace.t list) ->
        fun () ->
          let x13402 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13402 "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x13401);
          t_of_js x13402
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEvent =
  struct
    type t = [ `Event  | `FontFaceSetLoadEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13405 : Ojs.t) -> t_of_js x13405
    and t_0_to_js : t_0 -> Ojs.t = fun (x13404 : t) -> t_to_js x13404
    type tags = [ `Event  | `FontFaceSetLoadEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13408 : Ojs.t) -> intf_of_js __tags_of_js x13408
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13406 : __tags intf) -> intf_to_js __tags_to_js x13406
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x13410 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13410) "fontfaces")
    let (create : fontfaces:FontFace.t list -> unit -> t) =
      fun ~fontfaces:(x13413 : FontFace.t list) ->
        fun () ->
          let x13414 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13414 "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x13413);
          t_of_js x13414
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
             "prototype")
    let (create' :
      type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t)
      =
      fun ~type_:(x13416 : string) ->
        fun ?eventInitDict:(x13417 : FontFaceSetLoadEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
                 (let x13418 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13418 "push" [|(Ojs.string_to_js x13416)|]);
                  (match x13417 with
                   | Some x13419 ->
                       ignore
                         (Ojs.call x13418 "push"
                            [|(FontFaceSetLoadEventInit.t_to_js x13419)|])
                   | None -> ());
                  x13418))
  end
module FontFaceSetEventMap =
  struct
    type t = [ `FontFaceSetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13421 : Ojs.t) -> t_of_js x13421
    and t_0_to_js : t_0 -> Ojs.t = fun (x13420 : t) -> t_to_js x13420
    type tags = [ `FontFaceSetEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13424 : Ojs.t) -> intf_of_js __tags_of_js x13424
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13422 : __tags intf) -> intf_to_js __tags_to_js x13422
    let (get_loading : 'tags this -> Event.t) =
      fun (x13426 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13426) "loading")
    let (set_loading : 'tags this -> Event.t -> unit) =
      fun (x13428 : 'tags this) ->
        fun (x13429 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13428) "loading"
            (Event.t_to_js x13429)
    let (get_loadingdone : 'tags this -> Event.t) =
      fun (x13431 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13431) "loadingdone")
    let (set_loadingdone : 'tags this -> Event.t -> unit) =
      fun (x13433 : 'tags this) ->
        fun (x13434 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13433) "loadingdone"
            (Event.t_to_js x13434)
    let (get_loadingerror : 'tags this -> Event.t) =
      fun (x13436 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13436) "loadingerror")
    let (set_loadingerror : 'tags this -> Event.t -> unit) =
      fun (x13438 : 'tags this) ->
        fun (x13439 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13438) "loadingerror"
            (Event.t_to_js x13439)
    let (create :
      loading:Event.t ->
        loadingdone:Event.t -> loadingerror:Event.t -> unit -> t)
      =
      fun ~loading:(x13441 : Event.t) ->
        fun ~loadingdone:(x13442 : Event.t) ->
          fun ~loadingerror:(x13443 : Event.t) ->
            fun () ->
              let x13444 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13444 "loading" (Event.t_to_js x13441);
              Ojs.set_prop_ascii x13444 "loadingdone" (Event.t_to_js x13442);
              Ojs.set_prop_ascii x13444 "loadingerror" (Event.t_to_js x13443);
              t_of_js x13444
    let cast_from = Obj.magic
  end
module FileReaderSync =
  struct
    type t = [ `FileReaderSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13446 : Ojs.t) -> t_of_js x13446
    and t_0_to_js : t_0 -> Ojs.t = fun (x13445 : t) -> t_to_js x13445
    type tags = [ `FileReaderSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13449 : Ojs.t) -> intf_of_js __tags_of_js x13449
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13447 : __tags intf) -> intf_to_js __tags_to_js x13447
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> ArrayBuffer.t_0) =
      fun (x13452 : 'tags this) ->
        fun ~blob:(x13451 : Blob.t) ->
          ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x13452) "readAsArrayBuffer"
               [|(Blob.t_to_js x13451)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> string) =
      fun (x13455 : 'tags this) ->
        fun ~blob:(x13454 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x13455) "readAsBinaryString"
               [|(Blob.t_to_js x13454)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> string) =
      fun (x13458 : 'tags this) ->
        fun ~blob:(x13457 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x13458) "readAsDataURL"
               [|(Blob.t_to_js x13457)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> string) =
      fun (x13464 : 'tags this) ->
        fun ~blob:(x13460 : Blob.t) ->
          fun ?encoding:(x13461 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x13466 = this_to_js Obj.magic x13464 in
                 Ojs.call (Ojs.get_prop_ascii x13466 "readAsText") "apply"
                   [|x13466;((let x13462 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13462 "push"
                                   [|(Blob.t_to_js x13460)|]);
                              (match x13461 with
                               | Some x13463 ->
                                   ignore
                                     (Ojs.call x13462 "push"
                                        [|(Ojs.string_to_js x13463)|])
                               | None -> ());
                              x13462))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileReaderSync") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReaderSync") [||])
  end
module FileReader =
  struct
    type t = [ `EventTarget  | `FileReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13468 : Ojs.t) -> t_of_js x13468
    and t_0_to_js : t_0 -> Ojs.t = fun (x13467 : t) -> t_to_js x13467
    type tags = [ `EventTarget  | `FileReader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13471 : Ojs.t) -> intf_of_js __tags_of_js x13471
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13469 : __tags intf) -> intf_to_js __tags_to_js x13469
    let (get_error : 'tags this -> DOMException.t or_null) =
      fun (x13473 : 'tags this) ->
        or_null_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13473) "error")
    let (get_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x13476 : 'tags this) ->
        or_null_of_js
          (fun (x13478 : Ojs.t) ->
             fun ~this:(x13479 : t) ->
               fun ~ev:(x13480 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13478
                      [|(t_to_js x13479);(ProgressEvent.t_to_js t_to_js
                                            x13480)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13476) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x13482 : 'tags this) ->
        fun (x13483 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13482) "onabort"
            (or_null_to_js
               (fun (x13484 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13485 : Ojs.t) ->
                       fun (x13486 : Ojs.t) ->
                         any_to_js
                           (x13484 ~this:(t_of_js x13485)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13486))))
               x13483)
    let (get_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x13489 : 'tags this) ->
        or_null_of_js
          (fun (x13491 : Ojs.t) ->
             fun ~this:(x13492 : t) ->
               fun ~ev:(x13493 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13491
                      [|(t_to_js x13492);(ProgressEvent.t_to_js t_to_js
                                            x13493)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13489) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x13495 : 'tags this) ->
        fun (x13496 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13495) "onerror"
            (or_null_to_js
               (fun (x13497 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13498 : Ojs.t) ->
                       fun (x13499 : Ojs.t) ->
                         any_to_js
                           (x13497 ~this:(t_of_js x13498)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13499))))
               x13496)
    let (get_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x13502 : 'tags this) ->
        or_null_of_js
          (fun (x13504 : Ojs.t) ->
             fun ~this:(x13505 : t) ->
               fun ~ev:(x13506 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13504
                      [|(t_to_js x13505);(ProgressEvent.t_to_js t_to_js
                                            x13506)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13502) "onload")
    let (set_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x13508 : 'tags this) ->
        fun (x13509 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13508) "onload"
            (or_null_to_js
               (fun (x13510 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13511 : Ojs.t) ->
                       fun (x13512 : Ojs.t) ->
                         any_to_js
                           (x13510 ~this:(t_of_js x13511)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13512))))
               x13509)
    let (get_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x13515 : 'tags this) ->
        or_null_of_js
          (fun (x13517 : Ojs.t) ->
             fun ~this:(x13518 : t) ->
               fun ~ev:(x13519 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13517
                      [|(t_to_js x13518);(ProgressEvent.t_to_js t_to_js
                                            x13519)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13515) "onloadend")
    let (set_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x13521 : 'tags this) ->
        fun (x13522 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13521) "onloadend"
            (or_null_to_js
               (fun (x13523 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13524 : Ojs.t) ->
                       fun (x13525 : Ojs.t) ->
                         any_to_js
                           (x13523 ~this:(t_of_js x13524)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13525))))
               x13522)
    let (get_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x13528 : 'tags this) ->
        or_null_of_js
          (fun (x13530 : Ojs.t) ->
             fun ~this:(x13531 : t) ->
               fun ~ev:(x13532 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13530
                      [|(t_to_js x13531);(ProgressEvent.t_to_js t_to_js
                                            x13532)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13528) "onloadstart")
    let (set_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x13534 : 'tags this) ->
        fun (x13535 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13534) "onloadstart"
            (or_null_to_js
               (fun (x13536 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13537 : Ojs.t) ->
                       fun (x13538 : Ojs.t) ->
                         any_to_js
                           (x13536 ~this:(t_of_js x13537)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13538))))
               x13535)
    let (get_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x13541 : 'tags this) ->
        or_null_of_js
          (fun (x13543 : Ojs.t) ->
             fun ~this:(x13544 : t) ->
               fun ~ev:(x13545 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x13543
                      [|(t_to_js x13544);(ProgressEvent.t_to_js t_to_js
                                            x13545)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13541) "onprogress")
    let (set_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x13547 : 'tags this) ->
        fun (x13548 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13547) "onprogress"
            (or_null_to_js
               (fun (x13549 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13550 : Ojs.t) ->
                       fun (x13551 : Ojs.t) ->
                         any_to_js
                           (x13549 ~this:(t_of_js x13550)
                              ~ev:(ProgressEvent.t_of_js t_of_js x13551))))
               x13548)
    let (get_readyState : 'tags this -> float) =
      fun (x13554 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13554) "readyState")
    let (get_result : 'tags this -> ArrayBuffer.t_0 or_string or_null) =
      fun (x13556 : 'tags this) ->
        or_null_of_js
          (fun (x13558 : Ojs.t) ->
             or_string_of_js ArrayBuffer.t_0_of_js x13558)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13556) "result")
    let (abort : 'tags this -> unit) =
      fun (x13560 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13560) "abort" [||])
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit) =
      fun (x13563 : 'tags this) ->
        fun ~blob:(x13562 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13563) "readAsArrayBuffer"
               [|(Blob.t_to_js x13562)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> unit) =
      fun (x13566 : 'tags this) ->
        fun ~blob:(x13565 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13566) "readAsBinaryString"
               [|(Blob.t_to_js x13565)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> unit) =
      fun (x13569 : 'tags this) ->
        fun ~blob:(x13568 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13569) "readAsDataURL"
               [|(Blob.t_to_js x13568)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit) =
      fun (x13575 : 'tags this) ->
        fun ~blob:(x13571 : Blob.t) ->
          fun ?encoding:(x13572 : string option) ->
            fun () ->
              ignore
                (let x13577 = this_to_js Obj.magic x13575 in
                 Ojs.call (Ojs.get_prop_ascii x13577 "readAsText") "apply"
                   [|x13577;((let x13573 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13573 "push"
                                   [|(Blob.t_to_js x13571)|]);
                              (match x13572 with
                               | Some x13574 ->
                                   ignore
                                     (Ojs.call x13573 "push"
                                        [|(Ojs.string_to_js x13574)|])
                               | None -> ());
                              x13573))|])
    let (get_DONE : 'tags this -> float) =
      fun (x13578 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13578) "DONE")
    let (get_EMPTY : 'tags this -> float) =
      fun (x13580 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13580) "EMPTY")
    let (get_LOADING : 'tags this -> float) =
      fun (x13582 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13582) "LOADING")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13592 : 'tags this) ->
        fun ~type_:(x13584 : 'K) ->
          fun ~listener:(x13585 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13586 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13594 = this_to_js Obj.magic x13592 in
                   Ojs.call (Ojs.get_prop_ascii x13594 "addEventListener")
                     "apply"
                     [|x13594;((let x13587 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13587 "push"
                                     [|(Obj.magic x13584)|]);
                                ignore
                                  (Ojs.call x13587 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13590 : Ojs.t) ->
                                             fun (x13591 : Ojs.t) ->
                                               any_to_js
                                                 (x13585
                                                    ~this:(t_of_js x13590)
                                                    ~ev:(any_of_js x13591))))|]);
                                (match x13586 with
                                 | Some x13588 ->
                                     ignore
                                       (Ojs.call x13587 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x13588)|])
                                 | None -> ());
                                x13587))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13601 : 'tags this) ->
        fun ~type_:(x13595 : string) ->
          fun ~listener:(x13596 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13597 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13603 = this_to_js Obj.magic x13601 in
                   Ojs.call (Ojs.get_prop_ascii x13603 "addEventListener")
                     "apply"
                     [|x13603;((let x13598 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13598 "push"
                                     [|(Ojs.string_to_js x13595)|]);
                                ignore
                                  (Ojs.call x13598 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13596)|]);
                                (match x13597 with
                                 | Some x13599 ->
                                     ignore
                                       (Ojs.call x13598 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x13599)|])
                                 | None -> ());
                                x13598))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13612 : 'tags this) ->
        fun ~type_:(x13604 : 'K) ->
          fun ~listener:(x13605 : this:t -> ev:any -> any) ->
            fun ?options:(x13606 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13614 = this_to_js Obj.magic x13612 in
                   Ojs.call (Ojs.get_prop_ascii x13614 "removeEventListener")
                     "apply"
                     [|x13614;((let x13607 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13607 "push"
                                     [|(Obj.magic x13604)|]);
                                ignore
                                  (Ojs.call x13607 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13610 : Ojs.t) ->
                                             fun (x13611 : Ojs.t) ->
                                               any_to_js
                                                 (x13605
                                                    ~this:(t_of_js x13610)
                                                    ~ev:(any_of_js x13611))))|]);
                                (match x13606 with
                                 | Some x13608 ->
                                     ignore
                                       (Ojs.call x13607 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13608)|])
                                 | None -> ());
                                x13607))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13621 : 'tags this) ->
        fun ~type_:(x13615 : string) ->
          fun ~listener:(x13616 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x13617 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13623 = this_to_js Obj.magic x13621 in
                   Ojs.call (Ojs.get_prop_ascii x13623 "removeEventListener")
                     "apply"
                     [|x13623;((let x13618 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13618 "push"
                                     [|(Ojs.string_to_js x13615)|]);
                                ignore
                                  (Ojs.call x13618 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13616)|]);
                                (match x13617 with
                                 | Some x13619 ->
                                     ignore
                                       (Ojs.call x13618 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13619)|])
                                 | None -> ());
                                x13618))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReader") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "DONE")
    let (empty : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "EMPTY")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "LOADING")
  end
module FileReaderEventMap =
  struct
    type t = [ `FileReaderEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13625 : Ojs.t) -> t_of_js x13625
    and t_0_to_js : t_0 -> Ojs.t = fun (x13624 : t) -> t_to_js x13624
    type tags = [ `FileReaderEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13628 : Ojs.t) -> intf_of_js __tags_of_js x13628
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13626 : __tags intf) -> intf_to_js __tags_to_js x13626
    let (get_abort : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13630 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13630) "abort")
    let (set_abort : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13633 : 'tags this) ->
        fun (x13634 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13633) "abort"
            (ProgressEvent.t_to_js FileReader.t_to_js x13634)
    let (get_error : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13637 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13637) "error")
    let (set_error : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13640 : 'tags this) ->
        fun (x13641 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13640) "error"
            (ProgressEvent.t_to_js FileReader.t_to_js x13641)
    let (get_load : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13644 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13644) "load")
    let (set_load : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13647 : 'tags this) ->
        fun (x13648 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13647) "load"
            (ProgressEvent.t_to_js FileReader.t_to_js x13648)
    let (get_loadend : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13651 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13651) "loadend")
    let (set_loadend : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13654 : 'tags this) ->
        fun (x13655 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13654) "loadend"
            (ProgressEvent.t_to_js FileReader.t_to_js x13655)
    let (get_loadstart : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13658 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13658) "loadstart")
    let (set_loadstart : 'tags this -> FileReader.t ProgressEvent.t -> unit)
      =
      fun (x13661 : 'tags this) ->
        fun (x13662 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13661) "loadstart"
            (ProgressEvent.t_to_js FileReader.t_to_js x13662)
    let (get_progress : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x13665 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13665) "progress")
    let (set_progress : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x13668 : 'tags this) ->
        fun (x13669 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13668) "progress"
            (ProgressEvent.t_to_js FileReader.t_to_js x13669)
    let (create :
      abort:FileReader.t ProgressEvent.t ->
        error:FileReader.t ProgressEvent.t ->
          load:FileReader.t ProgressEvent.t ->
            loadend:FileReader.t ProgressEvent.t ->
              loadstart:FileReader.t ProgressEvent.t ->
                progress:FileReader.t ProgressEvent.t -> unit -> t)
      =
      fun ~abort:(x13672 : FileReader.t ProgressEvent.t) ->
        fun ~error:(x13673 : FileReader.t ProgressEvent.t) ->
          fun ~load:(x13674 : FileReader.t ProgressEvent.t) ->
            fun ~loadend:(x13675 : FileReader.t ProgressEvent.t) ->
              fun ~loadstart:(x13676 : FileReader.t ProgressEvent.t) ->
                fun ~progress:(x13677 : FileReader.t ProgressEvent.t) ->
                  fun () ->
                    let x13678 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x13678 "abort"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13672);
                    Ojs.set_prop_ascii x13678 "error"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13673);
                    Ojs.set_prop_ascii x13678 "load"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13674);
                    Ojs.set_prop_ascii x13678 "loadend"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13675);
                    Ojs.set_prop_ascii x13678 "loadstart"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13676);
                    Ojs.set_prop_ascii x13678 "progress"
                      (ProgressEvent.t_to_js FileReader.t_to_js x13677);
                    t_of_js x13678
    let cast_from = Obj.magic
  end
module FileList =
  struct
    type t =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13686 : Ojs.t) -> t_of_js x13686
    and t_0_to_js : t_0 -> Ojs.t = fun (x13685 : t) -> t_to_js x13685
    type tags =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13689 : Ojs.t) -> intf_of_js __tags_of_js x13689
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13687 : __tags intf) -> intf_to_js __tags_to_js x13687
    let (get_length : 'tags this -> float) =
      fun (x13691 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13691) "length")
    let (item : 'tags this -> index:float -> File.t or_null) =
      fun (x13694 : 'tags this) ->
        fun ~index:(x13693 : float) ->
          or_null_of_js File.t_of_js
            (Ojs.call (this_to_js Obj.magic x13694) "item"
               [|(Ojs.float_to_js x13693)|])
    let (get : 'tags this -> float -> File.t) =
      fun (x13697 : 'tags this) ->
        fun (x13699 : float) ->
          File.t_of_js
            (Ojs.get_prop (this_to_js Obj.magic x13697)
               (Ojs.float_to_js x13699))
    let (set : 'tags this -> float -> File.t -> unit) =
      fun (x13700 : 'tags this) ->
        fun (x13702 : float) ->
          fun (x13703 : File.t) ->
            Ojs.set_prop (this_to_js Obj.magic x13700)
              (Ojs.float_to_js x13702) (File.t_to_js x13703)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileList") [||])
  end
module EventSourceEventMap =
  struct
    type t = [ `EventSourceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13705 : Ojs.t) -> t_of_js x13705
    and t_0_to_js : t_0 -> Ojs.t = fun (x13704 : t) -> t_to_js x13704
    type tags = [ `EventSourceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13708 : Ojs.t) -> intf_of_js __tags_of_js x13708
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13706 : __tags intf) -> intf_to_js __tags_to_js x13706
    let (get_error : 'tags this -> Event.t) =
      fun (x13710 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13710) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x13712 : 'tags this) ->
        fun (x13713 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13712) "error"
            (Event.t_to_js x13713)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x13715 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13715) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13717 : 'tags this) ->
        fun (x13718 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13717) "message"
            (MessageEvent.t_0_to_js x13718)
    let (get_open : 'tags this -> Event.t) =
      fun (x13720 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13720) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x13722 : 'tags this) ->
        fun (x13723 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13722) "open"
            (Event.t_to_js x13723)
    let (create :
      error:Event.t -> message:MessageEvent.t_0 -> open_:Event.t -> unit -> t)
      =
      fun ~error:(x13725 : Event.t) ->
        fun ~message:(x13726 : MessageEvent.t_0) ->
          fun ~open_:(x13727 : Event.t) ->
            fun () ->
              let x13728 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x13728 "error" (Event.t_to_js x13725);
              Ojs.set_prop_ascii x13728 "message"
                (MessageEvent.t_0_to_js x13726);
              Ojs.set_prop_ascii x13728 "open" (Event.t_to_js x13727);
              t_of_js x13728
    let cast_from = Obj.magic
  end
module EventSourceInit =
  struct
    type t = [ `EventSourceInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13730 : Ojs.t) -> t_of_js x13730
    and t_0_to_js : t_0 -> Ojs.t = fun (x13729 : t) -> t_to_js x13729
    type tags = [ `EventSourceInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13733 : Ojs.t) -> intf_of_js __tags_of_js x13733
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13731 : __tags intf) -> intf_to_js __tags_to_js x13731
    let (get_withCredentials : 'tags this -> bool) =
      fun (x13735 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13735) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x13737 : 'tags this) ->
        fun (x13738 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13737) "withCredentials"
            (Ojs.bool_to_js x13738)
    let (create : withCredentials:bool -> unit -> t) =
      fun ~withCredentials:(x13740 : bool) ->
        fun () ->
          let x13741 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x13741 "withCredentials" (Ojs.bool_to_js x13740);
          t_of_js x13741
    let cast_from = Obj.magic
  end
module EventSource =
  struct
    type t = [ `EventSource  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13743 : Ojs.t) -> t_of_js x13743
    and t_0_to_js : t_0 -> Ojs.t = fun (x13742 : t) -> t_to_js x13742
    type tags = [ `EventSource  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13746 : Ojs.t) -> intf_of_js __tags_of_js x13746
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13744 : __tags intf) -> intf_to_js __tags_to_js x13744
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x13748 : 'tags this) ->
        or_null_of_js
          (fun (x13750 : Ojs.t) ->
             fun ~this:(x13751 : t) ->
               fun ~ev:(x13752 : Event.t) ->
                 any_of_js
                   (Ojs.apply x13750
                      [|(t_to_js x13751);(Event.t_to_js x13752)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13748) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x13753 : 'tags this) ->
        fun (x13754 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13753) "onerror"
            (or_null_to_js
               (fun (x13755 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13756 : Ojs.t) ->
                       fun (x13757 : Ojs.t) ->
                         any_to_js
                           (x13755 ~this:(t_of_js x13756)
                              ~ev:(Event.t_of_js x13757)))) x13754)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x13759 : 'tags this) ->
        or_null_of_js
          (fun (x13761 : Ojs.t) ->
             fun ~this:(x13762 : t) ->
               fun ~ev:(x13763 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13761
                      [|(t_to_js x13762);(MessageEvent.t_0_to_js x13763)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13759) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x13764 : 'tags this) ->
        fun (x13765 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13764) "onmessage"
            (or_null_to_js
               (fun (x13766 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13767 : Ojs.t) ->
                       fun (x13768 : Ojs.t) ->
                         any_to_js
                           (x13766 ~this:(t_of_js x13767)
                              ~ev:(MessageEvent.t_0_of_js x13768)))) x13765)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x13770 : 'tags this) ->
        or_null_of_js
          (fun (x13772 : Ojs.t) ->
             fun ~this:(x13773 : t) ->
               fun ~ev:(x13774 : Event.t) ->
                 any_of_js
                   (Ojs.apply x13772
                      [|(t_to_js x13773);(Event.t_to_js x13774)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13770) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x13775 : 'tags this) ->
        fun (x13776 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13775) "onopen"
            (or_null_to_js
               (fun (x13777 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13778 : Ojs.t) ->
                       fun (x13779 : Ojs.t) ->
                         any_to_js
                           (x13777 ~this:(t_of_js x13778)
                              ~ev:(Event.t_of_js x13779)))) x13776)
    let (get_readyState : 'tags this -> float) =
      fun (x13781 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13781) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x13783 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13783) "url")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x13785 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13785) "withCredentials")
    let (close : 'tags this -> unit) =
      fun (x13787 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13787) "close" [||])
    let (get_CLOSED : 'tags this -> float) =
      fun (x13789 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13789) "CLOSED")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x13791 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13791) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x13793 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13793) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13803 : 'tags this) ->
        fun ~type_:(x13795 : 'K) ->
          fun ~listener:(x13796 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13797 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13805 = this_to_js Obj.magic x13803 in
                   Ojs.call (Ojs.get_prop_ascii x13805 "addEventListener")
                     "apply"
                     [|x13805;((let x13798 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13798 "push"
                                     [|(Obj.magic x13795)|]);
                                ignore
                                  (Ojs.call x13798 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13801 : Ojs.t) ->
                                             fun (x13802 : Ojs.t) ->
                                               any_to_js
                                                 (x13796
                                                    ~this:(t_of_js x13801)
                                                    ~ev:(any_of_js x13802))))|]);
                                (match x13797 with
                                 | Some x13799 ->
                                     ignore
                                       (Ojs.call x13798 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x13799)|])
                                 | None -> ());
                                x13798))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13812 : 'tags this) ->
        fun ~type_:(x13806 : string) ->
          fun ~listener:(x13807 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13808 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13814 = this_to_js Obj.magic x13812 in
                   Ojs.call (Ojs.get_prop_ascii x13814 "addEventListener")
                     "apply"
                     [|x13814;((let x13809 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13809 "push"
                                     [|(Ojs.string_to_js x13806)|]);
                                ignore
                                  (Ojs.call x13809 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13807)|]);
                                (match x13808 with
                                 | Some x13810 ->
                                     ignore
                                       (Ojs.call x13809 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x13810)|])
                                 | None -> ());
                                x13809))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13823 : 'tags this) ->
        fun ~type_:(x13815 : 'K) ->
          fun ~listener:(x13816 : this:t -> ev:any -> any) ->
            fun ?options:(x13817 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13825 = this_to_js Obj.magic x13823 in
                   Ojs.call (Ojs.get_prop_ascii x13825 "removeEventListener")
                     "apply"
                     [|x13825;((let x13818 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13818 "push"
                                     [|(Obj.magic x13815)|]);
                                ignore
                                  (Ojs.call x13818 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13821 : Ojs.t) ->
                                             fun (x13822 : Ojs.t) ->
                                               any_to_js
                                                 (x13816
                                                    ~this:(t_of_js x13821)
                                                    ~ev:(any_of_js x13822))))|]);
                                (match x13817 with
                                 | Some x13819 ->
                                     ignore
                                       (Ojs.call x13818 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13819)|])
                                 | None -> ());
                                x13818))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13832 : 'tags this) ->
        fun ~type_:(x13826 : string) ->
          fun ~listener:(x13827 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x13828 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13834 = this_to_js Obj.magic x13832 in
                   Ojs.call (Ojs.get_prop_ascii x13834 "removeEventListener")
                     "apply"
                     [|x13834;((let x13829 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13829 "push"
                                     [|(Ojs.string_to_js x13826)|]);
                                ignore
                                  (Ojs.call x13829 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13827)|]);
                                (match x13828 with
                                 | Some x13830 ->
                                     ignore
                                       (Ojs.call x13829 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13830)|])
                                 | None -> ());
                                x13829))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "prototype")
    let (create :
      url:URL.t or_string ->
        ?eventSourceInitDict:EventSourceInit.t -> unit -> t)
      =
      fun ~url:(x13835 : URL.t or_string) ->
        fun ?eventSourceInitDict:(x13836 : EventSourceInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EventSource")
                 (let x13837 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13837 "push"
                       [|(or_string_to_js URL.t_to_js x13835)|]);
                  (match x13836 with
                   | Some x13838 ->
                       ignore
                         (Ojs.call x13837 "push"
                            [|(EventSourceInit.t_to_js x13838)|])
                   | None -> ());
                  x13837))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CLOSED")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "OPEN")
  end
module EXT_texture_compression_rgtc =
  struct
    type t = [ `EXT_texture_compression_rgtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13841 : Ojs.t) -> t_of_js x13841
    and t_0_to_js : t_0 -> Ojs.t = fun (x13840 : t) -> t_to_js x13840
    type tags = [ `EXT_texture_compression_rgtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13844 : Ojs.t) -> intf_of_js __tags_of_js x13844
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13842 : __tags intf) -> intf_to_js __tags_to_js x13842
    let (get_COMPRESSED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t) =
      fun (x13846 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13846)
             "COMPRESSED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x13848 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13848)
             "COMPRESSED_RED_RGTC1_EXT")
    let (get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t)
      =
      fun (x13850 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13850)
             "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_SIGNED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x13852 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13852)
             "COMPRESSED_SIGNED_RED_RGTC1_EXT")
    let (create :
      compressed_red_green_rgtc2_ext:GLenum.t ->
        compressed_red_rgtc1_ext:GLenum.t ->
          compressed_signed_red_green_rgtc2_ext:GLenum.t ->
            compressed_signed_red_rgtc1_ext:GLenum.t -> unit -> t)
      =
      fun ~compressed_red_green_rgtc2_ext:(x13854 : GLenum.t) ->
        fun ~compressed_red_rgtc1_ext:(x13855 : GLenum.t) ->
          fun ~compressed_signed_red_green_rgtc2_ext:(x13856 : GLenum.t) ->
            fun ~compressed_signed_red_rgtc1_ext:(x13857 : GLenum.t) ->
              fun () ->
                let x13858 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x13858 "COMPRESSED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x13854);
                Ojs.set_prop_ascii x13858 "COMPRESSED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x13855);
                Ojs.set_prop_ascii x13858
                  "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"
                  (GLenum.t_to_js x13856);
                Ojs.set_prop_ascii x13858 "COMPRESSED_SIGNED_RED_RGTC1_EXT"
                  (GLenum.t_to_js x13857);
                t_of_js x13858
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13860 : Ojs.t) -> t_of_js x13860
    and t_0_to_js : t_0 -> Ojs.t = fun (x13859 : t) -> t_to_js x13859
    type tags =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13863 : Ojs.t) -> intf_of_js __tags_of_js x13863
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13861 : __tags intf) -> intf_to_js __tags_to_js x13861
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x13865 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13865) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13867 : 'tags this) ->
        fun (x13868 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13867) "message"
            (MessageEvent.t_0_to_js x13868)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x13870 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13870) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13872 : 'tags this) ->
        fun (x13873 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13872) "messageerror"
            (MessageEvent.t_0_to_js x13873)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x13875 : MessageEvent.t_0) ->
        fun ~messageerror:(x13876 : MessageEvent.t_0) ->
          fun () ->
            let x13877 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x13877 "message"
              (MessageEvent.t_0_to_js x13875);
            Ojs.set_prop_ascii x13877 "messageerror"
              (MessageEvent.t_0_to_js x13876);
            t_of_js x13877
    let cast_from = Obj.magic
  end
module FrameRequestCallback =
  struct
    type t = [ `FrameRequestCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13879 : Ojs.t) -> t_of_js x13879
    and t_0_to_js : t_0 -> Ojs.t = fun (x13878 : t) -> t_to_js x13878
    type tags = [ `FrameRequestCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FrameRequestCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13882 : Ojs.t) -> intf_of_js __tags_of_js x13882
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13880 : __tags intf) -> intf_to_js __tags_to_js x13880
    let (apply : 'tags this -> time:DOMHighResTimeStamp.t -> unit) =
      fun (x13885 : 'tags this) ->
        fun ~time:(x13884 : DOMHighResTimeStamp.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic x13885)
               [|(DOMHighResTimeStamp.t_to_js x13884)|])
    let cast_from = Obj.magic
  end
module AnimationFrameProvider =
  struct
    type t = [ `AnimationFrameProvider ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13888 : Ojs.t) -> t_of_js x13888
    and t_0_to_js : t_0 -> Ojs.t = fun (x13887 : t) -> t_to_js x13887
    type tags = [ `AnimationFrameProvider ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AnimationFrameProvider ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13891 : Ojs.t) -> intf_of_js __tags_of_js x13891
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13889 : __tags intf) -> intf_to_js __tags_to_js x13889
    let (cancelAnimationFrame : 'tags this -> handle:float -> unit) =
      fun (x13894 : 'tags this) ->
        fun ~handle:(x13893 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13894) "cancelAnimationFrame"
               [|(Ojs.float_to_js x13893)|])
    let (requestAnimationFrame :
      'tags this -> callback:FrameRequestCallback.t -> float) =
      fun (x13897 : 'tags this) ->
        fun ~callback:(x13896 : FrameRequestCallback.t) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x13897) "requestAnimationFrame"
               [|(FrameRequestCallback.t_to_js x13896)|])
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScope =
  struct
    type t =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13900 : Ojs.t) -> t_of_js x13900
    and t_0_to_js : t_0 -> Ojs.t = fun (x13899 : t) -> t_to_js x13899
    type tags =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13903 : Ojs.t) -> intf_of_js __tags_of_js x13903
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13901 : __tags intf) -> intf_to_js __tags_to_js x13901
    let (get_name : 'tags this -> string) =
      fun (x13905 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13905) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x13907 : 'tags this) ->
        or_null_of_js
          (fun (x13909 : Ojs.t) ->
             fun ~this:(x13910 : t) ->
               fun ~ev:(x13911 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13909
                      [|(t_to_js x13910);(MessageEvent.t_0_to_js x13911)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13907) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x13912 : 'tags this) ->
        fun (x13913 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13912) "onmessage"
            (or_null_to_js
               (fun (x13914 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13915 : Ojs.t) ->
                       fun (x13916 : Ojs.t) ->
                         any_to_js
                           (x13914 ~this:(t_of_js x13915)
                              ~ev:(MessageEvent.t_0_of_js x13916)))) x13913)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x13918 : 'tags this) ->
        or_null_of_js
          (fun (x13920 : Ojs.t) ->
             fun ~this:(x13921 : t) ->
               fun ~ev:(x13922 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13920
                      [|(t_to_js x13921);(MessageEvent.t_0_to_js x13922)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13918) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x13923 : 'tags this) ->
        fun (x13924 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13923) "onmessageerror"
            (or_null_to_js
               (fun (x13925 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13926 : Ojs.t) ->
                       fun (x13927 : Ojs.t) ->
                         any_to_js
                           (x13925 ~this:(t_of_js x13926)
                              ~ev:(MessageEvent.t_0_of_js x13927)))) x13924)
    let (close : 'tags this -> unit) =
      fun (x13929 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13929) "close" [||])
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x13934 : 'tags this) ->
        fun ~message:(x13931 : any) ->
          fun ~transfer:(x13932 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13934) "postMessage"
                 [|(any_to_js x13931);(Ojs.list_to_js Transferable.t_to_js
                                         x13932)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x13940 : 'tags this) ->
        fun ~message:(x13936 : any) ->
          fun ?options:(x13937 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x13942 = this_to_js Obj.magic x13940 in
                 Ojs.call (Ojs.get_prop_ascii x13942 "postMessage") "apply"
                   [|x13942;((let x13938 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13938 "push"
                                   [|(any_to_js x13936)|]);
                              (match x13937 with
                               | Some x13939 ->
                                   ignore
                                     (Ojs.call x13938 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x13939)|])
                               | None -> ());
                              x13938))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13951 : 'tags this) ->
        fun ~type_:(x13943 : 'K) ->
          fun ~listener:(x13944 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13945 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13953 = this_to_js Obj.magic x13951 in
                   Ojs.call (Ojs.get_prop_ascii x13953 "addEventListener")
                     "apply"
                     [|x13953;((let x13946 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13946 "push"
                                     [|(Obj.magic x13943)|]);
                                ignore
                                  (Ojs.call x13946 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13949 : Ojs.t) ->
                                             fun (x13950 : Ojs.t) ->
                                               any_to_js
                                                 (x13944
                                                    ~this:(t_of_js x13949)
                                                    ~ev:(any_of_js x13950))))|]);
                                (match x13945 with
                                 | Some x13947 ->
                                     ignore
                                       (Ojs.call x13946 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x13947)|])
                                 | None -> ());
                                x13946))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13960 : 'tags this) ->
        fun ~type_:(x13954 : string) ->
          fun ~listener:(x13955 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13956 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13962 = this_to_js Obj.magic x13960 in
                   Ojs.call (Ojs.get_prop_ascii x13962 "addEventListener")
                     "apply"
                     [|x13962;((let x13957 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13957 "push"
                                     [|(Ojs.string_to_js x13954)|]);
                                ignore
                                  (Ojs.call x13957 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13955)|]);
                                (match x13956 with
                                 | Some x13958 ->
                                     ignore
                                       (Ojs.call x13957 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x13958)|])
                                 | None -> ());
                                x13957))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13971 : 'tags this) ->
        fun ~type_:(x13963 : 'K) ->
          fun ~listener:(x13964 : this:t -> ev:any -> any) ->
            fun ?options:(x13965 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13973 = this_to_js Obj.magic x13971 in
                   Ojs.call (Ojs.get_prop_ascii x13973 "removeEventListener")
                     "apply"
                     [|x13973;((let x13966 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13966 "push"
                                     [|(Obj.magic x13963)|]);
                                ignore
                                  (Ojs.call x13966 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13969 : Ojs.t) ->
                                             fun (x13970 : Ojs.t) ->
                                               any_to_js
                                                 (x13964
                                                    ~this:(t_of_js x13969)
                                                    ~ev:(any_of_js x13970))))|]);
                                (match x13965 with
                                 | Some x13967 ->
                                     ignore
                                       (Ojs.call x13966 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13967)|])
                                 | None -> ());
                                x13966))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13980 : 'tags this) ->
        fun ~type_:(x13974 : string) ->
          fun ~listener:(x13975 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x13976 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13982 = this_to_js Obj.magic x13980 in
                   Ojs.call (Ojs.get_prop_ascii x13982 "removeEventListener")
                     "apply"
                     [|x13982;((let x13977 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13977 "push"
                                     [|(Ojs.string_to_js x13974)|]);
                                ignore
                                  (Ojs.call x13977 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13975)|]);
                                (match x13976 with
                                 | Some x13978 ->
                                     ignore
                                       (Ojs.call x13977 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13978)|])
                                 | None -> ());
                                x13977))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             [||])
  end
module DOMRectInit =
  struct
    type t = [ `DOMRectInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13984 : Ojs.t) -> t_of_js x13984
    and t_0_to_js : t_0 -> Ojs.t = fun (x13983 : t) -> t_to_js x13983
    type tags = [ `DOMRectInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13987 : Ojs.t) -> intf_of_js __tags_of_js x13987
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13985 : __tags intf) -> intf_to_js __tags_to_js x13985
    let (get_height : 'tags this -> float) =
      fun (x13989 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13989) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x13991 : 'tags this) ->
        fun (x13992 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13991) "height"
            (Ojs.float_to_js x13992)
    let (get_width : 'tags this -> float) =
      fun (x13994 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13994) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x13996 : 'tags this) ->
        fun (x13997 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13996) "width"
            (Ojs.float_to_js x13997)
    let (get_x : 'tags this -> float) =
      fun (x13999 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13999) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14001 : 'tags this) ->
        fun (x14002 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14001) "x"
            (Ojs.float_to_js x14002)
    let (get_y : 'tags this -> float) =
      fun (x14004 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14004) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14006 : 'tags this) ->
        fun (x14007 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14006) "y"
            (Ojs.float_to_js x14007)
    let (create :
      height:float -> width:float -> x:float -> y:float -> unit -> t) =
      fun ~height:(x14009 : float) ->
        fun ~width:(x14010 : float) ->
          fun ~x:(x14011 : float) ->
            fun ~y:(x14012 : float) ->
              fun () ->
                let x14013 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14013 "height" (Ojs.float_to_js x14009);
                Ojs.set_prop_ascii x14013 "width" (Ojs.float_to_js x14010);
                Ojs.set_prop_ascii x14013 "x" (Ojs.float_to_js x14011);
                Ojs.set_prop_ascii x14013 "y" (Ojs.float_to_js x14012);
                t_of_js x14013
    let cast_from = Obj.magic
  end
module DOMRectReadOnly =
  struct
    type t = [ `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14015 : Ojs.t) -> t_of_js x14015
    and t_0_to_js : t_0 -> Ojs.t = fun (x14014 : t) -> t_to_js x14014
    type tags = [ `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14018 : Ojs.t) -> intf_of_js __tags_of_js x14018
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14016 : __tags intf) -> intf_to_js __tags_to_js x14016
    let (get_bottom : 'tags this -> float) =
      fun (x14020 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14020) "bottom")
    let (get_height : 'tags this -> float) =
      fun (x14022 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14022) "height")
    let (get_left : 'tags this -> float) =
      fun (x14024 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14024) "left")
    let (get_right : 'tags this -> float) =
      fun (x14026 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14026) "right")
    let (get_top : 'tags this -> float) =
      fun (x14028 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14028) "top")
    let (get_width : 'tags this -> float) =
      fun (x14030 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14030) "width")
    let (get_x : 'tags this -> float) =
      fun (x14032 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14032) "x")
    let (get_y : 'tags this -> float) =
      fun (x14034 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14034) "y")
    let (toJSON : 'tags this -> any) =
      fun (x14036 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14036) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly") "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x14038 : float option) ->
        fun ?y:(x14039 : float option) ->
          fun ?width:(x14040 : float option) ->
            fun ?height:(x14041 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
                     (let x14042 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14038 with
                       | Some x14046 ->
                           ignore
                             (Ojs.call x14042 "push"
                                [|(Ojs.float_to_js x14046)|])
                       | None -> ());
                      (match x14039 with
                       | Some x14045 ->
                           ignore
                             (Ojs.call x14042 "push"
                                [|(Ojs.float_to_js x14045)|])
                       | None -> ());
                      (match x14040 with
                       | Some x14044 ->
                           ignore
                             (Ojs.call x14042 "push"
                                [|(Ojs.float_to_js x14044)|])
                       | None -> ());
                      (match x14041 with
                       | Some x14043 ->
                           ignore
                             (Ojs.call x14042 "push"
                                [|(Ojs.float_to_js x14043)|])
                       | None -> ());
                      x14042))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x14047 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x14050 = Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x14050 "fromRect") "apply"
               [|x14050;((let x14048 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14047 with
                           | Some x14049 ->
                               ignore
                                 (Ojs.call x14048 "push"
                                    [|(DOMRectInit.t_to_js x14049)|])
                           | None -> ());
                          x14048))|])
  end
module DOMRect =
  struct
    type t = [ `DOMRect  | `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14052 : Ojs.t) -> t_of_js x14052
    and t_0_to_js : t_0 -> Ojs.t = fun (x14051 : t) -> t_to_js x14051
    type tags = [ `DOMRect  | `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14055 : Ojs.t) -> intf_of_js __tags_of_js x14055
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14053 : __tags intf) -> intf_to_js __tags_to_js x14053
    let (get_height : 'tags this -> float) =
      fun (x14057 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14057) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x14059 : 'tags this) ->
        fun (x14060 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14059) "height"
            (Ojs.float_to_js x14060)
    let (get_width : 'tags this -> float) =
      fun (x14062 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14062) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x14064 : 'tags this) ->
        fun (x14065 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14064) "width"
            (Ojs.float_to_js x14065)
    let (get_x : 'tags this -> float) =
      fun (x14067 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14067) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14069 : 'tags this) ->
        fun (x14070 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14069) "x"
            (Ojs.float_to_js x14070)
    let (get_y : 'tags this -> float) =
      fun (x14072 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14072) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14074 : 'tags this) ->
        fun (x14075 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14074) "y"
            (Ojs.float_to_js x14075)
    let (create :
      height:float -> width:float -> x:float -> y:float -> unit -> t) =
      fun ~height:(x14077 : float) ->
        fun ~width:(x14078 : float) ->
          fun ~x:(x14079 : float) ->
            fun ~y:(x14080 : float) ->
              fun () ->
                let x14081 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14081 "height" (Ojs.float_to_js x14077);
                Ojs.set_prop_ascii x14081 "width" (Ojs.float_to_js x14078);
                Ojs.set_prop_ascii x14081 "x" (Ojs.float_to_js x14079);
                Ojs.set_prop_ascii x14081 "y" (Ojs.float_to_js x14080);
                t_of_js x14081
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMRect")
             "prototype")
    let (create' :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x14082 : float option) ->
        fun ?y:(x14083 : float option) ->
          fun ?width:(x14084 : float option) ->
            fun ?height:(x14085 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMRect")
                     (let x14086 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14082 with
                       | Some x14090 ->
                           ignore
                             (Ojs.call x14086 "push"
                                [|(Ojs.float_to_js x14090)|])
                       | None -> ());
                      (match x14083 with
                       | Some x14089 ->
                           ignore
                             (Ojs.call x14086 "push"
                                [|(Ojs.float_to_js x14089)|])
                       | None -> ());
                      (match x14084 with
                       | Some x14088 ->
                           ignore
                             (Ojs.call x14086 "push"
                                [|(Ojs.float_to_js x14088)|])
                       | None -> ());
                      (match x14085 with
                       | Some x14087 ->
                           ignore
                             (Ojs.call x14086 "push"
                                [|(Ojs.float_to_js x14087)|])
                       | None -> ());
                      x14086))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x14091 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x14094 = Ojs.get_prop_ascii Ojs.global "DOMRect" in
             Ojs.call (Ojs.get_prop_ascii x14094 "fromRect") "apply"
               [|x14094;((let x14092 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14091 with
                           | Some x14093 ->
                               ignore
                                 (Ojs.call x14092 "push"
                                    [|(DOMRectInit.t_to_js x14093)|])
                           | None -> ());
                          x14092))|])
  end
module DOMPointInit =
  struct
    type t = [ `DOMPointInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14096 : Ojs.t) -> t_of_js x14096
    and t_0_to_js : t_0 -> Ojs.t = fun (x14095 : t) -> t_to_js x14095
    type tags = [ `DOMPointInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14099 : Ojs.t) -> intf_of_js __tags_of_js x14099
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14097 : __tags intf) -> intf_to_js __tags_to_js x14097
    let (get_w : 'tags this -> float) =
      fun (x14101 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14101) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x14103 : 'tags this) ->
        fun (x14104 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14103) "w"
            (Ojs.float_to_js x14104)
    let (get_x : 'tags this -> float) =
      fun (x14106 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14106) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14108 : 'tags this) ->
        fun (x14109 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14108) "x"
            (Ojs.float_to_js x14109)
    let (get_y : 'tags this -> float) =
      fun (x14111 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14111) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14113 : 'tags this) ->
        fun (x14114 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14113) "y"
            (Ojs.float_to_js x14114)
    let (get_z : 'tags this -> float) =
      fun (x14116 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14116) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x14118 : 'tags this) ->
        fun (x14119 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14118) "z"
            (Ojs.float_to_js x14119)
    let (create : w:float -> x:float -> y:float -> z:float -> unit -> t) =
      fun ~w:(x14121 : float) ->
        fun ~x:(x14122 : float) ->
          fun ~y:(x14123 : float) ->
            fun ~z:(x14124 : float) ->
              fun () ->
                let x14125 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14125 "w" (Ojs.float_to_js x14121);
                Ojs.set_prop_ascii x14125 "x" (Ojs.float_to_js x14122);
                Ojs.set_prop_ascii x14125 "y" (Ojs.float_to_js x14123);
                Ojs.set_prop_ascii x14125 "z" (Ojs.float_to_js x14124);
                t_of_js x14125
    let cast_from = Obj.magic
  end
module DOMQuadInit =
  struct
    type t = [ `DOMQuadInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14127 : Ojs.t) -> t_of_js x14127
    and t_0_to_js : t_0 -> Ojs.t = fun (x14126 : t) -> t_to_js x14126
    type tags = [ `DOMQuadInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14130 : Ojs.t) -> intf_of_js __tags_of_js x14130
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14128 : __tags intf) -> intf_to_js __tags_to_js x14128
    let (get_p1 : 'tags this -> DOMPointInit.t) =
      fun (x14132 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14132) "p1")
    let (set_p1 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14134 : 'tags this) ->
        fun (x14135 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14134) "p1"
            (DOMPointInit.t_to_js x14135)
    let (get_p2 : 'tags this -> DOMPointInit.t) =
      fun (x14137 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14137) "p2")
    let (set_p2 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14139 : 'tags this) ->
        fun (x14140 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14139) "p2"
            (DOMPointInit.t_to_js x14140)
    let (get_p3 : 'tags this -> DOMPointInit.t) =
      fun (x14142 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14142) "p3")
    let (set_p3 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14144 : 'tags this) ->
        fun (x14145 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14144) "p3"
            (DOMPointInit.t_to_js x14145)
    let (get_p4 : 'tags this -> DOMPointInit.t) =
      fun (x14147 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14147) "p4")
    let (set_p4 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x14149 : 'tags this) ->
        fun (x14150 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14149) "p4"
            (DOMPointInit.t_to_js x14150)
    let (create :
      p1:DOMPointInit.t ->
        p2:DOMPointInit.t ->
          p3:DOMPointInit.t -> p4:DOMPointInit.t -> unit -> t)
      =
      fun ~p1:(x14152 : DOMPointInit.t) ->
        fun ~p2:(x14153 : DOMPointInit.t) ->
          fun ~p3:(x14154 : DOMPointInit.t) ->
            fun ~p4:(x14155 : DOMPointInit.t) ->
              fun () ->
                let x14156 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14156 "p1" (DOMPointInit.t_to_js x14152);
                Ojs.set_prop_ascii x14156 "p2" (DOMPointInit.t_to_js x14153);
                Ojs.set_prop_ascii x14156 "p3" (DOMPointInit.t_to_js x14154);
                Ojs.set_prop_ascii x14156 "p4" (DOMPointInit.t_to_js x14155);
                t_of_js x14156
    let cast_from = Obj.magic
  end
module DOMMatrixInit =
  struct
    type t = [ `DOMMatrix2DInit  | `DOMMatrixInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14158 : Ojs.t) -> t_of_js x14158
    and t_0_to_js : t_0 -> Ojs.t = fun (x14157 : t) -> t_to_js x14157
    type tags = [ `DOMMatrix2DInit  | `DOMMatrixInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14161 : Ojs.t) -> intf_of_js __tags_of_js x14161
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14159 : __tags intf) -> intf_to_js __tags_to_js x14159
    let (get_is2D : 'tags this -> bool) =
      fun (x14163 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14163) "is2D")
    let (set_is2D : 'tags this -> bool -> unit) =
      fun (x14165 : 'tags this) ->
        fun (x14166 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14165) "is2D"
            (Ojs.bool_to_js x14166)
    let (get_m13 : 'tags this -> float) =
      fun (x14168 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14168) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x14170 : 'tags this) ->
        fun (x14171 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14170) "m13"
            (Ojs.float_to_js x14171)
    let (get_m14 : 'tags this -> float) =
      fun (x14173 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14173) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x14175 : 'tags this) ->
        fun (x14176 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14175) "m14"
            (Ojs.float_to_js x14176)
    let (get_m23 : 'tags this -> float) =
      fun (x14178 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14178) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x14180 : 'tags this) ->
        fun (x14181 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14180) "m23"
            (Ojs.float_to_js x14181)
    let (get_m24 : 'tags this -> float) =
      fun (x14183 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14183) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x14185 : 'tags this) ->
        fun (x14186 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14185) "m24"
            (Ojs.float_to_js x14186)
    let (get_m31 : 'tags this -> float) =
      fun (x14188 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14188) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x14190 : 'tags this) ->
        fun (x14191 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14190) "m31"
            (Ojs.float_to_js x14191)
    let (get_m32 : 'tags this -> float) =
      fun (x14193 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14193) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x14195 : 'tags this) ->
        fun (x14196 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14195) "m32"
            (Ojs.float_to_js x14196)
    let (get_m33 : 'tags this -> float) =
      fun (x14198 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14198) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x14200 : 'tags this) ->
        fun (x14201 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14200) "m33"
            (Ojs.float_to_js x14201)
    let (get_m34 : 'tags this -> float) =
      fun (x14203 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14203) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x14205 : 'tags this) ->
        fun (x14206 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14205) "m34"
            (Ojs.float_to_js x14206)
    let (get_m43 : 'tags this -> float) =
      fun (x14208 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14208) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x14210 : 'tags this) ->
        fun (x14211 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14210) "m43"
            (Ojs.float_to_js x14211)
    let (get_m44 : 'tags this -> float) =
      fun (x14213 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14213) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x14215 : 'tags this) ->
        fun (x14216 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14215) "m44"
            (Ojs.float_to_js x14216)
    let (create :
      is2D:bool ->
        m13:float ->
          m14:float ->
            m23:float ->
              m24:float ->
                m31:float ->
                  m32:float ->
                    m33:float ->
                      m34:float -> m43:float -> m44:float -> unit -> t)
      =
      fun ~is2D:(x14218 : bool) ->
        fun ~m13:(x14219 : float) ->
          fun ~m14:(x14220 : float) ->
            fun ~m23:(x14221 : float) ->
              fun ~m24:(x14222 : float) ->
                fun ~m31:(x14223 : float) ->
                  fun ~m32:(x14224 : float) ->
                    fun ~m33:(x14225 : float) ->
                      fun ~m34:(x14226 : float) ->
                        fun ~m43:(x14227 : float) ->
                          fun ~m44:(x14228 : float) ->
                            fun () ->
                              let x14229 = Ojs.empty_obj () in
                              Ojs.set_prop_ascii x14229 "is2D"
                                (Ojs.bool_to_js x14218);
                              Ojs.set_prop_ascii x14229 "m13"
                                (Ojs.float_to_js x14219);
                              Ojs.set_prop_ascii x14229 "m14"
                                (Ojs.float_to_js x14220);
                              Ojs.set_prop_ascii x14229 "m23"
                                (Ojs.float_to_js x14221);
                              Ojs.set_prop_ascii x14229 "m24"
                                (Ojs.float_to_js x14222);
                              Ojs.set_prop_ascii x14229 "m31"
                                (Ojs.float_to_js x14223);
                              Ojs.set_prop_ascii x14229 "m32"
                                (Ojs.float_to_js x14224);
                              Ojs.set_prop_ascii x14229 "m33"
                                (Ojs.float_to_js x14225);
                              Ojs.set_prop_ascii x14229 "m34"
                                (Ojs.float_to_js x14226);
                              Ojs.set_prop_ascii x14229 "m43"
                                (Ojs.float_to_js x14227);
                              Ojs.set_prop_ascii x14229 "m44"
                                (Ojs.float_to_js x14228);
                              t_of_js x14229
    let cast_from = Obj.magic
  end
module rec
  DOMPoint:sig
             type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `DOMPoint  | `DOMPointReadOnly ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags = [ `DOMPoint  | `DOMPointReadOnly ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_w : 'tags this -> float
             val set_w : 'tags this -> float -> unit
             val get_x : 'tags this -> float
             val set_x : 'tags this -> float -> unit
             val get_y : 'tags this -> float
             val set_y : 'tags this -> float -> unit
             val get_z : 'tags this -> float
             val set_z : 'tags this -> float -> unit
             val create :
               w:float -> x:float -> y:float -> z:float -> unit -> t
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create' :
               ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
             val fromPoint : ?other:DOMPointInit.t -> unit -> t
           end =
  struct
    type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14231 : Ojs.t) -> t_of_js x14231
    and t_0_to_js : t_0 -> Ojs.t = fun (x14230 : t) -> t_to_js x14230
    type tags = [ `DOMPoint  | `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14234 : Ojs.t) -> intf_of_js __tags_of_js x14234
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14232 : __tags intf) -> intf_to_js __tags_to_js x14232
    let (get_w : 'tags this -> float) =
      fun (x14236 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14236) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x14238 : 'tags this) ->
        fun (x14239 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14238) "w"
            (Ojs.float_to_js x14239)
    let (get_x : 'tags this -> float) =
      fun (x14241 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14241) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x14243 : 'tags this) ->
        fun (x14244 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14243) "x"
            (Ojs.float_to_js x14244)
    let (get_y : 'tags this -> float) =
      fun (x14246 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14246) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x14248 : 'tags this) ->
        fun (x14249 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14248) "y"
            (Ojs.float_to_js x14249)
    let (get_z : 'tags this -> float) =
      fun (x14251 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14251) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x14253 : 'tags this) ->
        fun (x14254 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14253) "z"
            (Ojs.float_to_js x14254)
    let (create : w:float -> x:float -> y:float -> z:float -> unit -> t) =
      fun ~w:(x14256 : float) ->
        fun ~x:(x14257 : float) ->
          fun ~y:(x14258 : float) ->
            fun ~z:(x14259 : float) ->
              fun () ->
                let x14260 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x14260 "w" (Ojs.float_to_js x14256);
                Ojs.set_prop_ascii x14260 "x" (Ojs.float_to_js x14257);
                Ojs.set_prop_ascii x14260 "y" (Ojs.float_to_js x14258);
                Ojs.set_prop_ascii x14260 "z" (Ojs.float_to_js x14259);
                t_of_js x14260
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMPoint")
             "prototype")
    let (create' : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x14261 : float option) ->
        fun ?y:(x14262 : float option) ->
          fun ?z:(x14263 : float option) ->
            fun ?w:(x14264 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                     (let x14265 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14261 with
                       | Some x14269 ->
                           ignore
                             (Ojs.call x14265 "push"
                                [|(Ojs.float_to_js x14269)|])
                       | None -> ());
                      (match x14262 with
                       | Some x14268 ->
                           ignore
                             (Ojs.call x14265 "push"
                                [|(Ojs.float_to_js x14268)|])
                       | None -> ());
                      (match x14263 with
                       | Some x14267 ->
                           ignore
                             (Ojs.call x14265 "push"
                                [|(Ojs.float_to_js x14267)|])
                       | None -> ());
                      (match x14264 with
                       | Some x14266 ->
                           ignore
                             (Ojs.call x14265 "push"
                                [|(Ojs.float_to_js x14266)|])
                       | None -> ());
                      x14265))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x14270 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x14273 = Ojs.get_prop_ascii Ojs.global "DOMPoint" in
             Ojs.call (Ojs.get_prop_ascii x14273 "fromPoint") "apply"
               [|x14273;((let x14271 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14270 with
                           | Some x14272 ->
                               ignore
                                 (Ojs.call x14271 "push"
                                    [|(DOMPointInit.t_to_js x14272)|])
                           | None -> ());
                          x14271))|])
  end
 and
  DOMPointReadOnly:sig
                     type t = [ `DOMPointReadOnly ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `DOMPointReadOnly ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `DOMPointReadOnly ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `DOMPointReadOnly ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_w : 'tags this -> float
                     val get_x : 'tags this -> float
                     val get_y : 'tags this -> float
                     val get_z : 'tags this -> float
                     val matrixTransform :
                       'tags this ->
                         ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t
                     val toJSON : 'tags this -> any
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create :
                       ?x:float ->
                         ?y:float -> ?z:float -> ?w:float -> unit -> t
                     val fromPoint : ?other:DOMPointInit.t -> unit -> t
                   end =
  struct
    type t = [ `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14275 : Ojs.t) -> t_of_js x14275
    and t_0_to_js : t_0 -> Ojs.t = fun (x14274 : t) -> t_to_js x14274
    type tags = [ `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14278 : Ojs.t) -> intf_of_js __tags_of_js x14278
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14276 : __tags intf) -> intf_to_js __tags_to_js x14276
    let (get_w : 'tags this -> float) =
      fun (x14280 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14280) "w")
    let (get_x : 'tags this -> float) =
      fun (x14282 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14282) "x")
    let (get_y : 'tags this -> float) =
      fun (x14284 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14284) "y")
    let (get_z : 'tags this -> float) =
      fun (x14286 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14286) "z")
    let (matrixTransform :
      'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t) =
      fun (x14291 : 'tags this) ->
        fun ?matrix:(x14288 : DOMMatrixInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x14293 = this_to_js Obj.magic x14291 in
               Ojs.call (Ojs.get_prop_ascii x14293 "matrixTransform") "apply"
                 [|x14293;((let x14289 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14288 with
                             | Some x14290 ->
                                 ignore
                                   (Ojs.call x14289 "push"
                                      [|(DOMMatrixInit.t_to_js x14290)|])
                             | None -> ());
                            x14289))|])
    let (toJSON : 'tags this -> any) =
      fun (x14294 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14294) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly") "prototype")
    let (create : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x14296 : float option) ->
        fun ?y:(x14297 : float option) ->
          fun ?z:(x14298 : float option) ->
            fun ?w:(x14299 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
                     (let x14300 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14296 with
                       | Some x14304 ->
                           ignore
                             (Ojs.call x14300 "push"
                                [|(Ojs.float_to_js x14304)|])
                       | None -> ());
                      (match x14297 with
                       | Some x14303 ->
                           ignore
                             (Ojs.call x14300 "push"
                                [|(Ojs.float_to_js x14303)|])
                       | None -> ());
                      (match x14298 with
                       | Some x14302 ->
                           ignore
                             (Ojs.call x14300 "push"
                                [|(Ojs.float_to_js x14302)|])
                       | None -> ());
                      (match x14299 with
                       | Some x14301 ->
                           ignore
                             (Ojs.call x14300 "push"
                                [|(Ojs.float_to_js x14301)|])
                       | None -> ());
                      x14300))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x14305 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x14308 = Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x14308 "fromPoint") "apply"
               [|x14308;((let x14306 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14305 with
                           | Some x14307 ->
                               ignore
                                 (Ojs.call x14306 "push"
                                    [|(DOMPointInit.t_to_js x14307)|])
                           | None -> ());
                          x14306))|])
  end
module DOMQuad =
  struct
    type t = [ `DOMQuad ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14310 : Ojs.t) -> t_of_js x14310
    and t_0_to_js : t_0 -> Ojs.t = fun (x14309 : t) -> t_to_js x14309
    type tags = [ `DOMQuad ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14313 : Ojs.t) -> intf_of_js __tags_of_js x14313
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14311 : __tags intf) -> intf_to_js __tags_to_js x14311
    let (get_p1 : 'tags this -> DOMPoint.t) =
      fun (x14315 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14315) "p1")
    let (get_p2 : 'tags this -> DOMPoint.t) =
      fun (x14317 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14317) "p2")
    let (get_p3 : 'tags this -> DOMPoint.t) =
      fun (x14319 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14319) "p3")
    let (get_p4 : 'tags this -> DOMPoint.t) =
      fun (x14321 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14321) "p4")
    let (getBounds : 'tags this -> DOMRect.t) =
      fun (x14323 : 'tags this) ->
        DOMRect.t_of_js
          (Ojs.call (this_to_js Obj.magic x14323) "getBounds" [||])
    let (toJSON : 'tags this -> any) =
      fun (x14325 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14325) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMQuad")
             "prototype")
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x14327 : DOMPointInit.t option) ->
        fun ?p2:(x14328 : DOMPointInit.t option) ->
          fun ?p3:(x14329 : DOMPointInit.t option) ->
            fun ?p4:(x14330 : DOMPointInit.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMQuad")
                     (let x14331 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14327 with
                       | Some x14335 ->
                           ignore
                             (Ojs.call x14331 "push"
                                [|(DOMPointInit.t_to_js x14335)|])
                       | None -> ());
                      (match x14328 with
                       | Some x14334 ->
                           ignore
                             (Ojs.call x14331 "push"
                                [|(DOMPointInit.t_to_js x14334)|])
                       | None -> ());
                      (match x14329 with
                       | Some x14333 ->
                           ignore
                             (Ojs.call x14331 "push"
                                [|(DOMPointInit.t_to_js x14333)|])
                       | None -> ());
                      (match x14330 with
                       | Some x14332 ->
                           ignore
                             (Ojs.call x14331 "push"
                                [|(DOMPointInit.t_to_js x14332)|])
                       | None -> ());
                      x14331))
    let (fromQuad : ?other:DOMQuadInit.t -> unit -> t) =
      fun ?other:(x14336 : DOMQuadInit.t option) ->
        fun () ->
          t_of_js
            (let x14339 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x14339 "fromQuad") "apply"
               [|x14339;((let x14337 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14336 with
                           | Some x14338 ->
                               ignore
                                 (Ojs.call x14337 "push"
                                    [|(DOMQuadInit.t_to_js x14338)|])
                           | None -> ());
                          x14337))|])
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x14340 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x14343 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x14343 "fromRect") "apply"
               [|x14343;((let x14341 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14340 with
                           | Some x14342 ->
                               ignore
                                 (Ojs.call x14341 "push"
                                    [|(DOMRectInit.t_to_js x14342)|])
                           | None -> ());
                          x14341))|])
  end
module rec
  DOMMatrix:sig
              type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_a : 'tags this -> float
              val set_a : 'tags this -> float -> unit
              val get_b : 'tags this -> float
              val set_b : 'tags this -> float -> unit
              val get_c : 'tags this -> float
              val set_c : 'tags this -> float -> unit
              val get_d : 'tags this -> float
              val set_d : 'tags this -> float -> unit
              val get_e : 'tags this -> float
              val set_e : 'tags this -> float -> unit
              val get_f : 'tags this -> float
              val set_f : 'tags this -> float -> unit
              val get_m11 : 'tags this -> float
              val set_m11 : 'tags this -> float -> unit
              val get_m12 : 'tags this -> float
              val set_m12 : 'tags this -> float -> unit
              val get_m13 : 'tags this -> float
              val set_m13 : 'tags this -> float -> unit
              val get_m14 : 'tags this -> float
              val set_m14 : 'tags this -> float -> unit
              val get_m21 : 'tags this -> float
              val set_m21 : 'tags this -> float -> unit
              val get_m22 : 'tags this -> float
              val set_m22 : 'tags this -> float -> unit
              val get_m23 : 'tags this -> float
              val set_m23 : 'tags this -> float -> unit
              val get_m24 : 'tags this -> float
              val set_m24 : 'tags this -> float -> unit
              val get_m31 : 'tags this -> float
              val set_m31 : 'tags this -> float -> unit
              val get_m32 : 'tags this -> float
              val set_m32 : 'tags this -> float -> unit
              val get_m33 : 'tags this -> float
              val set_m33 : 'tags this -> float -> unit
              val get_m34 : 'tags this -> float
              val set_m34 : 'tags this -> float -> unit
              val get_m41 : 'tags this -> float
              val set_m41 : 'tags this -> float -> unit
              val get_m42 : 'tags this -> float
              val set_m42 : 'tags this -> float -> unit
              val get_m43 : 'tags this -> float
              val set_m43 : 'tags this -> float -> unit
              val get_m44 : 'tags this -> float
              val set_m44 : 'tags this -> float -> unit
              val invertSelf : 'tags this -> t
              val multiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val preMultiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val rotateAxisAngleSelf :
                'tags this ->
                  ?x:float ->
                    ?y:float -> ?z:float -> ?angle:float -> unit -> t
              val rotateFromVectorSelf :
                'tags this -> ?x:float -> ?y:float -> unit -> t
              val rotateSelf :
                'tags this ->
                  ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t
              val scale3dSelf :
                'tags this ->
                  ?scale:float ->
                    ?originX:float ->
                      ?originY:float -> ?originZ:float -> unit -> t
              val scaleSelf :
                'tags this ->
                  ?scaleX:float ->
                    ?scaleY:float ->
                      ?scaleZ:float ->
                        ?originX:float ->
                          ?originY:float -> ?originZ:float -> unit -> t
              val skewXSelf : 'tags this -> ?sx:float -> unit -> t
              val skewYSelf : 'tags this -> ?sy:float -> unit -> t
              val translateSelf :
                'tags this ->
                  ?tx:float -> ?ty:float -> ?tz:float -> unit -> t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : ?init:float list or_string -> unit -> t
              val fromFloat32Array : Float32Array.t_0 -> t
              val fromFloat64Array : Float64Array.t_0 -> t
              val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
            end =
  struct
    type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14345 : Ojs.t) -> t_of_js x14345
    and t_0_to_js : t_0 -> Ojs.t = fun (x14344 : t) -> t_to_js x14344
    type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14348 : Ojs.t) -> intf_of_js __tags_of_js x14348
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14346 : __tags intf) -> intf_to_js __tags_to_js x14346
    let (get_a : 'tags this -> float) =
      fun (x14350 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14350) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x14352 : 'tags this) ->
        fun (x14353 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14352) "a"
            (Ojs.float_to_js x14353)
    let (get_b : 'tags this -> float) =
      fun (x14355 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14355) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x14357 : 'tags this) ->
        fun (x14358 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14357) "b"
            (Ojs.float_to_js x14358)
    let (get_c : 'tags this -> float) =
      fun (x14360 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14360) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x14362 : 'tags this) ->
        fun (x14363 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14362) "c"
            (Ojs.float_to_js x14363)
    let (get_d : 'tags this -> float) =
      fun (x14365 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14365) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x14367 : 'tags this) ->
        fun (x14368 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14367) "d"
            (Ojs.float_to_js x14368)
    let (get_e : 'tags this -> float) =
      fun (x14370 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14370) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x14372 : 'tags this) ->
        fun (x14373 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14372) "e"
            (Ojs.float_to_js x14373)
    let (get_f : 'tags this -> float) =
      fun (x14375 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14375) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x14377 : 'tags this) ->
        fun (x14378 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14377) "f"
            (Ojs.float_to_js x14378)
    let (get_m11 : 'tags this -> float) =
      fun (x14380 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14380) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x14382 : 'tags this) ->
        fun (x14383 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14382) "m11"
            (Ojs.float_to_js x14383)
    let (get_m12 : 'tags this -> float) =
      fun (x14385 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14385) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x14387 : 'tags this) ->
        fun (x14388 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14387) "m12"
            (Ojs.float_to_js x14388)
    let (get_m13 : 'tags this -> float) =
      fun (x14390 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14390) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x14392 : 'tags this) ->
        fun (x14393 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14392) "m13"
            (Ojs.float_to_js x14393)
    let (get_m14 : 'tags this -> float) =
      fun (x14395 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14395) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x14397 : 'tags this) ->
        fun (x14398 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14397) "m14"
            (Ojs.float_to_js x14398)
    let (get_m21 : 'tags this -> float) =
      fun (x14400 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14400) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x14402 : 'tags this) ->
        fun (x14403 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14402) "m21"
            (Ojs.float_to_js x14403)
    let (get_m22 : 'tags this -> float) =
      fun (x14405 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14405) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x14407 : 'tags this) ->
        fun (x14408 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14407) "m22"
            (Ojs.float_to_js x14408)
    let (get_m23 : 'tags this -> float) =
      fun (x14410 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14410) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x14412 : 'tags this) ->
        fun (x14413 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14412) "m23"
            (Ojs.float_to_js x14413)
    let (get_m24 : 'tags this -> float) =
      fun (x14415 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14415) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x14417 : 'tags this) ->
        fun (x14418 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14417) "m24"
            (Ojs.float_to_js x14418)
    let (get_m31 : 'tags this -> float) =
      fun (x14420 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14420) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x14422 : 'tags this) ->
        fun (x14423 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14422) "m31"
            (Ojs.float_to_js x14423)
    let (get_m32 : 'tags this -> float) =
      fun (x14425 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14425) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x14427 : 'tags this) ->
        fun (x14428 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14427) "m32"
            (Ojs.float_to_js x14428)
    let (get_m33 : 'tags this -> float) =
      fun (x14430 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14430) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x14432 : 'tags this) ->
        fun (x14433 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14432) "m33"
            (Ojs.float_to_js x14433)
    let (get_m34 : 'tags this -> float) =
      fun (x14435 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14435) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x14437 : 'tags this) ->
        fun (x14438 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14437) "m34"
            (Ojs.float_to_js x14438)
    let (get_m41 : 'tags this -> float) =
      fun (x14440 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14440) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x14442 : 'tags this) ->
        fun (x14443 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14442) "m41"
            (Ojs.float_to_js x14443)
    let (get_m42 : 'tags this -> float) =
      fun (x14445 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14445) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x14447 : 'tags this) ->
        fun (x14448 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14447) "m42"
            (Ojs.float_to_js x14448)
    let (get_m43 : 'tags this -> float) =
      fun (x14450 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14450) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x14452 : 'tags this) ->
        fun (x14453 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14452) "m43"
            (Ojs.float_to_js x14453)
    let (get_m44 : 'tags this -> float) =
      fun (x14455 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14455) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x14457 : 'tags this) ->
        fun (x14458 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14457) "m44"
            (Ojs.float_to_js x14458)
    let (invertSelf : 'tags this -> t) =
      fun (x14460 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x14460) "invertSelf" [||])
    let (multiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
      fun (x14465 : 'tags this) ->
        fun ?other:(x14462 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x14467 = this_to_js Obj.magic x14465 in
               Ojs.call (Ojs.get_prop_ascii x14467 "multiplySelf") "apply"
                 [|x14467;((let x14463 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14462 with
                             | Some x14464 ->
                                 ignore
                                   (Ojs.call x14463 "push"
                                      [|(DOMMatrixInit.t_to_js x14464)|])
                             | None -> ());
                            x14463))|])
    let (preMultiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t)
      =
      fun (x14471 : 'tags this) ->
        fun ?other:(x14468 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x14473 = this_to_js Obj.magic x14471 in
               Ojs.call (Ojs.get_prop_ascii x14473 "preMultiplySelf") "apply"
                 [|x14473;((let x14469 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14468 with
                             | Some x14470 ->
                                 ignore
                                   (Ojs.call x14469 "push"
                                      [|(DOMMatrixInit.t_to_js x14470)|])
                             | None -> ());
                            x14469))|])
    let (rotateAxisAngleSelf :
      'tags this ->
        ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t)
      =
      fun (x14483 : 'tags this) ->
        fun ?x:(x14474 : float option) ->
          fun ?y:(x14475 : float option) ->
            fun ?z:(x14476 : float option) ->
              fun ?angle:(x14477 : float option) ->
                fun () ->
                  t_of_js
                    (let x14485 = this_to_js Obj.magic x14483 in
                     Ojs.call
                       (Ojs.get_prop_ascii x14485 "rotateAxisAngleSelf")
                       "apply"
                       [|x14485;((let x14478 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x14474 with
                                   | Some x14482 ->
                                       ignore
                                         (Ojs.call x14478 "push"
                                            [|(Ojs.float_to_js x14482)|])
                                   | None -> ());
                                  (match x14475 with
                                   | Some x14481 ->
                                       ignore
                                         (Ojs.call x14478 "push"
                                            [|(Ojs.float_to_js x14481)|])
                                   | None -> ());
                                  (match x14476 with
                                   | Some x14480 ->
                                       ignore
                                         (Ojs.call x14478 "push"
                                            [|(Ojs.float_to_js x14480)|])
                                   | None -> ());
                                  (match x14477 with
                                   | Some x14479 ->
                                       ignore
                                         (Ojs.call x14478 "push"
                                            [|(Ojs.float_to_js x14479)|])
                                   | None -> ());
                                  x14478))|])
    let (rotateFromVectorSelf :
      'tags this -> ?x:float -> ?y:float -> unit -> t) =
      fun (x14491 : 'tags this) ->
        fun ?x:(x14486 : float option) ->
          fun ?y:(x14487 : float option) ->
            fun () ->
              t_of_js
                (let x14493 = this_to_js Obj.magic x14491 in
                 Ojs.call (Ojs.get_prop_ascii x14493 "rotateFromVectorSelf")
                   "apply"
                   [|x14493;((let x14488 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14486 with
                               | Some x14490 ->
                                   ignore
                                     (Ojs.call x14488 "push"
                                        [|(Ojs.float_to_js x14490)|])
                               | None -> ());
                              (match x14487 with
                               | Some x14489 ->
                                   ignore
                                     (Ojs.call x14488 "push"
                                        [|(Ojs.float_to_js x14489)|])
                               | None -> ());
                              x14488))|])
    let (rotateSelf :
      'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t) =
      fun (x14501 : 'tags this) ->
        fun ?rotX:(x14494 : float option) ->
          fun ?rotY:(x14495 : float option) ->
            fun ?rotZ:(x14496 : float option) ->
              fun () ->
                t_of_js
                  (let x14503 = this_to_js Obj.magic x14501 in
                   Ojs.call (Ojs.get_prop_ascii x14503 "rotateSelf") "apply"
                     [|x14503;((let x14497 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x14494 with
                                 | Some x14500 ->
                                     ignore
                                       (Ojs.call x14497 "push"
                                          [|(Ojs.float_to_js x14500)|])
                                 | None -> ());
                                (match x14495 with
                                 | Some x14499 ->
                                     ignore
                                       (Ojs.call x14497 "push"
                                          [|(Ojs.float_to_js x14499)|])
                                 | None -> ());
                                (match x14496 with
                                 | Some x14498 ->
                                     ignore
                                       (Ojs.call x14497 "push"
                                          [|(Ojs.float_to_js x14498)|])
                                 | None -> ());
                                x14497))|])
    let (scale3dSelf :
      'tags this ->
        ?scale:float ->
          ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x14513 : 'tags this) ->
        fun ?scale:(x14504 : float option) ->
          fun ?originX:(x14505 : float option) ->
            fun ?originY:(x14506 : float option) ->
              fun ?originZ:(x14507 : float option) ->
                fun () ->
                  t_of_js
                    (let x14515 = this_to_js Obj.magic x14513 in
                     Ojs.call (Ojs.get_prop_ascii x14515 "scale3dSelf")
                       "apply"
                       [|x14515;((let x14508 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x14504 with
                                   | Some x14512 ->
                                       ignore
                                         (Ojs.call x14508 "push"
                                            [|(Ojs.float_to_js x14512)|])
                                   | None -> ());
                                  (match x14505 with
                                   | Some x14511 ->
                                       ignore
                                         (Ojs.call x14508 "push"
                                            [|(Ojs.float_to_js x14511)|])
                                   | None -> ());
                                  (match x14506 with
                                   | Some x14510 ->
                                       ignore
                                         (Ojs.call x14508 "push"
                                            [|(Ojs.float_to_js x14510)|])
                                   | None -> ());
                                  (match x14507 with
                                   | Some x14509 ->
                                       ignore
                                         (Ojs.call x14508 "push"
                                            [|(Ojs.float_to_js x14509)|])
                                   | None -> ());
                                  x14508))|])
    let (scaleSelf :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x14529 : 'tags this) ->
        fun ?scaleX:(x14516 : float option) ->
          fun ?scaleY:(x14517 : float option) ->
            fun ?scaleZ:(x14518 : float option) ->
              fun ?originX:(x14519 : float option) ->
                fun ?originY:(x14520 : float option) ->
                  fun ?originZ:(x14521 : float option) ->
                    fun () ->
                      t_of_js
                        (let x14531 = this_to_js Obj.magic x14529 in
                         Ojs.call (Ojs.get_prop_ascii x14531 "scaleSelf")
                           "apply"
                           [|x14531;((let x14522 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x14516 with
                                       | Some x14528 ->
                                           ignore
                                             (Ojs.call x14522 "push"
                                                [|(Ojs.float_to_js x14528)|])
                                       | None -> ());
                                      (match x14517 with
                                       | Some x14527 ->
                                           ignore
                                             (Ojs.call x14522 "push"
                                                [|(Ojs.float_to_js x14527)|])
                                       | None -> ());
                                      (match x14518 with
                                       | Some x14526 ->
                                           ignore
                                             (Ojs.call x14522 "push"
                                                [|(Ojs.float_to_js x14526)|])
                                       | None -> ());
                                      (match x14519 with
                                       | Some x14525 ->
                                           ignore
                                             (Ojs.call x14522 "push"
                                                [|(Ojs.float_to_js x14525)|])
                                       | None -> ());
                                      (match x14520 with
                                       | Some x14524 ->
                                           ignore
                                             (Ojs.call x14522 "push"
                                                [|(Ojs.float_to_js x14524)|])
                                       | None -> ());
                                      (match x14521 with
                                       | Some x14523 ->
                                           ignore
                                             (Ojs.call x14522 "push"
                                                [|(Ojs.float_to_js x14523)|])
                                       | None -> ());
                                      x14522))|])
    let (skewXSelf : 'tags this -> ?sx:float -> unit -> t) =
      fun (x14535 : 'tags this) ->
        fun ?sx:(x14532 : float option) ->
          fun () ->
            t_of_js
              (let x14537 = this_to_js Obj.magic x14535 in
               Ojs.call (Ojs.get_prop_ascii x14537 "skewXSelf") "apply"
                 [|x14537;((let x14533 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14532 with
                             | Some x14534 ->
                                 ignore
                                   (Ojs.call x14533 "push"
                                      [|(Ojs.float_to_js x14534)|])
                             | None -> ());
                            x14533))|])
    let (skewYSelf : 'tags this -> ?sy:float -> unit -> t) =
      fun (x14541 : 'tags this) ->
        fun ?sy:(x14538 : float option) ->
          fun () ->
            t_of_js
              (let x14543 = this_to_js Obj.magic x14541 in
               Ojs.call (Ojs.get_prop_ascii x14543 "skewYSelf") "apply"
                 [|x14543;((let x14539 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14538 with
                             | Some x14540 ->
                                 ignore
                                   (Ojs.call x14539 "push"
                                      [|(Ojs.float_to_js x14540)|])
                             | None -> ());
                            x14539))|])
    let (translateSelf :
      'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t) =
      fun (x14551 : 'tags this) ->
        fun ?tx:(x14544 : float option) ->
          fun ?ty:(x14545 : float option) ->
            fun ?tz:(x14546 : float option) ->
              fun () ->
                t_of_js
                  (let x14553 = this_to_js Obj.magic x14551 in
                   Ojs.call (Ojs.get_prop_ascii x14553 "translateSelf")
                     "apply"
                     [|x14553;((let x14547 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x14544 with
                                 | Some x14550 ->
                                     ignore
                                       (Ojs.call x14547 "push"
                                          [|(Ojs.float_to_js x14550)|])
                                 | None -> ());
                                (match x14545 with
                                 | Some x14549 ->
                                     ignore
                                       (Ojs.call x14547 "push"
                                          [|(Ojs.float_to_js x14549)|])
                                 | None -> ());
                                (match x14546 with
                                 | Some x14548 ->
                                     ignore
                                       (Ojs.call x14547 "push"
                                          [|(Ojs.float_to_js x14548)|])
                                 | None -> ());
                                x14547))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "prototype")
    let (create : ?init:float list or_string -> unit -> t) =
      fun ?init:(x14554 : float list or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
               (let x14555 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x14554 with
                 | Some x14556 ->
                     ignore
                       (Ojs.call x14555 "push"
                          [|(or_string_to_js
                               (fun (x14557 : float list) ->
                                  Ojs.list_to_js Ojs.float_to_js x14557)
                               x14556)|])
                 | None -> ());
                x14555))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x14559 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x14559)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x14560 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x14560)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x14561 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x14564 = Ojs.get_prop_ascii Ojs.global "DOMMatrix" in
             Ojs.call (Ojs.get_prop_ascii x14564 "fromMatrix") "apply"
               [|x14564;((let x14562 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14561 with
                           | Some x14563 ->
                               ignore
                                 (Ojs.call x14562 "push"
                                    [|(DOMMatrixInit.t_to_js x14563)|])
                           | None -> ());
                          x14562))|])
  end
 and
  DOMMatrixReadOnly:sig
                      type t = [ `DOMMatrixReadOnly ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `DOMMatrixReadOnly ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `DOMMatrixReadOnly ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_a : 'tags this -> float
                      val get_b : 'tags this -> float
                      val get_c : 'tags this -> float
                      val get_d : 'tags this -> float
                      val get_e : 'tags this -> float
                      val get_f : 'tags this -> float
                      val get_is2D : 'tags this -> bool
                      val get_isIdentity : 'tags this -> bool
                      val get_m11 : 'tags this -> float
                      val get_m12 : 'tags this -> float
                      val get_m13 : 'tags this -> float
                      val get_m14 : 'tags this -> float
                      val get_m21 : 'tags this -> float
                      val get_m22 : 'tags this -> float
                      val get_m23 : 'tags this -> float
                      val get_m24 : 'tags this -> float
                      val get_m31 : 'tags this -> float
                      val get_m32 : 'tags this -> float
                      val get_m33 : 'tags this -> float
                      val get_m34 : 'tags this -> float
                      val get_m41 : 'tags this -> float
                      val get_m42 : 'tags this -> float
                      val get_m43 : 'tags this -> float
                      val get_m44 : 'tags this -> float
                      val flipX : 'tags this -> DOMMatrix.t
                      val flipY : 'tags this -> DOMMatrix.t
                      val inverse : 'tags this -> DOMMatrix.t
                      val multiply :
                        'tags this ->
                          ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t
                      val rotate :
                        'tags this ->
                          ?rotX:float ->
                            ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t
                      val rotateAxisAngle :
                        'tags this ->
                          ?x:float ->
                            ?y:float ->
                              ?z:float -> ?angle:float -> unit -> DOMMatrix.t
                      val rotateFromVector :
                        'tags this ->
                          ?x:float -> ?y:float -> unit -> DOMMatrix.t
                      val scale :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float ->
                              ?scaleZ:float ->
                                ?originX:float ->
                                  ?originY:float ->
                                    ?originZ:float -> unit -> DOMMatrix.t
                      val scale3d :
                        'tags this ->
                          ?scale:float ->
                            ?originX:float ->
                              ?originY:float ->
                                ?originZ:float -> unit -> DOMMatrix.t
                      val scaleNonUniform :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float -> unit -> DOMMatrix.t
                      val skewX :
                        'tags this -> ?sx:float -> unit -> DOMMatrix.t
                      val skewY :
                        'tags this -> ?sy:float -> unit -> DOMMatrix.t
                      val toFloat32Array : 'tags this -> Float32Array.t_0
                      val toFloat64Array : 'tags this -> Float64Array.t_0
                      val toJSON : 'tags this -> any
                      val transformPoint :
                        'tags this ->
                          ?point:DOMPointInit.t -> unit -> DOMPoint.t
                      val translate :
                        'tags this ->
                          ?tx:float ->
                            ?ty:float -> ?tz:float -> unit -> DOMMatrix.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : ?init:float list or_string -> unit -> t
                      val fromFloat32Array : Float32Array.t_0 -> t
                      val fromFloat64Array : Float64Array.t_0 -> t
                      val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
                    end =
  struct
    type t = [ `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14566 : Ojs.t) -> t_of_js x14566
    and t_0_to_js : t_0 -> Ojs.t = fun (x14565 : t) -> t_to_js x14565
    type tags = [ `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14569 : Ojs.t) -> intf_of_js __tags_of_js x14569
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14567 : __tags intf) -> intf_to_js __tags_to_js x14567
    let (get_a : 'tags this -> float) =
      fun (x14571 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14571) "a")
    let (get_b : 'tags this -> float) =
      fun (x14573 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14573) "b")
    let (get_c : 'tags this -> float) =
      fun (x14575 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14575) "c")
    let (get_d : 'tags this -> float) =
      fun (x14577 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14577) "d")
    let (get_e : 'tags this -> float) =
      fun (x14579 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14579) "e")
    let (get_f : 'tags this -> float) =
      fun (x14581 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14581) "f")
    let (get_is2D : 'tags this -> bool) =
      fun (x14583 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14583) "is2D")
    let (get_isIdentity : 'tags this -> bool) =
      fun (x14585 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14585) "isIdentity")
    let (get_m11 : 'tags this -> float) =
      fun (x14587 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14587) "m11")
    let (get_m12 : 'tags this -> float) =
      fun (x14589 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14589) "m12")
    let (get_m13 : 'tags this -> float) =
      fun (x14591 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14591) "m13")
    let (get_m14 : 'tags this -> float) =
      fun (x14593 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14593) "m14")
    let (get_m21 : 'tags this -> float) =
      fun (x14595 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14595) "m21")
    let (get_m22 : 'tags this -> float) =
      fun (x14597 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14597) "m22")
    let (get_m23 : 'tags this -> float) =
      fun (x14599 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14599) "m23")
    let (get_m24 : 'tags this -> float) =
      fun (x14601 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14601) "m24")
    let (get_m31 : 'tags this -> float) =
      fun (x14603 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14603) "m31")
    let (get_m32 : 'tags this -> float) =
      fun (x14605 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14605) "m32")
    let (get_m33 : 'tags this -> float) =
      fun (x14607 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14607) "m33")
    let (get_m34 : 'tags this -> float) =
      fun (x14609 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14609) "m34")
    let (get_m41 : 'tags this -> float) =
      fun (x14611 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14611) "m41")
    let (get_m42 : 'tags this -> float) =
      fun (x14613 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14613) "m42")
    let (get_m43 : 'tags this -> float) =
      fun (x14615 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14615) "m43")
    let (get_m44 : 'tags this -> float) =
      fun (x14617 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14617) "m44")
    let (flipX : 'tags this -> DOMMatrix.t) =
      fun (x14619 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x14619) "flipX" [||])
    let (flipY : 'tags this -> DOMMatrix.t) =
      fun (x14621 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x14621) "flipY" [||])
    let (inverse : 'tags this -> DOMMatrix.t) =
      fun (x14623 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x14623) "inverse" [||])
    let (multiply :
      'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t) =
      fun (x14628 : 'tags this) ->
        fun ?other:(x14625 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x14630 = this_to_js Obj.magic x14628 in
               Ojs.call (Ojs.get_prop_ascii x14630 "multiply") "apply"
                 [|x14630;((let x14626 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14625 with
                             | Some x14627 ->
                                 ignore
                                   (Ojs.call x14626 "push"
                                      [|(DOMMatrixInit.t_to_js x14627)|])
                             | None -> ());
                            x14626))|])
    let (rotate :
      'tags this ->
        ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t)
      =
      fun (x14638 : 'tags this) ->
        fun ?rotX:(x14631 : float option) ->
          fun ?rotY:(x14632 : float option) ->
            fun ?rotZ:(x14633 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x14640 = this_to_js Obj.magic x14638 in
                   Ojs.call (Ojs.get_prop_ascii x14640 "rotate") "apply"
                     [|x14640;((let x14634 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x14631 with
                                 | Some x14637 ->
                                     ignore
                                       (Ojs.call x14634 "push"
                                          [|(Ojs.float_to_js x14637)|])
                                 | None -> ());
                                (match x14632 with
                                 | Some x14636 ->
                                     ignore
                                       (Ojs.call x14634 "push"
                                          [|(Ojs.float_to_js x14636)|])
                                 | None -> ());
                                (match x14633 with
                                 | Some x14635 ->
                                     ignore
                                       (Ojs.call x14634 "push"
                                          [|(Ojs.float_to_js x14635)|])
                                 | None -> ());
                                x14634))|])
    let (rotateAxisAngle :
      'tags this ->
        ?x:float ->
          ?y:float -> ?z:float -> ?angle:float -> unit -> DOMMatrix.t)
      =
      fun (x14650 : 'tags this) ->
        fun ?x:(x14641 : float option) ->
          fun ?y:(x14642 : float option) ->
            fun ?z:(x14643 : float option) ->
              fun ?angle:(x14644 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x14652 = this_to_js Obj.magic x14650 in
                     Ojs.call (Ojs.get_prop_ascii x14652 "rotateAxisAngle")
                       "apply"
                       [|x14652;((let x14645 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x14641 with
                                   | Some x14649 ->
                                       ignore
                                         (Ojs.call x14645 "push"
                                            [|(Ojs.float_to_js x14649)|])
                                   | None -> ());
                                  (match x14642 with
                                   | Some x14648 ->
                                       ignore
                                         (Ojs.call x14645 "push"
                                            [|(Ojs.float_to_js x14648)|])
                                   | None -> ());
                                  (match x14643 with
                                   | Some x14647 ->
                                       ignore
                                         (Ojs.call x14645 "push"
                                            [|(Ojs.float_to_js x14647)|])
                                   | None -> ());
                                  (match x14644 with
                                   | Some x14646 ->
                                       ignore
                                         (Ojs.call x14645 "push"
                                            [|(Ojs.float_to_js x14646)|])
                                   | None -> ());
                                  x14645))|])
    let (rotateFromVector :
      'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t) =
      fun (x14658 : 'tags this) ->
        fun ?x:(x14653 : float option) ->
          fun ?y:(x14654 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x14660 = this_to_js Obj.magic x14658 in
                 Ojs.call (Ojs.get_prop_ascii x14660 "rotateFromVector")
                   "apply"
                   [|x14660;((let x14655 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14653 with
                               | Some x14657 ->
                                   ignore
                                     (Ojs.call x14655 "push"
                                        [|(Ojs.float_to_js x14657)|])
                               | None -> ());
                              (match x14654 with
                               | Some x14656 ->
                                   ignore
                                     (Ojs.call x14655 "push"
                                        [|(Ojs.float_to_js x14656)|])
                               | None -> ());
                              x14655))|])
    let (scale :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float ->
                ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x14674 : 'tags this) ->
        fun ?scaleX:(x14661 : float option) ->
          fun ?scaleY:(x14662 : float option) ->
            fun ?scaleZ:(x14663 : float option) ->
              fun ?originX:(x14664 : float option) ->
                fun ?originY:(x14665 : float option) ->
                  fun ?originZ:(x14666 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x14676 = this_to_js Obj.magic x14674 in
                         Ojs.call (Ojs.get_prop_ascii x14676 "scale") "apply"
                           [|x14676;((let x14667 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x14661 with
                                       | Some x14673 ->
                                           ignore
                                             (Ojs.call x14667 "push"
                                                [|(Ojs.float_to_js x14673)|])
                                       | None -> ());
                                      (match x14662 with
                                       | Some x14672 ->
                                           ignore
                                             (Ojs.call x14667 "push"
                                                [|(Ojs.float_to_js x14672)|])
                                       | None -> ());
                                      (match x14663 with
                                       | Some x14671 ->
                                           ignore
                                             (Ojs.call x14667 "push"
                                                [|(Ojs.float_to_js x14671)|])
                                       | None -> ());
                                      (match x14664 with
                                       | Some x14670 ->
                                           ignore
                                             (Ojs.call x14667 "push"
                                                [|(Ojs.float_to_js x14670)|])
                                       | None -> ());
                                      (match x14665 with
                                       | Some x14669 ->
                                           ignore
                                             (Ojs.call x14667 "push"
                                                [|(Ojs.float_to_js x14669)|])
                                       | None -> ());
                                      (match x14666 with
                                       | Some x14668 ->
                                           ignore
                                             (Ojs.call x14667 "push"
                                                [|(Ojs.float_to_js x14668)|])
                                       | None -> ());
                                      x14667))|])
    let (scale3d :
      'tags this ->
        ?scale:float ->
          ?originX:float ->
            ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x14686 : 'tags this) ->
        fun ?scale:(x14677 : float option) ->
          fun ?originX:(x14678 : float option) ->
            fun ?originY:(x14679 : float option) ->
              fun ?originZ:(x14680 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x14688 = this_to_js Obj.magic x14686 in
                     Ojs.call (Ojs.get_prop_ascii x14688 "scale3d") "apply"
                       [|x14688;((let x14681 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x14677 with
                                   | Some x14685 ->
                                       ignore
                                         (Ojs.call x14681 "push"
                                            [|(Ojs.float_to_js x14685)|])
                                   | None -> ());
                                  (match x14678 with
                                   | Some x14684 ->
                                       ignore
                                         (Ojs.call x14681 "push"
                                            [|(Ojs.float_to_js x14684)|])
                                   | None -> ());
                                  (match x14679 with
                                   | Some x14683 ->
                                       ignore
                                         (Ojs.call x14681 "push"
                                            [|(Ojs.float_to_js x14683)|])
                                   | None -> ());
                                  (match x14680 with
                                   | Some x14682 ->
                                       ignore
                                         (Ojs.call x14681 "push"
                                            [|(Ojs.float_to_js x14682)|])
                                   | None -> ());
                                  x14681))|])
    let (scaleNonUniform :
      'tags this -> ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t) =
      fun (x14694 : 'tags this) ->
        fun ?scaleX:(x14689 : float option) ->
          fun ?scaleY:(x14690 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x14696 = this_to_js Obj.magic x14694 in
                 Ojs.call (Ojs.get_prop_ascii x14696 "scaleNonUniform")
                   "apply"
                   [|x14696;((let x14691 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14689 with
                               | Some x14693 ->
                                   ignore
                                     (Ojs.call x14691 "push"
                                        [|(Ojs.float_to_js x14693)|])
                               | None -> ());
                              (match x14690 with
                               | Some x14692 ->
                                   ignore
                                     (Ojs.call x14691 "push"
                                        [|(Ojs.float_to_js x14692)|])
                               | None -> ());
                              x14691))|])
    let (skewX : 'tags this -> ?sx:float -> unit -> DOMMatrix.t) =
      fun (x14700 : 'tags this) ->
        fun ?sx:(x14697 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x14702 = this_to_js Obj.magic x14700 in
               Ojs.call (Ojs.get_prop_ascii x14702 "skewX") "apply"
                 [|x14702;((let x14698 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14697 with
                             | Some x14699 ->
                                 ignore
                                   (Ojs.call x14698 "push"
                                      [|(Ojs.float_to_js x14699)|])
                             | None -> ());
                            x14698))|])
    let (skewY : 'tags this -> ?sy:float -> unit -> DOMMatrix.t) =
      fun (x14706 : 'tags this) ->
        fun ?sy:(x14703 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x14708 = this_to_js Obj.magic x14706 in
               Ojs.call (Ojs.get_prop_ascii x14708 "skewY") "apply"
                 [|x14708;((let x14704 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14703 with
                             | Some x14705 ->
                                 ignore
                                   (Ojs.call x14704 "push"
                                      [|(Ojs.float_to_js x14705)|])
                             | None -> ());
                            x14704))|])
    let (toFloat32Array : 'tags this -> Float32Array.t_0) =
      fun (x14709 : 'tags this) ->
        Float32Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x14709) "toFloat32Array" [||])
    let (toFloat64Array : 'tags this -> Float64Array.t_0) =
      fun (x14711 : 'tags this) ->
        Float64Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x14711) "toFloat64Array" [||])
    let (toJSON : 'tags this -> any) =
      fun (x14713 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x14713) "toJSON" [||])
    let (transformPoint :
      'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t) =
      fun (x14718 : 'tags this) ->
        fun ?point:(x14715 : DOMPointInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x14720 = this_to_js Obj.magic x14718 in
               Ojs.call (Ojs.get_prop_ascii x14720 "transformPoint") "apply"
                 [|x14720;((let x14716 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14715 with
                             | Some x14717 ->
                                 ignore
                                   (Ojs.call x14716 "push"
                                      [|(DOMPointInit.t_to_js x14717)|])
                             | None -> ());
                            x14716))|])
    let (translate :
      'tags this ->
        ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t)
      =
      fun (x14728 : 'tags this) ->
        fun ?tx:(x14721 : float option) ->
          fun ?ty:(x14722 : float option) ->
            fun ?tz:(x14723 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x14730 = this_to_js Obj.magic x14728 in
                   Ojs.call (Ojs.get_prop_ascii x14730 "translate") "apply"
                     [|x14730;((let x14724 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x14721 with
                                 | Some x14727 ->
                                     ignore
                                       (Ojs.call x14724 "push"
                                          [|(Ojs.float_to_js x14727)|])
                                 | None -> ());
                                (match x14722 with
                                 | Some x14726 ->
                                     ignore
                                       (Ojs.call x14724 "push"
                                          [|(Ojs.float_to_js x14726)|])
                                 | None -> ());
                                (match x14723 with
                                 | Some x14725 ->
                                     ignore
                                       (Ojs.call x14724 "push"
                                          [|(Ojs.float_to_js x14725)|])
                                 | None -> ());
                                x14724))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly") "prototype")
    let (create : ?init:float list or_string -> unit -> t) =
      fun ?init:(x14731 : float list or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
               (let x14732 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x14731 with
                 | Some x14733 ->
                     ignore
                       (Ojs.call x14732 "push"
                          [|(or_string_to_js
                               (fun (x14734 : float list) ->
                                  Ojs.list_to_js Ojs.float_to_js x14734)
                               x14733)|])
                 | None -> ());
                x14732))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x14736 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x14736)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x14737 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x14737)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x14738 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x14741 = Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x14741 "fromMatrix") "apply"
               [|x14741;((let x14739 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x14738 with
                           | Some x14740 ->
                               ignore
                                 (Ojs.call x14739 "push"
                                    [|(DOMMatrixInit.t_to_js x14740)|])
                           | None -> ());
                          x14739))|])
  end
module CustomEventInit =
  struct
    type 'T t = [ `CustomEventInit of 'T  | `EventInit ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x14744 : Ojs.t) -> t_of_js __T_of_js x14744
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x14742 : __T t) -> t_to_js __T_to_js x14742
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x14748 : Ojs.t) -> t_of_js any_of_js x14748
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x14746 : any t) -> t_to_js any_to_js x14746
    type 'T tags = [ `CustomEventInit of 'T  | `EventInit ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x14752 : Ojs.t) -> intf_of_js __tags_of_js x14752
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x14750 : __tags intf) -> intf_to_js __tags_to_js x14750
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x14754 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x14754)
             "detail")
    let (set_detail : ('tags, 'T) this -> 'T -> unit) =
      fun (x14757 : ('tags, 'T) this) ->
        fun (x14758 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x14757) "detail"
            (Obj.magic x14758)
    let (create : detail:'T -> unit -> 'T t) =
      fun ~detail:(x14761 : 'T) ->
        fun () ->
          let x14762 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x14762 "detail" (Obj.magic x14761);
          t_of_js Obj.magic x14762
    let cast_from = Obj.magic
  end
module CustomEvent =
  struct
    type 'T t = [ `CustomEvent of 'T  | `Event ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x14766 : Ojs.t) -> t_of_js __T_of_js x14766
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x14764 : __T t) -> t_to_js __T_to_js x14764
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x14770 : Ojs.t) -> t_of_js any_of_js x14770
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x14768 : any t) -> t_to_js any_to_js x14768
    type 'T tags = [ `CustomEvent of 'T  | `Event ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x14774 : Ojs.t) -> intf_of_js __tags_of_js x14774
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x14772 : __tags intf) -> intf_to_js __tags_to_js x14772
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x14776 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x14776)
             "detail")
    let (initCustomEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit)
      =
      fun (x14787 : ('tags, 'T) this) ->
        fun ~type_:(x14779 : string) ->
          fun ?bubbles:(x14780 : bool option) ->
            fun ?cancelable:(x14781 : bool option) ->
              fun ?detail:(x14782 : 'T option) ->
                fun () ->
                  ignore
                    (let x14790 = this_to_js Obj.magic Obj.magic x14787 in
                     Ojs.call (Ojs.get_prop_ascii x14790 "initCustomEvent")
                       "apply"
                       [|x14790;((let x14783 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x14783 "push"
                                       [|(Ojs.string_to_js x14779)|]);
                                  (match x14780 with
                                   | Some x14786 ->
                                       ignore
                                         (Ojs.call x14783 "push"
                                            [|(Ojs.bool_to_js x14786)|])
                                   | None -> ());
                                  (match x14781 with
                                   | Some x14785 ->
                                       ignore
                                         (Ojs.call x14783 "push"
                                            [|(Ojs.bool_to_js x14785)|])
                                   | None -> ());
                                  (match x14782 with
                                   | Some x14784 ->
                                       ignore
                                         (Ojs.call x14783 "push"
                                            [|(Obj.magic x14784)|])
                                   | None -> ());
                                  x14783))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CustomEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t) =
      fun ~type_:(x14791 : string) ->
        fun ?eventInitDict:(x14792 : 'T CustomEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CustomEvent")
                 (let x14793 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x14793 "push" [|(Ojs.string_to_js x14791)|]);
                  (match x14792 with
                   | Some x14794 ->
                       ignore
                         (Ojs.call x14793 "push"
                            [|(CustomEventInit.t_to_js Obj.magic x14794)|])
                   | None -> ());
                  x14793))
  end
module QueuingStrategyInit =
  struct
    type t = [ `QueuingStrategyInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14798 : Ojs.t) -> t_of_js x14798
    and t_0_to_js : t_0 -> Ojs.t = fun (x14797 : t) -> t_to_js x14797
    type tags = [ `QueuingStrategyInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14801 : Ojs.t) -> intf_of_js __tags_of_js x14801
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14799 : __tags intf) -> intf_to_js __tags_to_js x14799
    let (get_highWaterMark : 'tags this -> float) =
      fun (x14803 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14803) "highWaterMark")
    let (set_highWaterMark : 'tags this -> float -> unit) =
      fun (x14805 : 'tags this) ->
        fun (x14806 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14805) "highWaterMark"
            (Ojs.float_to_js x14806)
    let (create : highWaterMark:float -> unit -> t) =
      fun ~highWaterMark:(x14808 : float) ->
        fun () ->
          let x14809 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x14809 "highWaterMark" (Ojs.float_to_js x14808);
          t_of_js x14809
    let cast_from = Obj.magic
  end
module CountQueuingStrategy =
  struct
    type t = [ `CountQueuingStrategy  | `QueuingStrategy of any ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14811 : Ojs.t) -> t_of_js x14811
    and t_0_to_js : t_0 -> Ojs.t = fun (x14810 : t) -> t_to_js x14810
    type tags = [ `CountQueuingStrategy  | `QueuingStrategy of any ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `CountQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14814 : Ojs.t) -> intf_of_js __tags_of_js x14814
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14812 : __tags intf) -> intf_to_js __tags_to_js x14812
    let (get_highWaterMark : 'tags this -> float) =
      fun (x14816 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14816) "highWaterMark")
    let (get_size : 'tags this -> QueuingStrategySize.t_0) =
      fun (x14818 : 'tags this) ->
        QueuingStrategySize.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14818) "size")
    let (create :
      highWaterMark:float -> size:QueuingStrategySize.t_0 -> unit -> t) =
      fun ~highWaterMark:(x14820 : float) ->
        fun ~size:(x14821 : QueuingStrategySize.t_0) ->
          fun () ->
            let x14822 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14822 "highWaterMark"
              (Ojs.float_to_js x14820);
            Ojs.set_prop_ascii x14822 "size"
              (QueuingStrategySize.t_0_to_js x14821);
            t_of_js x14822
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x14823 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x14823)|])
  end
module Console =
  struct
    type t = [ `Console ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14825 : Ojs.t) -> t_of_js x14825
    and t_0_to_js : t_0 -> Ojs.t = fun (x14824 : t) -> t_to_js x14824
    type tags = [ `Console ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Console ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14828 : Ojs.t) -> intf_of_js __tags_of_js x14828
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14826 : __tags intf) -> intf_to_js __tags_to_js x14826
    let (assert_ :
      'tags this -> ?condition:bool -> data:any list -> unit -> unit) =
      fun (x14835 : 'tags this) ->
        fun ?condition:(x14830 : bool option) ->
          fun ~data:(x14831 : any list) ->
            fun () ->
              ignore
                (let x14837 = this_to_js Obj.magic x14835 in
                 Ojs.call (Ojs.get_prop_ascii x14837 "assert") "apply"
                   [|x14837;((let x14832 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14830 with
                               | Some x14834 ->
                                   ignore
                                     (Ojs.call x14832 "push"
                                        [|(Ojs.bool_to_js x14834)|])
                               | None -> ());
                              List.iter
                                (fun (x14833 : any) ->
                                   ignore
                                     (Ojs.call x14832 "push"
                                        [|(any_to_js x14833)|])) x14831;
                              x14832))|])
    let (clear : 'tags this -> unit) =
      fun (x14838 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14838) "clear" [||])
    let (count : 'tags this -> ?label:string -> unit -> unit) =
      fun (x14843 : 'tags this) ->
        fun ?label:(x14840 : string option) ->
          fun () ->
            ignore
              (let x14845 = this_to_js Obj.magic x14843 in
               Ojs.call (Ojs.get_prop_ascii x14845 "count") "apply"
                 [|x14845;((let x14841 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14840 with
                             | Some x14842 ->
                                 ignore
                                   (Ojs.call x14841 "push"
                                      [|(Ojs.string_to_js x14842)|])
                             | None -> ());
                            x14841))|])
    let (countReset : 'tags this -> ?label:string -> unit -> unit) =
      fun (x14849 : 'tags this) ->
        fun ?label:(x14846 : string option) ->
          fun () ->
            ignore
              (let x14851 = this_to_js Obj.magic x14849 in
               Ojs.call (Ojs.get_prop_ascii x14851 "countReset") "apply"
                 [|x14851;((let x14847 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14846 with
                             | Some x14848 ->
                                 ignore
                                   (Ojs.call x14847 "push"
                                      [|(Ojs.string_to_js x14848)|])
                             | None -> ());
                            x14847))|])
    let (debug : 'tags this -> data:any list -> unit) =
      fun (x14855 : 'tags this) ->
        fun ~data:(x14852 : any list) ->
          ignore
            (let x14857 = this_to_js Obj.magic x14855 in
             Ojs.call (Ojs.get_prop_ascii x14857 "debug") "apply"
               [|x14857;((let x14853 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14854 : any) ->
                               ignore
                                 (Ojs.call x14853 "push"
                                    [|(any_to_js x14854)|])) x14852;
                          x14853))|])
    let (dir : 'tags this -> ?item:any -> ?options:any -> unit -> unit) =
      fun (x14863 : 'tags this) ->
        fun ?item:(x14858 : any option) ->
          fun ?options:(x14859 : any option) ->
            fun () ->
              ignore
                (let x14865 = this_to_js Obj.magic x14863 in
                 Ojs.call (Ojs.get_prop_ascii x14865 "dir") "apply"
                   [|x14865;((let x14860 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14858 with
                               | Some x14862 ->
                                   ignore
                                     (Ojs.call x14860 "push"
                                        [|(any_to_js x14862)|])
                               | None -> ());
                              (match x14859 with
                               | Some x14861 ->
                                   ignore
                                     (Ojs.call x14860 "push"
                                        [|(any_to_js x14861)|])
                               | None -> ());
                              x14860))|])
    let (dirxml : 'tags this -> data:any list -> unit) =
      fun (x14869 : 'tags this) ->
        fun ~data:(x14866 : any list) ->
          ignore
            (let x14871 = this_to_js Obj.magic x14869 in
             Ojs.call (Ojs.get_prop_ascii x14871 "dirxml") "apply"
               [|x14871;((let x14867 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14868 : any) ->
                               ignore
                                 (Ojs.call x14867 "push"
                                    [|(any_to_js x14868)|])) x14866;
                          x14867))|])
    let (error : 'tags this -> data:any list -> unit) =
      fun (x14875 : 'tags this) ->
        fun ~data:(x14872 : any list) ->
          ignore
            (let x14877 = this_to_js Obj.magic x14875 in
             Ojs.call (Ojs.get_prop_ascii x14877 "error") "apply"
               [|x14877;((let x14873 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14874 : any) ->
                               ignore
                                 (Ojs.call x14873 "push"
                                    [|(any_to_js x14874)|])) x14872;
                          x14873))|])
    let (group : 'tags this -> data:any list -> unit) =
      fun (x14881 : 'tags this) ->
        fun ~data:(x14878 : any list) ->
          ignore
            (let x14883 = this_to_js Obj.magic x14881 in
             Ojs.call (Ojs.get_prop_ascii x14883 "group") "apply"
               [|x14883;((let x14879 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14880 : any) ->
                               ignore
                                 (Ojs.call x14879 "push"
                                    [|(any_to_js x14880)|])) x14878;
                          x14879))|])
    let (groupCollapsed : 'tags this -> data:any list -> unit) =
      fun (x14887 : 'tags this) ->
        fun ~data:(x14884 : any list) ->
          ignore
            (let x14889 = this_to_js Obj.magic x14887 in
             Ojs.call (Ojs.get_prop_ascii x14889 "groupCollapsed") "apply"
               [|x14889;((let x14885 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14886 : any) ->
                               ignore
                                 (Ojs.call x14885 "push"
                                    [|(any_to_js x14886)|])) x14884;
                          x14885))|])
    let (groupEnd : 'tags this -> unit) =
      fun (x14890 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14890) "groupEnd" [||])
    let (info : 'tags this -> data:any list -> unit) =
      fun (x14895 : 'tags this) ->
        fun ~data:(x14892 : any list) ->
          ignore
            (let x14897 = this_to_js Obj.magic x14895 in
             Ojs.call (Ojs.get_prop_ascii x14897 "info") "apply"
               [|x14897;((let x14893 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14894 : any) ->
                               ignore
                                 (Ojs.call x14893 "push"
                                    [|(any_to_js x14894)|])) x14892;
                          x14893))|])
    let (log : 'tags this -> data:any list -> unit) =
      fun (x14901 : 'tags this) ->
        fun ~data:(x14898 : any list) ->
          ignore
            (let x14903 = this_to_js Obj.magic x14901 in
             Ojs.call (Ojs.get_prop_ascii x14903 "log") "apply"
               [|x14903;((let x14899 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14900 : any) ->
                               ignore
                                 (Ojs.call x14899 "push"
                                    [|(any_to_js x14900)|])) x14898;
                          x14899))|])
    let (table :
      'tags this ->
        ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun (x14910 : 'tags this) ->
        fun ?tabularData:(x14904 : any option) ->
          fun ?properties:(x14905 : string list option) ->
            fun () ->
              ignore
                (let x14912 = this_to_js Obj.magic x14910 in
                 Ojs.call (Ojs.get_prop_ascii x14912 "table") "apply"
                   [|x14912;((let x14906 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14904 with
                               | Some x14909 ->
                                   ignore
                                     (Ojs.call x14906 "push"
                                        [|(any_to_js x14909)|])
                               | None -> ());
                              (match x14905 with
                               | Some x14907 ->
                                   ignore
                                     (Ojs.call x14906 "push"
                                        [|(Ojs.list_to_js Ojs.string_to_js
                                             x14907)|])
                               | None -> ());
                              x14906))|])
    let (time : 'tags this -> ?label:string -> unit -> unit) =
      fun (x14916 : 'tags this) ->
        fun ?label:(x14913 : string option) ->
          fun () ->
            ignore
              (let x14918 = this_to_js Obj.magic x14916 in
               Ojs.call (Ojs.get_prop_ascii x14918 "time") "apply"
                 [|x14918;((let x14914 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14913 with
                             | Some x14915 ->
                                 ignore
                                   (Ojs.call x14914 "push"
                                      [|(Ojs.string_to_js x14915)|])
                             | None -> ());
                            x14914))|])
    let (timeEnd : 'tags this -> ?label:string -> unit -> unit) =
      fun (x14922 : 'tags this) ->
        fun ?label:(x14919 : string option) ->
          fun () ->
            ignore
              (let x14924 = this_to_js Obj.magic x14922 in
               Ojs.call (Ojs.get_prop_ascii x14924 "timeEnd") "apply"
                 [|x14924;((let x14920 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14919 with
                             | Some x14921 ->
                                 ignore
                                   (Ojs.call x14920 "push"
                                      [|(Ojs.string_to_js x14921)|])
                             | None -> ());
                            x14920))|])
    let (timeLog :
      'tags this -> ?label:string -> data:any list -> unit -> unit) =
      fun (x14930 : 'tags this) ->
        fun ?label:(x14925 : string option) ->
          fun ~data:(x14926 : any list) ->
            fun () ->
              ignore
                (let x14932 = this_to_js Obj.magic x14930 in
                 Ojs.call (Ojs.get_prop_ascii x14932 "timeLog") "apply"
                   [|x14932;((let x14927 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14925 with
                               | Some x14929 ->
                                   ignore
                                     (Ojs.call x14927 "push"
                                        [|(Ojs.string_to_js x14929)|])
                               | None -> ());
                              List.iter
                                (fun (x14928 : any) ->
                                   ignore
                                     (Ojs.call x14927 "push"
                                        [|(any_to_js x14928)|])) x14926;
                              x14927))|])
    let (timeStamp : 'tags this -> ?label:string -> unit -> unit) =
      fun (x14936 : 'tags this) ->
        fun ?label:(x14933 : string option) ->
          fun () ->
            ignore
              (let x14938 = this_to_js Obj.magic x14936 in
               Ojs.call (Ojs.get_prop_ascii x14938 "timeStamp") "apply"
                 [|x14938;((let x14934 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14933 with
                             | Some x14935 ->
                                 ignore
                                   (Ojs.call x14934 "push"
                                      [|(Ojs.string_to_js x14935)|])
                             | None -> ());
                            x14934))|])
    let (trace : 'tags this -> data:any list -> unit) =
      fun (x14942 : 'tags this) ->
        fun ~data:(x14939 : any list) ->
          ignore
            (let x14944 = this_to_js Obj.magic x14942 in
             Ojs.call (Ojs.get_prop_ascii x14944 "trace") "apply"
               [|x14944;((let x14940 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14941 : any) ->
                               ignore
                                 (Ojs.call x14940 "push"
                                    [|(any_to_js x14941)|])) x14939;
                          x14940))|])
    let (warn : 'tags this -> data:any list -> unit) =
      fun (x14948 : 'tags this) ->
        fun ~data:(x14945 : any list) ->
          ignore
            (let x14950 = this_to_js Obj.magic x14948 in
             Ojs.call (Ojs.get_prop_ascii x14950 "warn") "apply"
               [|x14950;((let x14946 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14947 : any) ->
                               ignore
                                 (Ojs.call x14946 "push"
                                    [|(any_to_js x14947)|])) x14945;
                          x14946))|])
    let cast_from = Obj.magic
  end
module CanvasPattern =
  struct
    type t = [ `CanvasPattern ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14952 : Ojs.t) -> t_of_js x14952
    and t_0_to_js : t_0 -> Ojs.t = fun (x14951 : t) -> t_to_js x14951
    type tags = [ `CanvasPattern ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14955 : Ojs.t) -> intf_of_js __tags_of_js x14955
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14953 : __tags intf) -> intf_to_js __tags_to_js x14953
    let (setTransform :
      'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x14960 : 'tags this) ->
        fun ?transform:(x14957 : DOMMatrix2DInit.t option) ->
          fun () ->
            ignore
              (let x14962 = this_to_js Obj.magic x14960 in
               Ojs.call (Ojs.get_prop_ascii x14962 "setTransform") "apply"
                 [|x14962;((let x14958 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14957 with
                             | Some x14959 ->
                                 ignore
                                   (Ojs.call x14958 "push"
                                      [|(DOMMatrix2DInit.t_to_js x14959)|])
                             | None -> ());
                            x14958))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasPattern") [||])
  end
module CanvasGradient =
  struct
    type t = [ `CanvasGradient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14964 : Ojs.t) -> t_of_js x14964
    and t_0_to_js : t_0 -> Ojs.t = fun (x14963 : t) -> t_to_js x14963
    type tags = [ `CanvasGradient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14967 : Ojs.t) -> intf_of_js __tags_of_js x14967
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14965 : __tags intf) -> intf_to_js __tags_to_js x14965
    let (addColorStop : 'tags this -> offset:float -> color:string -> unit) =
      fun (x14971 : 'tags this) ->
        fun ~offset:(x14969 : float) ->
          fun ~color:(x14970 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14971) "addColorStop"
                 [|(Ojs.float_to_js x14969);(Ojs.string_to_js x14970)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CanvasGradient") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasGradient") [||])
  end
module ByteLengthQueuingStrategy =
  struct
    type t =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14974 : Ojs.t) -> t_of_js x14974
    and t_0_to_js : t_0 -> Ojs.t = fun (x14973 : t) -> t_to_js x14973
    type tags =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14977 : Ojs.t) -> intf_of_js __tags_of_js x14977
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14975 : __tags intf) -> intf_to_js __tags_to_js x14975
    let (get_highWaterMark : 'tags this -> float) =
      fun (x14979 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14979) "highWaterMark")
    let (get_size : 'tags this -> ArrayBufferView.t_0 QueuingStrategySize.t)
      =
      fun (x14981 : 'tags this) ->
        QueuingStrategySize.t_of_js ArrayBufferView.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14981) "size")
    let (create :
      highWaterMark:float ->
        size:ArrayBufferView.t_0 QueuingStrategySize.t -> unit -> t)
      =
      fun ~highWaterMark:(x14984 : float) ->
        fun ~size:(x14985 : ArrayBufferView.t_0 QueuingStrategySize.t) ->
          fun () ->
            let x14986 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x14986 "highWaterMark"
              (Ojs.float_to_js x14984);
            Ojs.set_prop_ascii x14986 "size"
              (QueuingStrategySize.t_to_js ArrayBufferView.t_0_to_js x14985);
            t_of_js x14986
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             "prototype")
    let (create' : QueuingStrategyInit.t -> t) =
      fun (x14988 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x14988)|])
  end
module BroadcastChannelEventMap =
  struct
    type t = [ `BroadcastChannelEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14990 : Ojs.t) -> t_of_js x14990
    and t_0_to_js : t_0 -> Ojs.t = fun (x14989 : t) -> t_to_js x14989
    type tags = [ `BroadcastChannelEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14993 : Ojs.t) -> intf_of_js __tags_of_js x14993
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14991 : __tags intf) -> intf_to_js __tags_to_js x14991
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14995 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14995) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14997 : 'tags this) ->
        fun (x14998 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14997) "message"
            (MessageEvent.t_0_to_js x14998)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x15000 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15000) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x15002 : 'tags this) ->
        fun (x15003 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15002) "messageerror"
            (MessageEvent.t_0_to_js x15003)
    let (create :
      message:MessageEvent.t_0 -> messageerror:MessageEvent.t_0 -> unit -> t)
      =
      fun ~message:(x15005 : MessageEvent.t_0) ->
        fun ~messageerror:(x15006 : MessageEvent.t_0) ->
          fun () ->
            let x15007 = Ojs.empty_obj () in
            Ojs.set_prop_ascii x15007 "message"
              (MessageEvent.t_0_to_js x15005);
            Ojs.set_prop_ascii x15007 "messageerror"
              (MessageEvent.t_0_to_js x15006);
            t_of_js x15007
    let cast_from = Obj.magic
  end
module BroadcastChannel =
  struct
    type t = [ `BroadcastChannel  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15009 : Ojs.t) -> t_of_js x15009
    and t_0_to_js : t_0 -> Ojs.t = fun (x15008 : t) -> t_to_js x15008
    type tags = [ `BroadcastChannel  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15012 : Ojs.t) -> intf_of_js __tags_of_js x15012
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15010 : __tags intf) -> intf_to_js __tags_to_js x15010
    let (get_name : 'tags this -> string) =
      fun (x15014 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15014) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x15016 : 'tags this) ->
        or_null_of_js
          (fun (x15018 : Ojs.t) ->
             fun ~this:(x15019 : t) ->
               fun ~ev:(x15020 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x15018
                      [|(t_to_js x15019);(MessageEvent.t_0_to_js x15020)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15016) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x15021 : 'tags this) ->
        fun (x15022 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15021) "onmessage"
            (or_null_to_js
               (fun (x15023 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15024 : Ojs.t) ->
                       fun (x15025 : Ojs.t) ->
                         any_to_js
                           (x15023 ~this:(t_of_js x15024)
                              ~ev:(MessageEvent.t_0_of_js x15025)))) x15022)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x15027 : 'tags this) ->
        or_null_of_js
          (fun (x15029 : Ojs.t) ->
             fun ~this:(x15030 : t) ->
               fun ~ev:(x15031 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x15029
                      [|(t_to_js x15030);(MessageEvent.t_0_to_js x15031)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15027) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x15032 : 'tags this) ->
        fun (x15033 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15032) "onmessageerror"
            (or_null_to_js
               (fun (x15034 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x15035 : Ojs.t) ->
                       fun (x15036 : Ojs.t) ->
                         any_to_js
                           (x15034 ~this:(t_of_js x15035)
                              ~ev:(MessageEvent.t_0_of_js x15036)))) x15033)
    let (close : 'tags this -> unit) =
      fun (x15038 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15038) "close" [||])
    let (postMessage : 'tags this -> message:any -> unit) =
      fun (x15041 : 'tags this) ->
        fun ~message:(x15040 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x15041) "postMessage"
               [|(any_to_js x15040)|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x15051 : 'tags this) ->
        fun ~type_:(x15043 : 'K) ->
          fun ~listener:(x15044 : this:t -> ev:any -> any) ->
            fun
              ?options:(x15045 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x15053 = this_to_js Obj.magic x15051 in
                   Ojs.call (Ojs.get_prop_ascii x15053 "addEventListener")
                     "apply"
                     [|x15053;((let x15046 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15046 "push"
                                     [|(Obj.magic x15043)|]);
                                ignore
                                  (Ojs.call x15046 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15049 : Ojs.t) ->
                                             fun (x15050 : Ojs.t) ->
                                               any_to_js
                                                 (x15044
                                                    ~this:(t_of_js x15049)
                                                    ~ev:(any_of_js x15050))))|]);
                                (match x15045 with
                                 | Some x15047 ->
                                     ignore
                                       (Ojs.call x15046 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x15047)|])
                                 | None -> ());
                                x15046))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x15060 : 'tags this) ->
        fun ~type_:(x15054 : string) ->
          fun ~listener:(x15055 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x15056 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x15062 = this_to_js Obj.magic x15060 in
                   Ojs.call (Ojs.get_prop_ascii x15062 "addEventListener")
                     "apply"
                     [|x15062;((let x15057 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15057 "push"
                                     [|(Ojs.string_to_js x15054)|]);
                                ignore
                                  (Ojs.call x15057 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15055)|]);
                                (match x15056 with
                                 | Some x15058 ->
                                     ignore
                                       (Ojs.call x15057 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x15058)|])
                                 | None -> ());
                                x15057))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x15071 : 'tags this) ->
        fun ~type_:(x15063 : 'K) ->
          fun ~listener:(x15064 : this:t -> ev:any -> any) ->
            fun ?options:(x15065 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x15073 = this_to_js Obj.magic x15071 in
                   Ojs.call (Ojs.get_prop_ascii x15073 "removeEventListener")
                     "apply"
                     [|x15073;((let x15066 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15066 "push"
                                     [|(Obj.magic x15063)|]);
                                ignore
                                  (Ojs.call x15066 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x15069 : Ojs.t) ->
                                             fun (x15070 : Ojs.t) ->
                                               any_to_js
                                                 (x15064
                                                    ~this:(t_of_js x15069)
                                                    ~ev:(any_of_js x15070))))|]);
                                (match x15065 with
                                 | Some x15067 ->
                                     ignore
                                       (Ojs.call x15066 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x15067)|])
                                 | None -> ());
                                x15066))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x15080 : 'tags this) ->
        fun ~type_:(x15074 : string) ->
          fun ~listener:(x15075 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x15076 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x15082 = this_to_js Obj.magic x15080 in
                   Ojs.call (Ojs.get_prop_ascii x15082 "removeEventListener")
                     "apply"
                     [|x15082;((let x15077 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15077 "push"
                                     [|(Ojs.string_to_js x15074)|]);
                                ignore
                                  (Ojs.call x15077 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x15075)|]);
                                (match x15076 with
                                 | Some x15078 ->
                                     ignore
                                       (Ojs.call x15077 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x15078)|])
                                 | None -> ());
                                x15077))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BroadcastChannel") "prototype")
    let (create : string -> t) =
      fun (x15083 : string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
             [|(Ojs.string_to_js x15083)|])
  end
module AbortSignalEventMap =
  struct
    type t = [ `AbortSignalEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15085 : Ojs.t) -> t_of_js x15085
    and t_0_to_js : t_0 -> Ojs.t = fun (x15084 : t) -> t_to_js x15084
    type tags = [ `AbortSignalEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15088 : Ojs.t) -> intf_of_js __tags_of_js x15088
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15086 : __tags intf) -> intf_to_js __tags_to_js x15086
    let (get_abort : 'tags this -> Event.t) =
      fun (x15090 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15090) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x15092 : 'tags this) ->
        fun (x15093 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x15092) "abort"
            (Event.t_to_js x15093)
    let (create : abort:Event.t -> unit -> t) =
      fun ~abort:(x15095 : Event.t) ->
        fun () ->
          let x15096 = Ojs.empty_obj () in
          Ojs.set_prop_ascii x15096 "abort" (Event.t_to_js x15095);
          t_of_js x15096
    let cast_from = Obj.magic
  end
module AbortController =
  struct
    type t = [ `AbortController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x15098 : Ojs.t) -> t_of_js x15098
    and t_0_to_js : t_0 -> Ojs.t = fun (x15097 : t) -> t_to_js x15097
    type tags = [ `AbortController ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x15101 : Ojs.t) -> intf_of_js __tags_of_js x15101
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x15099 : __tags intf) -> intf_to_js __tags_to_js x15099
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x15103 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x15103) "signal")
    let (abort : 'tags this -> unit) =
      fun (x15105 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x15105) "abort" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AbortController") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortController") [||])
  end
let (importScripts : string list -> unit) =
  fun (x15107 : string list) ->
    ignore
      (let x15110 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x15110 "importScripts") "apply"
         [|x15110;((let x15108 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x15109 : string) ->
                         ignore
                           (Ojs.call x15108 "push"
                              [|(Ojs.string_to_js x15109)|])) x15107;
                    x15108))|])
let (console : unit -> Console.t) =
  fun () -> Console.t_of_js (Ojs.get_prop_ascii Ojs.global "console")
let (name : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "name")
let (onmessage :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x15111 : Ojs.t) ->
         fun ~this:(x15112 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15113 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x15111
                  [|(DedicatedWorkerGlobalScope.t_to_js x15112);(MessageEvent.t_0_to_js
                                                                   x15113)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessage")
let (onmessageerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x15114 : Ojs.t) ->
         fun ~this:(x15115 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15116 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x15114
                  [|(DedicatedWorkerGlobalScope.t_to_js x15115);(MessageEvent.t_0_to_js
                                                                   x15116)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessageerror")
let (close : unit -> unit) =
  fun () -> ignore (Ojs.call Ojs.global "close" [||])
let (postMessage : message:any -> transfer:Transferable.t list -> unit) =
  fun ~message:(x15117 : any) ->
    fun ~transfer:(x15118 : Transferable.t list) ->
      ignore
        (Ojs.call Ojs.global "postMessage"
           [|(any_to_js x15117);(Ojs.list_to_js Transferable.t_to_js x15118)|])
let (postMessage' :
  message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit) =
  fun ~message:(x15120 : any) ->
    fun ?options:(x15121 : StructuredSerializeOptions.t option) ->
      fun () ->
        ignore
          (let x15124 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x15124 "postMessage") "apply"
             [|x15124;((let x15122 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x15122 "push" [|(any_to_js x15120)|]);
                        (match x15121 with
                         | Some x15123 ->
                             ignore
                               (Ojs.call x15122 "push"
                                  [|(StructuredSerializeOptions.t_to_js
                                       x15123)|])
                         | None -> ());
                        x15122))|])
let (dispatchEvent : Event.t -> bool) =
  fun (x15125 : Event.t) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "dispatchEvent" [|(Event.t_to_js x15125)|])
let (location : unit -> WorkerLocation.t) =
  fun () -> WorkerLocation.t_of_js (Ojs.get_prop_ascii Ojs.global "location")
let (navigator : unit -> WorkerNavigator.t) =
  fun () ->
    WorkerNavigator.t_of_js (Ojs.get_prop_ascii Ojs.global "navigator")
let (onerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:ErrorEvent.t -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x15126 : Ojs.t) ->
         fun ~this:(x15127 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15128 : ErrorEvent.t) ->
             any_of_js
               (Ojs.apply x15126
                  [|(DedicatedWorkerGlobalScope.t_to_js x15127);(ErrorEvent.t_to_js
                                                                   x15128)|]))
      (Ojs.get_prop_ascii Ojs.global "onerror")
let (onlanguagechange :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x15129 : Ojs.t) ->
         fun ~this:(x15130 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15131 : Event.t) ->
             any_of_js
               (Ojs.apply x15129
                  [|(DedicatedWorkerGlobalScope.t_to_js x15130);(Event.t_to_js
                                                                   x15131)|]))
      (Ojs.get_prop_ascii Ojs.global "onlanguagechange")
let (onoffline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x15132 : Ojs.t) ->
         fun ~this:(x15133 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15134 : Event.t) ->
             any_of_js
               (Ojs.apply x15132
                  [|(DedicatedWorkerGlobalScope.t_to_js x15133);(Event.t_to_js
                                                                   x15134)|]))
      (Ojs.get_prop_ascii Ojs.global "onoffline")
let (ononline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x15135 : Ojs.t) ->
         fun ~this:(x15136 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15137 : Event.t) ->
             any_of_js
               (Ojs.apply x15135
                  [|(DedicatedWorkerGlobalScope.t_to_js x15136);(Event.t_to_js
                                                                   x15137)|]))
      (Ojs.get_prop_ascii Ojs.global "ononline")
let (onrejectionhandled :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x15138 : Ojs.t) ->
         fun ~this:(x15139 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15140 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x15138
                  [|(DedicatedWorkerGlobalScope.t_to_js x15139);(PromiseRejectionEvent.t_to_js
                                                                   x15140)|]))
      (Ojs.get_prop_ascii Ojs.global "onrejectionhandled")
let (onunhandledrejection :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x15141 : Ojs.t) ->
         fun ~this:(x15142 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x15143 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x15141
                  [|(DedicatedWorkerGlobalScope.t_to_js x15142);(PromiseRejectionEvent.t_to_js
                                                                   x15143)|]))
      (Ojs.get_prop_ascii Ojs.global "onunhandledrejection")
let (self : unit -> (WorkerGlobalScope.t, any) intersection2) =
  fun () ->
    intersection2_of_js WorkerGlobalScope.t_of_js any_of_js
      (Ojs.get_prop_ascii Ojs.global "self")
let (importScripts' : URL.t or_string list -> unit) =
  fun (x15146 : URL.t or_string list) ->
    ignore
      (let x15150 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x15150 "importScripts") "apply"
         [|x15150;((let x15147 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x15148 : URL.t or_string) ->
                         ignore
                           (Ojs.call x15147 "push"
                              [|(or_string_to_js URL.t_to_js x15148)|]))
                      x15146;
                    x15147))|])
let (fonts : unit -> FontFaceSet.t) =
  fun () -> FontFaceSet.t_of_js (Ojs.get_prop_ascii Ojs.global "fonts")
let (caches : unit -> CacheStorage.t) =
  fun () -> CacheStorage.t_of_js (Ojs.get_prop_ascii Ojs.global "caches")
let (crossOriginIsolated : unit -> bool) =
  fun () ->
    Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "crossOriginIsolated")
let (crypto : unit -> Crypto.t) =
  fun () -> Crypto.t_of_js (Ojs.get_prop_ascii Ojs.global "crypto")
let (indexedDB : unit -> IDBFactory.t) =
  fun () -> IDBFactory.t_of_js (Ojs.get_prop_ascii Ojs.global "indexedDB")
let (isSecureContext : unit -> bool) =
  fun () -> Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "isSecureContext")
let (origin : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "origin")
let (performance : unit -> Performance.t) =
  fun () -> Performance.t_of_js (Ojs.get_prop_ascii Ojs.global "performance")
let (atob : string -> string) =
  fun (x15151 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "atob" [|(Ojs.string_to_js x15151)|])
let (btoa : string -> string) =
  fun (x15152 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "btoa" [|(Ojs.string_to_js x15152)|])
let (clearInterval : ?handle:float -> unit -> unit) =
  fun ?handle:(x15153 : float option) ->
    fun () ->
      ignore
        (let x15156 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x15156 "clearInterval") "apply"
           [|x15156;((let x15154 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15153 with
                       | Some x15155 ->
                           ignore
                             (Ojs.call x15154 "push"
                                [|(Ojs.float_to_js x15155)|])
                       | None -> ());
                      x15154))|])
let (clearTimeout : ?handle:float -> unit -> unit) =
  fun ?handle:(x15157 : float option) ->
    fun () ->
      ignore
        (let x15160 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x15160 "clearTimeout") "apply"
           [|x15160;((let x15158 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x15157 with
                       | Some x15159 ->
                           ignore
                             (Ojs.call x15158 "push"
                                [|(Ojs.float_to_js x15159)|])
                       | None -> ());
                      x15158))|])
let (createImageBitmap :
  image:ImageBitmapSource.t ->
    ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x15161 : ImageBitmapSource.t) ->
    fun ?options:(x15162 : ImageBitmapOptions.t option) ->
      fun () ->
        Promise.t_1_of_js ImageBitmap.t_of_js
          (let x15165 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x15165 "createImageBitmap") "apply"
             [|x15165;((let x15163 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x15163 "push"
                             [|(ImageBitmapSource.t_to_js x15161)|]);
                        (match x15162 with
                         | Some x15164 ->
                             ignore
                               (Ojs.call x15163 "push"
                                  [|(ImageBitmapOptions.t_to_js x15164)|])
                         | None -> ());
                        x15163))|])
let (createImageBitmap' :
  image:ImageBitmapSource.t ->
    sx:float ->
      sy:float ->
        sw:float ->
          sh:float ->
            ?options:ImageBitmapOptions.t ->
              unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x15167 : ImageBitmapSource.t) ->
    fun ~sx:(x15168 : float) ->
      fun ~sy:(x15169 : float) ->
        fun ~sw:(x15170 : float) ->
          fun ~sh:(x15171 : float) ->
            fun ?options:(x15172 : ImageBitmapOptions.t option) ->
              fun () ->
                Promise.t_1_of_js ImageBitmap.t_of_js
                  (let x15175 = Ojs.global in
                   Ojs.call (Ojs.get_prop_ascii x15175 "createImageBitmap")
                     "apply"
                     [|x15175;((let x15173 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x15173 "push"
                                     [|(ImageBitmapSource.t_to_js x15167)|]);
                                ignore
                                  (Ojs.call x15173 "push"
                                     [|(Ojs.float_to_js x15168)|]);
                                ignore
                                  (Ojs.call x15173 "push"
                                     [|(Ojs.float_to_js x15169)|]);
                                ignore
                                  (Ojs.call x15173 "push"
                                     [|(Ojs.float_to_js x15170)|]);
                                ignore
                                  (Ojs.call x15173 "push"
                                     [|(Ojs.float_to_js x15171)|]);
                                (match x15172 with
                                 | Some x15174 ->
                                     ignore
                                       (Ojs.call x15173 "push"
                                          [|(ImageBitmapOptions.t_to_js
                                               x15174)|])
                                 | None -> ());
                                x15173))|])
let (fetch :
  input:RequestInfo.t ->
    ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
  =
  fun ~input:(x15177 : RequestInfo.t) ->
    fun ?init:(x15178 : RequestInit.t option) ->
      fun () ->
        Promise.t_1_of_js Response.t_of_js
          (let x15181 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x15181 "fetch") "apply"
             [|x15181;((let x15179 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x15179 "push"
                             [|(RequestInfo.t_to_js x15177)|]);
                        (match x15178 with
                         | Some x15180 ->
                             ignore
                               (Ojs.call x15179 "push"
                                  [|(RequestInit.t_to_js x15180)|])
                         | None -> ());
                        x15179))|])
let (queueMicrotask : VoidFunction.t -> unit) =
  fun (x15183 : VoidFunction.t) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask" [|(VoidFunction.t_to_js x15183)|])
let (setInterval :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x15184 : TimerHandler.t) ->
    fun ?timeout:(x15185 : float option) ->
      fun ~arguments:(x15186 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x15190 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15190 "setInterval") "apply"
               [|x15190;((let x15187 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15187 "push"
                               [|(TimerHandler.t_to_js x15184)|]);
                          (match x15185 with
                           | Some x15189 ->
                               ignore
                                 (Ojs.call x15187 "push"
                                    [|(Ojs.float_to_js x15189)|])
                           | None -> ());
                          List.iter
                            (fun (x15188 : any) ->
                               ignore
                                 (Ojs.call x15187 "push"
                                    [|(any_to_js x15188)|])) x15186;
                          x15187))|])
let (setTimeout :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x15191 : TimerHandler.t) ->
    fun ?timeout:(x15192 : float option) ->
      fun ~arguments:(x15193 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x15197 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15197 "setTimeout") "apply"
               [|x15197;((let x15194 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15194 "push"
                               [|(TimerHandler.t_to_js x15191)|]);
                          (match x15192 with
                           | Some x15196 ->
                               ignore
                                 (Ojs.call x15194 "push"
                                    [|(Ojs.float_to_js x15196)|])
                           | None -> ());
                          List.iter
                            (fun (x15195 : any) ->
                               ignore
                                 (Ojs.call x15194 "push"
                                    [|(any_to_js x15195)|])) x15193;
                          x15194))|])
let (cancelAnimationFrame : float -> unit) =
  fun (x15198 : float) ->
    ignore
      (Ojs.call Ojs.global "cancelAnimationFrame"
         [|(Ojs.float_to_js x15198)|])
let (requestAnimationFrame : FrameRequestCallback.t -> float) =
  fun (x15199 : FrameRequestCallback.t) ->
    Ojs.float_of_js
      (Ojs.call Ojs.global "requestAnimationFrame"
         [|(FrameRequestCallback.t_to_js x15199)|])
let (addEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x15200 : 'K) ->
    fun
      ~listener:(x15201 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun ?options:(x15202 : AddEventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x15208 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15208 "addEventListener") "apply"
               [|x15208;((let x15203 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15203 "push" [|(Obj.magic x15200)|]);
                          ignore
                            (Ojs.call x15203 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x15206 : Ojs.t) ->
                                       fun (x15207 : Ojs.t) ->
                                         any_to_js
                                           (x15201
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x15206)
                                              ~ev:(any_of_js x15207))))|]);
                          (match x15202 with
                           | Some x15204 ->
                               ignore
                                 (Ojs.call x15203 "push"
                                    [|(or_boolean_to_js
                                         AddEventListenerOptions.t_to_js
                                         x15204)|])
                           | None -> ());
                          x15203))|])
let (addEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x15209 : string) ->
    fun ~listener:(x15210 : EventListenerOrEventListenerObject.t) ->
      fun ?options:(x15211 : AddEventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x15215 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15215 "addEventListener") "apply"
               [|x15215;((let x15212 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15212 "push"
                               [|(Ojs.string_to_js x15209)|]);
                          ignore
                            (Ojs.call x15212 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x15210)|]);
                          (match x15211 with
                           | Some x15213 ->
                               ignore
                                 (Ojs.call x15212 "push"
                                    [|(or_boolean_to_js
                                         AddEventListenerOptions.t_to_js
                                         x15213)|])
                           | None -> ());
                          x15212))|])
let (removeEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:EventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x15216 : 'K) ->
    fun
      ~listener:(x15217 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun ?options:(x15218 : EventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x15224 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15224 "removeEventListener")
               "apply"
               [|x15224;((let x15219 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15219 "push" [|(Obj.magic x15216)|]);
                          ignore
                            (Ojs.call x15219 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x15222 : Ojs.t) ->
                                       fun (x15223 : Ojs.t) ->
                                         any_to_js
                                           (x15217
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x15222)
                                              ~ev:(any_of_js x15223))))|]);
                          (match x15218 with
                           | Some x15220 ->
                               ignore
                                 (Ojs.call x15219 "push"
                                    [|(or_boolean_to_js
                                         EventListenerOptions.t_to_js x15220)|])
                           | None -> ());
                          x15219))|])
let (removeEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:EventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x15225 : string) ->
    fun ~listener:(x15226 : EventListenerOrEventListenerObject.t) ->
      fun ?options:(x15227 : EventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x15231 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x15231 "removeEventListener")
               "apply"
               [|x15231;((let x15228 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x15228 "push"
                               [|(Ojs.string_to_js x15225)|]);
                          ignore
                            (Ojs.call x15228 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x15226)|]);
                          (match x15227 with
                           | Some x15229 ->
                               ignore
                                 (Ojs.call x15228 "push"
                                    [|(or_boolean_to_js
                                         EventListenerOptions.t_to_js x15229)|])
                           | None -> ());
                          x15228))|])
